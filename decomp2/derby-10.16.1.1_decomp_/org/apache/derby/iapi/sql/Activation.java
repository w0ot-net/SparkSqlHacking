package org.apache.derby.iapi.sql;

import java.sql.SQLWarning;
import java.util.Enumeration;
import java.util.Vector;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.conn.SQLSessionContext;
import org.apache.derby.iapi.sql.depend.Dependent;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.sql.execute.ConstantAction;
import org.apache.derby.iapi.sql.execute.CursorResultSet;
import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
import org.apache.derby.iapi.sql.execute.ExecRow;
import org.apache.derby.iapi.sql.execute.ExecutionFactory;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.sql.execute.TemporaryRowHolder;
import org.apache.derby.iapi.store.access.ConglomerateController;
import org.apache.derby.iapi.store.access.ScanController;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.iapi.types.DataValueFactory;
import org.apache.derby.iapi.types.NumberDataValue;
import org.apache.derby.iapi.types.RowLocation;
import org.apache.derby.shared.common.error.StandardException;

public interface Activation extends Dependent {
   void reset() throws StandardException;

   void setCursorName(String var1);

   boolean checkIfThisActivationHasHoldCursor(String var1);

   ParameterValueSet getParameterValueSet();

   void setParameters(ParameterValueSet var1, DataTypeDescriptor[] var2) throws StandardException;

   ResultSet execute() throws StandardException;

   void close() throws StandardException;

   boolean isClosed();

   void setSingleExecution();

   boolean isSingleExecution();

   SQLWarning getWarnings();

   void addWarning(SQLWarning var1);

   void clearWarnings();

   LanguageConnectionContext getLanguageConnectionContext();

   TransactionController getTransactionController();

   ResultSet getResultSet();

   void setCurrentRow(ExecRow var1, int var2);

   Row getCurrentRow(int var1);

   void clearCurrentRow(int var1);

   ExecPreparedStatement getPreparedStatement();

   void checkStatementValidity() throws StandardException;

   ResultDescription getResultDescription();

   DataValueFactory getDataValueFactory();

   ExecutionFactory getExecutionFactory();

   RowLocation getRowLocationTemplate(int var1);

   int getNumSubqueries();

   String getCursorName();

   boolean getResultSetHoldability();

   void setResultSetHoldability(boolean var1);

   void setAutoGeneratedKeysResultsetInfo(int[] var1, String[] var2);

   boolean getAutoGeneratedKeysResultsetMode();

   int[] getAutoGeneratedKeysColumnIndexes();

   String[] getAutoGeneratedKeysColumnNames();

   void markUnused();

   boolean isInUse();

   void informOfRowCount(NoPutResultSet var1, long var2) throws StandardException;

   ConglomerateController getHeapConglomerateController();

   void setHeapConglomerateController(ConglomerateController var1);

   void clearHeapConglomerateController();

   ScanController getIndexScanController();

   void setIndexScanController(ScanController var1);

   long getIndexConglomerateNumber();

   void setIndexConglomerateNumber(long var1);

   void clearIndexScanInfo();

   void setForCreateTable();

   boolean getForCreateTable();

   void setDDLTableDescriptor(TableDescriptor var1);

   TableDescriptor getDDLTableDescriptor();

   void setMaxRows(long var1);

   long getMaxRows();

   boolean isCursorActivation();

   void setTargetVTI(java.sql.ResultSet var1);

   java.sql.ResultSet getTargetVTI();

   ConstantAction pushConstantAction(ConstantAction var1);

   ConstantAction popConstantAction();

   ConstantAction getConstantAction();

   void setParentResultSet(TemporaryRowHolder var1, String var2);

   Vector getParentResultSet(String var1);

   void clearParentResultSets();

   Enumeration getParentResultSetKeys();

   void setForUpdateIndexScan(CursorResultSet var1);

   CursorResultSet getForUpdateIndexScan();

   java.sql.ResultSet[][] getDynamicResults();

   int getMaxDynamicResults();

   SQLSessionContext getSQLSessionContextForChildren();

   SQLSessionContext setupSQLSessionContextForChildren(boolean var1);

   void setParentActivation(Activation var1);

   Activation getParentActivation();

   NumberDataValue getCurrentValueAndAdvance(String var1, int var2) throws StandardException;
}
