package org.apache.derby.impl.jdbc;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Vector;
import org.apache.derby.iapi.jdbc.BrokeredConnectionControl;
import org.apache.derby.iapi.jdbc.EnginePreparedStatement;
import org.apache.derby.iapi.services.loader.GeneratedClass;
import org.apache.derby.iapi.sql.Activation;
import org.apache.derby.iapi.sql.ParameterValueSet;
import org.apache.derby.iapi.sql.PreparedStatement;
import org.apache.derby.iapi.sql.ResultDescription;
import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.iapi.types.DataValueDescriptor;
import org.apache.derby.iapi.types.RawToBinaryFormatStream;
import org.apache.derby.iapi.types.ReaderToUTF8Stream;
import org.apache.derby.iapi.types.StringDataValue;
import org.apache.derby.iapi.types.VariableSizeDataValue;
import org.apache.derby.iapi.util.InterruptStatus;
import org.apache.derby.shared.common.error.StandardException;

public class EmbedPreparedStatement extends EmbedStatement implements EnginePreparedStatement {
   protected ResultSetMetaData rMetaData;
   private String gcDuringGetMetaData;
   protected PreparedStatement preparedStatement;
   private Activation activation;
   private Boolean usePreTenFiveHdrFormat;
   private BrokeredConnectionControl bcc = null;

   public EmbedPreparedStatement(EmbedConnection var1, String var2, boolean var3, int var4, int var5, int var6, int var7, int[] var8, String[] var9) throws SQLException {
      super(var1, var3, var4, var5, var6);
      this.isPoolable = true;
      if (var2 == null) {
         throw newSQLException("XJ067.S", new Object[0]);
      } else {
         this.SQLText = var2;

         try {
            this.preparedStatement = this.lcc.prepareInternalStatement(this.lcc.getDefaultSchema(), var2, var5 == 1007, var3);
            this.addWarning(this.preparedStatement.getCompileTimeWarnings());
            this.activation = this.preparedStatement.getActivation(this.lcc, var4 == 1004);
            this.checkRequiresCallableStatement(this.activation);
            if (var7 == 1) {
               this.activation.setAutoGeneratedKeysResultsetInfo(var8, var9);
            }

            InterruptStatus.restoreIntrFlagIfSeen(this.lcc);
         } catch (Throwable var11) {
            throw this.handleException(var11);
         }
      }
   }

   protected void finalize() throws Throwable {
      super.finalize();
      if (this.activation != null) {
         this.activation.markUnused();
      }

   }

   public final boolean execute(String var1) throws SQLException {
      throw newSQLException("XJ016.S", new Object[]{"execute(String)"});
   }

   public final boolean execute(String var1, int var2) throws SQLException {
      throw newSQLException("XJ016.S", new Object[]{"execute(String, int)"});
   }

   public final boolean execute(String var1, int[] var2) throws SQLException {
      throw newSQLException("XJ016.S", new Object[]{"execute(String, int[])"});
   }

   public final boolean execute(String var1, String[] var2) throws SQLException {
      throw newSQLException("XJ016.S", new Object[]{"execute(String, String[])"});
   }

   public final ResultSet executeQuery(String var1) throws SQLException {
      throw newSQLException("XJ016.S", new Object[]{"executeQuery(String)"});
   }

   public final int executeUpdate(String var1) throws SQLException {
      throw newSQLException("XJ016.S", new Object[]{"executeUpdate(String)"});
   }

   public final int executeUpdate(String var1, int var2) throws SQLException {
      throw newSQLException("XJ016.S", new Object[]{"executeUpdate(String, int)"});
   }

   public final int executeUpdate(String var1, int[] var2) throws SQLException {
      throw newSQLException("XJ016.S", new Object[]{"executeUpdate(String, int[])"});
   }

   public final int executeUpdate(String var1, String[] var2) throws SQLException {
      throw newSQLException("XJ016.S", new Object[]{"executeUpdate(String, String[])"});
   }

   public final void addBatch(String var1) throws SQLException {
      throw newSQLException("XJ016.S", new Object[]{"addBatch(String)"});
   }

   void closeActions() throws SQLException {
      if (this.bcc != null) {
         java.sql.PreparedStatement var1 = (java.sql.PreparedStatement)this.applicationStatement;
         this.bcc.onStatementClose(var1);
      }

      this.preparedStatement = null;

      try {
         this.setupContextStack();
      } catch (SQLException var8) {
         return;
      }

      try {
         this.activation.close();
         this.activation = null;
         InterruptStatus.restoreIntrFlagIfSeen();
      } catch (Throwable var6) {
         throw this.handleException(var6);
      } finally {
         this.restoreContextStack();
      }

   }

   public final ResultSet executeQuery() throws SQLException {
      try {
         this.executeStatement(this.activation, true, false);
      } catch (SQLException var2) {
         this.checkStatementValidity(var2);
      }

      return this.results;
   }

   public final int executeUpdate() throws SQLException {
      return (int)this.executeLargeUpdate();
   }

   public final long executeLargeUpdate() throws SQLException {
      try {
         this.executeStatement(this.activation, false, true);
      } catch (SQLException var2) {
         this.checkStatementValidity(var2);
      }

      return this.updateCount;
   }

   public void setNull(int var1, int var2) throws SQLException {
      Util.checkForSupportedDataType(var2);
      this.checkStatus();
      int var3 = this.getParameterJDBCType(var1);
      if (!DataTypeDescriptor.isJDBCTypeEquivalent(var3, var2)) {
         throw this.dataTypeConversion(var1, Util.typeName(var2));
      } else {
         try {
            this.getParms().getParameterForSet(var1 - 1).setToNull();
         } catch (StandardException var5) {
            throw EmbedResultSet.noStateChangeException(var5);
         }
      }
   }

   public void setBoolean(int var1, boolean var2) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2);
      } catch (StandardException var4) {
         throw EmbedResultSet.noStateChangeException(var4);
      }
   }

   public void setByte(int var1, byte var2) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2);
      } catch (Throwable var4) {
         throw EmbedResultSet.noStateChangeException(var4);
      }
   }

   public void setShort(int var1, short var2) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2);
      } catch (Throwable var4) {
         throw EmbedResultSet.noStateChangeException(var4);
      }
   }

   public void setInt(int var1, int var2) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2);
      } catch (Throwable var4) {
         throw EmbedResultSet.noStateChangeException(var4);
      }
   }

   public void setLong(int var1, long var2) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2);
      } catch (Throwable var5) {
         throw EmbedResultSet.noStateChangeException(var5);
      }
   }

   public final void setBigDecimal(int var1, BigDecimal var2) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setBigDecimal(var2);
      } catch (Throwable var4) {
         throw EmbedResultSet.noStateChangeException(var4);
      }
   }

   public void setFloat(int var1, float var2) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2);
      } catch (Throwable var4) {
         throw EmbedResultSet.noStateChangeException(var4);
      }
   }

   public void setDouble(int var1, double var2) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2);
      } catch (Throwable var5) {
         throw EmbedResultSet.noStateChangeException(var5);
      }
   }

   public void setString(int var1, String var2) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2);
      } catch (Throwable var4) {
         throw EmbedResultSet.noStateChangeException(var4);
      }
   }

   public void setBytes(int var1, byte[] var2) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2);
      } catch (Throwable var4) {
         throw EmbedResultSet.noStateChangeException(var4);
      }
   }

   public void setDate(int var1, Date var2) throws SQLException {
      this.setDate(var1, var2, (Calendar)null);
   }

   public void setTime(int var1, Time var2) throws SQLException {
      this.setTime(var1, var2, (Calendar)null);
   }

   public void setTimestamp(int var1, Timestamp var2) throws SQLException {
      this.setTimestamp(var1, var2, (Calendar)null);
   }

   public final void setAsciiStream(int var1, InputStream var2, long var3) throws SQLException {
      this.checkAsciiStreamConditions(var1);
      InputStreamReader var5 = null;
      if (var2 != null) {
         try {
            var5 = new InputStreamReader(var2, "ISO-8859-1");
         } catch (UnsupportedEncodingException var7) {
            throw new SQLException(var7.getMessage());
         }
      }

      this.setCharacterStreamInternal(var1, var5, false, var3);
   }

   public final void setAsciiStream(int var1, InputStream var2, int var3) throws SQLException {
      this.setAsciiStream(var1, var2, (long)var3);
   }

   /** @deprecated */
   public void setUnicodeStream(int var1, InputStream var2, int var3) throws SQLException {
      throw Util.notImplemented("setUnicodeStream");
   }

   public final void setCharacterStream(int var1, Reader var2, long var3) throws SQLException {
      this.checkCharacterStreamConditions(var1);
      this.setCharacterStreamInternal(var1, var2, false, var3);
   }

   public final void setCharacterStream(int var1, Reader var2, int var3) throws SQLException {
      this.setCharacterStream(var1, var2, (long)var3);
   }

   private final void checkCharacterStreamConditions(int var1) throws SQLException {
      this.checkStatus();
      int var2 = this.getParameterJDBCType(var1);
      if (!DataTypeDescriptor.isCharacterStreamAssignable(var2)) {
         throw this.dataTypeConversion(var1, "java.io.Reader");
      }
   }

   private final void checkAsciiStreamConditions(int var1) throws SQLException {
      this.checkStatus();
      int var2 = this.getParameterJDBCType(var1);
      if (!DataTypeDescriptor.isAsciiStreamAssignable(var2)) {
         throw this.dataTypeConversion(var1, "java.io.InputStream(ASCII)");
      }
   }

   private void setCharacterStreamInternal(int var1, Reader var2, boolean var3, long var4) throws SQLException {
      if (!var3 && var4 < 0L) {
         throw newSQLException("XJ025.S", new Object[0]);
      } else {
         int var6 = this.getParameterJDBCType(var1);
         if (var2 == null) {
            this.setNull(var1, var6);
         } else if (!var3 && var4 > 2147483647L) {
            throw newSQLException("22003", new Object[]{this.getParameterSQLType(var1)});
         } else {
            try {
               StringDataValue var8 = (StringDataValue)this.getParms().getParameter(var1 - 1);
               var8.setStreamHeaderFormat(this.usePreTenFiveHdrFormat());
               DataTypeDescriptor[] var9 = this.preparedStatement.getParameterTypes();
               int var10 = var9[var1 - 1].getMaximumWidth();
               int var11 = -1;
               ReaderToUTF8Stream var7;
               if (!var3) {
                  var11 = (int)var4;
                  int var12 = 0;
                  if (var6 == 2005 && var11 > var10) {
                     var12 = var11 - var10;
                     var11 = var10;
                  }

                  var7 = new ReaderToUTF8Stream(var2, var11, var12, this.getParameterSQLType(var1), var8.getStreamHeaderGenerator());
               } else {
                  var7 = new ReaderToUTF8Stream(var2, var10, this.getParameterSQLType(var1), var8.getStreamHeaderGenerator());
               }

               this.getParms().getParameterForSet(var1 - 1).setValue(var7, var11);
            } catch (StandardException var13) {
               throw EmbedResultSet.noStateChangeException(var13);
            }
         }
      }
   }

   private Boolean usePreTenFiveHdrFormat() throws StandardException {
      if (this.usePreTenFiveHdrFormat == null) {
         this.usePreTenFiveHdrFormat = !this.lcc.getDataDictionary().checkVersion(170, (String)null);
      }

      return this.usePreTenFiveHdrFormat;
   }

   public void setBinaryStream(int var1, InputStream var2) throws SQLException {
      this.checkBinaryStreamConditions(var1);
      this.setBinaryStreamInternal(var1, var2, true, -1L);
   }

   public final void setBinaryStream(int var1, InputStream var2, long var3) throws SQLException {
      this.checkBinaryStreamConditions(var1);
      this.setBinaryStreamInternal(var1, var2, false, var3);
   }

   public final void setBinaryStream(int var1, InputStream var2, int var3) throws SQLException {
      this.setBinaryStream(var1, var2, (long)var3);
   }

   private void setBinaryStreamInternal(int var1, InputStream var2, boolean var3, long var4) throws SQLException {
      if (!var3 && var4 < 0L) {
         throw newSQLException("XJ025.S", new Object[0]);
      } else {
         int var6 = this.getParameterJDBCType(var1);
         if (var2 == null) {
            this.setNull(var1, var6);
         } else if (!var3 && var4 > 2147483647L) {
            throw newSQLException("22003", new Object[]{this.getParameterMetaData().getParameterTypeName(var1)});
         } else {
            try {
               RawToBinaryFormatStream var7;
               if (var3) {
                  var4 = -1L;
                  DataTypeDescriptor[] var8 = this.preparedStatement.getParameterTypes();
                  var7 = new RawToBinaryFormatStream(var2, var8[var1 - 1].getMaximumWidth(), var8[var1 - 1].getTypeName());
               } else {
                  var7 = new RawToBinaryFormatStream(var2, (int)var4);
               }

               this.getParms().getParameterForSet(var1 - 1).setValue(var7, (int)var4);
            } catch (StandardException var9) {
               throw EmbedResultSet.noStateChangeException(var9);
            }
         }
      }
   }

   private final void checkBinaryStreamConditions(int var1) throws SQLException {
      this.checkStatus();
      int var2 = this.getParameterJDBCType(var1);
      if (!DataTypeDescriptor.isBinaryStreamAssignable(var2)) {
         throw this.dataTypeConversion(var1, "java.io.InputStream");
      }
   }

   public void setNull(int var1, int var2, String var3) throws SQLException {
      this.setNull(var1, var2);
   }

   public void addBatch() throws SQLException {
      this.checkStatus();
      synchronized(this.getConnectionSynchronization()) {
         if (this.batchStatements == null) {
            this.batchStatements = new Vector();
         }

         this.batchStatements.add(this.getParms().getClone());
         this.clearParameters();
      }
   }

   boolean executeBatchElement(Object var1) throws SQLException, StandardException {
      ParameterValueSet var2 = (ParameterValueSet)var1;
      int var3 = var2.getParameterCount();

      for(int var4 = 0; var4 < var3; ++var4) {
         var2.getParameter(var4).setInto((java.sql.PreparedStatement)this, var4 + 1);
      }

      return super.executeStatement(this.activation, false, true);
   }

   public void clearParameters() throws SQLException {
      this.checkStatus();
      ParameterValueSet var1 = this.getParms();
      if (var1 != null) {
         var1.clearParameters();
      }

   }

   public ResultSetMetaData getMetaData() throws SQLException {
      this.checkExecStatus();
      synchronized(this.getConnectionSynchronization()) {
         ExecPreparedStatement var2 = (ExecPreparedStatement)this.preparedStatement;
         this.setupContextStack();

         try {
            GeneratedClass var3 = null;
            ResultDescription var4 = null;
            synchronized(var2) {
               do {
                  while(!var2.upToDate()) {
                     var2.rePrepare(this.lcc);
                  }

                  var3 = var2.getActivationClass();
                  var4 = var2.getResultDescription();
               } while(var3 == null);
            }

            if (this.gcDuringGetMetaData == null || !this.gcDuringGetMetaData.equals(var3.getName())) {
               this.rMetaData = null;
               this.gcDuringGetMetaData = var3.getName();
            }

            if (this.rMetaData == null && var4 != null) {
               String var5 = var4.getStatementType();
               if (!var5.equals("INSERT") && !var5.equals("UPDATE") && !var5.equals("DELETE")) {
                  this.rMetaData = this.newEmbedResultSetMetaData(var4);
               } else {
                  this.rMetaData = null;
               }
            }

            InterruptStatus.restoreIntrFlagIfSeen(this.lcc);
         } catch (Throwable var14) {
            throw this.handleException(var14);
         } finally {
            this.restoreContextStack();
         }
      }

      return this.rMetaData;
   }

   public final void setRef(int var1, Ref var2) throws SQLException {
      throw Util.notImplemented();
   }

   public final void setArray(int var1, Array var2) throws SQLException {
      throw Util.notImplemented();
   }

   public final void setObject(int var1, Object var2, int var3, int var4) throws SQLException {
      if (var2 == null) {
         this.setNull(var1, var3);
      } else {
         Util.checkForSupportedDataType(var3);
         int var5 = this.getParameterJDBCType(var1);
         if (var5 != 2000 && !DataTypeDescriptor.isJDBCTypeEquivalent(var5, var3)) {
            throw this.dataTypeConversion(var1, Util.typeName(var3));
         } else {
            this.setObject(var1, var2);
            if (var5 == 3 || var5 == 2) {
               this.setScale(var1, var4);
            }

         }
      }
   }

   public final void setObject(int var1, Object var2, int var3) throws SQLException {
      this.setObject(var1, var2, var3, 0);
   }

   public final void setObject(int var1, Object var2) throws SQLException {
      this.checkStatus();
      int var3 = this.getParameterJDBCType(var1);
      if (var2 == null) {
         this.setNull(var1, var3);
      } else if (var3 == 2000) {
         try {
            this.getParms().setParameterAsObject(var1 - 1, var2);
         } catch (Throwable var5) {
            throw EmbedResultSet.noStateChangeException(var5);
         }
      } else if (var2 instanceof String) {
         this.setString(var1, (String)var2);
      } else if (var2 instanceof Boolean) {
         this.setBoolean(var1, (Boolean)var2);
      } else if (var2 instanceof Byte) {
         this.setByte(var1, (Byte)var2);
      } else if (var2 instanceof Short) {
         this.setShort(var1, (Short)var2);
      } else if (var2 instanceof Integer) {
         this.setInt(var1, (Integer)var2);
      } else if (var2 instanceof Long) {
         this.setLong(var1, (Long)var2);
      } else if (var2 instanceof Float) {
         this.setFloat(var1, (Float)var2);
      } else if (var2 instanceof Double) {
         this.setDouble(var1, (Double)var2);
      } else if (var2 instanceof byte[]) {
         this.setBytes(var1, (byte[])var2);
      } else if (var2 instanceof Date) {
         this.setDate(var1, (Date)var2);
      } else if (var2 instanceof Time) {
         this.setTime(var1, (Time)var2);
      } else if (var2 instanceof Timestamp) {
         this.setTimestamp(var1, (Timestamp)var2);
      } else if (var2 instanceof Blob) {
         this.setBlob(var1, (Blob)var2);
      } else if (var2 instanceof Clob) {
         this.setClob(var1, (Clob)var2);
      } else if (var2 instanceof java.util.Date) {
         this.setTimestamp(var1, new Timestamp(((java.util.Date)var2).getTime()));
      } else if (var2 instanceof Calendar) {
         this.setTimestamp(var1, new Timestamp(((Calendar)var2).getTime().getTime()));
      } else if (var2 instanceof BigDecimal) {
         this.setBigDecimal(var1, (BigDecimal)var2);
      } else if (var2 instanceof BigInteger) {
         this.setBigDecimal(var1, new BigDecimal((BigInteger)var2));
      } else {
         throw this.dataTypeConversion(var1, var2.getClass().getName());
      }
   }

   public final boolean execute() throws SQLException {
      boolean var1 = false;

      try {
         var1 = this.executeStatement(this.activation, false, false);
      } catch (SQLException var3) {
         this.checkStatementValidity(var3);
      }

      return var1;
   }

   public final void setDate(int var1, Date var2, Calendar var3) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2, var3);
      } catch (Throwable var5) {
         throw EmbedResultSet.noStateChangeException(var5);
      }
   }

   public final void setTime(int var1, Time var2, Calendar var3) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2, var3);
      } catch (Throwable var5) {
         throw EmbedResultSet.noStateChangeException(var5);
      }
   }

   public final void setTimestamp(int var1, Timestamp var2, Calendar var3) throws SQLException {
      this.checkStatus();

      try {
         this.getParms().getParameterForSet(var1 - 1).setValue(var2, var3);
      } catch (StandardException var5) {
         throw EmbedResultSet.noStateChangeException(var5);
      }
   }

   public void setBlob(int var1, Blob var2) throws SQLException {
      this.checkBlobConditions(var1);
      if (var2 == null) {
         this.setNull(var1, 2004);
      } else {
         long var3 = var2.length();
         this.setBinaryStreamInternal(var1, var2.getBinaryStream(), false, var3);
      }

   }

   private final void checkClobConditions(int var1) throws SQLException {
      this.checkStatus();
      if (this.getParameterJDBCType(var1) != 2005) {
         throw this.dataTypeConversion(var1, "java.sql.Clob");
      }
   }

   public void setClob(int var1, Clob var2) throws SQLException {
      this.checkClobConditions(var1);
      if (var2 == null) {
         this.setNull(var1, 2005);
      } else {
         long var3 = var2.length();
         this.setCharacterStreamInternal(var1, var2.getCharacterStream(), false, var3);
      }

   }

   public final ParameterValueSet getParms() {
      return this.activation.getParameterValueSet();
   }

   protected int getParameterJDBCType(int var1) throws SQLException {
      try {
         DataTypeDescriptor var2 = this.preparedStatement.getParameterType(var1 - 1);
         return var2 == null ? 1111 : var2.getTypeId().getJDBCTypeId();
      } catch (StandardException var3) {
         throw EmbedResultSet.noStateChangeException(var3);
      }
   }

   protected final String getParameterSQLType(int var1) throws SQLException {
      try {
         DataTypeDescriptor var2 = this.preparedStatement.getParameterType(var1 - 1);
         return var2 == null ? null : var2.getTypeName();
      } catch (StandardException var3) {
         throw EmbedResultSet.noStateChangeException(var3);
      }
   }

   private void setScale(int var1, int var2) throws SQLException {
      this.checkStatus();
      if (var2 < 0) {
         throw newSQLException("XJ044.S", new Object[]{var2});
      } else {
         try {
            ParameterValueSet var3 = this.getParms();
            DataValueDescriptor var4 = var3.getParameter(var1 - 1);
            int var5 = var4.getLength();
            ((VariableSizeDataValue)var4).setWidth(-1, var2, false);
            if (var4.getLength() < var5) {
               this.activation.addWarning(StandardException.newWarning("01505", new Object[]{var4.getString()}));
            }

         } catch (StandardException var6) {
            throw EmbedResultSet.noStateChangeException(var6);
         }
      }
   }

   public final void setURL(int var1, URL var2) throws SQLException {
      throw Util.notImplemented();
   }

   public final ParameterMetaData getParameterMetaData() throws SQLException {
      this.checkStatus();
      return new EmbedParameterSetMetaData(this.getParms(), this.preparedStatement.getParameterTypes());
   }

   protected EmbedResultSetMetaData newEmbedResultSetMetaData(ResultDescription var1) {
      return this.factory.newEmbedResultSetMetaData(var1.getColumnInfo());
   }

   public String toString() {
      return this.activation != null ? this.activation.getPreparedStatement().getObjectName() : super.toString();
   }

   public void transferParameters(EmbedPreparedStatement var1) throws SQLException {
      try {
         var1.activation.setParameters(this.getParms(), this.preparedStatement.getParameterTypes());
      } catch (StandardException var3) {
         throw EmbedResultSet.noStateChangeException(var3);
      }
   }

   boolean executeStatement(Activation var1, boolean var2, boolean var3) throws SQLException {
      this.checkExecStatus();
      this.checkIfInMiddleOfBatch();
      this.clearResultSets();
      return super.executeStatement(var1, var2, var3);
   }

   final SQLException dataTypeConversion(int var1, String var2) throws SQLException {
      return newSQLException("22005", new Object[]{this.getParameterMetaData().getParameterTypeName(var1), var2});
   }

   public void setBrokeredConnectionControl(BrokeredConnectionControl var1) {
      this.bcc = var1;
   }

   private void checkStatementValidity(SQLException var1) throws SQLException {
      if (this.bcc != null && this.isClosed()) {
         this.bcc.onStatementErrorOccurred((java.sql.PreparedStatement)this.applicationStatement, var1);
      }

      throw var1;
   }

   public void setAsciiStream(int var1, InputStream var2) throws SQLException {
      this.checkAsciiStreamConditions(var1);
      InputStreamReader var3 = null;
      if (var2 != null) {
         try {
            var3 = new InputStreamReader(var2, "ISO-8859-1");
         } catch (UnsupportedEncodingException var5) {
            throw new SQLException(var5.getMessage());
         }
      }

      this.setCharacterStreamInternal(var1, var3, true, -1L);
   }

   public void setCharacterStream(int var1, Reader var2) throws SQLException {
      this.checkCharacterStreamConditions(var1);
      this.setCharacterStreamInternal(var1, var2, true, -1L);
   }

   public void setClob(int var1, Reader var2) throws SQLException {
      this.checkClobConditions(var1);
      this.setCharacterStreamInternal(var1, var2, true, -1L);
   }

   public void setClob(int var1, Reader var2, long var3) throws SQLException {
      this.checkClobConditions(var1);
      this.setCharacterStreamInternal(var1, var2, false, var3);
   }

   public void setBlob(int var1, InputStream var2) throws SQLException {
      this.checkBlobConditions(var1);
      this.setBinaryStreamInternal(var1, var2, true, -1L);
   }

   public void setBlob(int var1, InputStream var2, long var3) throws SQLException {
      this.checkBlobConditions(var1);
      this.setBinaryStreamInternal(var1, var2, false, var3);
   }

   private final void checkBlobConditions(int var1) throws SQLException {
      this.checkStatus();
      if (this.getParameterJDBCType(var1) != 2004) {
         throw this.dataTypeConversion(var1, "java.sql.Blob");
      }
   }

   public final void setRowId(int var1, RowId var2) throws SQLException {
      throw Util.notImplemented();
   }

   public final void setNString(int var1, String var2) throws SQLException {
      throw Util.notImplemented();
   }

   public final void setNCharacterStream(int var1, Reader var2) throws SQLException {
      throw Util.notImplemented();
   }

   public final void setNCharacterStream(int var1, Reader var2, long var3) throws SQLException {
      throw Util.notImplemented();
   }

   public final void setNClob(int var1, Reader var2) throws SQLException {
      throw Util.notImplemented();
   }

   public final void setNClob(int var1, NClob var2) throws SQLException {
      throw Util.notImplemented();
   }

   public final void setNClob(int var1, Reader var2, long var3) throws SQLException {
      throw Util.notImplemented();
   }

   public final void setSQLXML(int var1, SQLXML var2) throws SQLException {
      throw Util.notImplemented();
   }

   public final long getVersionCounter() throws SQLException {
      return this.preparedStatement.getVersionCounter();
   }
}
