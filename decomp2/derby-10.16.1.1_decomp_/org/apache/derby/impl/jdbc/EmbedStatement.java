package org.apache.derby.impl.jdbc;

import java.sql.BatchUpdateException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.util.Arrays;
import java.util.Vector;
import org.apache.derby.iapi.jdbc.EngineStatement;
import org.apache.derby.iapi.sql.Activation;
import org.apache.derby.iapi.sql.ParameterValueSet;
import org.apache.derby.iapi.sql.PreparedStatement;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
import org.apache.derby.iapi.util.InterruptStatus;
import org.apache.derby.shared.common.error.StandardException;

public class EmbedStatement extends ConnectionChild implements EngineStatement {
   private final Connection applicationConnection;
   protected EngineStatement applicationStatement;
   long updateCount = -1L;
   EmbedResultSet results;
   private ResultSet autoGeneratedKeysResultSet;
   private String cursorName;
   private final boolean forMetaData;
   final int resultSetType;
   final int resultSetConcurrency;
   private final int resultSetHoldability;
   final LanguageConnectionContext lcc;
   private SQLWarning warnings;
   String SQLText;
   private int fetchSize = 1;
   private int fetchDirection = 1000;
   int MaxFieldSize;
   long timeoutMillis;
   private boolean active = true;
   Vector batchStatements;
   long maxRows;
   private ParameterValueSet pvs;
   protected boolean isPoolable = false;
   private boolean closeOnCompletion = false;
   private boolean closingResultSets = false;
   private EmbedResultSet[] dynamicResults;
   private int currentDynamicResultSet;

   public EmbedStatement(EmbedConnection var1, boolean var2, int var3, int var4, int var5) {
      super(var1);
      this.forMetaData = var2;
      this.resultSetType = var3;
      this.resultSetConcurrency = var4;
      this.resultSetHoldability = var5;
      this.lcc = this.getLanguageConnectionContext(this.getEmbedConnection());
      this.applicationConnection = this.getEmbedConnection().getApplicationConnection();
      this.applicationStatement = this;
   }

   public ResultSet executeQuery(String var1) throws SQLException {
      this.execute(var1, true, false, 2, (int[])null, (String[])null);
      return this.results;
   }

   public int executeUpdate(String var1) throws SQLException {
      return (int)this.executeLargeUpdate(var1);
   }

   public long executeLargeUpdate(String var1) throws SQLException {
      this.execute(var1, false, true, 2, (int[])null, (String[])null);
      return this.updateCount;
   }

   public int executeUpdate(String var1, int var2) throws SQLException {
      return (int)this.executeLargeUpdate(var1, var2);
   }

   public long executeLargeUpdate(String var1, int var2) throws SQLException {
      this.execute(var1, false, true, var2, (int[])null, (String[])null);
      return this.updateCount;
   }

   public int executeUpdate(String var1, int[] var2) throws SQLException {
      return (int)this.executeLargeUpdate(var1, var2);
   }

   public long executeLargeUpdate(String var1, int[] var2) throws SQLException {
      this.execute(var1, false, true, var2 != null && var2.length != 0 ? 1 : 2, var2, (String[])null);
      return this.updateCount;
   }

   public int executeUpdate(String var1, String[] var2) throws SQLException {
      return (int)this.executeLargeUpdate(var1, var2);
   }

   public long executeLargeUpdate(String var1, String[] var2) throws SQLException {
      this.execute(var1, false, true, var2 != null && var2.length != 0 ? 1 : 2, (int[])null, var2);
      return this.updateCount;
   }

   final void checkIfInMiddleOfBatch() throws SQLException {
      if (this.batchStatements != null) {
         throw newSQLException("XJ068.S", new Object[0]);
      }
   }

   public boolean isClosed() throws SQLException {
      if (this.active) {
         try {
            this.checkExecStatus();
         } catch (SQLException var2) {
         }
      }

      return !this.active;
   }

   public final void close() throws SQLException {
      if (this.active) {
         synchronized(this.getConnectionSynchronization()) {
            this.closeActions();
            this.active = false;
            this.clearResultSets();
            this.cursorName = null;
            this.warnings = null;
            this.SQLText = null;
            this.batchStatements = null;
         }
      }
   }

   protected void finalize() throws Throwable {
      super.finalize();
      if (this.results != null && this.results.singleUseActivation != null) {
         this.results.singleUseActivation.markUnused();
      }

   }

   void closeActions() throws SQLException {
   }

   public int getMaxFieldSize() throws SQLException {
      this.checkStatus();
      return this.MaxFieldSize;
   }

   public void setMaxFieldSize(int var1) throws SQLException {
      this.checkStatus();
      if (var1 < 0) {
         throw newSQLException("XJ066.S", new Object[]{var1});
      } else {
         this.MaxFieldSize = var1;
      }
   }

   public int getMaxRows() throws SQLException {
      return (int)this.getLargeMaxRows();
   }

   public long getLargeMaxRows() throws SQLException {
      this.checkStatus();
      return this.maxRows;
   }

   public void setMaxRows(int var1) throws SQLException {
      this.setLargeMaxRows((long)var1);
   }

   public void setLargeMaxRows(long var1) throws SQLException {
      this.checkStatus();
      if (var1 < 0L) {
         throw newSQLException("XJ063.S", new Object[]{var1});
      } else {
         this.maxRows = var1;
      }
   }

   public void setEscapeProcessing(boolean var1) throws SQLException {
      this.checkStatus();
   }

   public final int getQueryTimeout() throws SQLException {
      this.checkStatus();
      return (int)(this.timeoutMillis / 1000L);
   }

   public final void setQueryTimeout(int var1) throws SQLException {
      this.checkStatus();
      if (var1 < 0) {
         throw newSQLException("XJ074.S", new Object[]{var1});
      } else {
         this.timeoutMillis = (long)var1 * 1000L;
      }
   }

   public void cancel() throws SQLException {
      throw Util.notImplemented("cancel");
   }

   public SQLWarning getWarnings() throws SQLException {
      this.checkStatus();
      return this.warnings;
   }

   public void clearWarnings() throws SQLException {
      this.checkStatus();
      this.warnings = null;
   }

   public void setCursorName(String var1) throws SQLException {
      this.checkStatus();
      this.cursorName = var1;
   }

   public boolean execute(String var1) throws SQLException {
      return this.execute(var1, false, false, 2, (int[])null, (String[])null);
   }

   private boolean execute(String var1, boolean var2, boolean var3, int var4, int[] var5, String[] var6) throws SQLException {
      synchronized(this.getConnectionSynchronization()) {
         this.checkExecStatus();
         if (var1 == null) {
            throw newSQLException("XJ067.S", new Object[0]);
         } else {
            this.checkIfInMiddleOfBatch();
            this.clearResultSets();
            this.setupContextStack();
            this.SQLText = var1;

            boolean var18;
            try {
               Activation var8;
               try {
                  PreparedStatement var9 = this.lcc.prepareInternalStatement(this.lcc.getDefaultSchema(), var1, this.resultSetConcurrency == 1007, false);
                  var8 = var9.getActivation(this.lcc, this.resultSetType == 1004);
                  this.checkRequiresCallableStatement(var8);
                  InterruptStatus.restoreIntrFlagIfSeen(this.lcc);
               } catch (Throwable var15) {
                  throw this.handleException(var15);
               }

               var8.setSingleExecution();
               if (var4 == 1) {
                  var8.setAutoGeneratedKeysResultsetInfo(var5, var6);
               }

               var18 = this.executeStatement(var8, var2, var3);
            } finally {
               this.restoreContextStack();
            }

            return var18;
         }
      }
   }

   public boolean execute(String var1, int var2) throws SQLException {
      return this.execute(var1, false, false, var2, (int[])null, (String[])null);
   }

   public boolean execute(String var1, int[] var2) throws SQLException {
      return this.execute(var1, false, true, var2 != null && var2.length != 0 ? 1 : 2, var2, (String[])null);
   }

   public boolean execute(String var1, String[] var2) throws SQLException {
      return this.execute(var1, false, true, var2 != null && var2.length != 0 ? 1 : 2, (int[])null, var2);
   }

   public final ResultSet getResultSet() throws SQLException {
      this.checkStatus();
      return this.results;
   }

   public final int getUpdateCount() throws SQLException {
      this.checkStatus();
      return (int)this.updateCount;
   }

   public final long getLargeUpdateCount() throws SQLException {
      this.checkStatus();
      return this.updateCount;
   }

   public final boolean getMoreResults() throws SQLException {
      return this.getMoreResults(3);
   }

   public final int getResultSetType() throws SQLException {
      this.checkStatus();
      return this.resultSetType;
   }

   public void setFetchDirection(int var1) throws SQLException {
      this.checkStatus();
      if (var1 != 1000 && var1 != 1001 && var1 != 1002) {
         throw newSQLException("XJ064.S", new Object[]{var1});
      } else {
         this.fetchDirection = var1;
      }
   }

   public int getFetchDirection() throws SQLException {
      this.checkStatus();
      return this.fetchDirection;
   }

   public void setFetchSize(int var1) throws SQLException {
      this.checkStatus();
      if (var1 >= 0 && (this.getMaxRows() == 0 || var1 <= this.getMaxRows())) {
         if (var1 > 0) {
            this.fetchSize = var1;
         }

      } else {
         throw newSQLException("XJ065.S", new Object[]{var1});
      }
   }

   public int getFetchSize() throws SQLException {
      this.checkStatus();
      return this.fetchSize;
   }

   public int getResultSetConcurrency() throws SQLException {
      this.checkStatus();
      return this.resultSetConcurrency;
   }

   public final int getResultSetHoldability() throws SQLException {
      this.checkStatus();
      return this.resultSetHoldability;
   }

   public void addBatch(String var1) throws SQLException {
      this.checkStatus();
      synchronized(this.getConnectionSynchronization()) {
         if (this.batchStatements == null) {
            this.batchStatements = new Vector();
         }

         this.batchStatements.add(var1);
      }
   }

   public final void clearBatch() throws SQLException {
      this.checkStatus();
      synchronized(this.getConnectionSynchronization()) {
         this.batchStatements = null;
      }
   }

   public int[] executeBatch() throws SQLException {
      return Util.squashLongs(this.executeLargeBatch());
   }

   public long[] executeLargeBatch() throws SQLException {
      this.checkExecStatus();
      synchronized(this.getConnectionSynchronization()) {
         this.setupContextStack();
         int var2 = 0;
         this.clearResultSets();
         Vector var3 = this.batchStatements;
         this.batchStatements = null;
         int var4;
         if (var3 == null) {
            var4 = 0;
         } else {
            var4 = var3.size();
         }

         long[] var5 = new long[var4];

         SQLException var6;
         try {
            while(var2 < var4) {
               InterruptStatus.throwIf(this.lcc);
               if (this.executeBatchElement(var3.get(var2))) {
                  throw newSQLException("XJ04B.S", new Object[0]);
               }

               var5[var2] = this.getLargeUpdateCount();
               ++var2;
            }

            InterruptStatus.restoreIntrFlagIfSeen(this.lcc);
            long[] var7 = var5;
            return var7;
         } catch (StandardException var14) {
            var6 = this.handleException(var14);
         } catch (SQLException var15) {
            var6 = var15;
         } finally {
            this.restoreContextStack();
         }

         long[] var18 = Arrays.copyOf(var5, var2);
         throw new BatchUpdateException(var6.getMessage(), var6.getSQLState(), var6.getErrorCode(), var18, var6);
      }
   }

   boolean executeBatchElement(Object var1) throws SQLException, StandardException {
      return this.execute((String)var1, false, true, 2, (int[])null, (String[])null);
   }

   public final Connection getConnection() throws SQLException {
      this.checkStatus();
      Connection var1 = this.getEmbedConnection().getApplicationConnection();
      if (var1 == this.applicationConnection && var1 != null) {
         return var1;
      } else {
         throw Util.noCurrentConnection();
      }
   }

   public final boolean getMoreResults(int var1) throws SQLException {
      this.checkExecStatus();
      synchronized(this.getConnectionSynchronization()) {
         if (this.dynamicResults == null) {
            this.clearResultSets();
            this.closeMeOnCompletion();
            return false;
         } else {
            int var3;
            switch (var1) {
               case 1:
                  var3 = this.currentDynamicResultSet;
                  break;
               case 2:
                  var3 = this.dynamicResults.length;
                  break;
               case 3:
               default:
                  var3 = 0;
            }

            SQLException var4 = null;

            for(int var5 = var3; var5 <= this.currentDynamicResultSet && var5 < this.dynamicResults.length; ++var5) {
               EmbedResultSet var6 = this.dynamicResults[var5];
               if (var6 != null) {
                  try {
                     var6.close();
                  } catch (SQLException var13) {
                     if (var4 == null) {
                        var4 = var13;
                     } else {
                        var4.setNextException(var13);
                     }
                  } finally {
                     this.dynamicResults[var5] = null;
                  }
               }
            }

            if (var4 != null) {
               throw var4;
            } else {
               this.updateCount = -1L;

               while(++this.currentDynamicResultSet < this.dynamicResults.length) {
                  EmbedResultSet var16 = this.dynamicResults[this.currentDynamicResultSet];
                  if (var16 != null) {
                     if (!var16.isClosed) {
                        this.results = var16;
                        return true;
                     }

                     this.dynamicResults[this.currentDynamicResultSet] = null;
                  }
               }

               this.results = null;
               return false;
            }
         }
      }
   }

   public final ResultSet getGeneratedKeys() throws SQLException {
      this.checkStatus();
      if (this.autoGeneratedKeysResultSet == null) {
         return null;
      } else {
         this.execute("VALUES IDENTITY_VAL_LOCAL()", true, false, 2, (int[])null, (String[])null);
         return this.results;
      }
   }

   boolean executeStatement(Activation var1, boolean var2, boolean var3) throws SQLException {
      synchronized(this.getConnectionSynchronization()) {
         this.setupContextStack();
         this.pvs = var1.getParameterValueSet();

         boolean var5;
         try {
            this.clearWarnings();
            if (!this.forMetaData) {
               this.commitIfNeeded();
               this.needCommit();
            } else if (this.lcc.getActivationCount() <= 1) {
               this.commitIfNeeded();
               this.needCommit();
            }

            ExecPreparedStatement var6 = var1.getPreparedStatement();
            if (this.cursorName != null) {
               var1.setCursorName(this.cursorName);
            }

            boolean var7 = this.getExecuteHoldable();
            var1.setResultSetHoldability(var7);
            var1.reset();
            var1.setMaxRows(this.maxRows);
            org.apache.derby.iapi.sql.ResultSet var8 = var6.execute(var1, this.forMetaData, this.timeoutMillis);
            this.addWarning(var6.getCompileTimeWarnings());
            this.addWarning(var1.getWarnings());
            if (var8.returnsRows()) {
               if (var3) {
                  throw StandardException.newException("X0Y79.S", new Object[0]);
               }

               EmbedResultSet var9 = this.factory.newEmbedResultSet(this.getEmbedConnection(), var8, this.forMetaData, this, var6.isAtomic());
               this.results = var9;
               if (var1.isSingleExecution()) {
                  var9.singleUseActivation = var1;
               }

               this.updateCount = -1L;
               var5 = true;
            } else {
               if (var1.getAutoGeneratedKeysResultsetMode() && var8.getAutoGeneratedKeysResultset() != null) {
                  var8.getAutoGeneratedKeysResultset().open();
                  this.autoGeneratedKeysResultSet = this.factory.newEmbedResultSet(this.getEmbedConnection(), var8.getAutoGeneratedKeysResultset(), false, this, var6.isAtomic());
               }

               this.updateCount = var8.modifiedRowCount();
               this.results = null;
               int var20 = 0;
               if (var1.getDynamicResults() != null) {
                  var20 = this.processDynamicResults(var1.getDynamicResults(), var1.getMaxDynamicResults());
               }

               var8.close();
               if (var2 && var20 != 1) {
                  throw StandardException.newException("X0Y78.S", new Object[0]);
               }

               if (var3 && var20 > 0) {
                  throw StandardException.newException("X0Y79.S", new Object[0]);
               }

               if (var20 == 0) {
                  if (var1.isSingleExecution()) {
                     var1.close();
                  }

                  if (!this.forMetaData) {
                     this.commitIfNeeded();
                  } else if (this.lcc.getActivationCount() <= 1) {
                     this.commitIfNeeded();
                  }
               }

               var5 = var20 > 0;
            }

            InterruptStatus.restoreIntrFlagIfSeen(this.lcc);
         } catch (Throwable var17) {
            if (var1.isSingleExecution()) {
               try {
                  var1.close();
               } catch (Throwable var16) {
               }
            }

            throw this.handleException(var17);
         } finally {
            this.restoreContextStack();
         }

         return var5;
      }
   }

   final void addWarning(SQLWarning var1) {
      if (var1 != null) {
         if (this.warnings == null) {
            this.warnings = var1;
         } else {
            this.warnings.setNextException(var1);
         }
      }

   }

   public String getSQLText() {
      return this.SQLText;
   }

   public ParameterValueSet getParameterValueSet() {
      return this.pvs;
   }

   final void checkStatus() throws SQLException {
      if (!this.active) {
         Connection var1 = this.getEmbedConnection().getApplicationConnection();
         if (var1 != null && !var1.isClosed()) {
            throw newSQLException("XJ012.S", new Object[]{"Statement"});
         } else {
            throw Util.noCurrentConnection();
         }
      }
   }

   final void checkExecStatus() throws SQLException {
      if (this.getConnection().isClosed()) {
         this.active = false;
         throw Util.noCurrentConnection();
      }
   }

   void clearResultSets() throws SQLException {
      try {
         this.closingResultSets = true;
         this.clearResultSetsMinion();
      } finally {
         this.closingResultSets = false;
      }

   }

   private void clearResultSetsMinion() throws SQLException {
      SQLException var1 = null;

      try {
         if (this.results != null) {
            this.results.close();
            this.results = null;
         }
      } catch (SQLException var5) {
         var1 = var5;
      }

      try {
         if (this.autoGeneratedKeysResultSet != null) {
            this.autoGeneratedKeysResultSet.close();
            this.autoGeneratedKeysResultSet = null;
         }
      } catch (SQLException var7) {
         if (var1 == null) {
            var1 = var7;
         } else {
            var1.setNextException(var7);
         }
      }

      if (this.dynamicResults != null) {
         for(int var2 = 0; var2 < this.dynamicResults.length; ++var2) {
            EmbedResultSet var3 = this.dynamicResults[var2];
            if (var3 != null) {
               try {
                  var3.close();
               } catch (SQLException var6) {
                  if (var1 == null) {
                     var1 = var6;
                  } else {
                     var1.setNextException(var6);
                  }
               }
            }
         }

         this.dynamicResults = null;
      }

      this.updateCount = -1L;
      if (var1 != null) {
         throw var1;
      }
   }

   void checkRequiresCallableStatement(Activation var1) throws SQLException {
      ParameterValueSet var2 = var1.getParameterValueSet();
      if (var2 != null) {
         if (var2.checkNoDeclaredOutputParameters()) {
            try {
               var1.close();
            } catch (StandardException var4) {
            }

            throw newSQLException("XJ009.S", new Object[]{this.SQLText});
         }
      }
   }

   public void transferBatch(EmbedStatement var1) throws SQLException {
      synchronized(this.getConnectionSynchronization()) {
         var1.batchStatements = this.batchStatements;
         this.batchStatements = null;
      }
   }

   public final void setApplicationStatement(EngineStatement var1) {
      this.applicationStatement = var1;
   }

   private int processDynamicResults(ResultSet[][] var1, int var2) throws SQLException {
      EmbedResultSet[] var3 = new EmbedResultSet[var1.length];
      int var4 = 0;

      for(int var5 = 0; var5 < var1.length; ++var5) {
         ResultSet[] var6 = var1[var5];
         ResultSet var7 = var6[0];
         var6[0] = null;
         EmbedResultSet var8 = processDynamicResult(this.getEmbedConnection(), var7, this);
         if (var8 != null) {
            var3[var4++] = var8;
         }
      }

      if (var4 != 0) {
         if (var4 != 1) {
            Arrays.sort(var3, 0, var4);
         }

         this.dynamicResults = var3;
         if (var4 > var2) {
            this.addWarning(StandardException.newWarning("0100E", new Object[0]));

            for(int var9 = var2; var9 < var4; ++var9) {
               var3[var9].close();
               var3[var9] = null;
            }

            var4 = var2;
         }

         this.updateCount = -1L;
         this.results = var3[0];
         this.currentDynamicResultSet = 0;
      }

      return var4;
   }

   static EmbedResultSet processDynamicResult(EmbedConnection var0, ResultSet var1, EmbedStatement var2) {
      if (var1 == null) {
         return null;
      } else if (!(var1 instanceof EmbedResultSet)) {
         return null;
      } else {
         EmbedResultSet var3 = (EmbedResultSet)var1;
         if (var3.getEmbedConnection().rootConnection != var0.rootConnection) {
            return null;
         } else {
            try {
               var3.checkIfClosed("");
            } catch (SQLException var5) {
               return null;
            }

            var3.setDynamicResultSet(var2);
            return var3;
         }
      }
   }

   void resultSetClosing(EmbedResultSet var1) throws SQLException {
      if (this.getEmbedConnection().autoCommit) {
         if (this.dynamicResults != null) {
            for(int var2 = 0; var2 < this.dynamicResults.length; ++var2) {
               EmbedResultSet var3 = this.dynamicResults[var2];
               if (var3 != null && !var3.isClosed && var3 != var1) {
                  return;
               }
            }
         }

         this.commitIfAutoCommit();
      }
   }

   private boolean getExecuteHoldable() throws SQLException {
      if (this.resultSetHoldability == 2) {
         return false;
      } else if (this.applicationStatement == this) {
         return true;
      } else {
         return this.applicationStatement.getResultSetHoldability() == 1;
      }
   }

   public boolean isPoolable() throws SQLException {
      this.checkStatus();
      return this.isPoolable;
   }

   public void setPoolable(boolean var1) throws SQLException {
      this.checkStatus();
      this.isPoolable = var1;
   }

   public final boolean isWrapperFor(Class var1) throws SQLException {
      this.checkStatus();
      return var1.isInstance(this);
   }

   public final Object unwrap(Class var1) throws SQLException {
      this.checkStatus();

      try {
         return var1.cast(this);
      } catch (ClassCastException var3) {
         throw newSQLException("XJ128.S", new Object[]{var1});
      }
   }

   public void closeOnCompletion() throws SQLException {
      this.checkStatus();
      this.closeOnCompletion = true;
   }

   public boolean isCloseOnCompletion() throws SQLException {
      this.checkStatus();
      return this.closeOnCompletion;
   }

   void closeMeOnCompletion() {
      if (this.active && !this.closingResultSets && this.closeOnCompletion) {
         try {
            if (this.isOpen(this.results)) {
               return;
            }

            if (this.autoGeneratedKeysResultSet != null) {
               return;
            }

            if (this.dynamicResults != null) {
               int var1 = this.dynamicResults.length;

               for(int var2 = 0; var2 < var1; ++var2) {
                  if (this.isOpen(this.dynamicResults[var2])) {
                     return;
                  }
               }
            }

            this.close();
         } catch (SQLException var3) {
            Util.logSQLException(var3);
         }
      }

   }

   private boolean isOpen(EmbedResultSet var1) throws SQLException {
      return var1 != null && !var1.isClosed();
   }
}
