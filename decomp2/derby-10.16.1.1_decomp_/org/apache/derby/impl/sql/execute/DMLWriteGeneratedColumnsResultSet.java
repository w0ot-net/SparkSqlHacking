package org.apache.derby.impl.sql.execute;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Properties;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.Activation;
import org.apache.derby.iapi.sql.ResultDescription;
import org.apache.derby.iapi.sql.ResultSet;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.sql.execute.ConstantAction;
import org.apache.derby.iapi.sql.execute.ExecRow;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.sql.execute.RowChanger;
import org.apache.derby.iapi.types.DataValueDescriptor;
import org.apache.derby.iapi.types.NumberDataValue;
import org.apache.derby.shared.common.error.StandardException;

public abstract class DMLWriteGeneratedColumnsResultSet extends DMLWriteResultSet {
   protected DataValueDescriptor[] aiCache;
   protected String identitySequenceUUIDString;
   protected NoPutResultSet sourceResultSet;
   protected ResultSet autoGeneratedKeysResultSet;
   protected TemporaryRowHolderImpl autoGeneratedKeysRowsHolder;
   protected int[] autoGeneratedKeysColumnIndexes;
   protected boolean autoincrementGenerated;
   protected long identityVal;
   protected boolean setIdentity;

   DMLWriteGeneratedColumnsResultSet(Activation var1) throws StandardException {
      this(var1, var1.getConstantAction());
   }

   DMLWriteGeneratedColumnsResultSet(Activation var1, ConstantAction var2) throws StandardException {
      super(var1, var2);
   }

   public NumberDataValue getSetAutoincrementValue(int var1, long var2) throws StandardException {
      return null;
   }

   public void saveAIcacheInformation(String var1, String var2, String[] var3) throws StandardException {
      if (this.aiCache != null) {
         HashMap var4 = new HashMap();
         int var5 = this.aiCache.length;

         for(int var6 = 0; var6 < var5; ++var6) {
            if (this.aiCache[var6] != null) {
               var4.put(AutoincrementCounter.makeIdentity(var1, var2, var3[var6]), this.aiCache[var6].getLong());
            }
         }

         InternalTriggerExecutionContext var7 = (InternalTriggerExecutionContext)this.lcc.getTriggerExecutionContext();
         if (var7 == null) {
            this.lcc.copyHashtableToAIHT(var4);
         } else {
            var7.copyHashtableToAIHT(var4);
         }
      }

      if (this.activation.getAutoGeneratedKeysResultsetMode()) {
         this.autoGeneratedKeysResultSet = this.autoGeneratedKeysRowsHolder.getResultSet();
      } else {
         this.autoGeneratedKeysResultSet = null;
      }

   }

   protected void verifyAutoGeneratedRScolumnsList(UUID var1) throws StandardException {
      if (this.activation.getAutoGeneratedKeysResultsetMode()) {
         int[] var2 = this.activation.getAutoGeneratedKeysColumnIndexes();
         if (var2 != null) {
            this.verifyAutoGeneratedColumnsIndexes(var2, var1);
         } else {
            String[] var3 = this.activation.getAutoGeneratedKeysColumnNames();
            if (var3 != null) {
               this.verifyAutoGeneratedColumnsNames(var3, var1);
            }
         }
      }

   }

   private void verifyAutoGeneratedColumnsIndexes(int[] var1, UUID var2) throws StandardException {
      int var3 = var1.length;
      TableDescriptor var4 = this.lcc.getDataDictionary().getTableDescriptor(var2);

      for(int var5 = 0; var5 < var3; ++var5) {
         ColumnDescriptor var6 = var4.getColumnDescriptor(var1[var5]);
         if (!this.verifyAutoGenColumn(var6)) {
            throw StandardException.newException("X0X0E.S", new Object[]{var1[var5], var4.getName()});
         }
      }

   }

   private void verifyAutoGeneratedColumnsNames(String[] var1, UUID var2) throws StandardException {
      int var3 = var1.length;
      int[] var4 = new int[var3];
      TableDescriptor var5 = this.lcc.getDataDictionary().getTableDescriptor(var2);

      for(int var7 = 0; var7 < var3; ++var7) {
         if (var1[var7] == null) {
            throw StandardException.newException("X0X0F.S", new Object[]{var1[var7], var5.getName()});
         }

         ColumnDescriptor var6 = var5.getColumnDescriptor(var1[var7]);
         if (!this.verifyAutoGenColumn(var6)) {
            throw StandardException.newException("X0X0F.S", new Object[]{var1[var7], var5.getName()});
         }

         var4[var7] = var6.getPosition();
      }

      this.activation.setAutoGeneratedKeysResultsetInfo(var4, (String[])null);
   }

   private boolean verifyAutoGenColumn(ColumnDescriptor var1) {
      return var1 != null && var1.isAutoincrement();
   }

   protected void firstExecuteSpecialHandlingAutoGen(boolean var1, RowChanger var2, UUID var3) throws StandardException {
      if (var1 && this.activation.getAutoGeneratedKeysResultsetMode()) {
         Properties var5 = new Properties();
         this.autoGeneratedKeysColumnIndexes = this.activation.getAutoGeneratedKeysColumnIndexes();
         var2.getHeapConglomerateController().getInternalTablePropertySet(var5);
         if (this.autoGeneratedKeysColumnIndexes != null) {
            this.autoGeneratedKeysColumnIndexes = this.uniqueColumnPositionArray(this.autoGeneratedKeysColumnIndexes, var3);
         } else {
            this.autoGeneratedKeysColumnIndexes = this.generatedColumnPositionsArray(var3);
         }

         ResultDescription var4 = this.lcc.getLanguageFactory().getResultDescription(this.resultDescription, this.autoGeneratedKeysColumnIndexes);
         this.autoGeneratedKeysRowsHolder = new TemporaryRowHolderImpl(this.activation, var5, var4);
      }

   }

   private int[] generatedColumnPositionsArray(UUID var1) throws StandardException {
      TableDescriptor var2 = this.lcc.getDataDictionary().getTableDescriptor(var1);
      int var4 = var2.getMaxColumnID();
      int[] var5 = new int[var4];
      Arrays.fill(var5, -1);
      int var6 = 0;

      for(int var7 = 0; var7 < var4; ++var7) {
         ColumnDescriptor var3 = var2.getColumnDescriptor(var7 + 1);
         if (var3.isAutoincrement()) {
            ++var6;
            var5[var7] = var7 + 1;
         } else if (var3.getDefaultValue() != null || var3.getDefaultInfo() != null) {
            ++var6;
            var5[var7] = var7 + 1;
         }
      }

      int[] var10 = new int[var6];
      int var8 = 0;

      for(int var9 = 0; var8 < var4; ++var8) {
         if (var5[var8] != -1) {
            var10[var9++] = var5[var8];
         }
      }

      return var10;
   }

   private int[] uniqueColumnPositionArray(int[] var1, UUID var2) throws StandardException {
      int var3 = var1.length;
      TableDescriptor var4 = this.lcc.getDataDictionary().getTableDescriptor(var2);
      int[] var5 = new int[var4.getMaxColumnID()];
      int var6 = 0;

      for(int var7 = 0; var7 < var3; ++var7) {
         if (var5[var1[var7] - 1] == 0) {
            ++var6;
            var5[var1[var7] - 1] = var1[var7];
         }
      }

      int[] var10 = new int[var6];
      int var8 = 0;

      for(int var9 = 0; var8 < var5.length; ++var8) {
         if (var5[var8] != 0) {
            var10[var9++] = var5[var8];
         }
      }

      return var10;
   }

   protected ExecRow getCompactRow(ExecRow var1, int[] var2) throws StandardException {
      int var4 = var1.nColumns();
      if (var2 == null) {
         ValueRow var7 = new ValueRow(var4);
         DataValueDescriptor[] var8 = var1.getRowArray();
         DataValueDescriptor[] var9 = var7.getRowArray();
         System.arraycopy(var8, 0, var9, 0, var8.length);
         return var7;
      } else {
         int var5 = var2.length;
         ValueRow var3 = new ValueRow(var5);

         for(int var6 = 0; var6 < var5; ++var6) {
            var3.setColumn(var6 + 1, var1.getColumn(var2[var6]));
         }

         return var3;
      }
   }

   public ResultSet getAutoGeneratedKeysResultset() {
      return this.autoGeneratedKeysResultSet;
   }
}
