package org.apache.derby.impl.sql.execute;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Stack;
import java.util.Vector;
import org.apache.derby.catalog.DependableFinder;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.jdbc.ConnectionContext;
import org.apache.derby.iapi.services.context.Context;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.io.FormatableBitSet;
import org.apache.derby.iapi.services.loader.GeneratedByteCode;
import org.apache.derby.iapi.services.loader.GeneratedClass;
import org.apache.derby.iapi.services.loader.GeneratedMethod;
import org.apache.derby.iapi.services.monitor.ModuleFactory;
import org.apache.derby.iapi.services.monitor.Monitor;
import org.apache.derby.iapi.services.property.PropertyUtil;
import org.apache.derby.iapi.services.uuid.UUIDFactory;
import org.apache.derby.iapi.sql.Activation;
import org.apache.derby.iapi.sql.ParameterValueSet;
import org.apache.derby.iapi.sql.ResultDescription;
import org.apache.derby.iapi.sql.ResultSet;
import org.apache.derby.iapi.sql.Row;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.conn.SQLSessionContext;
import org.apache.derby.iapi.sql.depend.DependencyManager;
import org.apache.derby.iapi.sql.depend.Provider;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.sql.execute.ConstantAction;
import org.apache.derby.iapi.sql.execute.CursorResultSet;
import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
import org.apache.derby.iapi.sql.execute.ExecRow;
import org.apache.derby.iapi.sql.execute.ExecutionFactory;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.sql.execute.ResultSetFactory;
import org.apache.derby.iapi.sql.execute.TemporaryRowHolder;
import org.apache.derby.iapi.store.access.ConglomerateController;
import org.apache.derby.iapi.store.access.Qualifier;
import org.apache.derby.iapi.store.access.ScanController;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.iapi.types.DataValueDescriptor;
import org.apache.derby.iapi.types.DataValueFactory;
import org.apache.derby.iapi.types.NumberDataValue;
import org.apache.derby.iapi.types.RowLocation;
import org.apache.derby.shared.common.error.StandardException;
import org.apache.derby.shared.common.util.ArrayUtil;

public abstract class BaseActivation implements org.apache.derby.iapi.sql.execute.CursorActivation, GeneratedByteCode {
   private LanguageConnectionContext lcc;
   protected ContextManager cm;
   protected ExecPreparedStatement preStmt;
   protected ResultSet resultSet;
   protected ResultDescription resultDescription;
   protected boolean closed;
   private String cursorName;
   protected int numSubqueries;
   private boolean singleExecution;
   private volatile boolean inUse;
   private java.sql.ResultSet targetVTI;
   private SQLWarning warnings;
   private GeneratedClass gc;
   private boolean checkRowCounts;
   private HashSet rowCountsCheckedThisExecution = new HashSet(4, 0.9F);
   private static final long MAX_SQRT = (long)Math.sqrt((double)Long.MAX_VALUE);
   private static final int TEN_PERCENT_THRESHOLD = 400;
   private ConglomerateController updateHeapCC;
   private ScanController indexSC;
   private long indexConglomerateNumber = -1L;
   private TableDescriptor ddlTableDescriptor;
   private long maxRows = -1L;
   private boolean forCreateTable;
   private boolean scrollable;
   private boolean resultSetHoldability;
   private CursorResultSet forUpdateIndexScan;
   private boolean autoGeneratedKeysResultSetMode;
   private int[] autoGeneratedKeysColumnIndexes;
   private String[] autoGeneratedKeysColumnNames;
   private boolean isValid;
   protected String UUIDString;
   protected UUID UUIDValue;
   private Activation parentActivation;
   private SQLSessionContext sqlSessionContextForChildren;
   private Stack constantActionStack = new Stack();
   protected int indexOfSessionTableNamesInSavedObjects = -1;
   protected ExecRow[] row;
   protected ParameterValueSet pvs;
   protected CursorResultSet[] raParentResultSets;
   protected Hashtable parentResultSets;
   private Calendar cal;

   protected BaseActivation() {
   }

   public final void initFromContext(Context var1) throws StandardException {
      this.cm = var1.getContextManager();
      this.lcc = (LanguageConnectionContext)this.cm.getContext("LanguageConnectionContext");
      this.inUse = true;
      this.lcc.addActivation(this);
      this.isValid = true;
      UUIDFactory var2 = getMonitor().getUUIDFactory();
      this.UUIDValue = var2.createUUID();
      this.UUIDString = this.UUIDValue.toString();
   }

   public final ResultSet execute() throws StandardException {
      this.throwIfClosed("execute");
      this.checkRowCounts = this.shouldWeCheckRowCounts();
      if (this.checkRowCounts) {
         this.rowCountsCheckedThisExecution.clear();
      }

      this.reinit();
      if (this.resultSet == null) {
         this.resultSet = this.decorateResultSet();
      }

      return this.resultSet;
   }

   ResultSet decorateResultSet() throws StandardException {
      return this.createResultSet();
   }

   protected abstract ResultSet createResultSet() throws StandardException;

   protected void reinit() throws StandardException {
   }

   public final ExecPreparedStatement getPreparedStatement() {
      return this.preStmt;
   }

   public ConstantAction pushConstantAction(ConstantAction var1) {
      return (ConstantAction)this.constantActionStack.push(var1);
   }

   public ConstantAction popConstantAction() {
      return (ConstantAction)this.constantActionStack.pop();
   }

   public ConstantAction getConstantAction() {
      return this.constantActionStack.size() > 0 ? (ConstantAction)this.constantActionStack.peek() : this.preStmt.getConstantAction();
   }

   public final void checkStatementValidity() throws StandardException {
      if (this.preStmt != null && !this.preStmt.upToDate(this.gc)) {
         StandardException var1 = StandardException.newException("XCL32.S", new Object[0]);
         var1.setReport(1);
         throw var1;
      }
   }

   public final void setupActivation(ExecPreparedStatement var1, boolean var2) throws StandardException {
      this.preStmt = var1;
      if (var1 != null) {
         this.resultDescription = var1.getResultDescription();
         this.scrollable = var2;
         if (this.pvs != null && this.pvs.getParameterCount() != 0) {
            this.pvs.initialize(var1.getParameterTypes());
         }
      } else {
         this.resultDescription = null;
         this.scrollable = false;
      }

   }

   public ResultSet getResultSet() {
      return this.resultSet;
   }

   public RowLocation getRowLocationTemplate(int var1) {
      RowLocation var2 = (RowLocation)this.getPreparedStatement().getSavedObject(var1);
      DataValueDescriptor var3 = var2.cloneValue(false);
      return (RowLocation)var3;
   }

   public ResultDescription getResultDescription() {
      return this.resultDescription;
   }

   public void reset() throws StandardException {
      if (this.resultSet != null) {
         this.resultSet.close();
      }

      this.updateHeapCC = null;
      if (!this.isSingleExecution()) {
         this.clearWarnings();
      }

   }

   public final void close() throws StandardException {
      if (!this.closed) {
         this.reset();
         if (this.resultSet != null) {
            this.resultSet.finish();
            this.resultSet = null;
         }

         this.closed = true;
         DependencyManager var1 = this.lcc.getDataDictionary().getDependencyManager();
         var1.clearDependencies(this.lcc, this);
         this.lcc.removeActivation(this);
         if (this.preStmt != null) {
            this.preStmt.finish(this.lcc);
            this.preStmt = null;
         }

         try {
            this.closeActivationAction();
         } catch (Throwable var3) {
            throw StandardException.plainWrapException(var3);
         }
      }

   }

   protected void closeActivationAction() throws Exception {
   }

   public boolean isClosed() {
      return this.closed;
   }

   public void setSingleExecution() {
      this.singleExecution = true;
   }

   public boolean isSingleExecution() {
      return this.singleExecution;
   }

   public int getNumSubqueries() {
      return this.numSubqueries;
   }

   public boolean isCursorActivation() {
      return false;
   }

   public final void setGC(GeneratedClass var1) {
      this.gc = var1;
   }

   public final GeneratedClass getGC() {
      return this.gc;
   }

   public final GeneratedMethod getMethod(String var1) throws StandardException {
      return this.getGC().getMethod(var1);
   }

   public Object e0() throws StandardException {
      return null;
   }

   public Object e1() throws StandardException {
      return null;
   }

   public Object e2() throws StandardException {
      return null;
   }

   public Object e3() throws StandardException {
      return null;
   }

   public Object e4() throws StandardException {
      return null;
   }

   public Object e5() throws StandardException {
      return null;
   }

   public Object e6() throws StandardException {
      return null;
   }

   public Object e7() throws StandardException {
      return null;
   }

   public Object e8() throws StandardException {
      return null;
   }

   public Object e9() throws StandardException {
      return null;
   }

   public boolean checkIfThisActivationHasHoldCursor(String var1) {
      if (!this.inUse) {
         return false;
      } else if (!this.resultSetHoldability) {
         return false;
      } else if (this.indexOfSessionTableNamesInSavedObjects == -1) {
         return false;
      } else {
         return this.resultSet != null && !this.resultSet.isClosed() && this.resultSet.returnsRows() ? ((ArrayList)this.getPreparedStatement().getSavedObject(this.indexOfSessionTableNamesInSavedObjects)).contains(var1) : false;
      }
   }

   public void setCursorName(String var1) {
      if (this.isCursorActivation()) {
         this.cursorName = var1;
      }

   }

   public String getCursorName() {
      return this.isCursorActivation() ? this.cursorName : null;
   }

   public void setResultSetHoldability(boolean var1) {
      this.resultSetHoldability = var1;
   }

   public boolean getResultSetHoldability() {
      return this.resultSetHoldability;
   }

   public void setAutoGeneratedKeysResultsetInfo(int[] var1, String[] var2) {
      this.autoGeneratedKeysResultSetMode = true;
      this.autoGeneratedKeysColumnIndexes = ArrayUtil.copy(var1);
      this.autoGeneratedKeysColumnNames = (String[])ArrayUtil.copy(var2);
   }

   public boolean getAutoGeneratedKeysResultsetMode() {
      return this.autoGeneratedKeysResultSetMode;
   }

   public int[] getAutoGeneratedKeysColumnIndexes() {
      return ArrayUtil.copy(this.autoGeneratedKeysColumnIndexes);
   }

   public String[] getAutoGeneratedKeysColumnNames() {
      return (String[])ArrayUtil.copy(this.autoGeneratedKeysColumnNames);
   }

   public final ResultSetFactory getResultSetFactory() {
      return this.getExecutionFactory().getResultSetFactory();
   }

   public final ExecutionFactory getExecutionFactory() {
      return this.getLanguageConnectionContext().getLanguageConnectionFactory().getExecutionFactory();
   }

   public CursorResultSet getTargetResultSet() {
      return null;
   }

   protected DataValueDescriptor getSetAutoincrementValue(int var1, long var2) throws StandardException {
      NumberDataValue var4 = ((DMLWriteGeneratedColumnsResultSet)this.resultSet).getSetAutoincrementValue(var1, var2);
      return var4;
   }

   public NumberDataValue getCurrentValueAndAdvance(String var1, int var2) throws StandardException {
      NumberDataValue var3 = (NumberDataValue)this.getDataValueFactory().getNull(var2, 0);
      this.lcc.getDataDictionary().getCurrentValueAndAdvance(var1, var3);
      return var3;
   }

   public CursorResultSet getCursorResultSet() {
      return null;
   }

   public void throwIfClosed(String var1) throws StandardException {
      if (this.closed) {
         throw StandardException.newException("XCL05.S", new Object[]{var1});
      }
   }

   public static void setColumnPosition(int[] var0, int var1, int var2) {
      var0[var1] = var2;
   }

   public static void allocateQualArray(Qualifier[][] var0, int var1, int var2) {
      var0[var1] = new Qualifier[var2];
   }

   public static void setQualifier(Qualifier[][] var0, Qualifier var1, int var2, int var3) {
      var0[var2][var3] = var1;
   }

   public static void reinitializeQualifiers(Qualifier[][] var0) {
      if (var0 != null) {
         for(int var1 = 0; var1 < var0.length; ++var1) {
            for(int var2 = 0; var2 < var0[var1].length; ++var2) {
               var0[var1][var2].reinitialize();
            }
         }
      }

   }

   public final void markUnused() {
      if (this.isInUse()) {
         this.inUse = false;
         this.lcc.notifyUnusedActivation();
      }

   }

   public final boolean isInUse() {
      return this.inUse;
   }

   public void addWarning(SQLWarning var1) {
      if (this.warnings == null) {
         this.warnings = var1;
      } else {
         this.warnings.setNextWarning(var1);
      }

   }

   public SQLWarning getWarnings() {
      return this.warnings;
   }

   public void clearWarnings() {
      this.warnings = null;
   }

   protected static void nullToPrimitiveTest(DataValueDescriptor var0, String var1) throws StandardException {
      if (var0.isNull()) {
         throw StandardException.newException("39004", new Object[]{var1});
      }
   }

   public void informOfRowCount(NoPutResultSet var1, long var2) throws StandardException {
      if (this.checkRowCounts) {
         boolean var4 = false;
         int var5 = var1.resultSetNumber();
         if (this.rowCountsCheckedThisExecution.add(var5)) {
            long var6 = this.getPreparedStatement().getInitialRowCount(var5, var2);
            if (var2 != var6) {
               if (var6 >= 400L) {
                  long var8 = var6 / (var2 - var6);
                  if (Math.abs(var8) <= 10L) {
                     var4 = true;
                  }
               } else {
                  long var10 = var2 - var6;
                  if (Math.abs(var10) <= MAX_SQRT && var10 * var10 > Math.abs(4L * var6)) {
                     var4 = true;
                  }
               }
            }
         }

         if (var4) {
            this.preStmt.makeInvalid(23, this.lcc);
         }
      }

   }

   public ConglomerateController getHeapConglomerateController() {
      return this.updateHeapCC;
   }

   public void setHeapConglomerateController(ConglomerateController var1) {
      this.updateHeapCC = var1;
   }

   public void clearHeapConglomerateController() {
      this.updateHeapCC = null;
   }

   public ScanController getIndexScanController() {
      return this.indexSC;
   }

   public void setIndexScanController(ScanController var1) {
      this.indexSC = var1;
   }

   public long getIndexConglomerateNumber() {
      return this.indexConglomerateNumber;
   }

   public void setIndexConglomerateNumber(long var1) {
      this.indexConglomerateNumber = var1;
   }

   public void clearIndexScanInfo() {
      this.indexSC = null;
      this.indexConglomerateNumber = -1L;
   }

   public void setForCreateTable() {
      this.forCreateTable = true;
   }

   public boolean getForCreateTable() {
      return this.forCreateTable;
   }

   public void setDDLTableDescriptor(TableDescriptor var1) {
      this.ddlTableDescriptor = var1;
   }

   public TableDescriptor getDDLTableDescriptor() {
      return this.ddlTableDescriptor;
   }

   public void setMaxRows(long var1) {
      this.maxRows = var1;
   }

   public long getMaxRows() {
      return this.maxRows;
   }

   public void setTargetVTI(java.sql.ResultSet var1) {
      this.targetVTI = var1;
   }

   public java.sql.ResultSet getTargetVTI() {
      return this.targetVTI;
   }

   protected boolean shouldWeCheckRowCounts() throws StandardException {
      ExecPreparedStatement var1 = this.getPreparedStatement();
      int var2 = var1.incrementExecutionCount();
      if (var2 == 1) {
         return true;
      } else if (var2 < 5) {
         return false;
      } else {
         int var3 = var1.getStalePlanCheckInterval();
         if (var3 == 0) {
            TransactionController var4 = this.getTransactionController();
            var3 = PropertyUtil.getServiceInt(var4, "derby.language.stalePlanCheckInterval", 5, Integer.MAX_VALUE, 100);
            var1.setStalePlanCheckInterval(var3);
         }

         return var2 % var3 == 1;
      }
   }

   public final boolean getScrollable() {
      return this.scrollable;
   }

   protected final void setParameterValueSet(int var1, boolean var2) {
      this.pvs = this.lcc.getLanguageFactory().newParameterValueSet(this.lcc.getLanguageConnectionFactory().getClassFactory().getClassInspector(), var1, var2);
   }

   protected final DataValueDescriptor getParameter(int var1) throws StandardException {
      return this.pvs.getParameter(var1);
   }

   public ParameterValueSet getParameterValueSet() {
      if (this.pvs == null) {
         this.setParameterValueSet(0, false);
      }

      return this.pvs;
   }

   public void setParameters(ParameterValueSet var1, DataTypeDescriptor[] var2) throws StandardException {
      if (!this.isClosed()) {
         if (this.pvs == null || var2 == null) {
            this.pvs = var1;
            return;
         }

         DataTypeDescriptor[] var3 = this.preStmt.getParameterTypes();
         boolean var4 = false;
         if (var3 != null && var3.length == var2.length) {
            var4 = true;

            for(int var5 = 0; var5 < var2.length; ++var5) {
               DataTypeDescriptor var6 = var2[var5];
               DataTypeDescriptor var7 = var3[var5];
               if (!var6.isExactTypeAndLengthMatch(var7)) {
                  var4 = false;
                  break;
               }

               if (var6.isNullable() != var7.isNullable()) {
                  var4 = false;
                  break;
               }
            }
         }

         if (!var4) {
            throw StandardException.newException("XCL10.S", new Object[0]);
         }

         var1.transferDataValues(this.pvs);
      }

   }

   public void throwIfMissingParms() throws StandardException {
      if (this.pvs != null && !this.pvs.allAreSet()) {
         throw StandardException.newException("07000", new Object[0]);
      }
   }

   public void setCurrentRow(ExecRow var1, int var2) {
      if (this.row != null) {
         this.row[var2] = var1;
      }

   }

   public void clearCurrentRow(int var1) {
      if (this.row != null) {
         this.row[var1] = null;
      }

   }

   public Row getCurrentRow(int var1) {
      return this.row[var1];
   }

   public SQLSessionContext getSQLSessionContextForChildren() {
      return this.sqlSessionContextForChildren;
   }

   public SQLSessionContext setupSQLSessionContextForChildren(boolean var1) {
      if (var1) {
         this.sqlSessionContextForChildren = this.lcc.createSQLSessionContext();
      } else if (this.parentActivation != null) {
         this.sqlSessionContextForChildren = this.parentActivation.getSQLSessionContextForChildren();
      } else {
         this.sqlSessionContextForChildren = this.lcc.getTopLevelSQLSessionContext();
      }

      return this.sqlSessionContextForChildren;
   }

   public void setParentActivation(Activation var1) {
      this.parentActivation = var1;
   }

   public Activation getParentActivation() {
      return this.parentActivation;
   }

   protected final DataValueDescriptor getColumnFromRow(int var1, int var2) throws StandardException {
      return this.row[var1] == null ? null : this.row[var1].getColumn(var2);
   }

   protected void checkPositionedStatement(String var1, String var2) throws StandardException {
      ExecPreparedStatement var3 = this.getPreparedStatement();
      if (var3 != null) {
         org.apache.derby.iapi.sql.execute.CursorActivation var4 = this.lcc.lookupCursorActivation(var1);
         if (var4 != null && !var2.equals(var4.getPreparedStatement().getObjectName())) {
            var3.makeInvalid(5, this.lcc);
         }

      }
   }

   public NoPutResultSet materializeResultSetIfPossible(NoPutResultSet var1) throws StandardException {
      var1.openCore();
      Vector var2 = new Vector();
      int var4 = 0;
      FormatableBitSet var5 = null;
      int var6 = this.getLanguageConnectionContext().getOptimizerFactory().getMaxMemoryPerTable();
      ExecRow var3 = var1.getNextRowCore();
      if (var3 != null) {
         var5 = new FormatableBitSet(var3.nColumns() + 1);
         var5.set(1);
      }

      while(var3 != null) {
         var4 += var3.getColumn(1).getLength();
         if (var4 > var6 || var2.size() > 512) {
            break;
         }

         var2.addElement(var3.getClone(var5));
         var3 = var1.getNextRowCore();
      }

      var1.close();
      if (var3 == null) {
         int var7 = var1.resultSetNumber();
         int var8 = var2.size();
         if (var8 == 0) {
            return new RowResultSet(this, (ExecRow)null, true, var7, (double)0.0F, (double)0.0F);
         } else {
            RowResultSet[] var9 = new RowResultSet[var8];
            UnionResultSet[] var10 = new UnionResultSet[var8 - 1];

            for(int var11 = 0; var11 < var8; ++var11) {
               var9[var11] = new RowResultSet(this, (ExecRow)var2.elementAt(var11), true, var7, (double)1.0F, (double)0.0F);
               if (var11 > 0) {
                  var10[var11 - 1] = new UnionResultSet((NoPutResultSet)(var11 > 1 ? var10[var11 - 2] : var9[0]), var9[var11], this, var7, (double)(var11 + 1), (double)0.0F);
               }
            }

            var1.finish();
            if (var8 == 1) {
               return var9[0];
            } else {
               return var10[var10.length - 1];
            }
         }
      } else {
         return var1;
      }
   }

   public void setParentResultSet(TemporaryRowHolder var1, String var2) {
      if (this.parentResultSets == null) {
         this.parentResultSets = new Hashtable();
      }

      Vector var3 = (Vector)this.parentResultSets.get(var2);
      if (var3 == null) {
         var3 = new Vector();
         var3.addElement(var1);
      } else {
         var3.addElement(var1);
      }

      this.parentResultSets.put(var2, var3);
   }

   public Vector getParentResultSet(String var1) {
      return (Vector)this.parentResultSets.get(var1);
   }

   public Enumeration getParentResultSetKeys() {
      return this.parentResultSets.keys();
   }

   public void clearParentResultSets() {
      if (this.parentResultSets != null) {
         this.parentResultSets.clear();
      }

   }

   public void setForUpdateIndexScan(CursorResultSet var1) {
      this.forUpdateIndexScan = var1;
   }

   public CursorResultSet getForUpdateIndexScan() {
      return this.forUpdateIndexScan;
   }

   protected Calendar getCalendar() {
      if (this.cal == null) {
         this.cal = new GregorianCalendar();
      }

      return this.cal;
   }

   public final LanguageConnectionContext getLanguageConnectionContext() {
      return this.lcc;
   }

   public final TransactionController getTransactionController() {
      return this.lcc.getTransactionExecute();
   }

   public ContextManager getContextManager() {
      return this.cm;
   }

   public DataValueFactory getDataValueFactory() {
      return this.getLanguageConnectionContext().getDataValueFactory();
   }

   public Connection getCurrentConnection() throws SQLException {
      ConnectionContext var1 = (ConnectionContext)this.getContextManager().getContext("JDBC_ConnectionContext");
      return var1.getNestedConnection(true);
   }

   public java.sql.ResultSet[][] getDynamicResults() {
      return null;
   }

   public int getMaxDynamicResults() {
      return 0;
   }

   public NumberDataValue getDB2Length(DataValueDescriptor var1, int var2, NumberDataValue var3) throws StandardException {
      if (var3 == null) {
         var3 = this.getDataValueFactory().getNullInteger((NumberDataValue)null);
      }

      if (var1.isNull()) {
         var3.setToNull();
      } else if (var2 >= 0) {
         var3.setValue(var2);
      } else {
         var3.setValue(var1.getLength());
      }

      return var3;
   }

   public DependableFinder getDependableFinder() {
      return null;
   }

   public String getObjectName() {
      return this.UUIDString;
   }

   public UUID getObjectID() {
      return this.UUIDValue;
   }

   public String getClassType() {
      return "Activation";
   }

   public boolean isPersistent() {
      return false;
   }

   public boolean isValid() {
      return this.isValid;
   }

   public void makeInvalid(int var1, LanguageConnectionContext var2) throws StandardException {
      switch (var1) {
         case 48:
            this.isValid = false;
            DependencyManager var3 = var2.getDataDictionary().getDependencyManager();
            var3.clearDependencies(var2, this);
         case 23:
         case 47:
         default:
      }
   }

   public void prepareToInvalidate(Provider var1, int var2, LanguageConnectionContext var3) throws StandardException {
   }

   static ModuleFactory getMonitor() {
      return Monitor.getMonitor();
   }
}
