package org.apache.derby.impl.sql;

import java.sql.SQLWarning;
import java.util.Enumeration;
import java.util.Vector;
import org.apache.derby.catalog.DependableFinder;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.services.loader.GeneratedClass;
import org.apache.derby.iapi.sql.Activation;
import org.apache.derby.iapi.sql.ParameterValueSet;
import org.apache.derby.iapi.sql.ResultDescription;
import org.apache.derby.iapi.sql.ResultSet;
import org.apache.derby.iapi.sql.Row;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.conn.SQLSessionContext;
import org.apache.derby.iapi.sql.depend.Provider;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.sql.execute.ConstantAction;
import org.apache.derby.iapi.sql.execute.CursorActivation;
import org.apache.derby.iapi.sql.execute.CursorResultSet;
import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
import org.apache.derby.iapi.sql.execute.ExecRow;
import org.apache.derby.iapi.sql.execute.ExecutionFactory;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.sql.execute.TemporaryRowHolder;
import org.apache.derby.iapi.store.access.ConglomerateController;
import org.apache.derby.iapi.store.access.ScanController;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.iapi.types.DataValueFactory;
import org.apache.derby.iapi.types.NumberDataValue;
import org.apache.derby.iapi.types.RowLocation;
import org.apache.derby.impl.sql.execute.BaseActivation;
import org.apache.derby.shared.common.error.StandardException;

public final class GenericActivationHolder implements Activation {
   public BaseActivation ac;
   ExecPreparedStatement ps;
   GeneratedClass gc;
   DataTypeDescriptor[] paramTypes;
   private final LanguageConnectionContext lcc;

   GenericActivationHolder(LanguageConnectionContext var1, GeneratedClass var2, ExecPreparedStatement var3, boolean var4) throws StandardException {
      this.lcc = var1;
      this.gc = var2;
      this.ps = var3;
      this.ac = (BaseActivation)var2.newInstance(var1);
      this.ac.setupActivation(var3, var4);
      this.paramTypes = var3.getParameterTypes();
   }

   public void reset() throws StandardException {
      this.ac.reset();
   }

   public boolean checkIfThisActivationHasHoldCursor(String var1) {
      return this.ac.checkIfThisActivationHasHoldCursor(var1);
   }

   public void setCursorName(String var1) {
      this.ac.setCursorName(var1);
   }

   public String getCursorName() {
      return this.ac.getCursorName();
   }

   public void setResultSetHoldability(boolean var1) {
      this.ac.setResultSetHoldability(var1);
   }

   public boolean getResultSetHoldability() {
      return this.ac.getResultSetHoldability();
   }

   public void setAutoGeneratedKeysResultsetInfo(int[] var1, String[] var2) {
      this.ac.setAutoGeneratedKeysResultsetInfo(var1, var2);
   }

   public boolean getAutoGeneratedKeysResultsetMode() {
      return this.ac.getAutoGeneratedKeysResultsetMode();
   }

   public int[] getAutoGeneratedKeysColumnIndexes() {
      return this.ac.getAutoGeneratedKeysColumnIndexes();
   }

   public String[] getAutoGeneratedKeysColumnNames() {
      return this.ac.getAutoGeneratedKeysColumnNames();
   }

   public LanguageConnectionContext getLanguageConnectionContext() {
      return this.lcc;
   }

   public TransactionController getTransactionController() {
      return this.ac.getTransactionController();
   }

   public ExecutionFactory getExecutionFactory() {
      return this.ac.getExecutionFactory();
   }

   public ParameterValueSet getParameterValueSet() {
      return this.ac.getParameterValueSet();
   }

   public void setParameters(ParameterValueSet var1, DataTypeDescriptor[] var2) throws StandardException {
      this.ac.setParameters(var1, var2);
   }

   public ResultSet execute() throws StandardException {
      boolean var1 = this.gc == null || this.gc != this.ps.getActivationClass();
      if (var1 || !this.ac.isValid()) {
         GeneratedClass var2;
         if (var1) {
            var2 = this.ps.getActivationClass();
            if (var2 == null) {
               throw StandardException.newException("XCL32.S", new Object[0]);
            }
         } else {
            var2 = this.gc;
         }

         BaseActivation var3 = (BaseActivation)var2.newInstance(this.lcc);
         DataTypeDescriptor[] var4 = this.ps.getParameterTypes();
         var3.setupActivation(this.ps, this.ac.getScrollable());
         var3.setParameters(this.ac.getParameterValueSet(), this.paramTypes);
         if (this.ac.isSingleExecution()) {
            var3.setSingleExecution();
         }

         var3.setCursorName(this.ac.getCursorName());
         var3.setResultSetHoldability(this.ac.getResultSetHoldability());
         if (this.ac.getAutoGeneratedKeysResultsetMode()) {
            var3.setAutoGeneratedKeysResultsetInfo(this.ac.getAutoGeneratedKeysColumnIndexes(), this.ac.getAutoGeneratedKeysColumnNames());
         }

         var3.setMaxRows(this.ac.getMaxRows());
         this.ac.setupActivation((ExecPreparedStatement)null, false);
         this.ac.close();
         this.ac = var3;
         this.gc = var2;
         this.paramTypes = var4;
      }

      String var5 = this.ac.getCursorName();
      if (var5 != null) {
         CursorActivation var6 = this.lcc.lookupCursorActivation(var5);
         if (var6 != null && var6 != this.ac) {
            throw StandardException.newException("X0X60.S", new Object[]{var5});
         }
      }

      return this.ac.execute();
   }

   public ResultSet getResultSet() {
      return this.ac.getResultSet();
   }

   public void setCurrentRow(ExecRow var1, int var2) {
      this.ac.setCurrentRow(var1, var2);
   }

   public Row getCurrentRow(int var1) {
      return this.ac.getCurrentRow(var1);
   }

   public void clearCurrentRow(int var1) {
      this.ac.clearCurrentRow(var1);
   }

   public ExecPreparedStatement getPreparedStatement() {
      return this.ps;
   }

   public void checkStatementValidity() throws StandardException {
      this.ac.checkStatementValidity();
   }

   public ResultDescription getResultDescription() {
      return this.ac.getResultDescription();
   }

   public DataValueFactory getDataValueFactory() {
      return this.ac.getDataValueFactory();
   }

   public RowLocation getRowLocationTemplate(int var1) {
      return this.ac.getRowLocationTemplate(var1);
   }

   public ConglomerateController getHeapConglomerateController() {
      return this.ac.getHeapConglomerateController();
   }

   public void setHeapConglomerateController(ConglomerateController var1) {
      this.ac.setHeapConglomerateController(var1);
   }

   public void clearHeapConglomerateController() {
      this.ac.clearHeapConglomerateController();
   }

   public ScanController getIndexScanController() {
      return this.ac.getIndexScanController();
   }

   public void setIndexScanController(ScanController var1) {
      this.ac.setIndexScanController(var1);
   }

   public long getIndexConglomerateNumber() {
      return this.ac.getIndexConglomerateNumber();
   }

   public void setIndexConglomerateNumber(long var1) {
      this.ac.setIndexConglomerateNumber(var1);
   }

   public void clearIndexScanInfo() {
      this.ac.clearIndexScanInfo();
   }

   public void close() throws StandardException {
      this.ac.close();
   }

   public boolean isClosed() {
      return this.ac.isClosed();
   }

   public void setSingleExecution() {
      this.ac.setSingleExecution();
   }

   public boolean isSingleExecution() {
      return this.ac.isSingleExecution();
   }

   public int getNumSubqueries() {
      return this.ac.getNumSubqueries();
   }

   public void setForCreateTable() {
      this.ac.setForCreateTable();
   }

   public boolean getForCreateTable() {
      return this.ac.getForCreateTable();
   }

   public void setDDLTableDescriptor(TableDescriptor var1) {
      this.ac.setDDLTableDescriptor(var1);
   }

   public TableDescriptor getDDLTableDescriptor() {
      return this.ac.getDDLTableDescriptor();
   }

   public void setMaxRows(long var1) {
      this.ac.setMaxRows(var1);
   }

   public long getMaxRows() {
      return this.ac.getMaxRows();
   }

   public void setTargetVTI(java.sql.ResultSet var1) {
      this.ac.setTargetVTI(var1);
   }

   public java.sql.ResultSet getTargetVTI() {
      return this.ac.getTargetVTI();
   }

   public SQLSessionContext getSQLSessionContextForChildren() {
      return this.ac.getSQLSessionContextForChildren();
   }

   public SQLSessionContext setupSQLSessionContextForChildren(boolean var1) {
      return this.ac.setupSQLSessionContextForChildren(var1);
   }

   public void setParentActivation(Activation var1) {
      this.ac.setParentActivation(var1);
   }

   public Activation getParentActivation() {
      return this.ac.getParentActivation();
   }

   public DependableFinder getDependableFinder() {
      return null;
   }

   public String getObjectName() {
      return null;
   }

   public UUID getObjectID() {
      return null;
   }

   public String getClassType() {
      return null;
   }

   public boolean isPersistent() {
      return false;
   }

   public boolean isValid() {
      return false;
   }

   public void makeInvalid(int var1, LanguageConnectionContext var2) throws StandardException {
   }

   public void prepareToInvalidate(Provider var1, int var2, LanguageConnectionContext var3) throws StandardException {
   }

   public void markUnused() {
      this.ac.markUnused();
   }

   public boolean isInUse() {
      return this.ac.isInUse();
   }

   public void addWarning(SQLWarning var1) {
      this.ac.addWarning(var1);
   }

   public SQLWarning getWarnings() {
      return this.ac.getWarnings();
   }

   public void clearWarnings() {
      this.ac.clearWarnings();
   }

   public void informOfRowCount(NoPutResultSet var1, long var2) throws StandardException {
      this.ac.informOfRowCount(var1, var2);
   }

   public boolean isCursorActivation() {
      return this.ac.isCursorActivation();
   }

   public ConstantAction pushConstantAction(ConstantAction var1) {
      return this.ac.pushConstantAction(var1);
   }

   public ConstantAction popConstantAction() {
      return this.ac.popConstantAction();
   }

   public ConstantAction getConstantAction() {
      return this.ac.getConstantAction();
   }

   public void setParentResultSet(TemporaryRowHolder var1, String var2) {
      this.ac.setParentResultSet(var1, var2);
   }

   public Vector getParentResultSet(String var1) {
      return this.ac.getParentResultSet(var1);
   }

   public void clearParentResultSets() {
      this.ac.clearParentResultSets();
   }

   public Enumeration getParentResultSetKeys() {
      return this.ac.getParentResultSetKeys();
   }

   public void setForUpdateIndexScan(CursorResultSet var1) {
      this.ac.setForUpdateIndexScan(var1);
   }

   public CursorResultSet getForUpdateIndexScan() {
      return this.ac.getForUpdateIndexScan();
   }

   public java.sql.ResultSet[][] getDynamicResults() {
      return this.ac.getDynamicResults();
   }

   public int getMaxDynamicResults() {
      return this.ac.getMaxDynamicResults();
   }

   public NumberDataValue getCurrentValueAndAdvance(String var1, int var2) throws StandardException {
      return this.ac.getCurrentValueAndAdvance(var1, var2);
   }
}
