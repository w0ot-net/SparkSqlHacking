package org.apache.spark.ui.exec;

import jakarta.servlet.http.HttpServletRequest;
import java.lang.invoke.SerializedLambda;
import org.apache.spark.SparkContext;
import org.apache.spark.internal.config.UI$;
import org.apache.spark.status.api.v1.ThreadStackTrace;
import org.apache.spark.ui.SparkUITab;
import org.apache.spark.ui.UIUtils$;
import org.apache.spark.ui.WebUIPage;
import org.apache.spark.ui.flamegraph.FlamegraphNode$;
import scala.MatchError;
import scala.Option;
import scala.Predef;
import scala.Some;
import scala.Option.;
import scala.collection.ArrayOps;
import scala.collection.IterableOnceOps;
import scala.collection.StringOps;
import scala.collection.immutable.Seq;
import scala.reflect.ScalaSignature;
import scala.runtime.BoxesRunTime;
import scala.xml.Elem;
import scala.xml.MetaData;
import scala.xml.Node;
import scala.xml.NodeBuffer;
import scala.xml.NodeSeq;
import scala.xml.Null;
import scala.xml.Text;
import scala.xml.TopScope;
import scala.xml.UnprefixedAttribute;

@ScalaSignature(
   bytes = "\u0006\u0005\u00194Q\u0001C\u0005\u0001\u0017MA\u0001\u0002\u0007\u0001\u0003\u0002\u0003\u0006IA\u0007\u0005\t;\u0001\u0011\t\u0011)A\u0005=!)\u0001\u0006\u0001C\u0001S!9a\u0006\u0001b\u0001\n\u0013y\u0003BB\u001a\u0001A\u0003%\u0001\u0007C\u00035\u0001\u0011\u0005Q\u0007C\u0003U\u0001\u0011%QK\u0001\fFq\u0016\u001cW\u000f^8s)\"\u0014X-\u00193Ek6\u0004\b+Y4f\u0015\tQ1\"\u0001\u0003fq\u0016\u001c'B\u0001\u0007\u000e\u0003\t)\u0018N\u0003\u0002\u000f\u001f\u0005)1\u000f]1sW*\u0011\u0001#E\u0001\u0007CB\f7\r[3\u000b\u0003I\t1a\u001c:h'\t\u0001A\u0003\u0005\u0002\u0016-5\t1\"\u0003\u0002\u0018\u0017\tIq+\u001a2V\u0013B\u000bw-Z\u0001\u0007a\u0006\u0014XM\u001c;\u0004\u0001A\u0011QcG\u0005\u00039-\u0011!b\u00159be.,\u0016\nV1c\u0003\t\u00198\rE\u0002 E\u0011j\u0011\u0001\t\u0006\u0002C\u0005)1oY1mC&\u00111\u0005\t\u0002\u0007\u001fB$\u0018n\u001c8\u0011\u0005\u00152S\"A\u0007\n\u0005\u001dj!\u0001D*qCJ\\7i\u001c8uKb$\u0018A\u0002\u001fj]&$h\bF\u0002+Y5\u0002\"a\u000b\u0001\u000e\u0003%AQ\u0001G\u0002A\u0002iAQ!H\u0002A\u0002y\t\u0011C\u001a7b[\u0016<'/\u00199i\u000b:\f'\r\\3e+\u0005\u0001\u0004CA\u00102\u0013\t\u0011\u0004EA\u0004C_>dW-\u00198\u0002%\u0019d\u0017-\\3he\u0006\u0004\b.\u00128bE2,G\rI\u0001\u0007e\u0016tG-\u001a:\u0015\u0005YB\u0005cA\u001c@\u0005:\u0011\u0001(\u0010\b\u0003sqj\u0011A\u000f\u0006\u0003we\ta\u0001\u0010:p_Rt\u0014\"A\u0011\n\u0005y\u0002\u0013a\u00029bG.\fw-Z\u0005\u0003\u0001\u0006\u00131aU3r\u0015\tq\u0004\u0005\u0005\u0002D\r6\tAI\u0003\u0002FA\u0005\u0019\u00010\u001c7\n\u0005\u001d#%\u0001\u0002(pI\u0016DQ!\u0013\u0004A\u0002)\u000bqA]3rk\u0016\u001cH\u000f\u0005\u0002L%6\tAJ\u0003\u0002N\u001d\u0006!\u0001\u000e\u001e;q\u0015\ty\u0005+A\u0004tKJ4H.\u001a;\u000b\u0003E\u000bqA[1lCJ$\u0018-\u0003\u0002T\u0019\n\u0011\u0002\n\u001e;q'\u0016\u0014h\u000f\\3u%\u0016\fX/Z:u\u0003Y!'/Y<Fq\u0016\u001cW\u000f^8s\r2\fW.Z4sCBDGc\u0001\u001cW/\")\u0011j\u0002a\u0001\u0015\")\u0001l\u0002a\u00013\u00061A\u000f\u001b:fC\u0012\u00042a\b.]\u0013\tY\u0006EA\u0003BeJ\f\u0017\u0010\u0005\u0002^I6\taL\u0003\u0002`A\u0006\u0011a/\r\u0006\u0003C\n\f1!\u00199j\u0015\t\u0019W\"\u0001\u0004ti\u0006$Xo]\u0005\u0003Kz\u0013\u0001\u0003\u00165sK\u0006$7\u000b^1dWR\u0013\u0018mY3"
)
public class ExecutorThreadDumpPage extends WebUIPage {
   private final SparkUITab parent;
   private final Option sc;
   private final boolean flamegraphEnabled;

   private boolean flamegraphEnabled() {
      return this.flamegraphEnabled;
   }

   public Seq render(final HttpServletRequest request) {
      String executorId = (String).MODULE$.apply(request.getParameter("executorId")).map((executorIdx) -> UIUtils$.MODULE$.decodeURLParameter(executorIdx)).getOrElse(() -> {
         throw new IllegalArgumentException("Missing executorId parameter");
      });
      long time = System.currentTimeMillis();
      Option maybeThreadDump = ((SparkContext)this.sc.get()).getExecutorThreadDump(executorId);
      Node content = (Node)maybeThreadDump.map((threadDump) -> {
         Elem[] dumpRows = (Elem[])scala.collection.ArrayOps..MODULE$.map$extension(scala.Predef..MODULE$.refArrayOps(threadDump), (thread) -> {
            long threadId = thread.threadId();
            Option var5 = thread.blockedByThreadId();
            Object var10000;
            if (var5 instanceof Some var6) {
               long blockingThreadId = BoxesRunTime.unboxToLong(var6.value());
               Null var10004 = scala.xml.Null..MODULE$;
               TopScope var10005 = scala.xml.TopScope..MODULE$;
               NodeSeq var10007 = scala.xml.NodeSeq..MODULE$;
               NodeBuffer $buf = new NodeBuffer();
               $buf.$amp$plus(new Text("\n              Blocked by "));
               MetaData $md = scala.xml.Null..MODULE$;
               MetaData var27 = new UnprefixedAttribute("href", "#" + blockingThreadId + "_td_id", $md);
               TopScope var10014 = scala.xml.TopScope..MODULE$;
               NodeSeq var10016 = scala.xml.NodeSeq..MODULE$;
               NodeBuffer $buf = new NodeBuffer();
               $buf.$amp$plus(new Text("\n              Thread "));
               $buf.$amp$plus(BoxesRunTime.boxToLong(blockingThreadId));
               $buf.$amp$plus(new Text(" "));
               $buf.$amp$plus(thread.blockedByLock());
               $buf.$amp$plus(new Elem((String)null, "a", var27, var10014, false, var10016.seqToNodeSeq($buf)));
               $buf.$amp$plus(new Text("\n            "));
               var10000 = new Elem((String)null, "div", var10004, var10005, false, var10007.seqToNodeSeq($buf));
            } else {
               if (!scala.None..MODULE$.equals(var5)) {
                  throw new MatchError(var5);
               }

               var10000 = scala.xml.Text..MODULE$.apply("");
            }

            Node blockedBy = (Node)var10000;
            Seq synchronizers = (Seq)thread.synchronizers().map((l) -> "Lock(" + l + ")");
            Seq monitors = (Seq)thread.monitors().map((m) -> "Monitor(" + m + ")");
            String heldLocks = ((IterableOnceOps)synchronizers.$plus$plus(monitors)).mkString(", ");
            MetaData $md = scala.xml.Null..MODULE$;
            MetaData var28 = new UnprefixedAttribute("onmouseout", "onMouseOverAndOut(" + threadId + ")", $md);
            var28 = new UnprefixedAttribute("onmouseover", "onMouseOverAndOut(" + threadId + ")", var28);
            var28 = new UnprefixedAttribute("onclick", "toggleThreadStackTrace(" + threadId + ", false)", var28);
            var28 = new UnprefixedAttribute("class", new Text("accordion-heading"), var28);
            var28 = new UnprefixedAttribute("id", "thread_" + threadId + "_tr", var28);
            TopScope var39 = scala.xml.TopScope..MODULE$;
            NodeSeq var40 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(new Text("\n          "));
            MetaData $md = scala.xml.Null..MODULE$;
            MetaData var33 = new UnprefixedAttribute("id", threadId + "_td_id", $md);
            TopScope var41 = scala.xml.TopScope..MODULE$;
            NodeSeq var46 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(BoxesRunTime.boxToLong(threadId));
            $buf.$amp$plus(new Elem((String)null, "td", var33, var41, false, var46.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n          "));
            MetaData $md = scala.xml.Null..MODULE$;
            MetaData var34 = new UnprefixedAttribute("id", threadId + "_td_name", $md);
            var41 = scala.xml.TopScope..MODULE$;
            var46 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(thread.threadName());
            $buf.$amp$plus(new Elem((String)null, "td", var34, var41, false, var46.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n          "));
            MetaData $md = scala.xml.Null..MODULE$;
            MetaData var35 = new UnprefixedAttribute("id", threadId + "_td_state", $md);
            var41 = scala.xml.TopScope..MODULE$;
            var46 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(thread.threadState());
            $buf.$amp$plus(new Elem((String)null, "td", var35, var41, false, var46.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n          "));
            MetaData $md = scala.xml.Null..MODULE$;
            MetaData var36 = new UnprefixedAttribute("id", threadId + "_td_locking", $md);
            var41 = scala.xml.TopScope..MODULE$;
            var46 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(blockedBy);
            $buf.$amp$plus(heldLocks);
            $buf.$amp$plus(new Elem((String)null, "td", var36, var41, false, var46.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n          "));
            MetaData $md = scala.xml.Null..MODULE$;
            MetaData var37 = new UnprefixedAttribute("class", new Text("d-none"), $md);
            var37 = new UnprefixedAttribute("id", threadId + "_td_stacktrace", var37);
            var41 = scala.xml.TopScope..MODULE$;
            var46 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(thread.stackTrace().html());
            $buf.$amp$plus(new Elem((String)null, "td", var37, var41, false, var46.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n        "));
            return new Elem((String)null, "tr", var28, var39, false, var40.seqToNodeSeq($buf));
         }, scala.reflect.ClassTag..MODULE$.apply(Elem.class));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var51 = new UnprefixedAttribute("class", new Text("row"), $md);
         TopScope var10005 = scala.xml.TopScope..MODULE$;
         NodeSeq var10007 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n      "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var52 = new UnprefixedAttribute("class", new Text("col-12"), $md);
         TopScope var10014 = scala.xml.TopScope..MODULE$;
         NodeSeq var10016 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n        "));
         Null var10022 = scala.xml.Null..MODULE$;
         TopScope var10023 = scala.xml.TopScope..MODULE$;
         NodeSeq var10025 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Updated at "));
         $buf.$amp$plus(UIUtils$.MODULE$.formatDate(time));
         $buf.$amp$plus(new Elem((String)null, "p", var10022, var10023, false, var10025.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n        "));
         $buf.$amp$plus(this.flamegraphEnabled() ? this.drawExecutorFlamegraph(request, threadDump) : scala.package..MODULE$.Seq().empty());
         $buf.$amp$plus(new Text("\n        "));
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Elem((String)null, "p", scala.xml.Null..MODULE$, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var53 = new UnprefixedAttribute("onClick", new Text("collapseTableAndButton('collapse-thead-stack-trace-table', 'thead-stack-trace-table')"), $md);
         var53 = new UnprefixedAttribute("class", new Text("collapse-thead-stack-trace-table collapse-table"), var53);
         TopScope var10024 = scala.xml.TopScope..MODULE$;
         NodeSeq var10026 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n            "));
         Null var10032 = scala.xml.Null..MODULE$;
         TopScope var10033 = scala.xml.TopScope..MODULE$;
         NodeSeq var10035 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n              "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var55 = new UnprefixedAttribute("class", new Text("collapse-table-arrow arrow-open"), $md);
         $buf.$amp$plus(new Elem((String)null, "span", var55, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
         $buf.$amp$plus(new Text("\n              "));
         Null var10041 = scala.xml.Null..MODULE$;
         TopScope var10042 = scala.xml.TopScope..MODULE$;
         NodeSeq var10044 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Thread Stack Trace"));
         $buf.$amp$plus(new Elem((String)null, "a", var10041, var10042, false, var10044.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n            "));
         $buf.$amp$plus(new Elem((String)null, "h4", var10032, var10033, false, var10035.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n          "));
         $buf.$amp$plus(new Elem((String)null, "span", var53, var10024, false, var10026.seqToNodeSeq($buf)));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var56 = new UnprefixedAttribute("style", new Text("display: flex; align-items: center;"), $md);
         var56 = new UnprefixedAttribute("class", new Text("thead-stack-trace-table-button"), var56);
         var10024 = scala.xml.TopScope..MODULE$;
         var10026 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n            "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var58 = new UnprefixedAttribute("onClick", new Text("expandAllThreadStackTrace(true)"), $md);
         var58 = new UnprefixedAttribute("class", new Text("expandbutton"), var58);
         var10033 = scala.xml.TopScope..MODULE$;
         var10035 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Expand All"));
         $buf.$amp$plus(new Elem((String)null, "a", var58, var10033, false, var10035.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n            "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var60 = new UnprefixedAttribute("onClick", new Text("collapseAllThreadStackTrace(true)"), $md);
         var60 = new UnprefixedAttribute("class", new Text("expandbutton d-none"), var60);
         var10033 = scala.xml.TopScope..MODULE$;
         var10035 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Collapse All"));
         $buf.$amp$plus(new Elem((String)null, "a", var60, var10033, false, var10035.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n            "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var62 = new UnprefixedAttribute("download", "threaddump_" + executorId + ".txt", $md);
         Predef var10031 = scala.Predef..MODULE$;
         ArrayOps var90 = scala.collection.ArrayOps..MODULE$;
         Object var95 = scala.Predef..MODULE$.refArrayOps(threadDump);
         var62 = new UnprefixedAttribute("href", "data:text/plain;charset=utf-8," + var10031.wrapRefArray(var90.map$extension(var95, (x$1) -> x$1.toString(), scala.reflect.ClassTag..MODULE$.apply(String.class))).mkString(), var62);
         var62 = new UnprefixedAttribute("class", new Text("downloadbutton"), var62);
         TopScope var96 = scala.xml.TopScope..MODULE$;
         var10035 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Download"));
         $buf.$amp$plus(new Elem((String)null, "a", var62, var96, false, var10035.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n            "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var65 = new UnprefixedAttribute("class", new Text("form-inline"), $md);
         var96 = scala.xml.TopScope..MODULE$;
         var10035 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n              "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var66 = new UnprefixedAttribute("data-example-id", new Text("simple-form-inline"), $md);
         var66 = new UnprefixedAttribute("class", new Text("bs-example"), var66);
         var10042 = scala.xml.TopScope..MODULE$;
         var10044 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var68 = new UnprefixedAttribute("class", new Text("form-group"), $md);
         TopScope var10051 = scala.xml.TopScope..MODULE$;
         NodeSeq var10053 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                  "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var69 = new UnprefixedAttribute("class", new Text("input-group"), $md);
         TopScope var10060 = scala.xml.TopScope..MODULE$;
         NodeSeq var10062 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                    "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var70 = new UnprefixedAttribute("for", new Text("search"), $md);
         var70 = new UnprefixedAttribute("class", new Text("mr-2"), var70);
         TopScope var10069 = scala.xml.TopScope..MODULE$;
         NodeSeq var10071 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Search:"));
         $buf.$amp$plus(new Elem((String)null, "label", var70, var10069, false, var10071.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n                    "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var72 = new UnprefixedAttribute("oninput", new Text("onSearchStringChange()"), $md);
         var72 = new UnprefixedAttribute("id", new Text("search"), var72);
         var72 = new UnprefixedAttribute("class", new Text("form-control"), var72);
         var72 = new UnprefixedAttribute("type", new Text("text"), var72);
         $buf.$amp$plus(new Elem((String)null, "input", var72, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
         $buf.$amp$plus(new Text("\n                  "));
         $buf.$amp$plus(new Elem((String)null, "div", var69, var10060, false, var10062.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n                "));
         $buf.$amp$plus(new Elem((String)null, "div", var68, var10051, false, var10053.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n              "));
         $buf.$amp$plus(new Elem((String)null, "div", var66, var10042, false, var10044.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n            "));
         $buf.$amp$plus(new Elem((String)null, "div", var65, var96, false, var10035.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n          "));
         $buf.$amp$plus(new Elem((String)null, "div", var56, var10024, false, var10026.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Elem((String)null, "p", scala.xml.Null..MODULE$, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
         $buf.$amp$plus($buf);
         $buf.$amp$plus(new Text("\n        "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var76 = new UnprefixedAttribute("class", UIUtils$.MODULE$.TABLE_CLASS_STRIPED() + " accordion-group sortable thead-stack-trace-table collapsible-table", $md);
         var10023 = scala.xml.TopScope..MODULE$;
         var10025 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n          "));
         Null var88 = scala.xml.Null..MODULE$;
         TopScope var91 = scala.xml.TopScope..MODULE$;
         NodeSeq var10034 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n            "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var77 = new UnprefixedAttribute("onClick", new Text("collapseAllThreadStackTrace(false)"), $md);
         TopScope var103 = scala.xml.TopScope..MODULE$;
         NodeSeq var10043 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Thread ID"));
         $buf.$amp$plus(new Elem((String)null, "th", var77, var103, false, var10043.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n            "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var78 = new UnprefixedAttribute("onClick", new Text("collapseAllThreadStackTrace(false)"), $md);
         var103 = scala.xml.TopScope..MODULE$;
         var10043 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Thread Name"));
         $buf.$amp$plus(new Elem((String)null, "th", var78, var103, false, var10043.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n            "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var79 = new UnprefixedAttribute("onClick", new Text("collapseAllThreadStackTrace(false)"), $md);
         var103 = scala.xml.TopScope..MODULE$;
         var10043 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Thread State"));
         $buf.$amp$plus(new Elem((String)null, "th", var79, var103, false, var10043.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n            "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var80 = new UnprefixedAttribute("onClick", new Text("collapseAllThreadStackTrace(false)"), $md);
         var103 = scala.xml.TopScope..MODULE$;
         var10043 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n              "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var81 = new UnprefixedAttribute("title", new Text("Objects whose lock the thread currently holds"), $md);
         var81 = new UnprefixedAttribute("data-placement", new Text("top"), var81);
         var81 = new UnprefixedAttribute("data-toggle", new Text("tooltip"), var81);
         TopScope var10050 = scala.xml.TopScope..MODULE$;
         NodeSeq var10052 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                Thread Locks\n              "));
         $buf.$amp$plus(new Elem((String)null, "span", var81, var10050, false, var10052.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n            "));
         $buf.$amp$plus(new Elem((String)null, "th", var80, var103, false, var10043.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n          "));
         $buf.$amp$plus(new Elem((String)null, "thead", var88, var91, false, var10034.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n          "));
         var88 = scala.xml.Null..MODULE$;
         var91 = scala.xml.TopScope..MODULE$;
         var10034 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(dumpRows);
         $buf.$amp$plus(new Elem((String)null, "tbody", var88, var91, false, var10034.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n        "));
         $buf.$amp$plus(new Elem((String)null, "table", var76, var10023, false, var10025.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n      "));
         $buf.$amp$plus(new Elem((String)null, "div", var52, var10014, false, var10016.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n    "));
         return new Elem((String)null, "div", var51, var10005, false, var10007.seqToNodeSeq($buf));
      }).getOrElse(() -> scala.xml.Text..MODULE$.apply("Error fetching thread dump"));
      return UIUtils$.MODULE$.headerSparkPage(request, "Thread dump for executor " + executorId, () -> content, this.parent, UIUtils$.MODULE$.headerSparkPage$default$5(), UIUtils$.MODULE$.headerSparkPage$default$6(), UIUtils$.MODULE$.headerSparkPage$default$7());
   }

   private Seq drawExecutorFlamegraph(final HttpServletRequest request, final ThreadStackTrace[] thread) {
      StringOps var10000 = scala.collection.StringOps..MODULE$;
      Predef var10001 = scala.Predef..MODULE$;
      String var10002 = UIUtils$.MODULE$.formatImportJavaScript(request, "/static/flamegraph.js", scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"drawFlamegraph", "toggleFlamegraph"})));
      String js = var10000.stripMargin$extension(var10001.augmentString("\n         |" + var10002 + "\n         |\n         |drawFlamegraph();\n         |toggleFlamegraph();\n         |"));
      Null var10004 = scala.xml.Null..MODULE$;
      TopScope var10005 = scala.xml.TopScope..MODULE$;
      NodeSeq var10007 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n      "));
      Null var10013 = scala.xml.Null..MODULE$;
      TopScope var10014 = scala.xml.TopScope..MODULE$;
      NodeSeq var10016 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var21 = new UnprefixedAttribute("style", new Text("cursor: pointer;"), $md);
      var21 = new UnprefixedAttribute("id", new Text("executor-flamegraph-header"), var21);
      TopScope var10023 = scala.xml.TopScope..MODULE$;
      NodeSeq var10025 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n          "));
      Null var10031 = scala.xml.Null..MODULE$;
      TopScope var10032 = scala.xml.TopScope..MODULE$;
      NodeSeq var10034 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n            "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var23 = new UnprefixedAttribute("class", new Text("arrow-open"), $md);
      var23 = new UnprefixedAttribute("id", new Text("executor-flamegraph-arrow"), var23);
      $buf.$amp$plus(new Elem((String)null, "span", var23, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
      $buf.$amp$plus(new Text("\n            "));
      Null var10040 = scala.xml.Null..MODULE$;
      TopScope var10041 = scala.xml.TopScope..MODULE$;
      NodeSeq var10043 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("Flame Graph"));
      $buf.$amp$plus(new Elem((String)null, "a", var10040, var10041, false, var10043.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n          "));
      $buf.$amp$plus(new Elem((String)null, "h4", var10031, var10032, false, var10034.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n        "));
      $buf.$amp$plus(new Elem((String)null, "span", var21, var10023, false, var10025.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      $buf.$amp$plus(new Elem((String)null, "div", var10013, var10014, false, var10016.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var25 = new UnprefixedAttribute("class", new Text("d-none"), $md);
      var25 = new UnprefixedAttribute("id", new Text("executor-flamegraph-data"), var25);
      var10014 = scala.xml.TopScope..MODULE$;
      var10016 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(FlamegraphNode$.MODULE$.apply(thread).toJsonString());
      $buf.$amp$plus(new Elem((String)null, "div", var25, var10014, false, var10016.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var27 = new UnprefixedAttribute("id", new Text("executor-flamegraph-chart"), $md);
      var10014 = scala.xml.TopScope..MODULE$;
      var10016 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var28 = new UnprefixedAttribute("href", UIUtils$.MODULE$.prependBaseUri(request, "/static/d3-flamegraph.css", UIUtils$.MODULE$.prependBaseUri$default$3()), $md);
      var28 = new UnprefixedAttribute("type", new Text("text/css"), var28);
      var28 = new UnprefixedAttribute("rel", new Text("stylesheet"), var28);
      $buf.$amp$plus(new Elem((String)null, "link", var28, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var31 = new UnprefixedAttribute("src", UIUtils$.MODULE$.prependBaseUri(request, "/static/d3.min.js", UIUtils$.MODULE$.prependBaseUri$default$3()), $md);
      $buf.$amp$plus(new Elem((String)null, "script", var31, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var32 = new UnprefixedAttribute("src", UIUtils$.MODULE$.prependBaseUri(request, "/static/d3-flamegraph.min.js", UIUtils$.MODULE$.prependBaseUri$default$3()), $md);
      $buf.$amp$plus(new Elem((String)null, "script", var32, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var33 = new UnprefixedAttribute("src", UIUtils$.MODULE$.prependBaseUri(request, "/static/flamegraph.js", UIUtils$.MODULE$.prependBaseUri$default$3()), $md);
      var33 = new UnprefixedAttribute("type", new Text("module"), var33);
      $buf.$amp$plus(new Elem((String)null, "script", var33, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var35 = new UnprefixedAttribute("type", new Text("module"), $md);
      var10023 = scala.xml.TopScope..MODULE$;
      var10025 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(scala.xml.Unparsed..MODULE$.apply(js));
      $buf.$amp$plus(new Elem((String)null, "script", var35, var10023, false, var10025.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      $buf.$amp$plus(new Elem((String)null, "div", var27, var10014, false, var10016.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n    "));
      return new Elem((String)null, "div", var10004, var10005, false, var10007.seqToNodeSeq($buf));
   }

   public ExecutorThreadDumpPage(final SparkUITab parent, final Option sc) {
      super("threadDump");
      this.parent = parent;
      this.sc = sc;
      this.flamegraphEnabled = sc.isDefined() && BoxesRunTime.unboxToBoolean(((SparkContext)sc.get()).conf().get(UI$.MODULE$.UI_FLAMEGRAPH_ENABLED()));
   }

   // $FF: synthetic method
   private static Object $deserializeLambda$(SerializedLambda var0) {
      return Class.lambdaDeserialize<invokedynamic>(var0);
   }
}
