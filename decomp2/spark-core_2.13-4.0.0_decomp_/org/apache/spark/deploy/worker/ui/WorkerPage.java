package org.apache.spark.deploy.worker.ui;

import jakarta.servlet.http.HttpServletRequest;
import java.lang.invoke.SerializedLambda;
import org.apache.spark.deploy.DeployMessages;
import org.apache.spark.deploy.ExecutorState$;
import org.apache.spark.deploy.JsonProtocol$;
import org.apache.spark.deploy.StandaloneResourceUtils$;
import org.apache.spark.deploy.master.DriverState$;
import org.apache.spark.deploy.worker.DriverRunner;
import org.apache.spark.deploy.worker.ExecutorRunner;
import org.apache.spark.resource.ResourceInformation;
import org.apache.spark.rpc.RpcEndpointRef;
import org.apache.spark.ui.UIUtils$;
import org.apache.spark.ui.WebUIPage;
import org.apache.spark.util.Utils$;
import org.json4s.JValue;
import scala.Enumeration;
import scala.MatchError;
import scala.collection.immutable.List;
import scala.collection.immutable.Map;
import scala.collection.immutable.Seq;
import scala.reflect.ScalaSignature;
import scala.reflect.ClassTag.;
import scala.runtime.BoxedUnit;
import scala.runtime.BoxesRunTime;
import scala.xml.Comment;
import scala.xml.Elem;
import scala.xml.MetaData;
import scala.xml.NodeBuffer;
import scala.xml.NodeSeq;
import scala.xml.Null;
import scala.xml.Text;
import scala.xml.TopScope;
import scala.xml.UnprefixedAttribute;

@ScalaSignature(
   bytes = "\u0006\u0005\u0005=a!\u0002\u0006\f\u0001-9\u0002\u0002C\u000f\u0001\u0005\u0003\u0005\u000b\u0011B\u0010\t\u000b\r\u0002A\u0011\u0001\u0013\t\u000f\u001d\u0002!\u0019!C\u0005Q!1q\u0006\u0001Q\u0001\n%BQ\u0001\r\u0001\u0005BEBQ\u0001\u0012\u0001\u0005\n\u0015CQ\u0001\u001a\u0001\u0005\u0002\u0015DQA\u001e\u0001\u0005\u0002]DQA \u0001\u0005\u0002}\u0014!bV8sW\u0016\u0014\b+Y4f\u0015\taQ\"\u0001\u0002vS*\u0011abD\u0001\u0007o>\u00148.\u001a:\u000b\u0005A\t\u0012A\u00023fa2|\u0017P\u0003\u0002\u0013'\u0005)1\u000f]1sW*\u0011A#F\u0001\u0007CB\f7\r[3\u000b\u0003Y\t1a\u001c:h'\t\u0001\u0001\u0004\u0005\u0002\u001a75\t!D\u0003\u0002\r#%\u0011AD\u0007\u0002\n/\u0016\u0014W+\u0013)bO\u0016\fa\u0001]1sK:$8\u0001\u0001\t\u0003A\u0005j\u0011aC\u0005\u0003E-\u00111bV8sW\u0016\u0014x+\u001a2V\u0013\u00061A(\u001b8jiz\"\"!\n\u0014\u0011\u0005\u0001\u0002\u0001\"B\u000f\u0003\u0001\u0004y\u0012AD<pe.,'/\u00128ea>Lg\u000e^\u000b\u0002SA\u0011!&L\u0007\u0002W)\u0011A&E\u0001\u0004eB\u001c\u0017B\u0001\u0018,\u00059\u0011\u0006oY#oIB|\u0017N\u001c;SK\u001a\fqb^8sW\u0016\u0014XI\u001c3q_&tG\u000fI\u0001\u000be\u0016tG-\u001a:Kg>tGC\u0001\u001a9!\t\u0019d'D\u00015\u0015\t)T#\u0001\u0004kg>tGg]\u0005\u0003oQ\u0012aA\u0013,bYV,\u0007\"B\u001d\u0006\u0001\u0004Q\u0014a\u0002:fcV,7\u000f\u001e\t\u0003w\tk\u0011\u0001\u0010\u0006\u0003{y\nA\u0001\u001b;ua*\u0011q\bQ\u0001\bg\u0016\u0014h\u000f\\3u\u0015\u0005\t\u0015a\u00026bW\u0006\u0014H/Y\u0005\u0003\u0007r\u0012!\u0003\u0013;uaN+'O\u001e7fiJ+\u0017/^3ti\u0006abm\u001c:nCR<vN]6feJ+7o\\;sG\u0016\u001cH)\u001a;bS2\u001cHC\u0001$T!\t9\u0005K\u0004\u0002I\u001dB\u0011\u0011\nT\u0007\u0002\u0015*\u00111JH\u0001\u0007yI|w\u000e\u001e \u000b\u00035\u000bQa]2bY\u0006L!a\u0014'\u0002\rA\u0013X\rZ3g\u0013\t\t&K\u0001\u0004TiJLgn\u001a\u0006\u0003\u001f2CQ\u0001\u0016\u0004A\u0002U\u000b1b^8sW\u0016\u00148\u000b^1uKB\u0011a+\u0019\b\u0003/~s!\u0001\u00170\u000f\u0005ekfB\u0001.]\u001d\tI5,C\u0001\u0017\u0013\t!R#\u0003\u0002\u0013'%\u0011\u0001#E\u0005\u0003A>\ta\u0002R3qY>LX*Z:tC\u001e,7/\u0003\u0002cG\n\u0019rk\u001c:lKJ\u001cF/\u0019;f%\u0016\u001c\bo\u001c8tK*\u0011\u0001mD\u0001\u0007e\u0016tG-\u001a:\u0015\u0005\u0019,\bcA4m_:\u0011\u0001N\u001b\b\u0003\u0013&L\u0011!T\u0005\u0003W2\u000bq\u0001]1dW\u0006<W-\u0003\u0002n]\n\u00191+Z9\u000b\u0005-d\u0005C\u00019t\u001b\u0005\t(B\u0001:M\u0003\rAX\u000e\\\u0005\u0003iF\u0014AAT8eK\")\u0011h\u0002a\u0001u\u0005YQ\r_3dkR|'OU8x)\t1\u0007\u0010C\u0003z\u0011\u0001\u0007!0\u0001\u0005fq\u0016\u001cW\u000f^8s!\tYH0D\u0001\u000e\u0013\tiXB\u0001\bFq\u0016\u001cW\u000f^8s%Vtg.\u001a:\u0002\u0013\u0011\u0014\u0018N^3s%><H#\u00024\u0002\u0002\u0005\u0015\u0001BBA\u0002\u0013\u0001\u0007a)\u0001\u0005x_J\\WM]%e\u0011\u001d\t9!\u0003a\u0001\u0003\u0013\ta\u0001\u001a:jm\u0016\u0014\bcA>\u0002\f%\u0019\u0011QB\u0007\u0003\u0019\u0011\u0013\u0018N^3s%Vtg.\u001a:"
)
public class WorkerPage extends WebUIPage {
   private final WorkerWebUI parent;
   private final RpcEndpointRef workerEndpoint;

   private RpcEndpointRef workerEndpoint() {
      return this.workerEndpoint;
   }

   public JValue renderJson(final HttpServletRequest request) {
      DeployMessages.WorkerStateResponse workerState = (DeployMessages.WorkerStateResponse)this.workerEndpoint().askSync(DeployMessages.RequestWorkerState$.MODULE$, .MODULE$.apply(DeployMessages.WorkerStateResponse.class));
      return JsonProtocol$.MODULE$.writeWorkerState(workerState);
   }

   private String formatWorkerResourcesDetails(final DeployMessages.WorkerStateResponse workerState) {
      Map totalInfo = workerState.resources();
      Map usedInfo = workerState.resourcesUsed();
      Map freeInfo = (Map)totalInfo.map((x0$1) -> {
         if (x0$1 != null) {
            String rName = (String)x0$1._1();
            ResourceInformation rInfo = (ResourceInformation)x0$1._2();
            String[] freeAddresses = usedInfo.contains(rName) ? (String[])scala.collection.ArrayOps..MODULE$.diff$extension(scala.Predef..MODULE$.refArrayOps((Object[])rInfo.addresses()), scala.Predef..MODULE$.wrapRefArray((Object[])((ResourceInformation)usedInfo.apply(rName)).addresses())) : rInfo.addresses();
            return scala.Predef.ArrowAssoc..MODULE$.$minus$greater$extension(scala.Predef..MODULE$.ArrowAssoc(rName), new ResourceInformation(rName, freeAddresses));
         } else {
            throw new MatchError(x0$1);
         }
      });
      return StandaloneResourceUtils$.MODULE$.formatResourcesDetails(usedInfo, freeInfo);
   }

   public Seq render(final HttpServletRequest request) {
      DeployMessages.WorkerStateResponse workerState = (DeployMessages.WorkerStateResponse)this.workerEndpoint().askSync(DeployMessages.RequestWorkerState$.MODULE$, .MODULE$.apply(DeployMessages.WorkerStateResponse.class));
      Seq executorHeaders = new scala.collection.immutable..colon.colon("ExecutorID", new scala.collection.immutable..colon.colon("State", new scala.collection.immutable..colon.colon("Cores", new scala.collection.immutable..colon.colon("Memory", new scala.collection.immutable..colon.colon("Resources", new scala.collection.immutable..colon.colon("Job Details", new scala.collection.immutable..colon.colon("Logs", scala.collection.immutable.Nil..MODULE$)))))));
      List runningExecutors = workerState.executors();
      Seq runningExecutorTable = UIUtils$.MODULE$.listingTable(executorHeaders, (executor) -> this.executorRow(executor), runningExecutors, UIUtils$.MODULE$.listingTable$default$4(), UIUtils$.MODULE$.listingTable$default$5(), UIUtils$.MODULE$.listingTable$default$6(), UIUtils$.MODULE$.listingTable$default$7(), UIUtils$.MODULE$.listingTable$default$8(), UIUtils$.MODULE$.listingTable$default$9());
      List finishedExecutors = workerState.finishedExecutors();
      Seq finishedExecutorTable = UIUtils$.MODULE$.listingTable(executorHeaders, (executor) -> this.executorRow(executor), finishedExecutors, UIUtils$.MODULE$.listingTable$default$4(), UIUtils$.MODULE$.listingTable$default$5(), UIUtils$.MODULE$.listingTable$default$6(), UIUtils$.MODULE$.listingTable$default$7(), UIUtils$.MODULE$.listingTable$default$8(), UIUtils$.MODULE$.listingTable$default$9());
      Seq driverHeaders = (Seq)scala.package..MODULE$.Seq().apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"DriverID", "Main Class", "State", "Cores", "Memory", "Resources", "Logs", "Notes"})));
      List runningDrivers = ((List)workerState.drivers().sortBy((x$1) -> x$1.driverId(), scala.math.Ordering.String..MODULE$)).reverse();
      Seq runningDriverTable = UIUtils$.MODULE$.listingTable(driverHeaders, (x$2) -> this.driverRow(workerState.workerId(), x$2), runningDrivers, UIUtils$.MODULE$.listingTable$default$4(), UIUtils$.MODULE$.listingTable$default$5(), UIUtils$.MODULE$.listingTable$default$6(), UIUtils$.MODULE$.listingTable$default$7(), UIUtils$.MODULE$.listingTable$default$8(), UIUtils$.MODULE$.listingTable$default$9());
      List finishedDrivers = ((List)workerState.finishedDrivers().sortBy((x$3) -> x$3.driverId(), scala.math.Ordering.String..MODULE$)).reverse();
      Seq finishedDriverTable = UIUtils$.MODULE$.listingTable(driverHeaders, (x$4) -> this.driverRow(workerState.workerId(), x$4), finishedDrivers, UIUtils$.MODULE$.listingTable$default$4(), UIUtils$.MODULE$.listingTable$default$5(), UIUtils$.MODULE$.listingTable$default$6(), UIUtils$.MODULE$.listingTable$default$7(), UIUtils$.MODULE$.listingTable$default$8(), UIUtils$.MODULE$.listingTable$default$9());
      String workerUrlRef = UIUtils$.MODULE$.makeHref(this.parent.worker().reverseProxy(), workerState.workerId(), this.parent.webUrl());
      NodeBuffer $buf = new NodeBuffer();
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var69 = new UnprefixedAttribute("class", new Text("row"), $md);
      TopScope var10006 = scala.xml.TopScope..MODULE$;
      NodeSeq var10008 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text(" "));
      $buf.$amp$plus(new Comment(" Worker Details "));
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var70 = new UnprefixedAttribute("class", new Text("col-12"), $md);
      TopScope var10015 = scala.xml.TopScope..MODULE$;
      NodeSeq var10017 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n          "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var71 = new UnprefixedAttribute("class", new Text("list-unstyled"), $md);
      TopScope var10024 = scala.xml.TopScope..MODULE$;
      NodeSeq var10026 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n            "));
      Null var10032 = scala.xml.Null..MODULE$;
      TopScope var10033 = scala.xml.TopScope..MODULE$;
      NodeSeq var10035 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      Null var10041 = scala.xml.Null..MODULE$;
      TopScope var10042 = scala.xml.TopScope..MODULE$;
      NodeSeq var10044 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("ID:"));
      $buf.$amp$plus(new Elem((String)null, "strong", var10041, var10042, false, var10044.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n              "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var72 = new UnprefixedAttribute("href", workerUrlRef + "/logPage/?self&logType=out", $md);
      var10042 = scala.xml.TopScope..MODULE$;
      var10044 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(workerState.workerId());
      $buf.$amp$plus(new Elem((String)null, "a", var72, var10042, false, var10044.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n            "));
      $buf.$amp$plus(new Elem((String)null, "li", var10032, var10033, false, var10035.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n            "));
      var10032 = scala.xml.Null..MODULE$;
      var10033 = scala.xml.TopScope..MODULE$;
      var10035 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      var10041 = scala.xml.Null..MODULE$;
      var10042 = scala.xml.TopScope..MODULE$;
      var10044 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n              Master URL:"));
      $buf.$amp$plus(new Elem((String)null, "strong", var10041, var10042, false, var10044.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text(" "));
      $buf.$amp$plus(workerState.masterUrl());
      $buf.$amp$plus(new Text("\n            "));
      $buf.$amp$plus(new Elem((String)null, "li", var10032, var10033, false, var10035.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n            "));
      var10032 = scala.xml.Null..MODULE$;
      var10033 = scala.xml.TopScope..MODULE$;
      var10035 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      var10041 = scala.xml.Null..MODULE$;
      var10042 = scala.xml.TopScope..MODULE$;
      var10044 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("Cores:"));
      $buf.$amp$plus(new Elem((String)null, "strong", var10041, var10042, false, var10044.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text(" "));
      $buf.$amp$plus(BoxesRunTime.boxToInteger(workerState.cores()));
      $buf.$amp$plus(new Text(" ("));
      $buf.$amp$plus(BoxesRunTime.boxToInteger(workerState.coresUsed()));
      $buf.$amp$plus(new Text(" Used)"));
      $buf.$amp$plus(new Elem((String)null, "li", var10032, var10033, false, var10035.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n            "));
      var10032 = scala.xml.Null..MODULE$;
      var10033 = scala.xml.TopScope..MODULE$;
      var10035 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      var10041 = scala.xml.Null..MODULE$;
      var10042 = scala.xml.TopScope..MODULE$;
      var10044 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("Memory:"));
      $buf.$amp$plus(new Elem((String)null, "strong", var10041, var10042, false, var10044.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text(" "));
      $buf.$amp$plus(Utils$.MODULE$.megabytesToString((long)workerState.memory()));
      $buf.$amp$plus(new Text("\n              ("));
      $buf.$amp$plus(Utils$.MODULE$.megabytesToString((long)workerState.memoryUsed()));
      $buf.$amp$plus(new Text(" Used)"));
      $buf.$amp$plus(new Elem((String)null, "li", var10032, var10033, false, var10035.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n            "));
      var10032 = scala.xml.Null..MODULE$;
      var10033 = scala.xml.TopScope..MODULE$;
      var10035 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      var10041 = scala.xml.Null..MODULE$;
      var10042 = scala.xml.TopScope..MODULE$;
      var10044 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("Resources:"));
      $buf.$amp$plus(new Elem((String)null, "strong", var10041, var10042, false, var10044.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n              "));
      $buf.$amp$plus(this.formatWorkerResourcesDetails(workerState));
      $buf.$amp$plus(new Elem((String)null, "li", var10032, var10033, false, var10035.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n          "));
      $buf.$amp$plus(new Elem((String)null, "ul", var71, var10024, false, var10026.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n          "));
      Null var10023 = scala.xml.Null..MODULE$;
      var10024 = scala.xml.TopScope..MODULE$;
      var10026 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var73 = new UnprefixedAttribute("href", workerState.masterWebUiUrl(), $md);
      var10033 = scala.xml.TopScope..MODULE$;
      var10035 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("Back to Master"));
      $buf.$amp$plus(new Elem((String)null, "a", var73, var10033, false, var10035.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Elem((String)null, "p", var10023, var10024, false, var10026.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n        "));
      $buf.$amp$plus(new Elem((String)null, "div", var70, var10015, false, var10017.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      $buf.$amp$plus(new Elem((String)null, "div", var69, var10006, false, var10008.seqToNodeSeq($buf)));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var74 = new UnprefixedAttribute("class", new Text("row"), $md);
      Elem var10001 = new Elem;
      var10006 = scala.xml.TopScope..MODULE$;
      var10008 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text(" "));
      $buf.$amp$plus(new Comment(" Executors and Drivers "));
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var75 = new UnprefixedAttribute("class", new Text("col-12"), $md);
      Elem var10010 = new Elem;
      var10015 = scala.xml.TopScope..MODULE$;
      var10017 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n          "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var76 = new UnprefixedAttribute("onClick", new Text("collapseTable('collapse-aggregated-runningExecutors',\n              'aggregated-runningExecutors')"), $md);
      var76 = new UnprefixedAttribute("class", new Text("collapse-aggregated-runningExecutors collapse-table"), var76);
      var10024 = scala.xml.TopScope..MODULE$;
      var10026 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n            "));
      var10032 = scala.xml.Null..MODULE$;
      var10033 = scala.xml.TopScope..MODULE$;
      var10035 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n              "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var78 = new UnprefixedAttribute("class", new Text("collapse-table-arrow arrow-open"), $md);
      $buf.$amp$plus(new Elem((String)null, "span", var78, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
      $buf.$amp$plus(new Text("\n              "));
      var10041 = scala.xml.Null..MODULE$;
      var10042 = scala.xml.TopScope..MODULE$;
      var10044 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("Running Executors ("));
      $buf.$amp$plus(BoxesRunTime.boxToInteger(runningExecutors.size()));
      $buf.$amp$plus(new Text(")"));
      $buf.$amp$plus(new Elem((String)null, "a", var10041, var10042, false, var10044.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n            "));
      $buf.$amp$plus(new Elem((String)null, "h4", var10032, var10033, false, var10035.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n          "));
      $buf.$amp$plus(new Elem((String)null, "span", var76, var10024, false, var10026.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n          "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var79 = new UnprefixedAttribute("class", new Text("aggregated-runningExecutors collapsible-table"), $md);
      var10024 = scala.xml.TopScope..MODULE$;
      var10026 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n            "));
      $buf.$amp$plus(runningExecutorTable);
      $buf.$amp$plus(new Text("\n          "));
      $buf.$amp$plus(new Elem((String)null, "div", var79, var10024, false, var10026.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n          "));
      Object var96;
      if (runningDrivers.nonEmpty()) {
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var80 = new UnprefixedAttribute("onClick", new Text("collapseTable('collapse-aggregated-runningDrivers',\n                  'aggregated-runningDrivers')"), $md);
         var80 = new UnprefixedAttribute("class", new Text("collapse-aggregated-runningDrivers collapse-table"), var80);
         var10024 = scala.xml.TopScope..MODULE$;
         var10026 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                "));
         var10032 = scala.xml.Null..MODULE$;
         var10033 = scala.xml.TopScope..MODULE$;
         var10035 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                  "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var82 = new UnprefixedAttribute("class", new Text("collapse-table-arrow arrow-open"), $md);
         $buf.$amp$plus(new Elem((String)null, "span", var82, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
         $buf.$amp$plus(new Text("\n                  "));
         var10041 = scala.xml.Null..MODULE$;
         var10042 = scala.xml.TopScope..MODULE$;
         var10044 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Running Drivers ("));
         $buf.$amp$plus(BoxesRunTime.boxToInteger(runningDrivers.size()));
         $buf.$amp$plus(new Text(")"));
         $buf.$amp$plus(new Elem((String)null, "a", var10041, var10042, false, var10044.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n                "));
         $buf.$amp$plus(new Elem((String)null, "h4", var10032, var10033, false, var10035.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n              "));
         Elem var10019 = new Elem((String)null, "span", var80, var10024, false, var10026.seqToNodeSeq($buf));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var83 = new UnprefixedAttribute("class", new Text("aggregated-runningDrivers collapsible-table"), $md);
         TopScope var10025 = scala.xml.TopScope..MODULE$;
         NodeSeq var10027 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                "));
         $buf.$amp$plus(runningDriverTable);
         $buf.$amp$plus(new Text("\n              "));
         var96 = var10019.$plus$plus(new Elem((String)null, "div", var83, var10025, false, var10027.seqToNodeSeq($buf)));
      } else {
         var96 = BoxedUnit.UNIT;
      }

      $buf.$amp$plus(var96);
      $buf.$amp$plus(new Text("\n          "));
      if (finishedExecutors.nonEmpty()) {
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var84 = new UnprefixedAttribute("onClick", new Text("collapseTable('collapse-aggregated-finishedExecutors',\n                  'aggregated-finishedExecutors')"), $md);
         var84 = new UnprefixedAttribute("class", new Text("collapse-aggregated-finishedExecutors collapse-table"), var84);
         var10024 = scala.xml.TopScope..MODULE$;
         var10026 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                "));
         var10032 = scala.xml.Null..MODULE$;
         var10033 = scala.xml.TopScope..MODULE$;
         var10035 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                  "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var86 = new UnprefixedAttribute("class", new Text("collapse-table-arrow arrow-open"), $md);
         $buf.$amp$plus(new Elem((String)null, "span", var86, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
         $buf.$amp$plus(new Text("\n                  "));
         var10041 = scala.xml.Null..MODULE$;
         var10042 = scala.xml.TopScope..MODULE$;
         var10044 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Finished Executors ("));
         $buf.$amp$plus(BoxesRunTime.boxToInteger(finishedExecutors.size()));
         $buf.$amp$plus(new Text(")"));
         $buf.$amp$plus(new Elem((String)null, "a", var10041, var10042, false, var10044.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n                "));
         $buf.$amp$plus(new Elem((String)null, "h4", var10032, var10033, false, var10035.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n              "));
         Elem var97 = new Elem((String)null, "span", var84, var10024, false, var10026.seqToNodeSeq($buf));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var87 = new UnprefixedAttribute("class", new Text("aggregated-finishedExecutors collapsible-table"), $md);
         TopScope var107 = scala.xml.TopScope..MODULE$;
         NodeSeq var115 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                "));
         $buf.$amp$plus(finishedExecutorTable);
         $buf.$amp$plus(new Text("\n              "));
         var96 = var97.$plus$plus(new Elem((String)null, "div", var87, var107, false, var115.seqToNodeSeq($buf)));
      } else {
         var96 = BoxedUnit.UNIT;
      }

      $buf.$amp$plus(var96);
      $buf.$amp$plus(new Text("\n          "));
      if (finishedDrivers.nonEmpty()) {
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var88 = new UnprefixedAttribute("onClick", new Text("collapseTable('collapse-aggregated-finishedDrivers',\n                  'aggregated-finishedDrivers')"), $md);
         var88 = new UnprefixedAttribute("class", new Text("collapse-aggregated-finishedDrivers collapse-table"), var88);
         var10024 = scala.xml.TopScope..MODULE$;
         var10026 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                "));
         var10032 = scala.xml.Null..MODULE$;
         var10033 = scala.xml.TopScope..MODULE$;
         var10035 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                  "));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var90 = new UnprefixedAttribute("class", new Text("collapse-table-arrow arrow-open"), $md);
         $buf.$amp$plus(new Elem((String)null, "span", var90, scala.xml.TopScope..MODULE$, false, scala.collection.immutable.Nil..MODULE$));
         $buf.$amp$plus(new Text("\n                  "));
         var10041 = scala.xml.Null..MODULE$;
         var10042 = scala.xml.TopScope..MODULE$;
         var10044 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("Finished Drivers ("));
         $buf.$amp$plus(BoxesRunTime.boxToInteger(finishedDrivers.size()));
         $buf.$amp$plus(new Text(")"));
         $buf.$amp$plus(new Elem((String)null, "a", var10041, var10042, false, var10044.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n                "));
         $buf.$amp$plus(new Elem((String)null, "h4", var10032, var10033, false, var10035.seqToNodeSeq($buf)));
         $buf.$amp$plus(new Text("\n              "));
         Elem var99 = new Elem((String)null, "span", var88, var10024, false, var10026.seqToNodeSeq($buf));
         MetaData $md = scala.xml.Null..MODULE$;
         MetaData var91 = new UnprefixedAttribute("class", new Text("aggregated-finishedDrivers collapsible-table"), $md);
         TopScope var108 = scala.xml.TopScope..MODULE$;
         NodeSeq var116 = scala.xml.NodeSeq..MODULE$;
         NodeBuffer $buf = new NodeBuffer();
         $buf.$amp$plus(new Text("\n                "));
         $buf.$amp$plus(finishedDriverTable);
         $buf.$amp$plus(new Text("\n              "));
         var96 = var99.$plus$plus(new Elem((String)null, "div", var91, var108, false, var116.seqToNodeSeq($buf)));
      } else {
         var96 = BoxedUnit.UNIT;
      }

      $buf.$amp$plus(var96);
      $buf.$amp$plus(new Text("\n        "));
      var10010.<init>((String)null, "div", var75, var10015, false, var10017.seqToNodeSeq($buf));
      $buf.$amp$plus(var10010);
      $buf.$amp$plus(new Text("\n      "));
      var10001.<init>((String)null, "div", var74, var10006, false, var10008.seqToNodeSeq($buf));
      $buf.$amp$plus(var10001);
      return UIUtils$.MODULE$.basicSparkPage(request, () -> scala.xml.NodeSeq..MODULE$.seqToNodeSeq($buf), scala.collection.StringOps..MODULE$.format$extension(scala.Predef..MODULE$.augmentString("Spark Worker at %s:%s"), scala.runtime.ScalaRunTime..MODULE$.genericWrapArray(new Object[]{workerState.host(), BoxesRunTime.boxToInteger(workerState.port())})), UIUtils$.MODULE$.basicSparkPage$default$4());
   }

   public Seq executorRow(final ExecutorRunner executor) {
      String workerUrlRef;
      NodeBuffer $buf;
      NodeBuffer $buf;
      NodeBuffer $buf;
      NodeBuffer $buf;
      UnprefixedAttribute var29;
      Null var36;
      TopScope var42;
      NodeSeq var48;
      Null var54;
      TopScope var56;
      NodeSeq var58;
      Object var60;
      Elem var10000;
      Null var10004;
      TopScope var10005;
      NodeSeq var10007;
      Elem var10009;
      Elem var10018;
      TopScope var10023;
      NodeSeq var10025;
      Elem var10027;
      label19: {
         label18: {
            workerUrlRef = UIUtils$.MODULE$.makeHref(this.parent.worker().reverseProxy(), executor.workerId(), this.parent.webUrl());
            String appUrlRef = UIUtils$.MODULE$.makeHref(this.parent.worker().reverseProxy(), executor.appId(), executor.appDesc().appUiUrl());
            var10000 = new Elem;
            var10004 = scala.xml.Null..MODULE$;
            var10005 = scala.xml.TopScope..MODULE$;
            var10007 = scala.xml.NodeSeq..MODULE$;
            $buf = new NodeBuffer();
            $buf.$amp$plus(new Text("\n      "));
            var36 = scala.xml.Null..MODULE$;
            var42 = scala.xml.TopScope..MODULE$;
            var48 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(BoxesRunTime.boxToInteger(executor.execId()));
            $buf.$amp$plus(new Elem((String)null, "td", var36, var42, false, var48.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n      "));
            var36 = scala.xml.Null..MODULE$;
            var42 = scala.xml.TopScope..MODULE$;
            var48 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(executor.state());
            $buf.$amp$plus(new Elem((String)null, "td", var36, var42, false, var48.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n      "));
            var36 = scala.xml.Null..MODULE$;
            var42 = scala.xml.TopScope..MODULE$;
            var48 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(BoxesRunTime.boxToInteger(executor.cores()));
            $buf.$amp$plus(new Elem((String)null, "td", var36, var42, false, var48.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n      "));
            MetaData $md = scala.xml.Null..MODULE$;
            MetaData var28 = new UnprefixedAttribute("sorttable_customkey", Integer.toString(executor.memory()), $md);
            var42 = scala.xml.TopScope..MODULE$;
            var48 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(new Text("\n        "));
            $buf.$amp$plus(Utils$.MODULE$.megabytesToString((long)executor.memory()));
            $buf.$amp$plus(new Text("\n      "));
            $buf.$amp$plus(new Elem((String)null, "td", var28, var42, false, var48.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n      "));
            var36 = scala.xml.Null..MODULE$;
            var42 = scala.xml.TopScope..MODULE$;
            var48 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(StandaloneResourceUtils$.MODULE$.formatResourcesAddresses(executor.resources()));
            $buf.$amp$plus(new Elem((String)null, "td", var36, var42, false, var48.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n      "));
            var10009 = new Elem;
            var36 = scala.xml.Null..MODULE$;
            var42 = scala.xml.TopScope..MODULE$;
            var48 = scala.xml.NodeSeq..MODULE$;
            $buf = new NodeBuffer();
            $buf.$amp$plus(new Text("\n        "));
            MetaData $md = scala.xml.Null..MODULE$;
            var29 = new UnprefixedAttribute("class", new Text("list-unstyled"), $md);
            var10018 = new Elem;
            var10023 = scala.xml.TopScope..MODULE$;
            var10025 = scala.xml.NodeSeq..MODULE$;
            $buf = new NodeBuffer();
            $buf.$amp$plus(new Text("\n          "));
            var54 = scala.xml.Null..MODULE$;
            var56 = scala.xml.TopScope..MODULE$;
            var58 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            Null var10040 = scala.xml.Null..MODULE$;
            TopScope var10041 = scala.xml.TopScope..MODULE$;
            NodeSeq var10043 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(new Text("ID:"));
            $buf.$amp$plus(new Elem((String)null, "strong", var10040, var10041, false, var10043.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text(" "));
            $buf.$amp$plus(executor.appId());
            $buf.$amp$plus(new Elem((String)null, "li", var54, var56, false, var58.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n          "));
            var10027 = new Elem;
            var54 = scala.xml.Null..MODULE$;
            var56 = scala.xml.TopScope..MODULE$;
            var58 = scala.xml.NodeSeq..MODULE$;
            $buf = new NodeBuffer();
            var10040 = scala.xml.Null..MODULE$;
            var10041 = scala.xml.TopScope..MODULE$;
            var10043 = scala.xml.NodeSeq..MODULE$;
            NodeBuffer $buf = new NodeBuffer();
            $buf.$amp$plus(new Text("Name:"));
            $buf.$amp$plus(new Elem((String)null, "strong", var10040, var10041, false, var10043.seqToNodeSeq($buf)));
            $buf.$amp$plus(new Text("\n          "));
            Enumeration.Value var10036 = executor.state();
            Enumeration.Value var18 = ExecutorState$.MODULE$.RUNNING();
            if (var10036 == null) {
               if (var18 != null) {
                  break label18;
               }
            } else if (!var10036.equals(var18)) {
               break label18;
            }

            if (scala.collection.StringOps..MODULE$.nonEmpty$extension(scala.Predef..MODULE$.augmentString(executor.appDesc().appUiUrl()))) {
               MetaData $md = scala.xml.Null..MODULE$;
               MetaData var30 = new UnprefixedAttribute("href", appUrlRef, $md);
               var10041 = scala.xml.TopScope..MODULE$;
               var10043 = scala.xml.NodeSeq..MODULE$;
               NodeBuffer $buf = new NodeBuffer();
               $buf.$amp$plus(new Text(" "));
               $buf.$amp$plus(executor.appDesc().name());
               var60 = new Elem((String)null, "a", var30, var10041, false, var10043.seqToNodeSeq($buf));
               break label19;
            }
         }

         var60 = executor.appDesc().name();
      }

      $buf.$amp$plus(var60);
      $buf.$amp$plus(new Text("\n          "));
      var10027.<init>((String)null, "li", var54, var56, false, var58.seqToNodeSeq($buf));
      $buf.$amp$plus(var10027);
      $buf.$amp$plus(new Text("\n          "));
      var54 = scala.xml.Null..MODULE$;
      var56 = scala.xml.TopScope..MODULE$;
      var58 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      Null var62 = scala.xml.Null..MODULE$;
      TopScope var65 = scala.xml.TopScope..MODULE$;
      NodeSeq var68 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("User:"));
      $buf.$amp$plus(new Elem((String)null, "strong", var62, var65, false, var68.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text(" "));
      $buf.$amp$plus(executor.appDesc().user());
      $buf.$amp$plus(new Elem((String)null, "li", var54, var56, false, var58.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n        "));
      var10018.<init>((String)null, "ul", var29, var10023, false, var10025.seqToNodeSeq($buf));
      $buf.$amp$plus(var10018);
      $buf.$amp$plus(new Text("\n      "));
      var10009.<init>((String)null, "td", var36, var42, false, var48.seqToNodeSeq($buf));
      $buf.$amp$plus(var10009);
      $buf.$amp$plus(new Text("\n      "));
      var36 = scala.xml.Null..MODULE$;
      var42 = scala.xml.TopScope..MODULE$;
      var48 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var31 = new UnprefixedAttribute("href", workerUrlRef + "/logPage/?appId=" + executor.appId() + "&executorId=" + executor.execId() + "&logType=stdout", $md);
      var10023 = scala.xml.TopScope..MODULE$;
      var10025 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("stdout"));
      $buf.$amp$plus(new Elem((String)null, "a", var31, var10023, false, var10025.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var32 = new UnprefixedAttribute("href", workerUrlRef + "/logPage/?appId=" + executor.appId() + "&executorId=" + executor.execId() + "&logType=stderr", $md);
      var10023 = scala.xml.TopScope..MODULE$;
      var10025 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("stderr"));
      $buf.$amp$plus(new Elem((String)null, "a", var32, var10023, false, var10025.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      $buf.$amp$plus(new Elem((String)null, "td", var36, var42, false, var48.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n    "));
      var10000.<init>((String)null, "tr", var10004, var10005, false, var10007.seqToNodeSeq($buf));
      return var10000;
   }

   public Seq driverRow(final String workerId, final DriverRunner driver) {
      String workerUrlRef = UIUtils$.MODULE$.makeHref(this.parent.worker().reverseProxy(), workerId, this.parent.webUrl());
      Null var10004 = scala.xml.Null..MODULE$;
      TopScope var10005 = scala.xml.TopScope..MODULE$;
      NodeSeq var10007 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n      "));
      Null var10013 = scala.xml.Null..MODULE$;
      TopScope var10014 = scala.xml.TopScope..MODULE$;
      NodeSeq var10016 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(driver.driverId());
      $buf.$amp$plus(new Elem((String)null, "td", var10013, var10014, false, var10016.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      var10013 = scala.xml.Null..MODULE$;
      var10014 = scala.xml.TopScope..MODULE$;
      var10016 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(driver.driverDesc().command().arguments().apply(2));
      $buf.$amp$plus(new Elem((String)null, "td", var10013, var10014, false, var10016.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      var10013 = scala.xml.Null..MODULE$;
      var10014 = scala.xml.TopScope..MODULE$;
      var10016 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(driver.finalState().getOrElse(() -> DriverState$.MODULE$.RUNNING()));
      $buf.$amp$plus(new Elem((String)null, "td", var10013, var10014, false, var10016.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var19 = new UnprefixedAttribute("sorttable_customkey", Integer.toString(driver.driverDesc().cores()), $md);
      var10014 = scala.xml.TopScope..MODULE$;
      var10016 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n        "));
      $buf.$amp$plus(Integer.toString(driver.driverDesc().cores()));
      $buf.$amp$plus(new Text("\n      "));
      $buf.$amp$plus(new Elem((String)null, "td", var19, var10014, false, var10016.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var20 = new UnprefixedAttribute("sorttable_customkey", Integer.toString(driver.driverDesc().mem()), $md);
      var10014 = scala.xml.TopScope..MODULE$;
      var10016 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n        "));
      $buf.$amp$plus(Utils$.MODULE$.megabytesToString((long)driver.driverDesc().mem()));
      $buf.$amp$plus(new Text("\n      "));
      $buf.$amp$plus(new Elem((String)null, "td", var20, var10014, false, var10016.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      var10013 = scala.xml.Null..MODULE$;
      var10014 = scala.xml.TopScope..MODULE$;
      var10016 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(StandaloneResourceUtils$.MODULE$.formatResourcesAddresses(driver.resources()));
      $buf.$amp$plus(new Elem((String)null, "td", var10013, var10014, false, var10016.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      var10013 = scala.xml.Null..MODULE$;
      var10014 = scala.xml.TopScope..MODULE$;
      var10016 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var21 = new UnprefixedAttribute("href", workerUrlRef + "/logPage/?driverId=" + driver.driverId() + "&logType=stdout", $md);
      TopScope var10023 = scala.xml.TopScope..MODULE$;
      NodeSeq var10025 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("stdout"));
      $buf.$amp$plus(new Elem((String)null, "a", var21, var10023, false, var10025.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n        "));
      MetaData $md = scala.xml.Null..MODULE$;
      MetaData var22 = new UnprefixedAttribute("href", workerUrlRef + "/logPage/?driverId=" + driver.driverId() + "&logType=stderr", $md);
      var10023 = scala.xml.TopScope..MODULE$;
      var10025 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("stderr"));
      $buf.$amp$plus(new Elem((String)null, "a", var22, var10023, false, var10025.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      $buf.$amp$plus(new Elem((String)null, "td", var10013, var10014, false, var10016.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n      "));
      var10013 = scala.xml.Null..MODULE$;
      var10014 = scala.xml.TopScope..MODULE$;
      var10016 = scala.xml.NodeSeq..MODULE$;
      NodeBuffer $buf = new NodeBuffer();
      $buf.$amp$plus(new Text("\n        "));
      $buf.$amp$plus(driver.finalException().getOrElse(() -> ""));
      $buf.$amp$plus(new Text("\n      "));
      $buf.$amp$plus(new Elem((String)null, "td", var10013, var10014, false, var10016.seqToNodeSeq($buf)));
      $buf.$amp$plus(new Text("\n    "));
      return new Elem((String)null, "tr", var10004, var10005, false, var10007.seqToNodeSeq($buf));
   }

   public WorkerPage(final WorkerWebUI parent) {
      super("");
      this.parent = parent;
      this.workerEndpoint = parent.worker().self();
   }

   // $FF: synthetic method
   private static Object $deserializeLambda$(SerializedLambda var0) {
      return Class.lambdaDeserialize<invokedynamic>(var0);
   }
}
