package org.apache.spark.rdd;

import com.clearspring.analytics.stream.cardinality.HyperLogLogPlus;
import java.io.Serializable;
import java.lang.invoke.SerializedLambda;
import java.util.Map;
import java.util.Random;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.TextOutputFormat;
import org.apache.spark.ConstantPartitioner;
import org.apache.spark.ContextCleaner;
import org.apache.spark.Dependency;
import org.apache.spark.HashPartitioner;
import org.apache.spark.InterruptibleIterator;
import org.apache.spark.NarrowDependency;
import org.apache.spark.OneToOneDependency;
import org.apache.spark.Partition;
import org.apache.spark.PartitionEvaluatorFactory;
import org.apache.spark.Partitioner;
import org.apache.spark.Partitioner$;
import org.apache.spark.ShuffleDependency;
import org.apache.spark.SparkConf;
import org.apache.spark.SparkContext;
import org.apache.spark.SparkContext$;
import org.apache.spark.SparkEnv$;
import org.apache.spark.TaskContext;
import org.apache.spark.WritableFactory;
import org.apache.spark.WritableFactory$;
import org.apache.spark.annotation.DeveloperApi;
import org.apache.spark.annotation.Experimental;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.errors.SparkCoreErrors$;
import org.apache.spark.executor.InputMetrics;
import org.apache.spark.internal.LogEntry;
import org.apache.spark.internal.Logging;
import org.apache.spark.internal.MDC;
import org.apache.spark.partial.CountEvaluator;
import org.apache.spark.partial.GroupedCountEvaluator;
import org.apache.spark.partial.PartialResult;
import org.apache.spark.resource.ResourceProfile;
import org.apache.spark.storage.BlockResult;
import org.apache.spark.storage.RDDBlockId;
import org.apache.spark.storage.StorageLevel;
import org.apache.spark.util.ArrayImplicits;
import org.apache.spark.util.CallSite;
import org.apache.spark.util.Utils$;
import org.apache.spark.util.collection.ExternalAppendOnlyMap;
import org.apache.spark.util.collection.ExternalAppendOnlyMap$;
import org.apache.spark.util.collection.OpenHashMap;
import org.apache.spark.util.collection.OpenHashMap$mcJ$sp;
import org.apache.spark.util.random.BernoulliCellSampler;
import org.apache.spark.util.random.BernoulliCellSampler$;
import org.apache.spark.util.random.BernoulliSampler;
import org.apache.spark.util.random.PoissonSampler;
import org.apache.spark.util.random.SamplingUtils$;
import org.apache.spark.util.random.XORShiftRandom;
import org.slf4j.Logger;
import scala.Array;
import scala.Enumeration;
import scala.Function0;
import scala.Function1;
import scala.Function2;
import scala.Function3;
import scala.Function4;
import scala.MatchError;
import scala.Option;
import scala.PartialFunction;
import scala.Some;
import scala.StringContext;
import scala.Tuple2;
import scala.collection.BufferedIterator;
import scala.collection.Factory;
import scala.collection.Iterable;
import scala.collection.IterableOnce;
import scala.collection.IterableOnceOps;
import scala.collection.IterableOps;
import scala.collection.Iterator;
import scala.collection.Stepper;
import scala.collection.StepperShape;
import scala.collection.immutable.IndexedSeq;
import scala.collection.immutable.List;
import scala.collection.immutable.Range;
import scala.collection.immutable.Seq;
import scala.collection.immutable.Set;
import scala.collection.immutable.Stream;
import scala.collection.immutable.Vector;
import scala.collection.immutable.Nil.;
import scala.collection.mutable.ArrayBuffer;
import scala.collection.mutable.ArraySeq;
import scala.collection.mutable.Buffer;
import scala.collection.mutable.HashSet;
import scala.collection.mutable.StringBuilder;
import scala.math.Numeric;
import scala.math.Ordering;
import scala.ref.WeakReference;
import scala.reflect.ClassTag;
import scala.reflect.ScalaSignature;
import scala.runtime.BooleanRef;
import scala.runtime.BoxedUnit;
import scala.runtime.BoxesRunTime;
import scala.runtime.IntRef;
import scala.runtime.Null;
import scala.runtime.ObjectRef;
import scala.runtime.java8.JFunction0;
import scala.runtime.java8.JFunction1;
import scala.runtime.java8.JFunction2;
import scala.util.Either;
import scala.util.Left;
import scala.util.Right;

@ScalaSignature(
   bytes = "\u0006\u00055\rd\u0001CA\\\u0003s\u000b\t!a3\t\u0015\u0005}\bA!a\u0001\n\u0013\u0011\t\u0001\u0003\u0006\u0003\f\u0001\u0011\t\u0019!C\u0005\u0005\u001bA!B!\u0007\u0001\u0005\u0003\u0005\u000b\u0015\u0002B\u0002\u0011)\u0011\u0019\u0003\u0001BA\u0002\u0013%!Q\u0005\u0005\u000b\u0005\u001f\u0002!\u00111A\u0005\n\tE\u0003B\u0003B\u001f\u0001\t\u0005\t\u0015)\u0003\u0003(!Q!Q\u000b\u0001\u0003\u0004\u0003\u0006YAa\u0016\t\u000f\t%\u0004\u0001\"\u0001\u0003l!9!1\u0011\u0001\u0005\n\t\u0005\u0001b\u0002B5\u0001\u0011\u0005!Q\u0011\u0005\n\u0005;\u0003A\u0011AA_\u0005?CqAa*\u0001\r\u0003\u0011I\u000bC\u0004\u0003T\u00021\tB!6\t\u000f\tu\u0007\u0001\"\u0005\u0003`\"9!Q\u001e\u0001\u0005\u0012\t=\b\"CB\u0003\u0001\t\u0007I\u0011AB\u0004\u0011!\u0019)\u0002\u0001Q\u0001\n\r%\u0001bBB\r\u0001\u0011\u0005!\u0011\u0001\u0005\n\u00077\u0001!\u0019!C\u0001\u0007;A\u0001b!\n\u0001A\u0003%1q\u0004\u0005\f\u0007O\u0001\u0001\u0019!a\u0001\n\u0003\u0019I\u0003C\u0006\u0004,\u0001\u0001\r\u00111A\u0005\u0002\r5\u0002bCB\u0019\u0001\u0001\u0007\t\u0011)Q\u0005\u0005gDqa!\u000e\u0001\t\u0003\u00199\u0004C\u0004\u0004@\u0001!Ia!\u0011\t\u000f\r}\u0002\u0001\"\u0001\u0004^!91q\b\u0001\u0005\u0002\r\u0005\u0004bBB2\u0001\u0011\u00051\u0011\r\u0005\b\u0007K\u0002A\u0011AB4\u0011%\u0019i\u0007AI\u0001\n\u0003\u0019y\u0007C\u0004\u0004\u0004\u0002!\ta!\"\t\u0017\r\u001d\u0005A1A\u0005\u0002\u0005u6\u0011\u0012\u0005\t\u0007#\u0003\u0001\u0015!\u0003\u0004\f\"Y11\u0013\u0001A\u0002\u0003\u0007I\u0011BBK\u0011-\u0019i\u000b\u0001a\u0001\u0002\u0004%Iaa,\t\u0017\r\r\u0006\u00011A\u0001B\u0003&1q\u0013\u0005\f\u0007{\u0003\u0001\u0019!a\u0001\n\u0013\u0019y\fC\u0006\u0004`\u0002\u0001\r\u00111A\u0005\n\r\u0005\bbCBm\u0001\u0001\u0007\t\u0011)Q\u0005\u0007\u0003D1b!=\u0001\u0001\u0004\u0005\r\u0011\"\u0003\u0003V\"Y11\u001f\u0001A\u0002\u0003\u0007I\u0011BB{\u0011-\u0019I\u0010\u0001a\u0001\u0002\u0003\u0006KAa6\t\u000f\r}\b\u0001\"\u0003\u0005\u0002!9A1\u0002\u0001\u0005\u0006\u00115\u0001b\u0002C\u000e\u0001\u00115AQ\u0004\u0005\b\t[\u0001AQ\u0001Bk\u0011\u001d!y\u0003\u0001C\u0003\u0007;Aq\u0001\"\u0010\u0001\t\u000b!y\u0004C\u0004\u0005D\u0001!)\u0001\"\u0012\t\u0013\u0011-\u0003\u0001\"\u0001\u0002>\u00125\u0003\"\u0003C.\u0001\u0011\u0005\u0011Q\u0018C/\u0011%!\u0019\u0007\u0001C\u0001\u0003{#)\u0007C\u0005\u0005n\u0001!\t!!0\u0005p!9A1\u0011\u0001\u0005\u0002\u0011\u0015\u0005b\u0002CQ\u0001\u0011\u0005A1\u0015\u0005\b\t\u007f\u0003A\u0011\u0001Ca\u0011\u001d!9\r\u0001C\u0001\t\u0013D\u0011\u0002b7\u0001#\u0003%\t\u0001\"8\t\u000f\u0011\u001d\u0007\u0001\"\u0001\u0005d\"9AQ\u001d\u0001\u0005\u0002\u0011\u001d\b\"\u0003Cx\u0001E\u0005I\u0011\u0001Cy\u0011\u001d!)\u0010\u0001C\u0001\toD\u0011\"b\u0004\u0001#\u0003%\taa\u001c\t\u0013\u0015E\u0001!%A\u0005\u0002\u0015M\u0001\"CC\f\u0001E\u0005I\u0011AC\r\u0011\u001d)\t\u0003\u0001C\u0001\u000bGA\u0011\"\"\u0010\u0001#\u0003%\t!b\u0010\t\u000f\u0015\r\u0003\u0001\"\u0001\u0006F!IQ\u0011\u000b\u0001\u0012\u0002\u0013\u0005Qq\b\u0005\n\u000b'\u0002A\u0011AA_\u000b+Bq!\"\u0019\u0001\t\u0003)\u0019\u0007C\u0005\u0006p\u0001\t\n\u0011\"\u0001\u0006@!9Q\u0011\u000f\u0001\u0005\u0002\u0015M\u0004bBC=\u0001\u0011\u0005Q1\u0010\u0005\b\u000b\u007f\u0002A\u0011ACA\u0011%)\t\u000bAI\u0001\n\u0003)\u0019\u000bC\u0005\u0006(\u0002\t\n\u0011\"\u0001\u0006*\"9Q\u0011\u0017\u0001\u0005\u0002\u0015M\u0006bBCY\u0001\u0011\u0005Qq\u0017\u0005\n\u000b\u0003\u0004\u0011\u0013!C\u0001\u000b\u0007Dq!\"-\u0001\t\u0003)I\rC\u0004\u0006P\u0002!\t!\"5\t\u000f\u0015U\u0007\u0001\"\u0001\u0006X\"9Q1\u001f\u0001\u0005\u0002\u0015U\bbBCz\u0001\u0011\u0005a1\u0003\u0005\b\u000bg\u0004A\u0011\u0001D\u0016\u0011%1I\u0005AI\u0001\n\u00031Y\u0005C\u0004\u0007`\u0001!\tA\"\u0019\t\u000f\u0019}\u0003\u0001\"\u0001\u0007j!9aq\f\u0001\u0005\u0002\u0019u\u0004\"\u0003DQ\u0001E\u0005I\u0011\u0001DR\u0011%19\u000bAI\u0001\n\u00031I\u000bC\u0005\u0007.\u0002\t\n\u0011\"\u0001\u00070\"Ia1\u0017\u0001\u0012\u0002\u0013\u00051q\u000e\u0005\n\rk\u0003\u0011\u0013!C\u0001\u000bWC\u0011Bb.\u0001#\u0003%\tA\"/\t\u000f\u0019u\u0006\u0001\"\u0001\u0007@\"Ia1\u001c\u0001\u0012\u0002\u0013\u0005aQ\u001c\u0005\n\rC\u0004A\u0011AA_\rGD1b\"\u0001\u0001#\u0003%\t!!0\b\u0004!Yqq\u0001\u0001\u0012\u0002\u0013\u0005\u0011QXD\u0005\u0011%9i\u0001\u0001C\u0001\u0003{;y\u0001C\u0006\b*\u0001\t\n\u0011\"\u0001\u0002>\u001e-\u0002bBD\u0018\u0001\u0011\u0005q\u0011\u0007\u0005\n\u000f\u0017\u0002\u0011\u0013!C\u0001\u000f\u001bBqa\"\u0015\u0001\t\u00039\u0019\u0006C\u0004\bx\u0001!\ta\"\u001f\t\u0013\u001d=\u0002\u0001\"\u0001\u0002>\u001e]\u0005bBDZ\u0001\u0011\u0005qQ\u0017\u0005\b\u000f\u001b\u0004A\u0011ADh\u0011\u001d9i\r\u0001C\u0001\u000f\u007fDqa\"4\u0001\t\u0003AI\u0003C\u0004\bN\u0002!\t\u0001#\u001c\t\u000f\u001d5\u0007\u0001\"\u0001\t(\"9qQ\u001a\u0001\u0005\u0002!m\bbBE#\u0001\u0011\u0005\u0011r\t\u0005\b\u0013\u001b\u0002A\u0011AE(\u0011\u001dI)\u0006\u0001C\u0001\u0013/Bq!#\u0017\u0001\t\u0003IY\u0006C\u0004\nV\u0001!\t!#\u0018\t\u000f%]\u0004\u0001\"\u0001\nz!9\u0011r\u000f\u0001\u0005\u0002%u\u0004bBE<\u0001\u0011\u0005\u00112\u0011\u0005\n\u0013\u001b\u0003\u0011\u0013!C\u0001\u0013\u001fCq!#&\u0001\t\u0003I9\nC\u0004\n\u001e\u0002!\t!c(\t\u0013%\u001d\u0006!%A\u0005\u0002\u0015-\u0006bBEU\u0001\u0011\u0005\u00112\u0016\u0005\b\u0013o\u0003A\u0011AE]\u0011\u001dII\u000e\u0001C\u0001\u00137D\u0011\"#?\u0001#\u0003%\t!c?\t\u000f%e\u0007\u0001\"\u0001\u000b\u0006!9!R\u0005\u0001\u0005\u0002)\u001d\u0002b\u0002F\u0015\u0001\u0011\u0005!2\u0006\u0005\n\u0015\u000f\u0002\u0011\u0013!C\u0001\u0015\u0013BqA#\u0014\u0001\t\u0003Qy\u0005C\u0005\u000bX\u0001\t\n\u0011\"\u0001\u000bZ!9!2\f\u0001\u0005\u0002)u\u0003\"\u0003F6\u0001E\u0005I\u0011\u0001F%\u0011%Qi\u0007AI\u0001\n\u0003Qy\u0007C\u0004\u000bv\u0001!\tAc\u001e\t\u000f)U\u0004\u0001\"\u0001\u000b\u0000!I!R\u0011\u0001\u0012\u0002\u0013\u0005!\u0012\n\u0005\b\u0015\u000f\u0003A\u0011\u0001FE\u0011\u001dQy\t\u0001C\u0001\u0015\u0013CqA#%\u0001\t\u0003Q\u0019\nC\u0004\u000b\u0018\u0002!\tA#'\t\u000f)m\u0005\u0001\"\u0001\u000b\u001e\"9!R\u0015\u0001\u0005\u0002)\u001d\u0006b\u0002FX\u0001\u0011\u0005!\u0012\u0017\u0005\b\u0015o\u0003A\u0011\u0001F]\u0011\u001dQy\f\u0001C\u0001\u0015\u0003DqAc1\u0001\t\u0003Q)\rC\u0004\u000bD\u0002!\tAc3\t\u000f)]\b\u0001\"\u0001\u000bz\"9!R \u0001\u0005\u0002)}\b\"CF\b\u0001\u0011\u0005\u0011QXF\t\u0011\u001dY)\u0002\u0001C\u0001\u0017/Aqa#\u0007\u0001\t\u0003\u0019\t\u0007C\u0004\f\u001c\u0001!\ta#\b\t\u0013-}\u0001\u0001\"\u0001\u0002>.u\u0001\"CF\u0011\u0001\u0011\u0005\u0011\u0011XF\u000f\u0011%Y\u0019\u0003\u0001C\u0001\u0003s[i\u0002C\u0004\f&\u0001!\tac\n\t\u000f--\u0002\u0001\"\u0001\f.!I1\u0012\b\u0001\u0012\u0002\u0013\u00051q\u000e\u0005\b\u0017w\u0001A\u0011AF\u001f\u0011\u001dY\u0019\u0006\u0001C\u0001\u0017+Bqac\u001b\u0001\t\u0003Yi\u0007C\u0005\ft\u0001\u0001\r\u0011\"\u0003\u0004\u0006\"I1R\u000f\u0001A\u0002\u0013%1r\u000f\u0005\t\u0017w\u0002\u0001\u0015)\u0003\u0004H!I1R\u0010\u0001A\u0002\u0013%1r\u0010\u0005\n\u0017\u0007\u0003\u0001\u0019!C\u0005\u0017\u000bC\u0001b##\u0001A\u0003&1\u0012\u0011\u0005\f\u0017\u001b\u0003!\u0019!C\u0001\u0003{[y\t\u0003\u0005\f\u001e\u0002\u0001\u000b\u0011BFI\u0011-Y\t\u000b\u0001b\u0001\n\u0003\tilc)\t\u0011-5\u0006\u0001)A\u0005\u0017KC\u0011b#-\u0001\t\u0003\til!\u000b\t\u0013-M\u0006\u0001\"\u0001\u0002>.U\u0006bCF\\\u0001\u0001\u0007I\u0011AA_\u0017sC1bc1\u0001\u0001\u0004%\t!!0\fF\"A1\u0012\u001a\u0001!B\u0013YY\fC\u0005\fL\u0002\u0011\r\u0011\"\u0003\f\u001e!A1R\u001a\u0001!\u0002\u0013\u00199\u0006C\u0005\fP\u0002!\t\"!0\fR\"I1\u0012\u001d\u0001\u0005\u0012\u0005u62\u001d\u0005\b\u0005{\u0003A\u0011\u0001B\u0001\u0011%YI\u0010\u0001C\u0001\u0003{[Y\u0010C\u0005\fz\u0002!\t!!0\r\u0004!IA\u0012\u0002\u0001A\u0002\u0013%1R\u0004\u0005\n\u0019\u0017\u0001\u0001\u0019!C\u0005\u0019\u001bA\u0001\u0002$\u0005\u0001A\u0003&1q\u000b\u0005\n\u0019+\u0001A\u0011AA_\u0017/A\u0011\u0002d\u0006\u0001\t\u0003\tilc\u0006\t\u000f1e\u0001\u0001\"\u0005\f\u0018!9A2\u0004\u0001\u0005\u0002\r%\u0002b\u0002G\u000f\u0001\u0011\u0005Cr\u0004\u0005\b\u0019C\u0001A\u0011\u0001G\u0012\u0011%a)\u0004\u0001C\u0001\u0003{S\t\r\u0003\u0006\r8\u0001A)\u0019!C\t\u0017;A!\u0002d\u000f\u0001\u0011\u000b\u0007IQ\u0002G\u001f\u0011%ay\u0005\u0001C\u0003\u0003{ci\u0004C\u0004\rR\u0001!\t\u0002$\u0010\b\u00111U\u0013\u0011\u0018E\u0001\u0019/2\u0001\"a.\u0002:\"\u0005A\u0012\f\u0005\t\u0005S\ny\n\"\u0001\rf!aArMAP\u0005\u0004%\t!!0\rj!IAROAPA\u0003%A2\u000e\u0005\t\u0019o\ny\nb\u0001\rz!QA\u0012UAP#\u0003%\t\u0001d)\t\u00111U\u0016q\u0014C\u0002\u0019oC\u0001\u0002$5\u0002 \u0012\rA2\u001b\u0005\t\u001b\u000b\ty\nb\u0001\u000e\b!AQ2GAP\t\u0007i)\u0004\u0003\u0005\u000eB\u0005}E1AG\"\u0011)iI&a(\u0002\u0002\u0013%Q2\f\u0002\u0004%\u0012#%\u0002BA^\u0003{\u000b1A\u001d3e\u0015\u0011\ty,!1\u0002\u000bM\u0004\u0018M]6\u000b\t\u0005\r\u0017QY\u0001\u0007CB\f7\r[3\u000b\u0005\u0005\u001d\u0017aA8sO\u000e\u0001Q\u0003BAg\u0005K\u001ar\u0001AAh\u00037\f\u0019\u0010\u0005\u0003\u0002R\u0006]WBAAj\u0015\t\t).A\u0003tG\u0006d\u0017-\u0003\u0003\u0002Z\u0006M'AB!osJ+g\r\u0005\u0003\u0002^\u00065h\u0002BAp\u0003StA!!9\u0002h6\u0011\u00111\u001d\u0006\u0005\u0003K\fI-\u0001\u0004=e>|GOP\u0005\u0003\u0003+LA!a;\u0002T\u00069\u0001/Y2lC\u001e,\u0017\u0002BAx\u0003c\u0014AbU3sS\u0006d\u0017N_1cY\u0016TA!a;\u0002TB!\u0011Q_A~\u001b\t\t9P\u0003\u0003\u0002z\u0006u\u0016\u0001C5oi\u0016\u0014h.\u00197\n\t\u0005u\u0018q\u001f\u0002\b\u0019><w-\u001b8h\u0003\ry6oY\u000b\u0003\u0005\u0007\u0001BA!\u0002\u0003\b5\u0011\u0011QX\u0005\u0005\u0005\u0013\tiL\u0001\u0007Ta\u0006\u00148nQ8oi\u0016DH/A\u0004`g\u000e|F%Z9\u0015\t\t=!Q\u0003\t\u0005\u0003#\u0014\t\"\u0003\u0003\u0003\u0014\u0005M'\u0001B+oSRD\u0011Ba\u0006\u0003\u0003\u0003\u0005\rAa\u0001\u0002\u0007a$\u0013'\u0001\u0003`g\u000e\u0004\u0003fA\u0002\u0003\u001eA!\u0011\u0011\u001bB\u0010\u0013\u0011\u0011\t#a5\u0003\u0013Q\u0014\u0018M\\:jK:$\u0018\u0001\u00023faN,\"Aa\n\u0011\r\u0005u'\u0011\u0006B\u0017\u0013\u0011\u0011Y#!=\u0003\u0007M+\u0017\u000f\r\u0003\u00030\te\u0002C\u0002B\u0003\u0005c\u0011)$\u0003\u0003\u00034\u0005u&A\u0003#fa\u0016tG-\u001a8dsB!!q\u0007B\u001d\u0019\u0001!1Ba\u000f\u0007\u0003\u0003\u0005\tQ!\u0001\u0003B\t\u0019q\fJ\u0019\u0002\u000b\u0011,\u0007o\u001d\u0011)\u0007\u0019\u0011i\"\u0005\u0003\u0003D\t%\u0003\u0003BAi\u0005\u000bJAAa\u0012\u0002T\n9aj\u001c;iS:<\u0007\u0003BAi\u0005\u0017JAA!\u0014\u0002T\n\u0019\u0011I\\=\u0002\u0011\u0011,\u0007o]0%KF$BAa\u0004\u0003T!I!qC\u0003\u0002\u0002\u0003\u0007!qE\u0001\u000bKZLG-\u001a8dK\u0012\n\u0004C\u0002B-\u0005?\u0012\u0019'\u0004\u0002\u0003\\)!!QLAj\u0003\u001d\u0011XM\u001a7fGRLAA!\u0019\u0003\\\tA1\t\\1tgR\u000bw\r\u0005\u0003\u00038\t\u0015Da\u0002B4\u0001\t\u0007!\u0011\t\u0002\u0002)\u00061A(\u001b8jiz\"bA!\u001c\u0003v\t]D\u0003\u0002B8\u0005g\u0002RA!\u001d\u0001\u0005Gj!!!/\t\u000f\tU\u0003\u0002q\u0001\u0003X!9\u0011q \u0005A\u0002\t\r\u0001b\u0002B\u0012\u0011\u0001\u0007!\u0011\u0010\t\u0007\u0003;\u0014ICa\u001f1\t\tu$\u0011\u0011\t\u0007\u0005\u000b\u0011\tDa \u0011\t\t]\"\u0011\u0011\u0003\r\u0005w\u00119(!A\u0001\u0002\u000b\u0005!\u0011I\u0001\u0003g\u000e$BAa\"\u0003\u000eR!!q\u000eBE\u0011%\u0011YICA\u0001\u0002\b\u00119&\u0001\u0006fm&$WM\\2fIIBqAa$\u000b\u0001\u0004\u0011\t*A\u0005p]\u0016\u0004\u0016M]3oiB\"!1\u0013BL!\u0015\u0011\t\b\u0001BK!\u0011\u00119Da&\u0005\u0019\te%QRA\u0001\u0002\u0003\u0015\tA!\u0011\u0003\u0007}#3\u0007\u000b\u0003\u0003\u000e\nu\u0011\u0001B2p]\u001a,\"A!)\u0011\t\t\u0015!1U\u0005\u0005\u0005K\u000biLA\u0005Ta\u0006\u00148nQ8oM\u000691m\\7qkR,GC\u0002BV\u0005c\u0013Y\f\u0005\u0004\u0002^\n5&1M\u0005\u0005\u0005_\u000b\tP\u0001\u0005Ji\u0016\u0014\u0018\r^8s\u0011\u001d\u0011\u0019\f\u0004a\u0001\u0005k\u000bQa\u001d9mSR\u0004BA!\u0002\u00038&!!\u0011XA_\u0005%\u0001\u0016M\u001d;ji&|g\u000eC\u0004\u0003>2\u0001\rAa0\u0002\u000f\r|g\u000e^3yiB!!Q\u0001Ba\u0013\u0011\u0011\u0019-!0\u0003\u0017Q\u000b7o[\"p]R,\u0007\u0010\u001e\u0015\u0004\u0019\t\u001d\u0007\u0003\u0002Be\u0005\u001fl!Aa3\u000b\t\t5\u0017QX\u0001\u000bC:tw\u000e^1uS>t\u0017\u0002\u0002Bi\u0005\u0017\u0014A\u0002R3wK2|\u0007/\u001a:Ba&\fQbZ3u!\u0006\u0014H/\u001b;j_:\u001cXC\u0001Bl!\u0019\t\tN!7\u00036&!!1\\Aj\u0005\u0015\t%O]1z\u0003=9W\r\u001e#fa\u0016tG-\u001a8dS\u0016\u001cXC\u0001Bq!\u0019\tiN!\u000b\u0003dB\"!Q\u001dBu!\u0019\u0011)A!\r\u0003hB!!q\u0007Bu\t-\u0011YODA\u0001\u0002\u0003\u0015\tA!\u0011\u0003\u0007}#C'A\u000bhKR\u0004&/\u001a4feJ,G\rT8dCRLwN\\:\u0015\t\tE81\u0001\t\u0007\u0003;\u0014ICa=\u0011\t\tU(Q \b\u0005\u0005o\u0014I\u0010\u0005\u0003\u0002b\u0006M\u0017\u0002\u0002B~\u0003'\fa\u0001\u0015:fI\u00164\u0017\u0002\u0002B\u0000\u0007\u0003\u0011aa\u0015;sS:<'\u0002\u0002B~\u0003'DqAa-\u0010\u0001\u0004\u0011),A\u0006qCJ$\u0018\u000e^5p]\u0016\u0014XCAB\u0005!\u0019\t\tna\u0003\u0004\u0010%!1QBAj\u0005\u0019y\u0005\u000f^5p]B!!QAB\t\u0013\u0011\u0019\u0019\"!0\u0003\u0017A\u000b'\u000f^5uS>tWM]\u0001\ra\u0006\u0014H/\u001b;j_:,'\u000f\t\u0015\u0004#\tu\u0011\u0001D:qCJ\\7i\u001c8uKb$\u0018AA5e+\t\u0019y\u0002\u0005\u0003\u0002R\u000e\u0005\u0012\u0002BB\u0012\u0003'\u00141!\u00138u\u0003\rIG\rI\u0001\u0005]\u0006lW-\u0006\u0002\u0003t\u0006Aa.Y7f?\u0012*\u0017\u000f\u0006\u0003\u0003\u0010\r=\u0002\"\u0003B\f-\u0005\u0005\t\u0019\u0001Bz\u0003\u0015q\u0017-\\3!Q\r9\"QD\u0001\bg\u0016$h*Y7f)\u0011\u0019Ida\u000f\u000e\u0003\u0001Aqa!\u0010\u0019\u0001\u0004\u0011\u00190A\u0003`]\u0006lW-A\u0004qKJ\u001c\u0018n\u001d;\u0015\r\re21IB*\u0011\u001d\u0019)%\u0007a\u0001\u0007\u000f\n\u0001B\\3x\u0019\u00164X\r\u001c\t\u0005\u0007\u0013\u001ay%\u0004\u0002\u0004L)!1QJA_\u0003\u001d\u0019Ho\u001c:bO\u0016LAa!\u0015\u0004L\ta1\u000b^8sC\u001e,G*\u001a<fY\"91QK\rA\u0002\r]\u0013!D1mY><xJ^3se&$W\r\u0005\u0003\u0002R\u000ee\u0013\u0002BB.\u0003'\u0014qAQ8pY\u0016\fg\u000e\u0006\u0003\u0004:\r}\u0003bBB#5\u0001\u00071q\t\u000b\u0003\u0007s\tQaY1dQ\u0016\f\u0011\"\u001e8qKJ\u001c\u0018n\u001d;\u0015\t\re2\u0011\u000e\u0005\n\u0007Wj\u0002\u0013!a\u0001\u0007/\n\u0001B\u00197pG.LgnZ\u0001\u0014k:\u0004XM]:jgR$C-\u001a4bk2$H%M\u000b\u0003\u0007cRCaa\u0016\u0004t-\u00121Q\u000f\t\u0005\u0007o\u001ay(\u0004\u0002\u0004z)!11PB?\u0003%)hn\u00195fG.,GM\u0003\u0003\u0003N\u0006M\u0017\u0002BBA\u0007s\u0012\u0011#\u001e8dQ\u0016\u001c7.\u001a3WCJL\u0017M\\2f\u0003=9W\r^*u_J\fw-\u001a'fm\u0016dWCAB$\u0003%\u0019H/\u0019;f\u0019>\u001c7.\u0006\u0002\u0004\fJ11QRAh\u000374aaa$\"\u0001\r-%\u0001\u0004\u001fsK\u001aLg.Z7f]Rt\u0014AC:uCR,Gj\\2lA\u0005iA-\u001a9f]\u0012,gnY5fg~+\"aa&\u0011\r\u0005u'\u0011FBMa\u0011\u0019Yja(\u0011\r\t\u0015!\u0011GBO!\u0011\u00119da(\u0005\u0017\r\u0005F%!A\u0001\u0002\u000b\u0005!\u0011\t\u0002\u0004?\u0012*\u0014A\u00043fa\u0016tG-\u001a8dS\u0016\u001cx\f\t\u0015\u0004I\r\u001d\u0006\u0003BAi\u0007SKAaa+\u0002T\nAao\u001c7bi&dW-A\teKB,g\u000eZ3oG&,7oX0%KF$BAa\u0004\u00042\"I!qC\u0012\u0002\u0002\u0003\u000711\u0017\t\u0007\u0003;\u0014Ic!.1\t\r]61\u0018\t\u0007\u0005\u000b\u0011\td!/\u0011\t\t]21\u0018\u0003\r\u0007C\u001b\t,!A\u0001\u0002\u000b\u0005!\u0011I\u0001\u0013Y\u0016<\u0017mY=EKB,g\u000eZ3oG&,7/\u0006\u0002\u0004BB111YBe\u0007\u001bl!a!2\u000b\t\r\u001d\u00171[\u0001\u0004e\u00164\u0017\u0002BBf\u0007\u000b\u0014QbV3bWJ+g-\u001a:f]\u000e,\u0007CBAo\u0005S\u0019y\r\r\u0003\u0004R\u000eU\u0007C\u0002B\u0003\u0005c\u0019\u0019\u000e\u0005\u0003\u00038\rUGaCBlO\u0005\u0005\t\u0011!B\u0001\u0005\u0003\u00121a\u0018\u00137\u0003MaWmZ1ds\u0012+\u0007/\u001a8eK:\u001c\u0017.Z:!Q\r93q\u0015\u0015\u0004O\tu\u0011A\u00067fO\u0006\u001c\u0017\u0010R3qK:$WM\\2jKN|F%Z9\u0015\t\t=11\u001d\u0005\n\u0005/1\u0013\u0011!a\u0001\u0007K\u0004baa1\u0004J\u000e\u001d\bCBAo\u0005S\u0019I\u000f\r\u0003\u0004l\u000e=\bC\u0002B\u0003\u0005c\u0019i\u000f\u0005\u0003\u00038\r=H\u0001DBl\u0007G\f\t\u0011!A\u0003\u0002\t\u0005\u0013a\u00039beRLG/[8og~\u000bq\u0002]1si&$\u0018n\u001c8t?~#S-\u001d\u000b\u0005\u0005\u001f\u00199\u0010C\u0005\u0003\u0018%\n\t\u00111\u0001\u0003X\u0006a\u0001/\u0019:uSRLwN\\:`A!\u001a!fa*)\u0007)\u0012i\"A\u0007dQ\u0016\u001c7\u000e]8j]R\u0014F\tR\u000b\u0003\t\u0007\u0001b!!5\u0004\f\u0011\u0015\u0001C\u0002B9\t\u000f\u0011\u0019'\u0003\u0003\u0005\n\u0005e&!D\"iK\u000e\\\u0007o\\5oiJ#E)\u0001\u0007eKB,g\u000eZ3oG&,7/\u0006\u0002\u0005\u0010A1\u0011Q\u001cB\u0015\t#\u0001D\u0001b\u0005\u0005\u0018A1!Q\u0001B\u0019\t+\u0001BAa\u000e\u0005\u0018\u0011YA\u0011\u0004\u0017\u0002\u0002\u0003\u0005)\u0011\u0001B!\u0005\ryFeN\u0001\u0015S:$XM\u001d8bY\u0012+\u0007/\u001a8eK:\u001c\u0017.Z:\u0016\u0005\u0011}\u0001CBAi\u0007\u0017!\t\u0003\u0005\u0004\u0002^\n%B1\u0005\u0019\u0005\tK!I\u0003\u0005\u0004\u0003\u0006\tEBq\u0005\t\u0005\u0005o!I\u0003B\u0006\u0005,5\n\t\u0011!A\u0003\u0002\t\u0005#aA0%q\u0005Q\u0001/\u0019:uSRLwN\\:\u0002!\u001d,GOT;n!\u0006\u0014H/\u001b;j_:\u001c\b&B\u0018\u00054\u0011e\u0002\u0003\u0002Be\tkIA\u0001b\u000e\u0003L\n)1+\u001b8dK\u0006\u0012A1H\u0001\u0006c92d\u0006M\u0001\u0013aJ,g-\u001a:sK\u0012dunY1uS>t7\u000f\u0006\u0003\u0003r\u0012\u0005\u0003b\u0002BZa\u0001\u0007!QW\u0001\tSR,'/\u0019;peR1!1\u0016C$\t\u0013BqAa-2\u0001\u0004\u0011)\fC\u0004\u0003>F\u0002\rAa0\u0002%\u001d,GOT1se><\u0018I\\2fgR|'o]\u000b\u0003\t\u001f\u0002b!!8\u0003*\u0011E\u0003\u0007\u0002C*\t/\u0002RA!\u001d\u0001\t+\u0002BAa\u000e\u0005X\u0011YA\u0011\f\u001a\u0002\u0002\u0003\u0005)\u0011\u0001B!\u0005\ryF%O\u0001\u0018G>l\u0007/\u001e;f\u001fJ\u0014V-\u00193DQ\u0016\u001c7\u000e]8j]R$bAa+\u0005`\u0011\u0005\u0004b\u0002BZg\u0001\u0007!Q\u0017\u0005\b\u0005{\u001b\u0004\u0019\u0001B`\u000319W\r^(s\u0007>l\u0007/\u001e;f)\u0019\u0011Y\u000bb\u001a\u0005l!9A\u0011\u000e\u001bA\u0002\tU\u0016!\u00039beRLG/[8o\u0011\u001d\u0011i\f\u000ea\u0001\u0005\u007f\u000b\u0011b^5uQN\u001bw\u000e]3\u0016\t\u0011EDQ\u000f\u000b\u0005\tg\"I\b\u0005\u0003\u00038\u0011UDa\u0002C<k\t\u0007!\u0011\t\u0002\u0002+\"AA1P\u001b\u0005\u0002\u0004!i(\u0001\u0003c_\u0012L\bCBAi\t\u007f\"\u0019(\u0003\u0003\u0005\u0002\u0006M'\u0001\u0003\u001fcs:\fW.\u001a \u0002\u00075\f\u0007/\u0006\u0003\u0005\b\u0012=E\u0003\u0002CE\t/#B\u0001b#\u0005\u0012B)!\u0011\u000f\u0001\u0005\u000eB!!q\u0007CH\t\u001d!9H\u000eb\u0001\u0005\u0003B\u0011\u0002b%7\u0003\u0003\u0005\u001d\u0001\"&\u0002\u0015\u00154\u0018\u000eZ3oG\u0016$3\u0007\u0005\u0004\u0003Z\t}CQ\u0012\u0005\b\t33\u0004\u0019\u0001CN\u0003\u00051\u0007\u0003CAi\t;\u0013\u0019\u0007\"$\n\t\u0011}\u00151\u001b\u0002\n\rVt7\r^5p]F\nqA\u001a7bi6\u000b\u0007/\u0006\u0003\u0005&\u00125F\u0003\u0002CT\tk#B\u0001\"+\u00050B)!\u0011\u000f\u0001\u0005,B!!q\u0007CW\t\u001d!9h\u000eb\u0001\u0005\u0003B\u0011\u0002\"-8\u0003\u0003\u0005\u001d\u0001b-\u0002\u0015\u00154\u0018\u000eZ3oG\u0016$C\u0007\u0005\u0004\u0003Z\t}C1\u0016\u0005\b\t3;\u0004\u0019\u0001C\\!!\t\t\u000e\"(\u0003d\u0011e\u0006CBAo\tw#Y+\u0003\u0003\u0005>\u0006E(\u0001D%uKJ\f'\r\\3P]\u000e,\u0017A\u00024jYR,'\u000f\u0006\u0003\u0003p\u0011\r\u0007b\u0002CMq\u0001\u0007AQ\u0019\t\t\u0003#$iJa\u0019\u0004X\u0005AA-[:uS:\u001cG\u000f\u0006\u0003\u0005L\u0012]G\u0003\u0002B8\t\u001bD\u0011\u0002b4:!\u0003\u0005\u001d\u0001\"5\u0002\u0007=\u0014H\r\u0005\u0004\u0002^\u0012M'1M\u0005\u0005\t+\f\tP\u0001\u0005Pe\u0012,'/\u001b8h\u0011\u001d!I.\u000fa\u0001\u0007?\tQB\\;n!\u0006\u0014H/\u001b;j_:\u001c\u0018A\u00053jgRLgn\u0019;%I\u00164\u0017-\u001e7uII\"B\u0001b8\u0005b*\"A\u0011[B:\u0011\u001d!IN\u000fa\u0001\u0007?!\"Aa\u001c\u0002\u0017I,\u0007/\u0019:uSRLwN\u001c\u000b\u0005\tS$i\u000f\u0006\u0003\u0003p\u0011-\b\"\u0003ChyA\u0005\t9\u0001Ci\u0011\u001d!I\u000e\u0010a\u0001\u0007?\tQC]3qCJ$\u0018\u000e^5p]\u0012\"WMZ1vYR$#\u0007\u0006\u0003\u0005`\u0012M\bb\u0002Cm{\u0001\u00071qD\u0001\tG>\fG.Z:dKRAA\u0011 C\u007f\t\u007f,\u0019\u0001\u0006\u0003\u0003p\u0011m\b\"\u0003Ch}A\u0005\t9\u0001Ci\u0011\u001d!IN\u0010a\u0001\u0007?A\u0011\"\"\u0001?!\u0003\u0005\raa\u0016\u0002\u000fMDWO\u001a4mK\"IQQ\u0001 \u0011\u0002\u0003\u0007QqA\u0001\u0013a\u0006\u0014H/\u001b;j_:\u001cu.\u00197fg\u000e,'\u000f\u0005\u0004\u0002R\u000e-Q\u0011\u0002\t\u0005\u0005c*Y!\u0003\u0003\u0006\u000e\u0005e&A\u0005)beRLG/[8o\u0007>\fG.Z:dKJ\f!cY8bY\u0016\u001c8-\u001a\u0013eK\u001a\fW\u000f\u001c;%e\u0005\u00112m\\1mKN\u001cW\r\n3fM\u0006,H\u000e\u001e\u00134+\t))B\u000b\u0003\u0006\b\rM\u0014AE2pC2,7oY3%I\u00164\u0017-\u001e7uIQ\"\u0002\u0002b8\u0006\u001c\u0015uQq\u0004\u0005\b\t3\f\u0005\u0019AB\u0010\u0011\u001d)\t!\u0011a\u0001\u0007/Bq!\"\u0002B\u0001\u0004)9!\u0001\u0004tC6\u0004H.\u001a\u000b\t\u0005_*)#\"\u000b\u00064!9Qq\u0005\"A\u0002\r]\u0013aD<ji\"\u0014V\r\u001d7bG\u0016lWM\u001c;\t\u000f\u0015-\"\t1\u0001\u0006.\u0005AaM]1di&|g\u000e\u0005\u0003\u0002R\u0016=\u0012\u0002BC\u0019\u0003'\u0014a\u0001R8vE2,\u0007\"CC\u001b\u0005B\u0005\t\u0019AC\u001c\u0003\u0011\u0019X-\u001a3\u0011\t\u0005EW\u0011H\u0005\u0005\u000bw\t\u0019N\u0001\u0003M_:<\u0017\u0001E:b[BdW\r\n3fM\u0006,H\u000e\u001e\u00134+\t)\tE\u000b\u0003\u00068\rM\u0014a\u0003:b]\u0012|Wn\u00159mSR$b!b\u0012\u0006J\u0015=\u0003CBAi\u00053\u0014y\u0007C\u0004\u0006L\u0011\u0003\r!\"\u0014\u0002\u000f],\u0017n\u001a5ugB1\u0011\u0011\u001bBm\u000b[A\u0011\"\"\u000eE!\u0003\u0005\r!b\u000e\u0002+I\fg\u000eZ8n'Bd\u0017\u000e\u001e\u0013eK\u001a\fW\u000f\u001c;%e\u0005)\"/\u00198e_6\u001c\u0016-\u001c9mK^KG\u000f\u001b*b]\u001e,G\u0003\u0003B8\u000b/*Y&b\u0018\t\u000f\u0015ec\t1\u0001\u0006.\u0005\u0011AN\u0019\u0005\b\u000b;2\u0005\u0019AC\u0017\u0003\t)(\rC\u0004\u00066\u0019\u0003\r!b\u000e\u0002\u0015Q\f7.Z*b[BdW\r\u0006\u0005\u0006f\u0015\u001dT\u0011NC7!\u0019\t\tN!7\u0003d!9QqE$A\u0002\r]\u0003bBC6\u000f\u0002\u00071qD\u0001\u0004]Vl\u0007\"CC\u001b\u000fB\u0005\t\u0019AC\u001c\u0003Q!\u0018m[3TC6\u0004H.\u001a\u0013eK\u001a\fW\u000f\u001c;%g\u0005)QO\\5p]R!!qNC;\u0011\u001d)9(\u0013a\u0001\u0005_\nQa\u001c;iKJ\f!\u0002\n9mkN$\u0003\u000f\\;t)\u0011\u0011y'\" \t\u000f\u0015]$\n1\u0001\u0003p\u000511o\u001c:u\u0005f,B!b!\u0006\u000eRAQQQCL\u000b7+y\n\u0006\u0004\u0003p\u0015\u001dU\u0011\u0013\u0005\b\t\u001f\\\u00059ACE!\u0019\ti\u000eb5\u0006\fB!!qGCG\t\u001d)yi\u0013b\u0001\u0005\u0003\u0012\u0011a\u0013\u0005\b\u000b'[\u00059ACK\u0003\u0011\u0019G/Y4\u0011\r\te#qLCF\u0011\u001d!Ij\u0013a\u0001\u000b3\u0003\u0002\"!5\u0005\u001e\n\rT1\u0012\u0005\n\u000b;[\u0005\u0013!a\u0001\u0007/\n\u0011\"Y:dK:$\u0017N\\4\t\u0013\u0011e7\n%AA\u0002\r}\u0011\u0001E:peR\u0014\u0015\u0010\n3fM\u0006,H\u000e\u001e\u00133+\u0011\u0019y'\"*\u0005\u000f\u0015=EJ1\u0001\u0003B\u0005\u00012o\u001c:u\u0005f$C-\u001a4bk2$HeM\u000b\u0005\u000bW+y+\u0006\u0002\u0006.*\"1qDB:\t\u001d)y)\u0014b\u0001\u0005\u0003\nA\"\u001b8uKJ\u001cXm\u0019;j_:$BAa\u001c\u00066\"9Qq\u000f(A\u0002\t=DCBC]\u000b{+y\f\u0006\u0003\u0003p\u0015m\u0006\"\u0003Ch\u001fB\u0005\t9\u0001Ci\u0011\u001d)9h\u0014a\u0001\u0005_Bqa!\u0002P\u0001\u0004\u0019y!\u0001\fj]R,'o]3di&|g\u000e\n3fM\u0006,H\u000e\u001e\u00134)\u0019!y.\"2\u0006H\"9Qq\u000f)A\u0002\t=\u0004bBB\u0003!\u0002\u00071q\u0002\u000b\u0007\u0005_*Y-\"4\t\u000f\u0015]\u0014\u000b1\u0001\u0003p!9A\u0011\\)A\u0002\r}\u0011\u0001B4m_6$\"!b5\u0011\u000b\tE\u0004!\"\u001a\u0002\u0013\r\f'\u000f^3tS\u0006tW\u0003BCm\u000bO$B!b7\u0006pR!QQ\\Cu!\u0015\u0011\t\bACp!!\t\t.\"9\u0003d\u0015\u0015\u0018\u0002BCr\u0003'\u0014a\u0001V;qY\u0016\u0014\u0004\u0003\u0002B\u001c\u000bO$q\u0001b\u001eT\u0005\u0004\u0011\t\u0005C\u0005\u0006lN\u000b\t\u0011q\u0001\u0006n\u0006QQM^5eK:\u001cW\rJ\u001b\u0011\r\te#qLCs\u0011\u001d)9h\u0015a\u0001\u000bc\u0004RA!\u001d\u0001\u000bK\fqa\u001a:pkB\u0014\u00150\u0006\u0003\u0006x\u001a\u0005A\u0003BC}\r\u001f!B!b?\u0007\nA)!\u0011\u000f\u0001\u0006~BA\u0011\u0011[Cq\u000b\u007f4\u0019\u0001\u0005\u0003\u00038\u0019\u0005AaBCH)\n\u0007!\u0011\t\t\u0007\u0003;4)Aa\u0019\n\t\u0019\u001d\u0011\u0011\u001f\u0002\t\u0013R,'/\u00192mK\"9a1\u0002+A\u0004\u00195\u0011AA6u!\u0019\u0011IFa\u0018\u0006\u0000\"9A\u0011\u0014+A\u0002\u0019E\u0001\u0003CAi\t;\u0013\u0019'b@\u0016\t\u0019Uaq\u0004\u000b\u0007\r/1)C\"\u000b\u0015\t\u0019ea\u0011\u0005\t\u0006\u0005c\u0002a1\u0004\t\t\u0003#,\tO\"\b\u0007\u0004A!!q\u0007D\u0010\t\u001d)y)\u0016b\u0001\u0005\u0003BqAb\u0003V\u0001\b1\u0019\u0003\u0005\u0004\u0003Z\t}cQ\u0004\u0005\b\t3+\u0006\u0019\u0001D\u0014!!\t\t\u000e\"(\u0003d\u0019u\u0001b\u0002Cm+\u0002\u00071qD\u000b\u0005\r[19\u0004\u0006\u0004\u00070\u0019\u0005cQ\t\u000b\u0007\rc1ID\"\u0010\u0011\u000b\tE\u0004Ab\r\u0011\u0011\u0005EW\u0011\u001dD\u001b\r\u0007\u0001BAa\u000e\u00078\u00119Qq\u0012,C\u0002\t\u0005\u0003b\u0002D\u0006-\u0002\u000fa1\b\t\u0007\u00053\u0012yF\"\u000e\t\u0013\u0011=g\u000b%AA\u0004\u0019}\u0002CBAo\t'4)\u0004C\u0004\u0005\u001aZ\u0003\rAb\u0011\u0011\u0011\u0005EGQ\u0014B2\rkAqAb\u0012W\u0001\u0004\u0019y!A\u0001q\u0003E9'o\\;q\u0005f$C-\u001a4bk2$H\u0005N\u000b\u0005\r\u001b2Y\u0006\u0006\u0004\u0007P\u0019UcQ\f\u0016\u0005\r#\u001a\u0019h\u0004\u0002\u0007T\t\u0002\u0001b\u0002CM/\u0002\u0007aq\u000b\t\t\u0003#$iJa\u0019\u0007ZA!!q\u0007D.\t\u001d)yi\u0016b\u0001\u0005\u0003BqAb\u0012X\u0001\u0004\u0019y!\u0001\u0003qSB,G\u0003\u0002D2\rK\u0002RA!\u001d\u0001\u0005gDqAb\u001aY\u0001\u0004\u0011\u00190A\u0004d_6l\u0017M\u001c3\u0015\r\u0019\rd1\u000eD7\u0011\u001d19'\u0017a\u0001\u0005gDqAb\u001cZ\u0001\u00041\t(A\u0002f]Z\u0004\u0002Bb\u001d\u0007z\tM(1_\u0007\u0003\rkRAAb\u001e\u0002T\u0006Q1m\u001c7mK\u000e$\u0018n\u001c8\n\t\u0019mdQ\u000f\u0002\u0004\u001b\u0006\u0004H\u0003\u0005D2\r\u007f2\tIb!\u0007\f\u001aUe\u0011\u0014DO\u0011\u001d19G\u0017a\u0001\u0005cD\u0011Bb\u001c[!\u0003\u0005\rA\"\u001d\t\u0013\u0019\u0015%\f%AA\u0002\u0019\u001d\u0015\u0001\u00059sS:$\b+\u001b9f\u0007>tG/\u001a=u!!\t\t\u000e\"(\u0007\n\n=\u0001\u0003CAi\t;\u0013\u0019Pa\u0004\t\u0013\u00195%\f%AA\u0002\u0019=\u0015a\u00049sS:$(\u000b\u0012#FY\u0016lWM\u001c;\u0011\u0015\u0005Eg\u0011\u0013B2\r\u0013\u0013y!\u0003\u0003\u0007\u0014\u0006M'!\u0003$v]\u000e$\u0018n\u001c83\u0011%19J\u0017I\u0001\u0002\u0004\u00199&\u0001\ntKB\f'/\u0019;f/>\u00148.\u001b8h\t&\u0014\b\"\u0003DN5B\u0005\t\u0019AB\u0010\u0003)\u0011WO\u001a4feNK'0\u001a\u0005\n\r?S\u0006\u0013!a\u0001\u0005g\f\u0001\"\u001a8d_\u0012LgnZ\u0001\u000fa&\u0004X\r\n3fM\u0006,H\u000e\u001e\u00133+\t1)K\u000b\u0003\u0007r\rM\u0014A\u00049ja\u0016$C-\u001a4bk2$HeM\u000b\u0003\rWSCAb\"\u0004t\u0005q\u0001/\u001b9fI\u0011,g-Y;mi\u0012\"TC\u0001DYU\u00111yia\u001d\u0002\u001dAL\u0007/\u001a\u0013eK\u001a\fW\u000f\u001c;%k\u0005q\u0001/\u001b9fI\u0011,g-Y;mi\u00122\u0014A\u00049ja\u0016$C-\u001a4bk2$HeN\u000b\u0003\rwSCAa=\u0004t\u0005iQ.\u00199QCJ$\u0018\u000e^5p]N,BA\"1\u0007JR1a1\u0019Di\r/$BA\"2\u0007LB)!\u0011\u000f\u0001\u0007HB!!q\u0007De\t\u001d!9(\u0019b\u0001\u0005\u0003B\u0011B\"4b\u0003\u0003\u0005\u001dAb4\u0002\u0015\u00154\u0018\u000eZ3oG\u0016$c\u0007\u0005\u0004\u0003Z\t}cq\u0019\u0005\b\t3\u000b\u0007\u0019\u0001Dj!!\t\t\u000e\"(\u0003,\u001aU\u0007CBAo\u0005[39\rC\u0005\u0007Z\u0006\u0004\n\u00111\u0001\u0004X\u0005)\u0002O]3tKJ4Xm\u001d)beRLG/[8oS:<\u0017aF7baB\u000b'\u000f^5uS>t7\u000f\n3fM\u0006,H\u000e\u001e\u00133+\u0011\u0019yGb8\u0005\u000f\u0011]$M1\u0001\u0003B\u0005qR.\u00199QCJ$\u0018\u000e^5p]N<\u0016\u000e\u001e5J]\u0012,\u00070\u00138uKJt\u0017\r\\\u000b\u0005\rK4i\u000f\u0006\u0005\u0007h\u001aUh1 D\u007f)\u00111IOb<\u0011\u000b\tE\u0004Ab;\u0011\t\t]bQ\u001e\u0003\b\to\u001a'\u0019\u0001B!\u0011%1\tpYA\u0001\u0002\b1\u00190\u0001\u0006fm&$WM\\2fI]\u0002bA!\u0017\u0003`\u0019-\bb\u0002CMG\u0002\u0007aq\u001f\t\u000b\u0003#4\tja\b\u0003,\u001ae\bCBAo\u0005[3Y\u000fC\u0005\u0007Z\u000e\u0004\n\u00111\u0001\u0004X!Iaq`2\u0011\u0002\u0003\u00071qK\u0001\u0011SN|%\u000fZ3s'\u0016t7/\u001b;jm\u0016\f\u0001&\\1q!\u0006\u0014H/\u001b;j_:\u001cx+\u001b;i\u0013:$W\r_%oi\u0016\u0014h.\u00197%I\u00164\u0017-\u001e7uII*Baa\u001c\b\u0006\u00119Aq\u000f3C\u0002\t\u0005\u0013\u0001K7baB\u000b'\u000f^5uS>t7oV5uQ&sG-\u001a=J]R,'O\\1mI\u0011,g-Y;mi\u0012\u001aT\u0003BB8\u000f\u0017!q\u0001b\u001ef\u0005\u0004\u0011\t%A\u000bnCB\u0004\u0016M\u001d;ji&|gn]%oi\u0016\u0014h.\u00197\u0016\t\u001dEq\u0011\u0004\u000b\u0007\u000f'9\tcb\n\u0015\t\u001dUq1\u0004\t\u0006\u0005c\u0002qq\u0003\t\u0005\u0005o9I\u0002B\u0004\u0005x\u0019\u0014\rA!\u0011\t\u0013\u001dua-!AA\u0004\u001d}\u0011AC3wS\u0012,gnY3%qA1!\u0011\fB0\u000f/Aq\u0001\"'g\u0001\u00049\u0019\u0003\u0005\u0005\u0002R\u0012u%1VD\u0013!\u0019\tiN!,\b\u0018!Ia\u0011\u001c4\u0011\u0002\u0003\u00071qK\u0001 [\u0006\u0004\b+\u0019:uSRLwN\\:J]R,'O\\1mI\u0011,g-Y;mi\u0012\u0012T\u0003BB8\u000f[!q\u0001b\u001eh\u0005\u0004\u0011\t%\u0001\fnCB\u0004\u0016M\u001d;ji&|gn],ji\"Le\u000eZ3y+\u00119\u0019db\u000f\u0015\r\u001dUr1ID%)\u001199d\"\u0010\u0011\u000b\tE\u0004a\"\u000f\u0011\t\t]r1\b\u0003\b\toB'\u0019\u0001B!\u0011%9y\u0004[A\u0001\u0002\b9\t%\u0001\u0006fm&$WM\\2fIe\u0002bA!\u0017\u0003`\u001de\u0002b\u0002CMQ\u0002\u0007qQ\t\t\u000b\u0003#4\tja\b\u0003,\u001e\u001d\u0003CBAo\u0005[;I\u0004C\u0005\u0007Z\"\u0004\n\u00111\u0001\u0004X\u0005\u0001S.\u00199QCJ$\u0018\u000e^5p]N<\u0016\u000e\u001e5J]\u0012,\u0007\u0010\n3fM\u0006,H\u000e\u001e\u00133+\u0011\u0019ygb\u0014\u0005\u000f\u0011]\u0014N1\u0001\u0003B\u0005QR.\u00199QCJ$\u0018\u000e^5p]N<\u0016\u000e\u001e5Fm\u0006dW/\u0019;peV!qQKD/)\u001199f\"\u001a\u0015\t\u001desq\f\t\u0006\u0005c\u0002q1\f\t\u0005\u0005o9i\u0006B\u0004\u0005x)\u0014\rA!\u0011\t\u0013\u001d\u0005$.!AA\u0004\u001d\r\u0014aC3wS\u0012,gnY3%cA\u0002bA!\u0017\u0003`\u001dm\u0003bBD4U\u0002\u0007q\u0011N\u0001\u0011KZ\fG.^1u_J4\u0015m\u0019;pef\u0004\u0002B!\u0002\bl\t\rt1L\u0005\u0005\u000f[\niLA\rQCJ$\u0018\u000e^5p]\u00163\u0018\r\\;bi>\u0014h)Y2u_JL\bf\u00016\u0003H\"*!\u000eb\r\bt\u0005\u0012qQO\u0001\u0006g9*d\u0006M\u0001\u001bu&\u0004\b+\u0019:uSRLwN\\:XSRDWI^1mk\u0006$xN]\u000b\u0005\u000fw:\u0019\t\u0006\u0004\b~\u001d-uq\u0012\u000b\u0005\u000f\u007f:)\tE\u0003\u0003r\u00019\t\t\u0005\u0003\u00038\u001d\rEa\u0002C<W\n\u0007!\u0011\t\u0005\n\u000f\u000f[\u0017\u0011!a\u0002\u000f\u0013\u000b1\"\u001a<jI\u0016t7-\u001a\u00132cA1!\u0011\fB0\u000f\u0003Cqa\"$l\u0001\u0004\u0011y'\u0001\u0003sI\u0012\u0014\u0004bBD4W\u0002\u0007q\u0011\u0013\t\t\u0005\u000b9YGa\u0019\b\u0002\"\u001a1Na2)\u000b-$\u0019db\u001d\u0016\t\u001deu\u0011\u0015\u000b\t\u000f7;Ikb,\b2R!qQTDR!\u0015\u0011\t\bADP!\u0011\u00119d\")\u0005\u000f\u0011]DN1\u0001\u0003B!IqQ\u00157\u0002\u0002\u0003\u000fqqU\u0001\fKZLG-\u001a8dK\u0012\n$\u0007\u0005\u0004\u0003Z\t}sq\u0014\u0005\b\t3c\u0007\u0019ADV!)\t\tN\"%\u0004 \t-vQ\u0016\t\u0007\u0003;\u0014ikb(\t\u000f\u0019eG\u000e1\u0001\u0004X!9aq 7A\u0002\r]\u0013a\u0001>jaV!qqWDa)\u00119Il\"3\u0015\t\u001dmv1\u0019\t\u0006\u0005c\u0002qQ\u0018\t\t\u0003#,\tOa\u0019\b@B!!qGDa\t\u001d!9(\u001cb\u0001\u0005\u0003B\u0011b\"2n\u0003\u0003\u0005\u001dab2\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$\u0013g\r\t\u0007\u00053\u0012yfb0\t\u000f\u0015]T\u000e1\u0001\bLB)!\u0011\u000f\u0001\b@\u0006i!0\u001b9QCJ$\u0018\u000e^5p]N,ba\"5\bh\u001emGCBDj\u000fs<i\u0010\u0006\u0003\bV\u001eEHCBDl\u000f?<Y\u000fE\u0003\u0003r\u00019I\u000e\u0005\u0003\u00038\u001dmGaBDo]\n\u0007!\u0011\t\u0002\u0002-\"Iq\u0011\u001d8\u0002\u0002\u0003\u000fq1]\u0001\fKZLG-\u001a8dK\u0012\nD\u0007\u0005\u0004\u0003Z\t}sQ\u001d\t\u0005\u0005o99\u000fB\u0004\bj:\u0014\rA!\u0011\u0003\u0003\tC\u0011b\"<o\u0003\u0003\u0005\u001dab<\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$\u0013'\u000e\t\u0007\u00053\u0012yf\"7\t\u000f\u0011ee\u000e1\u0001\btBQ\u0011\u0011\u001bDI\u0005W;)pb>\u0011\r\u0005u'QVDs!\u0019\tiN!,\bZ\"9qQ\u00128A\u0002\u001dm\b#\u0002B9\u0001\u001d\u0015\bb\u0002Dm]\u0002\u00071qK\u000b\u0007\u0011\u0003A)\u0002c\u0003\u0015\t!\r\u0001R\u0005\u000b\u0005\u0011\u000bAi\u0002\u0006\u0004\t\b!5\u0001r\u0003\t\u0006\u0005c\u0002\u0001\u0012\u0002\t\u0005\u0005oAY\u0001B\u0004\b^>\u0014\rA!\u0011\t\u0013!=q.!AA\u0004!E\u0011aC3wS\u0012,gnY3%cY\u0002bA!\u0017\u0003`!M\u0001\u0003\u0002B\u001c\u0011+!qa\";p\u0005\u0004\u0011\t\u0005C\u0005\t\u001a=\f\t\u0011q\u0001\t\u001c\u0005YQM^5eK:\u001cW\rJ\u00198!\u0019\u0011IFa\u0018\t\n!9A\u0011T8A\u0002!}\u0001CCAi\r#\u0013Y\u000b#\t\t$A1\u0011Q\u001cBW\u0011'\u0001b!!8\u0003.\"%\u0001bBDG_\u0002\u0007\u0001r\u0005\t\u0006\u0005c\u0002\u00012C\u000b\t\u0011WAy\u0004#\u0013\t6QA\u0001R\u0006E1\u0011KBY\u0007\u0006\u0003\t0!MC\u0003\u0003E\u0019\u0011oA\t\u0005#\u0014\u0011\u000b\tE\u0004\u0001c\r\u0011\t\t]\u0002R\u0007\u0003\b\u000f;\u0004(\u0019\u0001B!\u0011%AI\u0004]A\u0001\u0002\bAY$A\u0006fm&$WM\\2fIEB\u0004C\u0002B-\u0005?Bi\u0004\u0005\u0003\u00038!}BaBDua\n\u0007!\u0011\t\u0005\n\u0011\u0007\u0002\u0018\u0011!a\u0002\u0011\u000b\n1\"\u001a<jI\u0016t7-\u001a\u00132sA1!\u0011\fB0\u0011\u000f\u0002BAa\u000e\tJ\u00119\u00012\n9C\u0002\t\u0005#!A\"\t\u0013!=\u0003/!AA\u0004!E\u0013aC3wS\u0012,gnY3%eA\u0002bA!\u0017\u0003`!M\u0002b\u0002CMa\u0002\u0007\u0001R\u000b\t\r\u0003#D9Fa+\t\\!u\u0003rL\u0005\u0005\u00113\n\u0019NA\u0005Gk:\u001cG/[8ogA1\u0011Q\u001cBW\u0011{\u0001b!!8\u0003.\"\u001d\u0003CBAo\u0005[C\u0019\u0004C\u0004\b\u000eB\u0004\r\u0001c\u0019\u0011\u000b\tE\u0004\u0001#\u0010\t\u000f!\u001d\u0004\u000f1\u0001\tj\u0005!!\u000f\u001a34!\u0015\u0011\t\b\u0001E$\u0011\u001d1I\u000e\u001da\u0001\u0007/*\u0002\u0002c\u001c\t\u0004\"5\u0005\u0012\u0010\u000b\u0007\u0011cBy\nc)\u0015\t!M\u0004R\u0013\u000b\t\u0011kBY\b#\"\t\u0010B)!\u0011\u000f\u0001\txA!!q\u0007E=\t\u001d9i.\u001db\u0001\u0005\u0003B\u0011\u0002# r\u0003\u0003\u0005\u001d\u0001c \u0002\u0017\u00154\u0018\u000eZ3oG\u0016$#'\r\t\u0007\u00053\u0012y\u0006#!\u0011\t\t]\u00022\u0011\u0003\b\u000fS\f(\u0019\u0001B!\u0011%A9)]A\u0001\u0002\bAI)A\u0006fm&$WM\\2fII\u0012\u0004C\u0002B-\u0005?BY\t\u0005\u0003\u00038!5Ea\u0002E&c\n\u0007!\u0011\t\u0005\n\u0011#\u000b\u0018\u0011!a\u0002\u0011'\u000b1\"\u001a<jI\u0016t7-\u001a\u00133gA1!\u0011\fB0\u0011oBq\u0001\"'r\u0001\u0004A9\n\u0005\u0007\u0002R\"]#1\u0016EM\u00117Ci\n\u0005\u0004\u0002^\n5\u0006\u0012\u0011\t\u0007\u0003;\u0014i\u000bc#\u0011\r\u0005u'Q\u0016E<\u0011\u001d9i)\u001da\u0001\u0011C\u0003RA!\u001d\u0001\u0011\u0003Cq\u0001c\u001ar\u0001\u0004A)\u000bE\u0003\u0003r\u0001AY)\u0006\u0006\t*\"u\u0006r\u0019Ei\u0011g#\"\u0002c+\tl\"=\b2\u001fE})\u0011Ai\u000bc7\u0015\u0015!=\u0006R\u0017E`\u0011\u0013D)\u000eE\u0003\u0003r\u0001A\t\f\u0005\u0003\u00038!MFaBDoe\n\u0007!\u0011\t\u0005\n\u0011o\u0013\u0018\u0011!a\u0002\u0011s\u000b1\"\u001a<jI\u0016t7-\u001a\u00133iA1!\u0011\fB0\u0011w\u0003BAa\u000e\t>\u00129q\u0011\u001e:C\u0002\t\u0005\u0003\"\u0003Eae\u0006\u0005\t9\u0001Eb\u0003-)g/\u001b3f]\u000e,GEM\u001b\u0011\r\te#q\fEc!\u0011\u00119\u0004c2\u0005\u000f!-#O1\u0001\u0003B!I\u00012\u001a:\u0002\u0002\u0003\u000f\u0001RZ\u0001\fKZLG-\u001a8dK\u0012\u0012d\u0007\u0005\u0004\u0003Z\t}\u0003r\u001a\t\u0005\u0005oA\t\u000eB\u0004\tTJ\u0014\rA!\u0011\u0003\u0003\u0011C\u0011\u0002c6s\u0003\u0003\u0005\u001d\u0001#7\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$#g\u000e\t\u0007\u00053\u0012y\u0006#-\t\u000f\u0011e%\u000f1\u0001\t^Bq\u0011\u0011\u001bEp\u0005WC\u0019\u000f#:\th\"%\u0018\u0002\u0002Eq\u0003'\u0014\u0011BR;oGRLwN\u001c\u001b\u0011\r\u0005u'Q\u0016E^!\u0019\tiN!,\tFB1\u0011Q\u001cBW\u0011\u001f\u0004b!!8\u0003.\"E\u0006bBDGe\u0002\u0007\u0001R\u001e\t\u0006\u0005c\u0002\u00012\u0018\u0005\b\u0011O\u0012\b\u0019\u0001Ey!\u0015\u0011\t\b\u0001Ec\u0011\u001dA)P\u001da\u0001\u0011o\fAA\u001d3eiA)!\u0011\u000f\u0001\tP\"9a\u0011\u001c:A\u0002\r]SC\u0003E\u007f\u0013#IY\"#\n\n\bQA\u0001r`E\u001d\u0013{I\t\u0005\u0006\u0003\n\u0002%5BCCE\u0002\u0013\u0013I\u0019\"#\b\n(A)!\u0011\u000f\u0001\n\u0006A!!qGE\u0004\t\u001d9in\u001db\u0001\u0005\u0003B\u0011\"c\u0003t\u0003\u0003\u0005\u001d!#\u0004\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$#\u0007\u000f\t\u0007\u00053\u0012y&c\u0004\u0011\t\t]\u0012\u0012\u0003\u0003\b\u000fS\u001c(\u0019\u0001B!\u0011%I)b]A\u0001\u0002\bI9\"A\u0006fm&$WM\\2fIIJ\u0004C\u0002B-\u0005?JI\u0002\u0005\u0003\u00038%mAa\u0002E&g\n\u0007!\u0011\t\u0005\n\u0013?\u0019\u0018\u0011!a\u0002\u0013C\t1\"\u001a<jI\u0016t7-\u001a\u00134aA1!\u0011\fB0\u0013G\u0001BAa\u000e\n&\u00119\u00012[:C\u0002\t\u0005\u0003\"CE\u0015g\u0006\u0005\t9AE\u0016\u0003-)g/\u001b3f]\u000e,GeM\u0019\u0011\r\te#qLE\u0003\u0011\u001d!Ij\u001da\u0001\u0013_\u0001b\"!5\t`\n-\u0016\u0012GE\u001a\u0013kI9\u0004\u0005\u0004\u0002^\n5\u0016r\u0002\t\u0007\u0003;\u0014i+#\u0007\u0011\r\u0005u'QVE\u0012!\u0019\tiN!,\n\u0006!9qQR:A\u0002%m\u0002#\u0002B9\u0001%=\u0001b\u0002E4g\u0002\u0007\u0011r\b\t\u0006\u0005c\u0002\u0011\u0012\u0004\u0005\b\u0011k\u001c\b\u0019AE\"!\u0015\u0011\t\bAE\u0012\u0003\u001d1wN]3bG\"$BAa\u0004\nJ!9A\u0011\u0014;A\u0002%-\u0003\u0003CAi\t;\u0013\u0019Ga\u0004\u0002!\u0019|'/Z1dQB\u000b'\u000f^5uS>tG\u0003\u0002B\b\u0013#Bq\u0001\"'v\u0001\u0004I\u0019\u0006\u0005\u0005\u0002R\u0012u%1\u0016B\b\u0003\u001d\u0019w\u000e\u001c7fGR$\"!\"\u001a\u0002\u001fQ|Gj\\2bY&#XM]1u_J,\"Aa+\u0016\t%}\u0013r\r\u000b\u0005\u0013CJy\u0007\u0006\u0003\nd%%\u0004#\u0002B9\u0001%\u0015\u0004\u0003\u0002B\u001c\u0013O\"q\u0001b\u001ey\u0005\u0004\u0011\t\u0005C\u0005\nla\f\t\u0011q\u0001\nn\u0005YQM^5eK:\u001cW\rJ\u001a3!\u0019\u0011IFa\u0018\nf!9A\u0011\u0014=A\u0002%E\u0004\u0003CAi\u0013g\u0012\u0019'#\u001a\n\t%U\u00141\u001b\u0002\u0010!\u0006\u0014H/[1m\rVt7\r^5p]\u0006A1/\u001e2ue\u0006\u001cG\u000f\u0006\u0003\u0003p%m\u0004bBC<s\u0002\u0007!q\u000e\u000b\u0007\u0005_Jy(#!\t\u000f\u0015]$\u00101\u0001\u0003p!9A\u0011\u001c>A\u0002\r}ACBEC\u0013\u0013KY\t\u0006\u0003\u0003p%\u001d\u0005\"\u0003ChwB\u0005\t9\u0001Ci\u0011\u001d)9h\u001fa\u0001\u0005_BqAb\u0012|\u0001\u0004\u0019y!\u0001\ntk\n$(/Y2uI\u0011,g-Y;mi\u0012\u001aDC\u0002Cp\u0013#K\u0019\nC\u0004\u0006xq\u0004\rAa\u001c\t\u000f\u0019\u001dC\u00101\u0001\u0004\u0010\u00051!/\u001a3vG\u0016$BAa\u0019\n\u001a\"9A\u0011T?A\u0002%m\u0005CCAi\r#\u0013\u0019Ga\u0019\u0003d\u0005QAO]3f%\u0016$WoY3\u0015\r\t\r\u0014\u0012UER\u0011\u001d!IJ a\u0001\u00137C\u0011\"#*\u007f!\u0003\u0005\raa\b\u0002\u000b\u0011,\u0007\u000f\u001e5\u0002)Q\u0014X-\u001a*fIV\u001cW\r\n3fM\u0006,H\u000e\u001e\u00133\u0003\u00111w\u000e\u001c3\u0015\t%5\u00162\u0017\u000b\u0005\u0005GJy\u000b\u0003\u0005\n2\u0006\u0005\u0001\u0019AEN\u0003\ty\u0007\u000f\u0003\u0005\n6\u0006\u0005\u0001\u0019\u0001B2\u0003%QXM]8WC2,X-A\u0005bO\u001e\u0014XmZ1uKV!\u00112XEb)\u0011Ii,c6\u0015\r%}\u00162ZEi)\u0011I\t-#2\u0011\t\t]\u00122\u0019\u0003\t\to\n\u0019A1\u0001\u0003B!Q\u0011rYA\u0002\u0003\u0003\u0005\u001d!#3\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$3g\r\t\u0007\u00053\u0012y&#1\t\u0011%5\u00171\u0001a\u0001\u0013\u001f\fQa]3r\u001fB\u0004\"\"!5\u0007\u0012&\u0005'1MEa\u0011!I\u0019.a\u0001A\u0002%U\u0017AB2p[\n|\u0005\u000f\u0005\u0006\u0002R\u001aE\u0015\u0012YEa\u0013\u0003D\u0001\"#.\u0002\u0004\u0001\u0007\u0011\u0012Y\u0001\u000eiJ,W-Q4he\u0016<\u0017\r^3\u0016\t%u\u0017R\u001d\u000b\u0005\u0013?L9\u0010\u0006\u0005\nb&5\u0018\u0012_E{)\u0011I\u0019/c:\u0011\t\t]\u0012R\u001d\u0003\t\to\n)A1\u0001\u0003B!Q\u0011\u0012^A\u0003\u0003\u0003\u0005\u001d!c;\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$3\u0007\u000e\t\u0007\u00053\u0012y&c9\t\u0011%5\u0017Q\u0001a\u0001\u0013_\u0004\"\"!5\u0007\u0012&\r(1MEr\u0011!I\u0019.!\u0002A\u0002%M\bCCAi\r#K\u0019/c9\nd\"Q\u0011RUA\u0003!\u0003\u0005\raa\b\t\u0011%U\u0016Q\u0001a\u0001\u0013G\fq\u0003\u001e:fK\u0006;wM]3hCR,G\u0005Z3gCVdG\u000f\n\u001b\u0016\t%u(2\u0001\u000b\u0005\u000b[Ky\u0010\u0003\u0005\n6\u0006\u001d\u0001\u0019\u0001F\u0001!\u0011\u00119Dc\u0001\u0005\u0011\u0011]\u0014q\u0001b\u0001\u0005\u0003*BAc\u0002\u000b\u000eQa!\u0012\u0002F\u000b\u0015/QYBc\b\u000b\"Q!!2\u0002F\b!\u0011\u00119D#\u0004\u0005\u0011\u0011]\u0014\u0011\u0002b\u0001\u0005\u0003B!B#\u0005\u0002\n\u0005\u0005\t9\u0001F\n\u0003-)g/\u001b3f]\u000e,GeM\u001b\u0011\r\te#q\fF\u0006\u0011!I),!\u0003A\u0002)-\u0001\u0002CEg\u0003\u0013\u0001\rA#\u0007\u0011\u0015\u0005Eg\u0011\u0013F\u0006\u0005GRY\u0001\u0003\u0005\nT\u0006%\u0001\u0019\u0001F\u000f!)\t\tN\"%\u000b\f)-!2\u0002\u0005\t\u0013K\u000bI\u00011\u0001\u0004 !A!2EA\u0005\u0001\u0004\u00199&\u0001\rgS:\fG.Q4he\u0016<\u0017\r^3P]\u0016CXmY;u_J\fQaY8v]R$\"!b\u000e\u0002\u0017\r|WO\u001c;BaB\u0014x\u000e\u001f\u000b\u0007\u0015[QyDc\u0011\u0011\r)=\"R\u0007F\u001d\u001b\tQ\tD\u0003\u0003\u000b4\u0005u\u0016a\u00029beRL\u0017\r\\\u0005\u0005\u0015oQ\tDA\u0007QCJ$\u0018.\u00197SKN,H\u000e\u001e\t\u0005\u0015_QY$\u0003\u0003\u000b>)E\"!\u0004\"pk:$W\r\u001a#pk\ndW\r\u0003\u0005\u000bB\u00055\u0001\u0019AC\u001c\u0003\u001d!\u0018.\\3pkRD!B#\u0012\u0002\u000eA\u0005\t\u0019AC\u0017\u0003)\u0019wN\u001c4jI\u0016t7-Z\u0001\u0016G>,h\u000e^!qaJ|\u0007\u0010\n3fM\u0006,H\u000e\u001e\u00133+\tQYE\u000b\u0003\u0006.\rM\u0014\u0001D2pk:$()\u001f,bYV,GC\u0001F))\u0011Q\u0019F#\u0016\u0011\u0011\u0019Md\u0011\u0010B2\u000boA!\u0002b4\u0002\u0012A\u0005\t9\u0001Ci\u0003Y\u0019w.\u001e8u\u0005f4\u0016\r\\;fI\u0011,g-Y;mi\u0012\nDC\u0001Cp\u0003I\u0019w.\u001e8u\u0005f4\u0016\r\\;f\u0003B\u0004(o\u001c=\u0015\r)}#r\rF5)\u0011Q\tG#\u001a\u0011\r)=\"R\u0007F2!!1\u0019H\"\u001f\u0003d)e\u0002B\u0003Ch\u0003+\u0001\n\u0011q\u0001\u0005R\"A!\u0012IA\u000b\u0001\u0004)9\u0004\u0003\u0006\u000bF\u0005U\u0001\u0013!a\u0001\u000b[\tAdY8v]R\u0014\u0015PV1mk\u0016\f\u0005\u000f\u001d:pq\u0012\"WMZ1vYR$#'\u0001\u000fd_VtGOQ=WC2,X-\u00119qe>DH\u0005Z3gCVdG\u000fJ\u001a\u0015\r\u0011}'\u0012\u000fF:\u0011!Q\t%!\u0007A\u0002\u0015]\u0002\u0002\u0003F#\u00033\u0001\r!\"\f\u0002'\r|WO\u001c;BaB\u0014x\u000e\u001f#jgRLgn\u0019;\u0015\r\u0015]\"\u0012\u0010F>\u0011!19%a\u0007A\u0002\r}\u0001\u0002\u0003F?\u00037\u0001\raa\b\u0002\u0005M\u0004H\u0003BC\u001c\u0015\u0003C!Bc!\u0002\u001eA\u0005\t\u0019AC\u0017\u0003)\u0011X\r\\1uSZ,7\u000bR\u0001\u001eG>,h\u000e^!qaJ|\u0007\u0010R5ti&t7\r\u001e\u0013eK\u001a\fW\u000f\u001c;%c\u0005a!0\u001b9XSRD\u0017J\u001c3fqR\u0011!2\u0012\t\u0006\u0005c\u0002!R\u0012\t\t\u0003#,\tOa\u0019\u00068\u0005y!0\u001b9XSRDWK\\5rk\u0016LE-\u0001\u0003uC.,G\u0003BC3\u0015+C\u0001\"b\u001b\u0002&\u0001\u00071qD\u0001\u0006M&\u00148\u000f\u001e\u000b\u0003\u0005G\n1\u0001^8q)\u0011QyJc)\u0015\t\u0015\u0015$\u0012\u0015\u0005\t\t\u001f\fI\u0003q\u0001\u0005R\"AQ1NA\u0015\u0001\u0004\u0019y\"A\u0006uC.,wJ\u001d3fe\u0016$G\u0003\u0002FU\u0015[#B!\"\u001a\u000b,\"AAqZA\u0016\u0001\b!\t\u000e\u0003\u0005\u0006l\u0005-\u0002\u0019AB\u0010\u0003\ri\u0017\r\u001f\u000b\u0003\u0015g#BAa\u0019\u000b6\"AAqZA\u0017\u0001\b!\t.A\u0002nS:$\"Ac/\u0015\t\t\r$R\u0018\u0005\t\t\u001f\fy\u0003q\u0001\u0005R\u00069\u0011n]#naRLHCAB,\u00039\u0019\u0018M^3BgR+\u0007\u0010\u001e$jY\u0016$BAa\u0004\u000bH\"A!\u0012ZA\u001a\u0001\u0004\u0011\u00190\u0001\u0003qCRDGC\u0002B\b\u0015\u001bTy\r\u0003\u0005\u000bJ\u0006U\u0002\u0019\u0001Bz\u0011!Q\t.!\u000eA\u0002)M\u0017!B2pI\u0016\u001c\u0007\u0007\u0002Fk\u0015;\u0004bA!>\u000bX*m\u0017\u0002\u0002Fm\u0007\u0003\u0011Qa\u00117bgN\u0004BAa\u000e\u000b^\u0012a!r\u001cFh\u0003\u0003\u0005\tQ!\u0001\u000bb\n!q\fJ\u00195#\u0011\u0011\u0019Ec9\u0011\t)\u0015(2_\u0007\u0003\u0015OTAA#;\u000bl\u0006A1m\\7qe\u0016\u001c8O\u0003\u0003\u000bn*=\u0018AA5p\u0015\u0011Q\t0!1\u0002\r!\fGm\\8q\u0013\u0011Q)Pc:\u0003!\r{W\u000e\u001d:fgNLwN\\\"pI\u0016\u001c\u0017\u0001E:bm\u0016\f5o\u00142kK\u000e$h)\u001b7f)\u0011\u0011yAc?\t\u0011)%\u0017q\u0007a\u0001\u0005g\fQa[3z\u0005f,Ba#\u0001\f\nQ!12AF\u0006!\u0015\u0011\t\bAF\u0003!!\t\t.\"9\f\b\t\r\u0004\u0003\u0002B\u001c\u0017\u0013!\u0001\"b$\u0002:\t\u0007!\u0011\t\u0005\t\t3\u000bI\u00041\u0001\f\u000eAA\u0011\u0011\u001bCO\u0005GZ9!A\td_2dWm\u0019;QCJ$\u0018\u000e^5p]N$\"ac\u0005\u0011\r\u0005E'\u0011\\C3\u0003)\u0019\u0007.Z2la>Lg\u000e\u001e\u000b\u0003\u0005\u001f\tq\u0002\\8dC2\u001c\u0005.Z2la>Lg\u000e^\u0001\u000fSN\u001c\u0005.Z2la>Lg\u000e^3e+\t\u00199&A\u000fjg\u000eCWmY6q_&tG/\u001a3B]\u0012l\u0015\r^3sS\u0006d\u0017N_3e\u0003UI7\u000fT8dC2d\u0017p\u00115fG.\u0004x.\u001b8uK\u0012\fa#[:SK2L\u0017M\u00197z\u0007\",7m\u001b9pS:$X\rZ\u0001\u0012O\u0016$8\t[3dWB|\u0017N\u001c;GS2,WCAF\u0015!\u0019\t\tna\u0003\u0003t\u0006A2\r\\3b]NCWO\u001a4mK\u0012+\u0007/\u001a8eK:\u001c\u0017.Z:\u0015\t\t=1r\u0006\u0005\u000b\u0007W\nY\u0005%AA\u0002\r]\u0003\u0006BA&\u0005\u000fDc!a\u0013\u00054-U\u0012EAF\u001c\u0003\u0015\u0019d&\r\u00181\u0003\t\u001aG.Z1o'\",hM\u001a7f\t\u0016\u0004XM\u001c3f]\u000eLWm\u001d\u0013eK\u001a\fW\u000f\u001c;%c\u00059!-\u0019:sS\u0016\u0014HCAF !\u0019\u0011\th#\u0011\u0003d%!12IA]\u0005)\u0011F\t\u0012\"beJLWM\u001d\u0015\u0005\u0003\u001fZ9\u0005\u0005\u0003\u0003J.%\u0013\u0002BF&\u0005\u0017\u0014A\"\u0012=qKJLW.\u001a8uC2Dc!a\u0014\u00054-=\u0013EAF)\u0003\u0015\u0011d\u0006\u000e\u00181\u000359\u0018\u000e\u001e5SKN|WO]2fgR!1\u0011HF,\u0011!YI&!\u0015A\u0002-m\u0013A\u0001:q!\u0011Yifc\u0019\u000e\u0005-}#\u0002BF1\u0003{\u000b\u0001B]3t_V\u00148-Z\u0005\u0005\u0017KZyFA\bSKN|WO]2f!J|g-\u001b7fQ\u0011\t\tfc\u0012)\r\u0005EC1GF\u001b\u0003I9W\r\u001e*fg>,(oY3Qe>4\u0017\u000e\\3\u0015\u0005-m\u0003\u0006BA*\u0017\u000fBc!a\u0015\u00054-U\u0012\u0001D:u_J\fw-\u001a'fm\u0016d\u0017\u0001E:u_J\fw-\u001a'fm\u0016dw\fJ3r)\u0011\u0011ya#\u001f\t\u0015\t]\u0011qKA\u0001\u0002\u0004\u00199%A\u0007ti>\u0014\u0018mZ3MKZ,G\u000eI\u0001\u0010e\u0016\u001cx.\u001e:dKB\u0013xNZ5mKV\u00111\u0012\u0011\t\u0007\u0003#\u001cYac\u0017\u0002'I,7o\\;sG\u0016\u0004&o\u001c4jY\u0016|F%Z9\u0015\t\t=1r\u0011\u0005\u000b\u0005/\ti&!AA\u0002-\u0005\u0015\u0001\u0005:fg>,(oY3Qe>4\u0017\u000e\\3!Q\u0011\tyF!\b\u0002\u0019\r\u0014X-\u0019;j_:\u001c\u0016\u000e^3\u0016\u0005-E\u0005\u0003BFJ\u00173k!a#&\u000b\t-]\u0015QX\u0001\u0005kRLG.\u0003\u0003\f\u001c.U%\u0001C\"bY2\u001c\u0016\u000e^3\u0002\u001b\r\u0014X-\u0019;j_:\u001c\u0016\u000e^3!Q\u0011\t\u0019G!\b\u0002\u000bM\u001cw\u000e]3\u0016\u0005-\u0015\u0006CBAi\u0007\u0017Y9\u000b\u0005\u0003\u0003r-%\u0016\u0002BFV\u0003s\u0013\u0011C\u0015#E\u001fB,'/\u0019;j_:\u001c6m\u001c9f\u0003\u0019\u00198m\u001c9fA!\"\u0011q\rB\u000f\u0003=9W\r^\"sK\u0006$\u0018n\u001c8TSR,\u0017aD3mK6,g\u000e^\"mCN\u001cH+Y4\u0016\u0005\t]\u0013AD2iK\u000e\\\u0007o\\5oi\u0012\u000bG/Y\u000b\u0003\u0017w\u0003b!!5\u0004\f-u\u0006C\u0002B9\u0017\u007f\u0013\u0019'\u0003\u0003\fB\u0006e&!\u0005*E\t\u000eCWmY6q_&tG\u000fR1uC\u0006\u00112\r[3dWB|\u0017N\u001c;ECR\fw\fJ3r)\u0011\u0011yac2\t\u0015\t]\u0011qNA\u0001\u0002\u0004YY,A\bdQ\u0016\u001c7\u000e]8j]R$\u0015\r^1!\u0003q\u0019\u0007.Z2la>Lg\u000e^!mY6\u000b'o[3e\u0003:\u001cWm\u001d;peN\fQd\u00195fG.\u0004x.\u001b8u\u00032dW*\u0019:lK\u0012\fenY3ti>\u00148\u000fI\u0001\fM&\u00148\u000f\u001e)be\u0016tG/\u0006\u0003\fT.eG\u0003BFk\u00177\u0004RA!\u001d\u0001\u0017/\u0004BAa\u000e\fZ\u0012AAqOA<\u0005\u0004\u0011\t\u0005\u0003\u0006\f^\u0006]\u0014\u0011!a\u0002\u0017?\f1\"\u001a<jI\u0016t7-\u001a\u00134mA1!\u0011\fB0\u0017/\fa\u0001]1sK:$X\u0003BFs\u0017[$Bac:\fvR!1\u0012^Fx!\u0015\u0011\t\bAFv!\u0011\u00119d#<\u0005\u0011\u0011]\u0014\u0011\u0010b\u0001\u0005\u0003B!b#=\u0002z\u0005\u0005\t9AFz\u0003-)g/\u001b3f]\u000e,GeM\u001c\u0011\r\te#qLFv\u0011!Y90!\u001fA\u0002\r}\u0011!\u00016\u0002\u000bI,G/Y4\u0015\t\t=4R \u0005\t\u0017\u007f\fi\b1\u0001\r\u0002\u0005\u00191\r\\:\u0011\r\tU(r\u001bB2)\u0011\u0011y\u0007$\u0002\t\u00111\u001d\u0011q\u0010a\u0002\u0005/\n\u0001b\u00197bgN$\u0016mZ\u0001\u0013I>\u001c\u0005.Z2la>Lg\u000e^\"bY2,G-\u0001\fe_\u000eCWmY6q_&tGoQ1mY\u0016$w\fJ3r)\u0011\u0011y\u0001d\u0004\t\u0015\t]\u00111QA\u0001\u0002\u0004\u00199&A\ne_\u000eCWmY6q_&tGoQ1mY\u0016$\u0007\u0005\u000b\u0003\u0002\u0006\nu\u0011\u0001\u00043p\u0007\",7m\u001b9pS:$\u0018\u0001E7be.\u001c\u0005.Z2la>Lg\u000e^3e\u0003E\u0019G.Z1s\t\u0016\u0004XM\u001c3f]\u000eLWm]\u0001\u000ei>$UMY;h'R\u0014\u0018N\\4\u0002\u0011Q|7\u000b\u001e:j]\u001e$\"Aa=\u0002\u0013Q|'*\u0019<b%\u0012#EC\u0001G\u0013!\u0019a9\u0003$\r\u0003d5\u0011A\u0012\u0006\u0006\u0005\u0019Wai#\u0001\u0003kCZ\f'\u0002\u0002G\u0018\u0003{\u000b1!\u00199j\u0013\u0011a\u0019\u0004$\u000b\u0003\u000f)\u000bg/\u0019*E\t\u0006I\u0011n\u001d\"beJLWM]\u0001\u000bSN\u0014\u0015M\u001d:jKJ|\u0006\u0006BAK\u0005;\t\u0011dX8viB,H\u000fR3uKJl\u0017N\\5ti&\u001cG*\u001a<fYV\u0011Ar\b\t\u0005\u0019\u0003b9E\u0004\u0003\u0003r1\r\u0013\u0002\u0002G#\u0003s\u000b!\u0003R3uKJl\u0017N\\5ti&\u001cG*\u001a<fY&!A\u0012\nG&\u0005\u00151\u0016\r\\;f\u0013\u0011ai%a5\u0003\u0017\u0015sW/\\3sCRLwN\\\u0001\u0019_V$\b/\u001e;EKR,'/\\5oSN$\u0018n\u0019'fm\u0016d\u0017aG4fi>+H\u000f];u\t\u0016$XM]7j]&\u001cH/[2MKZ,G\u000e\u000b\u0003\u0002\u001c\n\u001d\u0017a\u0001*E\tB!!\u0011OAP'\u0019\ty*a4\r\\A!AR\fG2\u001b\tayF\u0003\u0003\u000bn2\u0005$B\u0001G\u0016\u0013\u0011\ty\u000fd\u0018\u0015\u00051]\u0013aH\"I\u000b\u000e[\u0005kT%O)~\u000bE\nT0N\u0003J[U\tR0B\u001d\u000e+5\u000bV(S'V\u0011A2\u000e\t\u0005\u0019[b\u0019(\u0004\u0002\rp)!A\u0012\u000fG1\u0003\u0011a\u0017M\\4\n\t\t}HrN\u0001!\u0007\"+5i\u0013)P\u0013:#v,\u0011'M?6\u000b%kS#E?\u0006s5)R*U\u001fJ\u001b\u0006%A\u000bsI\u0012$v\u000eU1jeJ#EIR;oGRLwN\\:\u0016\r1mDr\u0011GF)\u0011ai\bd'\u0015\u00111}DR\u0012GI\u0019/\u0003\u0002B!\u001d\r\u00022\u0015E\u0012R\u0005\u0005\u0019\u0007\u000bIL\u0001\tQC&\u0014(\u000b\u0012#Gk:\u001cG/[8ogB!!q\u0007GD\t!)y)a*C\u0002\t\u0005\u0003\u0003\u0002B\u001c\u0019\u0017#\u0001b\"8\u0002(\n\u0007!\u0011\t\u0005\t\r\u0017\t9\u000bq\u0001\r\u0010B1!\u0011\fB0\u0019\u000bC\u0001\u0002d%\u0002(\u0002\u000fARS\u0001\u0003mR\u0004bA!\u0017\u0003`1%\u0005B\u0003Ch\u0003O\u0003\n\u0011q\u0001\r\u001aB1\u0011Q\u001cCj\u0019\u000bC\u0001\"a/\u0002(\u0002\u0007AR\u0014\t\u0006\u0005c\u0002Ar\u0014\t\t\u0003#,\t\u000f$\"\r\n\u0006y\"\u000f\u001a3U_B\u000b\u0017N\u001d*E\t\u001a+hn\u0019;j_:\u001cH\u0005Z3gCVdG\u000f\n\u001b\u0016\r1\u0015Fr\u0016GZ)\u00111y\u0005d*\t\u0011\u0005m\u0016\u0011\u0016a\u0001\u0019S\u0003RA!\u001d\u0001\u0019W\u0003\u0002\"!5\u0006b25F\u0012\u0017\t\u0005\u0005oay\u000b\u0002\u0005\u0006\u0010\u0006%&\u0019\u0001B!!\u0011\u00119\u0004d-\u0005\u0011\u001du\u0017\u0011\u0016b\u0001\u0005\u0003\nAC\u001d3e)>\f5/\u001f8d%\u0012#\u0015i\u0019;j_:\u001cX\u0003\u0002G]\u0019\u000b$B\u0001d/\rNR!AR\u0018Gd!\u0019\u0011\t\bd0\rD&!A\u0012YA]\u0005=\t5/\u001f8d%\u0012#\u0015i\u0019;j_:\u001c\b\u0003\u0002B\u001c\u0019\u000b$\u0001Ba\u001a\u0002,\n\u0007!\u0011\t\u0005\u000b\u0019\u0013\fY+!AA\u00041-\u0017aC3wS\u0012,gnY3%ga\u0002bA!\u0017\u0003`1\r\u0007\u0002CA^\u0003W\u0003\r\u0001d4\u0011\u000b\tE\u0004\u0001d1\u0002;I$G\rV8TKF,XM\\2f\r&dWM\u0015#E\rVt7\r^5p]N,b\u0001$6\rb2\u0015H\u0003\u0002Gl\u0019\u007f$\"\u0002$7\rh2-Hr\u001eG}!!\u0011\t\bd7\r`2\r\u0018\u0002\u0002Go\u0003s\u0013\u0001dU3rk\u0016t7-\u001a$jY\u0016\u0014F\t\u0012$v]\u000e$\u0018n\u001c8t!\u0011\u00119\u0004$9\u0005\u0011\u0015=\u0015Q\u0016b\u0001\u0005\u0003\u0002BAa\u000e\rf\u0012AqQ\\AW\u0005\u0004\u0011\t\u0005\u0003\u0005\u0007\f\u00055\u00069\u0001Gu!\u0019\u0011IFa\u0018\r`\"AA2SAW\u0001\bai\u000f\u0005\u0004\u0003Z\t}C2\u001d\u0005\t\u0019c\fi\u000bq\u0001\rt\u0006\u00112.Z=Xe&$\u0018M\u00197f\r\u0006\u001cGo\u001c:z!\u0019\u0011)\u0001$>\r`&!Ar_A_\u0005=9&/\u001b;bE2,g)Y2u_JL\b\u0002\u0003G~\u0003[\u0003\u001d\u0001$@\u0002)Y\fG.^3Xe&$\u0018M\u00197f\r\u0006\u001cGo\u001c:z!\u0019\u0011)\u0001$>\rd\"A\u00111XAW\u0001\u0004i\t\u0001E\u0003\u0003r\u0001i\u0019\u0001\u0005\u0005\u0002R\u0016\u0005Hr\u001cGr\u0003a\u0011H\r\u001a+p\u001fJ$WM]3e%\u0012#e)\u001e8di&|gn]\u000b\u0007\u001b\u0013i)\"$\u0007\u0015\t5-Qr\u0006\u000b\t\u001b\u001bii\"d\t\u000e*AQ!\u0011OG\b\u001b'i9\"d\u0007\n\t5E\u0011\u0011\u0018\u0002\u0014\u001fJ$WM]3e%\u0012#e)\u001e8di&|gn\u001d\t\u0005\u0005oi)\u0002\u0002\u0005\u0006\u0010\u0006=&\u0019\u0001B!!\u0011\u00119$$\u0007\u0005\u0011\u001du\u0017q\u0016b\u0001\u0005\u0003\u0002\u0002\"!5\u0006b6MQr\u0003\u0005\u000b\u001b?\ty+!AA\u00045\u0005\u0012aC3wS\u0012,gnY3%ge\u0002b!!8\u0005T6M\u0001BCG\u0013\u0003_\u000b\t\u0011q\u0001\u000e(\u0005YQM^5eK:\u001cW\r\n\u001b1!\u0019\u0011IFa\u0018\u000e\u0014!QQ2FAX\u0003\u0003\u0005\u001d!$\f\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$C'\r\t\u0007\u00053\u0012y&d\u0006\t\u0011\u0005m\u0016q\u0016a\u0001\u001bc\u0001RA!\u001d\u0001\u001b7\tQ\u0004Z8vE2,'\u000b\u0012#U_\u0012{WO\u00197f%\u0012#e)\u001e8di&|gn\u001d\u000b\u0005\u001boii\u0004\u0005\u0003\u0003r5e\u0012\u0002BG\u001e\u0003s\u0013!\u0003R8vE2,'\u000b\u0012#Gk:\u001cG/[8og\"A\u00111XAY\u0001\u0004iy\u0004E\u0003\u0003r\u0001)i#\u0001\u0010ok6,'/[2S\t\u0012#v\u000eR8vE2,'\u000b\u0012#Gk:\u001cG/[8ogV!QRIG*)\u0011i9%$\u0016\u0015\t5]R\u0012\n\u0005\t\u000bW\n\u0019\fq\u0001\u000eLA1\u0011Q\\G'\u001b#JA!d\u0014\u0002r\n9a*^7fe&\u001c\u0007\u0003\u0002B\u001c\u001b'\"\u0001Ba\u001a\u00024\n\u0007!\u0011\t\u0005\t\u0003w\u000b\u0019\f1\u0001\u000eXA)!\u0011\u000f\u0001\u000eR\u0005aqO]5uKJ+\u0007\u000f\\1dKR\u0011QR\f\t\u0005\u0019[jy&\u0003\u0003\u000eb1=$AB(cU\u0016\u001cG\u000f"
)
public abstract class RDD implements Serializable, Logging {
   private transient boolean isBarrier_;
   private Enumeration.Value _outputDeterministicLevel;
   private transient SparkContext _sc;
   private transient Seq deps;
   private final ClassTag evidence$1;
   private final transient Option partitioner;
   private final int id;
   private transient String name;
   private final Object stateLock;
   private volatile Seq dependencies_;
   private transient volatile WeakReference legacyDependencies;
   private transient volatile Partition[] partitions_;
   private StorageLevel storageLevel;
   private transient Option resourceProfile;
   private final transient CallSite creationSite;
   private final transient Option scope;
   private Option checkpointData;
   private final boolean checkpointAllMarkedAncestors;
   private transient boolean doCheckpointCalled;
   private transient Logger org$apache$spark$internal$Logging$$log_;
   private volatile boolean bitmap$0;
   private transient volatile boolean bitmap$trans$0;

   public static DoubleRDDFunctions numericRDDToDoubleRDDFunctions(final RDD rdd, final Numeric num) {
      return RDD$.MODULE$.numericRDDToDoubleRDDFunctions(rdd, num);
   }

   public static DoubleRDDFunctions doubleRDDToDoubleRDDFunctions(final RDD rdd) {
      return RDD$.MODULE$.doubleRDDToDoubleRDDFunctions(rdd);
   }

   public static OrderedRDDFunctions rddToOrderedRDDFunctions(final RDD rdd, final Ordering evidence$39, final ClassTag evidence$40, final ClassTag evidence$41) {
      return RDD$.MODULE$.rddToOrderedRDDFunctions(rdd, evidence$39, evidence$40, evidence$41);
   }

   public static SequenceFileRDDFunctions rddToSequenceFileRDDFunctions(final RDD rdd, final ClassTag kt, final ClassTag vt, final WritableFactory keyWritableFactory, final WritableFactory valueWritableFactory) {
      return RDD$.MODULE$.rddToSequenceFileRDDFunctions(rdd, kt, vt, keyWritableFactory, valueWritableFactory);
   }

   public static AsyncRDDActions rddToAsyncRDDActions(final RDD rdd, final ClassTag evidence$38) {
      return RDD$.MODULE$.rddToAsyncRDDActions(rdd, evidence$38);
   }

   public static Null rddToPairRDDFunctions$default$4(final RDD rdd) {
      return RDD$.MODULE$.rddToPairRDDFunctions$default$4(rdd);
   }

   public static PairRDDFunctions rddToPairRDDFunctions(final RDD rdd, final ClassTag kt, final ClassTag vt, final Ordering ord) {
      return RDD$.MODULE$.rddToPairRDDFunctions(rdd, kt, vt, ord);
   }

   public String logName() {
      return Logging.logName$(this);
   }

   public Logger log() {
      return Logging.log$(this);
   }

   public Logging.LogStringContext LogStringContext(final StringContext sc) {
      return Logging.LogStringContext$(this, sc);
   }

   public void withLogContext(final Map context, final Function0 body) {
      Logging.withLogContext$(this, context, body);
   }

   public void logInfo(final Function0 msg) {
      Logging.logInfo$(this, msg);
   }

   public void logInfo(final LogEntry entry) {
      Logging.logInfo$(this, entry);
   }

   public void logInfo(final LogEntry entry, final Throwable throwable) {
      Logging.logInfo$(this, entry, throwable);
   }

   public void logDebug(final Function0 msg) {
      Logging.logDebug$(this, msg);
   }

   public void logDebug(final LogEntry entry) {
      Logging.logDebug$(this, entry);
   }

   public void logDebug(final LogEntry entry, final Throwable throwable) {
      Logging.logDebug$(this, entry, throwable);
   }

   public void logTrace(final Function0 msg) {
      Logging.logTrace$(this, msg);
   }

   public void logTrace(final LogEntry entry) {
      Logging.logTrace$(this, entry);
   }

   public void logTrace(final LogEntry entry, final Throwable throwable) {
      Logging.logTrace$(this, entry, throwable);
   }

   public void logWarning(final Function0 msg) {
      Logging.logWarning$(this, msg);
   }

   public void logWarning(final LogEntry entry) {
      Logging.logWarning$(this, entry);
   }

   public void logWarning(final LogEntry entry, final Throwable throwable) {
      Logging.logWarning$(this, entry, throwable);
   }

   public void logError(final Function0 msg) {
      Logging.logError$(this, msg);
   }

   public void logError(final LogEntry entry) {
      Logging.logError$(this, entry);
   }

   public void logError(final LogEntry entry, final Throwable throwable) {
      Logging.logError$(this, entry, throwable);
   }

   public void logInfo(final Function0 msg, final Throwable throwable) {
      Logging.logInfo$(this, msg, throwable);
   }

   public void logDebug(final Function0 msg, final Throwable throwable) {
      Logging.logDebug$(this, msg, throwable);
   }

   public void logTrace(final Function0 msg, final Throwable throwable) {
      Logging.logTrace$(this, msg, throwable);
   }

   public void logWarning(final Function0 msg, final Throwable throwable) {
      Logging.logWarning$(this, msg, throwable);
   }

   public void logError(final Function0 msg, final Throwable throwable) {
      Logging.logError$(this, msg, throwable);
   }

   public boolean isTraceEnabled() {
      return Logging.isTraceEnabled$(this);
   }

   public void initializeLogIfNecessary(final boolean isInterpreter) {
      Logging.initializeLogIfNecessary$(this, isInterpreter);
   }

   public boolean initializeLogIfNecessary(final boolean isInterpreter, final boolean silent) {
      return Logging.initializeLogIfNecessary$(this, isInterpreter, silent);
   }

   public boolean initializeLogIfNecessary$default$2() {
      return Logging.initializeLogIfNecessary$default$2$(this);
   }

   public void initializeForcefully(final boolean isInterpreter, final boolean silent) {
      Logging.initializeForcefully$(this, isInterpreter, silent);
   }

   public Logger org$apache$spark$internal$Logging$$log_() {
      return this.org$apache$spark$internal$Logging$$log_;
   }

   public void org$apache$spark$internal$Logging$$log__$eq(final Logger x$1) {
      this.org$apache$spark$internal$Logging$$log_ = x$1;
   }

   private SparkContext _sc() {
      return this._sc;
   }

   private void _sc_$eq(final SparkContext x$1) {
      this._sc = x$1;
   }

   private Seq deps() {
      return this.deps;
   }

   private void deps_$eq(final Seq x$1) {
      this.deps = x$1;
   }

   private SparkContext sc() {
      if (this._sc() == null) {
         throw SparkCoreErrors$.MODULE$.rddLacksSparkContextError();
      } else {
         return this._sc();
      }
   }

   public SparkConf conf() {
      return this.sc().conf();
   }

   @DeveloperApi
   public abstract Iterator compute(final Partition split, final TaskContext context);

   public abstract Partition[] getPartitions();

   public Seq getDependencies() {
      return this.deps();
   }

   public Seq getPreferredLocations(final Partition split) {
      return .MODULE$;
   }

   public Option partitioner() {
      return this.partitioner;
   }

   public SparkContext sparkContext() {
      return this.sc();
   }

   public int id() {
      return this.id;
   }

   public String name() {
      return this.name;
   }

   public void name_$eq(final String x$1) {
      this.name = x$1;
   }

   public RDD setName(final String _name) {
      this.name_$eq(_name);
      return this;
   }

   private RDD persist(final StorageLevel newLevel, final boolean allowOverride) {
      label39: {
         StorageLevel var10000 = this.storageLevel();
         StorageLevel var3 = org.apache.spark.storage.StorageLevel..MODULE$.NONE();
         if (var10000 == null) {
            if (var3 == null) {
               break label39;
            }
         } else if (var10000.equals(var3)) {
            break label39;
         }

         StorageLevel var4 = this.storageLevel();
         if (newLevel == null) {
            if (var4 == null) {
               break label39;
            }
         } else if (newLevel.equals(var4)) {
            break label39;
         }

         if (!allowOverride) {
            throw SparkCoreErrors$.MODULE$.cannotChangeStorageLevelError();
         }
      }

      label25: {
         StorageLevel var6 = this.storageLevel();
         StorageLevel var5 = org.apache.spark.storage.StorageLevel..MODULE$.NONE();
         if (var6 == null) {
            if (var5 != null) {
               break label25;
            }
         } else if (!var6.equals(var5)) {
            break label25;
         }

         this.sc().cleaner().foreach((x$2) -> {
            $anonfun$persist$1(this, x$2);
            return BoxedUnit.UNIT;
         });
         this.sc().persistRDD(this);
      }

      this.storageLevel_$eq(newLevel);
      return this;
   }

   public RDD persist(final StorageLevel newLevel) {
      return this.isLocallyCheckpointed() ? this.persist(LocalRDDCheckpointData$.MODULE$.transformStorageLevel(newLevel), true) : this.persist(newLevel, false);
   }

   public RDD persist() {
      return this.persist(org.apache.spark.storage.StorageLevel..MODULE$.MEMORY_ONLY());
   }

   public RDD cache() {
      return this.persist();
   }

   public RDD unpersist(final boolean blocking) {
      if (this.isLocallyCheckpointed()) {
         this.logWarning(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"RDD ", " was locally checkpointed, its lineage has been"})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.RDD_ID..MODULE$, BoxesRunTime.boxToInteger(this.id()))}))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{" truncated and cannot be recomputed after unpersisting"})))).log(.MODULE$))));
      }

      this.logInfo(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Removing RDD ", " from persistence list"})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.RDD_ID..MODULE$, BoxesRunTime.boxToInteger(this.id()))})))));
      this.sc().unpersistRDD(this.id(), blocking);
      this.storageLevel_$eq(org.apache.spark.storage.StorageLevel..MODULE$.NONE());
      return this;
   }

   public boolean unpersist$default$1() {
      return false;
   }

   public StorageLevel getStorageLevel() {
      return this.storageLevel();
   }

   public Object stateLock() {
      return this.stateLock;
   }

   private Seq dependencies_() {
      return this.dependencies_;
   }

   private void dependencies__$eq(final Seq x$1) {
      this.dependencies_ = x$1;
   }

   private WeakReference legacyDependencies() {
      return this.legacyDependencies;
   }

   private void legacyDependencies_$eq(final WeakReference x$1) {
      this.legacyDependencies = x$1;
   }

   private Partition[] partitions_() {
      return this.partitions_;
   }

   private void partitions__$eq(final Partition[] x$1) {
      this.partitions_ = x$1;
   }

   private Option checkpointRDD() {
      return this.checkpointData().flatMap((x$6) -> x$6.checkpointRDD());
   }

   public final Seq dependencies() {
      return (Seq)this.checkpointRDD().map((r) -> new scala.collection.immutable..colon.colon(new OneToOneDependency(r), .MODULE$)).getOrElse(() -> {
         if (this.dependencies_() == null) {
            synchronized(this.stateLock()){}

            try {
               if (this.dependencies_() == null) {
                  this.dependencies__$eq(this.getDependencies());
               }
            } catch (Throwable var3) {
               throw var3;
            }
         }

         return this.dependencies_();
      });
   }

   private final Option internalDependencies() {
      if (this.legacyDependencies() != null) {
         return this.legacyDependencies().get();
      } else if (this.dependencies_() != null) {
         return new Some(this.dependencies_());
      } else {
         synchronized(this.stateLock()){}

         Some var2;
         try {
            if (this.dependencies_() == null) {
               this.dependencies__$eq(this.getDependencies());
            }

            var2 = new Some(this.dependencies_());
         } catch (Throwable var4) {
            throw var4;
         }

         return var2;
      }
   }

   public final Partition[] partitions() {
      return (Partition[])this.checkpointRDD().map((x$7) -> x$7.partitions()).getOrElse(() -> {
         if (this.partitions_() == null) {
            synchronized(this.stateLock()){}

            try {
               if (this.partitions_() == null) {
                  this.partitions__$eq(this.getPartitions());
                  scala.collection.ArrayOps..MODULE$.foreach$extension(scala.Predef..MODULE$.refArrayOps((Object[])scala.collection.ArrayOps..MODULE$.zipWithIndex$extension(scala.Predef..MODULE$.refArrayOps(this.partitions_()))), (x0$1) -> {
                     $anonfun$partitions$3(x0$1);
                     return BoxedUnit.UNIT;
                  });
               }
            } catch (Throwable var3) {
               throw var3;
            }
         }

         return this.partitions_();
      });
   }

   public final int getNumPartitions() {
      return this.partitions().length;
   }

   public final Seq preferredLocations(final Partition split) {
      return (Seq)this.checkpointRDD().map((x$8) -> x$8.getPreferredLocations(split)).getOrElse(() -> this.getPreferredLocations(split));
   }

   public final Iterator iterator(final Partition split, final TaskContext context) {
      StorageLevel var10000 = this.storageLevel();
      StorageLevel var3 = org.apache.spark.storage.StorageLevel..MODULE$.NONE();
      if (var10000 == null) {
         if (var3 != null) {
            return this.getOrCompute(split, context);
         }
      } else if (!var10000.equals(var3)) {
         return this.getOrCompute(split, context);
      }

      return this.computeOrReadCheckpoint(split, context);
   }

   public Seq getNarrowAncestors() {
      HashSet ancestors = new HashSet();
      visit$1(this, ancestors);
      return ((IterableOnceOps)ancestors.filterNot((x$11) -> BoxesRunTime.boxToBoolean($anonfun$getNarrowAncestors$5(this, x$11)))).toSeq();
   }

   public Iterator computeOrReadCheckpoint(final Partition split, final TaskContext context) {
      return this.isCheckpointedAndMaterialized() ? this.firstParent(this.evidence$1).iterator(split, context) : this.compute(split, context);
   }

   public Iterator getOrCompute(final Partition partition, final TaskContext context) {
      RDDBlockId blockId = new RDDBlockId(this.id(), partition.index());
      BooleanRef readCachedBlock = BooleanRef.create(true);
      Either var6 = SparkEnv$.MODULE$.get().blockManager().getOrElseUpdateRDDBlock(context.taskAttemptId(), blockId, this.storageLevel(), this.elementClassTag(), () -> {
         readCachedBlock.elem = false;
         return this.computeOrReadCheckpoint(partition, context);
      });
      if (var6 instanceof Left var7) {
         BlockResult blockResult = (BlockResult)var7.value();
         if (readCachedBlock.elem) {
            InputMetrics existingMetrics = context.taskMetrics().inputMetrics();
            existingMetrics.incBytesRead(blockResult.bytes());
            return new InterruptibleIterator(context, blockResult, existingMetrics) {
               private final InputMetrics existingMetrics$1;

               public Object next() {
                  this.existingMetrics$1.incRecordsRead(1L);
                  return this.delegate().next();
               }

               public {
                  this.existingMetrics$1 = existingMetrics$1;
               }
            };
         } else {
            return new InterruptibleIterator(context, blockResult.data());
         }
      } else if (var6 instanceof Right var10) {
         Iterator iter = (Iterator)var10.value();
         return new InterruptibleIterator(context, iter);
      } else {
         throw new MatchError(var6);
      }
   }

   public Object withScope(final Function0 body) {
      return RDDOperationScope$.MODULE$.withScope(this.sc(), RDDOperationScope$.MODULE$.withScope$default$2(), body);
   }

   public RDD map(final Function1 f, final ClassTag evidence$3) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function1 cleanF = (Function1)qual$1.clean(f, x$2);
         return new MapPartitionsRDD(this, (x$12, x$13, iter) -> $anonfun$map$2(cleanF, x$12, BoxesRunTime.unboxToInt(x$13), iter), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$3(), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$4(), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$5(), evidence$3, this.evidence$1);
      });
   }

   public RDD flatMap(final Function1 f, final ClassTag evidence$4) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function1 cleanF = (Function1)qual$1.clean(f, x$2);
         return new MapPartitionsRDD(this, (x$14, x$15, iter) -> $anonfun$flatMap$2(cleanF, x$14, BoxesRunTime.unboxToInt(x$15), iter), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$3(), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$4(), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$5(), evidence$4, this.evidence$1);
      });
   }

   public RDD filter(final Function1 f) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function1 cleanF = (Function1)qual$1.clean(f, x$2);
         return new MapPartitionsRDD(this, (x$16, x$17, iter) -> $anonfun$filter$2(cleanF, x$16, BoxesRunTime.unboxToInt(x$17), iter), true, MapPartitionsRDD$.MODULE$.$lessinit$greater$default$4(), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$5(), this.evidence$1, this.evidence$1);
      });
   }

   public RDD distinct(final int numPartitions, final Ordering ord) {
      return (RDD)this.withScope(() -> {
         Option var4 = this.partitioner();
         return var4 instanceof Some && numPartitions == this.partitions().length ? this.mapPartitions((partition) -> removeDuplicatesInPartition$1(partition), true, this.evidence$1) : RDD$.MODULE$.rddToPairRDDFunctions(this.map((x) -> new Tuple2(x, (Object)null), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), this.evidence$1, scala.reflect.ClassTag..MODULE$.Null(), ord).reduceByKey((x, x$21) -> x, numPartitions).map((x$22) -> x$22._1(), this.evidence$1);
      });
   }

   public RDD distinct() {
      return (RDD)this.withScope(() -> {
         int x$1 = this.partitions().length;
         Ordering x$2 = this.distinct$default$2(x$1);
         return this.distinct(x$1, x$2);
      });
   }

   public Ordering distinct$default$2(final int numPartitions) {
      return null;
   }

   public RDD repartition(final int numPartitions, final Ordering ord) {
      return (RDD)this.withScope(() -> this.coalesce(numPartitions, true, this.coalesce$default$3(), ord));
   }

   public Ordering repartition$default$2(final int numPartitions) {
      return null;
   }

   public RDD coalesce(final int numPartitions, final boolean shuffle, final Option partitionCoalescer, final Ordering ord) {
      return (RDD)this.withScope(() -> {
         scala.Predef..MODULE$.require(numPartitions > 0, () -> "Number of partitions (" + numPartitions + ") must be positive.");
         if (shuffle) {
            Function2 distributePartition = (index, items) -> $anonfun$coalesce$3(numPartitions, BoxesRunTime.unboxToInt(index), items);
            RDD$ var10000 = RDD$.MODULE$;
            boolean x$2 = true;
            boolean x$3 = this.mapPartitionsWithIndexInternal$default$2();
            return var10000.rddToPairRDDFunctions(new CoalescedRDD(new ShuffledRDD(this.mapPartitionsWithIndexInternal(distributePartition, x$3, true, scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), new HashPartitioner(numPartitions), scala.reflect.ClassTag..MODULE$.Int(), this.evidence$1, this.evidence$1), numPartitions, partitionCoalescer, scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), scala.reflect.ClassTag..MODULE$.Int(), this.evidence$1, scala.math.Ordering.Int..MODULE$).values();
         } else {
            return new CoalescedRDD(this, numPartitions, partitionCoalescer, this.evidence$1);
         }
      });
   }

   public boolean coalesce$default$2() {
      return false;
   }

   public Option coalesce$default$3() {
      return scala.Option..MODULE$.empty();
   }

   public Ordering coalesce$default$4(final int numPartitions, final boolean shuffle, final Option partitionCoalescer) {
      return null;
   }

   public RDD sample(final boolean withReplacement, final double fraction, final long seed) {
      scala.Predef..MODULE$.require(fraction >= (double)0, () -> "Fraction must be nonnegative, but got " + fraction);
      return (RDD)this.withScope(() -> withReplacement ? new PartitionwiseSampledRDD(this, new PoissonSampler(fraction), true, seed, this.evidence$1, this.evidence$1) : new PartitionwiseSampledRDD(this, new BernoulliSampler(fraction, this.evidence$1), true, seed, this.evidence$1, this.evidence$1));
   }

   public long sample$default$3() {
      return Utils$.MODULE$.random().nextLong();
   }

   public RDD[] randomSplit(final double[] weights, final long seed) {
      scala.Predef..MODULE$.require(scala.collection.ArrayOps..MODULE$.forall$extension(scala.Predef..MODULE$.doubleArrayOps(weights), (JFunction1.mcZD.sp)(x$23) -> x$23 >= (double)0), () -> {
         ArraySeq.ofDouble var10000 = scala.Predef..MODULE$.wrapDoubleArray(weights);
         return "Weights must be nonnegative, but got " + var10000.mkString("[", ",", "]");
      });
      scala.Predef..MODULE$.require(BoxesRunTime.unboxToDouble(scala.Predef..MODULE$.wrapDoubleArray(weights).sum(scala.math.Numeric.DoubleIsFractional..MODULE$)) > (double)0, () -> {
         ArraySeq.ofDouble var10000 = scala.Predef..MODULE$.wrapDoubleArray(weights);
         return "Sum of weights must be positive, but got " + var10000.mkString("[", ",", "]");
      });
      return (RDD[])this.withScope(() -> {
         double sum = BoxesRunTime.unboxToDouble(scala.Predef..MODULE$.wrapDoubleArray(weights).sum(scala.math.Numeric.DoubleIsFractional..MODULE$));
         double[] normalizedCumWeights = (double[])scala.collection.ArrayOps..MODULE$.scanLeft$extension(scala.Predef..MODULE$.doubleArrayOps((double[])scala.collection.ArrayOps..MODULE$.map$extension(scala.Predef..MODULE$.doubleArrayOps(weights), (JFunction1.mcDD.sp)(x$24) -> x$24 / sum, scala.reflect.ClassTag..MODULE$.Double())), BoxesRunTime.boxToDouble((double)0.0F), (JFunction2.mcDDD.sp)(x$25, x$26) -> x$25 + x$26, scala.reflect.ClassTag..MODULE$.Double());
         Object qual$1 = scala.Predef..MODULE$.doubleArrayOps(normalizedCumWeights);
         int x$1 = 2;
         int x$2 = scala.collection.ArrayOps..MODULE$.sliding$default$2$extension(qual$1);
         return (RDD[])scala.collection.ArrayOps..MODULE$.sliding$extension(qual$1, 2, x$2).map((x) -> this.randomSampleWithRange(x[0], x[1], seed)).toArray(scala.reflect.ClassTag..MODULE$.apply(RDD.class));
      });
   }

   public long randomSplit$default$2() {
      return Utils$.MODULE$.random().nextLong();
   }

   public RDD randomSampleWithRange(final double lb, final double ub, final long seed) {
      Function2 x$1 = (index, partition) -> $anonfun$randomSampleWithRange$1(lb, ub, seed, BoxesRunTime.unboxToInt(index), partition);
      boolean x$2 = true;
      boolean x$3 = true;
      return this.mapPartitionsWithIndex(x$1, true, true, this.evidence$1);
   }

   public Object takeSample(final boolean withReplacement, final int num, final long seed) {
      return this.withScope(() -> {
         double numStDev = (double)10.0F;
         scala.Predef..MODULE$.require(num >= 0, () -> "Negative number of elements requested");
         scala.Predef..MODULE$.require(num <= Integer.MAX_VALUE - (int)(numStDev * scala.math.package..MODULE$.sqrt((double)Integer.MAX_VALUE)), () -> "Cannot support a sample size > Int.MaxValue - " + numStDev + " * math.sqrt(Int.MaxValue)");
         if (num == 0) {
            return this.evidence$1.newArray(0);
         } else {
            long initialCount = this.count();
            if (initialCount == 0L) {
               return this.evidence$1.newArray(0);
            } else {
               Random rand = new Random(seed);
               if (!withReplacement && (long)num >= initialCount) {
                  return Utils$.MODULE$.randomizeInPlace(this.collect(), rand);
               } else {
                  double fraction = SamplingUtils$.MODULE$.computeFractionForSampleSize(num, initialCount, withReplacement);
                  Object samples = this.sample(withReplacement, fraction, (long)rand.nextInt()).collect();

                  for(IntRef numIters = IntRef.create(0); scala.runtime.ScalaRunTime..MODULE$.array_length(samples) < num; ++numIters.elem) {
                     this.logWarning(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Needed to re-sample due to insufficient sample size. "})))).log(.MODULE$).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Repeat #", ""})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.NUM_ITERATIONS..MODULE$, BoxesRunTime.boxToInteger(numIters.elem))}))))));
                     samples = this.sample(withReplacement, fraction, (long)rand.nextInt()).collect();
                  }

                  return scala.collection.ArrayOps..MODULE$.take$extension(scala.Predef..MODULE$.genericArrayOps(Utils$.MODULE$.randomizeInPlace(samples, rand)), num);
               }
            }
         }
      });
   }

   public RDD union(final RDD other) {
      return (RDD)this.withScope(() -> this.sc().union(this, scala.runtime.ScalaRunTime..MODULE$.wrapRefArray(new RDD[]{other}), this.evidence$1));
   }

   public RDD $plus$plus(final RDD other) {
      return (RDD)this.withScope(() -> this.union(other));
   }

   public RDD sortBy(final Function1 f, final boolean ascending, final int numPartitions, final Ordering ord, final ClassTag ctag) {
      return (RDD)this.withScope(() -> RDD$.MODULE$.rddToPairRDDFunctions(RDD$.MODULE$.rddToOrderedRDDFunctions(this.keyBy(f), ord, ctag, this.evidence$1).sortByKey(ascending, numPartitions), ctag, this.evidence$1, ord).values());
   }

   public boolean sortBy$default$2() {
      return true;
   }

   public int sortBy$default$3() {
      return this.partitions().length;
   }

   public RDD intersection(final RDD other) {
      return (RDD)this.withScope(() -> {
         RDD x$1 = this.map((v) -> new Tuple2(v, (Object)null), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class));
         ClassTag x$2 = this.evidence$1;
         ClassTag x$3 = scala.reflect.ClassTag..MODULE$.Null();
         Null x$4 = RDD$.MODULE$.rddToPairRDDFunctions$default$4(x$1);
         RDD x$5 = RDD$.MODULE$.rddToPairRDDFunctions(x$1, x$2, x$3, (Ordering)null).cogroup(other.map((v) -> new Tuple2(v, (Object)null), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class))).filter((x0$1) -> BoxesRunTime.boxToBoolean($anonfun$intersection$4(x0$1)));
         ClassTag x$6 = this.evidence$1;
         ClassTag x$7 = scala.reflect.ClassTag..MODULE$.apply(Tuple2.class);
         Null x$8 = RDD$.MODULE$.rddToPairRDDFunctions$default$4(x$5);
         return RDD$.MODULE$.rddToPairRDDFunctions(x$5, x$6, x$7, (Ordering)null).keys();
      });
   }

   public RDD intersection(final RDD other, final Partitioner partitioner, final Ordering ord) {
      return (RDD)this.withScope(() -> RDD$.MODULE$.rddToPairRDDFunctions(RDD$.MODULE$.rddToPairRDDFunctions(this.map((v) -> new Tuple2(v, (Object)null), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), this.evidence$1, scala.reflect.ClassTag..MODULE$.Null(), ord).cogroup(other.map((v) -> new Tuple2(v, (Object)null), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), partitioner).filter((x0$1) -> BoxesRunTime.boxToBoolean($anonfun$intersection$8(x0$1))), this.evidence$1, scala.reflect.ClassTag..MODULE$.apply(Tuple2.class), ord).keys());
   }

   public RDD intersection(final RDD other, final int numPartitions) {
      return (RDD)this.withScope(() -> {
         HashPartitioner x$2 = new HashPartitioner(numPartitions);
         Ordering x$3 = this.intersection$default$3(other, x$2);
         return this.intersection(other, x$2, x$3);
      });
   }

   public Ordering intersection$default$3(final RDD other, final Partitioner partitioner) {
      return null;
   }

   public RDD glom() {
      return (RDD)this.withScope(() -> new MapPartitionsRDD(this, (x$27, x$28, iter) -> $anonfun$glom$2(this, x$27, BoxesRunTime.unboxToInt(x$28), iter), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$3(), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$4(), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$5(), scala.reflect.ClassTag..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.arrayClass(this.evidence$1.runtimeClass())), this.evidence$1));
   }

   public RDD cartesian(final RDD other, final ClassTag evidence$5) {
      return (RDD)this.withScope(() -> new CartesianRDD(this.sc(), this, other, this.evidence$1, evidence$5));
   }

   public RDD groupBy(final Function1 f, final ClassTag kt) {
      return (RDD)this.withScope(() -> {
         Partitioner x$2 = Partitioner$.MODULE$.defaultPartitioner(this, .MODULE$);
         Null x$4 = this.groupBy$default$4(f, x$2);
         return this.groupBy(f, x$2, kt, (Ordering)null);
      });
   }

   public RDD groupBy(final Function1 f, final int numPartitions, final ClassTag kt) {
      return (RDD)this.withScope(() -> {
         HashPartitioner x$2 = new HashPartitioner(numPartitions);
         Null x$4 = this.groupBy$default$4(f, x$2);
         return this.groupBy(f, x$2, kt, (Ordering)null);
      });
   }

   public RDD groupBy(final Function1 f, final Partitioner p, final ClassTag kt, final Ordering ord) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function1 cleanF = (Function1)qual$1.clean(f, x$2);
         return RDD$.MODULE$.rddToPairRDDFunctions(this.map((t) -> new Tuple2(cleanF.apply(t), t), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), kt, this.evidence$1, ord).groupByKey(p);
      });
   }

   public Null groupBy$default$4(final Function1 f, final Partitioner p) {
      return null;
   }

   public RDD pipe(final String command) {
      return (RDD)this.withScope(() -> this.pipe(PipedRDD$.MODULE$.tokenize(command), this.pipe$default$2(), this.pipe$default$3(), this.pipe$default$4(), this.pipe$default$5(), this.pipe$default$6(), this.pipe$default$7()));
   }

   public RDD pipe(final String command, final scala.collection.Map env) {
      return (RDD)this.withScope(() -> this.pipe(PipedRDD$.MODULE$.tokenize(command), env, this.pipe$default$3(), this.pipe$default$4(), this.pipe$default$5(), this.pipe$default$6(), this.pipe$default$7()));
   }

   public RDD pipe(final Seq command, final scala.collection.Map env, final Function1 printPipeContext, final Function2 printRDDElement, final boolean separateWorkingDir, final int bufferSize, final String encoding) {
      return (RDD)this.withScope(() -> {
         PipedRDD var10000 = new PipedRDD;
         Function1 var10005;
         if (printPipeContext != null) {
            SparkContext qual$1 = this.sc();
            boolean x$2 = qual$1.clean$default$2();
            var10005 = (Function1)qual$1.clean(printPipeContext, x$2);
         } else {
            var10005 = null;
         }

         Function2 var10006;
         if (printRDDElement != null) {
            SparkContext qual$2 = this.sc();
            boolean x$4 = qual$2.clean$default$2();
            var10006 = (Function2)qual$2.clean(printRDDElement, x$4);
         } else {
            var10006 = null;
         }

         var10000.<init>(this, command, env, var10005, var10006, separateWorkingDir, bufferSize, encoding, this.evidence$1);
         return var10000;
      });
   }

   public scala.collection.Map pipe$default$2() {
      return (scala.collection.Map)scala.collection.Map..MODULE$.apply(.MODULE$);
   }

   public Function1 pipe$default$3() {
      return null;
   }

   public Function2 pipe$default$4() {
      return null;
   }

   public boolean pipe$default$5() {
      return false;
   }

   public int pipe$default$6() {
      return 8192;
   }

   public String pipe$default$7() {
      return scala.io.Codec..MODULE$.defaultCharsetCodec().name();
   }

   public RDD mapPartitions(final Function1 f, final boolean preservesPartitioning, final ClassTag evidence$6) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function1 cleanedF = (Function1)qual$1.clean(f, x$2);
         return new MapPartitionsRDD(this, (x$29, x$30, iter) -> $anonfun$mapPartitions$2(cleanedF, x$29, BoxesRunTime.unboxToInt(x$30), iter), preservesPartitioning, MapPartitionsRDD$.MODULE$.$lessinit$greater$default$4(), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$5(), evidence$6, this.evidence$1);
      });
   }

   public boolean mapPartitions$default$2() {
      return false;
   }

   public RDD mapPartitionsWithIndexInternal(final Function2 f, final boolean preservesPartitioning, final boolean isOrderSensitive, final ClassTag evidence$7) {
      return (RDD)this.withScope(() -> {
         Function3 x$2 = (x$31, index, iter) -> $anonfun$mapPartitionsWithIndexInternal$2(f, x$31, BoxesRunTime.unboxToInt(index), iter);
         boolean x$5 = MapPartitionsRDD$.MODULE$.$lessinit$greater$default$4();
         return new MapPartitionsRDD(this, x$2, preservesPartitioning, x$5, isOrderSensitive, evidence$7, this.evidence$1);
      });
   }

   public RDD mapPartitionsInternal(final Function1 f, final boolean preservesPartitioning, final ClassTag evidence$8) {
      return (RDD)this.withScope(() -> new MapPartitionsRDD(this, (x$32, x$33, iter) -> $anonfun$mapPartitionsInternal$2(f, x$32, BoxesRunTime.unboxToInt(x$33), iter), preservesPartitioning, MapPartitionsRDD$.MODULE$.$lessinit$greater$default$4(), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$5(), evidence$8, this.evidence$1));
   }

   public boolean mapPartitionsInternal$default$2() {
      return false;
   }

   public RDD mapPartitionsWithIndex(final Function2 f, final boolean preservesPartitioning, final ClassTag evidence$9) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function2 cleanedF = (Function2)qual$1.clean(f, x$2);
         return new MapPartitionsRDD(this, (x$34, index, iter) -> $anonfun$mapPartitionsWithIndex$2(cleanedF, x$34, BoxesRunTime.unboxToInt(index), iter), preservesPartitioning, MapPartitionsRDD$.MODULE$.$lessinit$greater$default$4(), MapPartitionsRDD$.MODULE$.$lessinit$greater$default$5(), evidence$9, this.evidence$1);
      });
   }

   @DeveloperApi
   public RDD mapPartitionsWithEvaluator(final PartitionEvaluatorFactory evaluatorFactory, final ClassTag evidence$10) {
      return (RDD)this.withScope(() -> new MapPartitionsWithEvaluatorRDD(this, evaluatorFactory, this.evidence$1, evidence$10));
   }

   @DeveloperApi
   public RDD zipPartitionsWithEvaluator(final RDD rdd2, final PartitionEvaluatorFactory evaluatorFactory, final ClassTag evidence$11) {
      return (RDD)this.withScope(() -> new ZippedPartitionsWithEvaluatorRDD(this, rdd2, evaluatorFactory, this.evidence$1, evidence$11));
   }

   public RDD mapPartitionsWithIndex(final Function2 f, final boolean preservesPartitioning, final boolean isOrderSensitive, final ClassTag evidence$12) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function2 cleanedF = (Function2)qual$1.clean(f, x$2);
         Function3 x$4 = (x$35, index, iter) -> $anonfun$mapPartitionsWithIndex$4(cleanedF, x$35, BoxesRunTime.unboxToInt(index), iter);
         boolean x$7 = MapPartitionsRDD$.MODULE$.$lessinit$greater$default$4();
         return new MapPartitionsRDD(this, x$4, preservesPartitioning, x$7, isOrderSensitive, evidence$12, this.evidence$1);
      });
   }

   public boolean mapPartitionsWithIndexInternal$default$2() {
      return false;
   }

   public boolean mapPartitionsWithIndexInternal$default$3() {
      return false;
   }

   public boolean mapPartitionsWithIndex$default$2() {
      return false;
   }

   public RDD zip(final RDD other, final ClassTag evidence$13) {
      return (RDD)this.withScope(() -> this.zipPartitions(other, false, (thisIter, otherIter) -> new Iterator(thisIter, otherIter) {
               private final Iterator thisIter$1;
               private final Iterator otherIter$1;

               /** @deprecated */
               public final boolean hasDefiniteSize() {
                  return Iterator.hasDefiniteSize$(this);
               }

               public final Iterator iterator() {
                  return Iterator.iterator$(this);
               }

               public Option nextOption() {
                  return Iterator.nextOption$(this);
               }

               public boolean contains(final Object elem) {
                  return Iterator.contains$(this, elem);
               }

               public BufferedIterator buffered() {
                  return Iterator.buffered$(this);
               }

               public Iterator padTo(final int len, final Object elem) {
                  return Iterator.padTo$(this, len, elem);
               }

               public Tuple2 partition(final Function1 p) {
                  return Iterator.partition$(this, p);
               }

               public Iterator.GroupedIterator grouped(final int size) {
                  return Iterator.grouped$(this, size);
               }

               public Iterator.GroupedIterator sliding(final int size, final int step) {
                  return Iterator.sliding$(this, size, step);
               }

               public int sliding$default$2() {
                  return Iterator.sliding$default$2$(this);
               }

               public Iterator scanLeft(final Object z, final Function2 op) {
                  return Iterator.scanLeft$(this, z, op);
               }

               /** @deprecated */
               public Iterator scanRight(final Object z, final Function2 op) {
                  return Iterator.scanRight$(this, z, op);
               }

               public int indexWhere(final Function1 p, final int from) {
                  return Iterator.indexWhere$(this, p, from);
               }

               public int indexWhere$default$2() {
                  return Iterator.indexWhere$default$2$(this);
               }

               public int indexOf(final Object elem) {
                  return Iterator.indexOf$(this, elem);
               }

               public int indexOf(final Object elem, final int from) {
                  return Iterator.indexOf$(this, elem, from);
               }

               public final int length() {
                  return Iterator.length$(this);
               }

               public boolean isEmpty() {
                  return Iterator.isEmpty$(this);
               }

               public Iterator filter(final Function1 p) {
                  return Iterator.filter$(this, p);
               }

               public Iterator filterNot(final Function1 p) {
                  return Iterator.filterNot$(this, p);
               }

               public Iterator filterImpl(final Function1 p, final boolean isFlipped) {
                  return Iterator.filterImpl$(this, p, isFlipped);
               }

               public Iterator withFilter(final Function1 p) {
                  return Iterator.withFilter$(this, p);
               }

               public Iterator collect(final PartialFunction pf) {
                  return Iterator.collect$(this, pf);
               }

               public Iterator distinct() {
                  return Iterator.distinct$(this);
               }

               public Iterator distinctBy(final Function1 f) {
                  return Iterator.distinctBy$(this, f);
               }

               public Iterator map(final Function1 f) {
                  return Iterator.map$(this, f);
               }

               public Iterator flatMap(final Function1 f) {
                  return Iterator.flatMap$(this, f);
               }

               public Iterator flatten(final Function1 ev) {
                  return Iterator.flatten$(this, ev);
               }

               public Iterator concat(final Function0 xs) {
                  return Iterator.concat$(this, xs);
               }

               public final Iterator $plus$plus(final Function0 xs) {
                  return Iterator.$plus$plus$(this, xs);
               }

               public Iterator take(final int n) {
                  return Iterator.take$(this, n);
               }

               public Iterator takeWhile(final Function1 p) {
                  return Iterator.takeWhile$(this, p);
               }

               public Iterator drop(final int n) {
                  return Iterator.drop$(this, n);
               }

               public Iterator dropWhile(final Function1 p) {
                  return Iterator.dropWhile$(this, p);
               }

               public Tuple2 span(final Function1 p) {
                  return Iterator.span$(this, p);
               }

               public Iterator slice(final int from, final int until) {
                  return Iterator.slice$(this, from, until);
               }

               public Iterator sliceIterator(final int from, final int until) {
                  return Iterator.sliceIterator$(this, from, until);
               }

               public Iterator zip(final IterableOnce that) {
                  return Iterator.zip$(this, that);
               }

               public Iterator zipAll(final IterableOnce that, final Object thisElem, final Object thatElem) {
                  return Iterator.zipAll$(this, that, thisElem, thatElem);
               }

               public Iterator zipWithIndex() {
                  return Iterator.zipWithIndex$(this);
               }

               public boolean sameElements(final IterableOnce that) {
                  return Iterator.sameElements$(this, that);
               }

               public Tuple2 duplicate() {
                  return Iterator.duplicate$(this);
               }

               public Iterator patch(final int from, final Iterator patchElems, final int replaced) {
                  return Iterator.patch$(this, from, patchElems, replaced);
               }

               public Iterator tapEach(final Function1 f) {
                  return Iterator.tapEach$(this, f);
               }

               public String toString() {
                  return Iterator.toString$(this);
               }

               /** @deprecated */
               public Iterator seq() {
                  return Iterator.seq$(this);
               }

               public Tuple2 splitAt(final int n) {
                  return IterableOnceOps.splitAt$(this, n);
               }

               public boolean isTraversableAgain() {
                  return IterableOnceOps.isTraversableAgain$(this);
               }

               public void foreach(final Function1 f) {
                  IterableOnceOps.foreach$(this, f);
               }

               public boolean forall(final Function1 p) {
                  return IterableOnceOps.forall$(this, p);
               }

               public boolean exists(final Function1 p) {
                  return IterableOnceOps.exists$(this, p);
               }

               public int count(final Function1 p) {
                  return IterableOnceOps.count$(this, p);
               }

               public Option find(final Function1 p) {
                  return IterableOnceOps.find$(this, p);
               }

               public Object foldLeft(final Object z, final Function2 op) {
                  return IterableOnceOps.foldLeft$(this, z, op);
               }

               public Object foldRight(final Object z, final Function2 op) {
                  return IterableOnceOps.foldRight$(this, z, op);
               }

               /** @deprecated */
               public final Object $div$colon(final Object z, final Function2 op) {
                  return IterableOnceOps.$div$colon$(this, z, op);
               }

               /** @deprecated */
               public final Object $colon$bslash(final Object z, final Function2 op) {
                  return IterableOnceOps.$colon$bslash$(this, z, op);
               }

               public Object fold(final Object z, final Function2 op) {
                  return IterableOnceOps.fold$(this, z, op);
               }

               public Object reduce(final Function2 op) {
                  return IterableOnceOps.reduce$(this, op);
               }

               public Option reduceOption(final Function2 op) {
                  return IterableOnceOps.reduceOption$(this, op);
               }

               public Object reduceLeft(final Function2 op) {
                  return IterableOnceOps.reduceLeft$(this, op);
               }

               public Object reduceRight(final Function2 op) {
                  return IterableOnceOps.reduceRight$(this, op);
               }

               public Option reduceLeftOption(final Function2 op) {
                  return IterableOnceOps.reduceLeftOption$(this, op);
               }

               public Option reduceRightOption(final Function2 op) {
                  return IterableOnceOps.reduceRightOption$(this, op);
               }

               public boolean nonEmpty() {
                  return IterableOnceOps.nonEmpty$(this);
               }

               public int size() {
                  return IterableOnceOps.size$(this);
               }

               /** @deprecated */
               public final void copyToBuffer(final Buffer dest) {
                  IterableOnceOps.copyToBuffer$(this, dest);
               }

               public int copyToArray(final Object xs) {
                  return IterableOnceOps.copyToArray$(this, xs);
               }

               public int copyToArray(final Object xs, final int start) {
                  return IterableOnceOps.copyToArray$(this, xs, start);
               }

               public int copyToArray(final Object xs, final int start, final int len) {
                  return IterableOnceOps.copyToArray$(this, xs, start, len);
               }

               public Object sum(final Numeric num) {
                  return IterableOnceOps.sum$(this, num);
               }

               public Object product(final Numeric num) {
                  return IterableOnceOps.product$(this, num);
               }

               public Object min(final Ordering ord) {
                  return IterableOnceOps.min$(this, ord);
               }

               public Option minOption(final Ordering ord) {
                  return IterableOnceOps.minOption$(this, ord);
               }

               public Object max(final Ordering ord) {
                  return IterableOnceOps.max$(this, ord);
               }

               public Option maxOption(final Ordering ord) {
                  return IterableOnceOps.maxOption$(this, ord);
               }

               public Object maxBy(final Function1 f, final Ordering ord) {
                  return IterableOnceOps.maxBy$(this, f, ord);
               }

               public Option maxByOption(final Function1 f, final Ordering ord) {
                  return IterableOnceOps.maxByOption$(this, f, ord);
               }

               public Object minBy(final Function1 f, final Ordering ord) {
                  return IterableOnceOps.minBy$(this, f, ord);
               }

               public Option minByOption(final Function1 f, final Ordering ord) {
                  return IterableOnceOps.minByOption$(this, f, ord);
               }

               public Option collectFirst(final PartialFunction pf) {
                  return IterableOnceOps.collectFirst$(this, pf);
               }

               /** @deprecated */
               public Object aggregate(final Function0 z, final Function2 seqop, final Function2 combop) {
                  return IterableOnceOps.aggregate$(this, z, seqop, combop);
               }

               public boolean corresponds(final IterableOnce that, final Function2 p) {
                  return IterableOnceOps.corresponds$(this, that, p);
               }

               public final String mkString(final String start, final String sep, final String end) {
                  return IterableOnceOps.mkString$(this, start, sep, end);
               }

               public final String mkString(final String sep) {
                  return IterableOnceOps.mkString$(this, sep);
               }

               public final String mkString() {
                  return IterableOnceOps.mkString$(this);
               }

               public StringBuilder addString(final StringBuilder b, final String start, final String sep, final String end) {
                  return IterableOnceOps.addString$(this, b, start, sep, end);
               }

               public final StringBuilder addString(final StringBuilder b, final String sep) {
                  return IterableOnceOps.addString$(this, b, sep);
               }

               public final StringBuilder addString(final StringBuilder b) {
                  return IterableOnceOps.addString$(this, b);
               }

               public Object to(final Factory factory) {
                  return IterableOnceOps.to$(this, factory);
               }

               /** @deprecated */
               public final Iterator toIterator() {
                  return IterableOnceOps.toIterator$(this);
               }

               public List toList() {
                  return IterableOnceOps.toList$(this);
               }

               public Vector toVector() {
                  return IterableOnceOps.toVector$(this);
               }

               public scala.collection.immutable.Map toMap(final scala..less.colon.less ev) {
                  return IterableOnceOps.toMap$(this, ev);
               }

               public Set toSet() {
                  return IterableOnceOps.toSet$(this);
               }

               public Seq toSeq() {
                  return IterableOnceOps.toSeq$(this);
               }

               public IndexedSeq toIndexedSeq() {
                  return IterableOnceOps.toIndexedSeq$(this);
               }

               /** @deprecated */
               public final Stream toStream() {
                  return IterableOnceOps.toStream$(this);
               }

               public final Buffer toBuffer() {
                  return IterableOnceOps.toBuffer$(this);
               }

               public Object toArray(final ClassTag evidence$2) {
                  return IterableOnceOps.toArray$(this, evidence$2);
               }

               public Iterable reversed() {
                  return IterableOnceOps.reversed$(this);
               }

               public Stepper stepper(final StepperShape shape) {
                  return IterableOnce.stepper$(this, shape);
               }

               public int knownSize() {
                  return IterableOnce.knownSize$(this);
               }

               public boolean hasNext() {
                  Tuple2.mcZZ.sp var2 = new Tuple2.mcZZ.sp(this.thisIter$1.hasNext(), this.otherIter$1.hasNext());
                  if (var2 != null) {
                     boolean var3 = ((Tuple2)var2)._1$mcZ$sp();
                     boolean var4 = ((Tuple2)var2)._2$mcZ$sp();
                     if (var3 && var4) {
                        return true;
                     }
                  }

                  if (var2 != null) {
                     boolean var5 = ((Tuple2)var2)._1$mcZ$sp();
                     boolean var6 = ((Tuple2)var2)._2$mcZ$sp();
                     if (!var5 && !var6) {
                        return false;
                     }
                  }

                  throw SparkCoreErrors$.MODULE$.canOnlyZipRDDsWithSamePartitionSizeError();
               }

               public Tuple2 next() {
                  return new Tuple2(this.thisIter$1.next(), this.otherIter$1.next());
               }

               public {
                  this.thisIter$1 = thisIter$1;
                  this.otherIter$1 = otherIter$1;
                  IterableOnce.$init$(this);
                  IterableOnceOps.$init$(this);
                  Iterator.$init$(this);
               }
            }, evidence$13, scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)));
   }

   public RDD zipPartitions(final RDD rdd2, final boolean preservesPartitioning, final Function2 f, final ClassTag evidence$14, final ClassTag evidence$15) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1;
         SparkContext var10002 = qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         return new ZippedPartitionsRDD2(var10002, (Function2)qual$1.clean(f, x$2), this, rdd2, preservesPartitioning, this.evidence$1, evidence$14, evidence$15);
      });
   }

   public RDD zipPartitions(final RDD rdd2, final Function2 f, final ClassTag evidence$16, final ClassTag evidence$17) {
      return (RDD)this.withScope(() -> this.zipPartitions(rdd2, false, f, evidence$16, evidence$17));
   }

   public RDD zipPartitions(final RDD rdd2, final RDD rdd3, final boolean preservesPartitioning, final Function3 f, final ClassTag evidence$18, final ClassTag evidence$19, final ClassTag evidence$20) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1;
         SparkContext var10002 = qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         return new ZippedPartitionsRDD3(var10002, (Function3)qual$1.clean(f, x$2), this, rdd2, rdd3, preservesPartitioning, this.evidence$1, evidence$18, evidence$19, evidence$20);
      });
   }

   public RDD zipPartitions(final RDD rdd2, final RDD rdd3, final Function3 f, final ClassTag evidence$21, final ClassTag evidence$22, final ClassTag evidence$23) {
      return (RDD)this.withScope(() -> this.zipPartitions(rdd2, rdd3, false, f, evidence$21, evidence$22, evidence$23));
   }

   public RDD zipPartitions(final RDD rdd2, final RDD rdd3, final RDD rdd4, final boolean preservesPartitioning, final Function4 f, final ClassTag evidence$24, final ClassTag evidence$25, final ClassTag evidence$26, final ClassTag evidence$27) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1;
         SparkContext var10002 = qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         return new ZippedPartitionsRDD4(var10002, (Function4)qual$1.clean(f, x$2), this, rdd2, rdd3, rdd4, preservesPartitioning, this.evidence$1, evidence$24, evidence$25, evidence$26, evidence$27);
      });
   }

   public RDD zipPartitions(final RDD rdd2, final RDD rdd3, final RDD rdd4, final Function4 f, final ClassTag evidence$28, final ClassTag evidence$29, final ClassTag evidence$30, final ClassTag evidence$31) {
      return (RDD)this.withScope(() -> this.zipPartitions(rdd2, rdd3, rdd4, false, f, evidence$28, evidence$29, evidence$30, evidence$31));
   }

   public void foreach(final Function1 f) {
      this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function1 cleanF = (Function1)qual$1.clean(f, x$2);
         return (BoxedUnit[])this.sc().runJob(this, (Function1)((iter) -> {
            $anonfun$foreach$2(cleanF, iter);
            return BoxedUnit.UNIT;
         }), scala.reflect.ClassTag..MODULE$.Unit());
      });
   }

   public void foreachPartition(final Function1 f) {
      this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function1 cleanF = (Function1)qual$1.clean(f, x$2);
         return (BoxedUnit[])this.sc().runJob(this, (Function1)((iter) -> {
            $anonfun$foreachPartition$2(cleanF, iter);
            return BoxedUnit.UNIT;
         }), scala.reflect.ClassTag..MODULE$.Unit());
      });
   }

   public Object collect() {
      return this.withScope(() -> {
         Object[] results = this.sc().runJob(this, (Function1)((iter) -> iter.toArray(this.evidence$1)), scala.reflect.ClassTag..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.arrayClass(this.evidence$1.runtimeClass())));
         return scala.Array..MODULE$.concat(org.apache.spark.util.ArrayImplicits..MODULE$.SparkArrayOps(results).toImmutableArraySeq(), this.evidence$1);
      });
   }

   public Iterator toLocalIterator() {
      return (Iterator)this.withScope(() -> scala.collection.ArrayOps..MODULE$.indices$extension(scala.Predef..MODULE$.refArrayOps(this.partitions())).iterator().flatMap((i) -> $anonfun$toLocalIterator$3(this, BoxesRunTime.unboxToInt(i))));
   }

   public RDD collect(final PartialFunction f, final ClassTag evidence$32) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         PartialFunction cleanF = (PartialFunction)qual$1.clean(f, x$2);
         return this.filter((x) -> BoxesRunTime.boxToBoolean($anonfun$collect$4(cleanF, x))).map(cleanF, evidence$32);
      });
   }

   public RDD subtract(final RDD other) {
      return (RDD)this.withScope(() -> {
         Partitioner x$2 = (Partitioner)this.partitioner().getOrElse(() -> new HashPartitioner(this.partitions().length));
         Ordering x$3 = this.subtract$default$3(other, x$2);
         return this.subtract(other, x$2, x$3);
      });
   }

   public RDD subtract(final RDD other, final int numPartitions) {
      return (RDD)this.withScope(() -> {
         HashPartitioner x$2 = new HashPartitioner(numPartitions);
         Ordering x$3 = this.subtract$default$3(other, x$2);
         return this.subtract(other, x$2, x$3);
      });
   }

   public RDD subtract(final RDD other, final Partitioner p, final Ordering ord) {
      return (RDD)this.withScope(() -> {
         label14: {
            Option var10000 = this.partitioner();
            Some var4 = new Some(p);
            if (var10000 == null) {
               if (var4 == null) {
                  break label14;
               }
            } else if (var10000.equals(var4)) {
               break label14;
            }

            return RDD$.MODULE$.rddToPairRDDFunctions(RDD$.MODULE$.rddToPairRDDFunctions(this.map((x) -> new Tuple2(x, (Object)null), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), this.evidence$1, scala.reflect.ClassTag..MODULE$.Null(), ord).subtractByKey(other.map((x$37) -> new Tuple2(x$37, (Object)null), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), p, scala.reflect.ClassTag..MODULE$.Null()), this.evidence$1, scala.reflect.ClassTag..MODULE$.Null(), ord).keys();
         }

         Partitioner p2 = new Partitioner(p) {
            private final Partitioner p$2;

            public int numPartitions() {
               return this.p$2.numPartitions();
            }

            public int getPartition(final Object k) {
               return this.p$2.getPartition(((Tuple2)k)._1());
            }

            public {
               this.p$2 = p$2;
            }
         };
         return RDD$.MODULE$.rddToPairRDDFunctions(RDD$.MODULE$.rddToPairRDDFunctions(this.map((x) -> new Tuple2(x, (Object)null), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), this.evidence$1, scala.reflect.ClassTag..MODULE$.Null(), ord).subtractByKey(other.map((x$36) -> new Tuple2(x$36, (Object)null), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), p2, scala.reflect.ClassTag..MODULE$.Null()), this.evidence$1, scala.reflect.ClassTag..MODULE$.Null(), ord).keys();
      });
   }

   public Ordering subtract$default$3(final RDD other, final Partitioner p) {
      return null;
   }

   public Object reduce(final Function2 f) {
      return this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function2 cleanF = (Function2)qual$1.clean(f, x$2);
         Function1 reducePartition = (iter) -> (Option)(iter.hasNext() ? new Some(iter.reduceLeft(cleanF)) : scala.None..MODULE$);
         ObjectRef jobResult = ObjectRef.create(scala.None..MODULE$);
         Function2 mergeResult = (x$38, taskResult) -> {
            $anonfun$reduce$3(jobResult, f, BoxesRunTime.unboxToInt(x$38), taskResult);
            return BoxedUnit.UNIT;
         };
         this.sc().runJob(this, reducePartition, mergeResult, scala.reflect.ClassTag..MODULE$.apply(Option.class));
         return ((Option)jobResult.elem).getOrElse(() -> {
            throw SparkCoreErrors$.MODULE$.emptyCollectionError();
         });
      });
   }

   public Object treeReduce(final Function2 f, final int depth) {
      return this.withScope(() -> {
         scala.Predef..MODULE$.require(depth >= 1, () -> "Depth must be greater than or equal to 1 but got " + depth + ".");
         SparkContext qual$1 = this.context();
         boolean x$2 = qual$1.clean$default$2();
         Function2 cleanF = (Function2)qual$1.clean(f, x$2);
         Function1 reducePartition = (iter) -> (Option)(iter.hasNext() ? new Some(iter.reduceLeft(cleanF)) : scala.None..MODULE$);
         RDD partiallyReduced = this.mapPartitions((it) -> scala.package..MODULE$.Iterator().apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new Option[]{(Option)reducePartition.apply(it)}))), this.mapPartitions$default$2(), scala.reflect.ClassTag..MODULE$.apply(Option.class));
         Function2 op = (c, x) -> {
            if (c.isDefined() && x.isDefined()) {
               return new Some(cleanF.apply(c.get(), x.get()));
            } else if (c.isDefined()) {
               return c;
            } else {
               return (Option)(x.isDefined() ? x : scala.None..MODULE$);
            }
         };
         return ((Option)partiallyReduced.treeAggregate(scala.Option..MODULE$.empty(), op, op, depth, scala.reflect.ClassTag..MODULE$.apply(Option.class))).getOrElse(() -> {
            throw SparkCoreErrors$.MODULE$.emptyCollectionError();
         });
      });
   }

   public int treeReduce$default$2() {
      return 2;
   }

   public Object fold(final Object zeroValue, final Function2 op) {
      return this.withScope(() -> {
         ObjectRef jobResult = ObjectRef.create(Utils$.MODULE$.clone(zeroValue, this.sc().env().closureSerializer().newInstance(), this.evidence$1));
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function2 cleanOp = (Function2)qual$1.clean(op, x$2);
         Function1 foldPartition = (iter) -> iter.fold(zeroValue, cleanOp);
         Function2 mergeResult = (x$39, taskResult) -> {
            $anonfun$fold$3(jobResult, op, BoxesRunTime.unboxToInt(x$39), taskResult);
            return BoxedUnit.UNIT;
         };
         this.sc().runJob(this, foldPartition, mergeResult, this.evidence$1);
         return jobResult.elem;
      });
   }

   public Object aggregate(final Object zeroValue, final Function2 seqOp, final Function2 combOp, final ClassTag evidence$33) {
      return this.withScope(() -> {
         ObjectRef jobResult = ObjectRef.create(Utils$.MODULE$.clone(zeroValue, this.sc().env().serializer().newInstance(), evidence$33));
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function2 cleanSeqOp = (Function2)qual$1.clean(seqOp, x$2);
         Function1 aggregatePartition = (it) -> it.foldLeft(zeroValue, cleanSeqOp);
         Function2 mergeResult = (x$40, taskResult) -> {
            $anonfun$aggregate$3(jobResult, combOp, BoxesRunTime.unboxToInt(x$40), taskResult);
            return BoxedUnit.UNIT;
         };
         this.sc().runJob(this, aggregatePartition, mergeResult, evidence$33);
         return jobResult.elem;
      });
   }

   public Object treeAggregate(final Object zeroValue, final Function2 seqOp, final Function2 combOp, final int depth, final ClassTag evidence$34) {
      return this.withScope(() -> this.treeAggregate(zeroValue, seqOp, combOp, depth, false, evidence$34));
   }

   public Object treeAggregate(final Object zeroValue, final Function2 seqOp, final Function2 combOp, final int depth, final boolean finalAggregateOnExecutor, final ClassTag evidence$35) {
      return this.withScope(() -> {
         scala.Predef..MODULE$.require(depth >= 1, () -> "Depth must be greater than or equal to 1 but got " + depth + ".");
         if (this.partitions().length == 0) {
            return Utils$.MODULE$.clone(zeroValue, this.context().env().closureSerializer().newInstance(), evidence$35);
         } else {
            SparkContext qual$1 = this.context();
            boolean x$2 = qual$1.clean$default$2();
            Function2 cleanSeqOp = (Function2)qual$1.clean(seqOp, x$2);
            SparkContext qual$2 = this.context();
            boolean x$4 = qual$2.clean$default$2();
            Function2 cleanCombOp = (Function2)qual$2.clean(combOp, x$4);
            Function1 aggregatePartition = (it) -> it.foldLeft(zeroValue, cleanSeqOp);
            RDD partiallyAggregated = this.mapPartitions((it) -> scala.package..MODULE$.Iterator().apply(scala.runtime.ScalaRunTime..MODULE$.genericWrapArray(new Object[]{aggregatePartition.apply(it)})), this.mapPartitions$default$2(), evidence$35);
            int numPartitions = partiallyAggregated.partitions().length;

            Function2 x$5;
            boolean x$6;
            RDD$ var10000;
            RDD$ var10001;
            for(int scale = scala.math.package..MODULE$.max((int)scala.math.package..MODULE$.ceil(scala.math.package..MODULE$.pow((double)numPartitions, (double)1.0F / (double)depth)), 2); (double)numPartitions > (double)scale + scala.math.package..MODULE$.ceil((double)numPartitions / (double)scale); partiallyAggregated = var10000.rddToPairRDDFunctions(var10001.rddToPairRDDFunctions(partiallyAggregated.mapPartitionsWithIndex(x$5, x$6, scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), scala.reflect.ClassTag..MODULE$.Int(), evidence$35, scala.math.Ordering.Int..MODULE$).foldByKey(zeroValue, new HashPartitioner(numPartitions), cleanCombOp), scala.reflect.ClassTag..MODULE$.Int(), evidence$35, scala.math.Ordering.Int..MODULE$).values()) {
               numPartitions /= scale;
               var10000 = RDD$.MODULE$;
               var10001 = RDD$.MODULE$;
               x$5 = (i, iter) -> $anonfun$treeAggregate$6(numPartitions, BoxesRunTime.unboxToInt(i), iter);
               x$6 = partiallyAggregated.mapPartitionsWithIndex$default$2();
            }

            if (finalAggregateOnExecutor && partiallyAggregated.partitions().length > 1) {
               partiallyAggregated = RDD$.MODULE$.rddToPairRDDFunctions(RDD$.MODULE$.rddToPairRDDFunctions(partiallyAggregated.map((v) -> new Tuple2(BoxesRunTime.boxToByte((byte)0), v), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), scala.reflect.ClassTag..MODULE$.Byte(), evidence$35, scala.math.Ordering.Byte..MODULE$).foldByKey(zeroValue, new ConstantPartitioner(), cleanCombOp), scala.reflect.ClassTag..MODULE$.Byte(), evidence$35, scala.math.Ordering.Byte..MODULE$).values();
            }

            Object copiedZeroValue = Utils$.MODULE$.clone(zeroValue, this.sc().env().closureSerializer().newInstance(), evidence$35);
            return partiallyAggregated.fold(copiedZeroValue, cleanCombOp);
         }
      });
   }

   public int treeAggregate$default$4(final Object zeroValue) {
      return 2;
   }

   public long count() {
      return BoxesRunTime.unboxToLong(scala.Predef..MODULE$.wrapLongArray((long[])this.sc().runJob(this, (Function1)((iterator) -> BoxesRunTime.boxToLong($anonfun$count$1(iterator))), scala.reflect.ClassTag..MODULE$.Long())).sum(scala.math.Numeric.LongIsIntegral..MODULE$));
   }

   public PartialResult countApprox(final long timeout, final double confidence) {
      return (PartialResult)this.withScope(() -> {
         scala.Predef..MODULE$.require((double)0.0F <= confidence && confidence <= (double)1.0F, () -> "confidence (" + confidence + ") must be in [0,1]");
         Function2 countElements = (x$42, iter) -> BoxesRunTime.boxToLong($anonfun$countApprox$3(x$42, iter));
         CountEvaluator evaluator = new CountEvaluator(this.partitions().length, confidence);
         return this.sc().runApproximateJob(this, countElements, evaluator, timeout);
      });
   }

   public double countApprox$default$2() {
      return 0.95;
   }

   public scala.collection.Map countByValue(final Ordering ord) {
      return (scala.collection.Map)this.withScope(() -> RDD$.MODULE$.rddToPairRDDFunctions(this.map((value) -> new Tuple2(value, (Object)null), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), this.evidence$1, scala.reflect.ClassTag..MODULE$.Null(), ord).countByKey());
   }

   public Ordering countByValue$default$1() {
      return null;
   }

   public PartialResult countByValueApprox(final long timeout, final double confidence, final Ordering ord) {
      return (PartialResult)this.withScope(() -> {
         scala.Predef..MODULE$.require((double)0.0F <= confidence && confidence <= (double)1.0F, () -> "confidence (" + confidence + ") must be in [0,1]");
         if (this.elementClassTag().runtimeClass().isArray()) {
            throw SparkCoreErrors$.MODULE$.countByValueApproxNotSupportArraysError();
         } else {
            Function2 countPartition = (x$43, iter) -> {
               OpenHashMap map = new OpenHashMap$mcJ$sp(this.evidence$1, scala.reflect.ClassTag..MODULE$.Long());
               iter.foreach((t) -> BoxesRunTime.boxToLong($anonfun$countByValueApprox$4(map, t)));
               return map;
            };
            GroupedCountEvaluator evaluator = new GroupedCountEvaluator(this.partitions().length, confidence, this.evidence$1);
            return this.sc().runApproximateJob(this, countPartition, evaluator, timeout);
         }
      });
   }

   public double countByValueApprox$default$2() {
      return 0.95;
   }

   public Ordering countByValueApprox$default$3(final long timeout, final double confidence) {
      return null;
   }

   public long countApproxDistinct(final int p, final int sp) {
      return BoxesRunTime.unboxToLong(this.withScope((JFunction0.mcJ.sp)() -> {
         scala.Predef..MODULE$.require(p >= 4, () -> "p (" + p + ") must be >= 4");
         scala.Predef..MODULE$.require(sp <= 32, () -> "sp (" + sp + ") must be <= 32");
         scala.Predef..MODULE$.require(sp == 0 || p <= sp, () -> "p (" + p + ") cannot be greater than sp (" + sp + ")");
         HyperLogLogPlus zeroCounter = new HyperLogLogPlus(p, sp);
         return ((HyperLogLogPlus)this.aggregate(zeroCounter, (hll, v) -> {
            hll.offer(v);
            return hll;
         }, (h1, h2) -> {
            h1.addAll(h2);
            return h1;
         }, scala.reflect.ClassTag..MODULE$.apply(HyperLogLogPlus.class))).cardinality();
      }));
   }

   public long countApproxDistinct(final double relativeSD) {
      return BoxesRunTime.unboxToLong(this.withScope((JFunction0.mcJ.sp)() -> {
         scala.Predef..MODULE$.require(relativeSD > 1.7E-5, () -> "accuracy (" + relativeSD + ") must be greater than 0.000017");
         int p = (int)scala.math.package..MODULE$.ceil((double)2.0F * scala.math.package..MODULE$.log(1.054 / relativeSD) / scala.math.package..MODULE$.log((double)2.0F));
         return this.countApproxDistinct(p < 4 ? 4 : p, 0);
      }));
   }

   public double countApproxDistinct$default$1() {
      return 0.05;
   }

   public RDD zipWithIndex() {
      return (RDD)this.withScope(() -> new ZippedWithIndexRDD(this, this.evidence$1));
   }

   public RDD zipWithUniqueId() {
      return (RDD)this.withScope(() -> {
         long n = (long)this.partitions().length;
         return this.mapPartitionsWithIndex((x0$1, x1$1) -> $anonfun$zipWithUniqueId$2(n, BoxesRunTime.unboxToInt(x0$1), x1$1), this.mapPartitionsWithIndex$default$2(), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class));
      });
   }

   public Object take(final int num) {
      return this.withScope(() -> {
         int scaleUpFactor = Math.max(BoxesRunTime.unboxToInt(this.conf().get(org.apache.spark.internal.config.package$.MODULE$.RDD_LIMIT_SCALE_UP_FACTOR())), 2);
         if (num == 0) {
            return this.evidence$1.newArray(0);
         } else {
            ArrayBuffer buf = new ArrayBuffer();
            int totalParts = this.partitions().length;

            Range p;
            for(int partsScanned = 0; buf.size() < num && partsScanned < totalParts; partsScanned += p.size()) {
               int numPartsToTry = BoxesRunTime.unboxToInt(this.conf().get(org.apache.spark.internal.config.package$.MODULE$.RDD_LIMIT_INITIAL_NUM_PARTITIONS()));
               int left = num - buf.size();
               if (partsScanned > 0) {
                  if (buf.isEmpty()) {
                     numPartsToTry = partsScanned * scaleUpFactor;
                  } else {
                     numPartsToTry = (int)Math.ceil((double)1.5F * (double)left * (double)partsScanned / (double)buf.size());
                     numPartsToTry = Math.min(numPartsToTry, partsScanned * scaleUpFactor);
                  }
               }

               p = scala.runtime.RichInt..MODULE$.until$extension(scala.Predef..MODULE$.intWrapper(partsScanned), scala.math.package..MODULE$.min(partsScanned + numPartsToTry, totalParts));
               Object[] res = this.sc().runJob(this, (Function1)((it) -> it.take(left).toArray(this.evidence$1)), (Seq)p, scala.reflect.ClassTag..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.arrayClass(this.evidence$1.runtimeClass())));
               scala.collection.ArrayOps..MODULE$.foreach$extension(scala.Predef..MODULE$.refArrayOps(res), (x$45) -> (ArrayBuffer)buf.$plus$plus$eq(scala.Predef..MODULE$.genericWrapArray(scala.collection.ArrayOps..MODULE$.take$extension(scala.Predef..MODULE$.genericArrayOps(x$45), num - buf.size()))));
            }

            return buf.toArray(this.evidence$1);
         }
      });
   }

   public long takeSample$default$3() {
      return Utils$.MODULE$.random().nextLong();
   }

   public Object first() {
      return this.withScope(() -> {
         Object var2 = this.take(1);
         if (var2 != null) {
            Object var3 = scala.Array..MODULE$.unapplySeq(var2);
            if (!scala.Array.UnapplySeqWrapper..MODULE$.isEmpty$extension(var3) && new Array.UnapplySeqWrapper(scala.Array.UnapplySeqWrapper..MODULE$.get$extension(var3)) != null && scala.Array.UnapplySeqWrapper..MODULE$.lengthCompare$extension(scala.Array.UnapplySeqWrapper..MODULE$.get$extension(var3), 1) == 0) {
               Object t = scala.Array.UnapplySeqWrapper..MODULE$.apply$extension(scala.Array.UnapplySeqWrapper..MODULE$.get$extension(var3), 0);
               return t;
            }
         }

         throw SparkCoreErrors$.MODULE$.emptyCollectionError();
      });
   }

   public Object top(final int num, final Ordering ord) {
      return this.withScope(() -> this.takeOrdered(num, ord.reverse()));
   }

   public Object takeOrdered(final int num, final Ordering ord) {
      return this.withScope(() -> num != 0 && this.getNumPartitions() != 0 ? this.mapPartitionsWithIndex((x0$1, x1$1) -> $anonfun$takeOrdered$2(this, num, ord, BoxesRunTime.unboxToInt(x0$1), x1$1), this.mapPartitionsWithIndex$default$2(), scala.reflect.ClassTag..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.arrayClass(this.evidence$1.runtimeClass()))).reduce((array1, array2) -> {
            int size = scala.math.package..MODULE$.min(num, scala.runtime.ScalaRunTime..MODULE$.array_length(array1) + scala.runtime.ScalaRunTime..MODULE$.array_length(array2));
            Object array = scala.Array..MODULE$.ofDim(size, this.evidence$1);
            org.apache.spark.util.collection.Utils$.MODULE$.mergeOrdered(new scala.collection.immutable..colon.colon(scala.Predef..MODULE$.genericWrapArray(array1), new scala.collection.immutable..colon.colon(scala.Predef..MODULE$.genericWrapArray(array2), .MODULE$)), ord).copyToArray(array, 0, size);
            return array;
         }) : scala.Array..MODULE$.empty(this.evidence$1));
   }

   public Object max(final Ordering ord) {
      return this.withScope(() -> this.reduce((x, y) -> ord.max(x, y)));
   }

   public Object min(final Ordering ord) {
      return this.withScope(() -> this.reduce((x, y) -> ord.min(x, y)));
   }

   public boolean isEmpty() {
      return BoxesRunTime.unboxToBoolean(this.withScope((JFunction0.mcZ.sp)() -> this.partitions().length == 0 || scala.runtime.ScalaRunTime..MODULE$.array_length(this.take(1)) == 0));
   }

   public void saveAsTextFile(final String path) {
      this.withScope((JFunction0.mcV.sp)() -> this.saveAsTextFile(path, (Class)null));
   }

   public void saveAsTextFile(final String path, final Class codec) {
      this.withScope((JFunction0.mcV.sp)() -> RDD$.MODULE$.rddToPairRDDFunctions(this.mapPartitions((iter) -> {
            Text text = new Text();
            return iter.map((x) -> {
               scala.Predef..MODULE$.require(x != null, () -> "text files do not allow null rows");
               text.set(x.toString());
               return new Tuple2(NullWritable.get(), text);
            });
         }, this.mapPartitions$default$2(), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), scala.reflect.ClassTag..MODULE$.apply(NullWritable.class), scala.reflect.ClassTag..MODULE$.apply(Text.class), scala.math.Ordering..MODULE$.ordered(scala.Predef..MODULE$.$conforms())).saveAsHadoopFile(path, codec, scala.reflect.ClassTag..MODULE$.apply(TextOutputFormat.class)));
   }

   public void saveAsObjectFile(final String path) {
      this.withScope((JFunction0.mcV.sp)() -> {
         SequenceFileRDDFunctions qual$1 = RDD$.MODULE$.rddToSequenceFileRDDFunctions(this.mapPartitions((iter) -> iter.grouped(10).map((x$46) -> x$46.toArray(this.evidence$1)), this.mapPartitions$default$2(), scala.reflect.ClassTag..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.arrayClass(this.evidence$1.runtimeClass()))).map((x) -> new Tuple2(NullWritable.get(), new BytesWritable(Utils$.MODULE$.serialize(x))), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class)), scala.reflect.ClassTag..MODULE$.apply(NullWritable.class), scala.reflect.ClassTag..MODULE$.apply(BytesWritable.class), WritableFactory$.MODULE$.writableWritableFactory(scala.reflect.ClassTag..MODULE$.apply(NullWritable.class)), WritableFactory$.MODULE$.writableWritableFactory(scala.reflect.ClassTag..MODULE$.apply(BytesWritable.class)));
         Option x$2 = qual$1.saveAsSequenceFile$default$2();
         qual$1.saveAsSequenceFile(path, x$2);
      });
   }

   public RDD keyBy(final Function1 f) {
      return (RDD)this.withScope(() -> {
         SparkContext qual$1 = this.sc();
         boolean x$2 = qual$1.clean$default$2();
         Function1 cleanedF = (Function1)qual$1.clean(f, x$2);
         return this.map((x) -> new Tuple2(cleanedF.apply(x), x), scala.reflect.ClassTag..MODULE$.apply(Tuple2.class));
      });
   }

   public Object[] collectPartitions() {
      return this.withScope(() -> this.sc().runJob(this, (Function1)((iter) -> iter.toArray(this.evidence$1)), scala.reflect.ClassTag..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.arrayClass(this.evidence$1.runtimeClass()))));
   }

   public void checkpoint() {
      synchronized(RDDCheckpointData$.MODULE$){}

      try {
         if (this.context().checkpointDir().isEmpty()) {
            throw SparkCoreErrors$.MODULE$.checkpointDirectoryHasNotBeenSetInSparkContextError();
         }

         if (this.checkpointData().isEmpty()) {
            this.checkpointData_$eq(new Some(new ReliableRDDCheckpointData(this, this.evidence$1)));
         }
      } catch (Throwable var3) {
         throw var3;
      }

   }

   public RDD localCheckpoint() {
      synchronized(RDDCheckpointData$.MODULE$){}

      RDD var3;
      try {
         if (Utils$.MODULE$.isDynamicAllocationEnabled(this.conf()) && this.conf().contains(org.apache.spark.internal.config.package$.MODULE$.DYN_ALLOCATION_CACHED_EXECUTOR_IDLE_TIMEOUT())) {
            this.logWarning((Function0)(() -> "Local checkpointing is NOT safe to use with dynamic allocation, which removes executors along with their cached blocks. If you must use both features, you are advised to set `spark.dynamicAllocation.cachedExecutorIdleTimeout` to a high value. E.g. If you plan to use the RDD for 1 hour, set the timeout to at least 1 hour."));
         }

         label86: {
            label85: {
               StorageLevel var10000 = this.storageLevel();
               StorageLevel var4 = org.apache.spark.storage.StorageLevel..MODULE$.NONE();
               if (var10000 == null) {
                  if (var4 == null) {
                     break label85;
                  }
               } else if (var10000.equals(var4)) {
                  break label85;
               }

               this.persist(LocalRDDCheckpointData$.MODULE$.transformStorageLevel(this.storageLevel()), true);
               break label86;
            }

            this.persist(LocalRDDCheckpointData$.MODULE$.DEFAULT_STORAGE_LEVEL());
         }

         if (this.isCheckpointedAndMaterialized()) {
            this.logWarning((Function0)(() -> "Not marking RDD for local checkpoint because it was already checkpointed and materialized"));
         } else {
            label94: {
               Option var5 = this.checkpointData();
               if (var5 instanceof Some) {
                  Some var6 = (Some)var5;
                  if (var6.value() instanceof ReliableRDDCheckpointData) {
                     this.logWarning((Function0)(() -> "RDD was already marked for reliable checkpointing: overriding with local checkpoint."));
                     BoxedUnit var10 = BoxedUnit.UNIT;
                     break label94;
                  }
               }

               BoxedUnit var9 = BoxedUnit.UNIT;
            }

            this.checkpointData_$eq(new Some(new LocalRDDCheckpointData(this, this.evidence$1)));
         }

         var3 = this;
      } catch (Throwable var8) {
         throw var8;
      }

      return var3;
   }

   public boolean isCheckpointed() {
      return this.isCheckpointedAndMaterialized();
   }

   public boolean isCheckpointedAndMaterialized() {
      return this.checkpointData().exists((x$47) -> BoxesRunTime.boxToBoolean($anonfun$isCheckpointedAndMaterialized$1(x$47)));
   }

   public boolean isLocallyCheckpointed() {
      Option var2 = this.checkpointData();
      if (var2 instanceof Some var3) {
         if (var3.value() instanceof LocalRDDCheckpointData) {
            return true;
         }
      }

      return false;
   }

   public boolean isReliablyCheckpointed() {
      Option var2 = this.checkpointData();
      if (var2 instanceof Some var3) {
         RDDCheckpointData reliable = (RDDCheckpointData)var3.value();
         if (reliable instanceof ReliableRDDCheckpointData var5) {
            if (var5.isCheckpointed()) {
               return true;
            }
         }
      }

      return false;
   }

   public Option getCheckpointFile() {
      Option var2 = this.checkpointData();
      if (var2 instanceof Some var3) {
         RDDCheckpointData reliable = (RDDCheckpointData)var3.value();
         if (reliable instanceof ReliableRDDCheckpointData var5) {
            return var5.getCheckpointDir();
         }
      }

      return scala.None..MODULE$;
   }

   @DeveloperApi
   public void cleanShuffleDependencies(final boolean blocking) {
      this.sc().cleaner().foreach((cleaner) -> {
         $anonfun$cleanShuffleDependencies$1(this, blocking, cleaner);
         return BoxedUnit.UNIT;
      });
   }

   public boolean cleanShuffleDependencies$default$1() {
      return false;
   }

   @Experimental
   public RDDBarrier barrier() {
      return (RDDBarrier)this.withScope(() -> new RDDBarrier(this, this.evidence$1));
   }

   @Experimental
   public RDD withResources(final ResourceProfile rp) {
      this.resourceProfile_$eq(scala.Option..MODULE$.apply(rp));
      this.sc().resourceProfileManager().addResourceProfile((ResourceProfile)this.resourceProfile().get());
      return this;
   }

   @Experimental
   public ResourceProfile getResourceProfile() {
      return (ResourceProfile)this.resourceProfile().orNull(scala..less.colon.less..MODULE$.refl());
   }

   private StorageLevel storageLevel() {
      return this.storageLevel;
   }

   private void storageLevel_$eq(final StorageLevel x$1) {
      this.storageLevel = x$1;
   }

   private Option resourceProfile() {
      return this.resourceProfile;
   }

   private void resourceProfile_$eq(final Option x$1) {
      this.resourceProfile = x$1;
   }

   public CallSite creationSite() {
      return this.creationSite;
   }

   public Option scope() {
      return this.scope;
   }

   public String getCreationSite() {
      return (String)scala.Option..MODULE$.apply(this.creationSite()).map((x$48) -> x$48.shortForm()).getOrElse(() -> "");
   }

   public ClassTag elementClassTag() {
      return scala.reflect.package..MODULE$.classTag(this.evidence$1);
   }

   public Option checkpointData() {
      return this.checkpointData;
   }

   public void checkpointData_$eq(final Option x$1) {
      this.checkpointData = x$1;
   }

   private boolean checkpointAllMarkedAncestors() {
      return this.checkpointAllMarkedAncestors;
   }

   public RDD firstParent(final ClassTag evidence$36) {
      return ((Dependency)this.dependencies().head()).rdd();
   }

   public RDD parent(final int j, final ClassTag evidence$37) {
      return ((Dependency)this.dependencies().apply(j)).rdd();
   }

   public SparkContext context() {
      return this.sc();
   }

   public RDD retag(final Class cls) {
      ClassTag classTag = scala.reflect.ClassTag..MODULE$.apply(cls);
      return this.retag(classTag);
   }

   public RDD retag(final ClassTag classTag) {
      return this.mapPartitions((x) -> (Iterator)scala.Predef..MODULE$.identity(x), true, classTag);
   }

   private boolean doCheckpointCalled() {
      return this.doCheckpointCalled;
   }

   private void doCheckpointCalled_$eq(final boolean x$1) {
      this.doCheckpointCalled = x$1;
   }

   public void doCheckpoint() {
      RDDOperationScope$.MODULE$.withScope(this.sc(), "checkpoint", false, true, (JFunction0.mcV.sp)() -> {
         if (!this.doCheckpointCalled()) {
            this.doCheckpointCalled_$eq(true);
            if (this.checkpointData().isDefined()) {
               if (this.checkpointAllMarkedAncestors()) {
                  this.dependencies().foreach((x$50) -> {
                     $anonfun$doCheckpoint$2(x$50);
                     return BoxedUnit.UNIT;
                  });
               }

               ((RDDCheckpointData)this.checkpointData().get()).checkpoint();
            } else {
               this.dependencies().foreach((x$51) -> {
                  $anonfun$doCheckpoint$3(x$51);
                  return BoxedUnit.UNIT;
               });
            }
         }
      });
   }

   public void markCheckpointed() {
      synchronized(this.stateLock()){}

      try {
         this.legacyDependencies_$eq(new WeakReference(this.dependencies_()));
         this.clearDependencies();
         this.partitions__$eq((Partition[])null);
         this.deps_$eq((Seq)null);
      } catch (Throwable var3) {
         throw var3;
      }

   }

   public void clearDependencies() {
      synchronized(this.stateLock()){}

      try {
         this.dependencies__$eq((Seq)null);
      } catch (Throwable var3) {
         throw var3;
      }

   }

   public String toDebugString() {
      return this.firstDebugString$1(this).mkString("\n");
   }

   public String toString() {
      return scala.collection.StringOps..MODULE$.format$extension(scala.Predef..MODULE$.augmentString("%s%s[%d] at %s"), scala.runtime.ScalaRunTime..MODULE$.genericWrapArray(new Object[]{scala.Option..MODULE$.apply(this.name()).map((x$54) -> x$54 + " ").getOrElse(() -> ""), this.getClass().getSimpleName(), BoxesRunTime.boxToInteger(this.id()), this.getCreationSite()}));
   }

   public JavaRDD toJavaRDD() {
      return new JavaRDD(this, this.elementClassTag());
   }

   public boolean isBarrier() {
      return this.isBarrier_();
   }

   private boolean isBarrier_$lzycompute() {
      synchronized(this){}

      try {
         if (!this.bitmap$trans$0) {
            this.isBarrier_ = ((IterableOnceOps)this.dependencies().filter((x$55) -> BoxesRunTime.boxToBoolean($anonfun$isBarrier_$1(x$55)))).exists((x$56) -> BoxesRunTime.boxToBoolean($anonfun$isBarrier_$2(x$56)));
            this.bitmap$trans$0 = true;
         }
      } catch (Throwable var3) {
         throw var3;
      }

      return this.isBarrier_;
   }

   public boolean isBarrier_() {
      return !this.bitmap$trans$0 ? this.isBarrier_$lzycompute() : this.isBarrier_;
   }

   private Enumeration.Value _outputDeterministicLevel$lzycompute() {
      synchronized(this){}

      try {
         if (!this.bitmap$0) {
            this._outputDeterministicLevel = this.getOutputDeterministicLevel();
            this.bitmap$0 = true;
         }
      } catch (Throwable var3) {
         throw var3;
      }

      return this._outputDeterministicLevel;
   }

   private final Enumeration.Value _outputDeterministicLevel() {
      return !this.bitmap$0 ? this._outputDeterministicLevel$lzycompute() : this._outputDeterministicLevel;
   }

   public final Enumeration.Value outputDeterministicLevel() {
      return this.isReliablyCheckpointed() ? DeterministicLevel$.MODULE$.DETERMINATE() : this._outputDeterministicLevel();
   }

   @DeveloperApi
   public Enumeration.Value getOutputDeterministicLevel() {
      Seq deterministicLevelCandidates = (Seq)this.dependencies().map((x0$1) -> {
         boolean var2 = false;
         ShuffleDependency var3 = null;
         if (x0$1 instanceof ShuffleDependency) {
            var2 = true;
            var3 = (ShuffleDependency)x0$1;
            if (var3.rdd().partitioner().exists((x$57) -> BoxesRunTime.boxToBoolean($anonfun$getOutputDeterministicLevel$2(var3, x$57)))) {
               return var3.rdd().outputDeterministicLevel();
            }
         }

         if (!var2) {
            return x0$1.rdd().outputDeterministicLevel();
         } else {
            Enumeration.Value var10000 = var3.rdd().outputDeterministicLevel();
            Enumeration.Value var5 = DeterministicLevel$.MODULE$.INDETERMINATE();
            if (var10000 == null) {
               if (var5 == null) {
                  return DeterministicLevel$.MODULE$.INDETERMINATE();
               }
            } else if (var10000.equals(var5)) {
               return DeterministicLevel$.MODULE$.INDETERMINATE();
            }

            if (var3.keyOrdering().isDefined() && var3.aggregator().isDefined()) {
               return DeterministicLevel$.MODULE$.DETERMINATE();
            } else {
               return DeterministicLevel$.MODULE$.UNORDERED();
            }
         }
      });
      return deterministicLevelCandidates.isEmpty() ? DeterministicLevel$.MODULE$.DETERMINATE() : (Enumeration.Value)deterministicLevelCandidates.maxBy((x$58) -> BoxesRunTime.boxToInteger($anonfun$getOutputDeterministicLevel$3(x$58)), scala.math.Ordering.Int..MODULE$);
   }

   // $FF: synthetic method
   public static final void $anonfun$persist$1(final RDD $this, final ContextCleaner x$2) {
      x$2.registerRDDForCleanup($this);
   }

   // $FF: synthetic method
   public static final void $anonfun$partitions$3(final Tuple2 x0$1) {
      if (x0$1 != null) {
         Partition partition = (Partition)x0$1._1();
         int index = x0$1._2$mcI$sp();
         scala.Predef..MODULE$.require(partition.index() == index, () -> "partitions(" + index + ").partition == " + partition.index() + ", but it should equal " + index);
         BoxedUnit var10000 = BoxedUnit.UNIT;
      } else {
         throw new MatchError(x0$1);
      }
   }

   // $FF: synthetic method
   public static final boolean $anonfun$getNarrowAncestors$1(final Dependency x$9) {
      return x$9 instanceof NarrowDependency;
   }

   // $FF: synthetic method
   public static final boolean $anonfun$getNarrowAncestors$3(final HashSet ancestors$1, final RDD elem) {
      return ancestors$1.contains(elem);
   }

   // $FF: synthetic method
   public static final void $anonfun$getNarrowAncestors$4(final HashSet ancestors$1, final RDD parent) {
      ancestors$1.add(parent);
      visit$1(parent, ancestors$1);
   }

   private static final void visit$1(final RDD rdd, final HashSet ancestors$1) {
      Seq narrowDependencies = (Seq)rdd.dependencies().filter((x$9) -> BoxesRunTime.boxToBoolean($anonfun$getNarrowAncestors$1(x$9)));
      Seq narrowParents = (Seq)narrowDependencies.map((x$10) -> x$10.rdd());
      Seq narrowParentsNotVisited = (Seq)narrowParents.filterNot((elem) -> BoxesRunTime.boxToBoolean($anonfun$getNarrowAncestors$3(ancestors$1, elem)));
      narrowParentsNotVisited.foreach((parent) -> {
         $anonfun$getNarrowAncestors$4(ancestors$1, parent);
         return BoxedUnit.UNIT;
      });
   }

   // $FF: synthetic method
   public static final boolean $anonfun$getNarrowAncestors$5(final RDD $this, final RDD x$11) {
      boolean var10000;
      label23: {
         if (x$11 == null) {
            if ($this == null) {
               break label23;
            }
         } else if (x$11.equals($this)) {
            break label23;
         }

         var10000 = false;
         return var10000;
      }

      var10000 = true;
      return var10000;
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$map$2(final Function1 cleanF$1, final TaskContext x$12, final int x$13, final Iterator iter) {
      return iter.map(cleanF$1);
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$flatMap$2(final Function1 cleanF$2, final TaskContext x$14, final int x$15, final Iterator iter) {
      return iter.flatMap(cleanF$2);
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$filter$2(final Function1 cleanF$3, final TaskContext x$16, final int x$17, final Iterator iter) {
      return iter.filter(cleanF$3);
   }

   private static final Iterator removeDuplicatesInPartition$1(final Iterator partition) {
      ExternalAppendOnlyMap map = new ExternalAppendOnlyMap((x$18) -> null, (a, b) -> a, (a, b) -> a, ExternalAppendOnlyMap$.MODULE$.$lessinit$greater$default$4(), ExternalAppendOnlyMap$.MODULE$.$lessinit$greater$default$5(), ExternalAppendOnlyMap$.MODULE$.$lessinit$greater$default$6(), ExternalAppendOnlyMap$.MODULE$.$lessinit$greater$default$7());
      map.insertAll(partition.map((x$19) -> scala.Predef.ArrowAssoc..MODULE$.$minus$greater$extension(scala.Predef..MODULE$.ArrowAssoc(x$19), (Object)null)));
      return map.iterator().map((x$20) -> x$20._1());
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$coalesce$3(final int numPartitions$3, final int index, final Iterator items) {
      IntRef position = IntRef.create((new XORShiftRandom((long)index)).nextInt(numPartitions$3));
      return items.map((t) -> {
         ++position.elem;
         return new Tuple2(BoxesRunTime.boxToInteger(position.elem), t);
      });
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$randomSampleWithRange$1(final double lb$1, final double ub$1, final long seed$3, final int index, final Iterator partition) {
      BernoulliCellSampler sampler = new BernoulliCellSampler(lb$1, ub$1, BernoulliCellSampler$.MODULE$.$lessinit$greater$default$3());
      sampler.setSeed(seed$3 + (long)index);
      return sampler.sample(partition);
   }

   // $FF: synthetic method
   public static final boolean $anonfun$intersection$4(final Tuple2 x0$1) {
      if (x0$1 != null) {
         Tuple2 var3 = (Tuple2)x0$1._2();
         if (var3 != null) {
            Iterable leftGroup = (Iterable)var3._1();
            Iterable rightGroup = (Iterable)var3._2();
            return leftGroup.nonEmpty() && rightGroup.nonEmpty();
         }
      }

      throw new MatchError(x0$1);
   }

   // $FF: synthetic method
   public static final boolean $anonfun$intersection$8(final Tuple2 x0$1) {
      if (x0$1 != null) {
         Tuple2 var3 = (Tuple2)x0$1._2();
         if (var3 != null) {
            Iterable leftGroup = (Iterable)var3._1();
            Iterable rightGroup = (Iterable)var3._2();
            return leftGroup.nonEmpty() && rightGroup.nonEmpty();
         }
      }

      throw new MatchError(x0$1);
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$glom$2(final RDD $this, final TaskContext x$27, final int x$28, final Iterator iter) {
      return scala.package..MODULE$.Iterator().apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray(new Object[]{iter.toArray($this.evidence$1)}));
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$mapPartitions$2(final Function1 cleanedF$1, final TaskContext x$29, final int x$30, final Iterator iter) {
      return (Iterator)cleanedF$1.apply(iter);
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$mapPartitionsWithIndexInternal$2(final Function2 f$9, final TaskContext x$31, final int index, final Iterator iter) {
      return (Iterator)f$9.apply(BoxesRunTime.boxToInteger(index), iter);
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$mapPartitionsInternal$2(final Function1 f$10, final TaskContext x$32, final int x$33, final Iterator iter) {
      return (Iterator)f$10.apply(iter);
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$mapPartitionsWithIndex$2(final Function2 cleanedF$2, final TaskContext x$34, final int index, final Iterator iter) {
      return (Iterator)cleanedF$2.apply(BoxesRunTime.boxToInteger(index), iter);
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$mapPartitionsWithIndex$4(final Function2 cleanedF$3, final TaskContext x$35, final int index, final Iterator iter) {
      return (Iterator)cleanedF$3.apply(BoxesRunTime.boxToInteger(index), iter);
   }

   // $FF: synthetic method
   public static final void $anonfun$foreach$2(final Function1 cleanF$5, final Iterator iter) {
      iter.foreach(cleanF$5);
   }

   // $FF: synthetic method
   public static final void $anonfun$foreachPartition$2(final Function1 cleanF$6, final Iterator iter) {
      cleanF$6.apply(iter);
   }

   private final Object collectPartition$1(final int p) {
      return scala.collection.ArrayOps..MODULE$.head$extension(scala.Predef..MODULE$.refArrayOps(this.sc().runJob(this, (Function1)((iter) -> iter.toArray(this.evidence$1)), (Seq)((Seq)scala.package..MODULE$.Seq().apply(scala.runtime.ScalaRunTime..MODULE$.wrapIntArray(new int[]{p}))), scala.reflect.ClassTag..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.arrayClass(this.evidence$1.runtimeClass())))));
   }

   // $FF: synthetic method
   public static final ArraySeq $anonfun$toLocalIterator$3(final RDD $this, final int i) {
      return scala.Predef..MODULE$.genericWrapArray($this.collectPartition$1(i));
   }

   // $FF: synthetic method
   public static final boolean $anonfun$collect$4(final PartialFunction cleanF$7, final Object x) {
      return cleanF$7.isDefinedAt(x);
   }

   // $FF: synthetic method
   public static final void $anonfun$reduce$3(final ObjectRef jobResult$1, final Function2 f$22, final int x$38, final Option taskResult) {
      if (taskResult.isDefined()) {
         Option var5 = (Option)jobResult$1.elem;
         Object var10001;
         if (var5 instanceof Some) {
            Some var6 = (Some)var5;
            Object value = var6.value();
            var10001 = new Some(f$22.apply(value, taskResult.get()));
         } else {
            if (!scala.None..MODULE$.equals(var5)) {
               throw new MatchError(var5);
            }

            var10001 = taskResult;
         }

         jobResult$1.elem = var10001;
      }
   }

   // $FF: synthetic method
   public static final void $anonfun$fold$3(final ObjectRef jobResult$2, final Function2 op$1, final int x$39, final Object taskResult) {
      jobResult$2.elem = op$1.apply(jobResult$2.elem, taskResult);
   }

   // $FF: synthetic method
   public static final void $anonfun$aggregate$3(final ObjectRef jobResult$3, final Function2 combOp$1, final int x$40, final Object taskResult) {
      jobResult$3.elem = combOp$1.apply(jobResult$3.elem, taskResult);
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$treeAggregate$6(final int curNumPartitions$1, final int i, final Iterator iter) {
      return iter.map((x$41) -> new Tuple2(BoxesRunTime.boxToInteger(i % curNumPartitions$1), x$41));
   }

   // $FF: synthetic method
   public static final long $anonfun$count$1(final Iterator iterator) {
      return Utils$.MODULE$.getIteratorSize(iterator);
   }

   // $FF: synthetic method
   public static final long $anonfun$countApprox$3(final TaskContext x$42, final Iterator iter) {
      long result = 0L;

      while(iter.hasNext()) {
         ++result;
         iter.next();
      }

      return result;
   }

   // $FF: synthetic method
   public static final long $anonfun$countByValueApprox$4(final OpenHashMap map$1, final Object t) {
      return map$1.changeValue$mcJ$sp(t, (JFunction0.mcJ.sp)() -> 1L, (JFunction1.mcJJ.sp)(x$44) -> x$44 + 1L);
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$zipWithUniqueId$2(final long n$1, final int x0$1, final Iterator x1$1) {
      Tuple2 var5 = new Tuple2(BoxesRunTime.boxToInteger(x0$1), x1$1);
      if (var5 != null) {
         int k = var5._1$mcI$sp();
         Iterator iter = (Iterator)var5._2();
         return Utils$.MODULE$.getIteratorZipWithIndex(iter, 0L).map((x0$2) -> {
            if (x0$2 != null) {
               Object item = x0$2._1();
               long i = x0$2._2$mcJ$sp();
               return new Tuple2(item, BoxesRunTime.boxToLong(i * n$1 + (long)k));
            } else {
               throw new MatchError(x0$2);
            }
         });
      } else {
         throw new MatchError(var5);
      }
   }

   // $FF: synthetic method
   public static final Iterator $anonfun$takeOrdered$2(final RDD $this, final int num$4, final Ordering ord$9, final int x0$1, final Iterator x1$1) {
      Tuple2 var6 = new Tuple2(BoxesRunTime.boxToInteger(x0$1), x1$1);
      if (var6 != null) {
         int pid = var6._1$mcI$sp();
         Iterator iter = (Iterator)var6._2();
         if (iter.nonEmpty()) {
            return scala.package..MODULE$.Iterator().single(org.apache.spark.util.collection.Utils$.MODULE$.takeOrdered(iter, num$4, ord$9).toArray($this.evidence$1));
         } else {
            return pid == 0 ? scala.package..MODULE$.Iterator().single(scala.Array..MODULE$.empty($this.evidence$1)) : scala.package..MODULE$.Iterator().empty();
         }
      } else {
         throw new MatchError(var6);
      }
   }

   // $FF: synthetic method
   public static final boolean $anonfun$isCheckpointedAndMaterialized$1(final RDDCheckpointData x$47) {
      return x$47.isCheckpointed();
   }

   // $FF: synthetic method
   public static final void $anonfun$cleanShuffleDependencies$3(final ContextCleaner cleaner$1, final boolean blocking$1, final Dependency dep) {
      cleanEagerly$1(dep, cleaner$1, blocking$1);
   }

   // $FF: synthetic method
   public static final void $anonfun$cleanShuffleDependencies$2(final ContextCleaner cleaner$1, final boolean blocking$1, final Seq deps) {
      deps.foreach((dep) -> {
         $anonfun$cleanShuffleDependencies$3(cleaner$1, blocking$1, dep);
         return BoxedUnit.UNIT;
      });
   }

   private static final void cleanEagerly$1(final Dependency dep, final ContextCleaner cleaner$1, final boolean blocking$1) {
      if (dep instanceof ShuffleDependency var5) {
         int shuffleId = var5.shuffleId();
         cleaner$1.doCleanupShuffle(shuffleId, blocking$1);
         BoxedUnit var10000 = BoxedUnit.UNIT;
      } else {
         BoxedUnit var10 = BoxedUnit.UNIT;
      }

      Option rddDepsOpt;
      label20: {
         RDD rdd = dep.rdd();
         rddDepsOpt = rdd.internalDependencies();
         StorageLevel var11 = rdd.getStorageLevel();
         StorageLevel var9 = org.apache.spark.storage.StorageLevel..MODULE$.NONE();
         if (var11 == null) {
            if (var9 == null) {
               break label20;
            }
         } else if (var11.equals(var9)) {
            break label20;
         }

         return;
      }

      rddDepsOpt.foreach((deps) -> {
         $anonfun$cleanShuffleDependencies$2(cleaner$1, blocking$1, deps);
         return BoxedUnit.UNIT;
      });
   }

   // $FF: synthetic method
   public static final void $anonfun$cleanShuffleDependencies$5(final ContextCleaner cleaner$1, final boolean blocking$1, final Dependency dep) {
      cleanEagerly$1(dep, cleaner$1, blocking$1);
   }

   // $FF: synthetic method
   public static final void $anonfun$cleanShuffleDependencies$4(final ContextCleaner cleaner$1, final boolean blocking$1, final Seq deps) {
      deps.foreach((dep) -> {
         $anonfun$cleanShuffleDependencies$5(cleaner$1, blocking$1, dep);
         return BoxedUnit.UNIT;
      });
   }

   // $FF: synthetic method
   public static final void $anonfun$cleanShuffleDependencies$1(final RDD $this, final boolean blocking$1, final ContextCleaner cleaner) {
      $this.internalDependencies().foreach((deps) -> {
         $anonfun$cleanShuffleDependencies$4(cleaner, blocking$1, deps);
         return BoxedUnit.UNIT;
      });
   }

   // $FF: synthetic method
   public static final boolean $anonfun$checkpointAllMarkedAncestors$1(final String x$49) {
      return scala.collection.StringOps..MODULE$.toBoolean$extension(scala.Predef..MODULE$.augmentString(x$49));
   }

   // $FF: synthetic method
   public static final void $anonfun$doCheckpoint$2(final Dependency x$50) {
      x$50.rdd().doCheckpoint();
   }

   // $FF: synthetic method
   public static final void $anonfun$doCheckpoint$3(final Dependency x$51) {
      x$51.rdd().doCheckpoint();
   }

   // $FF: synthetic method
   public static final boolean $anonfun$toDebugString$1(final RDD rdd$1, final RDD x$52) {
      return x$52.id() == rdd$1.id();
   }

   private final Seq debugSelf$1(final RDD rdd) {
      String var6;
      label17: {
         label16: {
            StorageLevel var10000 = this.storageLevel();
            StorageLevel var3 = org.apache.spark.storage.StorageLevel..MODULE$.NONE();
            if (var10000 == null) {
               if (var3 != null) {
                  break label16;
               }
            } else if (!var10000.equals(var3)) {
               break label16;
            }

            var6 = "";
            break label17;
         }

         var6 = this.storageLevel().description();
      }

      String persistence = var6;
      String[] storageInfo = (String[])scala.collection.ArrayOps..MODULE$.map$extension(scala.Predef..MODULE$.refArrayOps(rdd.context().getRDDStorageInfo((x$52) -> BoxesRunTime.boxToBoolean($anonfun$toDebugString$1(rdd, x$52)))), (info) -> scala.collection.StringOps..MODULE$.format$extension(scala.Predef..MODULE$.augmentString("    CachedPartitions: %d; MemorySize: %s; DiskSize: %s"), scala.runtime.ScalaRunTime..MODULE$.genericWrapArray(new Object[]{BoxesRunTime.boxToInteger(info.numCachedPartitions()), Utils$.MODULE$.bytesToString(info.memSize()), Utils$.MODULE$.bytesToString(info.diskSize())})), scala.reflect.ClassTag..MODULE$.apply(String.class));
      ArrayImplicits var7 = org.apache.spark.util.ArrayImplicits..MODULE$;
      String var5 = rdd + " [" + persistence + "]";
      return var7.SparkArrayOps(scala.collection.ArrayOps..MODULE$.$plus$colon$extension(scala.Predef..MODULE$.refArrayOps((Object[])storageInfo), var5, scala.reflect.ClassTag..MODULE$.apply(String.class))).toImmutableArraySeq();
   }

   private final Seq debugChildren$1(final RDD rdd, final String prefix) {
      int len = rdd.dependencies().length();
      switch (len) {
         case 0:
            return (Seq)scala.package..MODULE$.Seq().empty();
         case 1:
            Dependency d = (Dependency)rdd.dependencies().head();
            return this.debugString$1(d.rdd(), prefix, d instanceof ShuffleDependency, true);
         default:
            Seq frontDeps = (Seq)rdd.dependencies().take(len - 1);
            Seq frontDepStrings = (Seq)frontDeps.flatMap((dx) -> this.debugString$1(dx.rdd(), prefix, dx instanceof ShuffleDependency, debugString$default$4$1()));
            Dependency lastDep = (Dependency)rdd.dependencies().last();
            Seq lastDepStrings = this.debugString$1(lastDep.rdd(), prefix, lastDep instanceof ShuffleDependency, true);
            return (Seq)frontDepStrings.$plus$plus(lastDepStrings);
      }
   }

   private final Seq firstDebugString$1(final RDD rdd) {
      String partitionStr = "(" + rdd.partitions().length + ")";
      int leftOffset = (partitionStr.length() - 1) / 2;
      String var10000 = scala.collection.StringOps..MODULE$.$times$extension(scala.Predef..MODULE$.augmentString(" "), leftOffset);
      String nextPrefix = var10000 + "|" + scala.collection.StringOps..MODULE$.$times$extension(scala.Predef..MODULE$.augmentString(" "), partitionStr.length() - leftOffset);
      return (Seq)((IterableOps)((IterableOps)this.debugSelf$1(rdd).zipWithIndex()).map((x0$1) -> {
         if (x0$1 != null) {
            String desc = (String)x0$1._1();
            int var6 = x0$1._2$mcI$sp();
            if (desc != null && 0 == var6) {
               return partitionStr + " " + desc;
            }
         }

         if (x0$1 != null) {
            String desc = (String)x0$1._1();
            if (desc != null) {
               return nextPrefix + " " + desc;
            }
         }

         throw new MatchError(x0$1);
      })).$plus$plus(this.debugChildren$1(rdd, nextPrefix));
   }

   private final Seq shuffleDebugString$1(final RDD rdd, final String prefix, final boolean isLastChild) {
      int var10000 = rdd.partitions().length;
      String partitionStr = "(" + var10000 + ")";
      int leftOffset = (partitionStr.length() - 1) / 2;
      String thisPrefix = prefix.replaceAll("\\|\\s+$", "");
      String nextPrefix = thisPrefix + (isLastChild ? "  " : "| ") + scala.collection.StringOps..MODULE$.$times$extension(scala.Predef..MODULE$.augmentString(" "), leftOffset) + "|" + scala.collection.StringOps..MODULE$.$times$extension(scala.Predef..MODULE$.augmentString(" "), partitionStr.length() - leftOffset);
      return (Seq)((IterableOps)((IterableOps)this.debugSelf$1(rdd).zipWithIndex()).map((x0$1) -> {
         if (x0$1 != null) {
            String desc = (String)x0$1._1();
            int var7 = x0$1._2$mcI$sp();
            if (desc != null && 0 == var7) {
               return thisPrefix + "+-" + partitionStr + " " + desc;
            }
         }

         if (x0$1 != null) {
            String desc = (String)x0$1._1();
            if (desc != null) {
               return nextPrefix + desc;
            }
         }

         throw new MatchError(x0$1);
      })).$plus$plus(this.debugChildren$1(rdd, nextPrefix));
   }

   private static final String shuffleDebugString$default$2$1() {
      return "";
   }

   private final Seq debugString$1(final RDD rdd, final String prefix, final boolean isShuffle, final boolean isLastChild) {
      return isShuffle ? this.shuffleDebugString$1(rdd, prefix, isLastChild) : (Seq)((IterableOps)this.debugSelf$1(rdd).map((x$53) -> prefix + x$53)).$plus$plus(this.debugChildren$1(rdd, prefix));
   }

   private static final String debugString$default$2$1() {
      return "";
   }

   private static final boolean debugString$default$3$1() {
      return true;
   }

   private static final boolean debugString$default$4$1() {
      return false;
   }

   // $FF: synthetic method
   public static final boolean $anonfun$isBarrier_$1(final Dependency x$55) {
      return !(x$55 instanceof ShuffleDependency);
   }

   // $FF: synthetic method
   public static final boolean $anonfun$isBarrier_$2(final Dependency x$56) {
      return x$56.rdd().isBarrier();
   }

   // $FF: synthetic method
   public static final boolean $anonfun$getOutputDeterministicLevel$2(final ShuffleDependency x2$1, final Partitioner x$57) {
      boolean var10000;
      label23: {
         Partitioner var2 = x2$1.partitioner();
         if (x$57 == null) {
            if (var2 == null) {
               break label23;
            }
         } else if (x$57.equals(var2)) {
            break label23;
         }

         var10000 = false;
         return var10000;
      }

      var10000 = true;
      return var10000;
   }

   // $FF: synthetic method
   public static final int $anonfun$getOutputDeterministicLevel$3(final Enumeration.Value x$58) {
      return x$58.id();
   }

   public RDD(final SparkContext _sc, final Seq deps, final ClassTag evidence$1) {
      this._sc = _sc;
      this.deps = deps;
      this.evidence$1 = evidence$1;
      super();
      Logging.$init$(this);
      if (RDD.class.isAssignableFrom(this.elementClassTag().runtimeClass())) {
         this.logWarning((Function0)(() -> "Spark does not support nested RDDs (see SPARK-5063)"));
      }

      this.partitioner = scala.None..MODULE$;
      this.id = this.sc().newRddId();
      this.stateLock = new Serializable() {
      };
      this.storageLevel = org.apache.spark.storage.StorageLevel..MODULE$.NONE();
      this.resourceProfile = scala.None..MODULE$;
      this.creationSite = this.sc().getCallSite();
      this.scope = scala.Option..MODULE$.apply(this.sc().getLocalProperty(SparkContext$.MODULE$.RDD_SCOPE_KEY())).map((s) -> RDDOperationScope$.MODULE$.fromJson(s));
      this.checkpointData = scala.None..MODULE$;
      this.checkpointAllMarkedAncestors = scala.Option..MODULE$.apply(this.sc().getLocalProperty(RDD$.MODULE$.CHECKPOINT_ALL_MARKED_ANCESTORS())).exists((x$49) -> BoxesRunTime.boxToBoolean($anonfun$checkpointAllMarkedAncestors$1(x$49)));
      this.doCheckpointCalled = false;
   }

   public RDD(final RDD oneParent, final ClassTag evidence$2) {
      this(oneParent.context(), new scala.collection.immutable..colon.colon(new OneToOneDependency(oneParent), .MODULE$), evidence$2);
   }

   // $FF: synthetic method
   private static Object $deserializeLambda$(SerializedLambda var0) {
      return Class.lambdaDeserialize<invokedynamic>(var0);
   }
}
