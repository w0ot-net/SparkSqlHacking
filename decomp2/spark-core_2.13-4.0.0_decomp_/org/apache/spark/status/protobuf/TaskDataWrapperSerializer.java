package org.apache.spark.status.protobuf;

import java.lang.invoke.SerializedLambda;
import org.apache.spark.status.TaskDataWrapper;
import scala.Predef.;
import scala.collection.mutable.ArrayBuffer;
import scala.reflect.ScalaSignature;

@ScalaSignature(
   bytes = "\u0006\u0005A2Q\u0001B\u0003\u0001\u000b=AQA\b\u0001\u0005\u0002\u0001BQA\t\u0001\u0005B\rBQ\u0001\f\u0001\u0005\u00025\u0012\u0011\u0004V1tW\u0012\u000bG/Y,sCB\u0004XM]*fe&\fG.\u001b>fe*\u0011aaB\u0001\taJ|Go\u001c2vM*\u0011\u0001\"C\u0001\u0007gR\fG/^:\u000b\u0005)Y\u0011!B:qCJ\\'B\u0001\u0007\u000e\u0003\u0019\t\u0007/Y2iK*\ta\"A\u0002pe\u001e\u001c2\u0001\u0001\t\u0017!\t\tB#D\u0001\u0013\u0015\u0005\u0019\u0012!B:dC2\f\u0017BA\u000b\u0013\u0005\u0019\te.\u001f*fMB\u0019q\u0003\u0007\u000e\u000e\u0003\u0015I!!G\u0003\u0003\u001bA\u0013x\u000e^8ck\u001a\u001cVM\u001d#f!\tYB$D\u0001\b\u0013\tirAA\bUCN\\G)\u0019;b/J\f\u0007\u000f]3s\u0003\u0019a\u0014N\\5u}\r\u0001A#A\u0011\u0011\u0005]\u0001\u0011!C:fe&\fG.\u001b>f)\t!#\u0006E\u0002\u0012K\u001dJ!A\n\n\u0003\u000b\u0005\u0013(/Y=\u0011\u0005EA\u0013BA\u0015\u0013\u0005\u0011\u0011\u0015\u0010^3\t\u000b-\u0012\u0001\u0019\u0001\u000e\u0002\u000b%t\u0007/\u001e;\u0002\u0017\u0011,7/\u001a:jC2L'0\u001a\u000b\u000359BQaL\u0002A\u0002\u0011\nQAY=uKN\u0004"
)
public class TaskDataWrapperSerializer implements ProtobufSerDe {
   public byte[] serialize(final TaskDataWrapper input) {
      StoreTypes.TaskDataWrapper.Builder builder = StoreTypes.TaskDataWrapper.newBuilder().setTaskId(.MODULE$.Long2long(input.taskId())).setIndex(input.index()).setAttempt(input.attempt()).setPartitionId(input.partitionId()).setLaunchTime(input.launchTime()).setResultFetchStart(input.resultFetchStart()).setDuration(input.duration()).setSpeculative(input.speculative()).setHasMetrics(input.hasMetrics()).setExecutorDeserializeTime(input.executorDeserializeTime()).setExecutorDeserializeCpuTime(input.executorDeserializeCpuTime()).setExecutorRunTime(input.executorRunTime()).setExecutorCpuTime(input.executorCpuTime()).setResultSize(input.resultSize()).setJvmGcTime(input.jvmGcTime()).setResultSerializationTime(input.resultSerializationTime()).setMemoryBytesSpilled(input.memoryBytesSpilled()).setDiskBytesSpilled(input.diskBytesSpilled()).setPeakExecutionMemory(input.peakExecutionMemory()).setInputBytesRead(input.inputBytesRead()).setInputRecordsRead(input.inputRecordsRead()).setOutputBytesWritten(input.outputBytesWritten()).setOutputRecordsWritten(input.outputRecordsWritten()).setShuffleRemoteBlocksFetched(input.shuffleRemoteBlocksFetched()).setShuffleLocalBlocksFetched(input.shuffleLocalBlocksFetched()).setShuffleFetchWaitTime(input.shuffleFetchWaitTime()).setShuffleRemoteBytesRead(input.shuffleRemoteBytesRead()).setShuffleRemoteBytesReadToDisk(input.shuffleRemoteBytesReadToDisk()).setShuffleLocalBytesRead(input.shuffleLocalBytesRead()).setShuffleRecordsRead(input.shuffleRecordsRead()).setShuffleCorruptMergedBlockChunks(input.shuffleCorruptMergedBlockChunks()).setShuffleMergedFetchFallbackCount(input.shuffleMergedFetchFallbackCount()).setShuffleMergedRemoteBlocksFetched(input.shuffleMergedRemoteBlocksFetched()).setShuffleMergedLocalBlocksFetched(input.shuffleMergedLocalBlocksFetched()).setShuffleMergedRemoteChunksFetched(input.shuffleMergedRemoteChunksFetched()).setShuffleMergedLocalChunksFetched(input.shuffleMergedLocalChunksFetched()).setShuffleMergedRemoteBytesRead(input.shuffleMergedRemoteBytesRead()).setShuffleMergedLocalBytesRead(input.shuffleMergedLocalBytesRead()).setShuffleRemoteReqsDuration(input.shuffleRemoteReqsDuration()).setShuffleMergedRemoteReqDuration(input.shuffleMergedRemoteReqDuration()).setShuffleBytesWritten(input.shuffleBytesWritten()).setShuffleWriteTime(input.shuffleWriteTime()).setShuffleRecordsWritten(input.shuffleRecordsWritten()).setStageId((long)input.stageId()).setStageAttemptId(input.stageAttemptId());
      Utils$.MODULE$.setStringField(input.executorId(), (value) -> builder.setExecutorId(value));
      Utils$.MODULE$.setStringField(input.host(), (value) -> builder.setHost(value));
      Utils$.MODULE$.setStringField(input.status(), (value) -> builder.setStatus(value));
      Utils$.MODULE$.setStringField(input.taskLocality(), (value) -> builder.setTaskLocality(value));
      input.errorMessage().foreach((value) -> builder.setErrorMessage(value));
      input.accumulatorUpdates().foreach((update) -> builder.addAccumulatorUpdates(AccumulableInfoSerializer$.MODULE$.serialize(update)));
      return builder.build().toByteArray();
   }

   public TaskDataWrapper deserialize(final byte[] bytes) {
      StoreTypes.TaskDataWrapper binary = StoreTypes.TaskDataWrapper.parseFrom(bytes);
      ArrayBuffer accumulatorUpdates = AccumulableInfoSerializer$.MODULE$.deserialize(binary.getAccumulatorUpdatesList());
      return new TaskDataWrapper(.MODULE$.long2Long(binary.getTaskId()), binary.getIndex(), binary.getAttempt(), binary.getPartitionId(), binary.getLaunchTime(), binary.getResultFetchStart(), binary.getDuration(), Utils$.MODULE$.getStringField(binary.hasExecutorId(), () -> org.apache.spark.util.Utils$.MODULE$.weakIntern(binary.getExecutorId())), Utils$.MODULE$.getStringField(binary.hasHost(), () -> org.apache.spark.util.Utils$.MODULE$.weakIntern(binary.getHost())), Utils$.MODULE$.getStringField(binary.hasStatus(), () -> org.apache.spark.util.Utils$.MODULE$.weakIntern(binary.getStatus())), Utils$.MODULE$.getStringField(binary.hasTaskLocality(), () -> org.apache.spark.util.Utils$.MODULE$.weakIntern(binary.getTaskLocality())), binary.getSpeculative(), accumulatorUpdates, Utils$.MODULE$.getOptional(binary.hasErrorMessage(), () -> binary.getErrorMessage()), binary.getHasMetrics(), binary.getExecutorDeserializeTime(), binary.getExecutorDeserializeCpuTime(), binary.getExecutorRunTime(), binary.getExecutorCpuTime(), binary.getResultSize(), binary.getJvmGcTime(), binary.getResultSerializationTime(), binary.getMemoryBytesSpilled(), binary.getDiskBytesSpilled(), binary.getPeakExecutionMemory(), binary.getInputBytesRead(), binary.getInputRecordsRead(), binary.getOutputBytesWritten(), binary.getOutputRecordsWritten(), binary.getShuffleRemoteBlocksFetched(), binary.getShuffleLocalBlocksFetched(), binary.getShuffleFetchWaitTime(), binary.getShuffleRemoteBytesRead(), binary.getShuffleRemoteBytesReadToDisk(), binary.getShuffleLocalBytesRead(), binary.getShuffleRecordsRead(), binary.getShuffleCorruptMergedBlockChunks(), binary.getShuffleMergedFetchFallbackCount(), binary.getShuffleMergedRemoteBlocksFetched(), binary.getShuffleMergedLocalBlocksFetched(), binary.getShuffleMergedRemoteChunksFetched(), binary.getShuffleMergedLocalChunksFetched(), binary.getShuffleMergedRemoteBytesRead(), binary.getShuffleMergedLocalBytesRead(), binary.getShuffleRemoteReqsDuration(), binary.getShuffleMergedRemoteReqDuration(), binary.getShuffleBytesWritten(), binary.getShuffleWriteTime(), binary.getShuffleRecordsWritten(), (int)binary.getStageId(), binary.getStageAttemptId());
   }

   // $FF: synthetic method
   private static Object $deserializeLambda$(SerializedLambda var0) {
      return Class.lambdaDeserialize<invokedynamic>(var0);
   }
}
