package org.apache.spark.status.protobuf;

import java.lang.invoke.SerializedLambda;
import org.apache.spark.status.CachedQuantile;
import scala.reflect.ScalaSignature;

@ScalaSignature(
   bytes = "\u0006\u0005A2Q\u0001B\u0003\u0001\u000b=AQA\b\u0001\u0005\u0002\u0001BQA\t\u0001\u0005B\rBQ\u0001\f\u0001\u0005B5\u0012\u0001dQ1dQ\u0016$\u0017+^1oi&dWmU3sS\u0006d\u0017N_3s\u0015\t1q!\u0001\u0005qe>$xNY;g\u0015\tA\u0011\"\u0001\u0004ti\u0006$Xo\u001d\u0006\u0003\u0015-\tQa\u001d9be.T!\u0001D\u0007\u0002\r\u0005\u0004\u0018m\u00195f\u0015\u0005q\u0011aA8sON\u0019\u0001\u0001\u0005\f\u0011\u0005E!R\"\u0001\n\u000b\u0003M\tQa]2bY\u0006L!!\u0006\n\u0003\r\u0005s\u0017PU3g!\r9\u0002DG\u0007\u0002\u000b%\u0011\u0011$\u0002\u0002\u000e!J|Go\u001c2vMN+'\u000fR3\u0011\u0005maR\"A\u0004\n\u0005u9!AD\"bG\",G-U;b]RLG.Z\u0001\u0007y%t\u0017\u000e\u001e \u0004\u0001Q\t\u0011\u0005\u0005\u0002\u0018\u0001\u0005I1/\u001a:jC2L'0\u001a\u000b\u0003I)\u00022!E\u0013(\u0013\t1#CA\u0003BeJ\f\u0017\u0010\u0005\u0002\u0012Q%\u0011\u0011F\u0005\u0002\u0005\u0005f$X\rC\u0003,\u0005\u0001\u0007!$\u0001\u0003eCR\f\u0017a\u00033fg\u0016\u0014\u0018.\u00197ju\u0016$\"A\u0007\u0018\t\u000b=\u001a\u0001\u0019\u0001\u0013\u0002\u000b\tLH/Z:"
)
public class CachedQuantileSerializer implements ProtobufSerDe {
   public byte[] serialize(final CachedQuantile data) {
      StoreTypes.CachedQuantile.Builder builder = StoreTypes.CachedQuantile.newBuilder().setStageId((long)data.stageId()).setStageAttemptId(data.stageAttemptId()).setTaskCount(data.taskCount()).setDuration(data.duration()).setExecutorDeserializeTime(data.executorDeserializeTime()).setExecutorDeserializeCpuTime(data.executorDeserializeCpuTime()).setExecutorRunTime(data.executorRunTime()).setExecutorCpuTime(data.executorCpuTime()).setResultSize(data.resultSize()).setJvmGcTime(data.jvmGcTime()).setResultSerializationTime(data.resultSerializationTime()).setGettingResultTime(data.gettingResultTime()).setSchedulerDelay(data.schedulerDelay()).setPeakExecutionMemory(data.peakExecutionMemory()).setMemoryBytesSpilled(data.memoryBytesSpilled()).setDiskBytesSpilled(data.diskBytesSpilled()).setBytesRead(data.bytesRead()).setRecordsRead(data.recordsRead()).setBytesWritten(data.bytesWritten()).setRecordsWritten(data.recordsWritten()).setShuffleReadBytes(data.shuffleReadBytes()).setShuffleRecordsRead(data.shuffleRecordsRead()).setShuffleRemoteBlocksFetched(data.shuffleRemoteBlocksFetched()).setShuffleLocalBlocksFetched(data.shuffleLocalBlocksFetched()).setShuffleFetchWaitTime(data.shuffleFetchWaitTime()).setShuffleRemoteBytesRead(data.shuffleRemoteBytesRead()).setShuffleRemoteBytesReadToDisk(data.shuffleRemoteBytesReadToDisk()).setShuffleTotalBlocksFetched(data.shuffleTotalBlocksFetched()).setShuffleCorruptMergedBlockChunks(data.shuffleCorruptMergedBlockChunks()).setShuffleMergedFetchFallbackCount(data.shuffleMergedFetchFallbackCount()).setShuffleMergedRemoteBlocksFetched(data.shuffleMergedRemoteBlocksFetched()).setShuffleMergedLocalBlocksFetched(data.shuffleMergedLocalBlocksFetched()).setShuffleMergedRemoteChunksFetched(data.shuffleMergedRemoteChunksFetched()).setShuffleMergedLocalChunksFetched(data.shuffleMergedLocalChunksFetched()).setShuffleMergedRemoteBytesRead(data.shuffleMergedRemoteBytesRead()).setShuffleMergedLocalBytesRead(data.shuffleMergedLocalBytesRead()).setShuffleRemoteReqsDuration(data.shuffleRemoteReqsDuration()).setShuffleMergedRemoteReqsDuration(data.shuffleMergedRemoteReqsDuration()).setShuffleWriteBytes(data.shuffleWriteBytes()).setShuffleWriteRecords(data.shuffleWriteRecords()).setShuffleWriteTime(data.shuffleWriteTime());
      Utils$.MODULE$.setStringField(data.quantile(), (value) -> builder.setQuantile(value));
      return builder.build().toByteArray();
   }

   public CachedQuantile deserialize(final byte[] bytes) {
      StoreTypes.CachedQuantile binary = StoreTypes.CachedQuantile.parseFrom(bytes);
      return new CachedQuantile((int)binary.getStageId(), binary.getStageAttemptId(), Utils$.MODULE$.getStringField(binary.hasQuantile(), () -> binary.getQuantile()), binary.getTaskCount(), binary.getDuration(), binary.getExecutorDeserializeTime(), binary.getExecutorDeserializeCpuTime(), binary.getExecutorRunTime(), binary.getExecutorCpuTime(), binary.getResultSize(), binary.getJvmGcTime(), binary.getResultSerializationTime(), binary.getGettingResultTime(), binary.getSchedulerDelay(), binary.getPeakExecutionMemory(), binary.getMemoryBytesSpilled(), binary.getDiskBytesSpilled(), binary.getBytesRead(), binary.getRecordsRead(), binary.getBytesWritten(), binary.getRecordsWritten(), binary.getShuffleReadBytes(), binary.getShuffleRecordsRead(), binary.getShuffleRemoteBlocksFetched(), binary.getShuffleLocalBlocksFetched(), binary.getShuffleFetchWaitTime(), binary.getShuffleRemoteBytesRead(), binary.getShuffleRemoteBytesReadToDisk(), binary.getShuffleTotalBlocksFetched(), binary.getShuffleCorruptMergedBlockChunks(), binary.getShuffleMergedFetchFallbackCount(), binary.getShuffleMergedRemoteBlocksFetched(), binary.getShuffleMergedLocalBlocksFetched(), binary.getShuffleMergedRemoteChunksFetched(), binary.getShuffleMergedLocalChunksFetched(), binary.getShuffleMergedRemoteBytesRead(), binary.getShuffleMergedLocalBytesRead(), binary.getShuffleRemoteReqsDuration(), binary.getShuffleMergedRemoteReqsDuration(), binary.getShuffleWriteBytes(), binary.getShuffleWriteRecords(), binary.getShuffleWriteTime());
   }

   // $FF: synthetic method
   private static Object $deserializeLambda$(SerializedLambda var0) {
      return Class.lambdaDeserialize<invokedynamic>(var0);
   }
}
