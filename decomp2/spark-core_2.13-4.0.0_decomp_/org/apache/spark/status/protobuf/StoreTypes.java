package org.apache.spark.status.protobuf;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.sparkproject.spark_core.protobuf.AbstractMessage;
import org.sparkproject.spark_core.protobuf.AbstractMessageLite;
import org.sparkproject.spark_core.protobuf.AbstractParser;
import org.sparkproject.spark_core.protobuf.ByteString;
import org.sparkproject.spark_core.protobuf.CodedInputStream;
import org.sparkproject.spark_core.protobuf.CodedOutputStream;
import org.sparkproject.spark_core.protobuf.Descriptors;
import org.sparkproject.spark_core.protobuf.ExtensionRegistry;
import org.sparkproject.spark_core.protobuf.ExtensionRegistryLite;
import org.sparkproject.spark_core.protobuf.GeneratedMessage;
import org.sparkproject.spark_core.protobuf.Internal;
import org.sparkproject.spark_core.protobuf.InvalidProtocolBufferException;
import org.sparkproject.spark_core.protobuf.LazyStringArrayList;
import org.sparkproject.spark_core.protobuf.MapEntry;
import org.sparkproject.spark_core.protobuf.MapField;
import org.sparkproject.spark_core.protobuf.MapFieldBuilder;
import org.sparkproject.spark_core.protobuf.MapFieldReflectionAccessor;
import org.sparkproject.spark_core.protobuf.Message;
import org.sparkproject.spark_core.protobuf.MessageLite;
import org.sparkproject.spark_core.protobuf.MessageOrBuilder;
import org.sparkproject.spark_core.protobuf.Parser;
import org.sparkproject.spark_core.protobuf.ProtocolMessageEnum;
import org.sparkproject.spark_core.protobuf.ProtocolStringList;
import org.sparkproject.spark_core.protobuf.RepeatedFieldBuilder;
import org.sparkproject.spark_core.protobuf.RuntimeVersion;
import org.sparkproject.spark_core.protobuf.SingleFieldBuilder;
import org.sparkproject.spark_core.protobuf.UninitializedMessageException;
import org.sparkproject.spark_core.protobuf.WireFormat;

public final class StoreTypes {
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_JobData_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_JobData_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_JobData_KillTasksSummaryEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_JobData_KillTasksSummaryEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_JobDataWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_JobDataWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_AccumulableInfo_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_AccumulableInfo_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_TaskDataWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_TaskDataWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_MetricsEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_MetricsEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorStageSummary_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorStageSummary_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorStageSummaryWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorStageSummaryWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorResourceRequest_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorResourceRequest_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_TaskResourceRequest_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_TaskResourceRequest_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_ExecutorResourcesEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_ExecutorResourcesEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_TaskResourcesEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_TaskResourcesEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_RuntimeInfo_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_RuntimeInfo_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_PairStrings_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_PairStrings_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfo_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfo_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfoWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfoWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ApplicationAttemptInfo_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ApplicationAttemptInfo_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ApplicationInfo_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ApplicationInfo_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ApplicationInfoWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ApplicationInfoWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StreamBlockData_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StreamBlockData_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_RDDDataDistribution_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_RDDDataDistribution_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_RDDPartitionInfo_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_RDDPartitionInfo_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_RDDStorageInfo_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_RDDStorageInfo_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_RDDStorageInfoWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_RDDStorageInfoWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ResourceProfileWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ResourceProfileWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_CachedQuantile_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_CachedQuantile_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SpeculationStageSummary_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SpeculationStageSummary_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SpeculationStageSummaryWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SpeculationStageSummaryWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ProcessSummary_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ProcessSummary_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ProcessSummary_ProcessLogsEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ProcessSummary_ProcessLogsEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ProcessSummaryWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ProcessSummaryWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_MemoryMetrics_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_MemoryMetrics_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ResourceInformation_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ResourceInformation_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorSummary_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorSummary_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ExecutorLogsEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ExecutorLogsEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorSummary_AttributesEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorSummary_AttributesEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ResourcesEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ResourcesEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorSummaryWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorSummaryWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SQLPlanMetric_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SQLPlanMetric_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_ModifiedConfigsEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_ModifiedConfigsEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_JobsEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_JobsEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_MetricValuesEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_MetricValuesEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNode_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNode_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SparkPlanGraphClusterWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SparkPlanGraphClusterWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNodeWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNodeWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SparkPlanGraphEdge_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SparkPlanGraphEdge_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SparkPlanGraphWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SparkPlanGraphWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_RDDOperationEdge_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_RDDOperationEdge_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_RDDOperationNode_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_RDDOperationNode_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_RDDOperationClusterWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_RDDOperationClusterWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_RDDOperationGraphWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_RDDOperationGraphWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StreamingQueryData_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StreamingQueryData_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StageDataWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StageDataWrapper_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StageDataWrapper_LocalityEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StageDataWrapper_LocalityEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_TaskData_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_TaskData_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_TaskData_ExecutorLogsEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_TaskData_ExecutorLogsEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StageData_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StageData_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StageData_TasksEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StageData_TasksEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StageData_ExecutorSummaryEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StageData_ExecutorSummaryEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StageData_KilledTasksSummaryEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StageData_KilledTasksSummaryEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_TaskMetrics_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_TaskMetrics_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_InputMetrics_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_InputMetrics_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_OutputMetrics_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_OutputMetrics_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ShuffleReadMetrics_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ShuffleReadMetrics_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetrics_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetrics_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetrics_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetrics_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_TaskMetricDistributions_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_TaskMetricDistributions_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_InputMetricDistributions_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_InputMetricDistributions_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_OutputMetricDistributions_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_OutputMetricDistributions_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ShuffleReadMetricDistributions_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ShuffleReadMetricDistributions_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetricDistributions_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetricDistributions_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetricDistributions_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetricDistributions_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorMetricsDistributions_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorMetricsDistributions_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_ExecutorPeakMetricsDistributions_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_ExecutorPeakMetricsDistributions_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_AppSummary_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_AppSummary_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_PoolData_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_PoolData_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_CustomMetricsEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_CustomMetricsEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SourceProgress_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SourceProgress_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SourceProgress_MetricsEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SourceProgress_MetricsEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SinkProgress_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SinkProgress_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_SinkProgress_MetricsEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_SinkProgress_MetricsEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_DurationMsEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_DurationMsEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_EventTimeEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_EventTimeEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_ObservedMetricsEntry_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_ObservedMetricsEntry_fieldAccessorTable;
   private static final Descriptors.Descriptor internal_static_org_apache_spark_status_protobuf_StreamingQueryProgressWrapper_descriptor;
   private static final GeneratedMessage.FieldAccessorTable internal_static_org_apache_spark_status_protobuf_StreamingQueryProgressWrapper_fieldAccessorTable;
   private static Descriptors.FileDescriptor descriptor;

   private StoreTypes() {
   }

   public static void registerAllExtensions(ExtensionRegistryLite registry) {
   }

   public static void registerAllExtensions(ExtensionRegistry registry) {
      registerAllExtensions((ExtensionRegistryLite)registry);
   }

   public static Descriptors.FileDescriptor getDescriptor() {
      return descriptor;
   }

   static {
      RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", StoreTypes.class.getName());
      String[] descriptorData = new String[]{"\n\u0011store_types.proto\u0012 org.apache.spark.status.protobuf\"\u0092\u0006\n\u0007JobData\u0012\u000e\n\u0006job_id\u0018\u0001 \u0001(\u0003\u0012\u0011\n\u0004name\u0018\u0002 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0018\n\u000bdescription\u0018\u0003 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u001c\n\u000fsubmission_time\u0018\u0004 \u0001(\u0003H\u0002\u0088\u0001\u0001\u0012\u001c\n\u000fcompletion_time\u0018\u0005 \u0001(\u0003H\u0003\u0088\u0001\u0001\u0012\u0011\n\tstage_ids\u0018\u0006 \u0003(\u0003\u0012\u0016\n\tjob_group\u0018\u0007 \u0001(\tH\u0004\u0088\u0001\u0001\u0012\u0010\n\bjob_tags\u0018\u0015 \u0003(\t\u0012D\n\u0006status\u0018\b \u0001(\u000e24.org.apache.spark.status.protobuf.JobExecutionStatus\u0012\u0011\n\tnum_tasks\u0018\t \u0001(\u0005\u0012\u0018\n\u0010num_active_tasks\u0018\n \u0001(\u0005\u0012\u001b\n\u0013num_completed_tasks\u0018\u000b \u0001(\u0005\u0012\u0019\n\u0011num_skipped_tasks\u0018\f \u0001(\u0005\u0012\u0018\n\u0010num_failed_tasks\u0018\r \u0001(\u0005\u0012\u0018\n\u0010num_killed_tasks\u0018\u000e \u0001(\u0005\u0012\u001d\n\u0015num_completed_indices\u0018\u000f \u0001(\u0005\u0012\u0019\n\u0011num_active_stages\u0018\u0010 \u0001(\u0005\u0012\u001c\n\u0014num_completed_stages\u0018\u0011 \u0001(\u0005\u0012\u001a\n\u0012num_skipped_stages\u0018\u0012 \u0001(\u0005\u0012\u0019\n\u0011num_failed_stages\u0018\u0013 \u0001(\u0005\u0012[\n\u0012kill_tasks_summary\u0018\u0014 \u0003(\u000b2?.org.apache.spark.status.protobuf.JobData.KillTasksSummaryEntry\u001a7\n\u0015KillTasksSummaryEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0005:\u00028\u0001B\u0007\n\u0005_nameB\u000e\n\f_descriptionB\u0012\n\u0010_submission_timeB\u0012\n\u0010_completion_timeB\f\n\n_job_group\"\u0095\u0001\n\u000eJobDataWrapper\u00127\n\u0004info\u0018\u0001 \u0001(\u000b2).org.apache.spark.status.protobuf.JobData\u0012\u0016\n\u000eskipped_stages\u0018\u0002 \u0003(\u0005\u0012\u001d\n\u0010sql_execution_id\u0018\u0003 \u0001(\u0003H\u0000\u0088\u0001\u0001B\u0013\n\u0011_sql_execution_id\"w\n\u000fAccumulableInfo\u0012\n\n\u0002id\u0018\u0001 \u0001(\u0003\u0012\u0011\n\u0004name\u0018\u0002 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0013\n\u0006update\u0018\u0003 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0012\n\u0005value\u0018\u0004 \u0001(\tH\u0002\u0088\u0001\u0001B\u0007\n\u0005_nameB\t\n\u0007_updateB\b\n\u0006_value\"ª\r\n\u000fTaskDataWrapper\u0012\u000f\n\u0007task_id\u0018\u0001 \u0001(\u0003\u0012\r\n\u0005index\u0018\u0002 \u0001(\u0005\u0012\u000f\n\u0007attempt\u0018\u0003 \u0001(\u0005\u0012\u0014\n\fpartition_id\u0018\u0004 \u0001(\u0005\u0012\u0013\n\u000blaunch_time\u0018\u0005 \u0001(\u0003\u0012\u001a\n\u0012result_fetch_start\u0018\u0006 \u0001(\u0003\u0012\u0010\n\bduration\u0018\u0007 \u0001(\u0003\u0012\u0018\n\u000bexecutor_id\u0018\b \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0011\n\u0004host\u0018\t \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0013\n\u0006status\u0018\n \u0001(\tH\u0002\u0088\u0001\u0001\u0012\u001a\n\rtask_locality\u0018\u000b \u0001(\tH\u0003\u0088\u0001\u0001\u0012\u0013\n\u000bspeculative\u0018\f \u0001(\b\u0012N\n\u0013accumulator_updates\u0018\r \u0003(\u000b21.org.apache.spark.status.protobuf.AccumulableInfo\u0012\u001a\n\rerror_message\u0018\u000e \u0001(\tH\u0004\u0088\u0001\u0001\u0012\u0013\n\u000bhas_metrics\u0018\u000f \u0001(\b\u0012!\n\u0019executor_deserialize_time\u0018\u0010 \u0001(\u0003\u0012%\n\u001dexecutor_deserialize_cpu_time\u0018\u0011 \u0001(\u0003\u0012\u0019\n\u0011executor_run_time\u0018\u0012 \u0001(\u0003\u0012\u0019\n\u0011executor_cpu_time\u0018\u0013 \u0001(\u0003\u0012\u0013\n\u000bresult_size\u0018\u0014 \u0001(\u0003\u0012\u0013\n\u000bjvm_gc_time\u0018\u0015 \u0001(\u0003\u0012!\n\u0019result_serialization_time\u0018\u0016 \u0001(\u0003\u0012\u001c\n\u0014memory_bytes_spilled\u0018\u0017 \u0001(\u0003\u0012\u001a\n\u0012disk_bytes_spilled\u0018\u0018 \u0001(\u0003\u0012\u001d\n\u0015peak_execution_memory\u0018\u0019 \u0001(\u0003\u0012\u0018\n\u0010input_bytes_read\u0018\u001a \u0001(\u0003\u0012\u001a\n\u0012input_records_read\u0018\u001b \u0001(\u0003\u0012\u001c\n\u0014output_bytes_written\u0018\u001c \u0001(\u0003\u0012\u001e\n\u0016output_records_written\u0018\u001d \u0001(\u0003\u0012%\n\u001dshuffle_remote_blocks_fetched\u0018\u001e \u0001(\u0003\u0012$\n\u001cshuffle_local_blocks_fetched\u0018\u001f \u0001(\u0003\u0012\u001f\n\u0017shuffle_fetch_wait_time\u0018  \u0001(\u0003\u0012!\n\u0019shuffle_remote_bytes_read\u0018! \u0001(\u0003\u0012)\n!shuffle_remote_bytes_read_to_disk\u0018\" \u0001(\u0003\u0012 \n\u0018shuffle_local_bytes_read\u0018# \u0001(\u0003\u0012\u001c\n\u0014shuffle_records_read\u0018$ \u0001(\u0003\u0012\u001d\n\u0015shuffle_bytes_written\u0018% \u0001(\u0003\u0012\u001a\n\u0012shuffle_write_time\u0018& \u0001(\u0003\u0012\u001f\n\u0017shuffle_records_written\u0018' \u0001(\u0003\u0012\u0010\n\bstage_id\u0018( \u0001(\u0003\u0012\u0018\n\u0010stage_attempt_id\u0018) \u0001(\u0005\u0012+\n#shuffle_corrupt_merged_block_chunks\u0018* \u0001(\u0003\u0012+\n#shuffle_merged_fetch_fallback_count\u0018+ \u0001(\u0003\u0012,\n$shuffle_merged_remote_blocks_fetched\u0018, \u0001(\u0003\u0012+\n#shuffle_merged_local_blocks_fetched\u0018- \u0001(\u0003\u0012,\n$shuffle_merged_remote_chunks_fetched\u0018. \u0001(\u0003\u0012+\n#shuffle_merged_local_chunks_fetched\u0018/ \u0001(\u0003\u0012(\n shuffle_merged_remote_bytes_read\u00180 \u0001(\u0003\u0012'\n\u001fshuffle_merged_local_bytes_read\u00181 \u0001(\u0003\u0012$\n\u001cshuffle_remote_reqs_duration\u00182 \u0001(\u0003\u0012*\n\"shuffle_merged_remote_req_duration\u00183 \u0001(\u0003B\u000e\n\f_executor_idB\u0007\n\u0005_hostB\t\n\u0007_statusB\u0010\n\u000e_task_localityB\u0010\n\u000e_error_message\"\u0092\u0001\n\u000fExecutorMetrics\u0012O\n\u0007metrics\u0018\u0001 \u0003(\u000b2>.org.apache.spark.status.protobuf.ExecutorMetrics.MetricsEntry\u001a.\n\fMetricsEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\"\u009a\u0004\n\u0014ExecutorStageSummary\u0012\u0011\n\ttask_time\u0018\u0001 \u0001(\u0003\u0012\u0014\n\ffailed_tasks\u0018\u0002 \u0001(\u0005\u0012\u0017\n\u000fsucceeded_tasks\u0018\u0003 \u0001(\u0005\u0012\u0014\n\fkilled_tasks\u0018\u0004 \u0001(\u0005\u0012\u0013\n\u000binput_bytes\u0018\u0005 \u0001(\u0003\u0012\u0015\n\rinput_records\u0018\u0006 \u0001(\u0003\u0012\u0014\n\foutput_bytes\u0018\u0007 \u0001(\u0003\u0012\u0016\n\u000eoutput_records\u0018\b \u0001(\u0003\u0012\u0014\n\fshuffle_read\u0018\t \u0001(\u0003\u0012\u001c\n\u0014shuffle_read_records\u0018\n \u0001(\u0003\u0012\u0015\n\rshuffle_write\u0018\u000b \u0001(\u0003\u0012\u001d\n\u0015shuffle_write_records\u0018\f \u0001(\u0003\u0012\u001c\n\u0014memory_bytes_spilled\u0018\r \u0001(\u0003\u0012\u001a\n\u0012disk_bytes_spilled\u0018\u000e \u0001(\u0003\u0012 \n\u0018is_blacklisted_for_stage\u0018\u000f \u0001(\b\u0012S\n\u0013peak_memory_metrics\u0018\u0010 \u0001(\u000b21.org.apache.spark.status.protobuf.ExecutorMetricsH\u0000\u0088\u0001\u0001\u0012\u001d\n\u0015is_excluded_for_stage\u0018\u0011 \u0001(\bB\u0016\n\u0014_peak_memory_metrics\"¹\u0001\n\u001bExecutorStageSummaryWrapper\u0012\u0010\n\bstage_id\u0018\u0001 \u0001(\u0003\u0012\u0018\n\u0010stage_attempt_id\u0018\u0002 \u0001(\u0005\u0012\u0018\n\u000bexecutor_id\u0018\u0003 \u0001(\tH\u0000\u0088\u0001\u0001\u0012D\n\u0004info\u0018\u0004 \u0001(\u000b26.org.apache.spark.status.protobuf.ExecutorStageSummaryB\u000e\n\f_executor_id\"«\u0001\n\u0017ExecutorResourceRequest\u0012\u001a\n\rresource_name\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u000e\n\u0006amount\u0018\u0002 \u0001(\u0003\u0012\u001d\n\u0010discovery_script\u0018\u0003 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0013\n\u0006vendor\u0018\u0004 \u0001(\tH\u0002\u0088\u0001\u0001B\u0010\n\u000e_resource_nameB\u0013\n\u0011_discovery_scriptB\t\n\u0007_vendor\"S\n\u0013TaskResourceRequest\u0012\u001a\n\rresource_name\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u000e\n\u0006amount\u0018\u0002 \u0001(\u0001B\u0010\n\u000e_resource_name\"Ï\u0003\n\u0013ResourceProfileInfo\u0012\n\n\u0002id\u0018\u0001 \u0001(\u0005\u0012h\n\u0012executor_resources\u0018\u0002 \u0003(\u000b2L.org.apache.spark.status.protobuf.ResourceProfileInfo.ExecutorResourcesEntry\u0012`\n\u000etask_resources\u0018\u0003 \u0003(\u000b2H.org.apache.spark.status.protobuf.ResourceProfileInfo.TaskResourcesEntry\u001as\n\u0016ExecutorResourcesEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012H\n\u0005value\u0018\u0002 \u0001(\u000b29.org.apache.spark.status.protobuf.ExecutorResourceRequest:\u00028\u0001\u001ak\n\u0012TaskResourcesEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012D\n\u0005value\u0018\u0002 \u0001(\u000b25.org.apache.spark.status.protobuf.TaskResourceRequest:\u00028\u0001\"\u008d\u0001\n\u000bRuntimeInfo\u0012\u0019\n\fjava_version\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0016\n\tjava_home\u0018\u0002 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u001a\n\rscala_version\u0018\u0003 \u0001(\tH\u0002\u0088\u0001\u0001B\u000f\n\r_java_versionB\f\n\n_java_homeB\u0010\n\u000e_scala_version\"M\n\u000bPairStrings\u0012\u0013\n\u0006value1\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0013\n\u0006value2\u0018\u0002 \u0001(\tH\u0001\u0088\u0001\u0001B\t\n\u0007_value1B\t\n\u0007_value2\" \u0004\n\u001aApplicationEnvironmentInfo\u0012>\n\u0007runtime\u0018\u0001 \u0001(\u000b2-.org.apache.spark.status.protobuf.RuntimeInfo\u0012G\n\u0010spark_properties\u0018\u0002 \u0003(\u000b2-.org.apache.spark.status.protobuf.PairStrings\u0012H\n\u0011hadoop_properties\u0018\u0003 \u0003(\u000b2-.org.apache.spark.status.protobuf.PairStrings\u0012H\n\u0011system_properties\u0018\u0004 \u0003(\u000b2-.org.apache.spark.status.protobuf.PairStrings\u0012I\n\u0012metrics_properties\u0018\u0005 \u0003(\u000b2-.org.apache.spark.status.protobuf.PairStrings\u0012H\n\u0011classpath_entries\u0018\u0006 \u0003(\u000b2-.org.apache.spark.status.protobuf.PairStrings\u0012P\n\u0011resource_profiles\u0018\u0007 \u0003(\u000b25.org.apache.spark.status.protobuf.ResourceProfileInfo\"o\n!ApplicationEnvironmentInfoWrapper\u0012J\n\u0004info\u0018\u0001 \u0001(\u000b2<.org.apache.spark.status.protobuf.ApplicationEnvironmentInfo\"ÿ\u0001\n\u0016ApplicationAttemptInfo\u0012\u0017\n\nattempt_id\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0012\n\nstart_time\u0018\u0002 \u0001(\u0003\u0012\u0010\n\bend_time\u0018\u0003 \u0001(\u0003\u0012\u0014\n\flast_updated\u0018\u0004 \u0001(\u0003\u0012\u0010\n\bduration\u0018\u0005 \u0001(\u0003\u0012\u0017\n\nspark_user\u0018\u0006 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0011\n\tcompleted\u0018\u0007 \u0001(\b\u0012\u001e\n\u0011app_spark_version\u0018\b \u0001(\tH\u0002\u0088\u0001\u0001B\r\n\u000b_attempt_idB\r\n\u000b_spark_userB\u0014\n\u0012_app_spark_version\"Ý\u0002\n\u000fApplicationInfo\u0012\u000f\n\u0002id\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0011\n\u0004name\u0018\u0002 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u001a\n\rcores_granted\u0018\u0003 \u0001(\u0005H\u0002\u0088\u0001\u0001\u0012\u0016\n\tmax_cores\u0018\u0004 \u0001(\u0005H\u0003\u0088\u0001\u0001\u0012\u001f\n\u0012cores_per_executor\u0018\u0005 \u0001(\u0005H\u0004\u0088\u0001\u0001\u0012#\n\u0016memory_per_executor_mb\u0018\u0006 \u0001(\u0005H\u0005\u0088\u0001\u0001\u0012J\n\battempts\u0018\u0007 \u0003(\u000b28.org.apache.spark.status.protobuf.ApplicationAttemptInfoB\u0005\n\u0003_idB\u0007\n\u0005_nameB\u0010\n\u000e_cores_grantedB\f\n\n_max_coresB\u0015\n\u0013_cores_per_executorB\u0019\n\u0017_memory_per_executor_mb\"Y\n\u0016ApplicationInfoWrapper\u0012?\n\u0004info\u0018\u0001 \u0001(\u000b21.org.apache.spark.status.protobuf.ApplicationInfo\"\u008c\u0002\n\u000fStreamBlockData\u0012\u0011\n\u0004name\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0018\n\u000bexecutor_id\u0018\u0002 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0016\n\thost_port\u0018\u0003 \u0001(\tH\u0002\u0088\u0001\u0001\u0012\u001a\n\rstorage_level\u0018\u0004 \u0001(\tH\u0003\u0088\u0001\u0001\u0012\u0012\n\nuse_memory\u0018\u0005 \u0001(\b\u0012\u0010\n\buse_disk\u0018\u0006 \u0001(\b\u0012\u0014\n\fdeserialized\u0018\u0007 \u0001(\b\u0012\u0010\n\bmem_size\u0018\b \u0001(\u0003\u0012\u0011\n\tdisk_size\u0018\t \u0001(\u0003B\u0007\n\u0005_nameB\u000e\n\f_executor_idB\f\n\n_host_portB\u0010\n\u000e_storage_level\"ù\u0002\n\u0013RDDDataDistribution\u0012\u0014\n\u0007address\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0013\n\u000bmemory_used\u0018\u0002 \u0001(\u0003\u0012\u0018\n\u0010memory_remaining\u0018\u0003 \u0001(\u0003\u0012\u0011\n\tdisk_used\u0018\u0004 \u0001(\u0003\u0012 \n\u0013on_heap_memory_used\u0018\u0005 \u0001(\u0003H\u0001\u0088\u0001\u0001\u0012!\n\u0014off_heap_memory_used\u0018\u0006 \u0001(\u0003H\u0002\u0088\u0001\u0001\u0012%\n\u0018on_heap_memory_remaining\u0018\u0007 \u0001(\u0003H\u0003\u0088\u0001\u0001\u0012&\n\u0019off_heap_memory_remaining\u0018\b \u0001(\u0003H\u0004\u0088\u0001\u0001B\n\n\b_addressB\u0016\n\u0014_on_heap_memory_usedB\u0017\n\u0015_off_heap_memory_usedB\u001b\n\u0019_on_heap_memory_remainingB\u001c\n\u001a_off_heap_memory_remaining\"£\u0001\n\u0010RDDPartitionInfo\u0012\u0017\n\nblock_name\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u001a\n\rstorage_level\u0018\u0002 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0013\n\u000bmemory_used\u0018\u0003 \u0001(\u0003\u0012\u0011\n\tdisk_used\u0018\u0004 \u0001(\u0003\u0012\u0011\n\texecutors\u0018\u0005 \u0003(\tB\r\n\u000b_block_nameB\u0010\n\u000e_storage_level\"ß\u0002\n\u000eRDDStorageInfo\u0012\n\n\u0002id\u0018\u0001 \u0001(\u0005\u0012\u0011\n\u0004name\u0018\u0002 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0016\n\u000enum_partitions\u0018\u0003 \u0001(\u0005\u0012\u001d\n\u0015num_cached_partitions\u0018\u0004 \u0001(\u0005\u0012\u001a\n\rstorage_level\u0018\u0005 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0013\n\u000bmemory_used\u0018\u0006 \u0001(\u0003\u0012\u0011\n\tdisk_used\u0018\u0007 \u0001(\u0003\u0012P\n\u0011data_distribution\u0018\b \u0003(\u000b25.org.apache.spark.status.protobuf.RDDDataDistribution\u0012F\n\npartitions\u0018\t \u0003(\u000b22.org.apache.spark.status.protobuf.RDDPartitionInfoB\u0007\n\u0005_nameB\u0010\n\u000e_storage_level\"W\n\u0015RDDStorageInfoWrapper\u0012>\n\u0004info\u0018\u0001 \u0001(\u000b20.org.apache.spark.status.protobuf.RDDStorageInfo\"`\n\u0016ResourceProfileWrapper\u0012F\n\u0007rp_info\u0018\u0001 \u0001(\u000b25.org.apache.spark.status.protobuf.ResourceProfileInfo\"æ\n\n\u000eCachedQuantile\u0012\u0010\n\bstage_id\u0018\u0001 \u0001(\u0003\u0012\u0018\n\u0010stage_attempt_id\u0018\u0002 \u0001(\u0005\u0012\u0015\n\bquantile\u0018\u0003 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0012\n\ntask_count\u0018\u0004 \u0001(\u0003\u0012\u0010\n\bduration\u0018\u0005 \u0001(\u0001\u0012!\n\u0019executor_deserialize_time\u0018\u0006 \u0001(\u0001\u0012%\n\u001dexecutor_deserialize_cpu_time\u0018\u0007 \u0001(\u0001\u0012\u0019\n\u0011executor_run_time\u0018\b \u0001(\u0001\u0012\u0019\n\u0011executor_cpu_time\u0018\t \u0001(\u0001\u0012\u0013\n\u000bresult_size\u0018\n \u0001(\u0001\u0012\u0013\n\u000bjvm_gc_time\u0018\u000b \u0001(\u0001\u0012!\n\u0019result_serialization_time\u0018\f \u0001(\u0001\u0012\u001b\n\u0013getting_result_time\u0018\r \u0001(\u0001\u0012\u0017\n\u000fscheduler_delay\u0018\u000e \u0001(\u0001\u0012\u001d\n\u0015peak_execution_memory\u0018\u000f \u0001(\u0001\u0012\u001c\n\u0014memory_bytes_spilled\u0018\u0010 \u0001(\u0001\u0012\u001a\n\u0012disk_bytes_spilled\u0018\u0011 \u0001(\u0001\u0012\u0012\n\nbytes_read\u0018\u0012 \u0001(\u0001\u0012\u0014\n\frecords_read\u0018\u0013 \u0001(\u0001\u0012\u0015\n\rbytes_written\u0018\u0014 \u0001(\u0001\u0012\u0017\n\u000frecords_written\u0018\u0015 \u0001(\u0001\u0012\u001a\n\u0012shuffle_read_bytes\u0018\u0016 \u0001(\u0001\u0012\u001c\n\u0014shuffle_records_read\u0018\u0017 \u0001(\u0001\u0012%\n\u001dshuffle_remote_blocks_fetched\u0018\u0018 \u0001(\u0001\u0012$\n\u001cshuffle_local_blocks_fetched\u0018\u0019 \u0001(\u0001\u0012\u001f\n\u0017shuffle_fetch_wait_time\u0018\u001a \u0001(\u0001\u0012!\n\u0019shuffle_remote_bytes_read\u0018\u001b \u0001(\u0001\u0012)\n!shuffle_remote_bytes_read_to_disk\u0018\u001c \u0001(\u0001\u0012$\n\u001cshuffle_total_blocks_fetched\u0018\u001d \u0001(\u0001\u0012\u001b\n\u0013shuffle_write_bytes\u0018\u001e \u0001(\u0001\u0012\u001d\n\u0015shuffle_write_records\u0018\u001f \u0001(\u0001\u0012\u001a\n\u0012shuffle_write_time\u0018  \u0001(\u0001\u0012+\n#shuffle_corrupt_merged_block_chunks\u0018! \u0001(\u0001\u0012+\n#shuffle_merged_fetch_fallback_count\u0018\" \u0001(\u0001\u0012,\n$shuffle_merged_remote_blocks_fetched\u0018# \u0001(\u0001\u0012+\n#shuffle_merged_local_blocks_fetched\u0018$ \u0001(\u0001\u0012,\n$shuffle_merged_remote_chunks_fetched\u0018% \u0001(\u0001\u0012+\n#shuffle_merged_local_chunks_fetched\u0018& \u0001(\u0001\u0012(\n shuffle_merged_remote_bytes_read\u0018' \u0001(\u0001\u0012'\n\u001fshuffle_merged_local_bytes_read\u0018( \u0001(\u0001\u0012$\n\u001cshuffle_remote_reqs_duration\u0018) \u0001(\u0001\u0012+\n#shuffle_merged_remote_reqs_duration\u0018* \u0001(\u0001B\u000b\n\t_quantile\"\u0097\u0001\n\u0017SpeculationStageSummary\u0012\u0011\n\tnum_tasks\u0018\u0001 \u0001(\u0005\u0012\u0018\n\u0010num_active_tasks\u0018\u0002 \u0001(\u0005\u0012\u001b\n\u0013num_completed_tasks\u0018\u0003 \u0001(\u0005\u0012\u0018\n\u0010num_failed_tasks\u0018\u0004 \u0001(\u0005\u0012\u0018\n\u0010num_killed_tasks\u0018\u0005 \u0001(\u0005\"\u0095\u0001\n\u001eSpeculationStageSummaryWrapper\u0012\u0010\n\bstage_id\u0018\u0001 \u0001(\u0003\u0012\u0018\n\u0010stage_attempt_id\u0018\u0002 \u0001(\u0005\u0012G\n\u0004info\u0018\u0003 \u0001(\u000b29.org.apache.spark.status.protobuf.SpeculationStageSummary\"¿\u0002\n\u000eProcessSummary\u0012\u000f\n\u0002id\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0016\n\thost_port\u0018\u0002 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0011\n\tis_active\u0018\u0003 \u0001(\b\u0012\u0013\n\u000btotal_cores\u0018\u0004 \u0001(\u0005\u0012\u0010\n\badd_time\u0018\u0005 \u0001(\u0003\u0012\u0018\n\u000bremove_time\u0018\u0006 \u0001(\u0003H\u0002\u0088\u0001\u0001\u0012W\n\fprocess_logs\u0018\u0007 \u0003(\u000b2A.org.apache.spark.status.protobuf.ProcessSummary.ProcessLogsEntry\u001a2\n\u0010ProcessLogsEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\t:\u00028\u0001B\u0005\n\u0003_idB\f\n\n_host_portB\u000e\n\f_remove_time\"W\n\u0015ProcessSummaryWrapper\u0012>\n\u0004info\u0018\u0001 \u0001(\u000b20.org.apache.spark.status.protobuf.ProcessSummary\"§\u0001\n\rMemoryMetrics\u0012#\n\u001bused_on_heap_storage_memory\u0018\u0001 \u0001(\u0003\u0012$\n\u001cused_off_heap_storage_memory\u0018\u0002 \u0001(\u0003\u0012$\n\u001ctotal_on_heap_storage_memory\u0018\u0003 \u0001(\u0003\u0012%\n\u001dtotal_off_heap_storage_memory\u0018\u0004 \u0001(\u0003\"D\n\u0013ResourceInformation\u0012\u0011\n\u0004name\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0011\n\taddresses\u0018\u0002 \u0003(\tB\u0007\n\u0005_name\"Í\n\n\u000fExecutorSummary\u0012\u000f\n\u0002id\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0016\n\thost_port\u0018\u0002 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0011\n\tis_active\u0018\u0003 \u0001(\b\u0012\u0012\n\nrdd_blocks\u0018\u0004 \u0001(\u0005\u0012\u0013\n\u000bmemory_used\u0018\u0005 \u0001(\u0003\u0012\u0011\n\tdisk_used\u0018\u0006 \u0001(\u0003\u0012\u0013\n\u000btotal_cores\u0018\u0007 \u0001(\u0005\u0012\u0011\n\tmax_tasks\u0018\b \u0001(\u0005\u0012\u0014\n\factive_tasks\u0018\t \u0001(\u0005\u0012\u0014\n\ffailed_tasks\u0018\n \u0001(\u0005\u0012\u0017\n\u000fcompleted_tasks\u0018\u000b \u0001(\u0005\u0012\u0013\n\u000btotal_tasks\u0018\f \u0001(\u0005\u0012\u0016\n\u000etotal_duration\u0018\r \u0001(\u0003\u0012\u0015\n\rtotal_gc_time\u0018\u000e \u0001(\u0003\u0012\u0019\n\u0011total_input_bytes\u0018\u000f \u0001(\u0003\u0012\u001a\n\u0012total_shuffle_read\u0018\u0010 \u0001(\u0003\u0012\u001b\n\u0013total_shuffle_write\u0018\u0011 \u0001(\u0003\u0012\u0016\n\u000eis_blacklisted\u0018\u0012 \u0001(\b\u0012\u0012\n\nmax_memory\u0018\u0013 \u0001(\u0003\u0012\u0010\n\badd_time\u0018\u0014 \u0001(\u0003\u0012\u0018\n\u000bremove_time\u0018\u0015 \u0001(\u0003H\u0002\u0088\u0001\u0001\u0012\u001a\n\rremove_reason\u0018\u0016 \u0001(\tH\u0003\u0088\u0001\u0001\u0012Z\n\rexecutor_logs\u0018\u0017 \u0003(\u000b2C.org.apache.spark.status.protobuf.ExecutorSummary.ExecutorLogsEntry\u0012L\n\u000ememory_metrics\u0018\u0018 \u0001(\u000b2/.org.apache.spark.status.protobuf.MemoryMetricsH\u0004\u0088\u0001\u0001\u0012\u001d\n\u0015blacklisted_in_stages\u0018\u0019 \u0003(\u0003\u0012S\n\u0013peak_memory_metrics\u0018\u001a \u0001(\u000b21.org.apache.spark.status.protobuf.ExecutorMetricsH\u0005\u0088\u0001\u0001\u0012U\n\nattributes\u0018\u001b \u0003(\u000b2A.org.apache.spark.status.protobuf.ExecutorSummary.AttributesEntry\u0012S\n\tresources\u0018\u001c \u0003(\u000b2@.org.apache.spark.status.protobuf.ExecutorSummary.ResourcesEntry\u0012\u001b\n\u0013resource_profile_id\u0018\u001d \u0001(\u0005\u0012\u0013\n\u000bis_excluded\u0018\u001e \u0001(\b\u0012\u001a\n\u0012excluded_in_stages\u0018\u001f \u0003(\u0003\u001a3\n\u0011ExecutorLogsEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\t:\u00028\u0001\u001a1\n\u000fAttributesEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\t:\u00028\u0001\u001ag\n\u000eResourcesEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012D\n\u0005value\u0018\u0002 \u0001(\u000b25.org.apache.spark.status.protobuf.ResourceInformation:\u00028\u0001B\u0005\n\u0003_idB\f\n\n_host_portB\u000e\n\f_remove_timeB\u0010\n\u000e_remove_reasonB\u0011\n\u000f_memory_metricsB\u0016\n\u0014_peak_memory_metrics\"Y\n\u0016ExecutorSummaryWrapper\u0012?\n\u0004info\u0018\u0001 \u0001(\u000b21.org.apache.spark.status.protobuf.ExecutorSummary\"m\n\rSQLPlanMetric\u0012\u0011\n\u0004name\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0016\n\u000eaccumulator_id\u0018\u0002 \u0001(\u0003\u0012\u0018\n\u000bmetric_type\u0018\u0003 \u0001(\tH\u0001\u0088\u0001\u0001B\u0007\n\u0005_nameB\u000e\n\f_metric_type\"£\u0007\n\u0012SQLExecutionUIData\u0012\u0014\n\fexecution_id\u0018\u0001 \u0001(\u0003\u0012\u0019\n\u0011root_execution_id\u0018\u0002 \u0001(\u0003\u0012\u0018\n\u000bdescription\u0018\u0003 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0014\n\u0007details\u0018\u0004 \u0001(\tH\u0001\u0088\u0001\u0001\u0012&\n\u0019physical_plan_description\u0018\u0005 \u0001(\tH\u0002\u0088\u0001\u0001\u0012c\n\u0010modified_configs\u0018\u0006 \u0003(\u000b2I.org.apache.spark.status.protobuf.SQLExecutionUIData.ModifiedConfigsEntry\u0012@\n\u0007metrics\u0018\u0007 \u0003(\u000b2/.org.apache.spark.status.protobuf.SQLPlanMetric\u0012\u0017\n\u000fsubmission_time\u0018\b \u0001(\u0003\u0012\u001c\n\u000fcompletion_time\u0018\t \u0001(\u0003H\u0003\u0088\u0001\u0001\u0012\u001a\n\rerror_message\u0018\n \u0001(\tH\u0004\u0088\u0001\u0001\u0012L\n\u0004jobs\u0018\u000b \u0003(\u000b2>.org.apache.spark.status.protobuf.SQLExecutionUIData.JobsEntry\u0012\u000e\n\u0006stages\u0018\f \u0003(\u0003\u0012\u001d\n\u0015metric_values_is_null\u0018\r \u0001(\b\u0012]\n\rmetric_values\u0018\u000e \u0003(\u000b2F.org.apache.spark.status.protobuf.SQLExecutionUIData.MetricValuesEntry\u001a6\n\u0014ModifiedConfigsEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\t:\u00028\u0001\u001aa\n\tJobsEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\u0003\u0012C\n\u0005value\u0018\u0002 \u0001(\u000e24.org.apache.spark.status.protobuf.JobExecutionStatus:\u00028\u0001\u001a3\n\u0011MetricValuesEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\u0003\u0012\r\n\u0005value\u0018\u0002 \u0001(\t:\u00028\u0001B\u000e\n\f_descriptionB\n\n\b_detailsB\u001c\n\u001a_physical_plan_descriptionB\u0012\n\u0010_completion_timeB\u0010\n\u000e_error_message\"\u009a\u0001\n\u0012SparkPlanGraphNode\u0012\n\n\u0002id\u0018\u0001 \u0001(\u0003\u0012\u0011\n\u0004name\u0018\u0002 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0011\n\u0004desc\u0018\u0003 \u0001(\tH\u0001\u0088\u0001\u0001\u0012@\n\u0007metrics\u0018\u0004 \u0003(\u000b2/.org.apache.spark.status.protobuf.SQLPlanMetricB\u0007\n\u0005_nameB\u0007\n\u0005_desc\"ð\u0001\n\u001cSparkPlanGraphClusterWrapper\u0012\n\n\u0002id\u0018\u0001 \u0001(\u0003\u0012\u0011\n\u0004name\u0018\u0002 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0011\n\u0004desc\u0018\u0003 \u0001(\tH\u0001\u0088\u0001\u0001\u0012J\n\u0005nodes\u0018\u0004 \u0003(\u000b2;.org.apache.spark.status.protobuf.SparkPlanGraphNodeWrapper\u0012@\n\u0007metrics\u0018\u0005 \u0003(\u000b2/.org.apache.spark.status.protobuf.SQLPlanMetricB\u0007\n\u0005_nameB\u0007\n\u0005_desc\"¿\u0001\n\u0019SparkPlanGraphNodeWrapper\u0012D\n\u0004node\u0018\u0001 \u0001(\u000b24.org.apache.spark.status.protobuf.SparkPlanGraphNodeH\u0000\u0012Q\n\u0007cluster\u0018\u0002 \u0001(\u000b2>.org.apache.spark.status.protobuf.SparkPlanGraphClusterWrapperH\u0000B\t\n\u0007wrapper\"4\n\u0012SparkPlanGraphEdge\u0012\u000f\n\u0007from_id\u0018\u0001 \u0001(\u0003\u0012\r\n\u0005to_id\u0018\u0002 \u0001(\u0003\"¾\u0001\n\u0015SparkPlanGraphWrapper\u0012\u0014\n\fexecution_id\u0018\u0001 \u0001(\u0003\u0012J\n\u0005nodes\u0018\u0002 \u0003(\u000b2;.org.apache.spark.status.protobuf.SparkPlanGraphNodeWrapper\u0012C\n\u0005edges\u0018\u0003 \u0003(\u000b24.org.apache.spark.status.protobuf.SparkPlanGraphEdge\"2\n\u0010RDDOperationEdge\u0012\u000f\n\u0007from_id\u0018\u0001 \u0001(\u0005\u0012\r\n\u0005to_id\u0018\u0002 \u0001(\u0005\"Ù\u0001\n\u0010RDDOperationNode\u0012\n\n\u0002id\u0018\u0001 \u0001(\u0005\u0012\u0011\n\u0004name\u0018\u0002 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u000e\n\u0006cached\u0018\u0003 \u0001(\b\u0012\u000f\n\u0007barrier\u0018\u0004 \u0001(\b\u0012\u0015\n\bcallsite\u0018\u0005 \u0001(\tH\u0001\u0088\u0001\u0001\u0012X\n\u001aoutput_deterministic_level\u0018\u0006 \u0001(\u000e24.org.apache.spark.status.protobuf.DeterministicLevelB\u0007\n\u0005_nameB\u000b\n\t_callsite\"ï\u0001\n\u001aRDDOperationClusterWrapper\u0012\u000f\n\u0002id\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0011\n\u0004name\u0018\u0002 \u0001(\tH\u0001\u0088\u0001\u0001\u0012G\n\u000bchild_nodes\u0018\u0003 \u0003(\u000b22.org.apache.spark.status.protobuf.RDDOperationNode\u0012T\n\u000echild_clusters\u0018\u0004 \u0003(\u000b2<.org.apache.spark.status.protobuf.RDDOperationClusterWrapperB\u0005\n\u0003_idB\u0007\n\u0005_name\"Û\u0002\n\u0018RDDOperationGraphWrapper\u0012\u0010\n\bstage_id\u0018\u0001 \u0001(\u0003\u0012A\n\u0005edges\u0018\u0002 \u0003(\u000b22.org.apache.spark.status.protobuf.RDDOperationEdge\u0012J\n\u000eoutgoing_edges\u0018\u0003 \u0003(\u000b22.org.apache.spark.status.protobuf.RDDOperationEdge\u0012J\n\u000eincoming_edges\u0018\u0004 \u0003(\u000b22.org.apache.spark.status.protobuf.RDDOperationEdge\u0012R\n\froot_cluster\u0018\u0005 \u0001(\u000b2<.org.apache.spark.status.protobuf.RDDOperationClusterWrapper\"è\u0001\n\u0012StreamingQueryData\u0012\u0011\n\u0004name\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u000f\n\u0002id\u0018\u0002 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0013\n\u0006run_id\u0018\u0003 \u0001(\tH\u0002\u0088\u0001\u0001\u0012\u0011\n\tis_active\u0018\u0004 \u0001(\b\u0012\u0016\n\texception\u0018\u0005 \u0001(\tH\u0003\u0088\u0001\u0001\u0012\u0017\n\u000fstart_timestamp\u0018\u0006 \u0001(\u0003\u0012\u001a\n\rend_timestamp\u0018\u0007 \u0001(\u0003H\u0004\u0088\u0001\u0001B\u0007\n\u0005_nameB\u0005\n\u0003_idB\t\n\u0007_run_idB\f\n\n_exceptionB\u0010\n\u000e_end_timestamp\"ã\u0001\n\u0010StageDataWrapper\u00129\n\u0004info\u0018\u0001 \u0001(\u000b2+.org.apache.spark.status.protobuf.StageData\u0012\u000f\n\u0007job_ids\u0018\u0002 \u0003(\u0003\u0012R\n\blocality\u0018\u0003 \u0003(\u000b2@.org.apache.spark.status.protobuf.StageDataWrapper.LocalityEntry\u001a/\n\rLocalityEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\"\u0084\u0006\n\bTaskData\u0012\u000f\n\u0007task_id\u0018\u0001 \u0001(\u0003\u0012\r\n\u0005index\u0018\u0002 \u0001(\u0005\u0012\u000f\n\u0007attempt\u0018\u0003 \u0001(\u0005\u0012\u0014\n\fpartition_id\u0018\u0004 \u0001(\u0005\u0012\u0013\n\u000blaunch_time\u0018\u0005 \u0001(\u0003\u0012\u001f\n\u0012result_fetch_start\u0018\u0006 \u0001(\u0003H\u0000\u0088\u0001\u0001\u0012\u0015\n\bduration\u0018\u0007 \u0001(\u0003H\u0001\u0088\u0001\u0001\u0012\u0018\n\u000bexecutor_id\u0018\b \u0001(\tH\u0002\u0088\u0001\u0001\u0012\u0011\n\u0004host\u0018\t \u0001(\tH\u0003\u0088\u0001\u0001\u0012\u0013\n\u0006status\u0018\n \u0001(\tH\u0004\u0088\u0001\u0001\u0012\u001a\n\rtask_locality\u0018\u000b \u0001(\tH\u0005\u0088\u0001\u0001\u0012\u0013\n\u000bspeculative\u0018\f \u0001(\b\u0012N\n\u0013accumulator_updates\u0018\r \u0003(\u000b21.org.apache.spark.status.protobuf.AccumulableInfo\u0012\u001a\n\rerror_message\u0018\u000e \u0001(\tH\u0006\u0088\u0001\u0001\u0012H\n\ftask_metrics\u0018\u000f \u0001(\u000b2-.org.apache.spark.status.protobuf.TaskMetricsH\u0007\u0088\u0001\u0001\u0012S\n\rexecutor_logs\u0018\u0010 \u0003(\u000b2<.org.apache.spark.status.protobuf.TaskData.ExecutorLogsEntry\u0012\u0017\n\u000fscheduler_delay\u0018\u0011 \u0001(\u0003\u0012\u001b\n\u0013getting_result_time\u0018\u0012 \u0001(\u0003\u001a3\n\u0011ExecutorLogsEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\t:\u00028\u0001B\u0015\n\u0013_result_fetch_startB\u000b\n\t_durationB\u000e\n\f_executor_idB\u0007\n\u0005_hostB\t\n\u0007_statusB\u0010\n\u000e_task_localityB\u0010\n\u000e_error_messageB\u000f\n\r_task_metrics\"æ\u0017\n\tStageData\u0012=\n\u0006status\u0018\u0001 \u0001(\u000e2-.org.apache.spark.status.protobuf.StageStatus\u0012\u0010\n\bstage_id\u0018\u0002 \u0001(\u0003\u0012\u0012\n\nattempt_id\u0018\u0003 \u0001(\u0005\u0012\u0011\n\tnum_tasks\u0018\u0004 \u0001(\u0005\u0012\u0018\n\u0010num_active_tasks\u0018\u0005 \u0001(\u0005\u0012\u001a\n\u0012num_complete_tasks\u0018\u0006 \u0001(\u0005\u0012\u0018\n\u0010num_failed_tasks\u0018\u0007 \u0001(\u0005\u0012\u0018\n\u0010num_killed_tasks\u0018\b \u0001(\u0005\u0012\u001d\n\u0015num_completed_indices\u0018\t \u0001(\u0005\u0012\u001c\n\u000fsubmission_time\u0018\n \u0001(\u0003H\u0000\u0088\u0001\u0001\u0012%\n\u0018first_task_launched_time\u0018\u000b \u0001(\u0003H\u0001\u0088\u0001\u0001\u0012\u001c\n\u000fcompletion_time\u0018\f \u0001(\u0003H\u0002\u0088\u0001\u0001\u0012\u001b\n\u000efailure_reason\u0018\r \u0001(\tH\u0003\u0088\u0001\u0001\u0012!\n\u0019executor_deserialize_time\u0018\u000e \u0001(\u0003\u0012%\n\u001dexecutor_deserialize_cpu_time\u0018\u000f \u0001(\u0003\u0012\u0019\n\u0011executor_run_time\u0018\u0010 \u0001(\u0003\u0012\u0019\n\u0011executor_cpu_time\u0018\u0011 \u0001(\u0003\u0012\u0013\n\u000bresult_size\u0018\u0012 \u0001(\u0003\u0012\u0013\n\u000bjvm_gc_time\u0018\u0013 \u0001(\u0003\u0012!\n\u0019result_serialization_time\u0018\u0014 \u0001(\u0003\u0012\u001c\n\u0014memory_bytes_spilled\u0018\u0015 \u0001(\u0003\u0012\u001a\n\u0012disk_bytes_spilled\u0018\u0016 \u0001(\u0003\u0012\u001d\n\u0015peak_execution_memory\u0018\u0017 \u0001(\u0003\u0012\u0013\n\u000binput_bytes\u0018\u0018 \u0001(\u0003\u0012\u0015\n\rinput_records\u0018\u0019 \u0001(\u0003\u0012\u0014\n\foutput_bytes\u0018\u001a \u0001(\u0003\u0012\u0016\n\u000eoutput_records\u0018\u001b \u0001(\u0003\u0012%\n\u001dshuffle_remote_blocks_fetched\u0018\u001c \u0001(\u0003\u0012$\n\u001cshuffle_local_blocks_f", "etched\u0018\u001d \u0001(\u0003\u0012\u001f\n\u0017shuffle_fetch_wait_time\u0018\u001e \u0001(\u0003\u0012!\n\u0019shuffle_remote_bytes_read\u0018\u001f \u0001(\u0003\u0012)\n!shuffle_remote_bytes_read_to_disk\u0018  \u0001(\u0003\u0012 \n\u0018shuffle_local_bytes_read\u0018! \u0001(\u0003\u0012\u001a\n\u0012shuffle_read_bytes\u0018\" \u0001(\u0003\u0012\u001c\n\u0014shuffle_read_records\u0018# \u0001(\u0003\u0012\u001b\n\u0013shuffle_write_bytes\u0018$ \u0001(\u0003\u0012\u001a\n\u0012shuffle_write_time\u0018% \u0001(\u0003\u0012\u001d\n\u0015shuffle_write_records\u0018& \u0001(\u0003\u0012\u0011\n\u0004name\u0018' \u0001(\tH\u0004\u0088\u0001\u0001\u0012\u0018\n\u000bdescription\u0018( \u0001(\tH\u0005\u0088\u0001\u0001\u0012\u0014\n\u0007details\u0018) \u0001(\tH\u0006\u0088\u0001\u0001\u0012\u001c\n\u000fscheduling_pool\u0018* \u0001(\tH\u0007\u0088\u0001\u0001\u0012\u000f\n\u0007rdd_ids\u0018+ \u0003(\u0003\u0012N\n\u0013accumulator_updates\u0018, \u0003(\u000b21.org.apache.spark.status.protobuf.AccumulableInfo\u0012E\n\u0005tasks\u0018- \u0003(\u000b26.org.apache.spark.status.protobuf.StageData.TasksEntry\u0012Z\n\u0010executor_summary\u0018. \u0003(\u000b2@.org.apache.spark.status.protobuf.StageData.ExecutorSummaryEntry\u0012[\n\u0013speculation_summary\u0018/ \u0001(\u000b29.org.apache.spark.status.protobuf.SpeculationStageSummaryH\b\u0088\u0001\u0001\u0012a\n\u0014killed_tasks_summary\u00180 \u0003(\u000b2C.org.apache.spark.status.protobuf.StageData.KilledTasksSummaryEntry\u0012\u001b\n\u0013resource_profile_id\u00181 \u0001(\u0005\u0012U\n\u0015peak_executor_metrics\u00182 \u0001(\u000b21.org.apache.spark.status.protobuf.ExecutorMetricsH\t\u0088\u0001\u0001\u0012b\n\u001atask_metrics_distributions\u00183 \u0001(\u000b29.org.apache.spark.status.protobuf.TaskMetricDistributionsH\n\u0088\u0001\u0001\u0012k\n\u001eexecutor_metrics_distributions\u00184 \u0001(\u000b2>.org.apache.spark.status.protobuf.ExecutorMetricsDistributionsH\u000b\u0088\u0001\u0001\u0012+\n#shuffle_corrupt_merged_block_chunks\u00185 \u0001(\u0003\u0012+\n#shuffle_merged_fetch_fallback_count\u00186 \u0001(\u0003\u0012,\n$shuffle_merged_remote_blocks_fetched\u00187 \u0001(\u0003\u0012+\n#shuffle_merged_local_blocks_fetched\u00188 \u0001(\u0003\u0012,\n$shuffle_merged_remote_chunks_fetched\u00189 \u0001(\u0003\u0012+\n#shuffle_merged_local_chunks_fetched\u0018: \u0001(\u0003\u0012(\n shuffle_merged_remote_bytes_read\u0018; \u0001(\u0003\u0012'\n\u001fshuffle_merged_local_bytes_read\u0018< \u0001(\u0003\u0012$\n\u001cshuffle_remote_reqs_duration\u0018= \u0001(\u0003\u0012+\n#shuffle_merged_remote_reqs_duration\u0018> \u0001(\u0003\u0012\u001f\n\u0017is_shuffle_push_enabled\u0018? \u0001(\b\u0012\u001d\n\u0015shuffle_mergers_count\u0018@ \u0001(\u0005\u001aX\n\nTasksEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\u0003\u00129\n\u0005value\u0018\u0002 \u0001(\u000b2*.org.apache.spark.status.protobuf.TaskData:\u00028\u0001\u001an\n\u0014ExecutorSummaryEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012E\n\u0005value\u0018\u0002 \u0001(\u000b26.org.apache.spark.status.protobuf.ExecutorStageSummary:\u00028\u0001\u001a9\n\u0017KilledTasksSummaryEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0005:\u00028\u0001B\u0012\n\u0010_submission_timeB\u001b\n\u0019_first_task_launched_timeB\u0012\n\u0010_completion_timeB\u0011\n\u000f_failure_reasonB\u0007\n\u0005_nameB\u000e\n\f_descriptionB\n\n\b_detailsB\u0012\n\u0010_scheduling_poolB\u0016\n\u0014_speculation_summaryB\u0018\n\u0016_peak_executor_metricsB\u001d\n\u001b_task_metrics_distributionsB!\n\u001f_executor_metrics_distributions\"í\u0004\n\u000bTaskMetrics\u0012!\n\u0019executor_deserialize_time\u0018\u0001 \u0001(\u0003\u0012%\n\u001dexecutor_deserialize_cpu_time\u0018\u0002 \u0001(\u0003\u0012\u0019\n\u0011executor_run_time\u0018\u0003 \u0001(\u0003\u0012\u0019\n\u0011executor_cpu_time\u0018\u0004 \u0001(\u0003\u0012\u0013\n\u000bresult_size\u0018\u0005 \u0001(\u0003\u0012\u0013\n\u000bjvm_gc_time\u0018\u0006 \u0001(\u0003\u0012!\n\u0019result_serialization_time\u0018\u0007 \u0001(\u0003\u0012\u001c\n\u0014memory_bytes_spilled\u0018\b \u0001(\u0003\u0012\u001a\n\u0012disk_bytes_spilled\u0018\t \u0001(\u0003\u0012\u001d\n\u0015peak_execution_memory\u0018\n \u0001(\u0003\u0012E\n\rinput_metrics\u0018\u000b \u0001(\u000b2..org.apache.spark.status.protobuf.InputMetrics\u0012G\n\u000eoutput_metrics\u0018\f \u0001(\u000b2/.org.apache.spark.status.protobuf.OutputMetrics\u0012R\n\u0014shuffle_read_metrics\u0018\r \u0001(\u000b24.org.apache.spark.status.protobuf.ShuffleReadMetrics\u0012T\n\u0015shuffle_write_metrics\u0018\u000e \u0001(\u000b25.org.apache.spark.status.protobuf.ShuffleWriteMetrics\"8\n\fInputMetrics\u0012\u0012\n\nbytes_read\u0018\u0001 \u0001(\u0003\u0012\u0014\n\frecords_read\u0018\u0002 \u0001(\u0003\"?\n\rOutputMetrics\u0012\u0015\n\rbytes_written\u0018\u0001 \u0001(\u0003\u0012\u0017\n\u000frecords_written\u0018\u0002 \u0001(\u0003\"Ó\u0002\n\u0012ShuffleReadMetrics\u0012\u001d\n\u0015remote_blocks_fetched\u0018\u0001 \u0001(\u0003\u0012\u001c\n\u0014local_blocks_fetched\u0018\u0002 \u0001(\u0003\u0012\u0017\n\u000ffetch_wait_time\u0018\u0003 \u0001(\u0003\u0012\u0019\n\u0011remote_bytes_read\u0018\u0004 \u0001(\u0003\u0012!\n\u0019remote_bytes_read_to_disk\u0018\u0005 \u0001(\u0003\u0012\u0018\n\u0010local_bytes_read\u0018\u0006 \u0001(\u0003\u0012\u0014\n\frecords_read\u0018\u0007 \u0001(\u0003\u0012\u001c\n\u0014remote_reqs_duration\u0018\b \u0001(\u0003\u0012[\n\u0019shuffle_push_read_metrics\u0018\t \u0001(\u000b28.org.apache.spark.status.protobuf.ShufflePushReadMetrics\"à\u0002\n\u0016ShufflePushReadMetrics\u0012#\n\u001bcorrupt_merged_block_chunks\u0018\u0001 \u0001(\u0003\u0012#\n\u001bmerged_fetch_fallback_count\u0018\u0002 \u0001(\u0003\u0012$\n\u001cremote_merged_blocks_fetched\u0018\u0003 \u0001(\u0003\u0012#\n\u001blocal_merged_blocks_fetched\u0018\u0004 \u0001(\u0003\u0012$\n\u001cremote_merged_chunks_fetched\u0018\u0005 \u0001(\u0003\u0012#\n\u001blocal_merged_chunks_fetched\u0018\u0006 \u0001(\u0003\u0012 \n\u0018remote_merged_bytes_read\u0018\u0007 \u0001(\u0003\u0012\u001f\n\u0017local_merged_bytes_read\u0018\b \u0001(\u0003\u0012#\n\u001bremote_merged_reqs_duration\u0018\t \u0001(\u0003\"Y\n\u0013ShuffleWriteMetrics\u0012\u0015\n\rbytes_written\u0018\u0001 \u0001(\u0003\u0012\u0012\n\nwrite_time\u0018\u0002 \u0001(\u0003\u0012\u0017\n\u000frecords_written\u0018\u0003 \u0001(\u0003\"\u0084\u0006\n\u0017TaskMetricDistributions\u0012\u0011\n\tquantiles\u0018\u0001 \u0003(\u0001\u0012\u0010\n\bduration\u0018\u0002 \u0003(\u0001\u0012!\n\u0019executor_deserialize_time\u0018\u0003 \u0003(\u0001\u0012%\n\u001dexecutor_deserialize_cpu_time\u0018\u0004 \u0003(\u0001\u0012\u0019\n\u0011executor_run_time\u0018\u0005 \u0003(\u0001\u0012\u0019\n\u0011executor_cpu_time\u0018\u0006 \u0003(\u0001\u0012\u0013\n\u000bresult_size\u0018\u0007 \u0003(\u0001\u0012\u0013\n\u000bjvm_gc_time\u0018\b \u0003(\u0001\u0012!\n\u0019result_serialization_time\u0018\t \u0003(\u0001\u0012\u001b\n\u0013getting_result_time\u0018\n \u0003(\u0001\u0012\u0017\n\u000fscheduler_delay\u0018\u000b \u0003(\u0001\u0012\u001d\n\u0015peak_execution_memory\u0018\f \u0003(\u0001\u0012\u001c\n\u0014memory_bytes_spilled\u0018\r \u0003(\u0001\u0012\u001a\n\u0012disk_bytes_spilled\u0018\u000e \u0003(\u0001\u0012Q\n\rinput_metrics\u0018\u000f \u0001(\u000b2:.org.apache.spark.status.protobuf.InputMetricDistributions\u0012S\n\u000eoutput_metrics\u0018\u0010 \u0001(\u000b2;.org.apache.spark.status.protobuf.OutputMetricDistributions\u0012^\n\u0014shuffle_read_metrics\u0018\u0011 \u0001(\u000b2@.org.apache.spark.status.protobuf.ShuffleReadMetricDistributions\u0012`\n\u0015shuffle_write_metrics\u0018\u0012 \u0001(\u000b2A.org.apache.spark.status.protobuf.ShuffleWriteMetricDistributions\"D\n\u0018InputMetricDistributions\u0012\u0012\n\nbytes_read\u0018\u0001 \u0003(\u0001\u0012\u0014\n\frecords_read\u0018\u0002 \u0003(\u0001\"K\n\u0019OutputMetricDistributions\u0012\u0015\n\rbytes_written\u0018\u0001 \u0003(\u0001\u0012\u0017\n\u000frecords_written\u0018\u0002 \u0003(\u0001\"\u0088\u0003\n\u001eShuffleReadMetricDistributions\u0012\u0012\n\nread_bytes\u0018\u0001 \u0003(\u0001\u0012\u0014\n\fread_records\u0018\u0002 \u0003(\u0001\u0012\u001d\n\u0015remote_blocks_fetched\u0018\u0003 \u0003(\u0001\u0012\u001c\n\u0014local_blocks_fetched\u0018\u0004 \u0003(\u0001\u0012\u0017\n\u000ffetch_wait_time\u0018\u0005 \u0003(\u0001\u0012\u0019\n\u0011remote_bytes_read\u0018\u0006 \u0003(\u0001\u0012!\n\u0019remote_bytes_read_to_disk\u0018\u0007 \u0003(\u0001\u0012\u001c\n\u0014total_blocks_fetched\u0018\b \u0003(\u0001\u0012\u001c\n\u0014remote_reqs_duration\u0018\t \u0003(\u0001\u0012l\n\u001eshuffle_push_read_metrics_dist\u0018\n \u0001(\u000b2D.org.apache.spark.status.protobuf.ShufflePushReadMetricDistributions\"ì\u0002\n\"ShufflePushReadMetricDistributions\u0012#\n\u001bcorrupt_merged_block_chunks\u0018\u0001 \u0003(\u0001\u0012#\n\u001bmerged_fetch_fallback_count\u0018\u0002 \u0003(\u0001\u0012$\n\u001cremote_merged_blocks_fetched\u0018\u0003 \u0003(\u0001\u0012#\n\u001blocal_merged_blocks_fetched\u0018\u0004 \u0003(\u0001\u0012$\n\u001cremote_merged_chunks_fetched\u0018\u0005 \u0003(\u0001\u0012#\n\u001blocal_merged_chunks_fetched\u0018\u0006 \u0003(\u0001\u0012 \n\u0018remote_merged_bytes_read\u0018\u0007 \u0003(\u0001\u0012\u001f\n\u0017local_merged_bytes_read\u0018\b \u0003(\u0001\u0012#\n\u001bremote_merged_reqs_duration\u0018\t \u0003(\u0001\"a\n\u001fShuffleWriteMetricDistributions\u0012\u0013\n\u000bwrite_bytes\u0018\u0001 \u0003(\u0001\u0012\u0015\n\rwrite_records\u0018\u0002 \u0003(\u0001\u0012\u0012\n\nwrite_time\u0018\u0003 \u0003(\u0001\"è\u0003\n\u001cExecutorMetricsDistributions\u0012\u0011\n\tquantiles\u0018\u0001 \u0003(\u0001\u0012\u0011\n\ttask_time\u0018\u0002 \u0003(\u0001\u0012\u0014\n\ffailed_tasks\u0018\u0003 \u0003(\u0001\u0012\u0017\n\u000fsucceeded_tasks\u0018\u0004 \u0003(\u0001\u0012\u0014\n\fkilled_tasks\u0018\u0005 \u0003(\u0001\u0012\u0013\n\u000binput_bytes\u0018\u0006 \u0003(\u0001\u0012\u0015\n\rinput_records\u0018\u0007 \u0003(\u0001\u0012\u0014\n\foutput_bytes\u0018\b \u0003(\u0001\u0012\u0016\n\u000eoutput_records\u0018\t \u0003(\u0001\u0012\u0014\n\fshuffle_read\u0018\n \u0003(\u0001\u0012\u001c\n\u0014shuffle_read_records\u0018\u000b \u0003(\u0001\u0012\u0015\n\rshuffle_write\u0018\f \u0003(\u0001\u0012\u001d\n\u0015shuffle_write_records\u0018\r \u0003(\u0001\u0012\u001c\n\u0014memory_bytes_spilled\u0018\u000e \u0003(\u0001\u0012\u001a\n\u0012disk_bytes_spilled\u0018\u000f \u0003(\u0001\u0012_\n\u0013peak_memory_metrics\u0018\u0010 \u0001(\u000b2B.org.apache.spark.status.protobuf.ExecutorPeakMetricsDistributions\"\u0082\u0001\n ExecutorPeakMetricsDistributions\u0012\u0011\n\tquantiles\u0018\u0001 \u0003(\u0001\u0012K\n\u0010executor_metrics\u0018\u0002 \u0003(\u000b21.org.apache.spark.status.protobuf.ExecutorMetrics\"F\n\nAppSummary\u0012\u001a\n\u0012num_completed_jobs\u0018\u0001 \u0001(\u0005\u0012\u001c\n\u0014num_completed_stages\u0018\u0002 \u0001(\u0005\"9\n\bPoolData\u0012\u0011\n\u0004name\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0011\n\tstage_ids\u0018\u0002 \u0003(\u0003B\u0007\n\u0005_name\"\u0083\u0004\n\u0015StateOperatorProgress\u0012\u001a\n\roperator_name\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0016\n\u000enum_rows_total\u0018\u0002 \u0001(\u0003\u0012\u0018\n\u0010num_rows_updated\u0018\u0003 \u0001(\u0003\u0012\u001b\n\u0013all_updates_time_ms\u0018\u0004 \u0001(\u0003\u0012\u0018\n\u0010num_rows_removed\u0018\u0005 \u0001(\u0003\u0012\u001c\n\u0014all_removals_time_ms\u0018\u0006 \u0001(\u0003\u0012\u0016\n\u000ecommit_time_ms\u0018\u0007 \u0001(\u0003\u0012\u0019\n\u0011memory_used_bytes\u0018\b \u0001(\u0003\u0012%\n\u001dnum_rows_dropped_by_watermark\u0018\t \u0001(\u0003\u0012\u001e\n\u0016num_shuffle_partitions\u0018\n \u0001(\u0003\u0012!\n\u0019num_state_store_instances\u0018\u000b \u0001(\u0003\u0012b\n\u000ecustom_metrics\u0018\f \u0003(\u000b2J.org.apache.spark.status.protobuf.StateOperatorProgress.CustomMetricsEntry\u001a4\n\u0012CustomMetricsEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001B\u0010\n\u000e_operator_name\"\u0096\u0003\n\u000eSourceProgress\u0012\u0018\n\u000bdescription\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0019\n\fstart_offset\u0018\u0002 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0017\n\nend_offset\u0018\u0003 \u0001(\tH\u0002\u0088\u0001\u0001\u0012\u001a\n\rlatest_offset\u0018\u0004 \u0001(\tH\u0003\u0088\u0001\u0001\u0012\u0016\n\u000enum_input_rows\u0018\u0005 \u0001(\u0003\u0012\u001d\n\u0015input_rows_per_second\u0018\u0006 \u0001(\u0001\u0012!\n\u0019processed_rows_per_second\u0018\u0007 \u0001(\u0001\u0012N\n\u0007metrics\u0018\b \u0003(\u000b2=.org.apache.spark.status.protobuf.SourceProgress.MetricsEntry\u001a.\n\fMetricsEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\t:\u00028\u0001B\u000e\n\f_descriptionB\u000f\n\r_start_offsetB\r\n\u000b_end_offsetB\u0010\n\u000e_latest_offset\"Ï\u0001\n\fSinkProgress\u0012\u0018\n\u000bdescription\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0017\n\u000fnum_output_rows\u0018\u0002 \u0001(\u0003\u0012L\n\u0007metrics\u0018\u0003 \u0003(\u000b2;.org.apache.spark.status.protobuf.SinkProgress.MetricsEntry\u001a.\n\fMetricsEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\t:\u00028\u0001B\u000e\n\f_description\"Ñ\u0006\n\u0016StreamingQueryProgress\u0012\u000f\n\u0002id\u0018\u0001 \u0001(\tH\u0000\u0088\u0001\u0001\u0012\u0013\n\u0006run_id\u0018\u0002 \u0001(\tH\u0001\u0088\u0001\u0001\u0012\u0011\n\u0004name\u0018\u0003 \u0001(\tH\u0002\u0088\u0001\u0001\u0012\u0016\n\ttimestamp\u0018\u0004 \u0001(\tH\u0003\u0088\u0001\u0001\u0012\u0010\n\bbatch_id\u0018\u0005 \u0001(\u0003\u0012\u0016\n\u000ebatch_duration\u0018\u0006 \u0001(\u0003\u0012]\n\u000bduration_ms\u0018\u0007 \u0003(\u000b2H.org.apache.spark.status.protobuf.StreamingQueryProgress.DurationMsEntry\u0012[\n\nevent_time\u0018\b \u0003(\u000b2G.org.apache.spark.status.protobuf.StreamingQueryProgress.EventTimeEntry\u0012P\n\u000fstate_operators\u0018\t \u0003(\u000b27.org.apache.spark.status.protobuf.StateOperatorProgress\u0012A\n\u0007sources\u0018\n \u0003(\u000b20.org.apache.spark.status.protobuf.SourceProgress\u0012<\n\u0004sink\u0018\u000b \u0001(\u000b2..org.apache.spark.status.protobuf.SinkProgress\u0012g\n\u0010observed_metrics\u0018\f \u0003(\u000b2M.org.apache.spark.status.protobuf.StreamingQueryProgress.ObservedMetricsEntry\u001a1\n\u000fDurationMsEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\u0003:\u00028\u0001\u001a0\n\u000eEventTimeEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\t:\u00028\u0001\u001a6\n\u0014ObservedMetricsEntry\u0012\u000b\n\u0003key\u0018\u0001 \u0001(\t\u0012\r\n\u0005value\u0018\u0002 \u0001(\t:\u00028\u0001B\u0005\n\u0003_idB\t\n\u0007_run_idB\u0007\n\u0005_nameB\f\n\n_timestamp\"k\n\u001dStreamingQueryProgressWrapper\u0012J\n\bprogress\u0018\u0001 \u0001(\u000b28.org.apache.spark.status.protobuf.StreamingQueryProgress*Ã\u0001\n\u0012JobExecutionStatus\u0012$\n JOB_EXECUTION_STATUS_UNSPECIFIED\u0010\u0000\u0012 \n\u001cJOB_EXECUTION_STATUS_RUNNING\u0010\u0001\u0012\"\n\u001eJOB_EXECUTION_STATUS_SUCCEEDED\u0010\u0002\u0012\u001f\n\u001bJOB_EXECUTION_STATUS_FAILED\u0010\u0003\u0012 \n\u001cJOB_EXECUTION_STATUS_UNKNOWN\u0010\u0004*¨\u0001\n\u0012DeterministicLevel\u0012#\n\u001fDETERMINISTIC_LEVEL_UNSPECIFIED\u0010\u0000\u0012#\n\u001fDETERMINISTIC_LEVEL_DETERMINATE\u0010\u0001\u0012!\n\u001dDETERMINISTIC_LEVEL_UNORDERED\u0010\u0002\u0012%\n!DETERMINISTIC_LEVEL_INDETERMINATE\u0010\u0003*¬\u0001\n\u000bStageStatus\u0012\u001c\n\u0018STAGE_STATUS_UNSPECIFIED\u0010\u0000\u0012\u0017\n\u0013STAGE_STATUS_ACTIVE\u0010\u0001\u0012\u0019\n\u0015STAGE_STATUS_COMPLETE\u0010\u0002\u0012\u0017\n\u0013STAGE_STATUS_FAILED\u0010\u0003\u0012\u0018\n\u0014STAGE_STATUS_PENDING\u0010\u0004\u0012\u0018\n\u0014STAGE_STATUS_SKIPPED\u0010\u0005b\u0006proto3"};
      descriptor = Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[0]);
      internal_static_org_apache_spark_status_protobuf_JobData_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_JobData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_JobData_descriptor, new String[]{"JobId", "Name", "Description", "SubmissionTime", "CompletionTime", "StageIds", "JobGroup", "JobTags", "Status", "NumTasks", "NumActiveTasks", "NumCompletedTasks", "NumSkippedTasks", "NumFailedTasks", "NumKilledTasks", "NumCompletedIndices", "NumActiveStages", "NumCompletedStages", "NumSkippedStages", "NumFailedStages", "KillTasksSummary"});
      internal_static_org_apache_spark_status_protobuf_JobData_KillTasksSummaryEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_JobData_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_JobData_KillTasksSummaryEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_JobData_KillTasksSummaryEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_JobDataWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(1);
      internal_static_org_apache_spark_status_protobuf_JobDataWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_JobDataWrapper_descriptor, new String[]{"Info", "SkippedStages", "SqlExecutionId"});
      internal_static_org_apache_spark_status_protobuf_AccumulableInfo_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(2);
      internal_static_org_apache_spark_status_protobuf_AccumulableInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_AccumulableInfo_descriptor, new String[]{"Id", "Name", "Update", "Value"});
      internal_static_org_apache_spark_status_protobuf_TaskDataWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(3);
      internal_static_org_apache_spark_status_protobuf_TaskDataWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_TaskDataWrapper_descriptor, new String[]{"TaskId", "Index", "Attempt", "PartitionId", "LaunchTime", "ResultFetchStart", "Duration", "ExecutorId", "Host", "Status", "TaskLocality", "Speculative", "AccumulatorUpdates", "ErrorMessage", "HasMetrics", "ExecutorDeserializeTime", "ExecutorDeserializeCpuTime", "ExecutorRunTime", "ExecutorCpuTime", "ResultSize", "JvmGcTime", "ResultSerializationTime", "MemoryBytesSpilled", "DiskBytesSpilled", "PeakExecutionMemory", "InputBytesRead", "InputRecordsRead", "OutputBytesWritten", "OutputRecordsWritten", "ShuffleRemoteBlocksFetched", "ShuffleLocalBlocksFetched", "ShuffleFetchWaitTime", "ShuffleRemoteBytesRead", "ShuffleRemoteBytesReadToDisk", "ShuffleLocalBytesRead", "ShuffleRecordsRead", "ShuffleBytesWritten", "ShuffleWriteTime", "ShuffleRecordsWritten", "StageId", "StageAttemptId", "ShuffleCorruptMergedBlockChunks", "ShuffleMergedFetchFallbackCount", "ShuffleMergedRemoteBlocksFetched", "ShuffleMergedLocalBlocksFetched", "ShuffleMergedRemoteChunksFetched", "ShuffleMergedLocalChunksFetched", "ShuffleMergedRemoteBytesRead", "ShuffleMergedLocalBytesRead", "ShuffleRemoteReqsDuration", "ShuffleMergedRemoteReqDuration"});
      internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(4);
      internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_descriptor, new String[]{"Metrics"});
      internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_MetricsEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_MetricsEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_MetricsEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_ExecutorStageSummary_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(5);
      internal_static_org_apache_spark_status_protobuf_ExecutorStageSummary_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorStageSummary_descriptor, new String[]{"TaskTime", "FailedTasks", "SucceededTasks", "KilledTasks", "InputBytes", "InputRecords", "OutputBytes", "OutputRecords", "ShuffleRead", "ShuffleReadRecords", "ShuffleWrite", "ShuffleWriteRecords", "MemoryBytesSpilled", "DiskBytesSpilled", "IsBlacklistedForStage", "PeakMemoryMetrics", "IsExcludedForStage"});
      internal_static_org_apache_spark_status_protobuf_ExecutorStageSummaryWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(6);
      internal_static_org_apache_spark_status_protobuf_ExecutorStageSummaryWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorStageSummaryWrapper_descriptor, new String[]{"StageId", "StageAttemptId", "ExecutorId", "Info"});
      internal_static_org_apache_spark_status_protobuf_ExecutorResourceRequest_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(7);
      internal_static_org_apache_spark_status_protobuf_ExecutorResourceRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorResourceRequest_descriptor, new String[]{"ResourceName", "Amount", "DiscoveryScript", "Vendor"});
      internal_static_org_apache_spark_status_protobuf_TaskResourceRequest_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(8);
      internal_static_org_apache_spark_status_protobuf_TaskResourceRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_TaskResourceRequest_descriptor, new String[]{"ResourceName", "Amount"});
      internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(9);
      internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_descriptor, new String[]{"Id", "ExecutorResources", "TaskResources"});
      internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_ExecutorResourcesEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_ExecutorResourcesEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_ExecutorResourcesEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_TaskResourcesEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_descriptor.getNestedTypes().get(1);
      internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_TaskResourcesEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_TaskResourcesEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_RuntimeInfo_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(10);
      internal_static_org_apache_spark_status_protobuf_RuntimeInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_RuntimeInfo_descriptor, new String[]{"JavaVersion", "JavaHome", "ScalaVersion"});
      internal_static_org_apache_spark_status_protobuf_PairStrings_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(11);
      internal_static_org_apache_spark_status_protobuf_PairStrings_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_PairStrings_descriptor, new String[]{"Value1", "Value2"});
      internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfo_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(12);
      internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfo_descriptor, new String[]{"Runtime", "SparkProperties", "HadoopProperties", "SystemProperties", "MetricsProperties", "ClasspathEntries", "ResourceProfiles"});
      internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfoWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(13);
      internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfoWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfoWrapper_descriptor, new String[]{"Info"});
      internal_static_org_apache_spark_status_protobuf_ApplicationAttemptInfo_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(14);
      internal_static_org_apache_spark_status_protobuf_ApplicationAttemptInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ApplicationAttemptInfo_descriptor, new String[]{"AttemptId", "StartTime", "EndTime", "LastUpdated", "Duration", "SparkUser", "Completed", "AppSparkVersion"});
      internal_static_org_apache_spark_status_protobuf_ApplicationInfo_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(15);
      internal_static_org_apache_spark_status_protobuf_ApplicationInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ApplicationInfo_descriptor, new String[]{"Id", "Name", "CoresGranted", "MaxCores", "CoresPerExecutor", "MemoryPerExecutorMb", "Attempts"});
      internal_static_org_apache_spark_status_protobuf_ApplicationInfoWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(16);
      internal_static_org_apache_spark_status_protobuf_ApplicationInfoWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ApplicationInfoWrapper_descriptor, new String[]{"Info"});
      internal_static_org_apache_spark_status_protobuf_StreamBlockData_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(17);
      internal_static_org_apache_spark_status_protobuf_StreamBlockData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StreamBlockData_descriptor, new String[]{"Name", "ExecutorId", "HostPort", "StorageLevel", "UseMemory", "UseDisk", "Deserialized", "MemSize", "DiskSize"});
      internal_static_org_apache_spark_status_protobuf_RDDDataDistribution_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(18);
      internal_static_org_apache_spark_status_protobuf_RDDDataDistribution_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_RDDDataDistribution_descriptor, new String[]{"Address", "MemoryUsed", "MemoryRemaining", "DiskUsed", "OnHeapMemoryUsed", "OffHeapMemoryUsed", "OnHeapMemoryRemaining", "OffHeapMemoryRemaining"});
      internal_static_org_apache_spark_status_protobuf_RDDPartitionInfo_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(19);
      internal_static_org_apache_spark_status_protobuf_RDDPartitionInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_RDDPartitionInfo_descriptor, new String[]{"BlockName", "StorageLevel", "MemoryUsed", "DiskUsed", "Executors"});
      internal_static_org_apache_spark_status_protobuf_RDDStorageInfo_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(20);
      internal_static_org_apache_spark_status_protobuf_RDDStorageInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_RDDStorageInfo_descriptor, new String[]{"Id", "Name", "NumPartitions", "NumCachedPartitions", "StorageLevel", "MemoryUsed", "DiskUsed", "DataDistribution", "Partitions"});
      internal_static_org_apache_spark_status_protobuf_RDDStorageInfoWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(21);
      internal_static_org_apache_spark_status_protobuf_RDDStorageInfoWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_RDDStorageInfoWrapper_descriptor, new String[]{"Info"});
      internal_static_org_apache_spark_status_protobuf_ResourceProfileWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(22);
      internal_static_org_apache_spark_status_protobuf_ResourceProfileWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ResourceProfileWrapper_descriptor, new String[]{"RpInfo"});
      internal_static_org_apache_spark_status_protobuf_CachedQuantile_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(23);
      internal_static_org_apache_spark_status_protobuf_CachedQuantile_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_CachedQuantile_descriptor, new String[]{"StageId", "StageAttemptId", "Quantile", "TaskCount", "Duration", "ExecutorDeserializeTime", "ExecutorDeserializeCpuTime", "ExecutorRunTime", "ExecutorCpuTime", "ResultSize", "JvmGcTime", "ResultSerializationTime", "GettingResultTime", "SchedulerDelay", "PeakExecutionMemory", "MemoryBytesSpilled", "DiskBytesSpilled", "BytesRead", "RecordsRead", "BytesWritten", "RecordsWritten", "ShuffleReadBytes", "ShuffleRecordsRead", "ShuffleRemoteBlocksFetched", "ShuffleLocalBlocksFetched", "ShuffleFetchWaitTime", "ShuffleRemoteBytesRead", "ShuffleRemoteBytesReadToDisk", "ShuffleTotalBlocksFetched", "ShuffleWriteBytes", "ShuffleWriteRecords", "ShuffleWriteTime", "ShuffleCorruptMergedBlockChunks", "ShuffleMergedFetchFallbackCount", "ShuffleMergedRemoteBlocksFetched", "ShuffleMergedLocalBlocksFetched", "ShuffleMergedRemoteChunksFetched", "ShuffleMergedLocalChunksFetched", "ShuffleMergedRemoteBytesRead", "ShuffleMergedLocalBytesRead", "ShuffleRemoteReqsDuration", "ShuffleMergedRemoteReqsDuration"});
      internal_static_org_apache_spark_status_protobuf_SpeculationStageSummary_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(24);
      internal_static_org_apache_spark_status_protobuf_SpeculationStageSummary_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SpeculationStageSummary_descriptor, new String[]{"NumTasks", "NumActiveTasks", "NumCompletedTasks", "NumFailedTasks", "NumKilledTasks"});
      internal_static_org_apache_spark_status_protobuf_SpeculationStageSummaryWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(25);
      internal_static_org_apache_spark_status_protobuf_SpeculationStageSummaryWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SpeculationStageSummaryWrapper_descriptor, new String[]{"StageId", "StageAttemptId", "Info"});
      internal_static_org_apache_spark_status_protobuf_ProcessSummary_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(26);
      internal_static_org_apache_spark_status_protobuf_ProcessSummary_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ProcessSummary_descriptor, new String[]{"Id", "HostPort", "IsActive", "TotalCores", "AddTime", "RemoveTime", "ProcessLogs"});
      internal_static_org_apache_spark_status_protobuf_ProcessSummary_ProcessLogsEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_ProcessSummary_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_ProcessSummary_ProcessLogsEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ProcessSummary_ProcessLogsEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_ProcessSummaryWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(27);
      internal_static_org_apache_spark_status_protobuf_ProcessSummaryWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ProcessSummaryWrapper_descriptor, new String[]{"Info"});
      internal_static_org_apache_spark_status_protobuf_MemoryMetrics_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(28);
      internal_static_org_apache_spark_status_protobuf_MemoryMetrics_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_MemoryMetrics_descriptor, new String[]{"UsedOnHeapStorageMemory", "UsedOffHeapStorageMemory", "TotalOnHeapStorageMemory", "TotalOffHeapStorageMemory"});
      internal_static_org_apache_spark_status_protobuf_ResourceInformation_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(29);
      internal_static_org_apache_spark_status_protobuf_ResourceInformation_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ResourceInformation_descriptor, new String[]{"Name", "Addresses"});
      internal_static_org_apache_spark_status_protobuf_ExecutorSummary_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(30);
      internal_static_org_apache_spark_status_protobuf_ExecutorSummary_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorSummary_descriptor, new String[]{"Id", "HostPort", "IsActive", "RddBlocks", "MemoryUsed", "DiskUsed", "TotalCores", "MaxTasks", "ActiveTasks", "FailedTasks", "CompletedTasks", "TotalTasks", "TotalDuration", "TotalGcTime", "TotalInputBytes", "TotalShuffleRead", "TotalShuffleWrite", "IsBlacklisted", "MaxMemory", "AddTime", "RemoveTime", "RemoveReason", "ExecutorLogs", "MemoryMetrics", "BlacklistedInStages", "PeakMemoryMetrics", "Attributes", "Resources", "ResourceProfileId", "IsExcluded", "ExcludedInStages"});
      internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ExecutorLogsEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_ExecutorSummary_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ExecutorLogsEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ExecutorLogsEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_ExecutorSummary_AttributesEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_ExecutorSummary_descriptor.getNestedTypes().get(1);
      internal_static_org_apache_spark_status_protobuf_ExecutorSummary_AttributesEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorSummary_AttributesEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ResourcesEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_ExecutorSummary_descriptor.getNestedTypes().get(2);
      internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ResourcesEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ResourcesEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_ExecutorSummaryWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(31);
      internal_static_org_apache_spark_status_protobuf_ExecutorSummaryWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorSummaryWrapper_descriptor, new String[]{"Info"});
      internal_static_org_apache_spark_status_protobuf_SQLPlanMetric_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(32);
      internal_static_org_apache_spark_status_protobuf_SQLPlanMetric_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SQLPlanMetric_descriptor, new String[]{"Name", "AccumulatorId", "MetricType"});
      internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(33);
      internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_descriptor, new String[]{"ExecutionId", "RootExecutionId", "Description", "Details", "PhysicalPlanDescription", "ModifiedConfigs", "Metrics", "SubmissionTime", "CompletionTime", "ErrorMessage", "Jobs", "Stages", "MetricValuesIsNull", "MetricValues"});
      internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_ModifiedConfigsEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_ModifiedConfigsEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_ModifiedConfigsEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_JobsEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_descriptor.getNestedTypes().get(1);
      internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_JobsEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_JobsEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_MetricValuesEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_descriptor.getNestedTypes().get(2);
      internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_MetricValuesEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_MetricValuesEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNode_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(34);
      internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNode_descriptor, new String[]{"Id", "Name", "Desc", "Metrics"});
      internal_static_org_apache_spark_status_protobuf_SparkPlanGraphClusterWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(35);
      internal_static_org_apache_spark_status_protobuf_SparkPlanGraphClusterWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SparkPlanGraphClusterWrapper_descriptor, new String[]{"Id", "Name", "Desc", "Nodes", "Metrics"});
      internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNodeWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(36);
      internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNodeWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNodeWrapper_descriptor, new String[]{"Node", "Cluster", "Wrapper"});
      internal_static_org_apache_spark_status_protobuf_SparkPlanGraphEdge_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(37);
      internal_static_org_apache_spark_status_protobuf_SparkPlanGraphEdge_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SparkPlanGraphEdge_descriptor, new String[]{"FromId", "ToId"});
      internal_static_org_apache_spark_status_protobuf_SparkPlanGraphWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(38);
      internal_static_org_apache_spark_status_protobuf_SparkPlanGraphWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SparkPlanGraphWrapper_descriptor, new String[]{"ExecutionId", "Nodes", "Edges"});
      internal_static_org_apache_spark_status_protobuf_RDDOperationEdge_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(39);
      internal_static_org_apache_spark_status_protobuf_RDDOperationEdge_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_RDDOperationEdge_descriptor, new String[]{"FromId", "ToId"});
      internal_static_org_apache_spark_status_protobuf_RDDOperationNode_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(40);
      internal_static_org_apache_spark_status_protobuf_RDDOperationNode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_RDDOperationNode_descriptor, new String[]{"Id", "Name", "Cached", "Barrier", "Callsite", "OutputDeterministicLevel"});
      internal_static_org_apache_spark_status_protobuf_RDDOperationClusterWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(41);
      internal_static_org_apache_spark_status_protobuf_RDDOperationClusterWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_RDDOperationClusterWrapper_descriptor, new String[]{"Id", "Name", "ChildNodes", "ChildClusters"});
      internal_static_org_apache_spark_status_protobuf_RDDOperationGraphWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(42);
      internal_static_org_apache_spark_status_protobuf_RDDOperationGraphWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_RDDOperationGraphWrapper_descriptor, new String[]{"StageId", "Edges", "OutgoingEdges", "IncomingEdges", "RootCluster"});
      internal_static_org_apache_spark_status_protobuf_StreamingQueryData_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(43);
      internal_static_org_apache_spark_status_protobuf_StreamingQueryData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StreamingQueryData_descriptor, new String[]{"Name", "Id", "RunId", "IsActive", "Exception", "StartTimestamp", "EndTimestamp"});
      internal_static_org_apache_spark_status_protobuf_StageDataWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(44);
      internal_static_org_apache_spark_status_protobuf_StageDataWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StageDataWrapper_descriptor, new String[]{"Info", "JobIds", "Locality"});
      internal_static_org_apache_spark_status_protobuf_StageDataWrapper_LocalityEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_StageDataWrapper_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_StageDataWrapper_LocalityEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StageDataWrapper_LocalityEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_TaskData_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(45);
      internal_static_org_apache_spark_status_protobuf_TaskData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_TaskData_descriptor, new String[]{"TaskId", "Index", "Attempt", "PartitionId", "LaunchTime", "ResultFetchStart", "Duration", "ExecutorId", "Host", "Status", "TaskLocality", "Speculative", "AccumulatorUpdates", "ErrorMessage", "TaskMetrics", "ExecutorLogs", "SchedulerDelay", "GettingResultTime"});
      internal_static_org_apache_spark_status_protobuf_TaskData_ExecutorLogsEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_TaskData_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_TaskData_ExecutorLogsEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_TaskData_ExecutorLogsEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_StageData_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(46);
      internal_static_org_apache_spark_status_protobuf_StageData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StageData_descriptor, new String[]{"Status", "StageId", "AttemptId", "NumTasks", "NumActiveTasks", "NumCompleteTasks", "NumFailedTasks", "NumKilledTasks", "NumCompletedIndices", "SubmissionTime", "FirstTaskLaunchedTime", "CompletionTime", "FailureReason", "ExecutorDeserializeTime", "ExecutorDeserializeCpuTime", "ExecutorRunTime", "ExecutorCpuTime", "ResultSize", "JvmGcTime", "ResultSerializationTime", "MemoryBytesSpilled", "DiskBytesSpilled", "PeakExecutionMemory", "InputBytes", "InputRecords", "OutputBytes", "OutputRecords", "ShuffleRemoteBlocksFetched", "ShuffleLocalBlocksFetched", "ShuffleFetchWaitTime", "ShuffleRemoteBytesRead", "ShuffleRemoteBytesReadToDisk", "ShuffleLocalBytesRead", "ShuffleReadBytes", "ShuffleReadRecords", "ShuffleWriteBytes", "ShuffleWriteTime", "ShuffleWriteRecords", "Name", "Description", "Details", "SchedulingPool", "RddIds", "AccumulatorUpdates", "Tasks", "ExecutorSummary", "SpeculationSummary", "KilledTasksSummary", "ResourceProfileId", "PeakExecutorMetrics", "TaskMetricsDistributions", "ExecutorMetricsDistributions", "ShuffleCorruptMergedBlockChunks", "ShuffleMergedFetchFallbackCount", "ShuffleMergedRemoteBlocksFetched", "ShuffleMergedLocalBlocksFetched", "ShuffleMergedRemoteChunksFetched", "ShuffleMergedLocalChunksFetched", "ShuffleMergedRemoteBytesRead", "ShuffleMergedLocalBytesRead", "ShuffleRemoteReqsDuration", "ShuffleMergedRemoteReqsDuration", "IsShufflePushEnabled", "ShuffleMergersCount"});
      internal_static_org_apache_spark_status_protobuf_StageData_TasksEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_StageData_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_StageData_TasksEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StageData_TasksEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_StageData_ExecutorSummaryEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_StageData_descriptor.getNestedTypes().get(1);
      internal_static_org_apache_spark_status_protobuf_StageData_ExecutorSummaryEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StageData_ExecutorSummaryEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_StageData_KilledTasksSummaryEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_StageData_descriptor.getNestedTypes().get(2);
      internal_static_org_apache_spark_status_protobuf_StageData_KilledTasksSummaryEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StageData_KilledTasksSummaryEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_TaskMetrics_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(47);
      internal_static_org_apache_spark_status_protobuf_TaskMetrics_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_TaskMetrics_descriptor, new String[]{"ExecutorDeserializeTime", "ExecutorDeserializeCpuTime", "ExecutorRunTime", "ExecutorCpuTime", "ResultSize", "JvmGcTime", "ResultSerializationTime", "MemoryBytesSpilled", "DiskBytesSpilled", "PeakExecutionMemory", "InputMetrics", "OutputMetrics", "ShuffleReadMetrics", "ShuffleWriteMetrics"});
      internal_static_org_apache_spark_status_protobuf_InputMetrics_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(48);
      internal_static_org_apache_spark_status_protobuf_InputMetrics_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_InputMetrics_descriptor, new String[]{"BytesRead", "RecordsRead"});
      internal_static_org_apache_spark_status_protobuf_OutputMetrics_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(49);
      internal_static_org_apache_spark_status_protobuf_OutputMetrics_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_OutputMetrics_descriptor, new String[]{"BytesWritten", "RecordsWritten"});
      internal_static_org_apache_spark_status_protobuf_ShuffleReadMetrics_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(50);
      internal_static_org_apache_spark_status_protobuf_ShuffleReadMetrics_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ShuffleReadMetrics_descriptor, new String[]{"RemoteBlocksFetched", "LocalBlocksFetched", "FetchWaitTime", "RemoteBytesRead", "RemoteBytesReadToDisk", "LocalBytesRead", "RecordsRead", "RemoteReqsDuration", "ShufflePushReadMetrics"});
      internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetrics_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(51);
      internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetrics_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetrics_descriptor, new String[]{"CorruptMergedBlockChunks", "MergedFetchFallbackCount", "RemoteMergedBlocksFetched", "LocalMergedBlocksFetched", "RemoteMergedChunksFetched", "LocalMergedChunksFetched", "RemoteMergedBytesRead", "LocalMergedBytesRead", "RemoteMergedReqsDuration"});
      internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetrics_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(52);
      internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetrics_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetrics_descriptor, new String[]{"BytesWritten", "WriteTime", "RecordsWritten"});
      internal_static_org_apache_spark_status_protobuf_TaskMetricDistributions_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(53);
      internal_static_org_apache_spark_status_protobuf_TaskMetricDistributions_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_TaskMetricDistributions_descriptor, new String[]{"Quantiles", "Duration", "ExecutorDeserializeTime", "ExecutorDeserializeCpuTime", "ExecutorRunTime", "ExecutorCpuTime", "ResultSize", "JvmGcTime", "ResultSerializationTime", "GettingResultTime", "SchedulerDelay", "PeakExecutionMemory", "MemoryBytesSpilled", "DiskBytesSpilled", "InputMetrics", "OutputMetrics", "ShuffleReadMetrics", "ShuffleWriteMetrics"});
      internal_static_org_apache_spark_status_protobuf_InputMetricDistributions_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(54);
      internal_static_org_apache_spark_status_protobuf_InputMetricDistributions_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_InputMetricDistributions_descriptor, new String[]{"BytesRead", "RecordsRead"});
      internal_static_org_apache_spark_status_protobuf_OutputMetricDistributions_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(55);
      internal_static_org_apache_spark_status_protobuf_OutputMetricDistributions_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_OutputMetricDistributions_descriptor, new String[]{"BytesWritten", "RecordsWritten"});
      internal_static_org_apache_spark_status_protobuf_ShuffleReadMetricDistributions_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(56);
      internal_static_org_apache_spark_status_protobuf_ShuffleReadMetricDistributions_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ShuffleReadMetricDistributions_descriptor, new String[]{"ReadBytes", "ReadRecords", "RemoteBlocksFetched", "LocalBlocksFetched", "FetchWaitTime", "RemoteBytesRead", "RemoteBytesReadToDisk", "TotalBlocksFetched", "RemoteReqsDuration", "ShufflePushReadMetricsDist"});
      internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetricDistributions_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(57);
      internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetricDistributions_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetricDistributions_descriptor, new String[]{"CorruptMergedBlockChunks", "MergedFetchFallbackCount", "RemoteMergedBlocksFetched", "LocalMergedBlocksFetched", "RemoteMergedChunksFetched", "LocalMergedChunksFetched", "RemoteMergedBytesRead", "LocalMergedBytesRead", "RemoteMergedReqsDuration"});
      internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetricDistributions_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(58);
      internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetricDistributions_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetricDistributions_descriptor, new String[]{"WriteBytes", "WriteRecords", "WriteTime"});
      internal_static_org_apache_spark_status_protobuf_ExecutorMetricsDistributions_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(59);
      internal_static_org_apache_spark_status_protobuf_ExecutorMetricsDistributions_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorMetricsDistributions_descriptor, new String[]{"Quantiles", "TaskTime", "FailedTasks", "SucceededTasks", "KilledTasks", "InputBytes", "InputRecords", "OutputBytes", "OutputRecords", "ShuffleRead", "ShuffleReadRecords", "ShuffleWrite", "ShuffleWriteRecords", "MemoryBytesSpilled", "DiskBytesSpilled", "PeakMemoryMetrics"});
      internal_static_org_apache_spark_status_protobuf_ExecutorPeakMetricsDistributions_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(60);
      internal_static_org_apache_spark_status_protobuf_ExecutorPeakMetricsDistributions_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_ExecutorPeakMetricsDistributions_descriptor, new String[]{"Quantiles", "ExecutorMetrics"});
      internal_static_org_apache_spark_status_protobuf_AppSummary_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(61);
      internal_static_org_apache_spark_status_protobuf_AppSummary_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_AppSummary_descriptor, new String[]{"NumCompletedJobs", "NumCompletedStages"});
      internal_static_org_apache_spark_status_protobuf_PoolData_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(62);
      internal_static_org_apache_spark_status_protobuf_PoolData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_PoolData_descriptor, new String[]{"Name", "StageIds"});
      internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(63);
      internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_descriptor, new String[]{"OperatorName", "NumRowsTotal", "NumRowsUpdated", "AllUpdatesTimeMs", "NumRowsRemoved", "AllRemovalsTimeMs", "CommitTimeMs", "MemoryUsedBytes", "NumRowsDroppedByWatermark", "NumShufflePartitions", "NumStateStoreInstances", "CustomMetrics"});
      internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_CustomMetricsEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_CustomMetricsEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_CustomMetricsEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_SourceProgress_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(64);
      internal_static_org_apache_spark_status_protobuf_SourceProgress_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SourceProgress_descriptor, new String[]{"Description", "StartOffset", "EndOffset", "LatestOffset", "NumInputRows", "InputRowsPerSecond", "ProcessedRowsPerSecond", "Metrics"});
      internal_static_org_apache_spark_status_protobuf_SourceProgress_MetricsEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_SourceProgress_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_SourceProgress_MetricsEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SourceProgress_MetricsEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_SinkProgress_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(65);
      internal_static_org_apache_spark_status_protobuf_SinkProgress_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SinkProgress_descriptor, new String[]{"Description", "NumOutputRows", "Metrics"});
      internal_static_org_apache_spark_status_protobuf_SinkProgress_MetricsEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_SinkProgress_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_SinkProgress_MetricsEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_SinkProgress_MetricsEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(66);
      internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_descriptor, new String[]{"Id", "RunId", "Name", "Timestamp", "BatchId", "BatchDuration", "DurationMs", "EventTime", "StateOperators", "Sources", "Sink", "ObservedMetrics"});
      internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_DurationMsEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_descriptor.getNestedTypes().get(0);
      internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_DurationMsEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_DurationMsEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_EventTimeEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_descriptor.getNestedTypes().get(1);
      internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_EventTimeEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_EventTimeEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_ObservedMetricsEntry_descriptor = (Descriptors.Descriptor)internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_descriptor.getNestedTypes().get(2);
      internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_ObservedMetricsEntry_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_ObservedMetricsEntry_descriptor, new String[]{"Key", "Value"});
      internal_static_org_apache_spark_status_protobuf_StreamingQueryProgressWrapper_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(67);
      internal_static_org_apache_spark_status_protobuf_StreamingQueryProgressWrapper_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_org_apache_spark_status_protobuf_StreamingQueryProgressWrapper_descriptor, new String[]{"Progress"});
      descriptor.resolveAllFeaturesImmutable();
   }

   public static enum JobExecutionStatus implements ProtocolMessageEnum {
      JOB_EXECUTION_STATUS_UNSPECIFIED(0),
      JOB_EXECUTION_STATUS_RUNNING(1),
      JOB_EXECUTION_STATUS_SUCCEEDED(2),
      JOB_EXECUTION_STATUS_FAILED(3),
      JOB_EXECUTION_STATUS_UNKNOWN(4),
      UNRECOGNIZED(-1);

      public static final int JOB_EXECUTION_STATUS_UNSPECIFIED_VALUE = 0;
      public static final int JOB_EXECUTION_STATUS_RUNNING_VALUE = 1;
      public static final int JOB_EXECUTION_STATUS_SUCCEEDED_VALUE = 2;
      public static final int JOB_EXECUTION_STATUS_FAILED_VALUE = 3;
      public static final int JOB_EXECUTION_STATUS_UNKNOWN_VALUE = 4;
      private static final Internal.EnumLiteMap internalValueMap;
      private static final JobExecutionStatus[] VALUES;
      private final int value;

      public final int getNumber() {
         if (this == UNRECOGNIZED) {
            throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
         } else {
            return this.value;
         }
      }

      /** @deprecated */
      @Deprecated
      public static JobExecutionStatus valueOf(int value) {
         return forNumber(value);
      }

      public static JobExecutionStatus forNumber(int value) {
         switch (value) {
            case 0 -> {
               return JOB_EXECUTION_STATUS_UNSPECIFIED;
            }
            case 1 -> {
               return JOB_EXECUTION_STATUS_RUNNING;
            }
            case 2 -> {
               return JOB_EXECUTION_STATUS_SUCCEEDED;
            }
            case 3 -> {
               return JOB_EXECUTION_STATUS_FAILED;
            }
            case 4 -> {
               return JOB_EXECUTION_STATUS_UNKNOWN;
            }
            default -> {
               return null;
            }
         }
      }

      public static Internal.EnumLiteMap internalGetValueMap() {
         return internalValueMap;
      }

      public final Descriptors.EnumValueDescriptor getValueDescriptor() {
         if (this == UNRECOGNIZED) {
            throw new IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
         } else {
            return (Descriptors.EnumValueDescriptor)getDescriptor().getValues().get(this.ordinal());
         }
      }

      public final Descriptors.EnumDescriptor getDescriptorForType() {
         return getDescriptor();
      }

      public static final Descriptors.EnumDescriptor getDescriptor() {
         return (Descriptors.EnumDescriptor)StoreTypes.getDescriptor().getEnumTypes().get(0);
      }

      public static JobExecutionStatus valueOf(Descriptors.EnumValueDescriptor desc) {
         if (desc.getType() != getDescriptor()) {
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
         } else {
            return desc.getIndex() == -1 ? UNRECOGNIZED : VALUES[desc.getIndex()];
         }
      }

      private JobExecutionStatus(int value) {
         this.value = value;
      }

      // $FF: synthetic method
      private static JobExecutionStatus[] $values() {
         return new JobExecutionStatus[]{JOB_EXECUTION_STATUS_UNSPECIFIED, JOB_EXECUTION_STATUS_RUNNING, JOB_EXECUTION_STATUS_SUCCEEDED, JOB_EXECUTION_STATUS_FAILED, JOB_EXECUTION_STATUS_UNKNOWN, UNRECOGNIZED};
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", JobExecutionStatus.class.getName());
         internalValueMap = new Internal.EnumLiteMap() {
            public JobExecutionStatus findValueByNumber(int number) {
               return StoreTypes.JobExecutionStatus.forNumber(number);
            }
         };
         VALUES = values();
      }
   }

   public static enum DeterministicLevel implements ProtocolMessageEnum {
      DETERMINISTIC_LEVEL_UNSPECIFIED(0),
      DETERMINISTIC_LEVEL_DETERMINATE(1),
      DETERMINISTIC_LEVEL_UNORDERED(2),
      DETERMINISTIC_LEVEL_INDETERMINATE(3),
      UNRECOGNIZED(-1);

      public static final int DETERMINISTIC_LEVEL_UNSPECIFIED_VALUE = 0;
      public static final int DETERMINISTIC_LEVEL_DETERMINATE_VALUE = 1;
      public static final int DETERMINISTIC_LEVEL_UNORDERED_VALUE = 2;
      public static final int DETERMINISTIC_LEVEL_INDETERMINATE_VALUE = 3;
      private static final Internal.EnumLiteMap internalValueMap;
      private static final DeterministicLevel[] VALUES;
      private final int value;

      public final int getNumber() {
         if (this == UNRECOGNIZED) {
            throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
         } else {
            return this.value;
         }
      }

      /** @deprecated */
      @Deprecated
      public static DeterministicLevel valueOf(int value) {
         return forNumber(value);
      }

      public static DeterministicLevel forNumber(int value) {
         switch (value) {
            case 0 -> {
               return DETERMINISTIC_LEVEL_UNSPECIFIED;
            }
            case 1 -> {
               return DETERMINISTIC_LEVEL_DETERMINATE;
            }
            case 2 -> {
               return DETERMINISTIC_LEVEL_UNORDERED;
            }
            case 3 -> {
               return DETERMINISTIC_LEVEL_INDETERMINATE;
            }
            default -> {
               return null;
            }
         }
      }

      public static Internal.EnumLiteMap internalGetValueMap() {
         return internalValueMap;
      }

      public final Descriptors.EnumValueDescriptor getValueDescriptor() {
         if (this == UNRECOGNIZED) {
            throw new IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
         } else {
            return (Descriptors.EnumValueDescriptor)getDescriptor().getValues().get(this.ordinal());
         }
      }

      public final Descriptors.EnumDescriptor getDescriptorForType() {
         return getDescriptor();
      }

      public static final Descriptors.EnumDescriptor getDescriptor() {
         return (Descriptors.EnumDescriptor)StoreTypes.getDescriptor().getEnumTypes().get(1);
      }

      public static DeterministicLevel valueOf(Descriptors.EnumValueDescriptor desc) {
         if (desc.getType() != getDescriptor()) {
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
         } else {
            return desc.getIndex() == -1 ? UNRECOGNIZED : VALUES[desc.getIndex()];
         }
      }

      private DeterministicLevel(int value) {
         this.value = value;
      }

      // $FF: synthetic method
      private static DeterministicLevel[] $values() {
         return new DeterministicLevel[]{DETERMINISTIC_LEVEL_UNSPECIFIED, DETERMINISTIC_LEVEL_DETERMINATE, DETERMINISTIC_LEVEL_UNORDERED, DETERMINISTIC_LEVEL_INDETERMINATE, UNRECOGNIZED};
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", DeterministicLevel.class.getName());
         internalValueMap = new Internal.EnumLiteMap() {
            public DeterministicLevel findValueByNumber(int number) {
               return StoreTypes.DeterministicLevel.forNumber(number);
            }
         };
         VALUES = values();
      }
   }

   public static enum StageStatus implements ProtocolMessageEnum {
      STAGE_STATUS_UNSPECIFIED(0),
      STAGE_STATUS_ACTIVE(1),
      STAGE_STATUS_COMPLETE(2),
      STAGE_STATUS_FAILED(3),
      STAGE_STATUS_PENDING(4),
      STAGE_STATUS_SKIPPED(5),
      UNRECOGNIZED(-1);

      public static final int STAGE_STATUS_UNSPECIFIED_VALUE = 0;
      public static final int STAGE_STATUS_ACTIVE_VALUE = 1;
      public static final int STAGE_STATUS_COMPLETE_VALUE = 2;
      public static final int STAGE_STATUS_FAILED_VALUE = 3;
      public static final int STAGE_STATUS_PENDING_VALUE = 4;
      public static final int STAGE_STATUS_SKIPPED_VALUE = 5;
      private static final Internal.EnumLiteMap internalValueMap;
      private static final StageStatus[] VALUES;
      private final int value;

      public final int getNumber() {
         if (this == UNRECOGNIZED) {
            throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
         } else {
            return this.value;
         }
      }

      /** @deprecated */
      @Deprecated
      public static StageStatus valueOf(int value) {
         return forNumber(value);
      }

      public static StageStatus forNumber(int value) {
         switch (value) {
            case 0 -> {
               return STAGE_STATUS_UNSPECIFIED;
            }
            case 1 -> {
               return STAGE_STATUS_ACTIVE;
            }
            case 2 -> {
               return STAGE_STATUS_COMPLETE;
            }
            case 3 -> {
               return STAGE_STATUS_FAILED;
            }
            case 4 -> {
               return STAGE_STATUS_PENDING;
            }
            case 5 -> {
               return STAGE_STATUS_SKIPPED;
            }
            default -> {
               return null;
            }
         }
      }

      public static Internal.EnumLiteMap internalGetValueMap() {
         return internalValueMap;
      }

      public final Descriptors.EnumValueDescriptor getValueDescriptor() {
         if (this == UNRECOGNIZED) {
            throw new IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
         } else {
            return (Descriptors.EnumValueDescriptor)getDescriptor().getValues().get(this.ordinal());
         }
      }

      public final Descriptors.EnumDescriptor getDescriptorForType() {
         return getDescriptor();
      }

      public static final Descriptors.EnumDescriptor getDescriptor() {
         return (Descriptors.EnumDescriptor)StoreTypes.getDescriptor().getEnumTypes().get(2);
      }

      public static StageStatus valueOf(Descriptors.EnumValueDescriptor desc) {
         if (desc.getType() != getDescriptor()) {
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
         } else {
            return desc.getIndex() == -1 ? UNRECOGNIZED : VALUES[desc.getIndex()];
         }
      }

      private StageStatus(int value) {
         this.value = value;
      }

      // $FF: synthetic method
      private static StageStatus[] $values() {
         return new StageStatus[]{STAGE_STATUS_UNSPECIFIED, STAGE_STATUS_ACTIVE, STAGE_STATUS_COMPLETE, STAGE_STATUS_FAILED, STAGE_STATUS_PENDING, STAGE_STATUS_SKIPPED, UNRECOGNIZED};
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", StageStatus.class.getName());
         internalValueMap = new Internal.EnumLiteMap() {
            public StageStatus findValueByNumber(int number) {
               return StoreTypes.StageStatus.forNumber(number);
            }
         };
         VALUES = values();
      }
   }

   public static final class JobData extends GeneratedMessage implements JobDataOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int JOB_ID_FIELD_NUMBER = 1;
      private long jobId_ = 0L;
      public static final int NAME_FIELD_NUMBER = 2;
      private volatile Object name_ = "";
      public static final int DESCRIPTION_FIELD_NUMBER = 3;
      private volatile Object description_ = "";
      public static final int SUBMISSION_TIME_FIELD_NUMBER = 4;
      private long submissionTime_ = 0L;
      public static final int COMPLETION_TIME_FIELD_NUMBER = 5;
      private long completionTime_ = 0L;
      public static final int STAGE_IDS_FIELD_NUMBER = 6;
      private Internal.LongList stageIds_ = emptyLongList();
      private int stageIdsMemoizedSerializedSize = -1;
      public static final int JOB_GROUP_FIELD_NUMBER = 7;
      private volatile Object jobGroup_ = "";
      public static final int JOB_TAGS_FIELD_NUMBER = 21;
      private LazyStringArrayList jobTags_ = LazyStringArrayList.emptyList();
      public static final int STATUS_FIELD_NUMBER = 8;
      private int status_ = 0;
      public static final int NUM_TASKS_FIELD_NUMBER = 9;
      private int numTasks_ = 0;
      public static final int NUM_ACTIVE_TASKS_FIELD_NUMBER = 10;
      private int numActiveTasks_ = 0;
      public static final int NUM_COMPLETED_TASKS_FIELD_NUMBER = 11;
      private int numCompletedTasks_ = 0;
      public static final int NUM_SKIPPED_TASKS_FIELD_NUMBER = 12;
      private int numSkippedTasks_ = 0;
      public static final int NUM_FAILED_TASKS_FIELD_NUMBER = 13;
      private int numFailedTasks_ = 0;
      public static final int NUM_KILLED_TASKS_FIELD_NUMBER = 14;
      private int numKilledTasks_ = 0;
      public static final int NUM_COMPLETED_INDICES_FIELD_NUMBER = 15;
      private int numCompletedIndices_ = 0;
      public static final int NUM_ACTIVE_STAGES_FIELD_NUMBER = 16;
      private int numActiveStages_ = 0;
      public static final int NUM_COMPLETED_STAGES_FIELD_NUMBER = 17;
      private int numCompletedStages_ = 0;
      public static final int NUM_SKIPPED_STAGES_FIELD_NUMBER = 18;
      private int numSkippedStages_ = 0;
      public static final int NUM_FAILED_STAGES_FIELD_NUMBER = 19;
      private int numFailedStages_ = 0;
      public static final int KILL_TASKS_SUMMARY_FIELD_NUMBER = 20;
      private MapField killTasksSummary_;
      private byte memoizedIsInitialized = -1;
      private static final JobData DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private JobData(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private JobData() {
         this.name_ = "";
         this.description_ = "";
         this.stageIds_ = emptyLongList();
         this.jobGroup_ = "";
         this.jobTags_ = LazyStringArrayList.emptyList();
         this.status_ = 0;
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_JobData_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 20 -> {
               return this.internalGetKillTasksSummary();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_JobData_fieldAccessorTable.ensureFieldAccessorsInitialized(JobData.class, Builder.class);
      }

      public long getJobId() {
         return this.jobId_;
      }

      public boolean hasName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasDescription() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getDescription() {
         Object ref = this.description_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.description_ = s;
            return s;
         }
      }

      public ByteString getDescriptionBytes() {
         Object ref = this.description_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.description_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasSubmissionTime() {
         return (this.bitField0_ & 4) != 0;
      }

      public long getSubmissionTime() {
         return this.submissionTime_;
      }

      public boolean hasCompletionTime() {
         return (this.bitField0_ & 8) != 0;
      }

      public long getCompletionTime() {
         return this.completionTime_;
      }

      public List getStageIdsList() {
         return this.stageIds_;
      }

      public int getStageIdsCount() {
         return this.stageIds_.size();
      }

      public long getStageIds(int index) {
         return this.stageIds_.getLong(index);
      }

      public boolean hasJobGroup() {
         return (this.bitField0_ & 16) != 0;
      }

      public String getJobGroup() {
         Object ref = this.jobGroup_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.jobGroup_ = s;
            return s;
         }
      }

      public ByteString getJobGroupBytes() {
         Object ref = this.jobGroup_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.jobGroup_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public ProtocolStringList getJobTagsList() {
         return this.jobTags_;
      }

      public int getJobTagsCount() {
         return this.jobTags_.size();
      }

      public String getJobTags(int index) {
         return this.jobTags_.get(index);
      }

      public ByteString getJobTagsBytes(int index) {
         return this.jobTags_.getByteString(index);
      }

      public int getStatusValue() {
         return this.status_;
      }

      public JobExecutionStatus getStatus() {
         JobExecutionStatus result = StoreTypes.JobExecutionStatus.forNumber(this.status_);
         return result == null ? StoreTypes.JobExecutionStatus.UNRECOGNIZED : result;
      }

      public int getNumTasks() {
         return this.numTasks_;
      }

      public int getNumActiveTasks() {
         return this.numActiveTasks_;
      }

      public int getNumCompletedTasks() {
         return this.numCompletedTasks_;
      }

      public int getNumSkippedTasks() {
         return this.numSkippedTasks_;
      }

      public int getNumFailedTasks() {
         return this.numFailedTasks_;
      }

      public int getNumKilledTasks() {
         return this.numKilledTasks_;
      }

      public int getNumCompletedIndices() {
         return this.numCompletedIndices_;
      }

      public int getNumActiveStages() {
         return this.numActiveStages_;
      }

      public int getNumCompletedStages() {
         return this.numCompletedStages_;
      }

      public int getNumSkippedStages() {
         return this.numSkippedStages_;
      }

      public int getNumFailedStages() {
         return this.numFailedStages_;
      }

      private MapField internalGetKillTasksSummary() {
         return this.killTasksSummary_ == null ? MapField.emptyMapField(StoreTypes.JobData.KillTasksSummaryDefaultEntryHolder.defaultEntry) : this.killTasksSummary_;
      }

      public int getKillTasksSummaryCount() {
         return this.internalGetKillTasksSummary().getMap().size();
      }

      public boolean containsKillTasksSummary(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetKillTasksSummary().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getKillTasksSummary() {
         return this.getKillTasksSummaryMap();
      }

      public Map getKillTasksSummaryMap() {
         return this.internalGetKillTasksSummary().getMap();
      }

      public int getKillTasksSummaryOrDefault(String key, int defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Integer> map = this.internalGetKillTasksSummary().getMap();
            return map.containsKey(key) ? (Integer)map.get(key) : defaultValue;
         }
      }

      public int getKillTasksSummaryOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Integer> map = this.internalGetKillTasksSummary().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (Integer)map.get(key);
            }
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if (this.jobId_ != 0L) {
            output.writeInt64(1, this.jobId_);
         }

         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 2, this.name_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 3, this.description_);
         }

         if ((this.bitField0_ & 4) != 0) {
            output.writeInt64(4, this.submissionTime_);
         }

         if ((this.bitField0_ & 8) != 0) {
            output.writeInt64(5, this.completionTime_);
         }

         if (this.getStageIdsList().size() > 0) {
            output.writeUInt32NoTag(50);
            output.writeUInt32NoTag(this.stageIdsMemoizedSerializedSize);
         }

         for(int i = 0; i < this.stageIds_.size(); ++i) {
            output.writeInt64NoTag(this.stageIds_.getLong(i));
         }

         if ((this.bitField0_ & 16) != 0) {
            GeneratedMessage.writeString(output, 7, this.jobGroup_);
         }

         if (this.status_ != StoreTypes.JobExecutionStatus.JOB_EXECUTION_STATUS_UNSPECIFIED.getNumber()) {
            output.writeEnum(8, this.status_);
         }

         if (this.numTasks_ != 0) {
            output.writeInt32(9, this.numTasks_);
         }

         if (this.numActiveTasks_ != 0) {
            output.writeInt32(10, this.numActiveTasks_);
         }

         if (this.numCompletedTasks_ != 0) {
            output.writeInt32(11, this.numCompletedTasks_);
         }

         if (this.numSkippedTasks_ != 0) {
            output.writeInt32(12, this.numSkippedTasks_);
         }

         if (this.numFailedTasks_ != 0) {
            output.writeInt32(13, this.numFailedTasks_);
         }

         if (this.numKilledTasks_ != 0) {
            output.writeInt32(14, this.numKilledTasks_);
         }

         if (this.numCompletedIndices_ != 0) {
            output.writeInt32(15, this.numCompletedIndices_);
         }

         if (this.numActiveStages_ != 0) {
            output.writeInt32(16, this.numActiveStages_);
         }

         if (this.numCompletedStages_ != 0) {
            output.writeInt32(17, this.numCompletedStages_);
         }

         if (this.numSkippedStages_ != 0) {
            output.writeInt32(18, this.numSkippedStages_);
         }

         if (this.numFailedStages_ != 0) {
            output.writeInt32(19, this.numFailedStages_);
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetKillTasksSummary(), StoreTypes.JobData.KillTasksSummaryDefaultEntryHolder.defaultEntry, 20);

         for(int i = 0; i < this.jobTags_.size(); ++i) {
            GeneratedMessage.writeString(output, 21, this.jobTags_.getRaw(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.jobId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.jobId_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.name_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.description_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += CodedOutputStream.computeInt64Size(4, this.submissionTime_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += CodedOutputStream.computeInt64Size(5, this.completionTime_);
            }

            int dataSize = 0;

            for(int i = 0; i < this.stageIds_.size(); ++i) {
               dataSize += CodedOutputStream.computeInt64SizeNoTag(this.stageIds_.getLong(i));
            }

            size += dataSize;
            if (!this.getStageIdsList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.stageIdsMemoizedSerializedSize = dataSize;
            if ((this.bitField0_ & 16) != 0) {
               size += GeneratedMessage.computeStringSize(7, this.jobGroup_);
            }

            if (this.status_ != StoreTypes.JobExecutionStatus.JOB_EXECUTION_STATUS_UNSPECIFIED.getNumber()) {
               size += CodedOutputStream.computeEnumSize(8, this.status_);
            }

            if (this.numTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(9, this.numTasks_);
            }

            if (this.numActiveTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(10, this.numActiveTasks_);
            }

            if (this.numCompletedTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(11, this.numCompletedTasks_);
            }

            if (this.numSkippedTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(12, this.numSkippedTasks_);
            }

            if (this.numFailedTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(13, this.numFailedTasks_);
            }

            if (this.numKilledTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(14, this.numKilledTasks_);
            }

            if (this.numCompletedIndices_ != 0) {
               size += CodedOutputStream.computeInt32Size(15, this.numCompletedIndices_);
            }

            if (this.numActiveStages_ != 0) {
               size += CodedOutputStream.computeInt32Size(16, this.numActiveStages_);
            }

            if (this.numCompletedStages_ != 0) {
               size += CodedOutputStream.computeInt32Size(17, this.numCompletedStages_);
            }

            if (this.numSkippedStages_ != 0) {
               size += CodedOutputStream.computeInt32Size(18, this.numSkippedStages_);
            }

            if (this.numFailedStages_ != 0) {
               size += CodedOutputStream.computeInt32Size(19, this.numFailedStages_);
            }

            for(Map.Entry entry : this.internalGetKillTasksSummary().getMap().entrySet()) {
               MapEntry<String, Integer> killTasksSummary__ = StoreTypes.JobData.KillTasksSummaryDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((Integer)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(20, killTasksSummary__);
            }

            dataSize = 0;

            for(int i = 0; i < this.jobTags_.size(); ++i) {
               dataSize += computeStringSizeNoTag(this.jobTags_.getRaw(i));
            }

            size += dataSize;
            size += 2 * this.getJobTagsList().size();
            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof JobData)) {
            return super.equals(obj);
         } else {
            JobData other = (JobData)obj;
            if (this.getJobId() != other.getJobId()) {
               return false;
            } else if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.hasDescription() != other.hasDescription()) {
               return false;
            } else if (this.hasDescription() && !this.getDescription().equals(other.getDescription())) {
               return false;
            } else if (this.hasSubmissionTime() != other.hasSubmissionTime()) {
               return false;
            } else if (this.hasSubmissionTime() && this.getSubmissionTime() != other.getSubmissionTime()) {
               return false;
            } else if (this.hasCompletionTime() != other.hasCompletionTime()) {
               return false;
            } else if (this.hasCompletionTime() && this.getCompletionTime() != other.getCompletionTime()) {
               return false;
            } else if (!this.getStageIdsList().equals(other.getStageIdsList())) {
               return false;
            } else if (this.hasJobGroup() != other.hasJobGroup()) {
               return false;
            } else if (this.hasJobGroup() && !this.getJobGroup().equals(other.getJobGroup())) {
               return false;
            } else if (!this.getJobTagsList().equals(other.getJobTagsList())) {
               return false;
            } else if (this.status_ != other.status_) {
               return false;
            } else if (this.getNumTasks() != other.getNumTasks()) {
               return false;
            } else if (this.getNumActiveTasks() != other.getNumActiveTasks()) {
               return false;
            } else if (this.getNumCompletedTasks() != other.getNumCompletedTasks()) {
               return false;
            } else if (this.getNumSkippedTasks() != other.getNumSkippedTasks()) {
               return false;
            } else if (this.getNumFailedTasks() != other.getNumFailedTasks()) {
               return false;
            } else if (this.getNumKilledTasks() != other.getNumKilledTasks()) {
               return false;
            } else if (this.getNumCompletedIndices() != other.getNumCompletedIndices()) {
               return false;
            } else if (this.getNumActiveStages() != other.getNumActiveStages()) {
               return false;
            } else if (this.getNumCompletedStages() != other.getNumCompletedStages()) {
               return false;
            } else if (this.getNumSkippedStages() != other.getNumSkippedStages()) {
               return false;
            } else if (this.getNumFailedStages() != other.getNumFailedStages()) {
               return false;
            } else if (!this.internalGetKillTasksSummary().equals(other.internalGetKillTasksSummary())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getJobId());
            if (this.hasName()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.hasDescription()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getDescription().hashCode();
            }

            if (this.hasSubmissionTime()) {
               hash = 37 * hash + 4;
               hash = 53 * hash + Internal.hashLong(this.getSubmissionTime());
            }

            if (this.hasCompletionTime()) {
               hash = 37 * hash + 5;
               hash = 53 * hash + Internal.hashLong(this.getCompletionTime());
            }

            if (this.getStageIdsCount() > 0) {
               hash = 37 * hash + 6;
               hash = 53 * hash + this.getStageIdsList().hashCode();
            }

            if (this.hasJobGroup()) {
               hash = 37 * hash + 7;
               hash = 53 * hash + this.getJobGroup().hashCode();
            }

            if (this.getJobTagsCount() > 0) {
               hash = 37 * hash + 21;
               hash = 53 * hash + this.getJobTagsList().hashCode();
            }

            hash = 37 * hash + 8;
            hash = 53 * hash + this.status_;
            hash = 37 * hash + 9;
            hash = 53 * hash + this.getNumTasks();
            hash = 37 * hash + 10;
            hash = 53 * hash + this.getNumActiveTasks();
            hash = 37 * hash + 11;
            hash = 53 * hash + this.getNumCompletedTasks();
            hash = 37 * hash + 12;
            hash = 53 * hash + this.getNumSkippedTasks();
            hash = 37 * hash + 13;
            hash = 53 * hash + this.getNumFailedTasks();
            hash = 37 * hash + 14;
            hash = 53 * hash + this.getNumKilledTasks();
            hash = 37 * hash + 15;
            hash = 53 * hash + this.getNumCompletedIndices();
            hash = 37 * hash + 16;
            hash = 53 * hash + this.getNumActiveStages();
            hash = 37 * hash + 17;
            hash = 53 * hash + this.getNumCompletedStages();
            hash = 37 * hash + 18;
            hash = 53 * hash + this.getNumSkippedStages();
            hash = 37 * hash + 19;
            hash = 53 * hash + this.getNumFailedStages();
            if (!this.internalGetKillTasksSummary().getMap().isEmpty()) {
               hash = 37 * hash + 20;
               hash = 53 * hash + this.internalGetKillTasksSummary().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static JobData parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (JobData)PARSER.parseFrom(data);
      }

      public static JobData parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (JobData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static JobData parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (JobData)PARSER.parseFrom(data);
      }

      public static JobData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (JobData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static JobData parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (JobData)PARSER.parseFrom(data);
      }

      public static JobData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (JobData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static JobData parseFrom(InputStream input) throws IOException {
         return (JobData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static JobData parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (JobData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static JobData parseDelimitedFrom(InputStream input) throws IOException {
         return (JobData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static JobData parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (JobData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static JobData parseFrom(CodedInputStream input) throws IOException {
         return (JobData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static JobData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (JobData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(JobData prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static JobData getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public JobData getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", JobData.class.getName());
         DEFAULT_INSTANCE = new JobData();
         PARSER = new AbstractParser() {
            public JobData parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.JobData.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      private static final class KillTasksSummaryDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_JobData_KillTasksSummaryEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT32, 0);
         }
      }

      public static final class Builder extends GeneratedMessage.Builder implements JobDataOrBuilder {
         private int bitField0_;
         private long jobId_;
         private Object name_ = "";
         private Object description_ = "";
         private long submissionTime_;
         private long completionTime_;
         private Internal.LongList stageIds_ = StoreTypes.JobData.emptyLongList();
         private Object jobGroup_ = "";
         private LazyStringArrayList jobTags_ = LazyStringArrayList.emptyList();
         private int status_ = 0;
         private int numTasks_;
         private int numActiveTasks_;
         private int numCompletedTasks_;
         private int numSkippedTasks_;
         private int numFailedTasks_;
         private int numKilledTasks_;
         private int numCompletedIndices_;
         private int numActiveStages_;
         private int numCompletedStages_;
         private int numSkippedStages_;
         private int numFailedStages_;
         private MapField killTasksSummary_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_JobData_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 20 -> {
                  return this.internalGetKillTasksSummary();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 20 -> {
                  return this.internalGetMutableKillTasksSummary();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_JobData_fieldAccessorTable.ensureFieldAccessorsInitialized(JobData.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.jobId_ = 0L;
            this.name_ = "";
            this.description_ = "";
            this.submissionTime_ = 0L;
            this.completionTime_ = 0L;
            this.stageIds_ = StoreTypes.JobData.emptyLongList();
            this.jobGroup_ = "";
            this.jobTags_ = LazyStringArrayList.emptyList();
            this.status_ = 0;
            this.numTasks_ = 0;
            this.numActiveTasks_ = 0;
            this.numCompletedTasks_ = 0;
            this.numSkippedTasks_ = 0;
            this.numFailedTasks_ = 0;
            this.numKilledTasks_ = 0;
            this.numCompletedIndices_ = 0;
            this.numActiveStages_ = 0;
            this.numCompletedStages_ = 0;
            this.numSkippedStages_ = 0;
            this.numFailedStages_ = 0;
            this.internalGetMutableKillTasksSummary().clear();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_JobData_descriptor;
         }

         public JobData getDefaultInstanceForType() {
            return StoreTypes.JobData.getDefaultInstance();
         }

         public JobData build() {
            JobData result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public JobData buildPartial() {
            JobData result = new JobData(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(JobData result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.jobId_ = this.jobId_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 2) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.description_ = this.description_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.submissionTime_ = this.submissionTime_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.completionTime_ = this.completionTime_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 32) != 0) {
               this.stageIds_.makeImmutable();
               result.stageIds_ = this.stageIds_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.jobGroup_ = this.jobGroup_;
               to_bitField0_ |= 16;
            }

            if ((from_bitField0_ & 128) != 0) {
               this.jobTags_.makeImmutable();
               result.jobTags_ = this.jobTags_;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.status_ = this.status_;
            }

            if ((from_bitField0_ & 512) != 0) {
               result.numTasks_ = this.numTasks_;
            }

            if ((from_bitField0_ & 1024) != 0) {
               result.numActiveTasks_ = this.numActiveTasks_;
            }

            if ((from_bitField0_ & 2048) != 0) {
               result.numCompletedTasks_ = this.numCompletedTasks_;
            }

            if ((from_bitField0_ & 4096) != 0) {
               result.numSkippedTasks_ = this.numSkippedTasks_;
            }

            if ((from_bitField0_ & 8192) != 0) {
               result.numFailedTasks_ = this.numFailedTasks_;
            }

            if ((from_bitField0_ & 16384) != 0) {
               result.numKilledTasks_ = this.numKilledTasks_;
            }

            if ((from_bitField0_ & '耀') != 0) {
               result.numCompletedIndices_ = this.numCompletedIndices_;
            }

            if ((from_bitField0_ & 65536) != 0) {
               result.numActiveStages_ = this.numActiveStages_;
            }

            if ((from_bitField0_ & 131072) != 0) {
               result.numCompletedStages_ = this.numCompletedStages_;
            }

            if ((from_bitField0_ & 262144) != 0) {
               result.numSkippedStages_ = this.numSkippedStages_;
            }

            if ((from_bitField0_ & 524288) != 0) {
               result.numFailedStages_ = this.numFailedStages_;
            }

            if ((from_bitField0_ & 1048576) != 0) {
               result.killTasksSummary_ = this.internalGetKillTasksSummary();
               result.killTasksSummary_.makeImmutable();
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof JobData) {
               return this.mergeFrom((JobData)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(JobData other) {
            if (other == StoreTypes.JobData.getDefaultInstance()) {
               return this;
            } else {
               if (other.getJobId() != 0L) {
                  this.setJobId(other.getJobId());
               }

               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.hasDescription()) {
                  this.description_ = other.description_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (other.hasSubmissionTime()) {
                  this.setSubmissionTime(other.getSubmissionTime());
               }

               if (other.hasCompletionTime()) {
                  this.setCompletionTime(other.getCompletionTime());
               }

               if (!other.stageIds_.isEmpty()) {
                  if (this.stageIds_.isEmpty()) {
                     this.stageIds_ = other.stageIds_;
                     this.stageIds_.makeImmutable();
                     this.bitField0_ |= 32;
                  } else {
                     this.ensureStageIdsIsMutable();
                     this.stageIds_.addAll(other.stageIds_);
                  }

                  this.onChanged();
               }

               if (other.hasJobGroup()) {
                  this.jobGroup_ = other.jobGroup_;
                  this.bitField0_ |= 64;
                  this.onChanged();
               }

               if (!other.jobTags_.isEmpty()) {
                  if (this.jobTags_.isEmpty()) {
                     this.jobTags_ = other.jobTags_;
                     this.bitField0_ |= 128;
                  } else {
                     this.ensureJobTagsIsMutable();
                     this.jobTags_.addAll(other.jobTags_);
                  }

                  this.onChanged();
               }

               if (other.status_ != 0) {
                  this.setStatusValue(other.getStatusValue());
               }

               if (other.getNumTasks() != 0) {
                  this.setNumTasks(other.getNumTasks());
               }

               if (other.getNumActiveTasks() != 0) {
                  this.setNumActiveTasks(other.getNumActiveTasks());
               }

               if (other.getNumCompletedTasks() != 0) {
                  this.setNumCompletedTasks(other.getNumCompletedTasks());
               }

               if (other.getNumSkippedTasks() != 0) {
                  this.setNumSkippedTasks(other.getNumSkippedTasks());
               }

               if (other.getNumFailedTasks() != 0) {
                  this.setNumFailedTasks(other.getNumFailedTasks());
               }

               if (other.getNumKilledTasks() != 0) {
                  this.setNumKilledTasks(other.getNumKilledTasks());
               }

               if (other.getNumCompletedIndices() != 0) {
                  this.setNumCompletedIndices(other.getNumCompletedIndices());
               }

               if (other.getNumActiveStages() != 0) {
                  this.setNumActiveStages(other.getNumActiveStages());
               }

               if (other.getNumCompletedStages() != 0) {
                  this.setNumCompletedStages(other.getNumCompletedStages());
               }

               if (other.getNumSkippedStages() != 0) {
                  this.setNumSkippedStages(other.getNumSkippedStages());
               }

               if (other.getNumFailedStages() != 0) {
                  this.setNumFailedStages(other.getNumFailedStages());
               }

               this.internalGetMutableKillTasksSummary().mergeFrom(other.internalGetKillTasksSummary());
               this.bitField0_ |= 1048576;
               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.jobId_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.description_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.submissionTime_ = input.readInt64();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.completionTime_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           long v = input.readInt64();
                           this.ensureStageIdsIsMutable();
                           this.stageIds_.addLong(v);
                           break;
                        case 50:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           this.ensureStageIdsIsMutable();

                           while(input.getBytesUntilLimit() > 0) {
                              this.stageIds_.addLong(input.readInt64());
                           }

                           input.popLimit(limit);
                           break;
                        case 58:
                           this.jobGroup_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 64;
                           break;
                        case 64:
                           this.status_ = input.readEnum();
                           this.bitField0_ |= 256;
                           break;
                        case 72:
                           this.numTasks_ = input.readInt32();
                           this.bitField0_ |= 512;
                           break;
                        case 80:
                           this.numActiveTasks_ = input.readInt32();
                           this.bitField0_ |= 1024;
                           break;
                        case 88:
                           this.numCompletedTasks_ = input.readInt32();
                           this.bitField0_ |= 2048;
                           break;
                        case 96:
                           this.numSkippedTasks_ = input.readInt32();
                           this.bitField0_ |= 4096;
                           break;
                        case 104:
                           this.numFailedTasks_ = input.readInt32();
                           this.bitField0_ |= 8192;
                           break;
                        case 112:
                           this.numKilledTasks_ = input.readInt32();
                           this.bitField0_ |= 16384;
                           break;
                        case 120:
                           this.numCompletedIndices_ = input.readInt32();
                           this.bitField0_ |= 32768;
                           break;
                        case 128:
                           this.numActiveStages_ = input.readInt32();
                           this.bitField0_ |= 65536;
                           break;
                        case 136:
                           this.numCompletedStages_ = input.readInt32();
                           this.bitField0_ |= 131072;
                           break;
                        case 144:
                           this.numSkippedStages_ = input.readInt32();
                           this.bitField0_ |= 262144;
                           break;
                        case 152:
                           this.numFailedStages_ = input.readInt32();
                           this.bitField0_ |= 524288;
                           break;
                        case 162:
                           MapEntry<String, Integer> killTasksSummary__ = (MapEntry)input.readMessage(StoreTypes.JobData.KillTasksSummaryDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableKillTasksSummary().getMutableMap().put((String)killTasksSummary__.getKey(), (Integer)killTasksSummary__.getValue());
                           this.bitField0_ |= 1048576;
                           break;
                        case 170:
                           String s = input.readStringRequireUtf8();
                           this.ensureJobTagsIsMutable();
                           this.jobTags_.add(s);
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getJobId() {
            return this.jobId_;
         }

         public Builder setJobId(long value) {
            this.jobId_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearJobId() {
            this.bitField0_ &= -2;
            this.jobId_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasName() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.JobData.getDefaultInstance().getName();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.JobData.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean hasDescription() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getDescription() {
            Object ref = this.description_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.description_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getDescriptionBytes() {
            Object ref = this.description_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.description_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setDescription(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.description_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearDescription() {
            this.description_ = StoreTypes.JobData.getDefaultInstance().getDescription();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setDescriptionBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.JobData.checkByteStringIsUtf8(value);
               this.description_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public boolean hasSubmissionTime() {
            return (this.bitField0_ & 8) != 0;
         }

         public long getSubmissionTime() {
            return this.submissionTime_;
         }

         public Builder setSubmissionTime(long value) {
            this.submissionTime_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearSubmissionTime() {
            this.bitField0_ &= -9;
            this.submissionTime_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasCompletionTime() {
            return (this.bitField0_ & 16) != 0;
         }

         public long getCompletionTime() {
            return this.completionTime_;
         }

         public Builder setCompletionTime(long value) {
            this.completionTime_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearCompletionTime() {
            this.bitField0_ &= -17;
            this.completionTime_ = 0L;
            this.onChanged();
            return this;
         }

         private void ensureStageIdsIsMutable() {
            if (!this.stageIds_.isModifiable()) {
               this.stageIds_ = (Internal.LongList)StoreTypes.JobData.makeMutableCopy(this.stageIds_);
            }

            this.bitField0_ |= 32;
         }

         public List getStageIdsList() {
            this.stageIds_.makeImmutable();
            return this.stageIds_;
         }

         public int getStageIdsCount() {
            return this.stageIds_.size();
         }

         public long getStageIds(int index) {
            return this.stageIds_.getLong(index);
         }

         public Builder setStageIds(int index, long value) {
            this.ensureStageIdsIsMutable();
            this.stageIds_.setLong(index, value);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder addStageIds(long value) {
            this.ensureStageIdsIsMutable();
            this.stageIds_.addLong(value);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder addAllStageIds(Iterable values) {
            this.ensureStageIdsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.stageIds_);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearStageIds() {
            this.stageIds_ = StoreTypes.JobData.emptyLongList();
            this.bitField0_ &= -33;
            this.onChanged();
            return this;
         }

         public boolean hasJobGroup() {
            return (this.bitField0_ & 64) != 0;
         }

         public String getJobGroup() {
            Object ref = this.jobGroup_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.jobGroup_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getJobGroupBytes() {
            Object ref = this.jobGroup_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.jobGroup_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setJobGroup(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.jobGroup_ = value;
               this.bitField0_ |= 64;
               this.onChanged();
               return this;
            }
         }

         public Builder clearJobGroup() {
            this.jobGroup_ = StoreTypes.JobData.getDefaultInstance().getJobGroup();
            this.bitField0_ &= -65;
            this.onChanged();
            return this;
         }

         public Builder setJobGroupBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.JobData.checkByteStringIsUtf8(value);
               this.jobGroup_ = value;
               this.bitField0_ |= 64;
               this.onChanged();
               return this;
            }
         }

         private void ensureJobTagsIsMutable() {
            if (!this.jobTags_.isModifiable()) {
               this.jobTags_ = new LazyStringArrayList(this.jobTags_);
            }

            this.bitField0_ |= 128;
         }

         public ProtocolStringList getJobTagsList() {
            this.jobTags_.makeImmutable();
            return this.jobTags_;
         }

         public int getJobTagsCount() {
            return this.jobTags_.size();
         }

         public String getJobTags(int index) {
            return this.jobTags_.get(index);
         }

         public ByteString getJobTagsBytes(int index) {
            return this.jobTags_.getByteString(index);
         }

         public Builder setJobTags(int index, String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.ensureJobTagsIsMutable();
               this.jobTags_.set(index, value);
               this.bitField0_ |= 128;
               this.onChanged();
               return this;
            }
         }

         public Builder addJobTags(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.ensureJobTagsIsMutable();
               this.jobTags_.add(value);
               this.bitField0_ |= 128;
               this.onChanged();
               return this;
            }
         }

         public Builder addAllJobTags(Iterable values) {
            this.ensureJobTagsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.jobTags_);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearJobTags() {
            this.jobTags_ = LazyStringArrayList.emptyList();
            this.bitField0_ &= -129;
            this.onChanged();
            return this;
         }

         public Builder addJobTagsBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.JobData.checkByteStringIsUtf8(value);
               this.ensureJobTagsIsMutable();
               this.jobTags_.add(value);
               this.bitField0_ |= 128;
               this.onChanged();
               return this;
            }
         }

         public int getStatusValue() {
            return this.status_;
         }

         public Builder setStatusValue(int value) {
            this.status_ = value;
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public JobExecutionStatus getStatus() {
            JobExecutionStatus result = StoreTypes.JobExecutionStatus.forNumber(this.status_);
            return result == null ? StoreTypes.JobExecutionStatus.UNRECOGNIZED : result;
         }

         public Builder setStatus(JobExecutionStatus value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.bitField0_ |= 256;
               this.status_ = value.getNumber();
               this.onChanged();
               return this;
            }
         }

         public Builder clearStatus() {
            this.bitField0_ &= -257;
            this.status_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumTasks() {
            return this.numTasks_;
         }

         public Builder setNumTasks(int value) {
            this.numTasks_ = value;
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder clearNumTasks() {
            this.bitField0_ &= -513;
            this.numTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumActiveTasks() {
            return this.numActiveTasks_;
         }

         public Builder setNumActiveTasks(int value) {
            this.numActiveTasks_ = value;
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder clearNumActiveTasks() {
            this.bitField0_ &= -1025;
            this.numActiveTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumCompletedTasks() {
            return this.numCompletedTasks_;
         }

         public Builder setNumCompletedTasks(int value) {
            this.numCompletedTasks_ = value;
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder clearNumCompletedTasks() {
            this.bitField0_ &= -2049;
            this.numCompletedTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumSkippedTasks() {
            return this.numSkippedTasks_;
         }

         public Builder setNumSkippedTasks(int value) {
            this.numSkippedTasks_ = value;
            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder clearNumSkippedTasks() {
            this.bitField0_ &= -4097;
            this.numSkippedTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumFailedTasks() {
            return this.numFailedTasks_;
         }

         public Builder setNumFailedTasks(int value) {
            this.numFailedTasks_ = value;
            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder clearNumFailedTasks() {
            this.bitField0_ &= -8193;
            this.numFailedTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumKilledTasks() {
            return this.numKilledTasks_;
         }

         public Builder setNumKilledTasks(int value) {
            this.numKilledTasks_ = value;
            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder clearNumKilledTasks() {
            this.bitField0_ &= -16385;
            this.numKilledTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumCompletedIndices() {
            return this.numCompletedIndices_;
         }

         public Builder setNumCompletedIndices(int value) {
            this.numCompletedIndices_ = value;
            this.bitField0_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder clearNumCompletedIndices() {
            this.bitField0_ &= -32769;
            this.numCompletedIndices_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumActiveStages() {
            return this.numActiveStages_;
         }

         public Builder setNumActiveStages(int value) {
            this.numActiveStages_ = value;
            this.bitField0_ |= 65536;
            this.onChanged();
            return this;
         }

         public Builder clearNumActiveStages() {
            this.bitField0_ &= -65537;
            this.numActiveStages_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumCompletedStages() {
            return this.numCompletedStages_;
         }

         public Builder setNumCompletedStages(int value) {
            this.numCompletedStages_ = value;
            this.bitField0_ |= 131072;
            this.onChanged();
            return this;
         }

         public Builder clearNumCompletedStages() {
            this.bitField0_ &= -131073;
            this.numCompletedStages_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumSkippedStages() {
            return this.numSkippedStages_;
         }

         public Builder setNumSkippedStages(int value) {
            this.numSkippedStages_ = value;
            this.bitField0_ |= 262144;
            this.onChanged();
            return this;
         }

         public Builder clearNumSkippedStages() {
            this.bitField0_ &= -262145;
            this.numSkippedStages_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumFailedStages() {
            return this.numFailedStages_;
         }

         public Builder setNumFailedStages(int value) {
            this.numFailedStages_ = value;
            this.bitField0_ |= 524288;
            this.onChanged();
            return this;
         }

         public Builder clearNumFailedStages() {
            this.bitField0_ &= -524289;
            this.numFailedStages_ = 0;
            this.onChanged();
            return this;
         }

         private MapField internalGetKillTasksSummary() {
            return this.killTasksSummary_ == null ? MapField.emptyMapField(StoreTypes.JobData.KillTasksSummaryDefaultEntryHolder.defaultEntry) : this.killTasksSummary_;
         }

         private MapField internalGetMutableKillTasksSummary() {
            if (this.killTasksSummary_ == null) {
               this.killTasksSummary_ = MapField.newMapField(StoreTypes.JobData.KillTasksSummaryDefaultEntryHolder.defaultEntry);
            }

            if (!this.killTasksSummary_.isMutable()) {
               this.killTasksSummary_ = this.killTasksSummary_.copy();
            }

            this.bitField0_ |= 1048576;
            this.onChanged();
            return this.killTasksSummary_;
         }

         public int getKillTasksSummaryCount() {
            return this.internalGetKillTasksSummary().getMap().size();
         }

         public boolean containsKillTasksSummary(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetKillTasksSummary().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getKillTasksSummary() {
            return this.getKillTasksSummaryMap();
         }

         public Map getKillTasksSummaryMap() {
            return this.internalGetKillTasksSummary().getMap();
         }

         public int getKillTasksSummaryOrDefault(String key, int defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Integer> map = this.internalGetKillTasksSummary().getMap();
               return map.containsKey(key) ? (Integer)map.get(key) : defaultValue;
            }
         }

         public int getKillTasksSummaryOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Integer> map = this.internalGetKillTasksSummary().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (Integer)map.get(key);
               }
            }
         }

         public Builder clearKillTasksSummary() {
            this.bitField0_ &= -1048577;
            this.internalGetMutableKillTasksSummary().getMutableMap().clear();
            return this;
         }

         public Builder removeKillTasksSummary(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableKillTasksSummary().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableKillTasksSummary() {
            this.bitField0_ |= 1048576;
            return this.internalGetMutableKillTasksSummary().getMutableMap();
         }

         public Builder putKillTasksSummary(String key, int value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableKillTasksSummary().getMutableMap().put(key, value);
               this.bitField0_ |= 1048576;
               return this;
            }
         }

         public Builder putAllKillTasksSummary(Map values) {
            this.internalGetMutableKillTasksSummary().getMutableMap().putAll(values);
            this.bitField0_ |= 1048576;
            return this;
         }
      }
   }

   public static final class JobDataWrapper extends GeneratedMessage implements JobDataWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int INFO_FIELD_NUMBER = 1;
      private JobData info_;
      public static final int SKIPPED_STAGES_FIELD_NUMBER = 2;
      private Internal.IntList skippedStages_ = emptyIntList();
      private int skippedStagesMemoizedSerializedSize = -1;
      public static final int SQL_EXECUTION_ID_FIELD_NUMBER = 3;
      private long sqlExecutionId_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final JobDataWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private JobDataWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private JobDataWrapper() {
         this.skippedStages_ = emptyIntList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_JobDataWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_JobDataWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(JobDataWrapper.class, Builder.class);
      }

      public boolean hasInfo() {
         return (this.bitField0_ & 1) != 0;
      }

      public JobData getInfo() {
         return this.info_ == null ? StoreTypes.JobData.getDefaultInstance() : this.info_;
      }

      public JobDataOrBuilder getInfoOrBuilder() {
         return this.info_ == null ? StoreTypes.JobData.getDefaultInstance() : this.info_;
      }

      public List getSkippedStagesList() {
         return this.skippedStages_;
      }

      public int getSkippedStagesCount() {
         return this.skippedStages_.size();
      }

      public int getSkippedStages(int index) {
         return this.skippedStages_.getInt(index);
      }

      public boolean hasSqlExecutionId() {
         return (this.bitField0_ & 2) != 0;
      }

      public long getSqlExecutionId() {
         return this.sqlExecutionId_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(1, this.getInfo());
         }

         if (this.getSkippedStagesList().size() > 0) {
            output.writeUInt32NoTag(18);
            output.writeUInt32NoTag(this.skippedStagesMemoizedSerializedSize);
         }

         for(int i = 0; i < this.skippedStages_.size(); ++i) {
            output.writeInt32NoTag(this.skippedStages_.getInt(i));
         }

         if ((this.bitField0_ & 2) != 0) {
            output.writeInt64(3, this.sqlExecutionId_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(1, this.getInfo());
            }

            int dataSize = 0;

            for(int i = 0; i < this.skippedStages_.size(); ++i) {
               dataSize += CodedOutputStream.computeInt32SizeNoTag(this.skippedStages_.getInt(i));
            }

            size += dataSize;
            if (!this.getSkippedStagesList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.skippedStagesMemoizedSerializedSize = dataSize;
            if ((this.bitField0_ & 2) != 0) {
               size += CodedOutputStream.computeInt64Size(3, this.sqlExecutionId_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof JobDataWrapper)) {
            return super.equals(obj);
         } else {
            JobDataWrapper other = (JobDataWrapper)obj;
            if (this.hasInfo() != other.hasInfo()) {
               return false;
            } else if (this.hasInfo() && !this.getInfo().equals(other.getInfo())) {
               return false;
            } else if (!this.getSkippedStagesList().equals(other.getSkippedStagesList())) {
               return false;
            } else if (this.hasSqlExecutionId() != other.hasSqlExecutionId()) {
               return false;
            } else if (this.hasSqlExecutionId() && this.getSqlExecutionId() != other.getSqlExecutionId()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasInfo()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getInfo().hashCode();
            }

            if (this.getSkippedStagesCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getSkippedStagesList().hashCode();
            }

            if (this.hasSqlExecutionId()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + Internal.hashLong(this.getSqlExecutionId());
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static JobDataWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (JobDataWrapper)PARSER.parseFrom(data);
      }

      public static JobDataWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (JobDataWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static JobDataWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (JobDataWrapper)PARSER.parseFrom(data);
      }

      public static JobDataWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (JobDataWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static JobDataWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (JobDataWrapper)PARSER.parseFrom(data);
      }

      public static JobDataWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (JobDataWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static JobDataWrapper parseFrom(InputStream input) throws IOException {
         return (JobDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static JobDataWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (JobDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static JobDataWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (JobDataWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static JobDataWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (JobDataWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static JobDataWrapper parseFrom(CodedInputStream input) throws IOException {
         return (JobDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static JobDataWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (JobDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(JobDataWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static JobDataWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public JobDataWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", JobDataWrapper.class.getName());
         DEFAULT_INSTANCE = new JobDataWrapper();
         PARSER = new AbstractParser() {
            public JobDataWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.JobDataWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements JobDataWrapperOrBuilder {
         private int bitField0_;
         private JobData info_;
         private SingleFieldBuilder infoBuilder_;
         private Internal.IntList skippedStages_ = StoreTypes.JobDataWrapper.emptyIntList();
         private long sqlExecutionId_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_JobDataWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_JobDataWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(JobDataWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.JobDataWrapper.alwaysUseFieldBuilders) {
               this.getInfoFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            this.skippedStages_ = StoreTypes.JobDataWrapper.emptyIntList();
            this.sqlExecutionId_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_JobDataWrapper_descriptor;
         }

         public JobDataWrapper getDefaultInstanceForType() {
            return StoreTypes.JobDataWrapper.getDefaultInstance();
         }

         public JobDataWrapper build() {
            JobDataWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public JobDataWrapper buildPartial() {
            JobDataWrapper result = new JobDataWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(JobDataWrapper result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.info_ = this.infoBuilder_ == null ? this.info_ : (JobData)this.infoBuilder_.build();
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               this.skippedStages_.makeImmutable();
               result.skippedStages_ = this.skippedStages_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.sqlExecutionId_ = this.sqlExecutionId_;
               to_bitField0_ |= 2;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof JobDataWrapper) {
               return this.mergeFrom((JobDataWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(JobDataWrapper other) {
            if (other == StoreTypes.JobDataWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasInfo()) {
                  this.mergeInfo(other.getInfo());
               }

               if (!other.skippedStages_.isEmpty()) {
                  if (this.skippedStages_.isEmpty()) {
                     this.skippedStages_ = other.skippedStages_;
                     this.skippedStages_.makeImmutable();
                     this.bitField0_ |= 2;
                  } else {
                     this.ensureSkippedStagesIsMutable();
                     this.skippedStages_.addAll(other.skippedStages_);
                  }

                  this.onChanged();
               }

               if (other.hasSqlExecutionId()) {
                  this.setSqlExecutionId(other.getSqlExecutionId());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           input.readMessage((MessageLite.Builder)this.getInfoFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           int v = input.readInt32();
                           this.ensureSkippedStagesIsMutable();
                           this.skippedStages_.addInt(v);
                           break;
                        case 18:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           this.ensureSkippedStagesIsMutable();

                           while(input.getBytesUntilLimit() > 0) {
                              this.skippedStages_.addInt(input.readInt32());
                           }

                           input.popLimit(limit);
                           break;
                        case 24:
                           this.sqlExecutionId_ = input.readInt64();
                           this.bitField0_ |= 4;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasInfo() {
            return (this.bitField0_ & 1) != 0;
         }

         public JobData getInfo() {
            if (this.infoBuilder_ == null) {
               return this.info_ == null ? StoreTypes.JobData.getDefaultInstance() : this.info_;
            } else {
               return (JobData)this.infoBuilder_.getMessage();
            }
         }

         public Builder setInfo(JobData value) {
            if (this.infoBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.info_ = value;
            } else {
               this.infoBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder setInfo(JobData.Builder builderForValue) {
            if (this.infoBuilder_ == null) {
               this.info_ = builderForValue.build();
            } else {
               this.infoBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder mergeInfo(JobData value) {
            if (this.infoBuilder_ == null) {
               if ((this.bitField0_ & 1) != 0 && this.info_ != null && this.info_ != StoreTypes.JobData.getDefaultInstance()) {
                  this.getInfoBuilder().mergeFrom(value);
               } else {
                  this.info_ = value;
               }
            } else {
               this.infoBuilder_.mergeFrom(value);
            }

            if (this.info_ != null) {
               this.bitField0_ |= 1;
               this.onChanged();
            }

            return this;
         }

         public Builder clearInfo() {
            this.bitField0_ &= -2;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public JobData.Builder getInfoBuilder() {
            this.bitField0_ |= 1;
            this.onChanged();
            return (JobData.Builder)this.getInfoFieldBuilder().getBuilder();
         }

         public JobDataOrBuilder getInfoOrBuilder() {
            if (this.infoBuilder_ != null) {
               return (JobDataOrBuilder)this.infoBuilder_.getMessageOrBuilder();
            } else {
               return this.info_ == null ? StoreTypes.JobData.getDefaultInstance() : this.info_;
            }
         }

         private SingleFieldBuilder getInfoFieldBuilder() {
            if (this.infoBuilder_ == null) {
               this.infoBuilder_ = new SingleFieldBuilder(this.getInfo(), this.getParentForChildren(), this.isClean());
               this.info_ = null;
            }

            return this.infoBuilder_;
         }

         private void ensureSkippedStagesIsMutable() {
            if (!this.skippedStages_.isModifiable()) {
               this.skippedStages_ = (Internal.IntList)StoreTypes.JobDataWrapper.makeMutableCopy(this.skippedStages_);
            }

            this.bitField0_ |= 2;
         }

         public List getSkippedStagesList() {
            this.skippedStages_.makeImmutable();
            return this.skippedStages_;
         }

         public int getSkippedStagesCount() {
            return this.skippedStages_.size();
         }

         public int getSkippedStages(int index) {
            return this.skippedStages_.getInt(index);
         }

         public Builder setSkippedStages(int index, int value) {
            this.ensureSkippedStagesIsMutable();
            this.skippedStages_.setInt(index, value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addSkippedStages(int value) {
            this.ensureSkippedStagesIsMutable();
            this.skippedStages_.addInt(value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addAllSkippedStages(Iterable values) {
            this.ensureSkippedStagesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.skippedStages_);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearSkippedStages() {
            this.skippedStages_ = StoreTypes.JobDataWrapper.emptyIntList();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public boolean hasSqlExecutionId() {
            return (this.bitField0_ & 4) != 0;
         }

         public long getSqlExecutionId() {
            return this.sqlExecutionId_;
         }

         public Builder setSqlExecutionId(long value) {
            this.sqlExecutionId_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearSqlExecutionId() {
            this.bitField0_ &= -5;
            this.sqlExecutionId_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class AccumulableInfo extends GeneratedMessage implements AccumulableInfoOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private long id_ = 0L;
      public static final int NAME_FIELD_NUMBER = 2;
      private volatile Object name_ = "";
      public static final int UPDATE_FIELD_NUMBER = 3;
      private volatile Object update_ = "";
      public static final int VALUE_FIELD_NUMBER = 4;
      private volatile Object value_ = "";
      private byte memoizedIsInitialized = -1;
      private static final AccumulableInfo DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private AccumulableInfo(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private AccumulableInfo() {
         this.name_ = "";
         this.update_ = "";
         this.value_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_AccumulableInfo_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_AccumulableInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(AccumulableInfo.class, Builder.class);
      }

      public long getId() {
         return this.id_;
      }

      public boolean hasName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasUpdate() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getUpdate() {
         Object ref = this.update_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.update_ = s;
            return s;
         }
      }

      public ByteString getUpdateBytes() {
         Object ref = this.update_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.update_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasValue() {
         return (this.bitField0_ & 4) != 0;
      }

      public String getValue() {
         Object ref = this.value_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.value_ = s;
            return s;
         }
      }

      public ByteString getValueBytes() {
         Object ref = this.value_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.value_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.id_ != 0L) {
            output.writeInt64(1, this.id_);
         }

         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 2, this.name_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 3, this.update_);
         }

         if ((this.bitField0_ & 4) != 0) {
            GeneratedMessage.writeString(output, 4, this.value_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.id_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.id_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.name_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.update_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += GeneratedMessage.computeStringSize(4, this.value_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof AccumulableInfo)) {
            return super.equals(obj);
         } else {
            AccumulableInfo other = (AccumulableInfo)obj;
            if (this.getId() != other.getId()) {
               return false;
            } else if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.hasUpdate() != other.hasUpdate()) {
               return false;
            } else if (this.hasUpdate() && !this.getUpdate().equals(other.getUpdate())) {
               return false;
            } else if (this.hasValue() != other.hasValue()) {
               return false;
            } else if (this.hasValue() && !this.getValue().equals(other.getValue())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getId());
            if (this.hasName()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.hasUpdate()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getUpdate().hashCode();
            }

            if (this.hasValue()) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getValue().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static AccumulableInfo parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (AccumulableInfo)PARSER.parseFrom(data);
      }

      public static AccumulableInfo parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (AccumulableInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static AccumulableInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (AccumulableInfo)PARSER.parseFrom(data);
      }

      public static AccumulableInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (AccumulableInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static AccumulableInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (AccumulableInfo)PARSER.parseFrom(data);
      }

      public static AccumulableInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (AccumulableInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static AccumulableInfo parseFrom(InputStream input) throws IOException {
         return (AccumulableInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static AccumulableInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (AccumulableInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static AccumulableInfo parseDelimitedFrom(InputStream input) throws IOException {
         return (AccumulableInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static AccumulableInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (AccumulableInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static AccumulableInfo parseFrom(CodedInputStream input) throws IOException {
         return (AccumulableInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static AccumulableInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (AccumulableInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(AccumulableInfo prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static AccumulableInfo getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public AccumulableInfo getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", AccumulableInfo.class.getName());
         DEFAULT_INSTANCE = new AccumulableInfo();
         PARSER = new AbstractParser() {
            public AccumulableInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.AccumulableInfo.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements AccumulableInfoOrBuilder {
         private int bitField0_;
         private long id_;
         private Object name_ = "";
         private Object update_ = "";
         private Object value_ = "";

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_AccumulableInfo_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_AccumulableInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(AccumulableInfo.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.id_ = 0L;
            this.name_ = "";
            this.update_ = "";
            this.value_ = "";
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_AccumulableInfo_descriptor;
         }

         public AccumulableInfo getDefaultInstanceForType() {
            return StoreTypes.AccumulableInfo.getDefaultInstance();
         }

         public AccumulableInfo build() {
            AccumulableInfo result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public AccumulableInfo buildPartial() {
            AccumulableInfo result = new AccumulableInfo(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(AccumulableInfo result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.id_ = this.id_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 2) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.update_ = this.update_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.value_ = this.value_;
               to_bitField0_ |= 4;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof AccumulableInfo) {
               return this.mergeFrom((AccumulableInfo)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(AccumulableInfo other) {
            if (other == StoreTypes.AccumulableInfo.getDefaultInstance()) {
               return this;
            } else {
               if (other.getId() != 0L) {
                  this.setId(other.getId());
               }

               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.hasUpdate()) {
                  this.update_ = other.update_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (other.hasValue()) {
                  this.value_ = other.value_;
                  this.bitField0_ |= 8;
                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.id_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.update_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 34:
                           this.value_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 8;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getId() {
            return this.id_;
         }

         public Builder setId(long value) {
            this.id_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearId() {
            this.bitField0_ &= -2;
            this.id_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasName() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.AccumulableInfo.getDefaultInstance().getName();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.AccumulableInfo.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean hasUpdate() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getUpdate() {
            Object ref = this.update_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.update_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getUpdateBytes() {
            Object ref = this.update_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.update_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setUpdate(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.update_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearUpdate() {
            this.update_ = StoreTypes.AccumulableInfo.getDefaultInstance().getUpdate();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setUpdateBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.AccumulableInfo.checkByteStringIsUtf8(value);
               this.update_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public boolean hasValue() {
            return (this.bitField0_ & 8) != 0;
         }

         public String getValue() {
            Object ref = this.value_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.value_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getValueBytes() {
            Object ref = this.value_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.value_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setValue(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.value_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }

         public Builder clearValue() {
            this.value_ = StoreTypes.AccumulableInfo.getDefaultInstance().getValue();
            this.bitField0_ &= -9;
            this.onChanged();
            return this;
         }

         public Builder setValueBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.AccumulableInfo.checkByteStringIsUtf8(value);
               this.value_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }
      }
   }

   public static final class TaskDataWrapper extends GeneratedMessage implements TaskDataWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int TASK_ID_FIELD_NUMBER = 1;
      private long taskId_ = 0L;
      public static final int INDEX_FIELD_NUMBER = 2;
      private int index_ = 0;
      public static final int ATTEMPT_FIELD_NUMBER = 3;
      private int attempt_ = 0;
      public static final int PARTITION_ID_FIELD_NUMBER = 4;
      private int partitionId_ = 0;
      public static final int LAUNCH_TIME_FIELD_NUMBER = 5;
      private long launchTime_ = 0L;
      public static final int RESULT_FETCH_START_FIELD_NUMBER = 6;
      private long resultFetchStart_ = 0L;
      public static final int DURATION_FIELD_NUMBER = 7;
      private long duration_ = 0L;
      public static final int EXECUTOR_ID_FIELD_NUMBER = 8;
      private volatile Object executorId_ = "";
      public static final int HOST_FIELD_NUMBER = 9;
      private volatile Object host_ = "";
      public static final int STATUS_FIELD_NUMBER = 10;
      private volatile Object status_ = "";
      public static final int TASK_LOCALITY_FIELD_NUMBER = 11;
      private volatile Object taskLocality_ = "";
      public static final int SPECULATIVE_FIELD_NUMBER = 12;
      private boolean speculative_ = false;
      public static final int ACCUMULATOR_UPDATES_FIELD_NUMBER = 13;
      private List accumulatorUpdates_;
      public static final int ERROR_MESSAGE_FIELD_NUMBER = 14;
      private volatile Object errorMessage_ = "";
      public static final int HAS_METRICS_FIELD_NUMBER = 15;
      private boolean hasMetrics_ = false;
      public static final int EXECUTOR_DESERIALIZE_TIME_FIELD_NUMBER = 16;
      private long executorDeserializeTime_ = 0L;
      public static final int EXECUTOR_DESERIALIZE_CPU_TIME_FIELD_NUMBER = 17;
      private long executorDeserializeCpuTime_ = 0L;
      public static final int EXECUTOR_RUN_TIME_FIELD_NUMBER = 18;
      private long executorRunTime_ = 0L;
      public static final int EXECUTOR_CPU_TIME_FIELD_NUMBER = 19;
      private long executorCpuTime_ = 0L;
      public static final int RESULT_SIZE_FIELD_NUMBER = 20;
      private long resultSize_ = 0L;
      public static final int JVM_GC_TIME_FIELD_NUMBER = 21;
      private long jvmGcTime_ = 0L;
      public static final int RESULT_SERIALIZATION_TIME_FIELD_NUMBER = 22;
      private long resultSerializationTime_ = 0L;
      public static final int MEMORY_BYTES_SPILLED_FIELD_NUMBER = 23;
      private long memoryBytesSpilled_ = 0L;
      public static final int DISK_BYTES_SPILLED_FIELD_NUMBER = 24;
      private long diskBytesSpilled_ = 0L;
      public static final int PEAK_EXECUTION_MEMORY_FIELD_NUMBER = 25;
      private long peakExecutionMemory_ = 0L;
      public static final int INPUT_BYTES_READ_FIELD_NUMBER = 26;
      private long inputBytesRead_ = 0L;
      public static final int INPUT_RECORDS_READ_FIELD_NUMBER = 27;
      private long inputRecordsRead_ = 0L;
      public static final int OUTPUT_BYTES_WRITTEN_FIELD_NUMBER = 28;
      private long outputBytesWritten_ = 0L;
      public static final int OUTPUT_RECORDS_WRITTEN_FIELD_NUMBER = 29;
      private long outputRecordsWritten_ = 0L;
      public static final int SHUFFLE_REMOTE_BLOCKS_FETCHED_FIELD_NUMBER = 30;
      private long shuffleRemoteBlocksFetched_ = 0L;
      public static final int SHUFFLE_LOCAL_BLOCKS_FETCHED_FIELD_NUMBER = 31;
      private long shuffleLocalBlocksFetched_ = 0L;
      public static final int SHUFFLE_FETCH_WAIT_TIME_FIELD_NUMBER = 32;
      private long shuffleFetchWaitTime_ = 0L;
      public static final int SHUFFLE_REMOTE_BYTES_READ_FIELD_NUMBER = 33;
      private long shuffleRemoteBytesRead_ = 0L;
      public static final int SHUFFLE_REMOTE_BYTES_READ_TO_DISK_FIELD_NUMBER = 34;
      private long shuffleRemoteBytesReadToDisk_ = 0L;
      public static final int SHUFFLE_LOCAL_BYTES_READ_FIELD_NUMBER = 35;
      private long shuffleLocalBytesRead_ = 0L;
      public static final int SHUFFLE_RECORDS_READ_FIELD_NUMBER = 36;
      private long shuffleRecordsRead_ = 0L;
      public static final int SHUFFLE_BYTES_WRITTEN_FIELD_NUMBER = 37;
      private long shuffleBytesWritten_ = 0L;
      public static final int SHUFFLE_WRITE_TIME_FIELD_NUMBER = 38;
      private long shuffleWriteTime_ = 0L;
      public static final int SHUFFLE_RECORDS_WRITTEN_FIELD_NUMBER = 39;
      private long shuffleRecordsWritten_ = 0L;
      public static final int STAGE_ID_FIELD_NUMBER = 40;
      private long stageId_ = 0L;
      public static final int STAGE_ATTEMPT_ID_FIELD_NUMBER = 41;
      private int stageAttemptId_ = 0;
      public static final int SHUFFLE_CORRUPT_MERGED_BLOCK_CHUNKS_FIELD_NUMBER = 42;
      private long shuffleCorruptMergedBlockChunks_ = 0L;
      public static final int SHUFFLE_MERGED_FETCH_FALLBACK_COUNT_FIELD_NUMBER = 43;
      private long shuffleMergedFetchFallbackCount_ = 0L;
      public static final int SHUFFLE_MERGED_REMOTE_BLOCKS_FETCHED_FIELD_NUMBER = 44;
      private long shuffleMergedRemoteBlocksFetched_ = 0L;
      public static final int SHUFFLE_MERGED_LOCAL_BLOCKS_FETCHED_FIELD_NUMBER = 45;
      private long shuffleMergedLocalBlocksFetched_ = 0L;
      public static final int SHUFFLE_MERGED_REMOTE_CHUNKS_FETCHED_FIELD_NUMBER = 46;
      private long shuffleMergedRemoteChunksFetched_ = 0L;
      public static final int SHUFFLE_MERGED_LOCAL_CHUNKS_FETCHED_FIELD_NUMBER = 47;
      private long shuffleMergedLocalChunksFetched_ = 0L;
      public static final int SHUFFLE_MERGED_REMOTE_BYTES_READ_FIELD_NUMBER = 48;
      private long shuffleMergedRemoteBytesRead_ = 0L;
      public static final int SHUFFLE_MERGED_LOCAL_BYTES_READ_FIELD_NUMBER = 49;
      private long shuffleMergedLocalBytesRead_ = 0L;
      public static final int SHUFFLE_REMOTE_REQS_DURATION_FIELD_NUMBER = 50;
      private long shuffleRemoteReqsDuration_ = 0L;
      public static final int SHUFFLE_MERGED_REMOTE_REQ_DURATION_FIELD_NUMBER = 51;
      private long shuffleMergedRemoteReqDuration_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final TaskDataWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private TaskDataWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private TaskDataWrapper() {
         this.executorId_ = "";
         this.host_ = "";
         this.status_ = "";
         this.taskLocality_ = "";
         this.accumulatorUpdates_ = Collections.emptyList();
         this.errorMessage_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskDataWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskDataWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(TaskDataWrapper.class, Builder.class);
      }

      public long getTaskId() {
         return this.taskId_;
      }

      public int getIndex() {
         return this.index_;
      }

      public int getAttempt() {
         return this.attempt_;
      }

      public int getPartitionId() {
         return this.partitionId_;
      }

      public long getLaunchTime() {
         return this.launchTime_;
      }

      public long getResultFetchStart() {
         return this.resultFetchStart_;
      }

      public long getDuration() {
         return this.duration_;
      }

      public boolean hasExecutorId() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getExecutorId() {
         Object ref = this.executorId_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.executorId_ = s;
            return s;
         }
      }

      public ByteString getExecutorIdBytes() {
         Object ref = this.executorId_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.executorId_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasHost() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getHost() {
         Object ref = this.host_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.host_ = s;
            return s;
         }
      }

      public ByteString getHostBytes() {
         Object ref = this.host_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.host_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasStatus() {
         return (this.bitField0_ & 4) != 0;
      }

      public String getStatus() {
         Object ref = this.status_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.status_ = s;
            return s;
         }
      }

      public ByteString getStatusBytes() {
         Object ref = this.status_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.status_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasTaskLocality() {
         return (this.bitField0_ & 8) != 0;
      }

      public String getTaskLocality() {
         Object ref = this.taskLocality_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.taskLocality_ = s;
            return s;
         }
      }

      public ByteString getTaskLocalityBytes() {
         Object ref = this.taskLocality_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.taskLocality_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean getSpeculative() {
         return this.speculative_;
      }

      public List getAccumulatorUpdatesList() {
         return this.accumulatorUpdates_;
      }

      public List getAccumulatorUpdatesOrBuilderList() {
         return this.accumulatorUpdates_;
      }

      public int getAccumulatorUpdatesCount() {
         return this.accumulatorUpdates_.size();
      }

      public AccumulableInfo getAccumulatorUpdates(int index) {
         return (AccumulableInfo)this.accumulatorUpdates_.get(index);
      }

      public AccumulableInfoOrBuilder getAccumulatorUpdatesOrBuilder(int index) {
         return (AccumulableInfoOrBuilder)this.accumulatorUpdates_.get(index);
      }

      public boolean hasErrorMessage() {
         return (this.bitField0_ & 16) != 0;
      }

      public String getErrorMessage() {
         Object ref = this.errorMessage_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.errorMessage_ = s;
            return s;
         }
      }

      public ByteString getErrorMessageBytes() {
         Object ref = this.errorMessage_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.errorMessage_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean getHasMetrics() {
         return this.hasMetrics_;
      }

      public long getExecutorDeserializeTime() {
         return this.executorDeserializeTime_;
      }

      public long getExecutorDeserializeCpuTime() {
         return this.executorDeserializeCpuTime_;
      }

      public long getExecutorRunTime() {
         return this.executorRunTime_;
      }

      public long getExecutorCpuTime() {
         return this.executorCpuTime_;
      }

      public long getResultSize() {
         return this.resultSize_;
      }

      public long getJvmGcTime() {
         return this.jvmGcTime_;
      }

      public long getResultSerializationTime() {
         return this.resultSerializationTime_;
      }

      public long getMemoryBytesSpilled() {
         return this.memoryBytesSpilled_;
      }

      public long getDiskBytesSpilled() {
         return this.diskBytesSpilled_;
      }

      public long getPeakExecutionMemory() {
         return this.peakExecutionMemory_;
      }

      public long getInputBytesRead() {
         return this.inputBytesRead_;
      }

      public long getInputRecordsRead() {
         return this.inputRecordsRead_;
      }

      public long getOutputBytesWritten() {
         return this.outputBytesWritten_;
      }

      public long getOutputRecordsWritten() {
         return this.outputRecordsWritten_;
      }

      public long getShuffleRemoteBlocksFetched() {
         return this.shuffleRemoteBlocksFetched_;
      }

      public long getShuffleLocalBlocksFetched() {
         return this.shuffleLocalBlocksFetched_;
      }

      public long getShuffleFetchWaitTime() {
         return this.shuffleFetchWaitTime_;
      }

      public long getShuffleRemoteBytesRead() {
         return this.shuffleRemoteBytesRead_;
      }

      public long getShuffleRemoteBytesReadToDisk() {
         return this.shuffleRemoteBytesReadToDisk_;
      }

      public long getShuffleLocalBytesRead() {
         return this.shuffleLocalBytesRead_;
      }

      public long getShuffleRecordsRead() {
         return this.shuffleRecordsRead_;
      }

      public long getShuffleBytesWritten() {
         return this.shuffleBytesWritten_;
      }

      public long getShuffleWriteTime() {
         return this.shuffleWriteTime_;
      }

      public long getShuffleRecordsWritten() {
         return this.shuffleRecordsWritten_;
      }

      public long getStageId() {
         return this.stageId_;
      }

      public int getStageAttemptId() {
         return this.stageAttemptId_;
      }

      public long getShuffleCorruptMergedBlockChunks() {
         return this.shuffleCorruptMergedBlockChunks_;
      }

      public long getShuffleMergedFetchFallbackCount() {
         return this.shuffleMergedFetchFallbackCount_;
      }

      public long getShuffleMergedRemoteBlocksFetched() {
         return this.shuffleMergedRemoteBlocksFetched_;
      }

      public long getShuffleMergedLocalBlocksFetched() {
         return this.shuffleMergedLocalBlocksFetched_;
      }

      public long getShuffleMergedRemoteChunksFetched() {
         return this.shuffleMergedRemoteChunksFetched_;
      }

      public long getShuffleMergedLocalChunksFetched() {
         return this.shuffleMergedLocalChunksFetched_;
      }

      public long getShuffleMergedRemoteBytesRead() {
         return this.shuffleMergedRemoteBytesRead_;
      }

      public long getShuffleMergedLocalBytesRead() {
         return this.shuffleMergedLocalBytesRead_;
      }

      public long getShuffleRemoteReqsDuration() {
         return this.shuffleRemoteReqsDuration_;
      }

      public long getShuffleMergedRemoteReqDuration() {
         return this.shuffleMergedRemoteReqDuration_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.taskId_ != 0L) {
            output.writeInt64(1, this.taskId_);
         }

         if (this.index_ != 0) {
            output.writeInt32(2, this.index_);
         }

         if (this.attempt_ != 0) {
            output.writeInt32(3, this.attempt_);
         }

         if (this.partitionId_ != 0) {
            output.writeInt32(4, this.partitionId_);
         }

         if (this.launchTime_ != 0L) {
            output.writeInt64(5, this.launchTime_);
         }

         if (this.resultFetchStart_ != 0L) {
            output.writeInt64(6, this.resultFetchStart_);
         }

         if (this.duration_ != 0L) {
            output.writeInt64(7, this.duration_);
         }

         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 8, this.executorId_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 9, this.host_);
         }

         if ((this.bitField0_ & 4) != 0) {
            GeneratedMessage.writeString(output, 10, this.status_);
         }

         if ((this.bitField0_ & 8) != 0) {
            GeneratedMessage.writeString(output, 11, this.taskLocality_);
         }

         if (this.speculative_) {
            output.writeBool(12, this.speculative_);
         }

         for(int i = 0; i < this.accumulatorUpdates_.size(); ++i) {
            output.writeMessage(13, (MessageLite)this.accumulatorUpdates_.get(i));
         }

         if ((this.bitField0_ & 16) != 0) {
            GeneratedMessage.writeString(output, 14, this.errorMessage_);
         }

         if (this.hasMetrics_) {
            output.writeBool(15, this.hasMetrics_);
         }

         if (this.executorDeserializeTime_ != 0L) {
            output.writeInt64(16, this.executorDeserializeTime_);
         }

         if (this.executorDeserializeCpuTime_ != 0L) {
            output.writeInt64(17, this.executorDeserializeCpuTime_);
         }

         if (this.executorRunTime_ != 0L) {
            output.writeInt64(18, this.executorRunTime_);
         }

         if (this.executorCpuTime_ != 0L) {
            output.writeInt64(19, this.executorCpuTime_);
         }

         if (this.resultSize_ != 0L) {
            output.writeInt64(20, this.resultSize_);
         }

         if (this.jvmGcTime_ != 0L) {
            output.writeInt64(21, this.jvmGcTime_);
         }

         if (this.resultSerializationTime_ != 0L) {
            output.writeInt64(22, this.resultSerializationTime_);
         }

         if (this.memoryBytesSpilled_ != 0L) {
            output.writeInt64(23, this.memoryBytesSpilled_);
         }

         if (this.diskBytesSpilled_ != 0L) {
            output.writeInt64(24, this.diskBytesSpilled_);
         }

         if (this.peakExecutionMemory_ != 0L) {
            output.writeInt64(25, this.peakExecutionMemory_);
         }

         if (this.inputBytesRead_ != 0L) {
            output.writeInt64(26, this.inputBytesRead_);
         }

         if (this.inputRecordsRead_ != 0L) {
            output.writeInt64(27, this.inputRecordsRead_);
         }

         if (this.outputBytesWritten_ != 0L) {
            output.writeInt64(28, this.outputBytesWritten_);
         }

         if (this.outputRecordsWritten_ != 0L) {
            output.writeInt64(29, this.outputRecordsWritten_);
         }

         if (this.shuffleRemoteBlocksFetched_ != 0L) {
            output.writeInt64(30, this.shuffleRemoteBlocksFetched_);
         }

         if (this.shuffleLocalBlocksFetched_ != 0L) {
            output.writeInt64(31, this.shuffleLocalBlocksFetched_);
         }

         if (this.shuffleFetchWaitTime_ != 0L) {
            output.writeInt64(32, this.shuffleFetchWaitTime_);
         }

         if (this.shuffleRemoteBytesRead_ != 0L) {
            output.writeInt64(33, this.shuffleRemoteBytesRead_);
         }

         if (this.shuffleRemoteBytesReadToDisk_ != 0L) {
            output.writeInt64(34, this.shuffleRemoteBytesReadToDisk_);
         }

         if (this.shuffleLocalBytesRead_ != 0L) {
            output.writeInt64(35, this.shuffleLocalBytesRead_);
         }

         if (this.shuffleRecordsRead_ != 0L) {
            output.writeInt64(36, this.shuffleRecordsRead_);
         }

         if (this.shuffleBytesWritten_ != 0L) {
            output.writeInt64(37, this.shuffleBytesWritten_);
         }

         if (this.shuffleWriteTime_ != 0L) {
            output.writeInt64(38, this.shuffleWriteTime_);
         }

         if (this.shuffleRecordsWritten_ != 0L) {
            output.writeInt64(39, this.shuffleRecordsWritten_);
         }

         if (this.stageId_ != 0L) {
            output.writeInt64(40, this.stageId_);
         }

         if (this.stageAttemptId_ != 0) {
            output.writeInt32(41, this.stageAttemptId_);
         }

         if (this.shuffleCorruptMergedBlockChunks_ != 0L) {
            output.writeInt64(42, this.shuffleCorruptMergedBlockChunks_);
         }

         if (this.shuffleMergedFetchFallbackCount_ != 0L) {
            output.writeInt64(43, this.shuffleMergedFetchFallbackCount_);
         }

         if (this.shuffleMergedRemoteBlocksFetched_ != 0L) {
            output.writeInt64(44, this.shuffleMergedRemoteBlocksFetched_);
         }

         if (this.shuffleMergedLocalBlocksFetched_ != 0L) {
            output.writeInt64(45, this.shuffleMergedLocalBlocksFetched_);
         }

         if (this.shuffleMergedRemoteChunksFetched_ != 0L) {
            output.writeInt64(46, this.shuffleMergedRemoteChunksFetched_);
         }

         if (this.shuffleMergedLocalChunksFetched_ != 0L) {
            output.writeInt64(47, this.shuffleMergedLocalChunksFetched_);
         }

         if (this.shuffleMergedRemoteBytesRead_ != 0L) {
            output.writeInt64(48, this.shuffleMergedRemoteBytesRead_);
         }

         if (this.shuffleMergedLocalBytesRead_ != 0L) {
            output.writeInt64(49, this.shuffleMergedLocalBytesRead_);
         }

         if (this.shuffleRemoteReqsDuration_ != 0L) {
            output.writeInt64(50, this.shuffleRemoteReqsDuration_);
         }

         if (this.shuffleMergedRemoteReqDuration_ != 0L) {
            output.writeInt64(51, this.shuffleMergedRemoteReqDuration_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.taskId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.taskId_);
            }

            if (this.index_ != 0) {
               size += CodedOutputStream.computeInt32Size(2, this.index_);
            }

            if (this.attempt_ != 0) {
               size += CodedOutputStream.computeInt32Size(3, this.attempt_);
            }

            if (this.partitionId_ != 0) {
               size += CodedOutputStream.computeInt32Size(4, this.partitionId_);
            }

            if (this.launchTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.launchTime_);
            }

            if (this.resultFetchStart_ != 0L) {
               size += CodedOutputStream.computeInt64Size(6, this.resultFetchStart_);
            }

            if (this.duration_ != 0L) {
               size += CodedOutputStream.computeInt64Size(7, this.duration_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(8, this.executorId_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(9, this.host_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += GeneratedMessage.computeStringSize(10, this.status_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += GeneratedMessage.computeStringSize(11, this.taskLocality_);
            }

            if (this.speculative_) {
               size += CodedOutputStream.computeBoolSize(12, this.speculative_);
            }

            for(int i = 0; i < this.accumulatorUpdates_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(13, (MessageLite)this.accumulatorUpdates_.get(i));
            }

            if ((this.bitField0_ & 16) != 0) {
               size += GeneratedMessage.computeStringSize(14, this.errorMessage_);
            }

            if (this.hasMetrics_) {
               size += CodedOutputStream.computeBoolSize(15, this.hasMetrics_);
            }

            if (this.executorDeserializeTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(16, this.executorDeserializeTime_);
            }

            if (this.executorDeserializeCpuTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(17, this.executorDeserializeCpuTime_);
            }

            if (this.executorRunTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(18, this.executorRunTime_);
            }

            if (this.executorCpuTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(19, this.executorCpuTime_);
            }

            if (this.resultSize_ != 0L) {
               size += CodedOutputStream.computeInt64Size(20, this.resultSize_);
            }

            if (this.jvmGcTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(21, this.jvmGcTime_);
            }

            if (this.resultSerializationTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(22, this.resultSerializationTime_);
            }

            if (this.memoryBytesSpilled_ != 0L) {
               size += CodedOutputStream.computeInt64Size(23, this.memoryBytesSpilled_);
            }

            if (this.diskBytesSpilled_ != 0L) {
               size += CodedOutputStream.computeInt64Size(24, this.diskBytesSpilled_);
            }

            if (this.peakExecutionMemory_ != 0L) {
               size += CodedOutputStream.computeInt64Size(25, this.peakExecutionMemory_);
            }

            if (this.inputBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(26, this.inputBytesRead_);
            }

            if (this.inputRecordsRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(27, this.inputRecordsRead_);
            }

            if (this.outputBytesWritten_ != 0L) {
               size += CodedOutputStream.computeInt64Size(28, this.outputBytesWritten_);
            }

            if (this.outputRecordsWritten_ != 0L) {
               size += CodedOutputStream.computeInt64Size(29, this.outputRecordsWritten_);
            }

            if (this.shuffleRemoteBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(30, this.shuffleRemoteBlocksFetched_);
            }

            if (this.shuffleLocalBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(31, this.shuffleLocalBlocksFetched_);
            }

            if (this.shuffleFetchWaitTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(32, this.shuffleFetchWaitTime_);
            }

            if (this.shuffleRemoteBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(33, this.shuffleRemoteBytesRead_);
            }

            if (this.shuffleRemoteBytesReadToDisk_ != 0L) {
               size += CodedOutputStream.computeInt64Size(34, this.shuffleRemoteBytesReadToDisk_);
            }

            if (this.shuffleLocalBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(35, this.shuffleLocalBytesRead_);
            }

            if (this.shuffleRecordsRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(36, this.shuffleRecordsRead_);
            }

            if (this.shuffleBytesWritten_ != 0L) {
               size += CodedOutputStream.computeInt64Size(37, this.shuffleBytesWritten_);
            }

            if (this.shuffleWriteTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(38, this.shuffleWriteTime_);
            }

            if (this.shuffleRecordsWritten_ != 0L) {
               size += CodedOutputStream.computeInt64Size(39, this.shuffleRecordsWritten_);
            }

            if (this.stageId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(40, this.stageId_);
            }

            if (this.stageAttemptId_ != 0) {
               size += CodedOutputStream.computeInt32Size(41, this.stageAttemptId_);
            }

            if (this.shuffleCorruptMergedBlockChunks_ != 0L) {
               size += CodedOutputStream.computeInt64Size(42, this.shuffleCorruptMergedBlockChunks_);
            }

            if (this.shuffleMergedFetchFallbackCount_ != 0L) {
               size += CodedOutputStream.computeInt64Size(43, this.shuffleMergedFetchFallbackCount_);
            }

            if (this.shuffleMergedRemoteBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(44, this.shuffleMergedRemoteBlocksFetched_);
            }

            if (this.shuffleMergedLocalBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(45, this.shuffleMergedLocalBlocksFetched_);
            }

            if (this.shuffleMergedRemoteChunksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(46, this.shuffleMergedRemoteChunksFetched_);
            }

            if (this.shuffleMergedLocalChunksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(47, this.shuffleMergedLocalChunksFetched_);
            }

            if (this.shuffleMergedRemoteBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(48, this.shuffleMergedRemoteBytesRead_);
            }

            if (this.shuffleMergedLocalBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(49, this.shuffleMergedLocalBytesRead_);
            }

            if (this.shuffleRemoteReqsDuration_ != 0L) {
               size += CodedOutputStream.computeInt64Size(50, this.shuffleRemoteReqsDuration_);
            }

            if (this.shuffleMergedRemoteReqDuration_ != 0L) {
               size += CodedOutputStream.computeInt64Size(51, this.shuffleMergedRemoteReqDuration_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof TaskDataWrapper)) {
            return super.equals(obj);
         } else {
            TaskDataWrapper other = (TaskDataWrapper)obj;
            if (this.getTaskId() != other.getTaskId()) {
               return false;
            } else if (this.getIndex() != other.getIndex()) {
               return false;
            } else if (this.getAttempt() != other.getAttempt()) {
               return false;
            } else if (this.getPartitionId() != other.getPartitionId()) {
               return false;
            } else if (this.getLaunchTime() != other.getLaunchTime()) {
               return false;
            } else if (this.getResultFetchStart() != other.getResultFetchStart()) {
               return false;
            } else if (this.getDuration() != other.getDuration()) {
               return false;
            } else if (this.hasExecutorId() != other.hasExecutorId()) {
               return false;
            } else if (this.hasExecutorId() && !this.getExecutorId().equals(other.getExecutorId())) {
               return false;
            } else if (this.hasHost() != other.hasHost()) {
               return false;
            } else if (this.hasHost() && !this.getHost().equals(other.getHost())) {
               return false;
            } else if (this.hasStatus() != other.hasStatus()) {
               return false;
            } else if (this.hasStatus() && !this.getStatus().equals(other.getStatus())) {
               return false;
            } else if (this.hasTaskLocality() != other.hasTaskLocality()) {
               return false;
            } else if (this.hasTaskLocality() && !this.getTaskLocality().equals(other.getTaskLocality())) {
               return false;
            } else if (this.getSpeculative() != other.getSpeculative()) {
               return false;
            } else if (!this.getAccumulatorUpdatesList().equals(other.getAccumulatorUpdatesList())) {
               return false;
            } else if (this.hasErrorMessage() != other.hasErrorMessage()) {
               return false;
            } else if (this.hasErrorMessage() && !this.getErrorMessage().equals(other.getErrorMessage())) {
               return false;
            } else if (this.getHasMetrics() != other.getHasMetrics()) {
               return false;
            } else if (this.getExecutorDeserializeTime() != other.getExecutorDeserializeTime()) {
               return false;
            } else if (this.getExecutorDeserializeCpuTime() != other.getExecutorDeserializeCpuTime()) {
               return false;
            } else if (this.getExecutorRunTime() != other.getExecutorRunTime()) {
               return false;
            } else if (this.getExecutorCpuTime() != other.getExecutorCpuTime()) {
               return false;
            } else if (this.getResultSize() != other.getResultSize()) {
               return false;
            } else if (this.getJvmGcTime() != other.getJvmGcTime()) {
               return false;
            } else if (this.getResultSerializationTime() != other.getResultSerializationTime()) {
               return false;
            } else if (this.getMemoryBytesSpilled() != other.getMemoryBytesSpilled()) {
               return false;
            } else if (this.getDiskBytesSpilled() != other.getDiskBytesSpilled()) {
               return false;
            } else if (this.getPeakExecutionMemory() != other.getPeakExecutionMemory()) {
               return false;
            } else if (this.getInputBytesRead() != other.getInputBytesRead()) {
               return false;
            } else if (this.getInputRecordsRead() != other.getInputRecordsRead()) {
               return false;
            } else if (this.getOutputBytesWritten() != other.getOutputBytesWritten()) {
               return false;
            } else if (this.getOutputRecordsWritten() != other.getOutputRecordsWritten()) {
               return false;
            } else if (this.getShuffleRemoteBlocksFetched() != other.getShuffleRemoteBlocksFetched()) {
               return false;
            } else if (this.getShuffleLocalBlocksFetched() != other.getShuffleLocalBlocksFetched()) {
               return false;
            } else if (this.getShuffleFetchWaitTime() != other.getShuffleFetchWaitTime()) {
               return false;
            } else if (this.getShuffleRemoteBytesRead() != other.getShuffleRemoteBytesRead()) {
               return false;
            } else if (this.getShuffleRemoteBytesReadToDisk() != other.getShuffleRemoteBytesReadToDisk()) {
               return false;
            } else if (this.getShuffleLocalBytesRead() != other.getShuffleLocalBytesRead()) {
               return false;
            } else if (this.getShuffleRecordsRead() != other.getShuffleRecordsRead()) {
               return false;
            } else if (this.getShuffleBytesWritten() != other.getShuffleBytesWritten()) {
               return false;
            } else if (this.getShuffleWriteTime() != other.getShuffleWriteTime()) {
               return false;
            } else if (this.getShuffleRecordsWritten() != other.getShuffleRecordsWritten()) {
               return false;
            } else if (this.getStageId() != other.getStageId()) {
               return false;
            } else if (this.getStageAttemptId() != other.getStageAttemptId()) {
               return false;
            } else if (this.getShuffleCorruptMergedBlockChunks() != other.getShuffleCorruptMergedBlockChunks()) {
               return false;
            } else if (this.getShuffleMergedFetchFallbackCount() != other.getShuffleMergedFetchFallbackCount()) {
               return false;
            } else if (this.getShuffleMergedRemoteBlocksFetched() != other.getShuffleMergedRemoteBlocksFetched()) {
               return false;
            } else if (this.getShuffleMergedLocalBlocksFetched() != other.getShuffleMergedLocalBlocksFetched()) {
               return false;
            } else if (this.getShuffleMergedRemoteChunksFetched() != other.getShuffleMergedRemoteChunksFetched()) {
               return false;
            } else if (this.getShuffleMergedLocalChunksFetched() != other.getShuffleMergedLocalChunksFetched()) {
               return false;
            } else if (this.getShuffleMergedRemoteBytesRead() != other.getShuffleMergedRemoteBytesRead()) {
               return false;
            } else if (this.getShuffleMergedLocalBytesRead() != other.getShuffleMergedLocalBytesRead()) {
               return false;
            } else if (this.getShuffleRemoteReqsDuration() != other.getShuffleRemoteReqsDuration()) {
               return false;
            } else if (this.getShuffleMergedRemoteReqDuration() != other.getShuffleMergedRemoteReqDuration()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getTaskId());
            hash = 37 * hash + 2;
            hash = 53 * hash + this.getIndex();
            hash = 37 * hash + 3;
            hash = 53 * hash + this.getAttempt();
            hash = 37 * hash + 4;
            hash = 53 * hash + this.getPartitionId();
            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getLaunchTime());
            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(this.getResultFetchStart());
            hash = 37 * hash + 7;
            hash = 53 * hash + Internal.hashLong(this.getDuration());
            if (this.hasExecutorId()) {
               hash = 37 * hash + 8;
               hash = 53 * hash + this.getExecutorId().hashCode();
            }

            if (this.hasHost()) {
               hash = 37 * hash + 9;
               hash = 53 * hash + this.getHost().hashCode();
            }

            if (this.hasStatus()) {
               hash = 37 * hash + 10;
               hash = 53 * hash + this.getStatus().hashCode();
            }

            if (this.hasTaskLocality()) {
               hash = 37 * hash + 11;
               hash = 53 * hash + this.getTaskLocality().hashCode();
            }

            hash = 37 * hash + 12;
            hash = 53 * hash + Internal.hashBoolean(this.getSpeculative());
            if (this.getAccumulatorUpdatesCount() > 0) {
               hash = 37 * hash + 13;
               hash = 53 * hash + this.getAccumulatorUpdatesList().hashCode();
            }

            if (this.hasErrorMessage()) {
               hash = 37 * hash + 14;
               hash = 53 * hash + this.getErrorMessage().hashCode();
            }

            hash = 37 * hash + 15;
            hash = 53 * hash + Internal.hashBoolean(this.getHasMetrics());
            hash = 37 * hash + 16;
            hash = 53 * hash + Internal.hashLong(this.getExecutorDeserializeTime());
            hash = 37 * hash + 17;
            hash = 53 * hash + Internal.hashLong(this.getExecutorDeserializeCpuTime());
            hash = 37 * hash + 18;
            hash = 53 * hash + Internal.hashLong(this.getExecutorRunTime());
            hash = 37 * hash + 19;
            hash = 53 * hash + Internal.hashLong(this.getExecutorCpuTime());
            hash = 37 * hash + 20;
            hash = 53 * hash + Internal.hashLong(this.getResultSize());
            hash = 37 * hash + 21;
            hash = 53 * hash + Internal.hashLong(this.getJvmGcTime());
            hash = 37 * hash + 22;
            hash = 53 * hash + Internal.hashLong(this.getResultSerializationTime());
            hash = 37 * hash + 23;
            hash = 53 * hash + Internal.hashLong(this.getMemoryBytesSpilled());
            hash = 37 * hash + 24;
            hash = 53 * hash + Internal.hashLong(this.getDiskBytesSpilled());
            hash = 37 * hash + 25;
            hash = 53 * hash + Internal.hashLong(this.getPeakExecutionMemory());
            hash = 37 * hash + 26;
            hash = 53 * hash + Internal.hashLong(this.getInputBytesRead());
            hash = 37 * hash + 27;
            hash = 53 * hash + Internal.hashLong(this.getInputRecordsRead());
            hash = 37 * hash + 28;
            hash = 53 * hash + Internal.hashLong(this.getOutputBytesWritten());
            hash = 37 * hash + 29;
            hash = 53 * hash + Internal.hashLong(this.getOutputRecordsWritten());
            hash = 37 * hash + 30;
            hash = 53 * hash + Internal.hashLong(this.getShuffleRemoteBlocksFetched());
            hash = 37 * hash + 31;
            hash = 53 * hash + Internal.hashLong(this.getShuffleLocalBlocksFetched());
            hash = 37 * hash + 32;
            hash = 53 * hash + Internal.hashLong(this.getShuffleFetchWaitTime());
            hash = 37 * hash + 33;
            hash = 53 * hash + Internal.hashLong(this.getShuffleRemoteBytesRead());
            hash = 37 * hash + 34;
            hash = 53 * hash + Internal.hashLong(this.getShuffleRemoteBytesReadToDisk());
            hash = 37 * hash + 35;
            hash = 53 * hash + Internal.hashLong(this.getShuffleLocalBytesRead());
            hash = 37 * hash + 36;
            hash = 53 * hash + Internal.hashLong(this.getShuffleRecordsRead());
            hash = 37 * hash + 37;
            hash = 53 * hash + Internal.hashLong(this.getShuffleBytesWritten());
            hash = 37 * hash + 38;
            hash = 53 * hash + Internal.hashLong(this.getShuffleWriteTime());
            hash = 37 * hash + 39;
            hash = 53 * hash + Internal.hashLong(this.getShuffleRecordsWritten());
            hash = 37 * hash + 40;
            hash = 53 * hash + Internal.hashLong(this.getStageId());
            hash = 37 * hash + 41;
            hash = 53 * hash + this.getStageAttemptId();
            hash = 37 * hash + 42;
            hash = 53 * hash + Internal.hashLong(this.getShuffleCorruptMergedBlockChunks());
            hash = 37 * hash + 43;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedFetchFallbackCount());
            hash = 37 * hash + 44;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedRemoteBlocksFetched());
            hash = 37 * hash + 45;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedLocalBlocksFetched());
            hash = 37 * hash + 46;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedRemoteChunksFetched());
            hash = 37 * hash + 47;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedLocalChunksFetched());
            hash = 37 * hash + 48;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedRemoteBytesRead());
            hash = 37 * hash + 49;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedLocalBytesRead());
            hash = 37 * hash + 50;
            hash = 53 * hash + Internal.hashLong(this.getShuffleRemoteReqsDuration());
            hash = 37 * hash + 51;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedRemoteReqDuration());
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static TaskDataWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (TaskDataWrapper)PARSER.parseFrom(data);
      }

      public static TaskDataWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskDataWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskDataWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (TaskDataWrapper)PARSER.parseFrom(data);
      }

      public static TaskDataWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskDataWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskDataWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (TaskDataWrapper)PARSER.parseFrom(data);
      }

      public static TaskDataWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskDataWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskDataWrapper parseFrom(InputStream input) throws IOException {
         return (TaskDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static TaskDataWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static TaskDataWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (TaskDataWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static TaskDataWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskDataWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static TaskDataWrapper parseFrom(CodedInputStream input) throws IOException {
         return (TaskDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static TaskDataWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(TaskDataWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static TaskDataWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public TaskDataWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", TaskDataWrapper.class.getName());
         DEFAULT_INSTANCE = new TaskDataWrapper();
         PARSER = new AbstractParser() {
            public TaskDataWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.TaskDataWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements TaskDataWrapperOrBuilder {
         private int bitField0_;
         private int bitField1_;
         private long taskId_;
         private int index_;
         private int attempt_;
         private int partitionId_;
         private long launchTime_;
         private long resultFetchStart_;
         private long duration_;
         private Object executorId_ = "";
         private Object host_ = "";
         private Object status_ = "";
         private Object taskLocality_ = "";
         private boolean speculative_;
         private List accumulatorUpdates_ = Collections.emptyList();
         private RepeatedFieldBuilder accumulatorUpdatesBuilder_;
         private Object errorMessage_ = "";
         private boolean hasMetrics_;
         private long executorDeserializeTime_;
         private long executorDeserializeCpuTime_;
         private long executorRunTime_;
         private long executorCpuTime_;
         private long resultSize_;
         private long jvmGcTime_;
         private long resultSerializationTime_;
         private long memoryBytesSpilled_;
         private long diskBytesSpilled_;
         private long peakExecutionMemory_;
         private long inputBytesRead_;
         private long inputRecordsRead_;
         private long outputBytesWritten_;
         private long outputRecordsWritten_;
         private long shuffleRemoteBlocksFetched_;
         private long shuffleLocalBlocksFetched_;
         private long shuffleFetchWaitTime_;
         private long shuffleRemoteBytesRead_;
         private long shuffleRemoteBytesReadToDisk_;
         private long shuffleLocalBytesRead_;
         private long shuffleRecordsRead_;
         private long shuffleBytesWritten_;
         private long shuffleWriteTime_;
         private long shuffleRecordsWritten_;
         private long stageId_;
         private int stageAttemptId_;
         private long shuffleCorruptMergedBlockChunks_;
         private long shuffleMergedFetchFallbackCount_;
         private long shuffleMergedRemoteBlocksFetched_;
         private long shuffleMergedLocalBlocksFetched_;
         private long shuffleMergedRemoteChunksFetched_;
         private long shuffleMergedLocalChunksFetched_;
         private long shuffleMergedRemoteBytesRead_;
         private long shuffleMergedLocalBytesRead_;
         private long shuffleRemoteReqsDuration_;
         private long shuffleMergedRemoteReqDuration_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskDataWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskDataWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(TaskDataWrapper.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.bitField1_ = 0;
            this.taskId_ = 0L;
            this.index_ = 0;
            this.attempt_ = 0;
            this.partitionId_ = 0;
            this.launchTime_ = 0L;
            this.resultFetchStart_ = 0L;
            this.duration_ = 0L;
            this.executorId_ = "";
            this.host_ = "";
            this.status_ = "";
            this.taskLocality_ = "";
            this.speculative_ = false;
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.accumulatorUpdates_ = Collections.emptyList();
            } else {
               this.accumulatorUpdates_ = null;
               this.accumulatorUpdatesBuilder_.clear();
            }

            this.bitField0_ &= -4097;
            this.errorMessage_ = "";
            this.hasMetrics_ = false;
            this.executorDeserializeTime_ = 0L;
            this.executorDeserializeCpuTime_ = 0L;
            this.executorRunTime_ = 0L;
            this.executorCpuTime_ = 0L;
            this.resultSize_ = 0L;
            this.jvmGcTime_ = 0L;
            this.resultSerializationTime_ = 0L;
            this.memoryBytesSpilled_ = 0L;
            this.diskBytesSpilled_ = 0L;
            this.peakExecutionMemory_ = 0L;
            this.inputBytesRead_ = 0L;
            this.inputRecordsRead_ = 0L;
            this.outputBytesWritten_ = 0L;
            this.outputRecordsWritten_ = 0L;
            this.shuffleRemoteBlocksFetched_ = 0L;
            this.shuffleLocalBlocksFetched_ = 0L;
            this.shuffleFetchWaitTime_ = 0L;
            this.shuffleRemoteBytesRead_ = 0L;
            this.shuffleRemoteBytesReadToDisk_ = 0L;
            this.shuffleLocalBytesRead_ = 0L;
            this.shuffleRecordsRead_ = 0L;
            this.shuffleBytesWritten_ = 0L;
            this.shuffleWriteTime_ = 0L;
            this.shuffleRecordsWritten_ = 0L;
            this.stageId_ = 0L;
            this.stageAttemptId_ = 0;
            this.shuffleCorruptMergedBlockChunks_ = 0L;
            this.shuffleMergedFetchFallbackCount_ = 0L;
            this.shuffleMergedRemoteBlocksFetched_ = 0L;
            this.shuffleMergedLocalBlocksFetched_ = 0L;
            this.shuffleMergedRemoteChunksFetched_ = 0L;
            this.shuffleMergedLocalChunksFetched_ = 0L;
            this.shuffleMergedRemoteBytesRead_ = 0L;
            this.shuffleMergedLocalBytesRead_ = 0L;
            this.shuffleRemoteReqsDuration_ = 0L;
            this.shuffleMergedRemoteReqDuration_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskDataWrapper_descriptor;
         }

         public TaskDataWrapper getDefaultInstanceForType() {
            return StoreTypes.TaskDataWrapper.getDefaultInstance();
         }

         public TaskDataWrapper build() {
            TaskDataWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public TaskDataWrapper buildPartial() {
            TaskDataWrapper result = new TaskDataWrapper(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            if (this.bitField1_ != 0) {
               this.buildPartial1(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(TaskDataWrapper result) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if ((this.bitField0_ & 4096) != 0) {
                  this.accumulatorUpdates_ = Collections.unmodifiableList(this.accumulatorUpdates_);
                  this.bitField0_ &= -4097;
               }

               result.accumulatorUpdates_ = this.accumulatorUpdates_;
            } else {
               result.accumulatorUpdates_ = this.accumulatorUpdatesBuilder_.build();
            }

         }

         private void buildPartial0(TaskDataWrapper result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.taskId_ = this.taskId_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.index_ = this.index_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.attempt_ = this.attempt_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.partitionId_ = this.partitionId_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.launchTime_ = this.launchTime_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.resultFetchStart_ = this.resultFetchStart_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.duration_ = this.duration_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 128) != 0) {
               result.executorId_ = this.executorId_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.host_ = this.host_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 512) != 0) {
               result.status_ = this.status_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 1024) != 0) {
               result.taskLocality_ = this.taskLocality_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 2048) != 0) {
               result.speculative_ = this.speculative_;
            }

            if ((from_bitField0_ & 8192) != 0) {
               result.errorMessage_ = this.errorMessage_;
               to_bitField0_ |= 16;
            }

            if ((from_bitField0_ & 16384) != 0) {
               result.hasMetrics_ = this.hasMetrics_;
            }

            if ((from_bitField0_ & '耀') != 0) {
               result.executorDeserializeTime_ = this.executorDeserializeTime_;
            }

            if ((from_bitField0_ & 65536) != 0) {
               result.executorDeserializeCpuTime_ = this.executorDeserializeCpuTime_;
            }

            if ((from_bitField0_ & 131072) != 0) {
               result.executorRunTime_ = this.executorRunTime_;
            }

            if ((from_bitField0_ & 262144) != 0) {
               result.executorCpuTime_ = this.executorCpuTime_;
            }

            if ((from_bitField0_ & 524288) != 0) {
               result.resultSize_ = this.resultSize_;
            }

            if ((from_bitField0_ & 1048576) != 0) {
               result.jvmGcTime_ = this.jvmGcTime_;
            }

            if ((from_bitField0_ & 2097152) != 0) {
               result.resultSerializationTime_ = this.resultSerializationTime_;
            }

            if ((from_bitField0_ & 4194304) != 0) {
               result.memoryBytesSpilled_ = this.memoryBytesSpilled_;
            }

            if ((from_bitField0_ & 8388608) != 0) {
               result.diskBytesSpilled_ = this.diskBytesSpilled_;
            }

            if ((from_bitField0_ & 16777216) != 0) {
               result.peakExecutionMemory_ = this.peakExecutionMemory_;
            }

            if ((from_bitField0_ & 33554432) != 0) {
               result.inputBytesRead_ = this.inputBytesRead_;
            }

            if ((from_bitField0_ & 67108864) != 0) {
               result.inputRecordsRead_ = this.inputRecordsRead_;
            }

            if ((from_bitField0_ & 134217728) != 0) {
               result.outputBytesWritten_ = this.outputBytesWritten_;
            }

            if ((from_bitField0_ & 268435456) != 0) {
               result.outputRecordsWritten_ = this.outputRecordsWritten_;
            }

            if ((from_bitField0_ & 536870912) != 0) {
               result.shuffleRemoteBlocksFetched_ = this.shuffleRemoteBlocksFetched_;
            }

            if ((from_bitField0_ & 1073741824) != 0) {
               result.shuffleLocalBlocksFetched_ = this.shuffleLocalBlocksFetched_;
            }

            if ((from_bitField0_ & Integer.MIN_VALUE) != 0) {
               result.shuffleFetchWaitTime_ = this.shuffleFetchWaitTime_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         private void buildPartial1(TaskDataWrapper result) {
            int from_bitField1_ = this.bitField1_;
            if ((from_bitField1_ & 1) != 0) {
               result.shuffleRemoteBytesRead_ = this.shuffleRemoteBytesRead_;
            }

            if ((from_bitField1_ & 2) != 0) {
               result.shuffleRemoteBytesReadToDisk_ = this.shuffleRemoteBytesReadToDisk_;
            }

            if ((from_bitField1_ & 4) != 0) {
               result.shuffleLocalBytesRead_ = this.shuffleLocalBytesRead_;
            }

            if ((from_bitField1_ & 8) != 0) {
               result.shuffleRecordsRead_ = this.shuffleRecordsRead_;
            }

            if ((from_bitField1_ & 16) != 0) {
               result.shuffleBytesWritten_ = this.shuffleBytesWritten_;
            }

            if ((from_bitField1_ & 32) != 0) {
               result.shuffleWriteTime_ = this.shuffleWriteTime_;
            }

            if ((from_bitField1_ & 64) != 0) {
               result.shuffleRecordsWritten_ = this.shuffleRecordsWritten_;
            }

            if ((from_bitField1_ & 128) != 0) {
               result.stageId_ = this.stageId_;
            }

            if ((from_bitField1_ & 256) != 0) {
               result.stageAttemptId_ = this.stageAttemptId_;
            }

            if ((from_bitField1_ & 512) != 0) {
               result.shuffleCorruptMergedBlockChunks_ = this.shuffleCorruptMergedBlockChunks_;
            }

            if ((from_bitField1_ & 1024) != 0) {
               result.shuffleMergedFetchFallbackCount_ = this.shuffleMergedFetchFallbackCount_;
            }

            if ((from_bitField1_ & 2048) != 0) {
               result.shuffleMergedRemoteBlocksFetched_ = this.shuffleMergedRemoteBlocksFetched_;
            }

            if ((from_bitField1_ & 4096) != 0) {
               result.shuffleMergedLocalBlocksFetched_ = this.shuffleMergedLocalBlocksFetched_;
            }

            if ((from_bitField1_ & 8192) != 0) {
               result.shuffleMergedRemoteChunksFetched_ = this.shuffleMergedRemoteChunksFetched_;
            }

            if ((from_bitField1_ & 16384) != 0) {
               result.shuffleMergedLocalChunksFetched_ = this.shuffleMergedLocalChunksFetched_;
            }

            if ((from_bitField1_ & '耀') != 0) {
               result.shuffleMergedRemoteBytesRead_ = this.shuffleMergedRemoteBytesRead_;
            }

            if ((from_bitField1_ & 65536) != 0) {
               result.shuffleMergedLocalBytesRead_ = this.shuffleMergedLocalBytesRead_;
            }

            if ((from_bitField1_ & 131072) != 0) {
               result.shuffleRemoteReqsDuration_ = this.shuffleRemoteReqsDuration_;
            }

            if ((from_bitField1_ & 262144) != 0) {
               result.shuffleMergedRemoteReqDuration_ = this.shuffleMergedRemoteReqDuration_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof TaskDataWrapper) {
               return this.mergeFrom((TaskDataWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(TaskDataWrapper other) {
            if (other == StoreTypes.TaskDataWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.getTaskId() != 0L) {
                  this.setTaskId(other.getTaskId());
               }

               if (other.getIndex() != 0) {
                  this.setIndex(other.getIndex());
               }

               if (other.getAttempt() != 0) {
                  this.setAttempt(other.getAttempt());
               }

               if (other.getPartitionId() != 0) {
                  this.setPartitionId(other.getPartitionId());
               }

               if (other.getLaunchTime() != 0L) {
                  this.setLaunchTime(other.getLaunchTime());
               }

               if (other.getResultFetchStart() != 0L) {
                  this.setResultFetchStart(other.getResultFetchStart());
               }

               if (other.getDuration() != 0L) {
                  this.setDuration(other.getDuration());
               }

               if (other.hasExecutorId()) {
                  this.executorId_ = other.executorId_;
                  this.bitField0_ |= 128;
                  this.onChanged();
               }

               if (other.hasHost()) {
                  this.host_ = other.host_;
                  this.bitField0_ |= 256;
                  this.onChanged();
               }

               if (other.hasStatus()) {
                  this.status_ = other.status_;
                  this.bitField0_ |= 512;
                  this.onChanged();
               }

               if (other.hasTaskLocality()) {
                  this.taskLocality_ = other.taskLocality_;
                  this.bitField0_ |= 1024;
                  this.onChanged();
               }

               if (other.getSpeculative()) {
                  this.setSpeculative(other.getSpeculative());
               }

               if (this.accumulatorUpdatesBuilder_ == null) {
                  if (!other.accumulatorUpdates_.isEmpty()) {
                     if (this.accumulatorUpdates_.isEmpty()) {
                        this.accumulatorUpdates_ = other.accumulatorUpdates_;
                        this.bitField0_ &= -4097;
                     } else {
                        this.ensureAccumulatorUpdatesIsMutable();
                        this.accumulatorUpdates_.addAll(other.accumulatorUpdates_);
                     }

                     this.onChanged();
                  }
               } else if (!other.accumulatorUpdates_.isEmpty()) {
                  if (this.accumulatorUpdatesBuilder_.isEmpty()) {
                     this.accumulatorUpdatesBuilder_.dispose();
                     this.accumulatorUpdatesBuilder_ = null;
                     this.accumulatorUpdates_ = other.accumulatorUpdates_;
                     this.bitField0_ &= -4097;
                     this.accumulatorUpdatesBuilder_ = StoreTypes.TaskDataWrapper.alwaysUseFieldBuilders ? this.getAccumulatorUpdatesFieldBuilder() : null;
                  } else {
                     this.accumulatorUpdatesBuilder_.addAllMessages(other.accumulatorUpdates_);
                  }
               }

               if (other.hasErrorMessage()) {
                  this.errorMessage_ = other.errorMessage_;
                  this.bitField0_ |= 8192;
                  this.onChanged();
               }

               if (other.getHasMetrics()) {
                  this.setHasMetrics(other.getHasMetrics());
               }

               if (other.getExecutorDeserializeTime() != 0L) {
                  this.setExecutorDeserializeTime(other.getExecutorDeserializeTime());
               }

               if (other.getExecutorDeserializeCpuTime() != 0L) {
                  this.setExecutorDeserializeCpuTime(other.getExecutorDeserializeCpuTime());
               }

               if (other.getExecutorRunTime() != 0L) {
                  this.setExecutorRunTime(other.getExecutorRunTime());
               }

               if (other.getExecutorCpuTime() != 0L) {
                  this.setExecutorCpuTime(other.getExecutorCpuTime());
               }

               if (other.getResultSize() != 0L) {
                  this.setResultSize(other.getResultSize());
               }

               if (other.getJvmGcTime() != 0L) {
                  this.setJvmGcTime(other.getJvmGcTime());
               }

               if (other.getResultSerializationTime() != 0L) {
                  this.setResultSerializationTime(other.getResultSerializationTime());
               }

               if (other.getMemoryBytesSpilled() != 0L) {
                  this.setMemoryBytesSpilled(other.getMemoryBytesSpilled());
               }

               if (other.getDiskBytesSpilled() != 0L) {
                  this.setDiskBytesSpilled(other.getDiskBytesSpilled());
               }

               if (other.getPeakExecutionMemory() != 0L) {
                  this.setPeakExecutionMemory(other.getPeakExecutionMemory());
               }

               if (other.getInputBytesRead() != 0L) {
                  this.setInputBytesRead(other.getInputBytesRead());
               }

               if (other.getInputRecordsRead() != 0L) {
                  this.setInputRecordsRead(other.getInputRecordsRead());
               }

               if (other.getOutputBytesWritten() != 0L) {
                  this.setOutputBytesWritten(other.getOutputBytesWritten());
               }

               if (other.getOutputRecordsWritten() != 0L) {
                  this.setOutputRecordsWritten(other.getOutputRecordsWritten());
               }

               if (other.getShuffleRemoteBlocksFetched() != 0L) {
                  this.setShuffleRemoteBlocksFetched(other.getShuffleRemoteBlocksFetched());
               }

               if (other.getShuffleLocalBlocksFetched() != 0L) {
                  this.setShuffleLocalBlocksFetched(other.getShuffleLocalBlocksFetched());
               }

               if (other.getShuffleFetchWaitTime() != 0L) {
                  this.setShuffleFetchWaitTime(other.getShuffleFetchWaitTime());
               }

               if (other.getShuffleRemoteBytesRead() != 0L) {
                  this.setShuffleRemoteBytesRead(other.getShuffleRemoteBytesRead());
               }

               if (other.getShuffleRemoteBytesReadToDisk() != 0L) {
                  this.setShuffleRemoteBytesReadToDisk(other.getShuffleRemoteBytesReadToDisk());
               }

               if (other.getShuffleLocalBytesRead() != 0L) {
                  this.setShuffleLocalBytesRead(other.getShuffleLocalBytesRead());
               }

               if (other.getShuffleRecordsRead() != 0L) {
                  this.setShuffleRecordsRead(other.getShuffleRecordsRead());
               }

               if (other.getShuffleBytesWritten() != 0L) {
                  this.setShuffleBytesWritten(other.getShuffleBytesWritten());
               }

               if (other.getShuffleWriteTime() != 0L) {
                  this.setShuffleWriteTime(other.getShuffleWriteTime());
               }

               if (other.getShuffleRecordsWritten() != 0L) {
                  this.setShuffleRecordsWritten(other.getShuffleRecordsWritten());
               }

               if (other.getStageId() != 0L) {
                  this.setStageId(other.getStageId());
               }

               if (other.getStageAttemptId() != 0) {
                  this.setStageAttemptId(other.getStageAttemptId());
               }

               if (other.getShuffleCorruptMergedBlockChunks() != 0L) {
                  this.setShuffleCorruptMergedBlockChunks(other.getShuffleCorruptMergedBlockChunks());
               }

               if (other.getShuffleMergedFetchFallbackCount() != 0L) {
                  this.setShuffleMergedFetchFallbackCount(other.getShuffleMergedFetchFallbackCount());
               }

               if (other.getShuffleMergedRemoteBlocksFetched() != 0L) {
                  this.setShuffleMergedRemoteBlocksFetched(other.getShuffleMergedRemoteBlocksFetched());
               }

               if (other.getShuffleMergedLocalBlocksFetched() != 0L) {
                  this.setShuffleMergedLocalBlocksFetched(other.getShuffleMergedLocalBlocksFetched());
               }

               if (other.getShuffleMergedRemoteChunksFetched() != 0L) {
                  this.setShuffleMergedRemoteChunksFetched(other.getShuffleMergedRemoteChunksFetched());
               }

               if (other.getShuffleMergedLocalChunksFetched() != 0L) {
                  this.setShuffleMergedLocalChunksFetched(other.getShuffleMergedLocalChunksFetched());
               }

               if (other.getShuffleMergedRemoteBytesRead() != 0L) {
                  this.setShuffleMergedRemoteBytesRead(other.getShuffleMergedRemoteBytesRead());
               }

               if (other.getShuffleMergedLocalBytesRead() != 0L) {
                  this.setShuffleMergedLocalBytesRead(other.getShuffleMergedLocalBytesRead());
               }

               if (other.getShuffleRemoteReqsDuration() != 0L) {
                  this.setShuffleRemoteReqsDuration(other.getShuffleRemoteReqsDuration());
               }

               if (other.getShuffleMergedRemoteReqDuration() != 0L) {
                  this.setShuffleMergedRemoteReqDuration(other.getShuffleMergedRemoteReqDuration());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.taskId_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.index_ = input.readInt32();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.attempt_ = input.readInt32();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.partitionId_ = input.readInt32();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.launchTime_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.resultFetchStart_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.duration_ = input.readInt64();
                           this.bitField0_ |= 64;
                           break;
                        case 66:
                           this.executorId_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 128;
                           break;
                        case 74:
                           this.host_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 256;
                           break;
                        case 82:
                           this.status_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 512;
                           break;
                        case 90:
                           this.taskLocality_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1024;
                           break;
                        case 96:
                           this.speculative_ = input.readBool();
                           this.bitField0_ |= 2048;
                           break;
                        case 106:
                           AccumulableInfo m = (AccumulableInfo)input.readMessage(StoreTypes.AccumulableInfo.parser(), extensionRegistry);
                           if (this.accumulatorUpdatesBuilder_ == null) {
                              this.ensureAccumulatorUpdatesIsMutable();
                              this.accumulatorUpdates_.add(m);
                           } else {
                              this.accumulatorUpdatesBuilder_.addMessage(m);
                           }
                           break;
                        case 114:
                           this.errorMessage_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 8192;
                           break;
                        case 120:
                           this.hasMetrics_ = input.readBool();
                           this.bitField0_ |= 16384;
                           break;
                        case 128:
                           this.executorDeserializeTime_ = input.readInt64();
                           this.bitField0_ |= 32768;
                           break;
                        case 136:
                           this.executorDeserializeCpuTime_ = input.readInt64();
                           this.bitField0_ |= 65536;
                           break;
                        case 144:
                           this.executorRunTime_ = input.readInt64();
                           this.bitField0_ |= 131072;
                           break;
                        case 152:
                           this.executorCpuTime_ = input.readInt64();
                           this.bitField0_ |= 262144;
                           break;
                        case 160:
                           this.resultSize_ = input.readInt64();
                           this.bitField0_ |= 524288;
                           break;
                        case 168:
                           this.jvmGcTime_ = input.readInt64();
                           this.bitField0_ |= 1048576;
                           break;
                        case 176:
                           this.resultSerializationTime_ = input.readInt64();
                           this.bitField0_ |= 2097152;
                           break;
                        case 184:
                           this.memoryBytesSpilled_ = input.readInt64();
                           this.bitField0_ |= 4194304;
                           break;
                        case 192:
                           this.diskBytesSpilled_ = input.readInt64();
                           this.bitField0_ |= 8388608;
                           break;
                        case 200:
                           this.peakExecutionMemory_ = input.readInt64();
                           this.bitField0_ |= 16777216;
                           break;
                        case 208:
                           this.inputBytesRead_ = input.readInt64();
                           this.bitField0_ |= 33554432;
                           break;
                        case 216:
                           this.inputRecordsRead_ = input.readInt64();
                           this.bitField0_ |= 67108864;
                           break;
                        case 224:
                           this.outputBytesWritten_ = input.readInt64();
                           this.bitField0_ |= 134217728;
                           break;
                        case 232:
                           this.outputRecordsWritten_ = input.readInt64();
                           this.bitField0_ |= 268435456;
                           break;
                        case 240:
                           this.shuffleRemoteBlocksFetched_ = input.readInt64();
                           this.bitField0_ |= 536870912;
                           break;
                        case 248:
                           this.shuffleLocalBlocksFetched_ = input.readInt64();
                           this.bitField0_ |= 1073741824;
                           break;
                        case 256:
                           this.shuffleFetchWaitTime_ = input.readInt64();
                           this.bitField0_ |= Integer.MIN_VALUE;
                           break;
                        case 264:
                           this.shuffleRemoteBytesRead_ = input.readInt64();
                           this.bitField1_ |= 1;
                           break;
                        case 272:
                           this.shuffleRemoteBytesReadToDisk_ = input.readInt64();
                           this.bitField1_ |= 2;
                           break;
                        case 280:
                           this.shuffleLocalBytesRead_ = input.readInt64();
                           this.bitField1_ |= 4;
                           break;
                        case 288:
                           this.shuffleRecordsRead_ = input.readInt64();
                           this.bitField1_ |= 8;
                           break;
                        case 296:
                           this.shuffleBytesWritten_ = input.readInt64();
                           this.bitField1_ |= 16;
                           break;
                        case 304:
                           this.shuffleWriteTime_ = input.readInt64();
                           this.bitField1_ |= 32;
                           break;
                        case 312:
                           this.shuffleRecordsWritten_ = input.readInt64();
                           this.bitField1_ |= 64;
                           break;
                        case 320:
                           this.stageId_ = input.readInt64();
                           this.bitField1_ |= 128;
                           break;
                        case 328:
                           this.stageAttemptId_ = input.readInt32();
                           this.bitField1_ |= 256;
                           break;
                        case 336:
                           this.shuffleCorruptMergedBlockChunks_ = input.readInt64();
                           this.bitField1_ |= 512;
                           break;
                        case 344:
                           this.shuffleMergedFetchFallbackCount_ = input.readInt64();
                           this.bitField1_ |= 1024;
                           break;
                        case 352:
                           this.shuffleMergedRemoteBlocksFetched_ = input.readInt64();
                           this.bitField1_ |= 2048;
                           break;
                        case 360:
                           this.shuffleMergedLocalBlocksFetched_ = input.readInt64();
                           this.bitField1_ |= 4096;
                           break;
                        case 368:
                           this.shuffleMergedRemoteChunksFetched_ = input.readInt64();
                           this.bitField1_ |= 8192;
                           break;
                        case 376:
                           this.shuffleMergedLocalChunksFetched_ = input.readInt64();
                           this.bitField1_ |= 16384;
                           break;
                        case 384:
                           this.shuffleMergedRemoteBytesRead_ = input.readInt64();
                           this.bitField1_ |= 32768;
                           break;
                        case 392:
                           this.shuffleMergedLocalBytesRead_ = input.readInt64();
                           this.bitField1_ |= 65536;
                           break;
                        case 400:
                           this.shuffleRemoteReqsDuration_ = input.readInt64();
                           this.bitField1_ |= 131072;
                           break;
                        case 408:
                           this.shuffleMergedRemoteReqDuration_ = input.readInt64();
                           this.bitField1_ |= 262144;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getTaskId() {
            return this.taskId_;
         }

         public Builder setTaskId(long value) {
            this.taskId_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearTaskId() {
            this.bitField0_ &= -2;
            this.taskId_ = 0L;
            this.onChanged();
            return this;
         }

         public int getIndex() {
            return this.index_;
         }

         public Builder setIndex(int value) {
            this.index_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearIndex() {
            this.bitField0_ &= -3;
            this.index_ = 0;
            this.onChanged();
            return this;
         }

         public int getAttempt() {
            return this.attempt_;
         }

         public Builder setAttempt(int value) {
            this.attempt_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearAttempt() {
            this.bitField0_ &= -5;
            this.attempt_ = 0;
            this.onChanged();
            return this;
         }

         public int getPartitionId() {
            return this.partitionId_;
         }

         public Builder setPartitionId(int value) {
            this.partitionId_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearPartitionId() {
            this.bitField0_ &= -9;
            this.partitionId_ = 0;
            this.onChanged();
            return this;
         }

         public long getLaunchTime() {
            return this.launchTime_;
         }

         public Builder setLaunchTime(long value) {
            this.launchTime_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearLaunchTime() {
            this.bitField0_ &= -17;
            this.launchTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getResultFetchStart() {
            return this.resultFetchStart_;
         }

         public Builder setResultFetchStart(long value) {
            this.resultFetchStart_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearResultFetchStart() {
            this.bitField0_ &= -33;
            this.resultFetchStart_ = 0L;
            this.onChanged();
            return this;
         }

         public long getDuration() {
            return this.duration_;
         }

         public Builder setDuration(long value) {
            this.duration_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearDuration() {
            this.bitField0_ &= -65;
            this.duration_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasExecutorId() {
            return (this.bitField0_ & 128) != 0;
         }

         public String getExecutorId() {
            Object ref = this.executorId_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.executorId_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getExecutorIdBytes() {
            Object ref = this.executorId_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.executorId_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setExecutorId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.executorId_ = value;
               this.bitField0_ |= 128;
               this.onChanged();
               return this;
            }
         }

         public Builder clearExecutorId() {
            this.executorId_ = StoreTypes.TaskDataWrapper.getDefaultInstance().getExecutorId();
            this.bitField0_ &= -129;
            this.onChanged();
            return this;
         }

         public Builder setExecutorIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.TaskDataWrapper.checkByteStringIsUtf8(value);
               this.executorId_ = value;
               this.bitField0_ |= 128;
               this.onChanged();
               return this;
            }
         }

         public boolean hasHost() {
            return (this.bitField0_ & 256) != 0;
         }

         public String getHost() {
            Object ref = this.host_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.host_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getHostBytes() {
            Object ref = this.host_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.host_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setHost(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.host_ = value;
               this.bitField0_ |= 256;
               this.onChanged();
               return this;
            }
         }

         public Builder clearHost() {
            this.host_ = StoreTypes.TaskDataWrapper.getDefaultInstance().getHost();
            this.bitField0_ &= -257;
            this.onChanged();
            return this;
         }

         public Builder setHostBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.TaskDataWrapper.checkByteStringIsUtf8(value);
               this.host_ = value;
               this.bitField0_ |= 256;
               this.onChanged();
               return this;
            }
         }

         public boolean hasStatus() {
            return (this.bitField0_ & 512) != 0;
         }

         public String getStatus() {
            Object ref = this.status_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.status_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getStatusBytes() {
            Object ref = this.status_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.status_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setStatus(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.status_ = value;
               this.bitField0_ |= 512;
               this.onChanged();
               return this;
            }
         }

         public Builder clearStatus() {
            this.status_ = StoreTypes.TaskDataWrapper.getDefaultInstance().getStatus();
            this.bitField0_ &= -513;
            this.onChanged();
            return this;
         }

         public Builder setStatusBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.TaskDataWrapper.checkByteStringIsUtf8(value);
               this.status_ = value;
               this.bitField0_ |= 512;
               this.onChanged();
               return this;
            }
         }

         public boolean hasTaskLocality() {
            return (this.bitField0_ & 1024) != 0;
         }

         public String getTaskLocality() {
            Object ref = this.taskLocality_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.taskLocality_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getTaskLocalityBytes() {
            Object ref = this.taskLocality_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.taskLocality_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setTaskLocality(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.taskLocality_ = value;
               this.bitField0_ |= 1024;
               this.onChanged();
               return this;
            }
         }

         public Builder clearTaskLocality() {
            this.taskLocality_ = StoreTypes.TaskDataWrapper.getDefaultInstance().getTaskLocality();
            this.bitField0_ &= -1025;
            this.onChanged();
            return this;
         }

         public Builder setTaskLocalityBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.TaskDataWrapper.checkByteStringIsUtf8(value);
               this.taskLocality_ = value;
               this.bitField0_ |= 1024;
               this.onChanged();
               return this;
            }
         }

         public boolean getSpeculative() {
            return this.speculative_;
         }

         public Builder setSpeculative(boolean value) {
            this.speculative_ = value;
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder clearSpeculative() {
            this.bitField0_ &= -2049;
            this.speculative_ = false;
            this.onChanged();
            return this;
         }

         private void ensureAccumulatorUpdatesIsMutable() {
            if ((this.bitField0_ & 4096) == 0) {
               this.accumulatorUpdates_ = new ArrayList(this.accumulatorUpdates_);
               this.bitField0_ |= 4096;
            }

         }

         public List getAccumulatorUpdatesList() {
            return this.accumulatorUpdatesBuilder_ == null ? Collections.unmodifiableList(this.accumulatorUpdates_) : this.accumulatorUpdatesBuilder_.getMessageList();
         }

         public int getAccumulatorUpdatesCount() {
            return this.accumulatorUpdatesBuilder_ == null ? this.accumulatorUpdates_.size() : this.accumulatorUpdatesBuilder_.getCount();
         }

         public AccumulableInfo getAccumulatorUpdates(int index) {
            return this.accumulatorUpdatesBuilder_ == null ? (AccumulableInfo)this.accumulatorUpdates_.get(index) : (AccumulableInfo)this.accumulatorUpdatesBuilder_.getMessage(index);
         }

         public Builder setAccumulatorUpdates(int index, AccumulableInfo value) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.set(index, value);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setAccumulatorUpdates(int index, AccumulableInfo.Builder builderForValue) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAccumulatorUpdates(AccumulableInfo value) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(value);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addAccumulatorUpdates(int index, AccumulableInfo value) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(index, value);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addAccumulatorUpdates(AccumulableInfo.Builder builderForValue) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addAccumulatorUpdates(int index, AccumulableInfo.Builder builderForValue) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllAccumulatorUpdates(Iterable values) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.accumulatorUpdates_);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearAccumulatorUpdates() {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.accumulatorUpdates_ = Collections.emptyList();
               this.bitField0_ &= -4097;
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.clear();
            }

            return this;
         }

         public Builder removeAccumulatorUpdates(int index) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.remove(index);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.remove(index);
            }

            return this;
         }

         public AccumulableInfo.Builder getAccumulatorUpdatesBuilder(int index) {
            return (AccumulableInfo.Builder)this.getAccumulatorUpdatesFieldBuilder().getBuilder(index);
         }

         public AccumulableInfoOrBuilder getAccumulatorUpdatesOrBuilder(int index) {
            return this.accumulatorUpdatesBuilder_ == null ? (AccumulableInfoOrBuilder)this.accumulatorUpdates_.get(index) : (AccumulableInfoOrBuilder)this.accumulatorUpdatesBuilder_.getMessageOrBuilder(index);
         }

         public List getAccumulatorUpdatesOrBuilderList() {
            return this.accumulatorUpdatesBuilder_ != null ? this.accumulatorUpdatesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.accumulatorUpdates_);
         }

         public AccumulableInfo.Builder addAccumulatorUpdatesBuilder() {
            return (AccumulableInfo.Builder)this.getAccumulatorUpdatesFieldBuilder().addBuilder(StoreTypes.AccumulableInfo.getDefaultInstance());
         }

         public AccumulableInfo.Builder addAccumulatorUpdatesBuilder(int index) {
            return (AccumulableInfo.Builder)this.getAccumulatorUpdatesFieldBuilder().addBuilder(index, StoreTypes.AccumulableInfo.getDefaultInstance());
         }

         public List getAccumulatorUpdatesBuilderList() {
            return this.getAccumulatorUpdatesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getAccumulatorUpdatesFieldBuilder() {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.accumulatorUpdatesBuilder_ = new RepeatedFieldBuilder(this.accumulatorUpdates_, (this.bitField0_ & 4096) != 0, this.getParentForChildren(), this.isClean());
               this.accumulatorUpdates_ = null;
            }

            return this.accumulatorUpdatesBuilder_;
         }

         public boolean hasErrorMessage() {
            return (this.bitField0_ & 8192) != 0;
         }

         public String getErrorMessage() {
            Object ref = this.errorMessage_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.errorMessage_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getErrorMessageBytes() {
            Object ref = this.errorMessage_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.errorMessage_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setErrorMessage(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.errorMessage_ = value;
               this.bitField0_ |= 8192;
               this.onChanged();
               return this;
            }
         }

         public Builder clearErrorMessage() {
            this.errorMessage_ = StoreTypes.TaskDataWrapper.getDefaultInstance().getErrorMessage();
            this.bitField0_ &= -8193;
            this.onChanged();
            return this;
         }

         public Builder setErrorMessageBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.TaskDataWrapper.checkByteStringIsUtf8(value);
               this.errorMessage_ = value;
               this.bitField0_ |= 8192;
               this.onChanged();
               return this;
            }
         }

         public boolean getHasMetrics() {
            return this.hasMetrics_;
         }

         public Builder setHasMetrics(boolean value) {
            this.hasMetrics_ = value;
            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder clearHasMetrics() {
            this.bitField0_ &= -16385;
            this.hasMetrics_ = false;
            this.onChanged();
            return this;
         }

         public long getExecutorDeserializeTime() {
            return this.executorDeserializeTime_;
         }

         public Builder setExecutorDeserializeTime(long value) {
            this.executorDeserializeTime_ = value;
            this.bitField0_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorDeserializeTime() {
            this.bitField0_ &= -32769;
            this.executorDeserializeTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getExecutorDeserializeCpuTime() {
            return this.executorDeserializeCpuTime_;
         }

         public Builder setExecutorDeserializeCpuTime(long value) {
            this.executorDeserializeCpuTime_ = value;
            this.bitField0_ |= 65536;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorDeserializeCpuTime() {
            this.bitField0_ &= -65537;
            this.executorDeserializeCpuTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getExecutorRunTime() {
            return this.executorRunTime_;
         }

         public Builder setExecutorRunTime(long value) {
            this.executorRunTime_ = value;
            this.bitField0_ |= 131072;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorRunTime() {
            this.bitField0_ &= -131073;
            this.executorRunTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getExecutorCpuTime() {
            return this.executorCpuTime_;
         }

         public Builder setExecutorCpuTime(long value) {
            this.executorCpuTime_ = value;
            this.bitField0_ |= 262144;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorCpuTime() {
            this.bitField0_ &= -262145;
            this.executorCpuTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getResultSize() {
            return this.resultSize_;
         }

         public Builder setResultSize(long value) {
            this.resultSize_ = value;
            this.bitField0_ |= 524288;
            this.onChanged();
            return this;
         }

         public Builder clearResultSize() {
            this.bitField0_ &= -524289;
            this.resultSize_ = 0L;
            this.onChanged();
            return this;
         }

         public long getJvmGcTime() {
            return this.jvmGcTime_;
         }

         public Builder setJvmGcTime(long value) {
            this.jvmGcTime_ = value;
            this.bitField0_ |= 1048576;
            this.onChanged();
            return this;
         }

         public Builder clearJvmGcTime() {
            this.bitField0_ &= -1048577;
            this.jvmGcTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getResultSerializationTime() {
            return this.resultSerializationTime_;
         }

         public Builder setResultSerializationTime(long value) {
            this.resultSerializationTime_ = value;
            this.bitField0_ |= 2097152;
            this.onChanged();
            return this;
         }

         public Builder clearResultSerializationTime() {
            this.bitField0_ &= -2097153;
            this.resultSerializationTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getMemoryBytesSpilled() {
            return this.memoryBytesSpilled_;
         }

         public Builder setMemoryBytesSpilled(long value) {
            this.memoryBytesSpilled_ = value;
            this.bitField0_ |= 4194304;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryBytesSpilled() {
            this.bitField0_ &= -4194305;
            this.memoryBytesSpilled_ = 0L;
            this.onChanged();
            return this;
         }

         public long getDiskBytesSpilled() {
            return this.diskBytesSpilled_;
         }

         public Builder setDiskBytesSpilled(long value) {
            this.diskBytesSpilled_ = value;
            this.bitField0_ |= 8388608;
            this.onChanged();
            return this;
         }

         public Builder clearDiskBytesSpilled() {
            this.bitField0_ &= -8388609;
            this.diskBytesSpilled_ = 0L;
            this.onChanged();
            return this;
         }

         public long getPeakExecutionMemory() {
            return this.peakExecutionMemory_;
         }

         public Builder setPeakExecutionMemory(long value) {
            this.peakExecutionMemory_ = value;
            this.bitField0_ |= 16777216;
            this.onChanged();
            return this;
         }

         public Builder clearPeakExecutionMemory() {
            this.bitField0_ &= -16777217;
            this.peakExecutionMemory_ = 0L;
            this.onChanged();
            return this;
         }

         public long getInputBytesRead() {
            return this.inputBytesRead_;
         }

         public Builder setInputBytesRead(long value) {
            this.inputBytesRead_ = value;
            this.bitField0_ |= 33554432;
            this.onChanged();
            return this;
         }

         public Builder clearInputBytesRead() {
            this.bitField0_ &= -33554433;
            this.inputBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getInputRecordsRead() {
            return this.inputRecordsRead_;
         }

         public Builder setInputRecordsRead(long value) {
            this.inputRecordsRead_ = value;
            this.bitField0_ |= 67108864;
            this.onChanged();
            return this;
         }

         public Builder clearInputRecordsRead() {
            this.bitField0_ &= -67108865;
            this.inputRecordsRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getOutputBytesWritten() {
            return this.outputBytesWritten_;
         }

         public Builder setOutputBytesWritten(long value) {
            this.outputBytesWritten_ = value;
            this.bitField0_ |= 134217728;
            this.onChanged();
            return this;
         }

         public Builder clearOutputBytesWritten() {
            this.bitField0_ &= -134217729;
            this.outputBytesWritten_ = 0L;
            this.onChanged();
            return this;
         }

         public long getOutputRecordsWritten() {
            return this.outputRecordsWritten_;
         }

         public Builder setOutputRecordsWritten(long value) {
            this.outputRecordsWritten_ = value;
            this.bitField0_ |= 268435456;
            this.onChanged();
            return this;
         }

         public Builder clearOutputRecordsWritten() {
            this.bitField0_ &= -268435457;
            this.outputRecordsWritten_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleRemoteBlocksFetched() {
            return this.shuffleRemoteBlocksFetched_;
         }

         public Builder setShuffleRemoteBlocksFetched(long value) {
            this.shuffleRemoteBlocksFetched_ = value;
            this.bitField0_ |= 536870912;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteBlocksFetched() {
            this.bitField0_ &= -536870913;
            this.shuffleRemoteBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleLocalBlocksFetched() {
            return this.shuffleLocalBlocksFetched_;
         }

         public Builder setShuffleLocalBlocksFetched(long value) {
            this.shuffleLocalBlocksFetched_ = value;
            this.bitField0_ |= 1073741824;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleLocalBlocksFetched() {
            this.bitField0_ &= -1073741825;
            this.shuffleLocalBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleFetchWaitTime() {
            return this.shuffleFetchWaitTime_;
         }

         public Builder setShuffleFetchWaitTime(long value) {
            this.shuffleFetchWaitTime_ = value;
            this.bitField0_ |= Integer.MIN_VALUE;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleFetchWaitTime() {
            this.bitField0_ &= Integer.MAX_VALUE;
            this.shuffleFetchWaitTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleRemoteBytesRead() {
            return this.shuffleRemoteBytesRead_;
         }

         public Builder setShuffleRemoteBytesRead(long value) {
            this.shuffleRemoteBytesRead_ = value;
            this.bitField1_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteBytesRead() {
            this.bitField1_ &= -2;
            this.shuffleRemoteBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleRemoteBytesReadToDisk() {
            return this.shuffleRemoteBytesReadToDisk_;
         }

         public Builder setShuffleRemoteBytesReadToDisk(long value) {
            this.shuffleRemoteBytesReadToDisk_ = value;
            this.bitField1_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteBytesReadToDisk() {
            this.bitField1_ &= -3;
            this.shuffleRemoteBytesReadToDisk_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleLocalBytesRead() {
            return this.shuffleLocalBytesRead_;
         }

         public Builder setShuffleLocalBytesRead(long value) {
            this.shuffleLocalBytesRead_ = value;
            this.bitField1_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleLocalBytesRead() {
            this.bitField1_ &= -5;
            this.shuffleLocalBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleRecordsRead() {
            return this.shuffleRecordsRead_;
         }

         public Builder setShuffleRecordsRead(long value) {
            this.shuffleRecordsRead_ = value;
            this.bitField1_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRecordsRead() {
            this.bitField1_ &= -9;
            this.shuffleRecordsRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleBytesWritten() {
            return this.shuffleBytesWritten_;
         }

         public Builder setShuffleBytesWritten(long value) {
            this.shuffleBytesWritten_ = value;
            this.bitField1_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleBytesWritten() {
            this.bitField1_ &= -17;
            this.shuffleBytesWritten_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleWriteTime() {
            return this.shuffleWriteTime_;
         }

         public Builder setShuffleWriteTime(long value) {
            this.shuffleWriteTime_ = value;
            this.bitField1_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleWriteTime() {
            this.bitField1_ &= -33;
            this.shuffleWriteTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleRecordsWritten() {
            return this.shuffleRecordsWritten_;
         }

         public Builder setShuffleRecordsWritten(long value) {
            this.shuffleRecordsWritten_ = value;
            this.bitField1_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRecordsWritten() {
            this.bitField1_ &= -65;
            this.shuffleRecordsWritten_ = 0L;
            this.onChanged();
            return this;
         }

         public long getStageId() {
            return this.stageId_;
         }

         public Builder setStageId(long value) {
            this.stageId_ = value;
            this.bitField1_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearStageId() {
            this.bitField1_ &= -129;
            this.stageId_ = 0L;
            this.onChanged();
            return this;
         }

         public int getStageAttemptId() {
            return this.stageAttemptId_;
         }

         public Builder setStageAttemptId(int value) {
            this.stageAttemptId_ = value;
            this.bitField1_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearStageAttemptId() {
            this.bitField1_ &= -257;
            this.stageAttemptId_ = 0;
            this.onChanged();
            return this;
         }

         public long getShuffleCorruptMergedBlockChunks() {
            return this.shuffleCorruptMergedBlockChunks_;
         }

         public Builder setShuffleCorruptMergedBlockChunks(long value) {
            this.shuffleCorruptMergedBlockChunks_ = value;
            this.bitField1_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleCorruptMergedBlockChunks() {
            this.bitField1_ &= -513;
            this.shuffleCorruptMergedBlockChunks_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedFetchFallbackCount() {
            return this.shuffleMergedFetchFallbackCount_;
         }

         public Builder setShuffleMergedFetchFallbackCount(long value) {
            this.shuffleMergedFetchFallbackCount_ = value;
            this.bitField1_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedFetchFallbackCount() {
            this.bitField1_ &= -1025;
            this.shuffleMergedFetchFallbackCount_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedRemoteBlocksFetched() {
            return this.shuffleMergedRemoteBlocksFetched_;
         }

         public Builder setShuffleMergedRemoteBlocksFetched(long value) {
            this.shuffleMergedRemoteBlocksFetched_ = value;
            this.bitField1_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteBlocksFetched() {
            this.bitField1_ &= -2049;
            this.shuffleMergedRemoteBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedLocalBlocksFetched() {
            return this.shuffleMergedLocalBlocksFetched_;
         }

         public Builder setShuffleMergedLocalBlocksFetched(long value) {
            this.shuffleMergedLocalBlocksFetched_ = value;
            this.bitField1_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedLocalBlocksFetched() {
            this.bitField1_ &= -4097;
            this.shuffleMergedLocalBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedRemoteChunksFetched() {
            return this.shuffleMergedRemoteChunksFetched_;
         }

         public Builder setShuffleMergedRemoteChunksFetched(long value) {
            this.shuffleMergedRemoteChunksFetched_ = value;
            this.bitField1_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteChunksFetched() {
            this.bitField1_ &= -8193;
            this.shuffleMergedRemoteChunksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedLocalChunksFetched() {
            return this.shuffleMergedLocalChunksFetched_;
         }

         public Builder setShuffleMergedLocalChunksFetched(long value) {
            this.shuffleMergedLocalChunksFetched_ = value;
            this.bitField1_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedLocalChunksFetched() {
            this.bitField1_ &= -16385;
            this.shuffleMergedLocalChunksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedRemoteBytesRead() {
            return this.shuffleMergedRemoteBytesRead_;
         }

         public Builder setShuffleMergedRemoteBytesRead(long value) {
            this.shuffleMergedRemoteBytesRead_ = value;
            this.bitField1_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteBytesRead() {
            this.bitField1_ &= -32769;
            this.shuffleMergedRemoteBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedLocalBytesRead() {
            return this.shuffleMergedLocalBytesRead_;
         }

         public Builder setShuffleMergedLocalBytesRead(long value) {
            this.shuffleMergedLocalBytesRead_ = value;
            this.bitField1_ |= 65536;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedLocalBytesRead() {
            this.bitField1_ &= -65537;
            this.shuffleMergedLocalBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleRemoteReqsDuration() {
            return this.shuffleRemoteReqsDuration_;
         }

         public Builder setShuffleRemoteReqsDuration(long value) {
            this.shuffleRemoteReqsDuration_ = value;
            this.bitField1_ |= 131072;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteReqsDuration() {
            this.bitField1_ &= -131073;
            this.shuffleRemoteReqsDuration_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedRemoteReqDuration() {
            return this.shuffleMergedRemoteReqDuration_;
         }

         public Builder setShuffleMergedRemoteReqDuration(long value) {
            this.shuffleMergedRemoteReqDuration_ = value;
            this.bitField1_ |= 262144;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteReqDuration() {
            this.bitField1_ &= -262145;
            this.shuffleMergedRemoteReqDuration_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class ExecutorMetrics extends GeneratedMessage implements ExecutorMetricsOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int METRICS_FIELD_NUMBER = 1;
      private MapField metrics_;
      private byte memoizedIsInitialized = -1;
      private static final ExecutorMetrics DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ExecutorMetrics(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ExecutorMetrics() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 1 -> {
               return this.internalGetMetrics();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorMetrics.class, Builder.class);
      }

      private MapField internalGetMetrics() {
         return this.metrics_ == null ? MapField.emptyMapField(StoreTypes.ExecutorMetrics.MetricsDefaultEntryHolder.defaultEntry) : this.metrics_;
      }

      public int getMetricsCount() {
         return this.internalGetMetrics().getMap().size();
      }

      public boolean containsMetrics(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetMetrics().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getMetrics() {
         return this.getMetricsMap();
      }

      public Map getMetricsMap() {
         return this.internalGetMetrics().getMap();
      }

      public long getMetricsOrDefault(String key, long defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Long> map = this.internalGetMetrics().getMap();
            return map.containsKey(key) ? (Long)map.get(key) : defaultValue;
         }
      }

      public long getMetricsOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Long> map = this.internalGetMetrics().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (Long)map.get(key);
            }
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         GeneratedMessage.serializeStringMapTo(output, this.internalGetMetrics(), StoreTypes.ExecutorMetrics.MetricsDefaultEntryHolder.defaultEntry, 1);
         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;

            for(Map.Entry entry : this.internalGetMetrics().getMap().entrySet()) {
               MapEntry<String, Long> metrics__ = StoreTypes.ExecutorMetrics.MetricsDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((Long)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(1, metrics__);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ExecutorMetrics)) {
            return super.equals(obj);
         } else {
            ExecutorMetrics other = (ExecutorMetrics)obj;
            if (!this.internalGetMetrics().equals(other.internalGetMetrics())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (!this.internalGetMetrics().getMap().isEmpty()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.internalGetMetrics().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ExecutorMetrics parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ExecutorMetrics)PARSER.parseFrom(data);
      }

      public static ExecutorMetrics parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorMetrics parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ExecutorMetrics)PARSER.parseFrom(data);
      }

      public static ExecutorMetrics parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorMetrics parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ExecutorMetrics)PARSER.parseFrom(data);
      }

      public static ExecutorMetrics parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorMetrics parseFrom(InputStream input) throws IOException {
         return (ExecutorMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorMetrics parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorMetrics parseDelimitedFrom(InputStream input) throws IOException {
         return (ExecutorMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ExecutorMetrics parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorMetrics parseFrom(CodedInputStream input) throws IOException {
         return (ExecutorMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorMetrics parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ExecutorMetrics prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ExecutorMetrics getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ExecutorMetrics getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ExecutorMetrics.class.getName());
         DEFAULT_INSTANCE = new ExecutorMetrics();
         PARSER = new AbstractParser() {
            public ExecutorMetrics parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ExecutorMetrics.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      private static final class MetricsDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_MetricsEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);
         }
      }

      public static final class Builder extends GeneratedMessage.Builder implements ExecutorMetricsOrBuilder {
         private int bitField0_;
         private MapField metrics_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 1 -> {
                  return this.internalGetMetrics();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 1 -> {
                  return this.internalGetMutableMetrics();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorMetrics.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.internalGetMutableMetrics().clear();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorMetrics_descriptor;
         }

         public ExecutorMetrics getDefaultInstanceForType() {
            return StoreTypes.ExecutorMetrics.getDefaultInstance();
         }

         public ExecutorMetrics build() {
            ExecutorMetrics result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ExecutorMetrics buildPartial() {
            ExecutorMetrics result = new ExecutorMetrics(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ExecutorMetrics result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.metrics_ = this.internalGetMetrics();
               result.metrics_.makeImmutable();
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ExecutorMetrics) {
               return this.mergeFrom((ExecutorMetrics)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ExecutorMetrics other) {
            if (other == StoreTypes.ExecutorMetrics.getDefaultInstance()) {
               return this;
            } else {
               this.internalGetMutableMetrics().mergeFrom(other.internalGetMetrics());
               this.bitField0_ |= 1;
               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           MapEntry<String, Long> metrics__ = (MapEntry)input.readMessage(StoreTypes.ExecutorMetrics.MetricsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableMetrics().getMutableMap().put((String)metrics__.getKey(), (Long)metrics__.getValue());
                           this.bitField0_ |= 1;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         private MapField internalGetMetrics() {
            return this.metrics_ == null ? MapField.emptyMapField(StoreTypes.ExecutorMetrics.MetricsDefaultEntryHolder.defaultEntry) : this.metrics_;
         }

         private MapField internalGetMutableMetrics() {
            if (this.metrics_ == null) {
               this.metrics_ = MapField.newMapField(StoreTypes.ExecutorMetrics.MetricsDefaultEntryHolder.defaultEntry);
            }

            if (!this.metrics_.isMutable()) {
               this.metrics_ = this.metrics_.copy();
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this.metrics_;
         }

         public int getMetricsCount() {
            return this.internalGetMetrics().getMap().size();
         }

         public boolean containsMetrics(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetMetrics().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMetrics() {
            return this.getMetricsMap();
         }

         public Map getMetricsMap() {
            return this.internalGetMetrics().getMap();
         }

         public long getMetricsOrDefault(String key, long defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Long> map = this.internalGetMetrics().getMap();
               return map.containsKey(key) ? (Long)map.get(key) : defaultValue;
            }
         }

         public long getMetricsOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Long> map = this.internalGetMetrics().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (Long)map.get(key);
               }
            }
         }

         public Builder clearMetrics() {
            this.bitField0_ &= -2;
            this.internalGetMutableMetrics().getMutableMap().clear();
            return this;
         }

         public Builder removeMetrics(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableMetrics().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableMetrics() {
            this.bitField0_ |= 1;
            return this.internalGetMutableMetrics().getMutableMap();
         }

         public Builder putMetrics(String key, long value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableMetrics().getMutableMap().put(key, value);
               this.bitField0_ |= 1;
               return this;
            }
         }

         public Builder putAllMetrics(Map values) {
            this.internalGetMutableMetrics().getMutableMap().putAll(values);
            this.bitField0_ |= 1;
            return this;
         }
      }
   }

   public static final class ExecutorStageSummary extends GeneratedMessage implements ExecutorStageSummaryOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int TASK_TIME_FIELD_NUMBER = 1;
      private long taskTime_ = 0L;
      public static final int FAILED_TASKS_FIELD_NUMBER = 2;
      private int failedTasks_ = 0;
      public static final int SUCCEEDED_TASKS_FIELD_NUMBER = 3;
      private int succeededTasks_ = 0;
      public static final int KILLED_TASKS_FIELD_NUMBER = 4;
      private int killedTasks_ = 0;
      public static final int INPUT_BYTES_FIELD_NUMBER = 5;
      private long inputBytes_ = 0L;
      public static final int INPUT_RECORDS_FIELD_NUMBER = 6;
      private long inputRecords_ = 0L;
      public static final int OUTPUT_BYTES_FIELD_NUMBER = 7;
      private long outputBytes_ = 0L;
      public static final int OUTPUT_RECORDS_FIELD_NUMBER = 8;
      private long outputRecords_ = 0L;
      public static final int SHUFFLE_READ_FIELD_NUMBER = 9;
      private long shuffleRead_ = 0L;
      public static final int SHUFFLE_READ_RECORDS_FIELD_NUMBER = 10;
      private long shuffleReadRecords_ = 0L;
      public static final int SHUFFLE_WRITE_FIELD_NUMBER = 11;
      private long shuffleWrite_ = 0L;
      public static final int SHUFFLE_WRITE_RECORDS_FIELD_NUMBER = 12;
      private long shuffleWriteRecords_ = 0L;
      public static final int MEMORY_BYTES_SPILLED_FIELD_NUMBER = 13;
      private long memoryBytesSpilled_ = 0L;
      public static final int DISK_BYTES_SPILLED_FIELD_NUMBER = 14;
      private long diskBytesSpilled_ = 0L;
      public static final int IS_BLACKLISTED_FOR_STAGE_FIELD_NUMBER = 15;
      private boolean isBlacklistedForStage_ = false;
      public static final int PEAK_MEMORY_METRICS_FIELD_NUMBER = 16;
      private ExecutorMetrics peakMemoryMetrics_;
      public static final int IS_EXCLUDED_FOR_STAGE_FIELD_NUMBER = 17;
      private boolean isExcludedForStage_ = false;
      private byte memoizedIsInitialized = -1;
      private static final ExecutorStageSummary DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ExecutorStageSummary(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ExecutorStageSummary() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorStageSummary_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorStageSummary_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorStageSummary.class, Builder.class);
      }

      public long getTaskTime() {
         return this.taskTime_;
      }

      public int getFailedTasks() {
         return this.failedTasks_;
      }

      public int getSucceededTasks() {
         return this.succeededTasks_;
      }

      public int getKilledTasks() {
         return this.killedTasks_;
      }

      public long getInputBytes() {
         return this.inputBytes_;
      }

      public long getInputRecords() {
         return this.inputRecords_;
      }

      public long getOutputBytes() {
         return this.outputBytes_;
      }

      public long getOutputRecords() {
         return this.outputRecords_;
      }

      public long getShuffleRead() {
         return this.shuffleRead_;
      }

      public long getShuffleReadRecords() {
         return this.shuffleReadRecords_;
      }

      public long getShuffleWrite() {
         return this.shuffleWrite_;
      }

      public long getShuffleWriteRecords() {
         return this.shuffleWriteRecords_;
      }

      public long getMemoryBytesSpilled() {
         return this.memoryBytesSpilled_;
      }

      public long getDiskBytesSpilled() {
         return this.diskBytesSpilled_;
      }

      public boolean getIsBlacklistedForStage() {
         return this.isBlacklistedForStage_;
      }

      public boolean hasPeakMemoryMetrics() {
         return (this.bitField0_ & 1) != 0;
      }

      public ExecutorMetrics getPeakMemoryMetrics() {
         return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakMemoryMetrics_;
      }

      public ExecutorMetricsOrBuilder getPeakMemoryMetricsOrBuilder() {
         return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakMemoryMetrics_;
      }

      public boolean getIsExcludedForStage() {
         return this.isExcludedForStage_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.taskTime_ != 0L) {
            output.writeInt64(1, this.taskTime_);
         }

         if (this.failedTasks_ != 0) {
            output.writeInt32(2, this.failedTasks_);
         }

         if (this.succeededTasks_ != 0) {
            output.writeInt32(3, this.succeededTasks_);
         }

         if (this.killedTasks_ != 0) {
            output.writeInt32(4, this.killedTasks_);
         }

         if (this.inputBytes_ != 0L) {
            output.writeInt64(5, this.inputBytes_);
         }

         if (this.inputRecords_ != 0L) {
            output.writeInt64(6, this.inputRecords_);
         }

         if (this.outputBytes_ != 0L) {
            output.writeInt64(7, this.outputBytes_);
         }

         if (this.outputRecords_ != 0L) {
            output.writeInt64(8, this.outputRecords_);
         }

         if (this.shuffleRead_ != 0L) {
            output.writeInt64(9, this.shuffleRead_);
         }

         if (this.shuffleReadRecords_ != 0L) {
            output.writeInt64(10, this.shuffleReadRecords_);
         }

         if (this.shuffleWrite_ != 0L) {
            output.writeInt64(11, this.shuffleWrite_);
         }

         if (this.shuffleWriteRecords_ != 0L) {
            output.writeInt64(12, this.shuffleWriteRecords_);
         }

         if (this.memoryBytesSpilled_ != 0L) {
            output.writeInt64(13, this.memoryBytesSpilled_);
         }

         if (this.diskBytesSpilled_ != 0L) {
            output.writeInt64(14, this.diskBytesSpilled_);
         }

         if (this.isBlacklistedForStage_) {
            output.writeBool(15, this.isBlacklistedForStage_);
         }

         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(16, this.getPeakMemoryMetrics());
         }

         if (this.isExcludedForStage_) {
            output.writeBool(17, this.isExcludedForStage_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.taskTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.taskTime_);
            }

            if (this.failedTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(2, this.failedTasks_);
            }

            if (this.succeededTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(3, this.succeededTasks_);
            }

            if (this.killedTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(4, this.killedTasks_);
            }

            if (this.inputBytes_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.inputBytes_);
            }

            if (this.inputRecords_ != 0L) {
               size += CodedOutputStream.computeInt64Size(6, this.inputRecords_);
            }

            if (this.outputBytes_ != 0L) {
               size += CodedOutputStream.computeInt64Size(7, this.outputBytes_);
            }

            if (this.outputRecords_ != 0L) {
               size += CodedOutputStream.computeInt64Size(8, this.outputRecords_);
            }

            if (this.shuffleRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(9, this.shuffleRead_);
            }

            if (this.shuffleReadRecords_ != 0L) {
               size += CodedOutputStream.computeInt64Size(10, this.shuffleReadRecords_);
            }

            if (this.shuffleWrite_ != 0L) {
               size += CodedOutputStream.computeInt64Size(11, this.shuffleWrite_);
            }

            if (this.shuffleWriteRecords_ != 0L) {
               size += CodedOutputStream.computeInt64Size(12, this.shuffleWriteRecords_);
            }

            if (this.memoryBytesSpilled_ != 0L) {
               size += CodedOutputStream.computeInt64Size(13, this.memoryBytesSpilled_);
            }

            if (this.diskBytesSpilled_ != 0L) {
               size += CodedOutputStream.computeInt64Size(14, this.diskBytesSpilled_);
            }

            if (this.isBlacklistedForStage_) {
               size += CodedOutputStream.computeBoolSize(15, this.isBlacklistedForStage_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(16, this.getPeakMemoryMetrics());
            }

            if (this.isExcludedForStage_) {
               size += CodedOutputStream.computeBoolSize(17, this.isExcludedForStage_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ExecutorStageSummary)) {
            return super.equals(obj);
         } else {
            ExecutorStageSummary other = (ExecutorStageSummary)obj;
            if (this.getTaskTime() != other.getTaskTime()) {
               return false;
            } else if (this.getFailedTasks() != other.getFailedTasks()) {
               return false;
            } else if (this.getSucceededTasks() != other.getSucceededTasks()) {
               return false;
            } else if (this.getKilledTasks() != other.getKilledTasks()) {
               return false;
            } else if (this.getInputBytes() != other.getInputBytes()) {
               return false;
            } else if (this.getInputRecords() != other.getInputRecords()) {
               return false;
            } else if (this.getOutputBytes() != other.getOutputBytes()) {
               return false;
            } else if (this.getOutputRecords() != other.getOutputRecords()) {
               return false;
            } else if (this.getShuffleRead() != other.getShuffleRead()) {
               return false;
            } else if (this.getShuffleReadRecords() != other.getShuffleReadRecords()) {
               return false;
            } else if (this.getShuffleWrite() != other.getShuffleWrite()) {
               return false;
            } else if (this.getShuffleWriteRecords() != other.getShuffleWriteRecords()) {
               return false;
            } else if (this.getMemoryBytesSpilled() != other.getMemoryBytesSpilled()) {
               return false;
            } else if (this.getDiskBytesSpilled() != other.getDiskBytesSpilled()) {
               return false;
            } else if (this.getIsBlacklistedForStage() != other.getIsBlacklistedForStage()) {
               return false;
            } else if (this.hasPeakMemoryMetrics() != other.hasPeakMemoryMetrics()) {
               return false;
            } else if (this.hasPeakMemoryMetrics() && !this.getPeakMemoryMetrics().equals(other.getPeakMemoryMetrics())) {
               return false;
            } else if (this.getIsExcludedForStage() != other.getIsExcludedForStage()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getTaskTime());
            hash = 37 * hash + 2;
            hash = 53 * hash + this.getFailedTasks();
            hash = 37 * hash + 3;
            hash = 53 * hash + this.getSucceededTasks();
            hash = 37 * hash + 4;
            hash = 53 * hash + this.getKilledTasks();
            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getInputBytes());
            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(this.getInputRecords());
            hash = 37 * hash + 7;
            hash = 53 * hash + Internal.hashLong(this.getOutputBytes());
            hash = 37 * hash + 8;
            hash = 53 * hash + Internal.hashLong(this.getOutputRecords());
            hash = 37 * hash + 9;
            hash = 53 * hash + Internal.hashLong(this.getShuffleRead());
            hash = 37 * hash + 10;
            hash = 53 * hash + Internal.hashLong(this.getShuffleReadRecords());
            hash = 37 * hash + 11;
            hash = 53 * hash + Internal.hashLong(this.getShuffleWrite());
            hash = 37 * hash + 12;
            hash = 53 * hash + Internal.hashLong(this.getShuffleWriteRecords());
            hash = 37 * hash + 13;
            hash = 53 * hash + Internal.hashLong(this.getMemoryBytesSpilled());
            hash = 37 * hash + 14;
            hash = 53 * hash + Internal.hashLong(this.getDiskBytesSpilled());
            hash = 37 * hash + 15;
            hash = 53 * hash + Internal.hashBoolean(this.getIsBlacklistedForStage());
            if (this.hasPeakMemoryMetrics()) {
               hash = 37 * hash + 16;
               hash = 53 * hash + this.getPeakMemoryMetrics().hashCode();
            }

            hash = 37 * hash + 17;
            hash = 53 * hash + Internal.hashBoolean(this.getIsExcludedForStage());
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ExecutorStageSummary parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ExecutorStageSummary)PARSER.parseFrom(data);
      }

      public static ExecutorStageSummary parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorStageSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorStageSummary parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ExecutorStageSummary)PARSER.parseFrom(data);
      }

      public static ExecutorStageSummary parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorStageSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorStageSummary parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ExecutorStageSummary)PARSER.parseFrom(data);
      }

      public static ExecutorStageSummary parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorStageSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorStageSummary parseFrom(InputStream input) throws IOException {
         return (ExecutorStageSummary)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorStageSummary parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorStageSummary)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorStageSummary parseDelimitedFrom(InputStream input) throws IOException {
         return (ExecutorStageSummary)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ExecutorStageSummary parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorStageSummary)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorStageSummary parseFrom(CodedInputStream input) throws IOException {
         return (ExecutorStageSummary)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorStageSummary parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorStageSummary)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ExecutorStageSummary prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ExecutorStageSummary getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ExecutorStageSummary getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ExecutorStageSummary.class.getName());
         DEFAULT_INSTANCE = new ExecutorStageSummary();
         PARSER = new AbstractParser() {
            public ExecutorStageSummary parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ExecutorStageSummary.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ExecutorStageSummaryOrBuilder {
         private int bitField0_;
         private long taskTime_;
         private int failedTasks_;
         private int succeededTasks_;
         private int killedTasks_;
         private long inputBytes_;
         private long inputRecords_;
         private long outputBytes_;
         private long outputRecords_;
         private long shuffleRead_;
         private long shuffleReadRecords_;
         private long shuffleWrite_;
         private long shuffleWriteRecords_;
         private long memoryBytesSpilled_;
         private long diskBytesSpilled_;
         private boolean isBlacklistedForStage_;
         private ExecutorMetrics peakMemoryMetrics_;
         private SingleFieldBuilder peakMemoryMetricsBuilder_;
         private boolean isExcludedForStage_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorStageSummary_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorStageSummary_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorStageSummary.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ExecutorStageSummary.alwaysUseFieldBuilders) {
               this.getPeakMemoryMetricsFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.taskTime_ = 0L;
            this.failedTasks_ = 0;
            this.succeededTasks_ = 0;
            this.killedTasks_ = 0;
            this.inputBytes_ = 0L;
            this.inputRecords_ = 0L;
            this.outputBytes_ = 0L;
            this.outputRecords_ = 0L;
            this.shuffleRead_ = 0L;
            this.shuffleReadRecords_ = 0L;
            this.shuffleWrite_ = 0L;
            this.shuffleWriteRecords_ = 0L;
            this.memoryBytesSpilled_ = 0L;
            this.diskBytesSpilled_ = 0L;
            this.isBlacklistedForStage_ = false;
            this.peakMemoryMetrics_ = null;
            if (this.peakMemoryMetricsBuilder_ != null) {
               this.peakMemoryMetricsBuilder_.dispose();
               this.peakMemoryMetricsBuilder_ = null;
            }

            this.isExcludedForStage_ = false;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorStageSummary_descriptor;
         }

         public ExecutorStageSummary getDefaultInstanceForType() {
            return StoreTypes.ExecutorStageSummary.getDefaultInstance();
         }

         public ExecutorStageSummary build() {
            ExecutorStageSummary result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ExecutorStageSummary buildPartial() {
            ExecutorStageSummary result = new ExecutorStageSummary(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ExecutorStageSummary result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.taskTime_ = this.taskTime_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.failedTasks_ = this.failedTasks_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.succeededTasks_ = this.succeededTasks_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.killedTasks_ = this.killedTasks_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.inputBytes_ = this.inputBytes_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.inputRecords_ = this.inputRecords_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.outputBytes_ = this.outputBytes_;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.outputRecords_ = this.outputRecords_;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.shuffleRead_ = this.shuffleRead_;
            }

            if ((from_bitField0_ & 512) != 0) {
               result.shuffleReadRecords_ = this.shuffleReadRecords_;
            }

            if ((from_bitField0_ & 1024) != 0) {
               result.shuffleWrite_ = this.shuffleWrite_;
            }

            if ((from_bitField0_ & 2048) != 0) {
               result.shuffleWriteRecords_ = this.shuffleWriteRecords_;
            }

            if ((from_bitField0_ & 4096) != 0) {
               result.memoryBytesSpilled_ = this.memoryBytesSpilled_;
            }

            if ((from_bitField0_ & 8192) != 0) {
               result.diskBytesSpilled_ = this.diskBytesSpilled_;
            }

            if ((from_bitField0_ & 16384) != 0) {
               result.isBlacklistedForStage_ = this.isBlacklistedForStage_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & '耀') != 0) {
               result.peakMemoryMetrics_ = this.peakMemoryMetricsBuilder_ == null ? this.peakMemoryMetrics_ : (ExecutorMetrics)this.peakMemoryMetricsBuilder_.build();
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 65536) != 0) {
               result.isExcludedForStage_ = this.isExcludedForStage_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ExecutorStageSummary) {
               return this.mergeFrom((ExecutorStageSummary)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ExecutorStageSummary other) {
            if (other == StoreTypes.ExecutorStageSummary.getDefaultInstance()) {
               return this;
            } else {
               if (other.getTaskTime() != 0L) {
                  this.setTaskTime(other.getTaskTime());
               }

               if (other.getFailedTasks() != 0) {
                  this.setFailedTasks(other.getFailedTasks());
               }

               if (other.getSucceededTasks() != 0) {
                  this.setSucceededTasks(other.getSucceededTasks());
               }

               if (other.getKilledTasks() != 0) {
                  this.setKilledTasks(other.getKilledTasks());
               }

               if (other.getInputBytes() != 0L) {
                  this.setInputBytes(other.getInputBytes());
               }

               if (other.getInputRecords() != 0L) {
                  this.setInputRecords(other.getInputRecords());
               }

               if (other.getOutputBytes() != 0L) {
                  this.setOutputBytes(other.getOutputBytes());
               }

               if (other.getOutputRecords() != 0L) {
                  this.setOutputRecords(other.getOutputRecords());
               }

               if (other.getShuffleRead() != 0L) {
                  this.setShuffleRead(other.getShuffleRead());
               }

               if (other.getShuffleReadRecords() != 0L) {
                  this.setShuffleReadRecords(other.getShuffleReadRecords());
               }

               if (other.getShuffleWrite() != 0L) {
                  this.setShuffleWrite(other.getShuffleWrite());
               }

               if (other.getShuffleWriteRecords() != 0L) {
                  this.setShuffleWriteRecords(other.getShuffleWriteRecords());
               }

               if (other.getMemoryBytesSpilled() != 0L) {
                  this.setMemoryBytesSpilled(other.getMemoryBytesSpilled());
               }

               if (other.getDiskBytesSpilled() != 0L) {
                  this.setDiskBytesSpilled(other.getDiskBytesSpilled());
               }

               if (other.getIsBlacklistedForStage()) {
                  this.setIsBlacklistedForStage(other.getIsBlacklistedForStage());
               }

               if (other.hasPeakMemoryMetrics()) {
                  this.mergePeakMemoryMetrics(other.getPeakMemoryMetrics());
               }

               if (other.getIsExcludedForStage()) {
                  this.setIsExcludedForStage(other.getIsExcludedForStage());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.taskTime_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.failedTasks_ = input.readInt32();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.succeededTasks_ = input.readInt32();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.killedTasks_ = input.readInt32();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.inputBytes_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.inputRecords_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.outputBytes_ = input.readInt64();
                           this.bitField0_ |= 64;
                           break;
                        case 64:
                           this.outputRecords_ = input.readInt64();
                           this.bitField0_ |= 128;
                           break;
                        case 72:
                           this.shuffleRead_ = input.readInt64();
                           this.bitField0_ |= 256;
                           break;
                        case 80:
                           this.shuffleReadRecords_ = input.readInt64();
                           this.bitField0_ |= 512;
                           break;
                        case 88:
                           this.shuffleWrite_ = input.readInt64();
                           this.bitField0_ |= 1024;
                           break;
                        case 96:
                           this.shuffleWriteRecords_ = input.readInt64();
                           this.bitField0_ |= 2048;
                           break;
                        case 104:
                           this.memoryBytesSpilled_ = input.readInt64();
                           this.bitField0_ |= 4096;
                           break;
                        case 112:
                           this.diskBytesSpilled_ = input.readInt64();
                           this.bitField0_ |= 8192;
                           break;
                        case 120:
                           this.isBlacklistedForStage_ = input.readBool();
                           this.bitField0_ |= 16384;
                           break;
                        case 130:
                           input.readMessage((MessageLite.Builder)this.getPeakMemoryMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 32768;
                           break;
                        case 136:
                           this.isExcludedForStage_ = input.readBool();
                           this.bitField0_ |= 65536;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getTaskTime() {
            return this.taskTime_;
         }

         public Builder setTaskTime(long value) {
            this.taskTime_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearTaskTime() {
            this.bitField0_ &= -2;
            this.taskTime_ = 0L;
            this.onChanged();
            return this;
         }

         public int getFailedTasks() {
            return this.failedTasks_;
         }

         public Builder setFailedTasks(int value) {
            this.failedTasks_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearFailedTasks() {
            this.bitField0_ &= -3;
            this.failedTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getSucceededTasks() {
            return this.succeededTasks_;
         }

         public Builder setSucceededTasks(int value) {
            this.succeededTasks_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearSucceededTasks() {
            this.bitField0_ &= -5;
            this.succeededTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getKilledTasks() {
            return this.killedTasks_;
         }

         public Builder setKilledTasks(int value) {
            this.killedTasks_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearKilledTasks() {
            this.bitField0_ &= -9;
            this.killedTasks_ = 0;
            this.onChanged();
            return this;
         }

         public long getInputBytes() {
            return this.inputBytes_;
         }

         public Builder setInputBytes(long value) {
            this.inputBytes_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearInputBytes() {
            this.bitField0_ &= -17;
            this.inputBytes_ = 0L;
            this.onChanged();
            return this;
         }

         public long getInputRecords() {
            return this.inputRecords_;
         }

         public Builder setInputRecords(long value) {
            this.inputRecords_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearInputRecords() {
            this.bitField0_ &= -33;
            this.inputRecords_ = 0L;
            this.onChanged();
            return this;
         }

         public long getOutputBytes() {
            return this.outputBytes_;
         }

         public Builder setOutputBytes(long value) {
            this.outputBytes_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearOutputBytes() {
            this.bitField0_ &= -65;
            this.outputBytes_ = 0L;
            this.onChanged();
            return this;
         }

         public long getOutputRecords() {
            return this.outputRecords_;
         }

         public Builder setOutputRecords(long value) {
            this.outputRecords_ = value;
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearOutputRecords() {
            this.bitField0_ &= -129;
            this.outputRecords_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleRead() {
            return this.shuffleRead_;
         }

         public Builder setShuffleRead(long value) {
            this.shuffleRead_ = value;
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRead() {
            this.bitField0_ &= -257;
            this.shuffleRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleReadRecords() {
            return this.shuffleReadRecords_;
         }

         public Builder setShuffleReadRecords(long value) {
            this.shuffleReadRecords_ = value;
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleReadRecords() {
            this.bitField0_ &= -513;
            this.shuffleReadRecords_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleWrite() {
            return this.shuffleWrite_;
         }

         public Builder setShuffleWrite(long value) {
            this.shuffleWrite_ = value;
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleWrite() {
            this.bitField0_ &= -1025;
            this.shuffleWrite_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleWriteRecords() {
            return this.shuffleWriteRecords_;
         }

         public Builder setShuffleWriteRecords(long value) {
            this.shuffleWriteRecords_ = value;
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleWriteRecords() {
            this.bitField0_ &= -2049;
            this.shuffleWriteRecords_ = 0L;
            this.onChanged();
            return this;
         }

         public long getMemoryBytesSpilled() {
            return this.memoryBytesSpilled_;
         }

         public Builder setMemoryBytesSpilled(long value) {
            this.memoryBytesSpilled_ = value;
            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryBytesSpilled() {
            this.bitField0_ &= -4097;
            this.memoryBytesSpilled_ = 0L;
            this.onChanged();
            return this;
         }

         public long getDiskBytesSpilled() {
            return this.diskBytesSpilled_;
         }

         public Builder setDiskBytesSpilled(long value) {
            this.diskBytesSpilled_ = value;
            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder clearDiskBytesSpilled() {
            this.bitField0_ &= -8193;
            this.diskBytesSpilled_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean getIsBlacklistedForStage() {
            return this.isBlacklistedForStage_;
         }

         public Builder setIsBlacklistedForStage(boolean value) {
            this.isBlacklistedForStage_ = value;
            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder clearIsBlacklistedForStage() {
            this.bitField0_ &= -16385;
            this.isBlacklistedForStage_ = false;
            this.onChanged();
            return this;
         }

         public boolean hasPeakMemoryMetrics() {
            return (this.bitField0_ & '耀') != 0;
         }

         public ExecutorMetrics getPeakMemoryMetrics() {
            if (this.peakMemoryMetricsBuilder_ == null) {
               return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakMemoryMetrics_;
            } else {
               return (ExecutorMetrics)this.peakMemoryMetricsBuilder_.getMessage();
            }
         }

         public Builder setPeakMemoryMetrics(ExecutorMetrics value) {
            if (this.peakMemoryMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.peakMemoryMetrics_ = value;
            } else {
               this.peakMemoryMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder setPeakMemoryMetrics(ExecutorMetrics.Builder builderForValue) {
            if (this.peakMemoryMetricsBuilder_ == null) {
               this.peakMemoryMetrics_ = builderForValue.build();
            } else {
               this.peakMemoryMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder mergePeakMemoryMetrics(ExecutorMetrics value) {
            if (this.peakMemoryMetricsBuilder_ == null) {
               if ((this.bitField0_ & '耀') != 0 && this.peakMemoryMetrics_ != null && this.peakMemoryMetrics_ != StoreTypes.ExecutorMetrics.getDefaultInstance()) {
                  this.getPeakMemoryMetricsBuilder().mergeFrom(value);
               } else {
                  this.peakMemoryMetrics_ = value;
               }
            } else {
               this.peakMemoryMetricsBuilder_.mergeFrom(value);
            }

            if (this.peakMemoryMetrics_ != null) {
               this.bitField0_ |= 32768;
               this.onChanged();
            }

            return this;
         }

         public Builder clearPeakMemoryMetrics() {
            this.bitField0_ &= -32769;
            this.peakMemoryMetrics_ = null;
            if (this.peakMemoryMetricsBuilder_ != null) {
               this.peakMemoryMetricsBuilder_.dispose();
               this.peakMemoryMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ExecutorMetrics.Builder getPeakMemoryMetricsBuilder() {
            this.bitField0_ |= 32768;
            this.onChanged();
            return (ExecutorMetrics.Builder)this.getPeakMemoryMetricsFieldBuilder().getBuilder();
         }

         public ExecutorMetricsOrBuilder getPeakMemoryMetricsOrBuilder() {
            if (this.peakMemoryMetricsBuilder_ != null) {
               return (ExecutorMetricsOrBuilder)this.peakMemoryMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakMemoryMetrics_;
            }
         }

         private SingleFieldBuilder getPeakMemoryMetricsFieldBuilder() {
            if (this.peakMemoryMetricsBuilder_ == null) {
               this.peakMemoryMetricsBuilder_ = new SingleFieldBuilder(this.getPeakMemoryMetrics(), this.getParentForChildren(), this.isClean());
               this.peakMemoryMetrics_ = null;
            }

            return this.peakMemoryMetricsBuilder_;
         }

         public boolean getIsExcludedForStage() {
            return this.isExcludedForStage_;
         }

         public Builder setIsExcludedForStage(boolean value) {
            this.isExcludedForStage_ = value;
            this.bitField0_ |= 65536;
            this.onChanged();
            return this;
         }

         public Builder clearIsExcludedForStage() {
            this.bitField0_ &= -65537;
            this.isExcludedForStage_ = false;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class ExecutorStageSummaryWrapper extends GeneratedMessage implements ExecutorStageSummaryWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int STAGE_ID_FIELD_NUMBER = 1;
      private long stageId_ = 0L;
      public static final int STAGE_ATTEMPT_ID_FIELD_NUMBER = 2;
      private int stageAttemptId_ = 0;
      public static final int EXECUTOR_ID_FIELD_NUMBER = 3;
      private volatile Object executorId_ = "";
      public static final int INFO_FIELD_NUMBER = 4;
      private ExecutorStageSummary info_;
      private byte memoizedIsInitialized = -1;
      private static final ExecutorStageSummaryWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ExecutorStageSummaryWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ExecutorStageSummaryWrapper() {
         this.executorId_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorStageSummaryWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorStageSummaryWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorStageSummaryWrapper.class, Builder.class);
      }

      public long getStageId() {
         return this.stageId_;
      }

      public int getStageAttemptId() {
         return this.stageAttemptId_;
      }

      public boolean hasExecutorId() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getExecutorId() {
         Object ref = this.executorId_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.executorId_ = s;
            return s;
         }
      }

      public ByteString getExecutorIdBytes() {
         Object ref = this.executorId_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.executorId_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasInfo() {
         return (this.bitField0_ & 2) != 0;
      }

      public ExecutorStageSummary getInfo() {
         return this.info_ == null ? StoreTypes.ExecutorStageSummary.getDefaultInstance() : this.info_;
      }

      public ExecutorStageSummaryOrBuilder getInfoOrBuilder() {
         return this.info_ == null ? StoreTypes.ExecutorStageSummary.getDefaultInstance() : this.info_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.stageId_ != 0L) {
            output.writeInt64(1, this.stageId_);
         }

         if (this.stageAttemptId_ != 0) {
            output.writeInt32(2, this.stageAttemptId_);
         }

         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 3, this.executorId_);
         }

         if ((this.bitField0_ & 2) != 0) {
            output.writeMessage(4, this.getInfo());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.stageId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.stageId_);
            }

            if (this.stageAttemptId_ != 0) {
               size += CodedOutputStream.computeInt32Size(2, this.stageAttemptId_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.executorId_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += CodedOutputStream.computeMessageSize(4, this.getInfo());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ExecutorStageSummaryWrapper)) {
            return super.equals(obj);
         } else {
            ExecutorStageSummaryWrapper other = (ExecutorStageSummaryWrapper)obj;
            if (this.getStageId() != other.getStageId()) {
               return false;
            } else if (this.getStageAttemptId() != other.getStageAttemptId()) {
               return false;
            } else if (this.hasExecutorId() != other.hasExecutorId()) {
               return false;
            } else if (this.hasExecutorId() && !this.getExecutorId().equals(other.getExecutorId())) {
               return false;
            } else if (this.hasInfo() != other.hasInfo()) {
               return false;
            } else if (this.hasInfo() && !this.getInfo().equals(other.getInfo())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getStageId());
            hash = 37 * hash + 2;
            hash = 53 * hash + this.getStageAttemptId();
            if (this.hasExecutorId()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getExecutorId().hashCode();
            }

            if (this.hasInfo()) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getInfo().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ExecutorStageSummaryWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ExecutorStageSummaryWrapper)PARSER.parseFrom(data);
      }

      public static ExecutorStageSummaryWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorStageSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorStageSummaryWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ExecutorStageSummaryWrapper)PARSER.parseFrom(data);
      }

      public static ExecutorStageSummaryWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorStageSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorStageSummaryWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ExecutorStageSummaryWrapper)PARSER.parseFrom(data);
      }

      public static ExecutorStageSummaryWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorStageSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorStageSummaryWrapper parseFrom(InputStream input) throws IOException {
         return (ExecutorStageSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorStageSummaryWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorStageSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorStageSummaryWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (ExecutorStageSummaryWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ExecutorStageSummaryWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorStageSummaryWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorStageSummaryWrapper parseFrom(CodedInputStream input) throws IOException {
         return (ExecutorStageSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorStageSummaryWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorStageSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ExecutorStageSummaryWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ExecutorStageSummaryWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ExecutorStageSummaryWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ExecutorStageSummaryWrapper.class.getName());
         DEFAULT_INSTANCE = new ExecutorStageSummaryWrapper();
         PARSER = new AbstractParser() {
            public ExecutorStageSummaryWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ExecutorStageSummaryWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ExecutorStageSummaryWrapperOrBuilder {
         private int bitField0_;
         private long stageId_;
         private int stageAttemptId_;
         private Object executorId_ = "";
         private ExecutorStageSummary info_;
         private SingleFieldBuilder infoBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorStageSummaryWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorStageSummaryWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorStageSummaryWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ExecutorStageSummaryWrapper.alwaysUseFieldBuilders) {
               this.getInfoFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.stageId_ = 0L;
            this.stageAttemptId_ = 0;
            this.executorId_ = "";
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorStageSummaryWrapper_descriptor;
         }

         public ExecutorStageSummaryWrapper getDefaultInstanceForType() {
            return StoreTypes.ExecutorStageSummaryWrapper.getDefaultInstance();
         }

         public ExecutorStageSummaryWrapper build() {
            ExecutorStageSummaryWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ExecutorStageSummaryWrapper buildPartial() {
            ExecutorStageSummaryWrapper result = new ExecutorStageSummaryWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ExecutorStageSummaryWrapper result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.stageId_ = this.stageId_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.stageAttemptId_ = this.stageAttemptId_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 4) != 0) {
               result.executorId_ = this.executorId_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.info_ = this.infoBuilder_ == null ? this.info_ : (ExecutorStageSummary)this.infoBuilder_.build();
               to_bitField0_ |= 2;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ExecutorStageSummaryWrapper) {
               return this.mergeFrom((ExecutorStageSummaryWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ExecutorStageSummaryWrapper other) {
            if (other == StoreTypes.ExecutorStageSummaryWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.getStageId() != 0L) {
                  this.setStageId(other.getStageId());
               }

               if (other.getStageAttemptId() != 0) {
                  this.setStageAttemptId(other.getStageAttemptId());
               }

               if (other.hasExecutorId()) {
                  this.executorId_ = other.executorId_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (other.hasInfo()) {
                  this.mergeInfo(other.getInfo());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.stageId_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.stageAttemptId_ = input.readInt32();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.executorId_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 34:
                           input.readMessage((MessageLite.Builder)this.getInfoFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 8;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getStageId() {
            return this.stageId_;
         }

         public Builder setStageId(long value) {
            this.stageId_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearStageId() {
            this.bitField0_ &= -2;
            this.stageId_ = 0L;
            this.onChanged();
            return this;
         }

         public int getStageAttemptId() {
            return this.stageAttemptId_;
         }

         public Builder setStageAttemptId(int value) {
            this.stageAttemptId_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearStageAttemptId() {
            this.bitField0_ &= -3;
            this.stageAttemptId_ = 0;
            this.onChanged();
            return this;
         }

         public boolean hasExecutorId() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getExecutorId() {
            Object ref = this.executorId_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.executorId_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getExecutorIdBytes() {
            Object ref = this.executorId_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.executorId_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setExecutorId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.executorId_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearExecutorId() {
            this.executorId_ = StoreTypes.ExecutorStageSummaryWrapper.getDefaultInstance().getExecutorId();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setExecutorIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ExecutorStageSummaryWrapper.checkByteStringIsUtf8(value);
               this.executorId_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public boolean hasInfo() {
            return (this.bitField0_ & 8) != 0;
         }

         public ExecutorStageSummary getInfo() {
            if (this.infoBuilder_ == null) {
               return this.info_ == null ? StoreTypes.ExecutorStageSummary.getDefaultInstance() : this.info_;
            } else {
               return (ExecutorStageSummary)this.infoBuilder_.getMessage();
            }
         }

         public Builder setInfo(ExecutorStageSummary value) {
            if (this.infoBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.info_ = value;
            } else {
               this.infoBuilder_.setMessage(value);
            }

            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder setInfo(ExecutorStageSummary.Builder builderForValue) {
            if (this.infoBuilder_ == null) {
               this.info_ = builderForValue.build();
            } else {
               this.infoBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder mergeInfo(ExecutorStageSummary value) {
            if (this.infoBuilder_ == null) {
               if ((this.bitField0_ & 8) != 0 && this.info_ != null && this.info_ != StoreTypes.ExecutorStageSummary.getDefaultInstance()) {
                  this.getInfoBuilder().mergeFrom(value);
               } else {
                  this.info_ = value;
               }
            } else {
               this.infoBuilder_.mergeFrom(value);
            }

            if (this.info_ != null) {
               this.bitField0_ |= 8;
               this.onChanged();
            }

            return this;
         }

         public Builder clearInfo() {
            this.bitField0_ &= -9;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ExecutorStageSummary.Builder getInfoBuilder() {
            this.bitField0_ |= 8;
            this.onChanged();
            return (ExecutorStageSummary.Builder)this.getInfoFieldBuilder().getBuilder();
         }

         public ExecutorStageSummaryOrBuilder getInfoOrBuilder() {
            if (this.infoBuilder_ != null) {
               return (ExecutorStageSummaryOrBuilder)this.infoBuilder_.getMessageOrBuilder();
            } else {
               return this.info_ == null ? StoreTypes.ExecutorStageSummary.getDefaultInstance() : this.info_;
            }
         }

         private SingleFieldBuilder getInfoFieldBuilder() {
            if (this.infoBuilder_ == null) {
               this.infoBuilder_ = new SingleFieldBuilder(this.getInfo(), this.getParentForChildren(), this.isClean());
               this.info_ = null;
            }

            return this.infoBuilder_;
         }
      }
   }

   public static final class ExecutorResourceRequest extends GeneratedMessage implements ExecutorResourceRequestOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int RESOURCE_NAME_FIELD_NUMBER = 1;
      private volatile Object resourceName_ = "";
      public static final int AMOUNT_FIELD_NUMBER = 2;
      private long amount_ = 0L;
      public static final int DISCOVERY_SCRIPT_FIELD_NUMBER = 3;
      private volatile Object discoveryScript_ = "";
      public static final int VENDOR_FIELD_NUMBER = 4;
      private volatile Object vendor_ = "";
      private byte memoizedIsInitialized = -1;
      private static final ExecutorResourceRequest DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ExecutorResourceRequest(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ExecutorResourceRequest() {
         this.resourceName_ = "";
         this.discoveryScript_ = "";
         this.vendor_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorResourceRequest_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorResourceRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorResourceRequest.class, Builder.class);
      }

      public boolean hasResourceName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getResourceName() {
         Object ref = this.resourceName_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.resourceName_ = s;
            return s;
         }
      }

      public ByteString getResourceNameBytes() {
         Object ref = this.resourceName_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.resourceName_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getAmount() {
         return this.amount_;
      }

      public boolean hasDiscoveryScript() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getDiscoveryScript() {
         Object ref = this.discoveryScript_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.discoveryScript_ = s;
            return s;
         }
      }

      public ByteString getDiscoveryScriptBytes() {
         Object ref = this.discoveryScript_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.discoveryScript_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasVendor() {
         return (this.bitField0_ & 4) != 0;
      }

      public String getVendor() {
         Object ref = this.vendor_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.vendor_ = s;
            return s;
         }
      }

      public ByteString getVendorBytes() {
         Object ref = this.vendor_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.vendor_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.resourceName_);
         }

         if (this.amount_ != 0L) {
            output.writeInt64(2, this.amount_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 3, this.discoveryScript_);
         }

         if ((this.bitField0_ & 4) != 0) {
            GeneratedMessage.writeString(output, 4, this.vendor_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.resourceName_);
            }

            if (this.amount_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.amount_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.discoveryScript_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += GeneratedMessage.computeStringSize(4, this.vendor_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ExecutorResourceRequest)) {
            return super.equals(obj);
         } else {
            ExecutorResourceRequest other = (ExecutorResourceRequest)obj;
            if (this.hasResourceName() != other.hasResourceName()) {
               return false;
            } else if (this.hasResourceName() && !this.getResourceName().equals(other.getResourceName())) {
               return false;
            } else if (this.getAmount() != other.getAmount()) {
               return false;
            } else if (this.hasDiscoveryScript() != other.hasDiscoveryScript()) {
               return false;
            } else if (this.hasDiscoveryScript() && !this.getDiscoveryScript().equals(other.getDiscoveryScript())) {
               return false;
            } else if (this.hasVendor() != other.hasVendor()) {
               return false;
            } else if (this.hasVendor() && !this.getVendor().equals(other.getVendor())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasResourceName()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getResourceName().hashCode();
            }

            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getAmount());
            if (this.hasDiscoveryScript()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getDiscoveryScript().hashCode();
            }

            if (this.hasVendor()) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getVendor().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ExecutorResourceRequest parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ExecutorResourceRequest)PARSER.parseFrom(data);
      }

      public static ExecutorResourceRequest parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorResourceRequest)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorResourceRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ExecutorResourceRequest)PARSER.parseFrom(data);
      }

      public static ExecutorResourceRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorResourceRequest)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorResourceRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ExecutorResourceRequest)PARSER.parseFrom(data);
      }

      public static ExecutorResourceRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorResourceRequest)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorResourceRequest parseFrom(InputStream input) throws IOException {
         return (ExecutorResourceRequest)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorResourceRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorResourceRequest)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorResourceRequest parseDelimitedFrom(InputStream input) throws IOException {
         return (ExecutorResourceRequest)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ExecutorResourceRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorResourceRequest)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorResourceRequest parseFrom(CodedInputStream input) throws IOException {
         return (ExecutorResourceRequest)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorResourceRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorResourceRequest)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ExecutorResourceRequest prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ExecutorResourceRequest getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ExecutorResourceRequest getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ExecutorResourceRequest.class.getName());
         DEFAULT_INSTANCE = new ExecutorResourceRequest();
         PARSER = new AbstractParser() {
            public ExecutorResourceRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ExecutorResourceRequest.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ExecutorResourceRequestOrBuilder {
         private int bitField0_;
         private Object resourceName_ = "";
         private long amount_;
         private Object discoveryScript_ = "";
         private Object vendor_ = "";

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorResourceRequest_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorResourceRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorResourceRequest.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.resourceName_ = "";
            this.amount_ = 0L;
            this.discoveryScript_ = "";
            this.vendor_ = "";
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorResourceRequest_descriptor;
         }

         public ExecutorResourceRequest getDefaultInstanceForType() {
            return StoreTypes.ExecutorResourceRequest.getDefaultInstance();
         }

         public ExecutorResourceRequest build() {
            ExecutorResourceRequest result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ExecutorResourceRequest buildPartial() {
            ExecutorResourceRequest result = new ExecutorResourceRequest(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ExecutorResourceRequest result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.resourceName_ = this.resourceName_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.amount_ = this.amount_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.discoveryScript_ = this.discoveryScript_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.vendor_ = this.vendor_;
               to_bitField0_ |= 4;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ExecutorResourceRequest) {
               return this.mergeFrom((ExecutorResourceRequest)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ExecutorResourceRequest other) {
            if (other == StoreTypes.ExecutorResourceRequest.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasResourceName()) {
                  this.resourceName_ = other.resourceName_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.getAmount() != 0L) {
                  this.setAmount(other.getAmount());
               }

               if (other.hasDiscoveryScript()) {
                  this.discoveryScript_ = other.discoveryScript_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (other.hasVendor()) {
                  this.vendor_ = other.vendor_;
                  this.bitField0_ |= 8;
                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.resourceName_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.amount_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.discoveryScript_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 34:
                           this.vendor_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 8;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasResourceName() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getResourceName() {
            Object ref = this.resourceName_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.resourceName_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getResourceNameBytes() {
            Object ref = this.resourceName_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.resourceName_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setResourceName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.resourceName_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearResourceName() {
            this.resourceName_ = StoreTypes.ExecutorResourceRequest.getDefaultInstance().getResourceName();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setResourceNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ExecutorResourceRequest.checkByteStringIsUtf8(value);
               this.resourceName_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public long getAmount() {
            return this.amount_;
         }

         public Builder setAmount(long value) {
            this.amount_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearAmount() {
            this.bitField0_ &= -3;
            this.amount_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasDiscoveryScript() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getDiscoveryScript() {
            Object ref = this.discoveryScript_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.discoveryScript_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getDiscoveryScriptBytes() {
            Object ref = this.discoveryScript_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.discoveryScript_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setDiscoveryScript(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.discoveryScript_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearDiscoveryScript() {
            this.discoveryScript_ = StoreTypes.ExecutorResourceRequest.getDefaultInstance().getDiscoveryScript();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setDiscoveryScriptBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ExecutorResourceRequest.checkByteStringIsUtf8(value);
               this.discoveryScript_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public boolean hasVendor() {
            return (this.bitField0_ & 8) != 0;
         }

         public String getVendor() {
            Object ref = this.vendor_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.vendor_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getVendorBytes() {
            Object ref = this.vendor_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.vendor_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setVendor(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.vendor_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }

         public Builder clearVendor() {
            this.vendor_ = StoreTypes.ExecutorResourceRequest.getDefaultInstance().getVendor();
            this.bitField0_ &= -9;
            this.onChanged();
            return this;
         }

         public Builder setVendorBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ExecutorResourceRequest.checkByteStringIsUtf8(value);
               this.vendor_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }
      }
   }

   public static final class TaskResourceRequest extends GeneratedMessage implements TaskResourceRequestOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int RESOURCE_NAME_FIELD_NUMBER = 1;
      private volatile Object resourceName_ = "";
      public static final int AMOUNT_FIELD_NUMBER = 2;
      private double amount_ = (double)0.0F;
      private byte memoizedIsInitialized = -1;
      private static final TaskResourceRequest DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private TaskResourceRequest(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private TaskResourceRequest() {
         this.resourceName_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskResourceRequest_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskResourceRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TaskResourceRequest.class, Builder.class);
      }

      public boolean hasResourceName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getResourceName() {
         Object ref = this.resourceName_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.resourceName_ = s;
            return s;
         }
      }

      public ByteString getResourceNameBytes() {
         Object ref = this.resourceName_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.resourceName_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public double getAmount() {
         return this.amount_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.resourceName_);
         }

         if (Double.doubleToRawLongBits(this.amount_) != 0L) {
            output.writeDouble(2, this.amount_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.resourceName_);
            }

            if (Double.doubleToRawLongBits(this.amount_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(2, this.amount_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof TaskResourceRequest)) {
            return super.equals(obj);
         } else {
            TaskResourceRequest other = (TaskResourceRequest)obj;
            if (this.hasResourceName() != other.hasResourceName()) {
               return false;
            } else if (this.hasResourceName() && !this.getResourceName().equals(other.getResourceName())) {
               return false;
            } else if (Double.doubleToLongBits(this.getAmount()) != Double.doubleToLongBits(other.getAmount())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasResourceName()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getResourceName().hashCode();
            }

            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getAmount()));
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static TaskResourceRequest parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (TaskResourceRequest)PARSER.parseFrom(data);
      }

      public static TaskResourceRequest parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskResourceRequest)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskResourceRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (TaskResourceRequest)PARSER.parseFrom(data);
      }

      public static TaskResourceRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskResourceRequest)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskResourceRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (TaskResourceRequest)PARSER.parseFrom(data);
      }

      public static TaskResourceRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskResourceRequest)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskResourceRequest parseFrom(InputStream input) throws IOException {
         return (TaskResourceRequest)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static TaskResourceRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskResourceRequest)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static TaskResourceRequest parseDelimitedFrom(InputStream input) throws IOException {
         return (TaskResourceRequest)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static TaskResourceRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskResourceRequest)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static TaskResourceRequest parseFrom(CodedInputStream input) throws IOException {
         return (TaskResourceRequest)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static TaskResourceRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskResourceRequest)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(TaskResourceRequest prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static TaskResourceRequest getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public TaskResourceRequest getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", TaskResourceRequest.class.getName());
         DEFAULT_INSTANCE = new TaskResourceRequest();
         PARSER = new AbstractParser() {
            public TaskResourceRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.TaskResourceRequest.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements TaskResourceRequestOrBuilder {
         private int bitField0_;
         private Object resourceName_ = "";
         private double amount_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskResourceRequest_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskResourceRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(TaskResourceRequest.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.resourceName_ = "";
            this.amount_ = (double)0.0F;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskResourceRequest_descriptor;
         }

         public TaskResourceRequest getDefaultInstanceForType() {
            return StoreTypes.TaskResourceRequest.getDefaultInstance();
         }

         public TaskResourceRequest build() {
            TaskResourceRequest result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public TaskResourceRequest buildPartial() {
            TaskResourceRequest result = new TaskResourceRequest(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(TaskResourceRequest result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.resourceName_ = this.resourceName_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.amount_ = this.amount_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof TaskResourceRequest) {
               return this.mergeFrom((TaskResourceRequest)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(TaskResourceRequest other) {
            if (other == StoreTypes.TaskResourceRequest.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasResourceName()) {
                  this.resourceName_ = other.resourceName_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.getAmount() != (double)0.0F) {
                  this.setAmount(other.getAmount());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.resourceName_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 17:
                           this.amount_ = input.readDouble();
                           this.bitField0_ |= 2;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasResourceName() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getResourceName() {
            Object ref = this.resourceName_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.resourceName_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getResourceNameBytes() {
            Object ref = this.resourceName_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.resourceName_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setResourceName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.resourceName_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearResourceName() {
            this.resourceName_ = StoreTypes.TaskResourceRequest.getDefaultInstance().getResourceName();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setResourceNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.TaskResourceRequest.checkByteStringIsUtf8(value);
               this.resourceName_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public double getAmount() {
            return this.amount_;
         }

         public Builder setAmount(double value) {
            this.amount_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearAmount() {
            this.bitField0_ &= -3;
            this.amount_ = (double)0.0F;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class ResourceProfileInfo extends GeneratedMessage implements ResourceProfileInfoOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_ = 0;
      public static final int EXECUTOR_RESOURCES_FIELD_NUMBER = 2;
      private MapField executorResources_;
      public static final int TASK_RESOURCES_FIELD_NUMBER = 3;
      private MapField taskResources_;
      private byte memoizedIsInitialized = -1;
      private static final ResourceProfileInfo DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ResourceProfileInfo(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ResourceProfileInfo() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 2 -> {
               return this.internalGetExecutorResources();
            }
            case 3 -> {
               return this.internalGetTaskResources();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ResourceProfileInfo.class, Builder.class);
      }

      public int getId() {
         return this.id_;
      }

      private MapField internalGetExecutorResources() {
         return this.executorResources_ == null ? MapField.emptyMapField(StoreTypes.ResourceProfileInfo.ExecutorResourcesDefaultEntryHolder.defaultEntry) : this.executorResources_;
      }

      public int getExecutorResourcesCount() {
         return this.internalGetExecutorResources().getMap().size();
      }

      public boolean containsExecutorResources(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetExecutorResources().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getExecutorResources() {
         return this.getExecutorResourcesMap();
      }

      public Map getExecutorResourcesMap() {
         return this.internalGetExecutorResources().getMap();
      }

      public ExecutorResourceRequest getExecutorResourcesOrDefault(String key, ExecutorResourceRequest defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, ExecutorResourceRequest> map = this.internalGetExecutorResources().getMap();
            return map.containsKey(key) ? (ExecutorResourceRequest)map.get(key) : defaultValue;
         }
      }

      public ExecutorResourceRequest getExecutorResourcesOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, ExecutorResourceRequest> map = this.internalGetExecutorResources().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (ExecutorResourceRequest)map.get(key);
            }
         }
      }

      private MapField internalGetTaskResources() {
         return this.taskResources_ == null ? MapField.emptyMapField(StoreTypes.ResourceProfileInfo.TaskResourcesDefaultEntryHolder.defaultEntry) : this.taskResources_;
      }

      public int getTaskResourcesCount() {
         return this.internalGetTaskResources().getMap().size();
      }

      public boolean containsTaskResources(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetTaskResources().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getTaskResources() {
         return this.getTaskResourcesMap();
      }

      public Map getTaskResourcesMap() {
         return this.internalGetTaskResources().getMap();
      }

      public TaskResourceRequest getTaskResourcesOrDefault(String key, TaskResourceRequest defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, TaskResourceRequest> map = this.internalGetTaskResources().getMap();
            return map.containsKey(key) ? (TaskResourceRequest)map.get(key) : defaultValue;
         }
      }

      public TaskResourceRequest getTaskResourcesOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, TaskResourceRequest> map = this.internalGetTaskResources().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (TaskResourceRequest)map.get(key);
            }
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.id_ != 0) {
            output.writeInt32(1, this.id_);
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetExecutorResources(), StoreTypes.ResourceProfileInfo.ExecutorResourcesDefaultEntryHolder.defaultEntry, 2);
         GeneratedMessage.serializeStringMapTo(output, this.internalGetTaskResources(), StoreTypes.ResourceProfileInfo.TaskResourcesDefaultEntryHolder.defaultEntry, 3);
         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.id_ != 0) {
               size += CodedOutputStream.computeInt32Size(1, this.id_);
            }

            for(Map.Entry entry : this.internalGetExecutorResources().getMap().entrySet()) {
               MapEntry<String, ExecutorResourceRequest> executorResources__ = StoreTypes.ResourceProfileInfo.ExecutorResourcesDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((ExecutorResourceRequest)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(2, executorResources__);
            }

            for(Map.Entry entry : this.internalGetTaskResources().getMap().entrySet()) {
               MapEntry<String, TaskResourceRequest> taskResources__ = StoreTypes.ResourceProfileInfo.TaskResourcesDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((TaskResourceRequest)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(3, taskResources__);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ResourceProfileInfo)) {
            return super.equals(obj);
         } else {
            ResourceProfileInfo other = (ResourceProfileInfo)obj;
            if (this.getId() != other.getId()) {
               return false;
            } else if (!this.internalGetExecutorResources().equals(other.internalGetExecutorResources())) {
               return false;
            } else if (!this.internalGetTaskResources().equals(other.internalGetTaskResources())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + this.getId();
            if (!this.internalGetExecutorResources().getMap().isEmpty()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.internalGetExecutorResources().hashCode();
            }

            if (!this.internalGetTaskResources().getMap().isEmpty()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.internalGetTaskResources().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ResourceProfileInfo parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ResourceProfileInfo)PARSER.parseFrom(data);
      }

      public static ResourceProfileInfo parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ResourceProfileInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ResourceProfileInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ResourceProfileInfo)PARSER.parseFrom(data);
      }

      public static ResourceProfileInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ResourceProfileInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ResourceProfileInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ResourceProfileInfo)PARSER.parseFrom(data);
      }

      public static ResourceProfileInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ResourceProfileInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ResourceProfileInfo parseFrom(InputStream input) throws IOException {
         return (ResourceProfileInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ResourceProfileInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ResourceProfileInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ResourceProfileInfo parseDelimitedFrom(InputStream input) throws IOException {
         return (ResourceProfileInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ResourceProfileInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ResourceProfileInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ResourceProfileInfo parseFrom(CodedInputStream input) throws IOException {
         return (ResourceProfileInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ResourceProfileInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ResourceProfileInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ResourceProfileInfo prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ResourceProfileInfo getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ResourceProfileInfo getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ResourceProfileInfo.class.getName());
         DEFAULT_INSTANCE = new ResourceProfileInfo();
         PARSER = new AbstractParser() {
            public ResourceProfileInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ResourceProfileInfo.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      private static final class ExecutorResourcesDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_ExecutorResourcesEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.MESSAGE, StoreTypes.ExecutorResourceRequest.getDefaultInstance());
         }
      }

      private static final class TaskResourcesDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_TaskResourcesEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.MESSAGE, StoreTypes.TaskResourceRequest.getDefaultInstance());
         }
      }

      public static final class Builder extends GeneratedMessage.Builder implements ResourceProfileInfoOrBuilder {
         private int bitField0_;
         private int id_;
         private static final ExecutorResourcesConverter executorResourcesConverter = new ExecutorResourcesConverter();
         private MapFieldBuilder executorResources_;
         private static final TaskResourcesConverter taskResourcesConverter = new TaskResourcesConverter();
         private MapFieldBuilder taskResources_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 2 -> {
                  return this.internalGetExecutorResources();
               }
               case 3 -> {
                  return this.internalGetTaskResources();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 2 -> {
                  return this.internalGetMutableExecutorResources();
               }
               case 3 -> {
                  return this.internalGetMutableTaskResources();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ResourceProfileInfo.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.id_ = 0;
            this.internalGetMutableExecutorResources().clear();
            this.internalGetMutableTaskResources().clear();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileInfo_descriptor;
         }

         public ResourceProfileInfo getDefaultInstanceForType() {
            return StoreTypes.ResourceProfileInfo.getDefaultInstance();
         }

         public ResourceProfileInfo build() {
            ResourceProfileInfo result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ResourceProfileInfo buildPartial() {
            ResourceProfileInfo result = new ResourceProfileInfo(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ResourceProfileInfo result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.id_ = this.id_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.executorResources_ = this.internalGetExecutorResources().build(StoreTypes.ResourceProfileInfo.ExecutorResourcesDefaultEntryHolder.defaultEntry);
            }

            if ((from_bitField0_ & 4) != 0) {
               result.taskResources_ = this.internalGetTaskResources().build(StoreTypes.ResourceProfileInfo.TaskResourcesDefaultEntryHolder.defaultEntry);
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ResourceProfileInfo) {
               return this.mergeFrom((ResourceProfileInfo)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ResourceProfileInfo other) {
            if (other == StoreTypes.ResourceProfileInfo.getDefaultInstance()) {
               return this;
            } else {
               if (other.getId() != 0) {
                  this.setId(other.getId());
               }

               this.internalGetMutableExecutorResources().mergeFrom(other.internalGetExecutorResources());
               this.bitField0_ |= 2;
               this.internalGetMutableTaskResources().mergeFrom(other.internalGetTaskResources());
               this.bitField0_ |= 4;
               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.id_ = input.readInt32();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           MapEntry<String, ExecutorResourceRequest> executorResources__ = (MapEntry)input.readMessage(StoreTypes.ResourceProfileInfo.ExecutorResourcesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableExecutorResources().ensureBuilderMap().put((String)executorResources__.getKey(), (ExecutorResourceRequestOrBuilder)executorResources__.getValue());
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           MapEntry<String, TaskResourceRequest> taskResources__ = (MapEntry)input.readMessage(StoreTypes.ResourceProfileInfo.TaskResourcesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableTaskResources().ensureBuilderMap().put((String)taskResources__.getKey(), (TaskResourceRequestOrBuilder)taskResources__.getValue());
                           this.bitField0_ |= 4;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public int getId() {
            return this.id_;
         }

         public Builder setId(int value) {
            this.id_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearId() {
            this.bitField0_ &= -2;
            this.id_ = 0;
            this.onChanged();
            return this;
         }

         private MapFieldBuilder internalGetExecutorResources() {
            return this.executorResources_ == null ? new MapFieldBuilder(executorResourcesConverter) : this.executorResources_;
         }

         private MapFieldBuilder internalGetMutableExecutorResources() {
            if (this.executorResources_ == null) {
               this.executorResources_ = new MapFieldBuilder(executorResourcesConverter);
            }

            this.bitField0_ |= 2;
            this.onChanged();
            return this.executorResources_;
         }

         public int getExecutorResourcesCount() {
            return this.internalGetExecutorResources().ensureBuilderMap().size();
         }

         public boolean containsExecutorResources(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetExecutorResources().ensureBuilderMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getExecutorResources() {
            return this.getExecutorResourcesMap();
         }

         public Map getExecutorResourcesMap() {
            return this.internalGetExecutorResources().getImmutableMap();
         }

         public ExecutorResourceRequest getExecutorResourcesOrDefault(String key, ExecutorResourceRequest defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, ExecutorResourceRequestOrBuilder> map = this.internalGetMutableExecutorResources().ensureBuilderMap();
               return map.containsKey(key) ? executorResourcesConverter.build((ExecutorResourceRequestOrBuilder)map.get(key)) : defaultValue;
            }
         }

         public ExecutorResourceRequest getExecutorResourcesOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, ExecutorResourceRequestOrBuilder> map = this.internalGetMutableExecutorResources().ensureBuilderMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return executorResourcesConverter.build((ExecutorResourceRequestOrBuilder)map.get(key));
               }
            }
         }

         public Builder clearExecutorResources() {
            this.bitField0_ &= -3;
            this.internalGetMutableExecutorResources().clear();
            return this;
         }

         public Builder removeExecutorResources(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableExecutorResources().ensureBuilderMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableExecutorResources() {
            this.bitField0_ |= 2;
            return this.internalGetMutableExecutorResources().ensureMessageMap();
         }

         public Builder putExecutorResources(String key, ExecutorResourceRequest value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableExecutorResources().ensureBuilderMap().put(key, value);
               this.bitField0_ |= 2;
               return this;
            }
         }

         public Builder putAllExecutorResources(Map values) {
            for(Map.Entry e : values.entrySet()) {
               if (e.getKey() == null || e.getValue() == null) {
                  throw new NullPointerException();
               }
            }

            this.internalGetMutableExecutorResources().ensureBuilderMap().putAll(values);
            this.bitField0_ |= 2;
            return this;
         }

         public ExecutorResourceRequest.Builder putExecutorResourcesBuilderIfAbsent(String key) {
            Map<String, ExecutorResourceRequestOrBuilder> builderMap = this.internalGetMutableExecutorResources().ensureBuilderMap();
            ExecutorResourceRequestOrBuilder entry = (ExecutorResourceRequestOrBuilder)builderMap.get(key);
            if (entry == null) {
               entry = StoreTypes.ExecutorResourceRequest.newBuilder();
               builderMap.put(key, entry);
            }

            if (entry instanceof ExecutorResourceRequest) {
               entry = ((ExecutorResourceRequest)entry).toBuilder();
               builderMap.put(key, entry);
            }

            return (ExecutorResourceRequest.Builder)entry;
         }

         private MapFieldBuilder internalGetTaskResources() {
            return this.taskResources_ == null ? new MapFieldBuilder(taskResourcesConverter) : this.taskResources_;
         }

         private MapFieldBuilder internalGetMutableTaskResources() {
            if (this.taskResources_ == null) {
               this.taskResources_ = new MapFieldBuilder(taskResourcesConverter);
            }

            this.bitField0_ |= 4;
            this.onChanged();
            return this.taskResources_;
         }

         public int getTaskResourcesCount() {
            return this.internalGetTaskResources().ensureBuilderMap().size();
         }

         public boolean containsTaskResources(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetTaskResources().ensureBuilderMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getTaskResources() {
            return this.getTaskResourcesMap();
         }

         public Map getTaskResourcesMap() {
            return this.internalGetTaskResources().getImmutableMap();
         }

         public TaskResourceRequest getTaskResourcesOrDefault(String key, TaskResourceRequest defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, TaskResourceRequestOrBuilder> map = this.internalGetMutableTaskResources().ensureBuilderMap();
               return map.containsKey(key) ? taskResourcesConverter.build((TaskResourceRequestOrBuilder)map.get(key)) : defaultValue;
            }
         }

         public TaskResourceRequest getTaskResourcesOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, TaskResourceRequestOrBuilder> map = this.internalGetMutableTaskResources().ensureBuilderMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return taskResourcesConverter.build((TaskResourceRequestOrBuilder)map.get(key));
               }
            }
         }

         public Builder clearTaskResources() {
            this.bitField0_ &= -5;
            this.internalGetMutableTaskResources().clear();
            return this;
         }

         public Builder removeTaskResources(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableTaskResources().ensureBuilderMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableTaskResources() {
            this.bitField0_ |= 4;
            return this.internalGetMutableTaskResources().ensureMessageMap();
         }

         public Builder putTaskResources(String key, TaskResourceRequest value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableTaskResources().ensureBuilderMap().put(key, value);
               this.bitField0_ |= 4;
               return this;
            }
         }

         public Builder putAllTaskResources(Map values) {
            for(Map.Entry e : values.entrySet()) {
               if (e.getKey() == null || e.getValue() == null) {
                  throw new NullPointerException();
               }
            }

            this.internalGetMutableTaskResources().ensureBuilderMap().putAll(values);
            this.bitField0_ |= 4;
            return this;
         }

         public TaskResourceRequest.Builder putTaskResourcesBuilderIfAbsent(String key) {
            Map<String, TaskResourceRequestOrBuilder> builderMap = this.internalGetMutableTaskResources().ensureBuilderMap();
            TaskResourceRequestOrBuilder entry = (TaskResourceRequestOrBuilder)builderMap.get(key);
            if (entry == null) {
               entry = StoreTypes.TaskResourceRequest.newBuilder();
               builderMap.put(key, entry);
            }

            if (entry instanceof TaskResourceRequest) {
               entry = ((TaskResourceRequest)entry).toBuilder();
               builderMap.put(key, entry);
            }

            return (TaskResourceRequest.Builder)entry;
         }

         private static final class ExecutorResourcesConverter implements MapFieldBuilder.Converter {
            public ExecutorResourceRequest build(ExecutorResourceRequestOrBuilder val) {
               return val instanceof ExecutorResourceRequest ? (ExecutorResourceRequest)val : ((ExecutorResourceRequest.Builder)val).build();
            }

            public MapEntry defaultEntry() {
               return StoreTypes.ResourceProfileInfo.ExecutorResourcesDefaultEntryHolder.defaultEntry;
            }
         }

         private static final class TaskResourcesConverter implements MapFieldBuilder.Converter {
            public TaskResourceRequest build(TaskResourceRequestOrBuilder val) {
               return val instanceof TaskResourceRequest ? (TaskResourceRequest)val : ((TaskResourceRequest.Builder)val).build();
            }

            public MapEntry defaultEntry() {
               return StoreTypes.ResourceProfileInfo.TaskResourcesDefaultEntryHolder.defaultEntry;
            }
         }
      }
   }

   public static final class RuntimeInfo extends GeneratedMessage implements RuntimeInfoOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int JAVA_VERSION_FIELD_NUMBER = 1;
      private volatile Object javaVersion_ = "";
      public static final int JAVA_HOME_FIELD_NUMBER = 2;
      private volatile Object javaHome_ = "";
      public static final int SCALA_VERSION_FIELD_NUMBER = 3;
      private volatile Object scalaVersion_ = "";
      private byte memoizedIsInitialized = -1;
      private static final RuntimeInfo DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private RuntimeInfo(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private RuntimeInfo() {
         this.javaVersion_ = "";
         this.javaHome_ = "";
         this.scalaVersion_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RuntimeInfo_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RuntimeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RuntimeInfo.class, Builder.class);
      }

      public boolean hasJavaVersion() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getJavaVersion() {
         Object ref = this.javaVersion_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.javaVersion_ = s;
            return s;
         }
      }

      public ByteString getJavaVersionBytes() {
         Object ref = this.javaVersion_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.javaVersion_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasJavaHome() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getJavaHome() {
         Object ref = this.javaHome_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.javaHome_ = s;
            return s;
         }
      }

      public ByteString getJavaHomeBytes() {
         Object ref = this.javaHome_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.javaHome_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasScalaVersion() {
         return (this.bitField0_ & 4) != 0;
      }

      public String getScalaVersion() {
         Object ref = this.scalaVersion_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.scalaVersion_ = s;
            return s;
         }
      }

      public ByteString getScalaVersionBytes() {
         Object ref = this.scalaVersion_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.scalaVersion_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.javaVersion_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 2, this.javaHome_);
         }

         if ((this.bitField0_ & 4) != 0) {
            GeneratedMessage.writeString(output, 3, this.scalaVersion_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.javaVersion_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.javaHome_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.scalaVersion_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof RuntimeInfo)) {
            return super.equals(obj);
         } else {
            RuntimeInfo other = (RuntimeInfo)obj;
            if (this.hasJavaVersion() != other.hasJavaVersion()) {
               return false;
            } else if (this.hasJavaVersion() && !this.getJavaVersion().equals(other.getJavaVersion())) {
               return false;
            } else if (this.hasJavaHome() != other.hasJavaHome()) {
               return false;
            } else if (this.hasJavaHome() && !this.getJavaHome().equals(other.getJavaHome())) {
               return false;
            } else if (this.hasScalaVersion() != other.hasScalaVersion()) {
               return false;
            } else if (this.hasScalaVersion() && !this.getScalaVersion().equals(other.getScalaVersion())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasJavaVersion()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getJavaVersion().hashCode();
            }

            if (this.hasJavaHome()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getJavaHome().hashCode();
            }

            if (this.hasScalaVersion()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getScalaVersion().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static RuntimeInfo parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (RuntimeInfo)PARSER.parseFrom(data);
      }

      public static RuntimeInfo parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RuntimeInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RuntimeInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (RuntimeInfo)PARSER.parseFrom(data);
      }

      public static RuntimeInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RuntimeInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RuntimeInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (RuntimeInfo)PARSER.parseFrom(data);
      }

      public static RuntimeInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RuntimeInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RuntimeInfo parseFrom(InputStream input) throws IOException {
         return (RuntimeInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RuntimeInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RuntimeInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static RuntimeInfo parseDelimitedFrom(InputStream input) throws IOException {
         return (RuntimeInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static RuntimeInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RuntimeInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static RuntimeInfo parseFrom(CodedInputStream input) throws IOException {
         return (RuntimeInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RuntimeInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RuntimeInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(RuntimeInfo prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static RuntimeInfo getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public RuntimeInfo getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", RuntimeInfo.class.getName());
         DEFAULT_INSTANCE = new RuntimeInfo();
         PARSER = new AbstractParser() {
            public RuntimeInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.RuntimeInfo.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements RuntimeInfoOrBuilder {
         private int bitField0_;
         private Object javaVersion_ = "";
         private Object javaHome_ = "";
         private Object scalaVersion_ = "";

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RuntimeInfo_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RuntimeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RuntimeInfo.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.javaVersion_ = "";
            this.javaHome_ = "";
            this.scalaVersion_ = "";
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RuntimeInfo_descriptor;
         }

         public RuntimeInfo getDefaultInstanceForType() {
            return StoreTypes.RuntimeInfo.getDefaultInstance();
         }

         public RuntimeInfo build() {
            RuntimeInfo result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public RuntimeInfo buildPartial() {
            RuntimeInfo result = new RuntimeInfo(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(RuntimeInfo result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.javaVersion_ = this.javaVersion_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.javaHome_ = this.javaHome_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.scalaVersion_ = this.scalaVersion_;
               to_bitField0_ |= 4;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof RuntimeInfo) {
               return this.mergeFrom((RuntimeInfo)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(RuntimeInfo other) {
            if (other == StoreTypes.RuntimeInfo.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasJavaVersion()) {
                  this.javaVersion_ = other.javaVersion_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.hasJavaHome()) {
                  this.javaHome_ = other.javaHome_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.hasScalaVersion()) {
                  this.scalaVersion_ = other.scalaVersion_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.javaVersion_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.javaHome_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.scalaVersion_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasJavaVersion() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getJavaVersion() {
            Object ref = this.javaVersion_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.javaVersion_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getJavaVersionBytes() {
            Object ref = this.javaVersion_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.javaVersion_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setJavaVersion(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.javaVersion_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearJavaVersion() {
            this.javaVersion_ = StoreTypes.RuntimeInfo.getDefaultInstance().getJavaVersion();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setJavaVersionBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RuntimeInfo.checkByteStringIsUtf8(value);
               this.javaVersion_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public boolean hasJavaHome() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getJavaHome() {
            Object ref = this.javaHome_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.javaHome_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getJavaHomeBytes() {
            Object ref = this.javaHome_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.javaHome_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setJavaHome(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.javaHome_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearJavaHome() {
            this.javaHome_ = StoreTypes.RuntimeInfo.getDefaultInstance().getJavaHome();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setJavaHomeBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RuntimeInfo.checkByteStringIsUtf8(value);
               this.javaHome_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean hasScalaVersion() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getScalaVersion() {
            Object ref = this.scalaVersion_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.scalaVersion_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getScalaVersionBytes() {
            Object ref = this.scalaVersion_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.scalaVersion_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setScalaVersion(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.scalaVersion_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearScalaVersion() {
            this.scalaVersion_ = StoreTypes.RuntimeInfo.getDefaultInstance().getScalaVersion();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setScalaVersionBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RuntimeInfo.checkByteStringIsUtf8(value);
               this.scalaVersion_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }
      }
   }

   public static final class PairStrings extends GeneratedMessage implements PairStringsOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int VALUE1_FIELD_NUMBER = 1;
      private volatile Object value1_ = "";
      public static final int VALUE2_FIELD_NUMBER = 2;
      private volatile Object value2_ = "";
      private byte memoizedIsInitialized = -1;
      private static final PairStrings DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private PairStrings(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private PairStrings() {
         this.value1_ = "";
         this.value2_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_PairStrings_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_PairStrings_fieldAccessorTable.ensureFieldAccessorsInitialized(PairStrings.class, Builder.class);
      }

      public boolean hasValue1() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getValue1() {
         Object ref = this.value1_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.value1_ = s;
            return s;
         }
      }

      public ByteString getValue1Bytes() {
         Object ref = this.value1_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.value1_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasValue2() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getValue2() {
         Object ref = this.value2_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.value2_ = s;
            return s;
         }
      }

      public ByteString getValue2Bytes() {
         Object ref = this.value2_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.value2_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.value1_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 2, this.value2_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.value1_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.value2_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof PairStrings)) {
            return super.equals(obj);
         } else {
            PairStrings other = (PairStrings)obj;
            if (this.hasValue1() != other.hasValue1()) {
               return false;
            } else if (this.hasValue1() && !this.getValue1().equals(other.getValue1())) {
               return false;
            } else if (this.hasValue2() != other.hasValue2()) {
               return false;
            } else if (this.hasValue2() && !this.getValue2().equals(other.getValue2())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasValue1()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getValue1().hashCode();
            }

            if (this.hasValue2()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getValue2().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static PairStrings parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (PairStrings)PARSER.parseFrom(data);
      }

      public static PairStrings parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (PairStrings)PARSER.parseFrom(data, extensionRegistry);
      }

      public static PairStrings parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (PairStrings)PARSER.parseFrom(data);
      }

      public static PairStrings parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (PairStrings)PARSER.parseFrom(data, extensionRegistry);
      }

      public static PairStrings parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (PairStrings)PARSER.parseFrom(data);
      }

      public static PairStrings parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (PairStrings)PARSER.parseFrom(data, extensionRegistry);
      }

      public static PairStrings parseFrom(InputStream input) throws IOException {
         return (PairStrings)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static PairStrings parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (PairStrings)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static PairStrings parseDelimitedFrom(InputStream input) throws IOException {
         return (PairStrings)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static PairStrings parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (PairStrings)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static PairStrings parseFrom(CodedInputStream input) throws IOException {
         return (PairStrings)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static PairStrings parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (PairStrings)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(PairStrings prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static PairStrings getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public PairStrings getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", PairStrings.class.getName());
         DEFAULT_INSTANCE = new PairStrings();
         PARSER = new AbstractParser() {
            public PairStrings parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.PairStrings.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements PairStringsOrBuilder {
         private int bitField0_;
         private Object value1_ = "";
         private Object value2_ = "";

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_PairStrings_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_PairStrings_fieldAccessorTable.ensureFieldAccessorsInitialized(PairStrings.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.value1_ = "";
            this.value2_ = "";
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_PairStrings_descriptor;
         }

         public PairStrings getDefaultInstanceForType() {
            return StoreTypes.PairStrings.getDefaultInstance();
         }

         public PairStrings build() {
            PairStrings result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public PairStrings buildPartial() {
            PairStrings result = new PairStrings(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(PairStrings result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.value1_ = this.value1_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.value2_ = this.value2_;
               to_bitField0_ |= 2;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof PairStrings) {
               return this.mergeFrom((PairStrings)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(PairStrings other) {
            if (other == StoreTypes.PairStrings.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasValue1()) {
                  this.value1_ = other.value1_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.hasValue2()) {
                  this.value2_ = other.value2_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.value1_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.value2_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasValue1() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getValue1() {
            Object ref = this.value1_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.value1_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getValue1Bytes() {
            Object ref = this.value1_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.value1_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setValue1(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.value1_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearValue1() {
            this.value1_ = StoreTypes.PairStrings.getDefaultInstance().getValue1();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setValue1Bytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.PairStrings.checkByteStringIsUtf8(value);
               this.value1_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public boolean hasValue2() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getValue2() {
            Object ref = this.value2_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.value2_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getValue2Bytes() {
            Object ref = this.value2_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.value2_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setValue2(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.value2_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearValue2() {
            this.value2_ = StoreTypes.PairStrings.getDefaultInstance().getValue2();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setValue2Bytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.PairStrings.checkByteStringIsUtf8(value);
               this.value2_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }
      }
   }

   public static final class ApplicationEnvironmentInfo extends GeneratedMessage implements ApplicationEnvironmentInfoOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int RUNTIME_FIELD_NUMBER = 1;
      private RuntimeInfo runtime_;
      public static final int SPARK_PROPERTIES_FIELD_NUMBER = 2;
      private List sparkProperties_;
      public static final int HADOOP_PROPERTIES_FIELD_NUMBER = 3;
      private List hadoopProperties_;
      public static final int SYSTEM_PROPERTIES_FIELD_NUMBER = 4;
      private List systemProperties_;
      public static final int METRICS_PROPERTIES_FIELD_NUMBER = 5;
      private List metricsProperties_;
      public static final int CLASSPATH_ENTRIES_FIELD_NUMBER = 6;
      private List classpathEntries_;
      public static final int RESOURCE_PROFILES_FIELD_NUMBER = 7;
      private List resourceProfiles_;
      private byte memoizedIsInitialized = -1;
      private static final ApplicationEnvironmentInfo DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ApplicationEnvironmentInfo(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ApplicationEnvironmentInfo() {
         this.sparkProperties_ = Collections.emptyList();
         this.hadoopProperties_ = Collections.emptyList();
         this.systemProperties_ = Collections.emptyList();
         this.metricsProperties_ = Collections.emptyList();
         this.classpathEntries_ = Collections.emptyList();
         this.resourceProfiles_ = Collections.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfo_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ApplicationEnvironmentInfo.class, Builder.class);
      }

      public boolean hasRuntime() {
         return (this.bitField0_ & 1) != 0;
      }

      public RuntimeInfo getRuntime() {
         return this.runtime_ == null ? StoreTypes.RuntimeInfo.getDefaultInstance() : this.runtime_;
      }

      public RuntimeInfoOrBuilder getRuntimeOrBuilder() {
         return this.runtime_ == null ? StoreTypes.RuntimeInfo.getDefaultInstance() : this.runtime_;
      }

      public List getSparkPropertiesList() {
         return this.sparkProperties_;
      }

      public List getSparkPropertiesOrBuilderList() {
         return this.sparkProperties_;
      }

      public int getSparkPropertiesCount() {
         return this.sparkProperties_.size();
      }

      public PairStrings getSparkProperties(int index) {
         return (PairStrings)this.sparkProperties_.get(index);
      }

      public PairStringsOrBuilder getSparkPropertiesOrBuilder(int index) {
         return (PairStringsOrBuilder)this.sparkProperties_.get(index);
      }

      public List getHadoopPropertiesList() {
         return this.hadoopProperties_;
      }

      public List getHadoopPropertiesOrBuilderList() {
         return this.hadoopProperties_;
      }

      public int getHadoopPropertiesCount() {
         return this.hadoopProperties_.size();
      }

      public PairStrings getHadoopProperties(int index) {
         return (PairStrings)this.hadoopProperties_.get(index);
      }

      public PairStringsOrBuilder getHadoopPropertiesOrBuilder(int index) {
         return (PairStringsOrBuilder)this.hadoopProperties_.get(index);
      }

      public List getSystemPropertiesList() {
         return this.systemProperties_;
      }

      public List getSystemPropertiesOrBuilderList() {
         return this.systemProperties_;
      }

      public int getSystemPropertiesCount() {
         return this.systemProperties_.size();
      }

      public PairStrings getSystemProperties(int index) {
         return (PairStrings)this.systemProperties_.get(index);
      }

      public PairStringsOrBuilder getSystemPropertiesOrBuilder(int index) {
         return (PairStringsOrBuilder)this.systemProperties_.get(index);
      }

      public List getMetricsPropertiesList() {
         return this.metricsProperties_;
      }

      public List getMetricsPropertiesOrBuilderList() {
         return this.metricsProperties_;
      }

      public int getMetricsPropertiesCount() {
         return this.metricsProperties_.size();
      }

      public PairStrings getMetricsProperties(int index) {
         return (PairStrings)this.metricsProperties_.get(index);
      }

      public PairStringsOrBuilder getMetricsPropertiesOrBuilder(int index) {
         return (PairStringsOrBuilder)this.metricsProperties_.get(index);
      }

      public List getClasspathEntriesList() {
         return this.classpathEntries_;
      }

      public List getClasspathEntriesOrBuilderList() {
         return this.classpathEntries_;
      }

      public int getClasspathEntriesCount() {
         return this.classpathEntries_.size();
      }

      public PairStrings getClasspathEntries(int index) {
         return (PairStrings)this.classpathEntries_.get(index);
      }

      public PairStringsOrBuilder getClasspathEntriesOrBuilder(int index) {
         return (PairStringsOrBuilder)this.classpathEntries_.get(index);
      }

      public List getResourceProfilesList() {
         return this.resourceProfiles_;
      }

      public List getResourceProfilesOrBuilderList() {
         return this.resourceProfiles_;
      }

      public int getResourceProfilesCount() {
         return this.resourceProfiles_.size();
      }

      public ResourceProfileInfo getResourceProfiles(int index) {
         return (ResourceProfileInfo)this.resourceProfiles_.get(index);
      }

      public ResourceProfileInfoOrBuilder getResourceProfilesOrBuilder(int index) {
         return (ResourceProfileInfoOrBuilder)this.resourceProfiles_.get(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(1, this.getRuntime());
         }

         for(int i = 0; i < this.sparkProperties_.size(); ++i) {
            output.writeMessage(2, (MessageLite)this.sparkProperties_.get(i));
         }

         for(int i = 0; i < this.hadoopProperties_.size(); ++i) {
            output.writeMessage(3, (MessageLite)this.hadoopProperties_.get(i));
         }

         for(int i = 0; i < this.systemProperties_.size(); ++i) {
            output.writeMessage(4, (MessageLite)this.systemProperties_.get(i));
         }

         for(int i = 0; i < this.metricsProperties_.size(); ++i) {
            output.writeMessage(5, (MessageLite)this.metricsProperties_.get(i));
         }

         for(int i = 0; i < this.classpathEntries_.size(); ++i) {
            output.writeMessage(6, (MessageLite)this.classpathEntries_.get(i));
         }

         for(int i = 0; i < this.resourceProfiles_.size(); ++i) {
            output.writeMessage(7, (MessageLite)this.resourceProfiles_.get(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(1, this.getRuntime());
            }

            for(int i = 0; i < this.sparkProperties_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.sparkProperties_.get(i));
            }

            for(int i = 0; i < this.hadoopProperties_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.hadoopProperties_.get(i));
            }

            for(int i = 0; i < this.systemProperties_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(4, (MessageLite)this.systemProperties_.get(i));
            }

            for(int i = 0; i < this.metricsProperties_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(5, (MessageLite)this.metricsProperties_.get(i));
            }

            for(int i = 0; i < this.classpathEntries_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(6, (MessageLite)this.classpathEntries_.get(i));
            }

            for(int i = 0; i < this.resourceProfiles_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(7, (MessageLite)this.resourceProfiles_.get(i));
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ApplicationEnvironmentInfo)) {
            return super.equals(obj);
         } else {
            ApplicationEnvironmentInfo other = (ApplicationEnvironmentInfo)obj;
            if (this.hasRuntime() != other.hasRuntime()) {
               return false;
            } else if (this.hasRuntime() && !this.getRuntime().equals(other.getRuntime())) {
               return false;
            } else if (!this.getSparkPropertiesList().equals(other.getSparkPropertiesList())) {
               return false;
            } else if (!this.getHadoopPropertiesList().equals(other.getHadoopPropertiesList())) {
               return false;
            } else if (!this.getSystemPropertiesList().equals(other.getSystemPropertiesList())) {
               return false;
            } else if (!this.getMetricsPropertiesList().equals(other.getMetricsPropertiesList())) {
               return false;
            } else if (!this.getClasspathEntriesList().equals(other.getClasspathEntriesList())) {
               return false;
            } else if (!this.getResourceProfilesList().equals(other.getResourceProfilesList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasRuntime()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getRuntime().hashCode();
            }

            if (this.getSparkPropertiesCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getSparkPropertiesList().hashCode();
            }

            if (this.getHadoopPropertiesCount() > 0) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getHadoopPropertiesList().hashCode();
            }

            if (this.getSystemPropertiesCount() > 0) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getSystemPropertiesList().hashCode();
            }

            if (this.getMetricsPropertiesCount() > 0) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getMetricsPropertiesList().hashCode();
            }

            if (this.getClasspathEntriesCount() > 0) {
               hash = 37 * hash + 6;
               hash = 53 * hash + this.getClasspathEntriesList().hashCode();
            }

            if (this.getResourceProfilesCount() > 0) {
               hash = 37 * hash + 7;
               hash = 53 * hash + this.getResourceProfilesList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ApplicationEnvironmentInfo parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfo)PARSER.parseFrom(data);
      }

      public static ApplicationEnvironmentInfo parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationEnvironmentInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfo)PARSER.parseFrom(data);
      }

      public static ApplicationEnvironmentInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationEnvironmentInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfo)PARSER.parseFrom(data);
      }

      public static ApplicationEnvironmentInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationEnvironmentInfo parseFrom(InputStream input) throws IOException {
         return (ApplicationEnvironmentInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ApplicationEnvironmentInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationEnvironmentInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ApplicationEnvironmentInfo parseDelimitedFrom(InputStream input) throws IOException {
         return (ApplicationEnvironmentInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ApplicationEnvironmentInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationEnvironmentInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ApplicationEnvironmentInfo parseFrom(CodedInputStream input) throws IOException {
         return (ApplicationEnvironmentInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ApplicationEnvironmentInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationEnvironmentInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ApplicationEnvironmentInfo prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ApplicationEnvironmentInfo getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ApplicationEnvironmentInfo getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ApplicationEnvironmentInfo.class.getName());
         DEFAULT_INSTANCE = new ApplicationEnvironmentInfo();
         PARSER = new AbstractParser() {
            public ApplicationEnvironmentInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ApplicationEnvironmentInfo.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ApplicationEnvironmentInfoOrBuilder {
         private int bitField0_;
         private RuntimeInfo runtime_;
         private SingleFieldBuilder runtimeBuilder_;
         private List sparkProperties_ = Collections.emptyList();
         private RepeatedFieldBuilder sparkPropertiesBuilder_;
         private List hadoopProperties_ = Collections.emptyList();
         private RepeatedFieldBuilder hadoopPropertiesBuilder_;
         private List systemProperties_ = Collections.emptyList();
         private RepeatedFieldBuilder systemPropertiesBuilder_;
         private List metricsProperties_ = Collections.emptyList();
         private RepeatedFieldBuilder metricsPropertiesBuilder_;
         private List classpathEntries_ = Collections.emptyList();
         private RepeatedFieldBuilder classpathEntriesBuilder_;
         private List resourceProfiles_ = Collections.emptyList();
         private RepeatedFieldBuilder resourceProfilesBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfo_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ApplicationEnvironmentInfo.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ApplicationEnvironmentInfo.alwaysUseFieldBuilders) {
               this.getRuntimeFieldBuilder();
               this.getSparkPropertiesFieldBuilder();
               this.getHadoopPropertiesFieldBuilder();
               this.getSystemPropertiesFieldBuilder();
               this.getMetricsPropertiesFieldBuilder();
               this.getClasspathEntriesFieldBuilder();
               this.getResourceProfilesFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.runtime_ = null;
            if (this.runtimeBuilder_ != null) {
               this.runtimeBuilder_.dispose();
               this.runtimeBuilder_ = null;
            }

            if (this.sparkPropertiesBuilder_ == null) {
               this.sparkProperties_ = Collections.emptyList();
            } else {
               this.sparkProperties_ = null;
               this.sparkPropertiesBuilder_.clear();
            }

            this.bitField0_ &= -3;
            if (this.hadoopPropertiesBuilder_ == null) {
               this.hadoopProperties_ = Collections.emptyList();
            } else {
               this.hadoopProperties_ = null;
               this.hadoopPropertiesBuilder_.clear();
            }

            this.bitField0_ &= -5;
            if (this.systemPropertiesBuilder_ == null) {
               this.systemProperties_ = Collections.emptyList();
            } else {
               this.systemProperties_ = null;
               this.systemPropertiesBuilder_.clear();
            }

            this.bitField0_ &= -9;
            if (this.metricsPropertiesBuilder_ == null) {
               this.metricsProperties_ = Collections.emptyList();
            } else {
               this.metricsProperties_ = null;
               this.metricsPropertiesBuilder_.clear();
            }

            this.bitField0_ &= -17;
            if (this.classpathEntriesBuilder_ == null) {
               this.classpathEntries_ = Collections.emptyList();
            } else {
               this.classpathEntries_ = null;
               this.classpathEntriesBuilder_.clear();
            }

            this.bitField0_ &= -33;
            if (this.resourceProfilesBuilder_ == null) {
               this.resourceProfiles_ = Collections.emptyList();
            } else {
               this.resourceProfiles_ = null;
               this.resourceProfilesBuilder_.clear();
            }

            this.bitField0_ &= -65;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfo_descriptor;
         }

         public ApplicationEnvironmentInfo getDefaultInstanceForType() {
            return StoreTypes.ApplicationEnvironmentInfo.getDefaultInstance();
         }

         public ApplicationEnvironmentInfo build() {
            ApplicationEnvironmentInfo result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ApplicationEnvironmentInfo buildPartial() {
            ApplicationEnvironmentInfo result = new ApplicationEnvironmentInfo(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(ApplicationEnvironmentInfo result) {
            if (this.sparkPropertiesBuilder_ == null) {
               if ((this.bitField0_ & 2) != 0) {
                  this.sparkProperties_ = Collections.unmodifiableList(this.sparkProperties_);
                  this.bitField0_ &= -3;
               }

               result.sparkProperties_ = this.sparkProperties_;
            } else {
               result.sparkProperties_ = this.sparkPropertiesBuilder_.build();
            }

            if (this.hadoopPropertiesBuilder_ == null) {
               if ((this.bitField0_ & 4) != 0) {
                  this.hadoopProperties_ = Collections.unmodifiableList(this.hadoopProperties_);
                  this.bitField0_ &= -5;
               }

               result.hadoopProperties_ = this.hadoopProperties_;
            } else {
               result.hadoopProperties_ = this.hadoopPropertiesBuilder_.build();
            }

            if (this.systemPropertiesBuilder_ == null) {
               if ((this.bitField0_ & 8) != 0) {
                  this.systemProperties_ = Collections.unmodifiableList(this.systemProperties_);
                  this.bitField0_ &= -9;
               }

               result.systemProperties_ = this.systemProperties_;
            } else {
               result.systemProperties_ = this.systemPropertiesBuilder_.build();
            }

            if (this.metricsPropertiesBuilder_ == null) {
               if ((this.bitField0_ & 16) != 0) {
                  this.metricsProperties_ = Collections.unmodifiableList(this.metricsProperties_);
                  this.bitField0_ &= -17;
               }

               result.metricsProperties_ = this.metricsProperties_;
            } else {
               result.metricsProperties_ = this.metricsPropertiesBuilder_.build();
            }

            if (this.classpathEntriesBuilder_ == null) {
               if ((this.bitField0_ & 32) != 0) {
                  this.classpathEntries_ = Collections.unmodifiableList(this.classpathEntries_);
                  this.bitField0_ &= -33;
               }

               result.classpathEntries_ = this.classpathEntries_;
            } else {
               result.classpathEntries_ = this.classpathEntriesBuilder_.build();
            }

            if (this.resourceProfilesBuilder_ == null) {
               if ((this.bitField0_ & 64) != 0) {
                  this.resourceProfiles_ = Collections.unmodifiableList(this.resourceProfiles_);
                  this.bitField0_ &= -65;
               }

               result.resourceProfiles_ = this.resourceProfiles_;
            } else {
               result.resourceProfiles_ = this.resourceProfilesBuilder_.build();
            }

         }

         private void buildPartial0(ApplicationEnvironmentInfo result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.runtime_ = this.runtimeBuilder_ == null ? this.runtime_ : (RuntimeInfo)this.runtimeBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ApplicationEnvironmentInfo) {
               return this.mergeFrom((ApplicationEnvironmentInfo)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ApplicationEnvironmentInfo other) {
            if (other == StoreTypes.ApplicationEnvironmentInfo.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasRuntime()) {
                  this.mergeRuntime(other.getRuntime());
               }

               if (this.sparkPropertiesBuilder_ == null) {
                  if (!other.sparkProperties_.isEmpty()) {
                     if (this.sparkProperties_.isEmpty()) {
                        this.sparkProperties_ = other.sparkProperties_;
                        this.bitField0_ &= -3;
                     } else {
                        this.ensureSparkPropertiesIsMutable();
                        this.sparkProperties_.addAll(other.sparkProperties_);
                     }

                     this.onChanged();
                  }
               } else if (!other.sparkProperties_.isEmpty()) {
                  if (this.sparkPropertiesBuilder_.isEmpty()) {
                     this.sparkPropertiesBuilder_.dispose();
                     this.sparkPropertiesBuilder_ = null;
                     this.sparkProperties_ = other.sparkProperties_;
                     this.bitField0_ &= -3;
                     this.sparkPropertiesBuilder_ = StoreTypes.ApplicationEnvironmentInfo.alwaysUseFieldBuilders ? this.getSparkPropertiesFieldBuilder() : null;
                  } else {
                     this.sparkPropertiesBuilder_.addAllMessages(other.sparkProperties_);
                  }
               }

               if (this.hadoopPropertiesBuilder_ == null) {
                  if (!other.hadoopProperties_.isEmpty()) {
                     if (this.hadoopProperties_.isEmpty()) {
                        this.hadoopProperties_ = other.hadoopProperties_;
                        this.bitField0_ &= -5;
                     } else {
                        this.ensureHadoopPropertiesIsMutable();
                        this.hadoopProperties_.addAll(other.hadoopProperties_);
                     }

                     this.onChanged();
                  }
               } else if (!other.hadoopProperties_.isEmpty()) {
                  if (this.hadoopPropertiesBuilder_.isEmpty()) {
                     this.hadoopPropertiesBuilder_.dispose();
                     this.hadoopPropertiesBuilder_ = null;
                     this.hadoopProperties_ = other.hadoopProperties_;
                     this.bitField0_ &= -5;
                     this.hadoopPropertiesBuilder_ = StoreTypes.ApplicationEnvironmentInfo.alwaysUseFieldBuilders ? this.getHadoopPropertiesFieldBuilder() : null;
                  } else {
                     this.hadoopPropertiesBuilder_.addAllMessages(other.hadoopProperties_);
                  }
               }

               if (this.systemPropertiesBuilder_ == null) {
                  if (!other.systemProperties_.isEmpty()) {
                     if (this.systemProperties_.isEmpty()) {
                        this.systemProperties_ = other.systemProperties_;
                        this.bitField0_ &= -9;
                     } else {
                        this.ensureSystemPropertiesIsMutable();
                        this.systemProperties_.addAll(other.systemProperties_);
                     }

                     this.onChanged();
                  }
               } else if (!other.systemProperties_.isEmpty()) {
                  if (this.systemPropertiesBuilder_.isEmpty()) {
                     this.systemPropertiesBuilder_.dispose();
                     this.systemPropertiesBuilder_ = null;
                     this.systemProperties_ = other.systemProperties_;
                     this.bitField0_ &= -9;
                     this.systemPropertiesBuilder_ = StoreTypes.ApplicationEnvironmentInfo.alwaysUseFieldBuilders ? this.getSystemPropertiesFieldBuilder() : null;
                  } else {
                     this.systemPropertiesBuilder_.addAllMessages(other.systemProperties_);
                  }
               }

               if (this.metricsPropertiesBuilder_ == null) {
                  if (!other.metricsProperties_.isEmpty()) {
                     if (this.metricsProperties_.isEmpty()) {
                        this.metricsProperties_ = other.metricsProperties_;
                        this.bitField0_ &= -17;
                     } else {
                        this.ensureMetricsPropertiesIsMutable();
                        this.metricsProperties_.addAll(other.metricsProperties_);
                     }

                     this.onChanged();
                  }
               } else if (!other.metricsProperties_.isEmpty()) {
                  if (this.metricsPropertiesBuilder_.isEmpty()) {
                     this.metricsPropertiesBuilder_.dispose();
                     this.metricsPropertiesBuilder_ = null;
                     this.metricsProperties_ = other.metricsProperties_;
                     this.bitField0_ &= -17;
                     this.metricsPropertiesBuilder_ = StoreTypes.ApplicationEnvironmentInfo.alwaysUseFieldBuilders ? this.getMetricsPropertiesFieldBuilder() : null;
                  } else {
                     this.metricsPropertiesBuilder_.addAllMessages(other.metricsProperties_);
                  }
               }

               if (this.classpathEntriesBuilder_ == null) {
                  if (!other.classpathEntries_.isEmpty()) {
                     if (this.classpathEntries_.isEmpty()) {
                        this.classpathEntries_ = other.classpathEntries_;
                        this.bitField0_ &= -33;
                     } else {
                        this.ensureClasspathEntriesIsMutable();
                        this.classpathEntries_.addAll(other.classpathEntries_);
                     }

                     this.onChanged();
                  }
               } else if (!other.classpathEntries_.isEmpty()) {
                  if (this.classpathEntriesBuilder_.isEmpty()) {
                     this.classpathEntriesBuilder_.dispose();
                     this.classpathEntriesBuilder_ = null;
                     this.classpathEntries_ = other.classpathEntries_;
                     this.bitField0_ &= -33;
                     this.classpathEntriesBuilder_ = StoreTypes.ApplicationEnvironmentInfo.alwaysUseFieldBuilders ? this.getClasspathEntriesFieldBuilder() : null;
                  } else {
                     this.classpathEntriesBuilder_.addAllMessages(other.classpathEntries_);
                  }
               }

               if (this.resourceProfilesBuilder_ == null) {
                  if (!other.resourceProfiles_.isEmpty()) {
                     if (this.resourceProfiles_.isEmpty()) {
                        this.resourceProfiles_ = other.resourceProfiles_;
                        this.bitField0_ &= -65;
                     } else {
                        this.ensureResourceProfilesIsMutable();
                        this.resourceProfiles_.addAll(other.resourceProfiles_);
                     }

                     this.onChanged();
                  }
               } else if (!other.resourceProfiles_.isEmpty()) {
                  if (this.resourceProfilesBuilder_.isEmpty()) {
                     this.resourceProfilesBuilder_.dispose();
                     this.resourceProfilesBuilder_ = null;
                     this.resourceProfiles_ = other.resourceProfiles_;
                     this.bitField0_ &= -65;
                     this.resourceProfilesBuilder_ = StoreTypes.ApplicationEnvironmentInfo.alwaysUseFieldBuilders ? this.getResourceProfilesFieldBuilder() : null;
                  } else {
                     this.resourceProfilesBuilder_.addAllMessages(other.resourceProfiles_);
                  }
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           input.readMessage((MessageLite.Builder)this.getRuntimeFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           PairStrings m = (PairStrings)input.readMessage(StoreTypes.PairStrings.parser(), extensionRegistry);
                           if (this.sparkPropertiesBuilder_ == null) {
                              this.ensureSparkPropertiesIsMutable();
                              this.sparkProperties_.add(m);
                           } else {
                              this.sparkPropertiesBuilder_.addMessage(m);
                           }
                           break;
                        case 26:
                           PairStrings m = (PairStrings)input.readMessage(StoreTypes.PairStrings.parser(), extensionRegistry);
                           if (this.hadoopPropertiesBuilder_ == null) {
                              this.ensureHadoopPropertiesIsMutable();
                              this.hadoopProperties_.add(m);
                           } else {
                              this.hadoopPropertiesBuilder_.addMessage(m);
                           }
                           break;
                        case 34:
                           PairStrings m = (PairStrings)input.readMessage(StoreTypes.PairStrings.parser(), extensionRegistry);
                           if (this.systemPropertiesBuilder_ == null) {
                              this.ensureSystemPropertiesIsMutable();
                              this.systemProperties_.add(m);
                           } else {
                              this.systemPropertiesBuilder_.addMessage(m);
                           }
                           break;
                        case 42:
                           PairStrings m = (PairStrings)input.readMessage(StoreTypes.PairStrings.parser(), extensionRegistry);
                           if (this.metricsPropertiesBuilder_ == null) {
                              this.ensureMetricsPropertiesIsMutable();
                              this.metricsProperties_.add(m);
                           } else {
                              this.metricsPropertiesBuilder_.addMessage(m);
                           }
                           break;
                        case 50:
                           PairStrings m = (PairStrings)input.readMessage(StoreTypes.PairStrings.parser(), extensionRegistry);
                           if (this.classpathEntriesBuilder_ == null) {
                              this.ensureClasspathEntriesIsMutable();
                              this.classpathEntries_.add(m);
                           } else {
                              this.classpathEntriesBuilder_.addMessage(m);
                           }
                           break;
                        case 58:
                           ResourceProfileInfo m = (ResourceProfileInfo)input.readMessage(StoreTypes.ResourceProfileInfo.parser(), extensionRegistry);
                           if (this.resourceProfilesBuilder_ == null) {
                              this.ensureResourceProfilesIsMutable();
                              this.resourceProfiles_.add(m);
                           } else {
                              this.resourceProfilesBuilder_.addMessage(m);
                           }
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasRuntime() {
            return (this.bitField0_ & 1) != 0;
         }

         public RuntimeInfo getRuntime() {
            if (this.runtimeBuilder_ == null) {
               return this.runtime_ == null ? StoreTypes.RuntimeInfo.getDefaultInstance() : this.runtime_;
            } else {
               return (RuntimeInfo)this.runtimeBuilder_.getMessage();
            }
         }

         public Builder setRuntime(RuntimeInfo value) {
            if (this.runtimeBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.runtime_ = value;
            } else {
               this.runtimeBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder setRuntime(RuntimeInfo.Builder builderForValue) {
            if (this.runtimeBuilder_ == null) {
               this.runtime_ = builderForValue.build();
            } else {
               this.runtimeBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder mergeRuntime(RuntimeInfo value) {
            if (this.runtimeBuilder_ == null) {
               if ((this.bitField0_ & 1) != 0 && this.runtime_ != null && this.runtime_ != StoreTypes.RuntimeInfo.getDefaultInstance()) {
                  this.getRuntimeBuilder().mergeFrom(value);
               } else {
                  this.runtime_ = value;
               }
            } else {
               this.runtimeBuilder_.mergeFrom(value);
            }

            if (this.runtime_ != null) {
               this.bitField0_ |= 1;
               this.onChanged();
            }

            return this;
         }

         public Builder clearRuntime() {
            this.bitField0_ &= -2;
            this.runtime_ = null;
            if (this.runtimeBuilder_ != null) {
               this.runtimeBuilder_.dispose();
               this.runtimeBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public RuntimeInfo.Builder getRuntimeBuilder() {
            this.bitField0_ |= 1;
            this.onChanged();
            return (RuntimeInfo.Builder)this.getRuntimeFieldBuilder().getBuilder();
         }

         public RuntimeInfoOrBuilder getRuntimeOrBuilder() {
            if (this.runtimeBuilder_ != null) {
               return (RuntimeInfoOrBuilder)this.runtimeBuilder_.getMessageOrBuilder();
            } else {
               return this.runtime_ == null ? StoreTypes.RuntimeInfo.getDefaultInstance() : this.runtime_;
            }
         }

         private SingleFieldBuilder getRuntimeFieldBuilder() {
            if (this.runtimeBuilder_ == null) {
               this.runtimeBuilder_ = new SingleFieldBuilder(this.getRuntime(), this.getParentForChildren(), this.isClean());
               this.runtime_ = null;
            }

            return this.runtimeBuilder_;
         }

         private void ensureSparkPropertiesIsMutable() {
            if ((this.bitField0_ & 2) == 0) {
               this.sparkProperties_ = new ArrayList(this.sparkProperties_);
               this.bitField0_ |= 2;
            }

         }

         public List getSparkPropertiesList() {
            return this.sparkPropertiesBuilder_ == null ? Collections.unmodifiableList(this.sparkProperties_) : this.sparkPropertiesBuilder_.getMessageList();
         }

         public int getSparkPropertiesCount() {
            return this.sparkPropertiesBuilder_ == null ? this.sparkProperties_.size() : this.sparkPropertiesBuilder_.getCount();
         }

         public PairStrings getSparkProperties(int index) {
            return this.sparkPropertiesBuilder_ == null ? (PairStrings)this.sparkProperties_.get(index) : (PairStrings)this.sparkPropertiesBuilder_.getMessage(index);
         }

         public Builder setSparkProperties(int index, PairStrings value) {
            if (this.sparkPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureSparkPropertiesIsMutable();
               this.sparkProperties_.set(index, value);
               this.onChanged();
            } else {
               this.sparkPropertiesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setSparkProperties(int index, PairStrings.Builder builderForValue) {
            if (this.sparkPropertiesBuilder_ == null) {
               this.ensureSparkPropertiesIsMutable();
               this.sparkProperties_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.sparkPropertiesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addSparkProperties(PairStrings value) {
            if (this.sparkPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureSparkPropertiesIsMutable();
               this.sparkProperties_.add(value);
               this.onChanged();
            } else {
               this.sparkPropertiesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addSparkProperties(int index, PairStrings value) {
            if (this.sparkPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureSparkPropertiesIsMutable();
               this.sparkProperties_.add(index, value);
               this.onChanged();
            } else {
               this.sparkPropertiesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addSparkProperties(PairStrings.Builder builderForValue) {
            if (this.sparkPropertiesBuilder_ == null) {
               this.ensureSparkPropertiesIsMutable();
               this.sparkProperties_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.sparkPropertiesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addSparkProperties(int index, PairStrings.Builder builderForValue) {
            if (this.sparkPropertiesBuilder_ == null) {
               this.ensureSparkPropertiesIsMutable();
               this.sparkProperties_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.sparkPropertiesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllSparkProperties(Iterable values) {
            if (this.sparkPropertiesBuilder_ == null) {
               this.ensureSparkPropertiesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.sparkProperties_);
               this.onChanged();
            } else {
               this.sparkPropertiesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearSparkProperties() {
            if (this.sparkPropertiesBuilder_ == null) {
               this.sparkProperties_ = Collections.emptyList();
               this.bitField0_ &= -3;
               this.onChanged();
            } else {
               this.sparkPropertiesBuilder_.clear();
            }

            return this;
         }

         public Builder removeSparkProperties(int index) {
            if (this.sparkPropertiesBuilder_ == null) {
               this.ensureSparkPropertiesIsMutable();
               this.sparkProperties_.remove(index);
               this.onChanged();
            } else {
               this.sparkPropertiesBuilder_.remove(index);
            }

            return this;
         }

         public PairStrings.Builder getSparkPropertiesBuilder(int index) {
            return (PairStrings.Builder)this.getSparkPropertiesFieldBuilder().getBuilder(index);
         }

         public PairStringsOrBuilder getSparkPropertiesOrBuilder(int index) {
            return this.sparkPropertiesBuilder_ == null ? (PairStringsOrBuilder)this.sparkProperties_.get(index) : (PairStringsOrBuilder)this.sparkPropertiesBuilder_.getMessageOrBuilder(index);
         }

         public List getSparkPropertiesOrBuilderList() {
            return this.sparkPropertiesBuilder_ != null ? this.sparkPropertiesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.sparkProperties_);
         }

         public PairStrings.Builder addSparkPropertiesBuilder() {
            return (PairStrings.Builder)this.getSparkPropertiesFieldBuilder().addBuilder(StoreTypes.PairStrings.getDefaultInstance());
         }

         public PairStrings.Builder addSparkPropertiesBuilder(int index) {
            return (PairStrings.Builder)this.getSparkPropertiesFieldBuilder().addBuilder(index, StoreTypes.PairStrings.getDefaultInstance());
         }

         public List getSparkPropertiesBuilderList() {
            return this.getSparkPropertiesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getSparkPropertiesFieldBuilder() {
            if (this.sparkPropertiesBuilder_ == null) {
               this.sparkPropertiesBuilder_ = new RepeatedFieldBuilder(this.sparkProperties_, (this.bitField0_ & 2) != 0, this.getParentForChildren(), this.isClean());
               this.sparkProperties_ = null;
            }

            return this.sparkPropertiesBuilder_;
         }

         private void ensureHadoopPropertiesIsMutable() {
            if ((this.bitField0_ & 4) == 0) {
               this.hadoopProperties_ = new ArrayList(this.hadoopProperties_);
               this.bitField0_ |= 4;
            }

         }

         public List getHadoopPropertiesList() {
            return this.hadoopPropertiesBuilder_ == null ? Collections.unmodifiableList(this.hadoopProperties_) : this.hadoopPropertiesBuilder_.getMessageList();
         }

         public int getHadoopPropertiesCount() {
            return this.hadoopPropertiesBuilder_ == null ? this.hadoopProperties_.size() : this.hadoopPropertiesBuilder_.getCount();
         }

         public PairStrings getHadoopProperties(int index) {
            return this.hadoopPropertiesBuilder_ == null ? (PairStrings)this.hadoopProperties_.get(index) : (PairStrings)this.hadoopPropertiesBuilder_.getMessage(index);
         }

         public Builder setHadoopProperties(int index, PairStrings value) {
            if (this.hadoopPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureHadoopPropertiesIsMutable();
               this.hadoopProperties_.set(index, value);
               this.onChanged();
            } else {
               this.hadoopPropertiesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setHadoopProperties(int index, PairStrings.Builder builderForValue) {
            if (this.hadoopPropertiesBuilder_ == null) {
               this.ensureHadoopPropertiesIsMutable();
               this.hadoopProperties_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.hadoopPropertiesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addHadoopProperties(PairStrings value) {
            if (this.hadoopPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureHadoopPropertiesIsMutable();
               this.hadoopProperties_.add(value);
               this.onChanged();
            } else {
               this.hadoopPropertiesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addHadoopProperties(int index, PairStrings value) {
            if (this.hadoopPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureHadoopPropertiesIsMutable();
               this.hadoopProperties_.add(index, value);
               this.onChanged();
            } else {
               this.hadoopPropertiesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addHadoopProperties(PairStrings.Builder builderForValue) {
            if (this.hadoopPropertiesBuilder_ == null) {
               this.ensureHadoopPropertiesIsMutable();
               this.hadoopProperties_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.hadoopPropertiesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addHadoopProperties(int index, PairStrings.Builder builderForValue) {
            if (this.hadoopPropertiesBuilder_ == null) {
               this.ensureHadoopPropertiesIsMutable();
               this.hadoopProperties_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.hadoopPropertiesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllHadoopProperties(Iterable values) {
            if (this.hadoopPropertiesBuilder_ == null) {
               this.ensureHadoopPropertiesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.hadoopProperties_);
               this.onChanged();
            } else {
               this.hadoopPropertiesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearHadoopProperties() {
            if (this.hadoopPropertiesBuilder_ == null) {
               this.hadoopProperties_ = Collections.emptyList();
               this.bitField0_ &= -5;
               this.onChanged();
            } else {
               this.hadoopPropertiesBuilder_.clear();
            }

            return this;
         }

         public Builder removeHadoopProperties(int index) {
            if (this.hadoopPropertiesBuilder_ == null) {
               this.ensureHadoopPropertiesIsMutable();
               this.hadoopProperties_.remove(index);
               this.onChanged();
            } else {
               this.hadoopPropertiesBuilder_.remove(index);
            }

            return this;
         }

         public PairStrings.Builder getHadoopPropertiesBuilder(int index) {
            return (PairStrings.Builder)this.getHadoopPropertiesFieldBuilder().getBuilder(index);
         }

         public PairStringsOrBuilder getHadoopPropertiesOrBuilder(int index) {
            return this.hadoopPropertiesBuilder_ == null ? (PairStringsOrBuilder)this.hadoopProperties_.get(index) : (PairStringsOrBuilder)this.hadoopPropertiesBuilder_.getMessageOrBuilder(index);
         }

         public List getHadoopPropertiesOrBuilderList() {
            return this.hadoopPropertiesBuilder_ != null ? this.hadoopPropertiesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.hadoopProperties_);
         }

         public PairStrings.Builder addHadoopPropertiesBuilder() {
            return (PairStrings.Builder)this.getHadoopPropertiesFieldBuilder().addBuilder(StoreTypes.PairStrings.getDefaultInstance());
         }

         public PairStrings.Builder addHadoopPropertiesBuilder(int index) {
            return (PairStrings.Builder)this.getHadoopPropertiesFieldBuilder().addBuilder(index, StoreTypes.PairStrings.getDefaultInstance());
         }

         public List getHadoopPropertiesBuilderList() {
            return this.getHadoopPropertiesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getHadoopPropertiesFieldBuilder() {
            if (this.hadoopPropertiesBuilder_ == null) {
               this.hadoopPropertiesBuilder_ = new RepeatedFieldBuilder(this.hadoopProperties_, (this.bitField0_ & 4) != 0, this.getParentForChildren(), this.isClean());
               this.hadoopProperties_ = null;
            }

            return this.hadoopPropertiesBuilder_;
         }

         private void ensureSystemPropertiesIsMutable() {
            if ((this.bitField0_ & 8) == 0) {
               this.systemProperties_ = new ArrayList(this.systemProperties_);
               this.bitField0_ |= 8;
            }

         }

         public List getSystemPropertiesList() {
            return this.systemPropertiesBuilder_ == null ? Collections.unmodifiableList(this.systemProperties_) : this.systemPropertiesBuilder_.getMessageList();
         }

         public int getSystemPropertiesCount() {
            return this.systemPropertiesBuilder_ == null ? this.systemProperties_.size() : this.systemPropertiesBuilder_.getCount();
         }

         public PairStrings getSystemProperties(int index) {
            return this.systemPropertiesBuilder_ == null ? (PairStrings)this.systemProperties_.get(index) : (PairStrings)this.systemPropertiesBuilder_.getMessage(index);
         }

         public Builder setSystemProperties(int index, PairStrings value) {
            if (this.systemPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureSystemPropertiesIsMutable();
               this.systemProperties_.set(index, value);
               this.onChanged();
            } else {
               this.systemPropertiesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setSystemProperties(int index, PairStrings.Builder builderForValue) {
            if (this.systemPropertiesBuilder_ == null) {
               this.ensureSystemPropertiesIsMutable();
               this.systemProperties_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.systemPropertiesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addSystemProperties(PairStrings value) {
            if (this.systemPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureSystemPropertiesIsMutable();
               this.systemProperties_.add(value);
               this.onChanged();
            } else {
               this.systemPropertiesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addSystemProperties(int index, PairStrings value) {
            if (this.systemPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureSystemPropertiesIsMutable();
               this.systemProperties_.add(index, value);
               this.onChanged();
            } else {
               this.systemPropertiesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addSystemProperties(PairStrings.Builder builderForValue) {
            if (this.systemPropertiesBuilder_ == null) {
               this.ensureSystemPropertiesIsMutable();
               this.systemProperties_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.systemPropertiesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addSystemProperties(int index, PairStrings.Builder builderForValue) {
            if (this.systemPropertiesBuilder_ == null) {
               this.ensureSystemPropertiesIsMutable();
               this.systemProperties_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.systemPropertiesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllSystemProperties(Iterable values) {
            if (this.systemPropertiesBuilder_ == null) {
               this.ensureSystemPropertiesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.systemProperties_);
               this.onChanged();
            } else {
               this.systemPropertiesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearSystemProperties() {
            if (this.systemPropertiesBuilder_ == null) {
               this.systemProperties_ = Collections.emptyList();
               this.bitField0_ &= -9;
               this.onChanged();
            } else {
               this.systemPropertiesBuilder_.clear();
            }

            return this;
         }

         public Builder removeSystemProperties(int index) {
            if (this.systemPropertiesBuilder_ == null) {
               this.ensureSystemPropertiesIsMutable();
               this.systemProperties_.remove(index);
               this.onChanged();
            } else {
               this.systemPropertiesBuilder_.remove(index);
            }

            return this;
         }

         public PairStrings.Builder getSystemPropertiesBuilder(int index) {
            return (PairStrings.Builder)this.getSystemPropertiesFieldBuilder().getBuilder(index);
         }

         public PairStringsOrBuilder getSystemPropertiesOrBuilder(int index) {
            return this.systemPropertiesBuilder_ == null ? (PairStringsOrBuilder)this.systemProperties_.get(index) : (PairStringsOrBuilder)this.systemPropertiesBuilder_.getMessageOrBuilder(index);
         }

         public List getSystemPropertiesOrBuilderList() {
            return this.systemPropertiesBuilder_ != null ? this.systemPropertiesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.systemProperties_);
         }

         public PairStrings.Builder addSystemPropertiesBuilder() {
            return (PairStrings.Builder)this.getSystemPropertiesFieldBuilder().addBuilder(StoreTypes.PairStrings.getDefaultInstance());
         }

         public PairStrings.Builder addSystemPropertiesBuilder(int index) {
            return (PairStrings.Builder)this.getSystemPropertiesFieldBuilder().addBuilder(index, StoreTypes.PairStrings.getDefaultInstance());
         }

         public List getSystemPropertiesBuilderList() {
            return this.getSystemPropertiesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getSystemPropertiesFieldBuilder() {
            if (this.systemPropertiesBuilder_ == null) {
               this.systemPropertiesBuilder_ = new RepeatedFieldBuilder(this.systemProperties_, (this.bitField0_ & 8) != 0, this.getParentForChildren(), this.isClean());
               this.systemProperties_ = null;
            }

            return this.systemPropertiesBuilder_;
         }

         private void ensureMetricsPropertiesIsMutable() {
            if ((this.bitField0_ & 16) == 0) {
               this.metricsProperties_ = new ArrayList(this.metricsProperties_);
               this.bitField0_ |= 16;
            }

         }

         public List getMetricsPropertiesList() {
            return this.metricsPropertiesBuilder_ == null ? Collections.unmodifiableList(this.metricsProperties_) : this.metricsPropertiesBuilder_.getMessageList();
         }

         public int getMetricsPropertiesCount() {
            return this.metricsPropertiesBuilder_ == null ? this.metricsProperties_.size() : this.metricsPropertiesBuilder_.getCount();
         }

         public PairStrings getMetricsProperties(int index) {
            return this.metricsPropertiesBuilder_ == null ? (PairStrings)this.metricsProperties_.get(index) : (PairStrings)this.metricsPropertiesBuilder_.getMessage(index);
         }

         public Builder setMetricsProperties(int index, PairStrings value) {
            if (this.metricsPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsPropertiesIsMutable();
               this.metricsProperties_.set(index, value);
               this.onChanged();
            } else {
               this.metricsPropertiesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setMetricsProperties(int index, PairStrings.Builder builderForValue) {
            if (this.metricsPropertiesBuilder_ == null) {
               this.ensureMetricsPropertiesIsMutable();
               this.metricsProperties_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.metricsPropertiesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addMetricsProperties(PairStrings value) {
            if (this.metricsPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsPropertiesIsMutable();
               this.metricsProperties_.add(value);
               this.onChanged();
            } else {
               this.metricsPropertiesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addMetricsProperties(int index, PairStrings value) {
            if (this.metricsPropertiesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsPropertiesIsMutable();
               this.metricsProperties_.add(index, value);
               this.onChanged();
            } else {
               this.metricsPropertiesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addMetricsProperties(PairStrings.Builder builderForValue) {
            if (this.metricsPropertiesBuilder_ == null) {
               this.ensureMetricsPropertiesIsMutable();
               this.metricsProperties_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.metricsPropertiesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addMetricsProperties(int index, PairStrings.Builder builderForValue) {
            if (this.metricsPropertiesBuilder_ == null) {
               this.ensureMetricsPropertiesIsMutable();
               this.metricsProperties_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.metricsPropertiesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllMetricsProperties(Iterable values) {
            if (this.metricsPropertiesBuilder_ == null) {
               this.ensureMetricsPropertiesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.metricsProperties_);
               this.onChanged();
            } else {
               this.metricsPropertiesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearMetricsProperties() {
            if (this.metricsPropertiesBuilder_ == null) {
               this.metricsProperties_ = Collections.emptyList();
               this.bitField0_ &= -17;
               this.onChanged();
            } else {
               this.metricsPropertiesBuilder_.clear();
            }

            return this;
         }

         public Builder removeMetricsProperties(int index) {
            if (this.metricsPropertiesBuilder_ == null) {
               this.ensureMetricsPropertiesIsMutable();
               this.metricsProperties_.remove(index);
               this.onChanged();
            } else {
               this.metricsPropertiesBuilder_.remove(index);
            }

            return this;
         }

         public PairStrings.Builder getMetricsPropertiesBuilder(int index) {
            return (PairStrings.Builder)this.getMetricsPropertiesFieldBuilder().getBuilder(index);
         }

         public PairStringsOrBuilder getMetricsPropertiesOrBuilder(int index) {
            return this.metricsPropertiesBuilder_ == null ? (PairStringsOrBuilder)this.metricsProperties_.get(index) : (PairStringsOrBuilder)this.metricsPropertiesBuilder_.getMessageOrBuilder(index);
         }

         public List getMetricsPropertiesOrBuilderList() {
            return this.metricsPropertiesBuilder_ != null ? this.metricsPropertiesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.metricsProperties_);
         }

         public PairStrings.Builder addMetricsPropertiesBuilder() {
            return (PairStrings.Builder)this.getMetricsPropertiesFieldBuilder().addBuilder(StoreTypes.PairStrings.getDefaultInstance());
         }

         public PairStrings.Builder addMetricsPropertiesBuilder(int index) {
            return (PairStrings.Builder)this.getMetricsPropertiesFieldBuilder().addBuilder(index, StoreTypes.PairStrings.getDefaultInstance());
         }

         public List getMetricsPropertiesBuilderList() {
            return this.getMetricsPropertiesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getMetricsPropertiesFieldBuilder() {
            if (this.metricsPropertiesBuilder_ == null) {
               this.metricsPropertiesBuilder_ = new RepeatedFieldBuilder(this.metricsProperties_, (this.bitField0_ & 16) != 0, this.getParentForChildren(), this.isClean());
               this.metricsProperties_ = null;
            }

            return this.metricsPropertiesBuilder_;
         }

         private void ensureClasspathEntriesIsMutable() {
            if ((this.bitField0_ & 32) == 0) {
               this.classpathEntries_ = new ArrayList(this.classpathEntries_);
               this.bitField0_ |= 32;
            }

         }

         public List getClasspathEntriesList() {
            return this.classpathEntriesBuilder_ == null ? Collections.unmodifiableList(this.classpathEntries_) : this.classpathEntriesBuilder_.getMessageList();
         }

         public int getClasspathEntriesCount() {
            return this.classpathEntriesBuilder_ == null ? this.classpathEntries_.size() : this.classpathEntriesBuilder_.getCount();
         }

         public PairStrings getClasspathEntries(int index) {
            return this.classpathEntriesBuilder_ == null ? (PairStrings)this.classpathEntries_.get(index) : (PairStrings)this.classpathEntriesBuilder_.getMessage(index);
         }

         public Builder setClasspathEntries(int index, PairStrings value) {
            if (this.classpathEntriesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureClasspathEntriesIsMutable();
               this.classpathEntries_.set(index, value);
               this.onChanged();
            } else {
               this.classpathEntriesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setClasspathEntries(int index, PairStrings.Builder builderForValue) {
            if (this.classpathEntriesBuilder_ == null) {
               this.ensureClasspathEntriesIsMutable();
               this.classpathEntries_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.classpathEntriesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addClasspathEntries(PairStrings value) {
            if (this.classpathEntriesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureClasspathEntriesIsMutable();
               this.classpathEntries_.add(value);
               this.onChanged();
            } else {
               this.classpathEntriesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addClasspathEntries(int index, PairStrings value) {
            if (this.classpathEntriesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureClasspathEntriesIsMutable();
               this.classpathEntries_.add(index, value);
               this.onChanged();
            } else {
               this.classpathEntriesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addClasspathEntries(PairStrings.Builder builderForValue) {
            if (this.classpathEntriesBuilder_ == null) {
               this.ensureClasspathEntriesIsMutable();
               this.classpathEntries_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.classpathEntriesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addClasspathEntries(int index, PairStrings.Builder builderForValue) {
            if (this.classpathEntriesBuilder_ == null) {
               this.ensureClasspathEntriesIsMutable();
               this.classpathEntries_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.classpathEntriesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllClasspathEntries(Iterable values) {
            if (this.classpathEntriesBuilder_ == null) {
               this.ensureClasspathEntriesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.classpathEntries_);
               this.onChanged();
            } else {
               this.classpathEntriesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearClasspathEntries() {
            if (this.classpathEntriesBuilder_ == null) {
               this.classpathEntries_ = Collections.emptyList();
               this.bitField0_ &= -33;
               this.onChanged();
            } else {
               this.classpathEntriesBuilder_.clear();
            }

            return this;
         }

         public Builder removeClasspathEntries(int index) {
            if (this.classpathEntriesBuilder_ == null) {
               this.ensureClasspathEntriesIsMutable();
               this.classpathEntries_.remove(index);
               this.onChanged();
            } else {
               this.classpathEntriesBuilder_.remove(index);
            }

            return this;
         }

         public PairStrings.Builder getClasspathEntriesBuilder(int index) {
            return (PairStrings.Builder)this.getClasspathEntriesFieldBuilder().getBuilder(index);
         }

         public PairStringsOrBuilder getClasspathEntriesOrBuilder(int index) {
            return this.classpathEntriesBuilder_ == null ? (PairStringsOrBuilder)this.classpathEntries_.get(index) : (PairStringsOrBuilder)this.classpathEntriesBuilder_.getMessageOrBuilder(index);
         }

         public List getClasspathEntriesOrBuilderList() {
            return this.classpathEntriesBuilder_ != null ? this.classpathEntriesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.classpathEntries_);
         }

         public PairStrings.Builder addClasspathEntriesBuilder() {
            return (PairStrings.Builder)this.getClasspathEntriesFieldBuilder().addBuilder(StoreTypes.PairStrings.getDefaultInstance());
         }

         public PairStrings.Builder addClasspathEntriesBuilder(int index) {
            return (PairStrings.Builder)this.getClasspathEntriesFieldBuilder().addBuilder(index, StoreTypes.PairStrings.getDefaultInstance());
         }

         public List getClasspathEntriesBuilderList() {
            return this.getClasspathEntriesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getClasspathEntriesFieldBuilder() {
            if (this.classpathEntriesBuilder_ == null) {
               this.classpathEntriesBuilder_ = new RepeatedFieldBuilder(this.classpathEntries_, (this.bitField0_ & 32) != 0, this.getParentForChildren(), this.isClean());
               this.classpathEntries_ = null;
            }

            return this.classpathEntriesBuilder_;
         }

         private void ensureResourceProfilesIsMutable() {
            if ((this.bitField0_ & 64) == 0) {
               this.resourceProfiles_ = new ArrayList(this.resourceProfiles_);
               this.bitField0_ |= 64;
            }

         }

         public List getResourceProfilesList() {
            return this.resourceProfilesBuilder_ == null ? Collections.unmodifiableList(this.resourceProfiles_) : this.resourceProfilesBuilder_.getMessageList();
         }

         public int getResourceProfilesCount() {
            return this.resourceProfilesBuilder_ == null ? this.resourceProfiles_.size() : this.resourceProfilesBuilder_.getCount();
         }

         public ResourceProfileInfo getResourceProfiles(int index) {
            return this.resourceProfilesBuilder_ == null ? (ResourceProfileInfo)this.resourceProfiles_.get(index) : (ResourceProfileInfo)this.resourceProfilesBuilder_.getMessage(index);
         }

         public Builder setResourceProfiles(int index, ResourceProfileInfo value) {
            if (this.resourceProfilesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureResourceProfilesIsMutable();
               this.resourceProfiles_.set(index, value);
               this.onChanged();
            } else {
               this.resourceProfilesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setResourceProfiles(int index, ResourceProfileInfo.Builder builderForValue) {
            if (this.resourceProfilesBuilder_ == null) {
               this.ensureResourceProfilesIsMutable();
               this.resourceProfiles_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.resourceProfilesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addResourceProfiles(ResourceProfileInfo value) {
            if (this.resourceProfilesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureResourceProfilesIsMutable();
               this.resourceProfiles_.add(value);
               this.onChanged();
            } else {
               this.resourceProfilesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addResourceProfiles(int index, ResourceProfileInfo value) {
            if (this.resourceProfilesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureResourceProfilesIsMutable();
               this.resourceProfiles_.add(index, value);
               this.onChanged();
            } else {
               this.resourceProfilesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addResourceProfiles(ResourceProfileInfo.Builder builderForValue) {
            if (this.resourceProfilesBuilder_ == null) {
               this.ensureResourceProfilesIsMutable();
               this.resourceProfiles_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.resourceProfilesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addResourceProfiles(int index, ResourceProfileInfo.Builder builderForValue) {
            if (this.resourceProfilesBuilder_ == null) {
               this.ensureResourceProfilesIsMutable();
               this.resourceProfiles_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.resourceProfilesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllResourceProfiles(Iterable values) {
            if (this.resourceProfilesBuilder_ == null) {
               this.ensureResourceProfilesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.resourceProfiles_);
               this.onChanged();
            } else {
               this.resourceProfilesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearResourceProfiles() {
            if (this.resourceProfilesBuilder_ == null) {
               this.resourceProfiles_ = Collections.emptyList();
               this.bitField0_ &= -65;
               this.onChanged();
            } else {
               this.resourceProfilesBuilder_.clear();
            }

            return this;
         }

         public Builder removeResourceProfiles(int index) {
            if (this.resourceProfilesBuilder_ == null) {
               this.ensureResourceProfilesIsMutable();
               this.resourceProfiles_.remove(index);
               this.onChanged();
            } else {
               this.resourceProfilesBuilder_.remove(index);
            }

            return this;
         }

         public ResourceProfileInfo.Builder getResourceProfilesBuilder(int index) {
            return (ResourceProfileInfo.Builder)this.getResourceProfilesFieldBuilder().getBuilder(index);
         }

         public ResourceProfileInfoOrBuilder getResourceProfilesOrBuilder(int index) {
            return this.resourceProfilesBuilder_ == null ? (ResourceProfileInfoOrBuilder)this.resourceProfiles_.get(index) : (ResourceProfileInfoOrBuilder)this.resourceProfilesBuilder_.getMessageOrBuilder(index);
         }

         public List getResourceProfilesOrBuilderList() {
            return this.resourceProfilesBuilder_ != null ? this.resourceProfilesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.resourceProfiles_);
         }

         public ResourceProfileInfo.Builder addResourceProfilesBuilder() {
            return (ResourceProfileInfo.Builder)this.getResourceProfilesFieldBuilder().addBuilder(StoreTypes.ResourceProfileInfo.getDefaultInstance());
         }

         public ResourceProfileInfo.Builder addResourceProfilesBuilder(int index) {
            return (ResourceProfileInfo.Builder)this.getResourceProfilesFieldBuilder().addBuilder(index, StoreTypes.ResourceProfileInfo.getDefaultInstance());
         }

         public List getResourceProfilesBuilderList() {
            return this.getResourceProfilesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getResourceProfilesFieldBuilder() {
            if (this.resourceProfilesBuilder_ == null) {
               this.resourceProfilesBuilder_ = new RepeatedFieldBuilder(this.resourceProfiles_, (this.bitField0_ & 64) != 0, this.getParentForChildren(), this.isClean());
               this.resourceProfiles_ = null;
            }

            return this.resourceProfilesBuilder_;
         }
      }
   }

   public static final class ApplicationEnvironmentInfoWrapper extends GeneratedMessage implements ApplicationEnvironmentInfoWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int INFO_FIELD_NUMBER = 1;
      private ApplicationEnvironmentInfo info_;
      private byte memoizedIsInitialized = -1;
      private static final ApplicationEnvironmentInfoWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ApplicationEnvironmentInfoWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ApplicationEnvironmentInfoWrapper() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfoWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfoWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ApplicationEnvironmentInfoWrapper.class, Builder.class);
      }

      public boolean hasInfo() {
         return (this.bitField0_ & 1) != 0;
      }

      public ApplicationEnvironmentInfo getInfo() {
         return this.info_ == null ? StoreTypes.ApplicationEnvironmentInfo.getDefaultInstance() : this.info_;
      }

      public ApplicationEnvironmentInfoOrBuilder getInfoOrBuilder() {
         return this.info_ == null ? StoreTypes.ApplicationEnvironmentInfo.getDefaultInstance() : this.info_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(1, this.getInfo());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(1, this.getInfo());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ApplicationEnvironmentInfoWrapper)) {
            return super.equals(obj);
         } else {
            ApplicationEnvironmentInfoWrapper other = (ApplicationEnvironmentInfoWrapper)obj;
            if (this.hasInfo() != other.hasInfo()) {
               return false;
            } else if (this.hasInfo() && !this.getInfo().equals(other.getInfo())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasInfo()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getInfo().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ApplicationEnvironmentInfoWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfoWrapper)PARSER.parseFrom(data);
      }

      public static ApplicationEnvironmentInfoWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfoWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationEnvironmentInfoWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfoWrapper)PARSER.parseFrom(data);
      }

      public static ApplicationEnvironmentInfoWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfoWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationEnvironmentInfoWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfoWrapper)PARSER.parseFrom(data);
      }

      public static ApplicationEnvironmentInfoWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationEnvironmentInfoWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationEnvironmentInfoWrapper parseFrom(InputStream input) throws IOException {
         return (ApplicationEnvironmentInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ApplicationEnvironmentInfoWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationEnvironmentInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ApplicationEnvironmentInfoWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (ApplicationEnvironmentInfoWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ApplicationEnvironmentInfoWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationEnvironmentInfoWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ApplicationEnvironmentInfoWrapper parseFrom(CodedInputStream input) throws IOException {
         return (ApplicationEnvironmentInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ApplicationEnvironmentInfoWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationEnvironmentInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ApplicationEnvironmentInfoWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ApplicationEnvironmentInfoWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ApplicationEnvironmentInfoWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ApplicationEnvironmentInfoWrapper.class.getName());
         DEFAULT_INSTANCE = new ApplicationEnvironmentInfoWrapper();
         PARSER = new AbstractParser() {
            public ApplicationEnvironmentInfoWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ApplicationEnvironmentInfoWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ApplicationEnvironmentInfoWrapperOrBuilder {
         private int bitField0_;
         private ApplicationEnvironmentInfo info_;
         private SingleFieldBuilder infoBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfoWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfoWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ApplicationEnvironmentInfoWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ApplicationEnvironmentInfoWrapper.alwaysUseFieldBuilders) {
               this.getInfoFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationEnvironmentInfoWrapper_descriptor;
         }

         public ApplicationEnvironmentInfoWrapper getDefaultInstanceForType() {
            return StoreTypes.ApplicationEnvironmentInfoWrapper.getDefaultInstance();
         }

         public ApplicationEnvironmentInfoWrapper build() {
            ApplicationEnvironmentInfoWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ApplicationEnvironmentInfoWrapper buildPartial() {
            ApplicationEnvironmentInfoWrapper result = new ApplicationEnvironmentInfoWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ApplicationEnvironmentInfoWrapper result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.info_ = this.infoBuilder_ == null ? this.info_ : (ApplicationEnvironmentInfo)this.infoBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ApplicationEnvironmentInfoWrapper) {
               return this.mergeFrom((ApplicationEnvironmentInfoWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ApplicationEnvironmentInfoWrapper other) {
            if (other == StoreTypes.ApplicationEnvironmentInfoWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasInfo()) {
                  this.mergeInfo(other.getInfo());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           input.readMessage((MessageLite.Builder)this.getInfoFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasInfo() {
            return (this.bitField0_ & 1) != 0;
         }

         public ApplicationEnvironmentInfo getInfo() {
            if (this.infoBuilder_ == null) {
               return this.info_ == null ? StoreTypes.ApplicationEnvironmentInfo.getDefaultInstance() : this.info_;
            } else {
               return (ApplicationEnvironmentInfo)this.infoBuilder_.getMessage();
            }
         }

         public Builder setInfo(ApplicationEnvironmentInfo value) {
            if (this.infoBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.info_ = value;
            } else {
               this.infoBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder setInfo(ApplicationEnvironmentInfo.Builder builderForValue) {
            if (this.infoBuilder_ == null) {
               this.info_ = builderForValue.build();
            } else {
               this.infoBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder mergeInfo(ApplicationEnvironmentInfo value) {
            if (this.infoBuilder_ == null) {
               if ((this.bitField0_ & 1) != 0 && this.info_ != null && this.info_ != StoreTypes.ApplicationEnvironmentInfo.getDefaultInstance()) {
                  this.getInfoBuilder().mergeFrom(value);
               } else {
                  this.info_ = value;
               }
            } else {
               this.infoBuilder_.mergeFrom(value);
            }

            if (this.info_ != null) {
               this.bitField0_ |= 1;
               this.onChanged();
            }

            return this;
         }

         public Builder clearInfo() {
            this.bitField0_ &= -2;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ApplicationEnvironmentInfo.Builder getInfoBuilder() {
            this.bitField0_ |= 1;
            this.onChanged();
            return (ApplicationEnvironmentInfo.Builder)this.getInfoFieldBuilder().getBuilder();
         }

         public ApplicationEnvironmentInfoOrBuilder getInfoOrBuilder() {
            if (this.infoBuilder_ != null) {
               return (ApplicationEnvironmentInfoOrBuilder)this.infoBuilder_.getMessageOrBuilder();
            } else {
               return this.info_ == null ? StoreTypes.ApplicationEnvironmentInfo.getDefaultInstance() : this.info_;
            }
         }

         private SingleFieldBuilder getInfoFieldBuilder() {
            if (this.infoBuilder_ == null) {
               this.infoBuilder_ = new SingleFieldBuilder(this.getInfo(), this.getParentForChildren(), this.isClean());
               this.info_ = null;
            }

            return this.infoBuilder_;
         }
      }
   }

   public static final class ApplicationAttemptInfo extends GeneratedMessage implements ApplicationAttemptInfoOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ATTEMPT_ID_FIELD_NUMBER = 1;
      private volatile Object attemptId_ = "";
      public static final int START_TIME_FIELD_NUMBER = 2;
      private long startTime_ = 0L;
      public static final int END_TIME_FIELD_NUMBER = 3;
      private long endTime_ = 0L;
      public static final int LAST_UPDATED_FIELD_NUMBER = 4;
      private long lastUpdated_ = 0L;
      public static final int DURATION_FIELD_NUMBER = 5;
      private long duration_ = 0L;
      public static final int SPARK_USER_FIELD_NUMBER = 6;
      private volatile Object sparkUser_ = "";
      public static final int COMPLETED_FIELD_NUMBER = 7;
      private boolean completed_ = false;
      public static final int APP_SPARK_VERSION_FIELD_NUMBER = 8;
      private volatile Object appSparkVersion_ = "";
      private byte memoizedIsInitialized = -1;
      private static final ApplicationAttemptInfo DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ApplicationAttemptInfo(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ApplicationAttemptInfo() {
         this.attemptId_ = "";
         this.sparkUser_ = "";
         this.appSparkVersion_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationAttemptInfo_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationAttemptInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ApplicationAttemptInfo.class, Builder.class);
      }

      public boolean hasAttemptId() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getAttemptId() {
         Object ref = this.attemptId_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.attemptId_ = s;
            return s;
         }
      }

      public ByteString getAttemptIdBytes() {
         Object ref = this.attemptId_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.attemptId_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getStartTime() {
         return this.startTime_;
      }

      public long getEndTime() {
         return this.endTime_;
      }

      public long getLastUpdated() {
         return this.lastUpdated_;
      }

      public long getDuration() {
         return this.duration_;
      }

      public boolean hasSparkUser() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getSparkUser() {
         Object ref = this.sparkUser_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.sparkUser_ = s;
            return s;
         }
      }

      public ByteString getSparkUserBytes() {
         Object ref = this.sparkUser_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.sparkUser_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean getCompleted() {
         return this.completed_;
      }

      public boolean hasAppSparkVersion() {
         return (this.bitField0_ & 4) != 0;
      }

      public String getAppSparkVersion() {
         Object ref = this.appSparkVersion_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.appSparkVersion_ = s;
            return s;
         }
      }

      public ByteString getAppSparkVersionBytes() {
         Object ref = this.appSparkVersion_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.appSparkVersion_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.attemptId_);
         }

         if (this.startTime_ != 0L) {
            output.writeInt64(2, this.startTime_);
         }

         if (this.endTime_ != 0L) {
            output.writeInt64(3, this.endTime_);
         }

         if (this.lastUpdated_ != 0L) {
            output.writeInt64(4, this.lastUpdated_);
         }

         if (this.duration_ != 0L) {
            output.writeInt64(5, this.duration_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 6, this.sparkUser_);
         }

         if (this.completed_) {
            output.writeBool(7, this.completed_);
         }

         if ((this.bitField0_ & 4) != 0) {
            GeneratedMessage.writeString(output, 8, this.appSparkVersion_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.attemptId_);
            }

            if (this.startTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.startTime_);
            }

            if (this.endTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(3, this.endTime_);
            }

            if (this.lastUpdated_ != 0L) {
               size += CodedOutputStream.computeInt64Size(4, this.lastUpdated_);
            }

            if (this.duration_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.duration_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(6, this.sparkUser_);
            }

            if (this.completed_) {
               size += CodedOutputStream.computeBoolSize(7, this.completed_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += GeneratedMessage.computeStringSize(8, this.appSparkVersion_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ApplicationAttemptInfo)) {
            return super.equals(obj);
         } else {
            ApplicationAttemptInfo other = (ApplicationAttemptInfo)obj;
            if (this.hasAttemptId() != other.hasAttemptId()) {
               return false;
            } else if (this.hasAttemptId() && !this.getAttemptId().equals(other.getAttemptId())) {
               return false;
            } else if (this.getStartTime() != other.getStartTime()) {
               return false;
            } else if (this.getEndTime() != other.getEndTime()) {
               return false;
            } else if (this.getLastUpdated() != other.getLastUpdated()) {
               return false;
            } else if (this.getDuration() != other.getDuration()) {
               return false;
            } else if (this.hasSparkUser() != other.hasSparkUser()) {
               return false;
            } else if (this.hasSparkUser() && !this.getSparkUser().equals(other.getSparkUser())) {
               return false;
            } else if (this.getCompleted() != other.getCompleted()) {
               return false;
            } else if (this.hasAppSparkVersion() != other.hasAppSparkVersion()) {
               return false;
            } else if (this.hasAppSparkVersion() && !this.getAppSparkVersion().equals(other.getAppSparkVersion())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasAttemptId()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getAttemptId().hashCode();
            }

            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getStartTime());
            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashLong(this.getEndTime());
            hash = 37 * hash + 4;
            hash = 53 * hash + Internal.hashLong(this.getLastUpdated());
            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getDuration());
            if (this.hasSparkUser()) {
               hash = 37 * hash + 6;
               hash = 53 * hash + this.getSparkUser().hashCode();
            }

            hash = 37 * hash + 7;
            hash = 53 * hash + Internal.hashBoolean(this.getCompleted());
            if (this.hasAppSparkVersion()) {
               hash = 37 * hash + 8;
               hash = 53 * hash + this.getAppSparkVersion().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ApplicationAttemptInfo parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ApplicationAttemptInfo)PARSER.parseFrom(data);
      }

      public static ApplicationAttemptInfo parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationAttemptInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationAttemptInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ApplicationAttemptInfo)PARSER.parseFrom(data);
      }

      public static ApplicationAttemptInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationAttemptInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationAttemptInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ApplicationAttemptInfo)PARSER.parseFrom(data);
      }

      public static ApplicationAttemptInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationAttemptInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationAttemptInfo parseFrom(InputStream input) throws IOException {
         return (ApplicationAttemptInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ApplicationAttemptInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationAttemptInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ApplicationAttemptInfo parseDelimitedFrom(InputStream input) throws IOException {
         return (ApplicationAttemptInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ApplicationAttemptInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationAttemptInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ApplicationAttemptInfo parseFrom(CodedInputStream input) throws IOException {
         return (ApplicationAttemptInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ApplicationAttemptInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationAttemptInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ApplicationAttemptInfo prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ApplicationAttemptInfo getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ApplicationAttemptInfo getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ApplicationAttemptInfo.class.getName());
         DEFAULT_INSTANCE = new ApplicationAttemptInfo();
         PARSER = new AbstractParser() {
            public ApplicationAttemptInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ApplicationAttemptInfo.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ApplicationAttemptInfoOrBuilder {
         private int bitField0_;
         private Object attemptId_ = "";
         private long startTime_;
         private long endTime_;
         private long lastUpdated_;
         private long duration_;
         private Object sparkUser_ = "";
         private boolean completed_;
         private Object appSparkVersion_ = "";

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationAttemptInfo_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationAttemptInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ApplicationAttemptInfo.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.attemptId_ = "";
            this.startTime_ = 0L;
            this.endTime_ = 0L;
            this.lastUpdated_ = 0L;
            this.duration_ = 0L;
            this.sparkUser_ = "";
            this.completed_ = false;
            this.appSparkVersion_ = "";
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationAttemptInfo_descriptor;
         }

         public ApplicationAttemptInfo getDefaultInstanceForType() {
            return StoreTypes.ApplicationAttemptInfo.getDefaultInstance();
         }

         public ApplicationAttemptInfo build() {
            ApplicationAttemptInfo result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ApplicationAttemptInfo buildPartial() {
            ApplicationAttemptInfo result = new ApplicationAttemptInfo(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ApplicationAttemptInfo result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.attemptId_ = this.attemptId_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.startTime_ = this.startTime_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.endTime_ = this.endTime_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.lastUpdated_ = this.lastUpdated_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.duration_ = this.duration_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.sparkUser_ = this.sparkUser_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.completed_ = this.completed_;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.appSparkVersion_ = this.appSparkVersion_;
               to_bitField0_ |= 4;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ApplicationAttemptInfo) {
               return this.mergeFrom((ApplicationAttemptInfo)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ApplicationAttemptInfo other) {
            if (other == StoreTypes.ApplicationAttemptInfo.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasAttemptId()) {
                  this.attemptId_ = other.attemptId_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.getStartTime() != 0L) {
                  this.setStartTime(other.getStartTime());
               }

               if (other.getEndTime() != 0L) {
                  this.setEndTime(other.getEndTime());
               }

               if (other.getLastUpdated() != 0L) {
                  this.setLastUpdated(other.getLastUpdated());
               }

               if (other.getDuration() != 0L) {
                  this.setDuration(other.getDuration());
               }

               if (other.hasSparkUser()) {
                  this.sparkUser_ = other.sparkUser_;
                  this.bitField0_ |= 32;
                  this.onChanged();
               }

               if (other.getCompleted()) {
                  this.setCompleted(other.getCompleted());
               }

               if (other.hasAppSparkVersion()) {
                  this.appSparkVersion_ = other.appSparkVersion_;
                  this.bitField0_ |= 128;
                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.attemptId_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.startTime_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.endTime_ = input.readInt64();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.lastUpdated_ = input.readInt64();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.duration_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 50:
                           this.sparkUser_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.completed_ = input.readBool();
                           this.bitField0_ |= 64;
                           break;
                        case 66:
                           this.appSparkVersion_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 128;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasAttemptId() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getAttemptId() {
            Object ref = this.attemptId_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.attemptId_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getAttemptIdBytes() {
            Object ref = this.attemptId_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.attemptId_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setAttemptId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.attemptId_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearAttemptId() {
            this.attemptId_ = StoreTypes.ApplicationAttemptInfo.getDefaultInstance().getAttemptId();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setAttemptIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ApplicationAttemptInfo.checkByteStringIsUtf8(value);
               this.attemptId_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public long getStartTime() {
            return this.startTime_;
         }

         public Builder setStartTime(long value) {
            this.startTime_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearStartTime() {
            this.bitField0_ &= -3;
            this.startTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getEndTime() {
            return this.endTime_;
         }

         public Builder setEndTime(long value) {
            this.endTime_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearEndTime() {
            this.bitField0_ &= -5;
            this.endTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getLastUpdated() {
            return this.lastUpdated_;
         }

         public Builder setLastUpdated(long value) {
            this.lastUpdated_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearLastUpdated() {
            this.bitField0_ &= -9;
            this.lastUpdated_ = 0L;
            this.onChanged();
            return this;
         }

         public long getDuration() {
            return this.duration_;
         }

         public Builder setDuration(long value) {
            this.duration_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearDuration() {
            this.bitField0_ &= -17;
            this.duration_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasSparkUser() {
            return (this.bitField0_ & 32) != 0;
         }

         public String getSparkUser() {
            Object ref = this.sparkUser_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.sparkUser_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getSparkUserBytes() {
            Object ref = this.sparkUser_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.sparkUser_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setSparkUser(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.sparkUser_ = value;
               this.bitField0_ |= 32;
               this.onChanged();
               return this;
            }
         }

         public Builder clearSparkUser() {
            this.sparkUser_ = StoreTypes.ApplicationAttemptInfo.getDefaultInstance().getSparkUser();
            this.bitField0_ &= -33;
            this.onChanged();
            return this;
         }

         public Builder setSparkUserBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ApplicationAttemptInfo.checkByteStringIsUtf8(value);
               this.sparkUser_ = value;
               this.bitField0_ |= 32;
               this.onChanged();
               return this;
            }
         }

         public boolean getCompleted() {
            return this.completed_;
         }

         public Builder setCompleted(boolean value) {
            this.completed_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearCompleted() {
            this.bitField0_ &= -65;
            this.completed_ = false;
            this.onChanged();
            return this;
         }

         public boolean hasAppSparkVersion() {
            return (this.bitField0_ & 128) != 0;
         }

         public String getAppSparkVersion() {
            Object ref = this.appSparkVersion_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.appSparkVersion_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getAppSparkVersionBytes() {
            Object ref = this.appSparkVersion_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.appSparkVersion_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setAppSparkVersion(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.appSparkVersion_ = value;
               this.bitField0_ |= 128;
               this.onChanged();
               return this;
            }
         }

         public Builder clearAppSparkVersion() {
            this.appSparkVersion_ = StoreTypes.ApplicationAttemptInfo.getDefaultInstance().getAppSparkVersion();
            this.bitField0_ &= -129;
            this.onChanged();
            return this;
         }

         public Builder setAppSparkVersionBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ApplicationAttemptInfo.checkByteStringIsUtf8(value);
               this.appSparkVersion_ = value;
               this.bitField0_ |= 128;
               this.onChanged();
               return this;
            }
         }
      }
   }

   public static final class ApplicationInfo extends GeneratedMessage implements ApplicationInfoOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private volatile Object id_ = "";
      public static final int NAME_FIELD_NUMBER = 2;
      private volatile Object name_ = "";
      public static final int CORES_GRANTED_FIELD_NUMBER = 3;
      private int coresGranted_ = 0;
      public static final int MAX_CORES_FIELD_NUMBER = 4;
      private int maxCores_ = 0;
      public static final int CORES_PER_EXECUTOR_FIELD_NUMBER = 5;
      private int coresPerExecutor_ = 0;
      public static final int MEMORY_PER_EXECUTOR_MB_FIELD_NUMBER = 6;
      private int memoryPerExecutorMb_ = 0;
      public static final int ATTEMPTS_FIELD_NUMBER = 7;
      private List attempts_;
      private byte memoizedIsInitialized = -1;
      private static final ApplicationInfo DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ApplicationInfo(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ApplicationInfo() {
         this.id_ = "";
         this.name_ = "";
         this.attempts_ = Collections.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationInfo_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ApplicationInfo.class, Builder.class);
      }

      public boolean hasId() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getId() {
         Object ref = this.id_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.id_ = s;
            return s;
         }
      }

      public ByteString getIdBytes() {
         Object ref = this.id_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.id_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasName() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasCoresGranted() {
         return (this.bitField0_ & 4) != 0;
      }

      public int getCoresGranted() {
         return this.coresGranted_;
      }

      public boolean hasMaxCores() {
         return (this.bitField0_ & 8) != 0;
      }

      public int getMaxCores() {
         return this.maxCores_;
      }

      public boolean hasCoresPerExecutor() {
         return (this.bitField0_ & 16) != 0;
      }

      public int getCoresPerExecutor() {
         return this.coresPerExecutor_;
      }

      public boolean hasMemoryPerExecutorMb() {
         return (this.bitField0_ & 32) != 0;
      }

      public int getMemoryPerExecutorMb() {
         return this.memoryPerExecutorMb_;
      }

      public List getAttemptsList() {
         return this.attempts_;
      }

      public List getAttemptsOrBuilderList() {
         return this.attempts_;
      }

      public int getAttemptsCount() {
         return this.attempts_.size();
      }

      public ApplicationAttemptInfo getAttempts(int index) {
         return (ApplicationAttemptInfo)this.attempts_.get(index);
      }

      public ApplicationAttemptInfoOrBuilder getAttemptsOrBuilder(int index) {
         return (ApplicationAttemptInfoOrBuilder)this.attempts_.get(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.id_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 2, this.name_);
         }

         if ((this.bitField0_ & 4) != 0) {
            output.writeInt32(3, this.coresGranted_);
         }

         if ((this.bitField0_ & 8) != 0) {
            output.writeInt32(4, this.maxCores_);
         }

         if ((this.bitField0_ & 16) != 0) {
            output.writeInt32(5, this.coresPerExecutor_);
         }

         if ((this.bitField0_ & 32) != 0) {
            output.writeInt32(6, this.memoryPerExecutorMb_);
         }

         for(int i = 0; i < this.attempts_.size(); ++i) {
            output.writeMessage(7, (MessageLite)this.attempts_.get(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.id_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.name_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += CodedOutputStream.computeInt32Size(3, this.coresGranted_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += CodedOutputStream.computeInt32Size(4, this.maxCores_);
            }

            if ((this.bitField0_ & 16) != 0) {
               size += CodedOutputStream.computeInt32Size(5, this.coresPerExecutor_);
            }

            if ((this.bitField0_ & 32) != 0) {
               size += CodedOutputStream.computeInt32Size(6, this.memoryPerExecutorMb_);
            }

            for(int i = 0; i < this.attempts_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(7, (MessageLite)this.attempts_.get(i));
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ApplicationInfo)) {
            return super.equals(obj);
         } else {
            ApplicationInfo other = (ApplicationInfo)obj;
            if (this.hasId() != other.hasId()) {
               return false;
            } else if (this.hasId() && !this.getId().equals(other.getId())) {
               return false;
            } else if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.hasCoresGranted() != other.hasCoresGranted()) {
               return false;
            } else if (this.hasCoresGranted() && this.getCoresGranted() != other.getCoresGranted()) {
               return false;
            } else if (this.hasMaxCores() != other.hasMaxCores()) {
               return false;
            } else if (this.hasMaxCores() && this.getMaxCores() != other.getMaxCores()) {
               return false;
            } else if (this.hasCoresPerExecutor() != other.hasCoresPerExecutor()) {
               return false;
            } else if (this.hasCoresPerExecutor() && this.getCoresPerExecutor() != other.getCoresPerExecutor()) {
               return false;
            } else if (this.hasMemoryPerExecutorMb() != other.hasMemoryPerExecutorMb()) {
               return false;
            } else if (this.hasMemoryPerExecutorMb() && this.getMemoryPerExecutorMb() != other.getMemoryPerExecutorMb()) {
               return false;
            } else if (!this.getAttemptsList().equals(other.getAttemptsList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasId()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getId().hashCode();
            }

            if (this.hasName()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.hasCoresGranted()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getCoresGranted();
            }

            if (this.hasMaxCores()) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getMaxCores();
            }

            if (this.hasCoresPerExecutor()) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getCoresPerExecutor();
            }

            if (this.hasMemoryPerExecutorMb()) {
               hash = 37 * hash + 6;
               hash = 53 * hash + this.getMemoryPerExecutorMb();
            }

            if (this.getAttemptsCount() > 0) {
               hash = 37 * hash + 7;
               hash = 53 * hash + this.getAttemptsList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ApplicationInfo parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ApplicationInfo)PARSER.parseFrom(data);
      }

      public static ApplicationInfo parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ApplicationInfo)PARSER.parseFrom(data);
      }

      public static ApplicationInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ApplicationInfo)PARSER.parseFrom(data);
      }

      public static ApplicationInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationInfo parseFrom(InputStream input) throws IOException {
         return (ApplicationInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ApplicationInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ApplicationInfo parseDelimitedFrom(InputStream input) throws IOException {
         return (ApplicationInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ApplicationInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ApplicationInfo parseFrom(CodedInputStream input) throws IOException {
         return (ApplicationInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ApplicationInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ApplicationInfo prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ApplicationInfo getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ApplicationInfo getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ApplicationInfo.class.getName());
         DEFAULT_INSTANCE = new ApplicationInfo();
         PARSER = new AbstractParser() {
            public ApplicationInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ApplicationInfo.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ApplicationInfoOrBuilder {
         private int bitField0_;
         private Object id_ = "";
         private Object name_ = "";
         private int coresGranted_;
         private int maxCores_;
         private int coresPerExecutor_;
         private int memoryPerExecutorMb_;
         private List attempts_ = Collections.emptyList();
         private RepeatedFieldBuilder attemptsBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationInfo_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(ApplicationInfo.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.id_ = "";
            this.name_ = "";
            this.coresGranted_ = 0;
            this.maxCores_ = 0;
            this.coresPerExecutor_ = 0;
            this.memoryPerExecutorMb_ = 0;
            if (this.attemptsBuilder_ == null) {
               this.attempts_ = Collections.emptyList();
            } else {
               this.attempts_ = null;
               this.attemptsBuilder_.clear();
            }

            this.bitField0_ &= -65;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationInfo_descriptor;
         }

         public ApplicationInfo getDefaultInstanceForType() {
            return StoreTypes.ApplicationInfo.getDefaultInstance();
         }

         public ApplicationInfo build() {
            ApplicationInfo result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ApplicationInfo buildPartial() {
            ApplicationInfo result = new ApplicationInfo(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(ApplicationInfo result) {
            if (this.attemptsBuilder_ == null) {
               if ((this.bitField0_ & 64) != 0) {
                  this.attempts_ = Collections.unmodifiableList(this.attempts_);
                  this.bitField0_ &= -65;
               }

               result.attempts_ = this.attempts_;
            } else {
               result.attempts_ = this.attemptsBuilder_.build();
            }

         }

         private void buildPartial0(ApplicationInfo result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.id_ = this.id_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.coresGranted_ = this.coresGranted_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.maxCores_ = this.maxCores_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.coresPerExecutor_ = this.coresPerExecutor_;
               to_bitField0_ |= 16;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.memoryPerExecutorMb_ = this.memoryPerExecutorMb_;
               to_bitField0_ |= 32;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ApplicationInfo) {
               return this.mergeFrom((ApplicationInfo)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ApplicationInfo other) {
            if (other == StoreTypes.ApplicationInfo.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasId()) {
                  this.id_ = other.id_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.hasCoresGranted()) {
                  this.setCoresGranted(other.getCoresGranted());
               }

               if (other.hasMaxCores()) {
                  this.setMaxCores(other.getMaxCores());
               }

               if (other.hasCoresPerExecutor()) {
                  this.setCoresPerExecutor(other.getCoresPerExecutor());
               }

               if (other.hasMemoryPerExecutorMb()) {
                  this.setMemoryPerExecutorMb(other.getMemoryPerExecutorMb());
               }

               if (this.attemptsBuilder_ == null) {
                  if (!other.attempts_.isEmpty()) {
                     if (this.attempts_.isEmpty()) {
                        this.attempts_ = other.attempts_;
                        this.bitField0_ &= -65;
                     } else {
                        this.ensureAttemptsIsMutable();
                        this.attempts_.addAll(other.attempts_);
                     }

                     this.onChanged();
                  }
               } else if (!other.attempts_.isEmpty()) {
                  if (this.attemptsBuilder_.isEmpty()) {
                     this.attemptsBuilder_.dispose();
                     this.attemptsBuilder_ = null;
                     this.attempts_ = other.attempts_;
                     this.bitField0_ &= -65;
                     this.attemptsBuilder_ = StoreTypes.ApplicationInfo.alwaysUseFieldBuilders ? this.getAttemptsFieldBuilder() : null;
                  } else {
                     this.attemptsBuilder_.addAllMessages(other.attempts_);
                  }
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.id_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.coresGranted_ = input.readInt32();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.maxCores_ = input.readInt32();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.coresPerExecutor_ = input.readInt32();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.memoryPerExecutorMb_ = input.readInt32();
                           this.bitField0_ |= 32;
                           break;
                        case 58:
                           ApplicationAttemptInfo m = (ApplicationAttemptInfo)input.readMessage(StoreTypes.ApplicationAttemptInfo.parser(), extensionRegistry);
                           if (this.attemptsBuilder_ == null) {
                              this.ensureAttemptsIsMutable();
                              this.attempts_.add(m);
                           } else {
                              this.attemptsBuilder_.addMessage(m);
                           }
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasId() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getId() {
            Object ref = this.id_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.id_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.id_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.id_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearId() {
            this.id_ = StoreTypes.ApplicationInfo.getDefaultInstance().getId();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ApplicationInfo.checkByteStringIsUtf8(value);
               this.id_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public boolean hasName() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.ApplicationInfo.getDefaultInstance().getName();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ApplicationInfo.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean hasCoresGranted() {
            return (this.bitField0_ & 4) != 0;
         }

         public int getCoresGranted() {
            return this.coresGranted_;
         }

         public Builder setCoresGranted(int value) {
            this.coresGranted_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearCoresGranted() {
            this.bitField0_ &= -5;
            this.coresGranted_ = 0;
            this.onChanged();
            return this;
         }

         public boolean hasMaxCores() {
            return (this.bitField0_ & 8) != 0;
         }

         public int getMaxCores() {
            return this.maxCores_;
         }

         public Builder setMaxCores(int value) {
            this.maxCores_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearMaxCores() {
            this.bitField0_ &= -9;
            this.maxCores_ = 0;
            this.onChanged();
            return this;
         }

         public boolean hasCoresPerExecutor() {
            return (this.bitField0_ & 16) != 0;
         }

         public int getCoresPerExecutor() {
            return this.coresPerExecutor_;
         }

         public Builder setCoresPerExecutor(int value) {
            this.coresPerExecutor_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearCoresPerExecutor() {
            this.bitField0_ &= -17;
            this.coresPerExecutor_ = 0;
            this.onChanged();
            return this;
         }

         public boolean hasMemoryPerExecutorMb() {
            return (this.bitField0_ & 32) != 0;
         }

         public int getMemoryPerExecutorMb() {
            return this.memoryPerExecutorMb_;
         }

         public Builder setMemoryPerExecutorMb(int value) {
            this.memoryPerExecutorMb_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryPerExecutorMb() {
            this.bitField0_ &= -33;
            this.memoryPerExecutorMb_ = 0;
            this.onChanged();
            return this;
         }

         private void ensureAttemptsIsMutable() {
            if ((this.bitField0_ & 64) == 0) {
               this.attempts_ = new ArrayList(this.attempts_);
               this.bitField0_ |= 64;
            }

         }

         public List getAttemptsList() {
            return this.attemptsBuilder_ == null ? Collections.unmodifiableList(this.attempts_) : this.attemptsBuilder_.getMessageList();
         }

         public int getAttemptsCount() {
            return this.attemptsBuilder_ == null ? this.attempts_.size() : this.attemptsBuilder_.getCount();
         }

         public ApplicationAttemptInfo getAttempts(int index) {
            return this.attemptsBuilder_ == null ? (ApplicationAttemptInfo)this.attempts_.get(index) : (ApplicationAttemptInfo)this.attemptsBuilder_.getMessage(index);
         }

         public Builder setAttempts(int index, ApplicationAttemptInfo value) {
            if (this.attemptsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAttemptsIsMutable();
               this.attempts_.set(index, value);
               this.onChanged();
            } else {
               this.attemptsBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setAttempts(int index, ApplicationAttemptInfo.Builder builderForValue) {
            if (this.attemptsBuilder_ == null) {
               this.ensureAttemptsIsMutable();
               this.attempts_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.attemptsBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAttempts(ApplicationAttemptInfo value) {
            if (this.attemptsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAttemptsIsMutable();
               this.attempts_.add(value);
               this.onChanged();
            } else {
               this.attemptsBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addAttempts(int index, ApplicationAttemptInfo value) {
            if (this.attemptsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAttemptsIsMutable();
               this.attempts_.add(index, value);
               this.onChanged();
            } else {
               this.attemptsBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addAttempts(ApplicationAttemptInfo.Builder builderForValue) {
            if (this.attemptsBuilder_ == null) {
               this.ensureAttemptsIsMutable();
               this.attempts_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.attemptsBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addAttempts(int index, ApplicationAttemptInfo.Builder builderForValue) {
            if (this.attemptsBuilder_ == null) {
               this.ensureAttemptsIsMutable();
               this.attempts_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.attemptsBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllAttempts(Iterable values) {
            if (this.attemptsBuilder_ == null) {
               this.ensureAttemptsIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.attempts_);
               this.onChanged();
            } else {
               this.attemptsBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearAttempts() {
            if (this.attemptsBuilder_ == null) {
               this.attempts_ = Collections.emptyList();
               this.bitField0_ &= -65;
               this.onChanged();
            } else {
               this.attemptsBuilder_.clear();
            }

            return this;
         }

         public Builder removeAttempts(int index) {
            if (this.attemptsBuilder_ == null) {
               this.ensureAttemptsIsMutable();
               this.attempts_.remove(index);
               this.onChanged();
            } else {
               this.attemptsBuilder_.remove(index);
            }

            return this;
         }

         public ApplicationAttemptInfo.Builder getAttemptsBuilder(int index) {
            return (ApplicationAttemptInfo.Builder)this.getAttemptsFieldBuilder().getBuilder(index);
         }

         public ApplicationAttemptInfoOrBuilder getAttemptsOrBuilder(int index) {
            return this.attemptsBuilder_ == null ? (ApplicationAttemptInfoOrBuilder)this.attempts_.get(index) : (ApplicationAttemptInfoOrBuilder)this.attemptsBuilder_.getMessageOrBuilder(index);
         }

         public List getAttemptsOrBuilderList() {
            return this.attemptsBuilder_ != null ? this.attemptsBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.attempts_);
         }

         public ApplicationAttemptInfo.Builder addAttemptsBuilder() {
            return (ApplicationAttemptInfo.Builder)this.getAttemptsFieldBuilder().addBuilder(StoreTypes.ApplicationAttemptInfo.getDefaultInstance());
         }

         public ApplicationAttemptInfo.Builder addAttemptsBuilder(int index) {
            return (ApplicationAttemptInfo.Builder)this.getAttemptsFieldBuilder().addBuilder(index, StoreTypes.ApplicationAttemptInfo.getDefaultInstance());
         }

         public List getAttemptsBuilderList() {
            return this.getAttemptsFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getAttemptsFieldBuilder() {
            if (this.attemptsBuilder_ == null) {
               this.attemptsBuilder_ = new RepeatedFieldBuilder(this.attempts_, (this.bitField0_ & 64) != 0, this.getParentForChildren(), this.isClean());
               this.attempts_ = null;
            }

            return this.attemptsBuilder_;
         }
      }
   }

   public static final class ApplicationInfoWrapper extends GeneratedMessage implements ApplicationInfoWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int INFO_FIELD_NUMBER = 1;
      private ApplicationInfo info_;
      private byte memoizedIsInitialized = -1;
      private static final ApplicationInfoWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ApplicationInfoWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ApplicationInfoWrapper() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationInfoWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationInfoWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ApplicationInfoWrapper.class, Builder.class);
      }

      public boolean hasInfo() {
         return (this.bitField0_ & 1) != 0;
      }

      public ApplicationInfo getInfo() {
         return this.info_ == null ? StoreTypes.ApplicationInfo.getDefaultInstance() : this.info_;
      }

      public ApplicationInfoOrBuilder getInfoOrBuilder() {
         return this.info_ == null ? StoreTypes.ApplicationInfo.getDefaultInstance() : this.info_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(1, this.getInfo());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(1, this.getInfo());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ApplicationInfoWrapper)) {
            return super.equals(obj);
         } else {
            ApplicationInfoWrapper other = (ApplicationInfoWrapper)obj;
            if (this.hasInfo() != other.hasInfo()) {
               return false;
            } else if (this.hasInfo() && !this.getInfo().equals(other.getInfo())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasInfo()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getInfo().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ApplicationInfoWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ApplicationInfoWrapper)PARSER.parseFrom(data);
      }

      public static ApplicationInfoWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationInfoWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationInfoWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ApplicationInfoWrapper)PARSER.parseFrom(data);
      }

      public static ApplicationInfoWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationInfoWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationInfoWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ApplicationInfoWrapper)PARSER.parseFrom(data);
      }

      public static ApplicationInfoWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ApplicationInfoWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ApplicationInfoWrapper parseFrom(InputStream input) throws IOException {
         return (ApplicationInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ApplicationInfoWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ApplicationInfoWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (ApplicationInfoWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ApplicationInfoWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationInfoWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ApplicationInfoWrapper parseFrom(CodedInputStream input) throws IOException {
         return (ApplicationInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ApplicationInfoWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ApplicationInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ApplicationInfoWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ApplicationInfoWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ApplicationInfoWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ApplicationInfoWrapper.class.getName());
         DEFAULT_INSTANCE = new ApplicationInfoWrapper();
         PARSER = new AbstractParser() {
            public ApplicationInfoWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ApplicationInfoWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ApplicationInfoWrapperOrBuilder {
         private int bitField0_;
         private ApplicationInfo info_;
         private SingleFieldBuilder infoBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationInfoWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationInfoWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ApplicationInfoWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ApplicationInfoWrapper.alwaysUseFieldBuilders) {
               this.getInfoFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ApplicationInfoWrapper_descriptor;
         }

         public ApplicationInfoWrapper getDefaultInstanceForType() {
            return StoreTypes.ApplicationInfoWrapper.getDefaultInstance();
         }

         public ApplicationInfoWrapper build() {
            ApplicationInfoWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ApplicationInfoWrapper buildPartial() {
            ApplicationInfoWrapper result = new ApplicationInfoWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ApplicationInfoWrapper result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.info_ = this.infoBuilder_ == null ? this.info_ : (ApplicationInfo)this.infoBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ApplicationInfoWrapper) {
               return this.mergeFrom((ApplicationInfoWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ApplicationInfoWrapper other) {
            if (other == StoreTypes.ApplicationInfoWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasInfo()) {
                  this.mergeInfo(other.getInfo());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           input.readMessage((MessageLite.Builder)this.getInfoFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasInfo() {
            return (this.bitField0_ & 1) != 0;
         }

         public ApplicationInfo getInfo() {
            if (this.infoBuilder_ == null) {
               return this.info_ == null ? StoreTypes.ApplicationInfo.getDefaultInstance() : this.info_;
            } else {
               return (ApplicationInfo)this.infoBuilder_.getMessage();
            }
         }

         public Builder setInfo(ApplicationInfo value) {
            if (this.infoBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.info_ = value;
            } else {
               this.infoBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder setInfo(ApplicationInfo.Builder builderForValue) {
            if (this.infoBuilder_ == null) {
               this.info_ = builderForValue.build();
            } else {
               this.infoBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder mergeInfo(ApplicationInfo value) {
            if (this.infoBuilder_ == null) {
               if ((this.bitField0_ & 1) != 0 && this.info_ != null && this.info_ != StoreTypes.ApplicationInfo.getDefaultInstance()) {
                  this.getInfoBuilder().mergeFrom(value);
               } else {
                  this.info_ = value;
               }
            } else {
               this.infoBuilder_.mergeFrom(value);
            }

            if (this.info_ != null) {
               this.bitField0_ |= 1;
               this.onChanged();
            }

            return this;
         }

         public Builder clearInfo() {
            this.bitField0_ &= -2;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ApplicationInfo.Builder getInfoBuilder() {
            this.bitField0_ |= 1;
            this.onChanged();
            return (ApplicationInfo.Builder)this.getInfoFieldBuilder().getBuilder();
         }

         public ApplicationInfoOrBuilder getInfoOrBuilder() {
            if (this.infoBuilder_ != null) {
               return (ApplicationInfoOrBuilder)this.infoBuilder_.getMessageOrBuilder();
            } else {
               return this.info_ == null ? StoreTypes.ApplicationInfo.getDefaultInstance() : this.info_;
            }
         }

         private SingleFieldBuilder getInfoFieldBuilder() {
            if (this.infoBuilder_ == null) {
               this.infoBuilder_ = new SingleFieldBuilder(this.getInfo(), this.getParentForChildren(), this.isClean());
               this.info_ = null;
            }

            return this.infoBuilder_;
         }
      }
   }

   public static final class StreamBlockData extends GeneratedMessage implements StreamBlockDataOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      private volatile Object name_ = "";
      public static final int EXECUTOR_ID_FIELD_NUMBER = 2;
      private volatile Object executorId_ = "";
      public static final int HOST_PORT_FIELD_NUMBER = 3;
      private volatile Object hostPort_ = "";
      public static final int STORAGE_LEVEL_FIELD_NUMBER = 4;
      private volatile Object storageLevel_ = "";
      public static final int USE_MEMORY_FIELD_NUMBER = 5;
      private boolean useMemory_ = false;
      public static final int USE_DISK_FIELD_NUMBER = 6;
      private boolean useDisk_ = false;
      public static final int DESERIALIZED_FIELD_NUMBER = 7;
      private boolean deserialized_ = false;
      public static final int MEM_SIZE_FIELD_NUMBER = 8;
      private long memSize_ = 0L;
      public static final int DISK_SIZE_FIELD_NUMBER = 9;
      private long diskSize_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final StreamBlockData DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private StreamBlockData(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private StreamBlockData() {
         this.name_ = "";
         this.executorId_ = "";
         this.hostPort_ = "";
         this.storageLevel_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamBlockData_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamBlockData_fieldAccessorTable.ensureFieldAccessorsInitialized(StreamBlockData.class, Builder.class);
      }

      public boolean hasName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasExecutorId() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getExecutorId() {
         Object ref = this.executorId_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.executorId_ = s;
            return s;
         }
      }

      public ByteString getExecutorIdBytes() {
         Object ref = this.executorId_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.executorId_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasHostPort() {
         return (this.bitField0_ & 4) != 0;
      }

      public String getHostPort() {
         Object ref = this.hostPort_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.hostPort_ = s;
            return s;
         }
      }

      public ByteString getHostPortBytes() {
         Object ref = this.hostPort_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.hostPort_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasStorageLevel() {
         return (this.bitField0_ & 8) != 0;
      }

      public String getStorageLevel() {
         Object ref = this.storageLevel_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.storageLevel_ = s;
            return s;
         }
      }

      public ByteString getStorageLevelBytes() {
         Object ref = this.storageLevel_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.storageLevel_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean getUseMemory() {
         return this.useMemory_;
      }

      public boolean getUseDisk() {
         return this.useDisk_;
      }

      public boolean getDeserialized() {
         return this.deserialized_;
      }

      public long getMemSize() {
         return this.memSize_;
      }

      public long getDiskSize() {
         return this.diskSize_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.name_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 2, this.executorId_);
         }

         if ((this.bitField0_ & 4) != 0) {
            GeneratedMessage.writeString(output, 3, this.hostPort_);
         }

         if ((this.bitField0_ & 8) != 0) {
            GeneratedMessage.writeString(output, 4, this.storageLevel_);
         }

         if (this.useMemory_) {
            output.writeBool(5, this.useMemory_);
         }

         if (this.useDisk_) {
            output.writeBool(6, this.useDisk_);
         }

         if (this.deserialized_) {
            output.writeBool(7, this.deserialized_);
         }

         if (this.memSize_ != 0L) {
            output.writeInt64(8, this.memSize_);
         }

         if (this.diskSize_ != 0L) {
            output.writeInt64(9, this.diskSize_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.name_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.executorId_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.hostPort_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += GeneratedMessage.computeStringSize(4, this.storageLevel_);
            }

            if (this.useMemory_) {
               size += CodedOutputStream.computeBoolSize(5, this.useMemory_);
            }

            if (this.useDisk_) {
               size += CodedOutputStream.computeBoolSize(6, this.useDisk_);
            }

            if (this.deserialized_) {
               size += CodedOutputStream.computeBoolSize(7, this.deserialized_);
            }

            if (this.memSize_ != 0L) {
               size += CodedOutputStream.computeInt64Size(8, this.memSize_);
            }

            if (this.diskSize_ != 0L) {
               size += CodedOutputStream.computeInt64Size(9, this.diskSize_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof StreamBlockData)) {
            return super.equals(obj);
         } else {
            StreamBlockData other = (StreamBlockData)obj;
            if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.hasExecutorId() != other.hasExecutorId()) {
               return false;
            } else if (this.hasExecutorId() && !this.getExecutorId().equals(other.getExecutorId())) {
               return false;
            } else if (this.hasHostPort() != other.hasHostPort()) {
               return false;
            } else if (this.hasHostPort() && !this.getHostPort().equals(other.getHostPort())) {
               return false;
            } else if (this.hasStorageLevel() != other.hasStorageLevel()) {
               return false;
            } else if (this.hasStorageLevel() && !this.getStorageLevel().equals(other.getStorageLevel())) {
               return false;
            } else if (this.getUseMemory() != other.getUseMemory()) {
               return false;
            } else if (this.getUseDisk() != other.getUseDisk()) {
               return false;
            } else if (this.getDeserialized() != other.getDeserialized()) {
               return false;
            } else if (this.getMemSize() != other.getMemSize()) {
               return false;
            } else if (this.getDiskSize() != other.getDiskSize()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasName()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.hasExecutorId()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getExecutorId().hashCode();
            }

            if (this.hasHostPort()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getHostPort().hashCode();
            }

            if (this.hasStorageLevel()) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getStorageLevel().hashCode();
            }

            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashBoolean(this.getUseMemory());
            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashBoolean(this.getUseDisk());
            hash = 37 * hash + 7;
            hash = 53 * hash + Internal.hashBoolean(this.getDeserialized());
            hash = 37 * hash + 8;
            hash = 53 * hash + Internal.hashLong(this.getMemSize());
            hash = 37 * hash + 9;
            hash = 53 * hash + Internal.hashLong(this.getDiskSize());
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static StreamBlockData parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (StreamBlockData)PARSER.parseFrom(data);
      }

      public static StreamBlockData parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamBlockData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamBlockData parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (StreamBlockData)PARSER.parseFrom(data);
      }

      public static StreamBlockData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamBlockData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamBlockData parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (StreamBlockData)PARSER.parseFrom(data);
      }

      public static StreamBlockData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamBlockData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamBlockData parseFrom(InputStream input) throws IOException {
         return (StreamBlockData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StreamBlockData parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamBlockData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static StreamBlockData parseDelimitedFrom(InputStream input) throws IOException {
         return (StreamBlockData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static StreamBlockData parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamBlockData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static StreamBlockData parseFrom(CodedInputStream input) throws IOException {
         return (StreamBlockData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StreamBlockData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamBlockData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(StreamBlockData prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static StreamBlockData getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public StreamBlockData getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", StreamBlockData.class.getName());
         DEFAULT_INSTANCE = new StreamBlockData();
         PARSER = new AbstractParser() {
            public StreamBlockData parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.StreamBlockData.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements StreamBlockDataOrBuilder {
         private int bitField0_;
         private Object name_ = "";
         private Object executorId_ = "";
         private Object hostPort_ = "";
         private Object storageLevel_ = "";
         private boolean useMemory_;
         private boolean useDisk_;
         private boolean deserialized_;
         private long memSize_;
         private long diskSize_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamBlockData_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamBlockData_fieldAccessorTable.ensureFieldAccessorsInitialized(StreamBlockData.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.name_ = "";
            this.executorId_ = "";
            this.hostPort_ = "";
            this.storageLevel_ = "";
            this.useMemory_ = false;
            this.useDisk_ = false;
            this.deserialized_ = false;
            this.memSize_ = 0L;
            this.diskSize_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamBlockData_descriptor;
         }

         public StreamBlockData getDefaultInstanceForType() {
            return StoreTypes.StreamBlockData.getDefaultInstance();
         }

         public StreamBlockData build() {
            StreamBlockData result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public StreamBlockData buildPartial() {
            StreamBlockData result = new StreamBlockData(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(StreamBlockData result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.executorId_ = this.executorId_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.hostPort_ = this.hostPort_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.storageLevel_ = this.storageLevel_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.useMemory_ = this.useMemory_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.useDisk_ = this.useDisk_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.deserialized_ = this.deserialized_;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.memSize_ = this.memSize_;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.diskSize_ = this.diskSize_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof StreamBlockData) {
               return this.mergeFrom((StreamBlockData)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(StreamBlockData other) {
            if (other == StoreTypes.StreamBlockData.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.hasExecutorId()) {
                  this.executorId_ = other.executorId_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.hasHostPort()) {
                  this.hostPort_ = other.hostPort_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (other.hasStorageLevel()) {
                  this.storageLevel_ = other.storageLevel_;
                  this.bitField0_ |= 8;
                  this.onChanged();
               }

               if (other.getUseMemory()) {
                  this.setUseMemory(other.getUseMemory());
               }

               if (other.getUseDisk()) {
                  this.setUseDisk(other.getUseDisk());
               }

               if (other.getDeserialized()) {
                  this.setDeserialized(other.getDeserialized());
               }

               if (other.getMemSize() != 0L) {
                  this.setMemSize(other.getMemSize());
               }

               if (other.getDiskSize() != 0L) {
                  this.setDiskSize(other.getDiskSize());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.executorId_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.hostPort_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 34:
                           this.storageLevel_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.useMemory_ = input.readBool();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.useDisk_ = input.readBool();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.deserialized_ = input.readBool();
                           this.bitField0_ |= 64;
                           break;
                        case 64:
                           this.memSize_ = input.readInt64();
                           this.bitField0_ |= 128;
                           break;
                        case 72:
                           this.diskSize_ = input.readInt64();
                           this.bitField0_ |= 256;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasName() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.StreamBlockData.getDefaultInstance().getName();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamBlockData.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public boolean hasExecutorId() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getExecutorId() {
            Object ref = this.executorId_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.executorId_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getExecutorIdBytes() {
            Object ref = this.executorId_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.executorId_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setExecutorId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.executorId_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearExecutorId() {
            this.executorId_ = StoreTypes.StreamBlockData.getDefaultInstance().getExecutorId();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setExecutorIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamBlockData.checkByteStringIsUtf8(value);
               this.executorId_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean hasHostPort() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getHostPort() {
            Object ref = this.hostPort_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.hostPort_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getHostPortBytes() {
            Object ref = this.hostPort_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.hostPort_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setHostPort(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.hostPort_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearHostPort() {
            this.hostPort_ = StoreTypes.StreamBlockData.getDefaultInstance().getHostPort();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setHostPortBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamBlockData.checkByteStringIsUtf8(value);
               this.hostPort_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public boolean hasStorageLevel() {
            return (this.bitField0_ & 8) != 0;
         }

         public String getStorageLevel() {
            Object ref = this.storageLevel_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.storageLevel_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getStorageLevelBytes() {
            Object ref = this.storageLevel_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.storageLevel_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setStorageLevel(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.storageLevel_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }

         public Builder clearStorageLevel() {
            this.storageLevel_ = StoreTypes.StreamBlockData.getDefaultInstance().getStorageLevel();
            this.bitField0_ &= -9;
            this.onChanged();
            return this;
         }

         public Builder setStorageLevelBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamBlockData.checkByteStringIsUtf8(value);
               this.storageLevel_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }

         public boolean getUseMemory() {
            return this.useMemory_;
         }

         public Builder setUseMemory(boolean value) {
            this.useMemory_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearUseMemory() {
            this.bitField0_ &= -17;
            this.useMemory_ = false;
            this.onChanged();
            return this;
         }

         public boolean getUseDisk() {
            return this.useDisk_;
         }

         public Builder setUseDisk(boolean value) {
            this.useDisk_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearUseDisk() {
            this.bitField0_ &= -33;
            this.useDisk_ = false;
            this.onChanged();
            return this;
         }

         public boolean getDeserialized() {
            return this.deserialized_;
         }

         public Builder setDeserialized(boolean value) {
            this.deserialized_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearDeserialized() {
            this.bitField0_ &= -65;
            this.deserialized_ = false;
            this.onChanged();
            return this;
         }

         public long getMemSize() {
            return this.memSize_;
         }

         public Builder setMemSize(long value) {
            this.memSize_ = value;
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearMemSize() {
            this.bitField0_ &= -129;
            this.memSize_ = 0L;
            this.onChanged();
            return this;
         }

         public long getDiskSize() {
            return this.diskSize_;
         }

         public Builder setDiskSize(long value) {
            this.diskSize_ = value;
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearDiskSize() {
            this.bitField0_ &= -257;
            this.diskSize_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class RDDDataDistribution extends GeneratedMessage implements RDDDataDistributionOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ADDRESS_FIELD_NUMBER = 1;
      private volatile Object address_ = "";
      public static final int MEMORY_USED_FIELD_NUMBER = 2;
      private long memoryUsed_ = 0L;
      public static final int MEMORY_REMAINING_FIELD_NUMBER = 3;
      private long memoryRemaining_ = 0L;
      public static final int DISK_USED_FIELD_NUMBER = 4;
      private long diskUsed_ = 0L;
      public static final int ON_HEAP_MEMORY_USED_FIELD_NUMBER = 5;
      private long onHeapMemoryUsed_ = 0L;
      public static final int OFF_HEAP_MEMORY_USED_FIELD_NUMBER = 6;
      private long offHeapMemoryUsed_ = 0L;
      public static final int ON_HEAP_MEMORY_REMAINING_FIELD_NUMBER = 7;
      private long onHeapMemoryRemaining_ = 0L;
      public static final int OFF_HEAP_MEMORY_REMAINING_FIELD_NUMBER = 8;
      private long offHeapMemoryRemaining_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final RDDDataDistribution DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private RDDDataDistribution(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private RDDDataDistribution() {
         this.address_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDDataDistribution_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDDataDistribution_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDDataDistribution.class, Builder.class);
      }

      public boolean hasAddress() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getAddress() {
         Object ref = this.address_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.address_ = s;
            return s;
         }
      }

      public ByteString getAddressBytes() {
         Object ref = this.address_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.address_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getMemoryUsed() {
         return this.memoryUsed_;
      }

      public long getMemoryRemaining() {
         return this.memoryRemaining_;
      }

      public long getDiskUsed() {
         return this.diskUsed_;
      }

      public boolean hasOnHeapMemoryUsed() {
         return (this.bitField0_ & 2) != 0;
      }

      public long getOnHeapMemoryUsed() {
         return this.onHeapMemoryUsed_;
      }

      public boolean hasOffHeapMemoryUsed() {
         return (this.bitField0_ & 4) != 0;
      }

      public long getOffHeapMemoryUsed() {
         return this.offHeapMemoryUsed_;
      }

      public boolean hasOnHeapMemoryRemaining() {
         return (this.bitField0_ & 8) != 0;
      }

      public long getOnHeapMemoryRemaining() {
         return this.onHeapMemoryRemaining_;
      }

      public boolean hasOffHeapMemoryRemaining() {
         return (this.bitField0_ & 16) != 0;
      }

      public long getOffHeapMemoryRemaining() {
         return this.offHeapMemoryRemaining_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.address_);
         }

         if (this.memoryUsed_ != 0L) {
            output.writeInt64(2, this.memoryUsed_);
         }

         if (this.memoryRemaining_ != 0L) {
            output.writeInt64(3, this.memoryRemaining_);
         }

         if (this.diskUsed_ != 0L) {
            output.writeInt64(4, this.diskUsed_);
         }

         if ((this.bitField0_ & 2) != 0) {
            output.writeInt64(5, this.onHeapMemoryUsed_);
         }

         if ((this.bitField0_ & 4) != 0) {
            output.writeInt64(6, this.offHeapMemoryUsed_);
         }

         if ((this.bitField0_ & 8) != 0) {
            output.writeInt64(7, this.onHeapMemoryRemaining_);
         }

         if ((this.bitField0_ & 16) != 0) {
            output.writeInt64(8, this.offHeapMemoryRemaining_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.address_);
            }

            if (this.memoryUsed_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.memoryUsed_);
            }

            if (this.memoryRemaining_ != 0L) {
               size += CodedOutputStream.computeInt64Size(3, this.memoryRemaining_);
            }

            if (this.diskUsed_ != 0L) {
               size += CodedOutputStream.computeInt64Size(4, this.diskUsed_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += CodedOutputStream.computeInt64Size(5, this.onHeapMemoryUsed_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += CodedOutputStream.computeInt64Size(6, this.offHeapMemoryUsed_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += CodedOutputStream.computeInt64Size(7, this.onHeapMemoryRemaining_);
            }

            if ((this.bitField0_ & 16) != 0) {
               size += CodedOutputStream.computeInt64Size(8, this.offHeapMemoryRemaining_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof RDDDataDistribution)) {
            return super.equals(obj);
         } else {
            RDDDataDistribution other = (RDDDataDistribution)obj;
            if (this.hasAddress() != other.hasAddress()) {
               return false;
            } else if (this.hasAddress() && !this.getAddress().equals(other.getAddress())) {
               return false;
            } else if (this.getMemoryUsed() != other.getMemoryUsed()) {
               return false;
            } else if (this.getMemoryRemaining() != other.getMemoryRemaining()) {
               return false;
            } else if (this.getDiskUsed() != other.getDiskUsed()) {
               return false;
            } else if (this.hasOnHeapMemoryUsed() != other.hasOnHeapMemoryUsed()) {
               return false;
            } else if (this.hasOnHeapMemoryUsed() && this.getOnHeapMemoryUsed() != other.getOnHeapMemoryUsed()) {
               return false;
            } else if (this.hasOffHeapMemoryUsed() != other.hasOffHeapMemoryUsed()) {
               return false;
            } else if (this.hasOffHeapMemoryUsed() && this.getOffHeapMemoryUsed() != other.getOffHeapMemoryUsed()) {
               return false;
            } else if (this.hasOnHeapMemoryRemaining() != other.hasOnHeapMemoryRemaining()) {
               return false;
            } else if (this.hasOnHeapMemoryRemaining() && this.getOnHeapMemoryRemaining() != other.getOnHeapMemoryRemaining()) {
               return false;
            } else if (this.hasOffHeapMemoryRemaining() != other.hasOffHeapMemoryRemaining()) {
               return false;
            } else if (this.hasOffHeapMemoryRemaining() && this.getOffHeapMemoryRemaining() != other.getOffHeapMemoryRemaining()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasAddress()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getAddress().hashCode();
            }

            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getMemoryUsed());
            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashLong(this.getMemoryRemaining());
            hash = 37 * hash + 4;
            hash = 53 * hash + Internal.hashLong(this.getDiskUsed());
            if (this.hasOnHeapMemoryUsed()) {
               hash = 37 * hash + 5;
               hash = 53 * hash + Internal.hashLong(this.getOnHeapMemoryUsed());
            }

            if (this.hasOffHeapMemoryUsed()) {
               hash = 37 * hash + 6;
               hash = 53 * hash + Internal.hashLong(this.getOffHeapMemoryUsed());
            }

            if (this.hasOnHeapMemoryRemaining()) {
               hash = 37 * hash + 7;
               hash = 53 * hash + Internal.hashLong(this.getOnHeapMemoryRemaining());
            }

            if (this.hasOffHeapMemoryRemaining()) {
               hash = 37 * hash + 8;
               hash = 53 * hash + Internal.hashLong(this.getOffHeapMemoryRemaining());
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static RDDDataDistribution parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (RDDDataDistribution)PARSER.parseFrom(data);
      }

      public static RDDDataDistribution parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDDataDistribution)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDDataDistribution parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (RDDDataDistribution)PARSER.parseFrom(data);
      }

      public static RDDDataDistribution parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDDataDistribution)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDDataDistribution parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (RDDDataDistribution)PARSER.parseFrom(data);
      }

      public static RDDDataDistribution parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDDataDistribution)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDDataDistribution parseFrom(InputStream input) throws IOException {
         return (RDDDataDistribution)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDDataDistribution parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDDataDistribution)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDDataDistribution parseDelimitedFrom(InputStream input) throws IOException {
         return (RDDDataDistribution)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static RDDDataDistribution parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDDataDistribution)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDDataDistribution parseFrom(CodedInputStream input) throws IOException {
         return (RDDDataDistribution)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDDataDistribution parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDDataDistribution)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(RDDDataDistribution prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static RDDDataDistribution getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public RDDDataDistribution getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", RDDDataDistribution.class.getName());
         DEFAULT_INSTANCE = new RDDDataDistribution();
         PARSER = new AbstractParser() {
            public RDDDataDistribution parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.RDDDataDistribution.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements RDDDataDistributionOrBuilder {
         private int bitField0_;
         private Object address_ = "";
         private long memoryUsed_;
         private long memoryRemaining_;
         private long diskUsed_;
         private long onHeapMemoryUsed_;
         private long offHeapMemoryUsed_;
         private long onHeapMemoryRemaining_;
         private long offHeapMemoryRemaining_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDDataDistribution_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDDataDistribution_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDDataDistribution.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.address_ = "";
            this.memoryUsed_ = 0L;
            this.memoryRemaining_ = 0L;
            this.diskUsed_ = 0L;
            this.onHeapMemoryUsed_ = 0L;
            this.offHeapMemoryUsed_ = 0L;
            this.onHeapMemoryRemaining_ = 0L;
            this.offHeapMemoryRemaining_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDDataDistribution_descriptor;
         }

         public RDDDataDistribution getDefaultInstanceForType() {
            return StoreTypes.RDDDataDistribution.getDefaultInstance();
         }

         public RDDDataDistribution build() {
            RDDDataDistribution result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public RDDDataDistribution buildPartial() {
            RDDDataDistribution result = new RDDDataDistribution(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(RDDDataDistribution result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.address_ = this.address_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.memoryUsed_ = this.memoryUsed_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.memoryRemaining_ = this.memoryRemaining_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.diskUsed_ = this.diskUsed_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.onHeapMemoryUsed_ = this.onHeapMemoryUsed_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.offHeapMemoryUsed_ = this.offHeapMemoryUsed_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.onHeapMemoryRemaining_ = this.onHeapMemoryRemaining_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.offHeapMemoryRemaining_ = this.offHeapMemoryRemaining_;
               to_bitField0_ |= 16;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof RDDDataDistribution) {
               return this.mergeFrom((RDDDataDistribution)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(RDDDataDistribution other) {
            if (other == StoreTypes.RDDDataDistribution.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasAddress()) {
                  this.address_ = other.address_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.getMemoryUsed() != 0L) {
                  this.setMemoryUsed(other.getMemoryUsed());
               }

               if (other.getMemoryRemaining() != 0L) {
                  this.setMemoryRemaining(other.getMemoryRemaining());
               }

               if (other.getDiskUsed() != 0L) {
                  this.setDiskUsed(other.getDiskUsed());
               }

               if (other.hasOnHeapMemoryUsed()) {
                  this.setOnHeapMemoryUsed(other.getOnHeapMemoryUsed());
               }

               if (other.hasOffHeapMemoryUsed()) {
                  this.setOffHeapMemoryUsed(other.getOffHeapMemoryUsed());
               }

               if (other.hasOnHeapMemoryRemaining()) {
                  this.setOnHeapMemoryRemaining(other.getOnHeapMemoryRemaining());
               }

               if (other.hasOffHeapMemoryRemaining()) {
                  this.setOffHeapMemoryRemaining(other.getOffHeapMemoryRemaining());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.address_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.memoryUsed_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.memoryRemaining_ = input.readInt64();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.diskUsed_ = input.readInt64();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.onHeapMemoryUsed_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.offHeapMemoryUsed_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.onHeapMemoryRemaining_ = input.readInt64();
                           this.bitField0_ |= 64;
                           break;
                        case 64:
                           this.offHeapMemoryRemaining_ = input.readInt64();
                           this.bitField0_ |= 128;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasAddress() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getAddress() {
            Object ref = this.address_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.address_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getAddressBytes() {
            Object ref = this.address_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.address_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setAddress(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.address_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearAddress() {
            this.address_ = StoreTypes.RDDDataDistribution.getDefaultInstance().getAddress();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setAddressBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RDDDataDistribution.checkByteStringIsUtf8(value);
               this.address_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public long getMemoryUsed() {
            return this.memoryUsed_;
         }

         public Builder setMemoryUsed(long value) {
            this.memoryUsed_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryUsed() {
            this.bitField0_ &= -3;
            this.memoryUsed_ = 0L;
            this.onChanged();
            return this;
         }

         public long getMemoryRemaining() {
            return this.memoryRemaining_;
         }

         public Builder setMemoryRemaining(long value) {
            this.memoryRemaining_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryRemaining() {
            this.bitField0_ &= -5;
            this.memoryRemaining_ = 0L;
            this.onChanged();
            return this;
         }

         public long getDiskUsed() {
            return this.diskUsed_;
         }

         public Builder setDiskUsed(long value) {
            this.diskUsed_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearDiskUsed() {
            this.bitField0_ &= -9;
            this.diskUsed_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasOnHeapMemoryUsed() {
            return (this.bitField0_ & 16) != 0;
         }

         public long getOnHeapMemoryUsed() {
            return this.onHeapMemoryUsed_;
         }

         public Builder setOnHeapMemoryUsed(long value) {
            this.onHeapMemoryUsed_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearOnHeapMemoryUsed() {
            this.bitField0_ &= -17;
            this.onHeapMemoryUsed_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasOffHeapMemoryUsed() {
            return (this.bitField0_ & 32) != 0;
         }

         public long getOffHeapMemoryUsed() {
            return this.offHeapMemoryUsed_;
         }

         public Builder setOffHeapMemoryUsed(long value) {
            this.offHeapMemoryUsed_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearOffHeapMemoryUsed() {
            this.bitField0_ &= -33;
            this.offHeapMemoryUsed_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasOnHeapMemoryRemaining() {
            return (this.bitField0_ & 64) != 0;
         }

         public long getOnHeapMemoryRemaining() {
            return this.onHeapMemoryRemaining_;
         }

         public Builder setOnHeapMemoryRemaining(long value) {
            this.onHeapMemoryRemaining_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearOnHeapMemoryRemaining() {
            this.bitField0_ &= -65;
            this.onHeapMemoryRemaining_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasOffHeapMemoryRemaining() {
            return (this.bitField0_ & 128) != 0;
         }

         public long getOffHeapMemoryRemaining() {
            return this.offHeapMemoryRemaining_;
         }

         public Builder setOffHeapMemoryRemaining(long value) {
            this.offHeapMemoryRemaining_ = value;
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearOffHeapMemoryRemaining() {
            this.bitField0_ &= -129;
            this.offHeapMemoryRemaining_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class RDDPartitionInfo extends GeneratedMessage implements RDDPartitionInfoOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int BLOCK_NAME_FIELD_NUMBER = 1;
      private volatile Object blockName_ = "";
      public static final int STORAGE_LEVEL_FIELD_NUMBER = 2;
      private volatile Object storageLevel_ = "";
      public static final int MEMORY_USED_FIELD_NUMBER = 3;
      private long memoryUsed_ = 0L;
      public static final int DISK_USED_FIELD_NUMBER = 4;
      private long diskUsed_ = 0L;
      public static final int EXECUTORS_FIELD_NUMBER = 5;
      private LazyStringArrayList executors_ = LazyStringArrayList.emptyList();
      private byte memoizedIsInitialized = -1;
      private static final RDDPartitionInfo DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private RDDPartitionInfo(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private RDDPartitionInfo() {
         this.blockName_ = "";
         this.storageLevel_ = "";
         this.executors_ = LazyStringArrayList.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDPartitionInfo_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDPartitionInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDPartitionInfo.class, Builder.class);
      }

      public boolean hasBlockName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getBlockName() {
         Object ref = this.blockName_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.blockName_ = s;
            return s;
         }
      }

      public ByteString getBlockNameBytes() {
         Object ref = this.blockName_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.blockName_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasStorageLevel() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getStorageLevel() {
         Object ref = this.storageLevel_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.storageLevel_ = s;
            return s;
         }
      }

      public ByteString getStorageLevelBytes() {
         Object ref = this.storageLevel_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.storageLevel_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getMemoryUsed() {
         return this.memoryUsed_;
      }

      public long getDiskUsed() {
         return this.diskUsed_;
      }

      public ProtocolStringList getExecutorsList() {
         return this.executors_;
      }

      public int getExecutorsCount() {
         return this.executors_.size();
      }

      public String getExecutors(int index) {
         return this.executors_.get(index);
      }

      public ByteString getExecutorsBytes(int index) {
         return this.executors_.getByteString(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.blockName_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 2, this.storageLevel_);
         }

         if (this.memoryUsed_ != 0L) {
            output.writeInt64(3, this.memoryUsed_);
         }

         if (this.diskUsed_ != 0L) {
            output.writeInt64(4, this.diskUsed_);
         }

         for(int i = 0; i < this.executors_.size(); ++i) {
            GeneratedMessage.writeString(output, 5, this.executors_.getRaw(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.blockName_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.storageLevel_);
            }

            if (this.memoryUsed_ != 0L) {
               size += CodedOutputStream.computeInt64Size(3, this.memoryUsed_);
            }

            if (this.diskUsed_ != 0L) {
               size += CodedOutputStream.computeInt64Size(4, this.diskUsed_);
            }

            int dataSize = 0;

            for(int i = 0; i < this.executors_.size(); ++i) {
               dataSize += computeStringSizeNoTag(this.executors_.getRaw(i));
            }

            size += dataSize;
            size += 1 * this.getExecutorsList().size();
            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof RDDPartitionInfo)) {
            return super.equals(obj);
         } else {
            RDDPartitionInfo other = (RDDPartitionInfo)obj;
            if (this.hasBlockName() != other.hasBlockName()) {
               return false;
            } else if (this.hasBlockName() && !this.getBlockName().equals(other.getBlockName())) {
               return false;
            } else if (this.hasStorageLevel() != other.hasStorageLevel()) {
               return false;
            } else if (this.hasStorageLevel() && !this.getStorageLevel().equals(other.getStorageLevel())) {
               return false;
            } else if (this.getMemoryUsed() != other.getMemoryUsed()) {
               return false;
            } else if (this.getDiskUsed() != other.getDiskUsed()) {
               return false;
            } else if (!this.getExecutorsList().equals(other.getExecutorsList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasBlockName()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getBlockName().hashCode();
            }

            if (this.hasStorageLevel()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getStorageLevel().hashCode();
            }

            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashLong(this.getMemoryUsed());
            hash = 37 * hash + 4;
            hash = 53 * hash + Internal.hashLong(this.getDiskUsed());
            if (this.getExecutorsCount() > 0) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getExecutorsList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static RDDPartitionInfo parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (RDDPartitionInfo)PARSER.parseFrom(data);
      }

      public static RDDPartitionInfo parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDPartitionInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDPartitionInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (RDDPartitionInfo)PARSER.parseFrom(data);
      }

      public static RDDPartitionInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDPartitionInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDPartitionInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (RDDPartitionInfo)PARSER.parseFrom(data);
      }

      public static RDDPartitionInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDPartitionInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDPartitionInfo parseFrom(InputStream input) throws IOException {
         return (RDDPartitionInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDPartitionInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDPartitionInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDPartitionInfo parseDelimitedFrom(InputStream input) throws IOException {
         return (RDDPartitionInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static RDDPartitionInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDPartitionInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDPartitionInfo parseFrom(CodedInputStream input) throws IOException {
         return (RDDPartitionInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDPartitionInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDPartitionInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(RDDPartitionInfo prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static RDDPartitionInfo getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public RDDPartitionInfo getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", RDDPartitionInfo.class.getName());
         DEFAULT_INSTANCE = new RDDPartitionInfo();
         PARSER = new AbstractParser() {
            public RDDPartitionInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.RDDPartitionInfo.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements RDDPartitionInfoOrBuilder {
         private int bitField0_;
         private Object blockName_ = "";
         private Object storageLevel_ = "";
         private long memoryUsed_;
         private long diskUsed_;
         private LazyStringArrayList executors_ = LazyStringArrayList.emptyList();

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDPartitionInfo_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDPartitionInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDPartitionInfo.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.blockName_ = "";
            this.storageLevel_ = "";
            this.memoryUsed_ = 0L;
            this.diskUsed_ = 0L;
            this.executors_ = LazyStringArrayList.emptyList();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDPartitionInfo_descriptor;
         }

         public RDDPartitionInfo getDefaultInstanceForType() {
            return StoreTypes.RDDPartitionInfo.getDefaultInstance();
         }

         public RDDPartitionInfo build() {
            RDDPartitionInfo result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public RDDPartitionInfo buildPartial() {
            RDDPartitionInfo result = new RDDPartitionInfo(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(RDDPartitionInfo result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.blockName_ = this.blockName_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.storageLevel_ = this.storageLevel_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.memoryUsed_ = this.memoryUsed_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.diskUsed_ = this.diskUsed_;
            }

            if ((from_bitField0_ & 16) != 0) {
               this.executors_.makeImmutable();
               result.executors_ = this.executors_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof RDDPartitionInfo) {
               return this.mergeFrom((RDDPartitionInfo)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(RDDPartitionInfo other) {
            if (other == StoreTypes.RDDPartitionInfo.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasBlockName()) {
                  this.blockName_ = other.blockName_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.hasStorageLevel()) {
                  this.storageLevel_ = other.storageLevel_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.getMemoryUsed() != 0L) {
                  this.setMemoryUsed(other.getMemoryUsed());
               }

               if (other.getDiskUsed() != 0L) {
                  this.setDiskUsed(other.getDiskUsed());
               }

               if (!other.executors_.isEmpty()) {
                  if (this.executors_.isEmpty()) {
                     this.executors_ = other.executors_;
                     this.bitField0_ |= 16;
                  } else {
                     this.ensureExecutorsIsMutable();
                     this.executors_.addAll(other.executors_);
                  }

                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.blockName_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.storageLevel_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.memoryUsed_ = input.readInt64();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.diskUsed_ = input.readInt64();
                           this.bitField0_ |= 8;
                           break;
                        case 42:
                           String s = input.readStringRequireUtf8();
                           this.ensureExecutorsIsMutable();
                           this.executors_.add(s);
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasBlockName() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getBlockName() {
            Object ref = this.blockName_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.blockName_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getBlockNameBytes() {
            Object ref = this.blockName_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.blockName_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setBlockName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.blockName_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearBlockName() {
            this.blockName_ = StoreTypes.RDDPartitionInfo.getDefaultInstance().getBlockName();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setBlockNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RDDPartitionInfo.checkByteStringIsUtf8(value);
               this.blockName_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public boolean hasStorageLevel() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getStorageLevel() {
            Object ref = this.storageLevel_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.storageLevel_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getStorageLevelBytes() {
            Object ref = this.storageLevel_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.storageLevel_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setStorageLevel(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.storageLevel_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearStorageLevel() {
            this.storageLevel_ = StoreTypes.RDDPartitionInfo.getDefaultInstance().getStorageLevel();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setStorageLevelBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RDDPartitionInfo.checkByteStringIsUtf8(value);
               this.storageLevel_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public long getMemoryUsed() {
            return this.memoryUsed_;
         }

         public Builder setMemoryUsed(long value) {
            this.memoryUsed_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryUsed() {
            this.bitField0_ &= -5;
            this.memoryUsed_ = 0L;
            this.onChanged();
            return this;
         }

         public long getDiskUsed() {
            return this.diskUsed_;
         }

         public Builder setDiskUsed(long value) {
            this.diskUsed_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearDiskUsed() {
            this.bitField0_ &= -9;
            this.diskUsed_ = 0L;
            this.onChanged();
            return this;
         }

         private void ensureExecutorsIsMutable() {
            if (!this.executors_.isModifiable()) {
               this.executors_ = new LazyStringArrayList(this.executors_);
            }

            this.bitField0_ |= 16;
         }

         public ProtocolStringList getExecutorsList() {
            this.executors_.makeImmutable();
            return this.executors_;
         }

         public int getExecutorsCount() {
            return this.executors_.size();
         }

         public String getExecutors(int index) {
            return this.executors_.get(index);
         }

         public ByteString getExecutorsBytes(int index) {
            return this.executors_.getByteString(index);
         }

         public Builder setExecutors(int index, String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.ensureExecutorsIsMutable();
               this.executors_.set(index, value);
               this.bitField0_ |= 16;
               this.onChanged();
               return this;
            }
         }

         public Builder addExecutors(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.ensureExecutorsIsMutable();
               this.executors_.add(value);
               this.bitField0_ |= 16;
               this.onChanged();
               return this;
            }
         }

         public Builder addAllExecutors(Iterable values) {
            this.ensureExecutorsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.executors_);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearExecutors() {
            this.executors_ = LazyStringArrayList.emptyList();
            this.bitField0_ &= -17;
            this.onChanged();
            return this;
         }

         public Builder addExecutorsBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RDDPartitionInfo.checkByteStringIsUtf8(value);
               this.ensureExecutorsIsMutable();
               this.executors_.add(value);
               this.bitField0_ |= 16;
               this.onChanged();
               return this;
            }
         }
      }
   }

   public static final class RDDStorageInfo extends GeneratedMessage implements RDDStorageInfoOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_ = 0;
      public static final int NAME_FIELD_NUMBER = 2;
      private volatile Object name_ = "";
      public static final int NUM_PARTITIONS_FIELD_NUMBER = 3;
      private int numPartitions_ = 0;
      public static final int NUM_CACHED_PARTITIONS_FIELD_NUMBER = 4;
      private int numCachedPartitions_ = 0;
      public static final int STORAGE_LEVEL_FIELD_NUMBER = 5;
      private volatile Object storageLevel_ = "";
      public static final int MEMORY_USED_FIELD_NUMBER = 6;
      private long memoryUsed_ = 0L;
      public static final int DISK_USED_FIELD_NUMBER = 7;
      private long diskUsed_ = 0L;
      public static final int DATA_DISTRIBUTION_FIELD_NUMBER = 8;
      private List dataDistribution_;
      public static final int PARTITIONS_FIELD_NUMBER = 9;
      private List partitions_;
      private byte memoizedIsInitialized = -1;
      private static final RDDStorageInfo DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private RDDStorageInfo(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private RDDStorageInfo() {
         this.name_ = "";
         this.storageLevel_ = "";
         this.dataDistribution_ = Collections.emptyList();
         this.partitions_ = Collections.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDStorageInfo_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDStorageInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDStorageInfo.class, Builder.class);
      }

      public int getId() {
         return this.id_;
      }

      public boolean hasName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public int getNumPartitions() {
         return this.numPartitions_;
      }

      public int getNumCachedPartitions() {
         return this.numCachedPartitions_;
      }

      public boolean hasStorageLevel() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getStorageLevel() {
         Object ref = this.storageLevel_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.storageLevel_ = s;
            return s;
         }
      }

      public ByteString getStorageLevelBytes() {
         Object ref = this.storageLevel_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.storageLevel_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getMemoryUsed() {
         return this.memoryUsed_;
      }

      public long getDiskUsed() {
         return this.diskUsed_;
      }

      public List getDataDistributionList() {
         return this.dataDistribution_;
      }

      public List getDataDistributionOrBuilderList() {
         return this.dataDistribution_;
      }

      public int getDataDistributionCount() {
         return this.dataDistribution_.size();
      }

      public RDDDataDistribution getDataDistribution(int index) {
         return (RDDDataDistribution)this.dataDistribution_.get(index);
      }

      public RDDDataDistributionOrBuilder getDataDistributionOrBuilder(int index) {
         return (RDDDataDistributionOrBuilder)this.dataDistribution_.get(index);
      }

      public List getPartitionsList() {
         return this.partitions_;
      }

      public List getPartitionsOrBuilderList() {
         return this.partitions_;
      }

      public int getPartitionsCount() {
         return this.partitions_.size();
      }

      public RDDPartitionInfo getPartitions(int index) {
         return (RDDPartitionInfo)this.partitions_.get(index);
      }

      public RDDPartitionInfoOrBuilder getPartitionsOrBuilder(int index) {
         return (RDDPartitionInfoOrBuilder)this.partitions_.get(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.id_ != 0) {
            output.writeInt32(1, this.id_);
         }

         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 2, this.name_);
         }

         if (this.numPartitions_ != 0) {
            output.writeInt32(3, this.numPartitions_);
         }

         if (this.numCachedPartitions_ != 0) {
            output.writeInt32(4, this.numCachedPartitions_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 5, this.storageLevel_);
         }

         if (this.memoryUsed_ != 0L) {
            output.writeInt64(6, this.memoryUsed_);
         }

         if (this.diskUsed_ != 0L) {
            output.writeInt64(7, this.diskUsed_);
         }

         for(int i = 0; i < this.dataDistribution_.size(); ++i) {
            output.writeMessage(8, (MessageLite)this.dataDistribution_.get(i));
         }

         for(int i = 0; i < this.partitions_.size(); ++i) {
            output.writeMessage(9, (MessageLite)this.partitions_.get(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.id_ != 0) {
               size += CodedOutputStream.computeInt32Size(1, this.id_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.name_);
            }

            if (this.numPartitions_ != 0) {
               size += CodedOutputStream.computeInt32Size(3, this.numPartitions_);
            }

            if (this.numCachedPartitions_ != 0) {
               size += CodedOutputStream.computeInt32Size(4, this.numCachedPartitions_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(5, this.storageLevel_);
            }

            if (this.memoryUsed_ != 0L) {
               size += CodedOutputStream.computeInt64Size(6, this.memoryUsed_);
            }

            if (this.diskUsed_ != 0L) {
               size += CodedOutputStream.computeInt64Size(7, this.diskUsed_);
            }

            for(int i = 0; i < this.dataDistribution_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(8, (MessageLite)this.dataDistribution_.get(i));
            }

            for(int i = 0; i < this.partitions_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(9, (MessageLite)this.partitions_.get(i));
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof RDDStorageInfo)) {
            return super.equals(obj);
         } else {
            RDDStorageInfo other = (RDDStorageInfo)obj;
            if (this.getId() != other.getId()) {
               return false;
            } else if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.getNumPartitions() != other.getNumPartitions()) {
               return false;
            } else if (this.getNumCachedPartitions() != other.getNumCachedPartitions()) {
               return false;
            } else if (this.hasStorageLevel() != other.hasStorageLevel()) {
               return false;
            } else if (this.hasStorageLevel() && !this.getStorageLevel().equals(other.getStorageLevel())) {
               return false;
            } else if (this.getMemoryUsed() != other.getMemoryUsed()) {
               return false;
            } else if (this.getDiskUsed() != other.getDiskUsed()) {
               return false;
            } else if (!this.getDataDistributionList().equals(other.getDataDistributionList())) {
               return false;
            } else if (!this.getPartitionsList().equals(other.getPartitionsList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + this.getId();
            if (this.hasName()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getName().hashCode();
            }

            hash = 37 * hash + 3;
            hash = 53 * hash + this.getNumPartitions();
            hash = 37 * hash + 4;
            hash = 53 * hash + this.getNumCachedPartitions();
            if (this.hasStorageLevel()) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getStorageLevel().hashCode();
            }

            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(this.getMemoryUsed());
            hash = 37 * hash + 7;
            hash = 53 * hash + Internal.hashLong(this.getDiskUsed());
            if (this.getDataDistributionCount() > 0) {
               hash = 37 * hash + 8;
               hash = 53 * hash + this.getDataDistributionList().hashCode();
            }

            if (this.getPartitionsCount() > 0) {
               hash = 37 * hash + 9;
               hash = 53 * hash + this.getPartitionsList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static RDDStorageInfo parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (RDDStorageInfo)PARSER.parseFrom(data);
      }

      public static RDDStorageInfo parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDStorageInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDStorageInfo parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (RDDStorageInfo)PARSER.parseFrom(data);
      }

      public static RDDStorageInfo parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDStorageInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDStorageInfo parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (RDDStorageInfo)PARSER.parseFrom(data);
      }

      public static RDDStorageInfo parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDStorageInfo)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDStorageInfo parseFrom(InputStream input) throws IOException {
         return (RDDStorageInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDStorageInfo parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDStorageInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDStorageInfo parseDelimitedFrom(InputStream input) throws IOException {
         return (RDDStorageInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static RDDStorageInfo parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDStorageInfo)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDStorageInfo parseFrom(CodedInputStream input) throws IOException {
         return (RDDStorageInfo)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDStorageInfo parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDStorageInfo)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(RDDStorageInfo prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static RDDStorageInfo getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public RDDStorageInfo getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", RDDStorageInfo.class.getName());
         DEFAULT_INSTANCE = new RDDStorageInfo();
         PARSER = new AbstractParser() {
            public RDDStorageInfo parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.RDDStorageInfo.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements RDDStorageInfoOrBuilder {
         private int bitField0_;
         private int id_;
         private Object name_ = "";
         private int numPartitions_;
         private int numCachedPartitions_;
         private Object storageLevel_ = "";
         private long memoryUsed_;
         private long diskUsed_;
         private List dataDistribution_ = Collections.emptyList();
         private RepeatedFieldBuilder dataDistributionBuilder_;
         private List partitions_ = Collections.emptyList();
         private RepeatedFieldBuilder partitionsBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDStorageInfo_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDStorageInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDStorageInfo.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.id_ = 0;
            this.name_ = "";
            this.numPartitions_ = 0;
            this.numCachedPartitions_ = 0;
            this.storageLevel_ = "";
            this.memoryUsed_ = 0L;
            this.diskUsed_ = 0L;
            if (this.dataDistributionBuilder_ == null) {
               this.dataDistribution_ = Collections.emptyList();
            } else {
               this.dataDistribution_ = null;
               this.dataDistributionBuilder_.clear();
            }

            this.bitField0_ &= -129;
            if (this.partitionsBuilder_ == null) {
               this.partitions_ = Collections.emptyList();
            } else {
               this.partitions_ = null;
               this.partitionsBuilder_.clear();
            }

            this.bitField0_ &= -257;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDStorageInfo_descriptor;
         }

         public RDDStorageInfo getDefaultInstanceForType() {
            return StoreTypes.RDDStorageInfo.getDefaultInstance();
         }

         public RDDStorageInfo build() {
            RDDStorageInfo result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public RDDStorageInfo buildPartial() {
            RDDStorageInfo result = new RDDStorageInfo(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(RDDStorageInfo result) {
            if (this.dataDistributionBuilder_ == null) {
               if ((this.bitField0_ & 128) != 0) {
                  this.dataDistribution_ = Collections.unmodifiableList(this.dataDistribution_);
                  this.bitField0_ &= -129;
               }

               result.dataDistribution_ = this.dataDistribution_;
            } else {
               result.dataDistribution_ = this.dataDistributionBuilder_.build();
            }

            if (this.partitionsBuilder_ == null) {
               if ((this.bitField0_ & 256) != 0) {
                  this.partitions_ = Collections.unmodifiableList(this.partitions_);
                  this.bitField0_ &= -257;
               }

               result.partitions_ = this.partitions_;
            } else {
               result.partitions_ = this.partitionsBuilder_.build();
            }

         }

         private void buildPartial0(RDDStorageInfo result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.id_ = this.id_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 2) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.numPartitions_ = this.numPartitions_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.numCachedPartitions_ = this.numCachedPartitions_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.storageLevel_ = this.storageLevel_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.memoryUsed_ = this.memoryUsed_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.diskUsed_ = this.diskUsed_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof RDDStorageInfo) {
               return this.mergeFrom((RDDStorageInfo)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(RDDStorageInfo other) {
            if (other == StoreTypes.RDDStorageInfo.getDefaultInstance()) {
               return this;
            } else {
               if (other.getId() != 0) {
                  this.setId(other.getId());
               }

               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.getNumPartitions() != 0) {
                  this.setNumPartitions(other.getNumPartitions());
               }

               if (other.getNumCachedPartitions() != 0) {
                  this.setNumCachedPartitions(other.getNumCachedPartitions());
               }

               if (other.hasStorageLevel()) {
                  this.storageLevel_ = other.storageLevel_;
                  this.bitField0_ |= 16;
                  this.onChanged();
               }

               if (other.getMemoryUsed() != 0L) {
                  this.setMemoryUsed(other.getMemoryUsed());
               }

               if (other.getDiskUsed() != 0L) {
                  this.setDiskUsed(other.getDiskUsed());
               }

               if (this.dataDistributionBuilder_ == null) {
                  if (!other.dataDistribution_.isEmpty()) {
                     if (this.dataDistribution_.isEmpty()) {
                        this.dataDistribution_ = other.dataDistribution_;
                        this.bitField0_ &= -129;
                     } else {
                        this.ensureDataDistributionIsMutable();
                        this.dataDistribution_.addAll(other.dataDistribution_);
                     }

                     this.onChanged();
                  }
               } else if (!other.dataDistribution_.isEmpty()) {
                  if (this.dataDistributionBuilder_.isEmpty()) {
                     this.dataDistributionBuilder_.dispose();
                     this.dataDistributionBuilder_ = null;
                     this.dataDistribution_ = other.dataDistribution_;
                     this.bitField0_ &= -129;
                     this.dataDistributionBuilder_ = StoreTypes.RDDStorageInfo.alwaysUseFieldBuilders ? this.getDataDistributionFieldBuilder() : null;
                  } else {
                     this.dataDistributionBuilder_.addAllMessages(other.dataDistribution_);
                  }
               }

               if (this.partitionsBuilder_ == null) {
                  if (!other.partitions_.isEmpty()) {
                     if (this.partitions_.isEmpty()) {
                        this.partitions_ = other.partitions_;
                        this.bitField0_ &= -257;
                     } else {
                        this.ensurePartitionsIsMutable();
                        this.partitions_.addAll(other.partitions_);
                     }

                     this.onChanged();
                  }
               } else if (!other.partitions_.isEmpty()) {
                  if (this.partitionsBuilder_.isEmpty()) {
                     this.partitionsBuilder_.dispose();
                     this.partitionsBuilder_ = null;
                     this.partitions_ = other.partitions_;
                     this.bitField0_ &= -257;
                     this.partitionsBuilder_ = StoreTypes.RDDStorageInfo.alwaysUseFieldBuilders ? this.getPartitionsFieldBuilder() : null;
                  } else {
                     this.partitionsBuilder_.addAllMessages(other.partitions_);
                  }
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.id_ = input.readInt32();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.numPartitions_ = input.readInt32();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.numCachedPartitions_ = input.readInt32();
                           this.bitField0_ |= 8;
                           break;
                        case 42:
                           this.storageLevel_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.memoryUsed_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.diskUsed_ = input.readInt64();
                           this.bitField0_ |= 64;
                           break;
                        case 66:
                           RDDDataDistribution m = (RDDDataDistribution)input.readMessage(StoreTypes.RDDDataDistribution.parser(), extensionRegistry);
                           if (this.dataDistributionBuilder_ == null) {
                              this.ensureDataDistributionIsMutable();
                              this.dataDistribution_.add(m);
                           } else {
                              this.dataDistributionBuilder_.addMessage(m);
                           }
                           break;
                        case 74:
                           RDDPartitionInfo m = (RDDPartitionInfo)input.readMessage(StoreTypes.RDDPartitionInfo.parser(), extensionRegistry);
                           if (this.partitionsBuilder_ == null) {
                              this.ensurePartitionsIsMutable();
                              this.partitions_.add(m);
                           } else {
                              this.partitionsBuilder_.addMessage(m);
                           }
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public int getId() {
            return this.id_;
         }

         public Builder setId(int value) {
            this.id_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearId() {
            this.bitField0_ &= -2;
            this.id_ = 0;
            this.onChanged();
            return this;
         }

         public boolean hasName() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.RDDStorageInfo.getDefaultInstance().getName();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RDDStorageInfo.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public int getNumPartitions() {
            return this.numPartitions_;
         }

         public Builder setNumPartitions(int value) {
            this.numPartitions_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearNumPartitions() {
            this.bitField0_ &= -5;
            this.numPartitions_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumCachedPartitions() {
            return this.numCachedPartitions_;
         }

         public Builder setNumCachedPartitions(int value) {
            this.numCachedPartitions_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearNumCachedPartitions() {
            this.bitField0_ &= -9;
            this.numCachedPartitions_ = 0;
            this.onChanged();
            return this;
         }

         public boolean hasStorageLevel() {
            return (this.bitField0_ & 16) != 0;
         }

         public String getStorageLevel() {
            Object ref = this.storageLevel_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.storageLevel_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getStorageLevelBytes() {
            Object ref = this.storageLevel_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.storageLevel_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setStorageLevel(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.storageLevel_ = value;
               this.bitField0_ |= 16;
               this.onChanged();
               return this;
            }
         }

         public Builder clearStorageLevel() {
            this.storageLevel_ = StoreTypes.RDDStorageInfo.getDefaultInstance().getStorageLevel();
            this.bitField0_ &= -17;
            this.onChanged();
            return this;
         }

         public Builder setStorageLevelBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RDDStorageInfo.checkByteStringIsUtf8(value);
               this.storageLevel_ = value;
               this.bitField0_ |= 16;
               this.onChanged();
               return this;
            }
         }

         public long getMemoryUsed() {
            return this.memoryUsed_;
         }

         public Builder setMemoryUsed(long value) {
            this.memoryUsed_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryUsed() {
            this.bitField0_ &= -33;
            this.memoryUsed_ = 0L;
            this.onChanged();
            return this;
         }

         public long getDiskUsed() {
            return this.diskUsed_;
         }

         public Builder setDiskUsed(long value) {
            this.diskUsed_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearDiskUsed() {
            this.bitField0_ &= -65;
            this.diskUsed_ = 0L;
            this.onChanged();
            return this;
         }

         private void ensureDataDistributionIsMutable() {
            if ((this.bitField0_ & 128) == 0) {
               this.dataDistribution_ = new ArrayList(this.dataDistribution_);
               this.bitField0_ |= 128;
            }

         }

         public List getDataDistributionList() {
            return this.dataDistributionBuilder_ == null ? Collections.unmodifiableList(this.dataDistribution_) : this.dataDistributionBuilder_.getMessageList();
         }

         public int getDataDistributionCount() {
            return this.dataDistributionBuilder_ == null ? this.dataDistribution_.size() : this.dataDistributionBuilder_.getCount();
         }

         public RDDDataDistribution getDataDistribution(int index) {
            return this.dataDistributionBuilder_ == null ? (RDDDataDistribution)this.dataDistribution_.get(index) : (RDDDataDistribution)this.dataDistributionBuilder_.getMessage(index);
         }

         public Builder setDataDistribution(int index, RDDDataDistribution value) {
            if (this.dataDistributionBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureDataDistributionIsMutable();
               this.dataDistribution_.set(index, value);
               this.onChanged();
            } else {
               this.dataDistributionBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setDataDistribution(int index, RDDDataDistribution.Builder builderForValue) {
            if (this.dataDistributionBuilder_ == null) {
               this.ensureDataDistributionIsMutable();
               this.dataDistribution_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.dataDistributionBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addDataDistribution(RDDDataDistribution value) {
            if (this.dataDistributionBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureDataDistributionIsMutable();
               this.dataDistribution_.add(value);
               this.onChanged();
            } else {
               this.dataDistributionBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addDataDistribution(int index, RDDDataDistribution value) {
            if (this.dataDistributionBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureDataDistributionIsMutable();
               this.dataDistribution_.add(index, value);
               this.onChanged();
            } else {
               this.dataDistributionBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addDataDistribution(RDDDataDistribution.Builder builderForValue) {
            if (this.dataDistributionBuilder_ == null) {
               this.ensureDataDistributionIsMutable();
               this.dataDistribution_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.dataDistributionBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addDataDistribution(int index, RDDDataDistribution.Builder builderForValue) {
            if (this.dataDistributionBuilder_ == null) {
               this.ensureDataDistributionIsMutable();
               this.dataDistribution_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.dataDistributionBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllDataDistribution(Iterable values) {
            if (this.dataDistributionBuilder_ == null) {
               this.ensureDataDistributionIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.dataDistribution_);
               this.onChanged();
            } else {
               this.dataDistributionBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearDataDistribution() {
            if (this.dataDistributionBuilder_ == null) {
               this.dataDistribution_ = Collections.emptyList();
               this.bitField0_ &= -129;
               this.onChanged();
            } else {
               this.dataDistributionBuilder_.clear();
            }

            return this;
         }

         public Builder removeDataDistribution(int index) {
            if (this.dataDistributionBuilder_ == null) {
               this.ensureDataDistributionIsMutable();
               this.dataDistribution_.remove(index);
               this.onChanged();
            } else {
               this.dataDistributionBuilder_.remove(index);
            }

            return this;
         }

         public RDDDataDistribution.Builder getDataDistributionBuilder(int index) {
            return (RDDDataDistribution.Builder)this.getDataDistributionFieldBuilder().getBuilder(index);
         }

         public RDDDataDistributionOrBuilder getDataDistributionOrBuilder(int index) {
            return this.dataDistributionBuilder_ == null ? (RDDDataDistributionOrBuilder)this.dataDistribution_.get(index) : (RDDDataDistributionOrBuilder)this.dataDistributionBuilder_.getMessageOrBuilder(index);
         }

         public List getDataDistributionOrBuilderList() {
            return this.dataDistributionBuilder_ != null ? this.dataDistributionBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.dataDistribution_);
         }

         public RDDDataDistribution.Builder addDataDistributionBuilder() {
            return (RDDDataDistribution.Builder)this.getDataDistributionFieldBuilder().addBuilder(StoreTypes.RDDDataDistribution.getDefaultInstance());
         }

         public RDDDataDistribution.Builder addDataDistributionBuilder(int index) {
            return (RDDDataDistribution.Builder)this.getDataDistributionFieldBuilder().addBuilder(index, StoreTypes.RDDDataDistribution.getDefaultInstance());
         }

         public List getDataDistributionBuilderList() {
            return this.getDataDistributionFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getDataDistributionFieldBuilder() {
            if (this.dataDistributionBuilder_ == null) {
               this.dataDistributionBuilder_ = new RepeatedFieldBuilder(this.dataDistribution_, (this.bitField0_ & 128) != 0, this.getParentForChildren(), this.isClean());
               this.dataDistribution_ = null;
            }

            return this.dataDistributionBuilder_;
         }

         private void ensurePartitionsIsMutable() {
            if ((this.bitField0_ & 256) == 0) {
               this.partitions_ = new ArrayList(this.partitions_);
               this.bitField0_ |= 256;
            }

         }

         public List getPartitionsList() {
            return this.partitionsBuilder_ == null ? Collections.unmodifiableList(this.partitions_) : this.partitionsBuilder_.getMessageList();
         }

         public int getPartitionsCount() {
            return this.partitionsBuilder_ == null ? this.partitions_.size() : this.partitionsBuilder_.getCount();
         }

         public RDDPartitionInfo getPartitions(int index) {
            return this.partitionsBuilder_ == null ? (RDDPartitionInfo)this.partitions_.get(index) : (RDDPartitionInfo)this.partitionsBuilder_.getMessage(index);
         }

         public Builder setPartitions(int index, RDDPartitionInfo value) {
            if (this.partitionsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensurePartitionsIsMutable();
               this.partitions_.set(index, value);
               this.onChanged();
            } else {
               this.partitionsBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setPartitions(int index, RDDPartitionInfo.Builder builderForValue) {
            if (this.partitionsBuilder_ == null) {
               this.ensurePartitionsIsMutable();
               this.partitions_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.partitionsBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addPartitions(RDDPartitionInfo value) {
            if (this.partitionsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensurePartitionsIsMutable();
               this.partitions_.add(value);
               this.onChanged();
            } else {
               this.partitionsBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addPartitions(int index, RDDPartitionInfo value) {
            if (this.partitionsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensurePartitionsIsMutable();
               this.partitions_.add(index, value);
               this.onChanged();
            } else {
               this.partitionsBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addPartitions(RDDPartitionInfo.Builder builderForValue) {
            if (this.partitionsBuilder_ == null) {
               this.ensurePartitionsIsMutable();
               this.partitions_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.partitionsBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addPartitions(int index, RDDPartitionInfo.Builder builderForValue) {
            if (this.partitionsBuilder_ == null) {
               this.ensurePartitionsIsMutable();
               this.partitions_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.partitionsBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllPartitions(Iterable values) {
            if (this.partitionsBuilder_ == null) {
               this.ensurePartitionsIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.partitions_);
               this.onChanged();
            } else {
               this.partitionsBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearPartitions() {
            if (this.partitionsBuilder_ == null) {
               this.partitions_ = Collections.emptyList();
               this.bitField0_ &= -257;
               this.onChanged();
            } else {
               this.partitionsBuilder_.clear();
            }

            return this;
         }

         public Builder removePartitions(int index) {
            if (this.partitionsBuilder_ == null) {
               this.ensurePartitionsIsMutable();
               this.partitions_.remove(index);
               this.onChanged();
            } else {
               this.partitionsBuilder_.remove(index);
            }

            return this;
         }

         public RDDPartitionInfo.Builder getPartitionsBuilder(int index) {
            return (RDDPartitionInfo.Builder)this.getPartitionsFieldBuilder().getBuilder(index);
         }

         public RDDPartitionInfoOrBuilder getPartitionsOrBuilder(int index) {
            return this.partitionsBuilder_ == null ? (RDDPartitionInfoOrBuilder)this.partitions_.get(index) : (RDDPartitionInfoOrBuilder)this.partitionsBuilder_.getMessageOrBuilder(index);
         }

         public List getPartitionsOrBuilderList() {
            return this.partitionsBuilder_ != null ? this.partitionsBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.partitions_);
         }

         public RDDPartitionInfo.Builder addPartitionsBuilder() {
            return (RDDPartitionInfo.Builder)this.getPartitionsFieldBuilder().addBuilder(StoreTypes.RDDPartitionInfo.getDefaultInstance());
         }

         public RDDPartitionInfo.Builder addPartitionsBuilder(int index) {
            return (RDDPartitionInfo.Builder)this.getPartitionsFieldBuilder().addBuilder(index, StoreTypes.RDDPartitionInfo.getDefaultInstance());
         }

         public List getPartitionsBuilderList() {
            return this.getPartitionsFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getPartitionsFieldBuilder() {
            if (this.partitionsBuilder_ == null) {
               this.partitionsBuilder_ = new RepeatedFieldBuilder(this.partitions_, (this.bitField0_ & 256) != 0, this.getParentForChildren(), this.isClean());
               this.partitions_ = null;
            }

            return this.partitionsBuilder_;
         }
      }
   }

   public static final class RDDStorageInfoWrapper extends GeneratedMessage implements RDDStorageInfoWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int INFO_FIELD_NUMBER = 1;
      private RDDStorageInfo info_;
      private byte memoizedIsInitialized = -1;
      private static final RDDStorageInfoWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private RDDStorageInfoWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private RDDStorageInfoWrapper() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDStorageInfoWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDStorageInfoWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDStorageInfoWrapper.class, Builder.class);
      }

      public boolean hasInfo() {
         return (this.bitField0_ & 1) != 0;
      }

      public RDDStorageInfo getInfo() {
         return this.info_ == null ? StoreTypes.RDDStorageInfo.getDefaultInstance() : this.info_;
      }

      public RDDStorageInfoOrBuilder getInfoOrBuilder() {
         return this.info_ == null ? StoreTypes.RDDStorageInfo.getDefaultInstance() : this.info_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(1, this.getInfo());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(1, this.getInfo());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof RDDStorageInfoWrapper)) {
            return super.equals(obj);
         } else {
            RDDStorageInfoWrapper other = (RDDStorageInfoWrapper)obj;
            if (this.hasInfo() != other.hasInfo()) {
               return false;
            } else if (this.hasInfo() && !this.getInfo().equals(other.getInfo())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasInfo()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getInfo().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static RDDStorageInfoWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (RDDStorageInfoWrapper)PARSER.parseFrom(data);
      }

      public static RDDStorageInfoWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDStorageInfoWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDStorageInfoWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (RDDStorageInfoWrapper)PARSER.parseFrom(data);
      }

      public static RDDStorageInfoWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDStorageInfoWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDStorageInfoWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (RDDStorageInfoWrapper)PARSER.parseFrom(data);
      }

      public static RDDStorageInfoWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDStorageInfoWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDStorageInfoWrapper parseFrom(InputStream input) throws IOException {
         return (RDDStorageInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDStorageInfoWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDStorageInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDStorageInfoWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (RDDStorageInfoWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static RDDStorageInfoWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDStorageInfoWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDStorageInfoWrapper parseFrom(CodedInputStream input) throws IOException {
         return (RDDStorageInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDStorageInfoWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDStorageInfoWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(RDDStorageInfoWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static RDDStorageInfoWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public RDDStorageInfoWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", RDDStorageInfoWrapper.class.getName());
         DEFAULT_INSTANCE = new RDDStorageInfoWrapper();
         PARSER = new AbstractParser() {
            public RDDStorageInfoWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.RDDStorageInfoWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements RDDStorageInfoWrapperOrBuilder {
         private int bitField0_;
         private RDDStorageInfo info_;
         private SingleFieldBuilder infoBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDStorageInfoWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDStorageInfoWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDStorageInfoWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.RDDStorageInfoWrapper.alwaysUseFieldBuilders) {
               this.getInfoFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDStorageInfoWrapper_descriptor;
         }

         public RDDStorageInfoWrapper getDefaultInstanceForType() {
            return StoreTypes.RDDStorageInfoWrapper.getDefaultInstance();
         }

         public RDDStorageInfoWrapper build() {
            RDDStorageInfoWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public RDDStorageInfoWrapper buildPartial() {
            RDDStorageInfoWrapper result = new RDDStorageInfoWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(RDDStorageInfoWrapper result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.info_ = this.infoBuilder_ == null ? this.info_ : (RDDStorageInfo)this.infoBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof RDDStorageInfoWrapper) {
               return this.mergeFrom((RDDStorageInfoWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(RDDStorageInfoWrapper other) {
            if (other == StoreTypes.RDDStorageInfoWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasInfo()) {
                  this.mergeInfo(other.getInfo());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           input.readMessage((MessageLite.Builder)this.getInfoFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasInfo() {
            return (this.bitField0_ & 1) != 0;
         }

         public RDDStorageInfo getInfo() {
            if (this.infoBuilder_ == null) {
               return this.info_ == null ? StoreTypes.RDDStorageInfo.getDefaultInstance() : this.info_;
            } else {
               return (RDDStorageInfo)this.infoBuilder_.getMessage();
            }
         }

         public Builder setInfo(RDDStorageInfo value) {
            if (this.infoBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.info_ = value;
            } else {
               this.infoBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder setInfo(RDDStorageInfo.Builder builderForValue) {
            if (this.infoBuilder_ == null) {
               this.info_ = builderForValue.build();
            } else {
               this.infoBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder mergeInfo(RDDStorageInfo value) {
            if (this.infoBuilder_ == null) {
               if ((this.bitField0_ & 1) != 0 && this.info_ != null && this.info_ != StoreTypes.RDDStorageInfo.getDefaultInstance()) {
                  this.getInfoBuilder().mergeFrom(value);
               } else {
                  this.info_ = value;
               }
            } else {
               this.infoBuilder_.mergeFrom(value);
            }

            if (this.info_ != null) {
               this.bitField0_ |= 1;
               this.onChanged();
            }

            return this;
         }

         public Builder clearInfo() {
            this.bitField0_ &= -2;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public RDDStorageInfo.Builder getInfoBuilder() {
            this.bitField0_ |= 1;
            this.onChanged();
            return (RDDStorageInfo.Builder)this.getInfoFieldBuilder().getBuilder();
         }

         public RDDStorageInfoOrBuilder getInfoOrBuilder() {
            if (this.infoBuilder_ != null) {
               return (RDDStorageInfoOrBuilder)this.infoBuilder_.getMessageOrBuilder();
            } else {
               return this.info_ == null ? StoreTypes.RDDStorageInfo.getDefaultInstance() : this.info_;
            }
         }

         private SingleFieldBuilder getInfoFieldBuilder() {
            if (this.infoBuilder_ == null) {
               this.infoBuilder_ = new SingleFieldBuilder(this.getInfo(), this.getParentForChildren(), this.isClean());
               this.info_ = null;
            }

            return this.infoBuilder_;
         }
      }
   }

   public static final class ResourceProfileWrapper extends GeneratedMessage implements ResourceProfileWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int RP_INFO_FIELD_NUMBER = 1;
      private ResourceProfileInfo rpInfo_;
      private byte memoizedIsInitialized = -1;
      private static final ResourceProfileWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ResourceProfileWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ResourceProfileWrapper() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ResourceProfileWrapper.class, Builder.class);
      }

      public boolean hasRpInfo() {
         return (this.bitField0_ & 1) != 0;
      }

      public ResourceProfileInfo getRpInfo() {
         return this.rpInfo_ == null ? StoreTypes.ResourceProfileInfo.getDefaultInstance() : this.rpInfo_;
      }

      public ResourceProfileInfoOrBuilder getRpInfoOrBuilder() {
         return this.rpInfo_ == null ? StoreTypes.ResourceProfileInfo.getDefaultInstance() : this.rpInfo_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(1, this.getRpInfo());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(1, this.getRpInfo());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ResourceProfileWrapper)) {
            return super.equals(obj);
         } else {
            ResourceProfileWrapper other = (ResourceProfileWrapper)obj;
            if (this.hasRpInfo() != other.hasRpInfo()) {
               return false;
            } else if (this.hasRpInfo() && !this.getRpInfo().equals(other.getRpInfo())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasRpInfo()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getRpInfo().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ResourceProfileWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ResourceProfileWrapper)PARSER.parseFrom(data);
      }

      public static ResourceProfileWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ResourceProfileWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ResourceProfileWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ResourceProfileWrapper)PARSER.parseFrom(data);
      }

      public static ResourceProfileWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ResourceProfileWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ResourceProfileWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ResourceProfileWrapper)PARSER.parseFrom(data);
      }

      public static ResourceProfileWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ResourceProfileWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ResourceProfileWrapper parseFrom(InputStream input) throws IOException {
         return (ResourceProfileWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ResourceProfileWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ResourceProfileWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ResourceProfileWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (ResourceProfileWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ResourceProfileWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ResourceProfileWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ResourceProfileWrapper parseFrom(CodedInputStream input) throws IOException {
         return (ResourceProfileWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ResourceProfileWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ResourceProfileWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ResourceProfileWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ResourceProfileWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ResourceProfileWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ResourceProfileWrapper.class.getName());
         DEFAULT_INSTANCE = new ResourceProfileWrapper();
         PARSER = new AbstractParser() {
            public ResourceProfileWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ResourceProfileWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ResourceProfileWrapperOrBuilder {
         private int bitField0_;
         private ResourceProfileInfo rpInfo_;
         private SingleFieldBuilder rpInfoBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ResourceProfileWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ResourceProfileWrapper.alwaysUseFieldBuilders) {
               this.getRpInfoFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.rpInfo_ = null;
            if (this.rpInfoBuilder_ != null) {
               this.rpInfoBuilder_.dispose();
               this.rpInfoBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceProfileWrapper_descriptor;
         }

         public ResourceProfileWrapper getDefaultInstanceForType() {
            return StoreTypes.ResourceProfileWrapper.getDefaultInstance();
         }

         public ResourceProfileWrapper build() {
            ResourceProfileWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ResourceProfileWrapper buildPartial() {
            ResourceProfileWrapper result = new ResourceProfileWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ResourceProfileWrapper result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.rpInfo_ = this.rpInfoBuilder_ == null ? this.rpInfo_ : (ResourceProfileInfo)this.rpInfoBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ResourceProfileWrapper) {
               return this.mergeFrom((ResourceProfileWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ResourceProfileWrapper other) {
            if (other == StoreTypes.ResourceProfileWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasRpInfo()) {
                  this.mergeRpInfo(other.getRpInfo());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           input.readMessage((MessageLite.Builder)this.getRpInfoFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasRpInfo() {
            return (this.bitField0_ & 1) != 0;
         }

         public ResourceProfileInfo getRpInfo() {
            if (this.rpInfoBuilder_ == null) {
               return this.rpInfo_ == null ? StoreTypes.ResourceProfileInfo.getDefaultInstance() : this.rpInfo_;
            } else {
               return (ResourceProfileInfo)this.rpInfoBuilder_.getMessage();
            }
         }

         public Builder setRpInfo(ResourceProfileInfo value) {
            if (this.rpInfoBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.rpInfo_ = value;
            } else {
               this.rpInfoBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder setRpInfo(ResourceProfileInfo.Builder builderForValue) {
            if (this.rpInfoBuilder_ == null) {
               this.rpInfo_ = builderForValue.build();
            } else {
               this.rpInfoBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder mergeRpInfo(ResourceProfileInfo value) {
            if (this.rpInfoBuilder_ == null) {
               if ((this.bitField0_ & 1) != 0 && this.rpInfo_ != null && this.rpInfo_ != StoreTypes.ResourceProfileInfo.getDefaultInstance()) {
                  this.getRpInfoBuilder().mergeFrom(value);
               } else {
                  this.rpInfo_ = value;
               }
            } else {
               this.rpInfoBuilder_.mergeFrom(value);
            }

            if (this.rpInfo_ != null) {
               this.bitField0_ |= 1;
               this.onChanged();
            }

            return this;
         }

         public Builder clearRpInfo() {
            this.bitField0_ &= -2;
            this.rpInfo_ = null;
            if (this.rpInfoBuilder_ != null) {
               this.rpInfoBuilder_.dispose();
               this.rpInfoBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ResourceProfileInfo.Builder getRpInfoBuilder() {
            this.bitField0_ |= 1;
            this.onChanged();
            return (ResourceProfileInfo.Builder)this.getRpInfoFieldBuilder().getBuilder();
         }

         public ResourceProfileInfoOrBuilder getRpInfoOrBuilder() {
            if (this.rpInfoBuilder_ != null) {
               return (ResourceProfileInfoOrBuilder)this.rpInfoBuilder_.getMessageOrBuilder();
            } else {
               return this.rpInfo_ == null ? StoreTypes.ResourceProfileInfo.getDefaultInstance() : this.rpInfo_;
            }
         }

         private SingleFieldBuilder getRpInfoFieldBuilder() {
            if (this.rpInfoBuilder_ == null) {
               this.rpInfoBuilder_ = new SingleFieldBuilder(this.getRpInfo(), this.getParentForChildren(), this.isClean());
               this.rpInfo_ = null;
            }

            return this.rpInfoBuilder_;
         }
      }
   }

   public static final class CachedQuantile extends GeneratedMessage implements CachedQuantileOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int STAGE_ID_FIELD_NUMBER = 1;
      private long stageId_ = 0L;
      public static final int STAGE_ATTEMPT_ID_FIELD_NUMBER = 2;
      private int stageAttemptId_ = 0;
      public static final int QUANTILE_FIELD_NUMBER = 3;
      private volatile Object quantile_ = "";
      public static final int TASK_COUNT_FIELD_NUMBER = 4;
      private long taskCount_ = 0L;
      public static final int DURATION_FIELD_NUMBER = 5;
      private double duration_ = (double)0.0F;
      public static final int EXECUTOR_DESERIALIZE_TIME_FIELD_NUMBER = 6;
      private double executorDeserializeTime_ = (double)0.0F;
      public static final int EXECUTOR_DESERIALIZE_CPU_TIME_FIELD_NUMBER = 7;
      private double executorDeserializeCpuTime_ = (double)0.0F;
      public static final int EXECUTOR_RUN_TIME_FIELD_NUMBER = 8;
      private double executorRunTime_ = (double)0.0F;
      public static final int EXECUTOR_CPU_TIME_FIELD_NUMBER = 9;
      private double executorCpuTime_ = (double)0.0F;
      public static final int RESULT_SIZE_FIELD_NUMBER = 10;
      private double resultSize_ = (double)0.0F;
      public static final int JVM_GC_TIME_FIELD_NUMBER = 11;
      private double jvmGcTime_ = (double)0.0F;
      public static final int RESULT_SERIALIZATION_TIME_FIELD_NUMBER = 12;
      private double resultSerializationTime_ = (double)0.0F;
      public static final int GETTING_RESULT_TIME_FIELD_NUMBER = 13;
      private double gettingResultTime_ = (double)0.0F;
      public static final int SCHEDULER_DELAY_FIELD_NUMBER = 14;
      private double schedulerDelay_ = (double)0.0F;
      public static final int PEAK_EXECUTION_MEMORY_FIELD_NUMBER = 15;
      private double peakExecutionMemory_ = (double)0.0F;
      public static final int MEMORY_BYTES_SPILLED_FIELD_NUMBER = 16;
      private double memoryBytesSpilled_ = (double)0.0F;
      public static final int DISK_BYTES_SPILLED_FIELD_NUMBER = 17;
      private double diskBytesSpilled_ = (double)0.0F;
      public static final int BYTES_READ_FIELD_NUMBER = 18;
      private double bytesRead_ = (double)0.0F;
      public static final int RECORDS_READ_FIELD_NUMBER = 19;
      private double recordsRead_ = (double)0.0F;
      public static final int BYTES_WRITTEN_FIELD_NUMBER = 20;
      private double bytesWritten_ = (double)0.0F;
      public static final int RECORDS_WRITTEN_FIELD_NUMBER = 21;
      private double recordsWritten_ = (double)0.0F;
      public static final int SHUFFLE_READ_BYTES_FIELD_NUMBER = 22;
      private double shuffleReadBytes_ = (double)0.0F;
      public static final int SHUFFLE_RECORDS_READ_FIELD_NUMBER = 23;
      private double shuffleRecordsRead_ = (double)0.0F;
      public static final int SHUFFLE_REMOTE_BLOCKS_FETCHED_FIELD_NUMBER = 24;
      private double shuffleRemoteBlocksFetched_ = (double)0.0F;
      public static final int SHUFFLE_LOCAL_BLOCKS_FETCHED_FIELD_NUMBER = 25;
      private double shuffleLocalBlocksFetched_ = (double)0.0F;
      public static final int SHUFFLE_FETCH_WAIT_TIME_FIELD_NUMBER = 26;
      private double shuffleFetchWaitTime_ = (double)0.0F;
      public static final int SHUFFLE_REMOTE_BYTES_READ_FIELD_NUMBER = 27;
      private double shuffleRemoteBytesRead_ = (double)0.0F;
      public static final int SHUFFLE_REMOTE_BYTES_READ_TO_DISK_FIELD_NUMBER = 28;
      private double shuffleRemoteBytesReadToDisk_ = (double)0.0F;
      public static final int SHUFFLE_TOTAL_BLOCKS_FETCHED_FIELD_NUMBER = 29;
      private double shuffleTotalBlocksFetched_ = (double)0.0F;
      public static final int SHUFFLE_WRITE_BYTES_FIELD_NUMBER = 30;
      private double shuffleWriteBytes_ = (double)0.0F;
      public static final int SHUFFLE_WRITE_RECORDS_FIELD_NUMBER = 31;
      private double shuffleWriteRecords_ = (double)0.0F;
      public static final int SHUFFLE_WRITE_TIME_FIELD_NUMBER = 32;
      private double shuffleWriteTime_ = (double)0.0F;
      public static final int SHUFFLE_CORRUPT_MERGED_BLOCK_CHUNKS_FIELD_NUMBER = 33;
      private double shuffleCorruptMergedBlockChunks_ = (double)0.0F;
      public static final int SHUFFLE_MERGED_FETCH_FALLBACK_COUNT_FIELD_NUMBER = 34;
      private double shuffleMergedFetchFallbackCount_ = (double)0.0F;
      public static final int SHUFFLE_MERGED_REMOTE_BLOCKS_FETCHED_FIELD_NUMBER = 35;
      private double shuffleMergedRemoteBlocksFetched_ = (double)0.0F;
      public static final int SHUFFLE_MERGED_LOCAL_BLOCKS_FETCHED_FIELD_NUMBER = 36;
      private double shuffleMergedLocalBlocksFetched_ = (double)0.0F;
      public static final int SHUFFLE_MERGED_REMOTE_CHUNKS_FETCHED_FIELD_NUMBER = 37;
      private double shuffleMergedRemoteChunksFetched_ = (double)0.0F;
      public static final int SHUFFLE_MERGED_LOCAL_CHUNKS_FETCHED_FIELD_NUMBER = 38;
      private double shuffleMergedLocalChunksFetched_ = (double)0.0F;
      public static final int SHUFFLE_MERGED_REMOTE_BYTES_READ_FIELD_NUMBER = 39;
      private double shuffleMergedRemoteBytesRead_ = (double)0.0F;
      public static final int SHUFFLE_MERGED_LOCAL_BYTES_READ_FIELD_NUMBER = 40;
      private double shuffleMergedLocalBytesRead_ = (double)0.0F;
      public static final int SHUFFLE_REMOTE_REQS_DURATION_FIELD_NUMBER = 41;
      private double shuffleRemoteReqsDuration_ = (double)0.0F;
      public static final int SHUFFLE_MERGED_REMOTE_REQS_DURATION_FIELD_NUMBER = 42;
      private double shuffleMergedRemoteReqsDuration_ = (double)0.0F;
      private byte memoizedIsInitialized = -1;
      private static final CachedQuantile DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private CachedQuantile(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private CachedQuantile() {
         this.quantile_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_CachedQuantile_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_CachedQuantile_fieldAccessorTable.ensureFieldAccessorsInitialized(CachedQuantile.class, Builder.class);
      }

      public long getStageId() {
         return this.stageId_;
      }

      public int getStageAttemptId() {
         return this.stageAttemptId_;
      }

      public boolean hasQuantile() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getQuantile() {
         Object ref = this.quantile_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.quantile_ = s;
            return s;
         }
      }

      public ByteString getQuantileBytes() {
         Object ref = this.quantile_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.quantile_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getTaskCount() {
         return this.taskCount_;
      }

      public double getDuration() {
         return this.duration_;
      }

      public double getExecutorDeserializeTime() {
         return this.executorDeserializeTime_;
      }

      public double getExecutorDeserializeCpuTime() {
         return this.executorDeserializeCpuTime_;
      }

      public double getExecutorRunTime() {
         return this.executorRunTime_;
      }

      public double getExecutorCpuTime() {
         return this.executorCpuTime_;
      }

      public double getResultSize() {
         return this.resultSize_;
      }

      public double getJvmGcTime() {
         return this.jvmGcTime_;
      }

      public double getResultSerializationTime() {
         return this.resultSerializationTime_;
      }

      public double getGettingResultTime() {
         return this.gettingResultTime_;
      }

      public double getSchedulerDelay() {
         return this.schedulerDelay_;
      }

      public double getPeakExecutionMemory() {
         return this.peakExecutionMemory_;
      }

      public double getMemoryBytesSpilled() {
         return this.memoryBytesSpilled_;
      }

      public double getDiskBytesSpilled() {
         return this.diskBytesSpilled_;
      }

      public double getBytesRead() {
         return this.bytesRead_;
      }

      public double getRecordsRead() {
         return this.recordsRead_;
      }

      public double getBytesWritten() {
         return this.bytesWritten_;
      }

      public double getRecordsWritten() {
         return this.recordsWritten_;
      }

      public double getShuffleReadBytes() {
         return this.shuffleReadBytes_;
      }

      public double getShuffleRecordsRead() {
         return this.shuffleRecordsRead_;
      }

      public double getShuffleRemoteBlocksFetched() {
         return this.shuffleRemoteBlocksFetched_;
      }

      public double getShuffleLocalBlocksFetched() {
         return this.shuffleLocalBlocksFetched_;
      }

      public double getShuffleFetchWaitTime() {
         return this.shuffleFetchWaitTime_;
      }

      public double getShuffleRemoteBytesRead() {
         return this.shuffleRemoteBytesRead_;
      }

      public double getShuffleRemoteBytesReadToDisk() {
         return this.shuffleRemoteBytesReadToDisk_;
      }

      public double getShuffleTotalBlocksFetched() {
         return this.shuffleTotalBlocksFetched_;
      }

      public double getShuffleWriteBytes() {
         return this.shuffleWriteBytes_;
      }

      public double getShuffleWriteRecords() {
         return this.shuffleWriteRecords_;
      }

      public double getShuffleWriteTime() {
         return this.shuffleWriteTime_;
      }

      public double getShuffleCorruptMergedBlockChunks() {
         return this.shuffleCorruptMergedBlockChunks_;
      }

      public double getShuffleMergedFetchFallbackCount() {
         return this.shuffleMergedFetchFallbackCount_;
      }

      public double getShuffleMergedRemoteBlocksFetched() {
         return this.shuffleMergedRemoteBlocksFetched_;
      }

      public double getShuffleMergedLocalBlocksFetched() {
         return this.shuffleMergedLocalBlocksFetched_;
      }

      public double getShuffleMergedRemoteChunksFetched() {
         return this.shuffleMergedRemoteChunksFetched_;
      }

      public double getShuffleMergedLocalChunksFetched() {
         return this.shuffleMergedLocalChunksFetched_;
      }

      public double getShuffleMergedRemoteBytesRead() {
         return this.shuffleMergedRemoteBytesRead_;
      }

      public double getShuffleMergedLocalBytesRead() {
         return this.shuffleMergedLocalBytesRead_;
      }

      public double getShuffleRemoteReqsDuration() {
         return this.shuffleRemoteReqsDuration_;
      }

      public double getShuffleMergedRemoteReqsDuration() {
         return this.shuffleMergedRemoteReqsDuration_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.stageId_ != 0L) {
            output.writeInt64(1, this.stageId_);
         }

         if (this.stageAttemptId_ != 0) {
            output.writeInt32(2, this.stageAttemptId_);
         }

         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 3, this.quantile_);
         }

         if (this.taskCount_ != 0L) {
            output.writeInt64(4, this.taskCount_);
         }

         if (Double.doubleToRawLongBits(this.duration_) != 0L) {
            output.writeDouble(5, this.duration_);
         }

         if (Double.doubleToRawLongBits(this.executorDeserializeTime_) != 0L) {
            output.writeDouble(6, this.executorDeserializeTime_);
         }

         if (Double.doubleToRawLongBits(this.executorDeserializeCpuTime_) != 0L) {
            output.writeDouble(7, this.executorDeserializeCpuTime_);
         }

         if (Double.doubleToRawLongBits(this.executorRunTime_) != 0L) {
            output.writeDouble(8, this.executorRunTime_);
         }

         if (Double.doubleToRawLongBits(this.executorCpuTime_) != 0L) {
            output.writeDouble(9, this.executorCpuTime_);
         }

         if (Double.doubleToRawLongBits(this.resultSize_) != 0L) {
            output.writeDouble(10, this.resultSize_);
         }

         if (Double.doubleToRawLongBits(this.jvmGcTime_) != 0L) {
            output.writeDouble(11, this.jvmGcTime_);
         }

         if (Double.doubleToRawLongBits(this.resultSerializationTime_) != 0L) {
            output.writeDouble(12, this.resultSerializationTime_);
         }

         if (Double.doubleToRawLongBits(this.gettingResultTime_) != 0L) {
            output.writeDouble(13, this.gettingResultTime_);
         }

         if (Double.doubleToRawLongBits(this.schedulerDelay_) != 0L) {
            output.writeDouble(14, this.schedulerDelay_);
         }

         if (Double.doubleToRawLongBits(this.peakExecutionMemory_) != 0L) {
            output.writeDouble(15, this.peakExecutionMemory_);
         }

         if (Double.doubleToRawLongBits(this.memoryBytesSpilled_) != 0L) {
            output.writeDouble(16, this.memoryBytesSpilled_);
         }

         if (Double.doubleToRawLongBits(this.diskBytesSpilled_) != 0L) {
            output.writeDouble(17, this.diskBytesSpilled_);
         }

         if (Double.doubleToRawLongBits(this.bytesRead_) != 0L) {
            output.writeDouble(18, this.bytesRead_);
         }

         if (Double.doubleToRawLongBits(this.recordsRead_) != 0L) {
            output.writeDouble(19, this.recordsRead_);
         }

         if (Double.doubleToRawLongBits(this.bytesWritten_) != 0L) {
            output.writeDouble(20, this.bytesWritten_);
         }

         if (Double.doubleToRawLongBits(this.recordsWritten_) != 0L) {
            output.writeDouble(21, this.recordsWritten_);
         }

         if (Double.doubleToRawLongBits(this.shuffleReadBytes_) != 0L) {
            output.writeDouble(22, this.shuffleReadBytes_);
         }

         if (Double.doubleToRawLongBits(this.shuffleRecordsRead_) != 0L) {
            output.writeDouble(23, this.shuffleRecordsRead_);
         }

         if (Double.doubleToRawLongBits(this.shuffleRemoteBlocksFetched_) != 0L) {
            output.writeDouble(24, this.shuffleRemoteBlocksFetched_);
         }

         if (Double.doubleToRawLongBits(this.shuffleLocalBlocksFetched_) != 0L) {
            output.writeDouble(25, this.shuffleLocalBlocksFetched_);
         }

         if (Double.doubleToRawLongBits(this.shuffleFetchWaitTime_) != 0L) {
            output.writeDouble(26, this.shuffleFetchWaitTime_);
         }

         if (Double.doubleToRawLongBits(this.shuffleRemoteBytesRead_) != 0L) {
            output.writeDouble(27, this.shuffleRemoteBytesRead_);
         }

         if (Double.doubleToRawLongBits(this.shuffleRemoteBytesReadToDisk_) != 0L) {
            output.writeDouble(28, this.shuffleRemoteBytesReadToDisk_);
         }

         if (Double.doubleToRawLongBits(this.shuffleTotalBlocksFetched_) != 0L) {
            output.writeDouble(29, this.shuffleTotalBlocksFetched_);
         }

         if (Double.doubleToRawLongBits(this.shuffleWriteBytes_) != 0L) {
            output.writeDouble(30, this.shuffleWriteBytes_);
         }

         if (Double.doubleToRawLongBits(this.shuffleWriteRecords_) != 0L) {
            output.writeDouble(31, this.shuffleWriteRecords_);
         }

         if (Double.doubleToRawLongBits(this.shuffleWriteTime_) != 0L) {
            output.writeDouble(32, this.shuffleWriteTime_);
         }

         if (Double.doubleToRawLongBits(this.shuffleCorruptMergedBlockChunks_) != 0L) {
            output.writeDouble(33, this.shuffleCorruptMergedBlockChunks_);
         }

         if (Double.doubleToRawLongBits(this.shuffleMergedFetchFallbackCount_) != 0L) {
            output.writeDouble(34, this.shuffleMergedFetchFallbackCount_);
         }

         if (Double.doubleToRawLongBits(this.shuffleMergedRemoteBlocksFetched_) != 0L) {
            output.writeDouble(35, this.shuffleMergedRemoteBlocksFetched_);
         }

         if (Double.doubleToRawLongBits(this.shuffleMergedLocalBlocksFetched_) != 0L) {
            output.writeDouble(36, this.shuffleMergedLocalBlocksFetched_);
         }

         if (Double.doubleToRawLongBits(this.shuffleMergedRemoteChunksFetched_) != 0L) {
            output.writeDouble(37, this.shuffleMergedRemoteChunksFetched_);
         }

         if (Double.doubleToRawLongBits(this.shuffleMergedLocalChunksFetched_) != 0L) {
            output.writeDouble(38, this.shuffleMergedLocalChunksFetched_);
         }

         if (Double.doubleToRawLongBits(this.shuffleMergedRemoteBytesRead_) != 0L) {
            output.writeDouble(39, this.shuffleMergedRemoteBytesRead_);
         }

         if (Double.doubleToRawLongBits(this.shuffleMergedLocalBytesRead_) != 0L) {
            output.writeDouble(40, this.shuffleMergedLocalBytesRead_);
         }

         if (Double.doubleToRawLongBits(this.shuffleRemoteReqsDuration_) != 0L) {
            output.writeDouble(41, this.shuffleRemoteReqsDuration_);
         }

         if (Double.doubleToRawLongBits(this.shuffleMergedRemoteReqsDuration_) != 0L) {
            output.writeDouble(42, this.shuffleMergedRemoteReqsDuration_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.stageId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.stageId_);
            }

            if (this.stageAttemptId_ != 0) {
               size += CodedOutputStream.computeInt32Size(2, this.stageAttemptId_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.quantile_);
            }

            if (this.taskCount_ != 0L) {
               size += CodedOutputStream.computeInt64Size(4, this.taskCount_);
            }

            if (Double.doubleToRawLongBits(this.duration_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(5, this.duration_);
            }

            if (Double.doubleToRawLongBits(this.executorDeserializeTime_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(6, this.executorDeserializeTime_);
            }

            if (Double.doubleToRawLongBits(this.executorDeserializeCpuTime_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(7, this.executorDeserializeCpuTime_);
            }

            if (Double.doubleToRawLongBits(this.executorRunTime_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(8, this.executorRunTime_);
            }

            if (Double.doubleToRawLongBits(this.executorCpuTime_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(9, this.executorCpuTime_);
            }

            if (Double.doubleToRawLongBits(this.resultSize_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(10, this.resultSize_);
            }

            if (Double.doubleToRawLongBits(this.jvmGcTime_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(11, this.jvmGcTime_);
            }

            if (Double.doubleToRawLongBits(this.resultSerializationTime_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(12, this.resultSerializationTime_);
            }

            if (Double.doubleToRawLongBits(this.gettingResultTime_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(13, this.gettingResultTime_);
            }

            if (Double.doubleToRawLongBits(this.schedulerDelay_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(14, this.schedulerDelay_);
            }

            if (Double.doubleToRawLongBits(this.peakExecutionMemory_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(15, this.peakExecutionMemory_);
            }

            if (Double.doubleToRawLongBits(this.memoryBytesSpilled_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(16, this.memoryBytesSpilled_);
            }

            if (Double.doubleToRawLongBits(this.diskBytesSpilled_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(17, this.diskBytesSpilled_);
            }

            if (Double.doubleToRawLongBits(this.bytesRead_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(18, this.bytesRead_);
            }

            if (Double.doubleToRawLongBits(this.recordsRead_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(19, this.recordsRead_);
            }

            if (Double.doubleToRawLongBits(this.bytesWritten_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(20, this.bytesWritten_);
            }

            if (Double.doubleToRawLongBits(this.recordsWritten_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(21, this.recordsWritten_);
            }

            if (Double.doubleToRawLongBits(this.shuffleReadBytes_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(22, this.shuffleReadBytes_);
            }

            if (Double.doubleToRawLongBits(this.shuffleRecordsRead_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(23, this.shuffleRecordsRead_);
            }

            if (Double.doubleToRawLongBits(this.shuffleRemoteBlocksFetched_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(24, this.shuffleRemoteBlocksFetched_);
            }

            if (Double.doubleToRawLongBits(this.shuffleLocalBlocksFetched_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(25, this.shuffleLocalBlocksFetched_);
            }

            if (Double.doubleToRawLongBits(this.shuffleFetchWaitTime_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(26, this.shuffleFetchWaitTime_);
            }

            if (Double.doubleToRawLongBits(this.shuffleRemoteBytesRead_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(27, this.shuffleRemoteBytesRead_);
            }

            if (Double.doubleToRawLongBits(this.shuffleRemoteBytesReadToDisk_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(28, this.shuffleRemoteBytesReadToDisk_);
            }

            if (Double.doubleToRawLongBits(this.shuffleTotalBlocksFetched_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(29, this.shuffleTotalBlocksFetched_);
            }

            if (Double.doubleToRawLongBits(this.shuffleWriteBytes_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(30, this.shuffleWriteBytes_);
            }

            if (Double.doubleToRawLongBits(this.shuffleWriteRecords_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(31, this.shuffleWriteRecords_);
            }

            if (Double.doubleToRawLongBits(this.shuffleWriteTime_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(32, this.shuffleWriteTime_);
            }

            if (Double.doubleToRawLongBits(this.shuffleCorruptMergedBlockChunks_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(33, this.shuffleCorruptMergedBlockChunks_);
            }

            if (Double.doubleToRawLongBits(this.shuffleMergedFetchFallbackCount_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(34, this.shuffleMergedFetchFallbackCount_);
            }

            if (Double.doubleToRawLongBits(this.shuffleMergedRemoteBlocksFetched_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(35, this.shuffleMergedRemoteBlocksFetched_);
            }

            if (Double.doubleToRawLongBits(this.shuffleMergedLocalBlocksFetched_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(36, this.shuffleMergedLocalBlocksFetched_);
            }

            if (Double.doubleToRawLongBits(this.shuffleMergedRemoteChunksFetched_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(37, this.shuffleMergedRemoteChunksFetched_);
            }

            if (Double.doubleToRawLongBits(this.shuffleMergedLocalChunksFetched_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(38, this.shuffleMergedLocalChunksFetched_);
            }

            if (Double.doubleToRawLongBits(this.shuffleMergedRemoteBytesRead_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(39, this.shuffleMergedRemoteBytesRead_);
            }

            if (Double.doubleToRawLongBits(this.shuffleMergedLocalBytesRead_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(40, this.shuffleMergedLocalBytesRead_);
            }

            if (Double.doubleToRawLongBits(this.shuffleRemoteReqsDuration_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(41, this.shuffleRemoteReqsDuration_);
            }

            if (Double.doubleToRawLongBits(this.shuffleMergedRemoteReqsDuration_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(42, this.shuffleMergedRemoteReqsDuration_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof CachedQuantile)) {
            return super.equals(obj);
         } else {
            CachedQuantile other = (CachedQuantile)obj;
            if (this.getStageId() != other.getStageId()) {
               return false;
            } else if (this.getStageAttemptId() != other.getStageAttemptId()) {
               return false;
            } else if (this.hasQuantile() != other.hasQuantile()) {
               return false;
            } else if (this.hasQuantile() && !this.getQuantile().equals(other.getQuantile())) {
               return false;
            } else if (this.getTaskCount() != other.getTaskCount()) {
               return false;
            } else if (Double.doubleToLongBits(this.getDuration()) != Double.doubleToLongBits(other.getDuration())) {
               return false;
            } else if (Double.doubleToLongBits(this.getExecutorDeserializeTime()) != Double.doubleToLongBits(other.getExecutorDeserializeTime())) {
               return false;
            } else if (Double.doubleToLongBits(this.getExecutorDeserializeCpuTime()) != Double.doubleToLongBits(other.getExecutorDeserializeCpuTime())) {
               return false;
            } else if (Double.doubleToLongBits(this.getExecutorRunTime()) != Double.doubleToLongBits(other.getExecutorRunTime())) {
               return false;
            } else if (Double.doubleToLongBits(this.getExecutorCpuTime()) != Double.doubleToLongBits(other.getExecutorCpuTime())) {
               return false;
            } else if (Double.doubleToLongBits(this.getResultSize()) != Double.doubleToLongBits(other.getResultSize())) {
               return false;
            } else if (Double.doubleToLongBits(this.getJvmGcTime()) != Double.doubleToLongBits(other.getJvmGcTime())) {
               return false;
            } else if (Double.doubleToLongBits(this.getResultSerializationTime()) != Double.doubleToLongBits(other.getResultSerializationTime())) {
               return false;
            } else if (Double.doubleToLongBits(this.getGettingResultTime()) != Double.doubleToLongBits(other.getGettingResultTime())) {
               return false;
            } else if (Double.doubleToLongBits(this.getSchedulerDelay()) != Double.doubleToLongBits(other.getSchedulerDelay())) {
               return false;
            } else if (Double.doubleToLongBits(this.getPeakExecutionMemory()) != Double.doubleToLongBits(other.getPeakExecutionMemory())) {
               return false;
            } else if (Double.doubleToLongBits(this.getMemoryBytesSpilled()) != Double.doubleToLongBits(other.getMemoryBytesSpilled())) {
               return false;
            } else if (Double.doubleToLongBits(this.getDiskBytesSpilled()) != Double.doubleToLongBits(other.getDiskBytesSpilled())) {
               return false;
            } else if (Double.doubleToLongBits(this.getBytesRead()) != Double.doubleToLongBits(other.getBytesRead())) {
               return false;
            } else if (Double.doubleToLongBits(this.getRecordsRead()) != Double.doubleToLongBits(other.getRecordsRead())) {
               return false;
            } else if (Double.doubleToLongBits(this.getBytesWritten()) != Double.doubleToLongBits(other.getBytesWritten())) {
               return false;
            } else if (Double.doubleToLongBits(this.getRecordsWritten()) != Double.doubleToLongBits(other.getRecordsWritten())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleReadBytes()) != Double.doubleToLongBits(other.getShuffleReadBytes())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleRecordsRead()) != Double.doubleToLongBits(other.getShuffleRecordsRead())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleRemoteBlocksFetched()) != Double.doubleToLongBits(other.getShuffleRemoteBlocksFetched())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleLocalBlocksFetched()) != Double.doubleToLongBits(other.getShuffleLocalBlocksFetched())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleFetchWaitTime()) != Double.doubleToLongBits(other.getShuffleFetchWaitTime())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleRemoteBytesRead()) != Double.doubleToLongBits(other.getShuffleRemoteBytesRead())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleRemoteBytesReadToDisk()) != Double.doubleToLongBits(other.getShuffleRemoteBytesReadToDisk())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleTotalBlocksFetched()) != Double.doubleToLongBits(other.getShuffleTotalBlocksFetched())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleWriteBytes()) != Double.doubleToLongBits(other.getShuffleWriteBytes())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleWriteRecords()) != Double.doubleToLongBits(other.getShuffleWriteRecords())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleWriteTime()) != Double.doubleToLongBits(other.getShuffleWriteTime())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleCorruptMergedBlockChunks()) != Double.doubleToLongBits(other.getShuffleCorruptMergedBlockChunks())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleMergedFetchFallbackCount()) != Double.doubleToLongBits(other.getShuffleMergedFetchFallbackCount())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleMergedRemoteBlocksFetched()) != Double.doubleToLongBits(other.getShuffleMergedRemoteBlocksFetched())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleMergedLocalBlocksFetched()) != Double.doubleToLongBits(other.getShuffleMergedLocalBlocksFetched())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleMergedRemoteChunksFetched()) != Double.doubleToLongBits(other.getShuffleMergedRemoteChunksFetched())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleMergedLocalChunksFetched()) != Double.doubleToLongBits(other.getShuffleMergedLocalChunksFetched())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleMergedRemoteBytesRead()) != Double.doubleToLongBits(other.getShuffleMergedRemoteBytesRead())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleMergedLocalBytesRead()) != Double.doubleToLongBits(other.getShuffleMergedLocalBytesRead())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleRemoteReqsDuration()) != Double.doubleToLongBits(other.getShuffleRemoteReqsDuration())) {
               return false;
            } else if (Double.doubleToLongBits(this.getShuffleMergedRemoteReqsDuration()) != Double.doubleToLongBits(other.getShuffleMergedRemoteReqsDuration())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getStageId());
            hash = 37 * hash + 2;
            hash = 53 * hash + this.getStageAttemptId();
            if (this.hasQuantile()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getQuantile().hashCode();
            }

            hash = 37 * hash + 4;
            hash = 53 * hash + Internal.hashLong(this.getTaskCount());
            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getDuration()));
            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getExecutorDeserializeTime()));
            hash = 37 * hash + 7;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getExecutorDeserializeCpuTime()));
            hash = 37 * hash + 8;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getExecutorRunTime()));
            hash = 37 * hash + 9;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getExecutorCpuTime()));
            hash = 37 * hash + 10;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getResultSize()));
            hash = 37 * hash + 11;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getJvmGcTime()));
            hash = 37 * hash + 12;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getResultSerializationTime()));
            hash = 37 * hash + 13;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getGettingResultTime()));
            hash = 37 * hash + 14;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getSchedulerDelay()));
            hash = 37 * hash + 15;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getPeakExecutionMemory()));
            hash = 37 * hash + 16;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getMemoryBytesSpilled()));
            hash = 37 * hash + 17;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getDiskBytesSpilled()));
            hash = 37 * hash + 18;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getBytesRead()));
            hash = 37 * hash + 19;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getRecordsRead()));
            hash = 37 * hash + 20;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getBytesWritten()));
            hash = 37 * hash + 21;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getRecordsWritten()));
            hash = 37 * hash + 22;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleReadBytes()));
            hash = 37 * hash + 23;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleRecordsRead()));
            hash = 37 * hash + 24;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleRemoteBlocksFetched()));
            hash = 37 * hash + 25;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleLocalBlocksFetched()));
            hash = 37 * hash + 26;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleFetchWaitTime()));
            hash = 37 * hash + 27;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleRemoteBytesRead()));
            hash = 37 * hash + 28;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleRemoteBytesReadToDisk()));
            hash = 37 * hash + 29;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleTotalBlocksFetched()));
            hash = 37 * hash + 30;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleWriteBytes()));
            hash = 37 * hash + 31;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleWriteRecords()));
            hash = 37 * hash + 32;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleWriteTime()));
            hash = 37 * hash + 33;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleCorruptMergedBlockChunks()));
            hash = 37 * hash + 34;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleMergedFetchFallbackCount()));
            hash = 37 * hash + 35;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleMergedRemoteBlocksFetched()));
            hash = 37 * hash + 36;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleMergedLocalBlocksFetched()));
            hash = 37 * hash + 37;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleMergedRemoteChunksFetched()));
            hash = 37 * hash + 38;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleMergedLocalChunksFetched()));
            hash = 37 * hash + 39;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleMergedRemoteBytesRead()));
            hash = 37 * hash + 40;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleMergedLocalBytesRead()));
            hash = 37 * hash + 41;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleRemoteReqsDuration()));
            hash = 37 * hash + 42;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getShuffleMergedRemoteReqsDuration()));
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static CachedQuantile parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (CachedQuantile)PARSER.parseFrom(data);
      }

      public static CachedQuantile parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (CachedQuantile)PARSER.parseFrom(data, extensionRegistry);
      }

      public static CachedQuantile parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (CachedQuantile)PARSER.parseFrom(data);
      }

      public static CachedQuantile parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (CachedQuantile)PARSER.parseFrom(data, extensionRegistry);
      }

      public static CachedQuantile parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (CachedQuantile)PARSER.parseFrom(data);
      }

      public static CachedQuantile parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (CachedQuantile)PARSER.parseFrom(data, extensionRegistry);
      }

      public static CachedQuantile parseFrom(InputStream input) throws IOException {
         return (CachedQuantile)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static CachedQuantile parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (CachedQuantile)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static CachedQuantile parseDelimitedFrom(InputStream input) throws IOException {
         return (CachedQuantile)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static CachedQuantile parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (CachedQuantile)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static CachedQuantile parseFrom(CodedInputStream input) throws IOException {
         return (CachedQuantile)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static CachedQuantile parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (CachedQuantile)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(CachedQuantile prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static CachedQuantile getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public CachedQuantile getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", CachedQuantile.class.getName());
         DEFAULT_INSTANCE = new CachedQuantile();
         PARSER = new AbstractParser() {
            public CachedQuantile parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.CachedQuantile.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements CachedQuantileOrBuilder {
         private int bitField0_;
         private int bitField1_;
         private long stageId_;
         private int stageAttemptId_;
         private Object quantile_ = "";
         private long taskCount_;
         private double duration_;
         private double executorDeserializeTime_;
         private double executorDeserializeCpuTime_;
         private double executorRunTime_;
         private double executorCpuTime_;
         private double resultSize_;
         private double jvmGcTime_;
         private double resultSerializationTime_;
         private double gettingResultTime_;
         private double schedulerDelay_;
         private double peakExecutionMemory_;
         private double memoryBytesSpilled_;
         private double diskBytesSpilled_;
         private double bytesRead_;
         private double recordsRead_;
         private double bytesWritten_;
         private double recordsWritten_;
         private double shuffleReadBytes_;
         private double shuffleRecordsRead_;
         private double shuffleRemoteBlocksFetched_;
         private double shuffleLocalBlocksFetched_;
         private double shuffleFetchWaitTime_;
         private double shuffleRemoteBytesRead_;
         private double shuffleRemoteBytesReadToDisk_;
         private double shuffleTotalBlocksFetched_;
         private double shuffleWriteBytes_;
         private double shuffleWriteRecords_;
         private double shuffleWriteTime_;
         private double shuffleCorruptMergedBlockChunks_;
         private double shuffleMergedFetchFallbackCount_;
         private double shuffleMergedRemoteBlocksFetched_;
         private double shuffleMergedLocalBlocksFetched_;
         private double shuffleMergedRemoteChunksFetched_;
         private double shuffleMergedLocalChunksFetched_;
         private double shuffleMergedRemoteBytesRead_;
         private double shuffleMergedLocalBytesRead_;
         private double shuffleRemoteReqsDuration_;
         private double shuffleMergedRemoteReqsDuration_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_CachedQuantile_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_CachedQuantile_fieldAccessorTable.ensureFieldAccessorsInitialized(CachedQuantile.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.bitField1_ = 0;
            this.stageId_ = 0L;
            this.stageAttemptId_ = 0;
            this.quantile_ = "";
            this.taskCount_ = 0L;
            this.duration_ = (double)0.0F;
            this.executorDeserializeTime_ = (double)0.0F;
            this.executorDeserializeCpuTime_ = (double)0.0F;
            this.executorRunTime_ = (double)0.0F;
            this.executorCpuTime_ = (double)0.0F;
            this.resultSize_ = (double)0.0F;
            this.jvmGcTime_ = (double)0.0F;
            this.resultSerializationTime_ = (double)0.0F;
            this.gettingResultTime_ = (double)0.0F;
            this.schedulerDelay_ = (double)0.0F;
            this.peakExecutionMemory_ = (double)0.0F;
            this.memoryBytesSpilled_ = (double)0.0F;
            this.diskBytesSpilled_ = (double)0.0F;
            this.bytesRead_ = (double)0.0F;
            this.recordsRead_ = (double)0.0F;
            this.bytesWritten_ = (double)0.0F;
            this.recordsWritten_ = (double)0.0F;
            this.shuffleReadBytes_ = (double)0.0F;
            this.shuffleRecordsRead_ = (double)0.0F;
            this.shuffleRemoteBlocksFetched_ = (double)0.0F;
            this.shuffleLocalBlocksFetched_ = (double)0.0F;
            this.shuffleFetchWaitTime_ = (double)0.0F;
            this.shuffleRemoteBytesRead_ = (double)0.0F;
            this.shuffleRemoteBytesReadToDisk_ = (double)0.0F;
            this.shuffleTotalBlocksFetched_ = (double)0.0F;
            this.shuffleWriteBytes_ = (double)0.0F;
            this.shuffleWriteRecords_ = (double)0.0F;
            this.shuffleWriteTime_ = (double)0.0F;
            this.shuffleCorruptMergedBlockChunks_ = (double)0.0F;
            this.shuffleMergedFetchFallbackCount_ = (double)0.0F;
            this.shuffleMergedRemoteBlocksFetched_ = (double)0.0F;
            this.shuffleMergedLocalBlocksFetched_ = (double)0.0F;
            this.shuffleMergedRemoteChunksFetched_ = (double)0.0F;
            this.shuffleMergedLocalChunksFetched_ = (double)0.0F;
            this.shuffleMergedRemoteBytesRead_ = (double)0.0F;
            this.shuffleMergedLocalBytesRead_ = (double)0.0F;
            this.shuffleRemoteReqsDuration_ = (double)0.0F;
            this.shuffleMergedRemoteReqsDuration_ = (double)0.0F;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_CachedQuantile_descriptor;
         }

         public CachedQuantile getDefaultInstanceForType() {
            return StoreTypes.CachedQuantile.getDefaultInstance();
         }

         public CachedQuantile build() {
            CachedQuantile result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public CachedQuantile buildPartial() {
            CachedQuantile result = new CachedQuantile(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            if (this.bitField1_ != 0) {
               this.buildPartial1(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(CachedQuantile result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.stageId_ = this.stageId_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.stageAttemptId_ = this.stageAttemptId_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 4) != 0) {
               result.quantile_ = this.quantile_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.taskCount_ = this.taskCount_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.duration_ = this.duration_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.executorDeserializeTime_ = this.executorDeserializeTime_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.executorDeserializeCpuTime_ = this.executorDeserializeCpuTime_;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.executorRunTime_ = this.executorRunTime_;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.executorCpuTime_ = this.executorCpuTime_;
            }

            if ((from_bitField0_ & 512) != 0) {
               result.resultSize_ = this.resultSize_;
            }

            if ((from_bitField0_ & 1024) != 0) {
               result.jvmGcTime_ = this.jvmGcTime_;
            }

            if ((from_bitField0_ & 2048) != 0) {
               result.resultSerializationTime_ = this.resultSerializationTime_;
            }

            if ((from_bitField0_ & 4096) != 0) {
               result.gettingResultTime_ = this.gettingResultTime_;
            }

            if ((from_bitField0_ & 8192) != 0) {
               result.schedulerDelay_ = this.schedulerDelay_;
            }

            if ((from_bitField0_ & 16384) != 0) {
               result.peakExecutionMemory_ = this.peakExecutionMemory_;
            }

            if ((from_bitField0_ & '耀') != 0) {
               result.memoryBytesSpilled_ = this.memoryBytesSpilled_;
            }

            if ((from_bitField0_ & 65536) != 0) {
               result.diskBytesSpilled_ = this.diskBytesSpilled_;
            }

            if ((from_bitField0_ & 131072) != 0) {
               result.bytesRead_ = this.bytesRead_;
            }

            if ((from_bitField0_ & 262144) != 0) {
               result.recordsRead_ = this.recordsRead_;
            }

            if ((from_bitField0_ & 524288) != 0) {
               result.bytesWritten_ = this.bytesWritten_;
            }

            if ((from_bitField0_ & 1048576) != 0) {
               result.recordsWritten_ = this.recordsWritten_;
            }

            if ((from_bitField0_ & 2097152) != 0) {
               result.shuffleReadBytes_ = this.shuffleReadBytes_;
            }

            if ((from_bitField0_ & 4194304) != 0) {
               result.shuffleRecordsRead_ = this.shuffleRecordsRead_;
            }

            if ((from_bitField0_ & 8388608) != 0) {
               result.shuffleRemoteBlocksFetched_ = this.shuffleRemoteBlocksFetched_;
            }

            if ((from_bitField0_ & 16777216) != 0) {
               result.shuffleLocalBlocksFetched_ = this.shuffleLocalBlocksFetched_;
            }

            if ((from_bitField0_ & 33554432) != 0) {
               result.shuffleFetchWaitTime_ = this.shuffleFetchWaitTime_;
            }

            if ((from_bitField0_ & 67108864) != 0) {
               result.shuffleRemoteBytesRead_ = this.shuffleRemoteBytesRead_;
            }

            if ((from_bitField0_ & 134217728) != 0) {
               result.shuffleRemoteBytesReadToDisk_ = this.shuffleRemoteBytesReadToDisk_;
            }

            if ((from_bitField0_ & 268435456) != 0) {
               result.shuffleTotalBlocksFetched_ = this.shuffleTotalBlocksFetched_;
            }

            if ((from_bitField0_ & 536870912) != 0) {
               result.shuffleWriteBytes_ = this.shuffleWriteBytes_;
            }

            if ((from_bitField0_ & 1073741824) != 0) {
               result.shuffleWriteRecords_ = this.shuffleWriteRecords_;
            }

            if ((from_bitField0_ & Integer.MIN_VALUE) != 0) {
               result.shuffleWriteTime_ = this.shuffleWriteTime_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         private void buildPartial1(CachedQuantile result) {
            int from_bitField1_ = this.bitField1_;
            if ((from_bitField1_ & 1) != 0) {
               result.shuffleCorruptMergedBlockChunks_ = this.shuffleCorruptMergedBlockChunks_;
            }

            if ((from_bitField1_ & 2) != 0) {
               result.shuffleMergedFetchFallbackCount_ = this.shuffleMergedFetchFallbackCount_;
            }

            if ((from_bitField1_ & 4) != 0) {
               result.shuffleMergedRemoteBlocksFetched_ = this.shuffleMergedRemoteBlocksFetched_;
            }

            if ((from_bitField1_ & 8) != 0) {
               result.shuffleMergedLocalBlocksFetched_ = this.shuffleMergedLocalBlocksFetched_;
            }

            if ((from_bitField1_ & 16) != 0) {
               result.shuffleMergedRemoteChunksFetched_ = this.shuffleMergedRemoteChunksFetched_;
            }

            if ((from_bitField1_ & 32) != 0) {
               result.shuffleMergedLocalChunksFetched_ = this.shuffleMergedLocalChunksFetched_;
            }

            if ((from_bitField1_ & 64) != 0) {
               result.shuffleMergedRemoteBytesRead_ = this.shuffleMergedRemoteBytesRead_;
            }

            if ((from_bitField1_ & 128) != 0) {
               result.shuffleMergedLocalBytesRead_ = this.shuffleMergedLocalBytesRead_;
            }

            if ((from_bitField1_ & 256) != 0) {
               result.shuffleRemoteReqsDuration_ = this.shuffleRemoteReqsDuration_;
            }

            if ((from_bitField1_ & 512) != 0) {
               result.shuffleMergedRemoteReqsDuration_ = this.shuffleMergedRemoteReqsDuration_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof CachedQuantile) {
               return this.mergeFrom((CachedQuantile)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(CachedQuantile other) {
            if (other == StoreTypes.CachedQuantile.getDefaultInstance()) {
               return this;
            } else {
               if (other.getStageId() != 0L) {
                  this.setStageId(other.getStageId());
               }

               if (other.getStageAttemptId() != 0) {
                  this.setStageAttemptId(other.getStageAttemptId());
               }

               if (other.hasQuantile()) {
                  this.quantile_ = other.quantile_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (other.getTaskCount() != 0L) {
                  this.setTaskCount(other.getTaskCount());
               }

               if (other.getDuration() != (double)0.0F) {
                  this.setDuration(other.getDuration());
               }

               if (other.getExecutorDeserializeTime() != (double)0.0F) {
                  this.setExecutorDeserializeTime(other.getExecutorDeserializeTime());
               }

               if (other.getExecutorDeserializeCpuTime() != (double)0.0F) {
                  this.setExecutorDeserializeCpuTime(other.getExecutorDeserializeCpuTime());
               }

               if (other.getExecutorRunTime() != (double)0.0F) {
                  this.setExecutorRunTime(other.getExecutorRunTime());
               }

               if (other.getExecutorCpuTime() != (double)0.0F) {
                  this.setExecutorCpuTime(other.getExecutorCpuTime());
               }

               if (other.getResultSize() != (double)0.0F) {
                  this.setResultSize(other.getResultSize());
               }

               if (other.getJvmGcTime() != (double)0.0F) {
                  this.setJvmGcTime(other.getJvmGcTime());
               }

               if (other.getResultSerializationTime() != (double)0.0F) {
                  this.setResultSerializationTime(other.getResultSerializationTime());
               }

               if (other.getGettingResultTime() != (double)0.0F) {
                  this.setGettingResultTime(other.getGettingResultTime());
               }

               if (other.getSchedulerDelay() != (double)0.0F) {
                  this.setSchedulerDelay(other.getSchedulerDelay());
               }

               if (other.getPeakExecutionMemory() != (double)0.0F) {
                  this.setPeakExecutionMemory(other.getPeakExecutionMemory());
               }

               if (other.getMemoryBytesSpilled() != (double)0.0F) {
                  this.setMemoryBytesSpilled(other.getMemoryBytesSpilled());
               }

               if (other.getDiskBytesSpilled() != (double)0.0F) {
                  this.setDiskBytesSpilled(other.getDiskBytesSpilled());
               }

               if (other.getBytesRead() != (double)0.0F) {
                  this.setBytesRead(other.getBytesRead());
               }

               if (other.getRecordsRead() != (double)0.0F) {
                  this.setRecordsRead(other.getRecordsRead());
               }

               if (other.getBytesWritten() != (double)0.0F) {
                  this.setBytesWritten(other.getBytesWritten());
               }

               if (other.getRecordsWritten() != (double)0.0F) {
                  this.setRecordsWritten(other.getRecordsWritten());
               }

               if (other.getShuffleReadBytes() != (double)0.0F) {
                  this.setShuffleReadBytes(other.getShuffleReadBytes());
               }

               if (other.getShuffleRecordsRead() != (double)0.0F) {
                  this.setShuffleRecordsRead(other.getShuffleRecordsRead());
               }

               if (other.getShuffleRemoteBlocksFetched() != (double)0.0F) {
                  this.setShuffleRemoteBlocksFetched(other.getShuffleRemoteBlocksFetched());
               }

               if (other.getShuffleLocalBlocksFetched() != (double)0.0F) {
                  this.setShuffleLocalBlocksFetched(other.getShuffleLocalBlocksFetched());
               }

               if (other.getShuffleFetchWaitTime() != (double)0.0F) {
                  this.setShuffleFetchWaitTime(other.getShuffleFetchWaitTime());
               }

               if (other.getShuffleRemoteBytesRead() != (double)0.0F) {
                  this.setShuffleRemoteBytesRead(other.getShuffleRemoteBytesRead());
               }

               if (other.getShuffleRemoteBytesReadToDisk() != (double)0.0F) {
                  this.setShuffleRemoteBytesReadToDisk(other.getShuffleRemoteBytesReadToDisk());
               }

               if (other.getShuffleTotalBlocksFetched() != (double)0.0F) {
                  this.setShuffleTotalBlocksFetched(other.getShuffleTotalBlocksFetched());
               }

               if (other.getShuffleWriteBytes() != (double)0.0F) {
                  this.setShuffleWriteBytes(other.getShuffleWriteBytes());
               }

               if (other.getShuffleWriteRecords() != (double)0.0F) {
                  this.setShuffleWriteRecords(other.getShuffleWriteRecords());
               }

               if (other.getShuffleWriteTime() != (double)0.0F) {
                  this.setShuffleWriteTime(other.getShuffleWriteTime());
               }

               if (other.getShuffleCorruptMergedBlockChunks() != (double)0.0F) {
                  this.setShuffleCorruptMergedBlockChunks(other.getShuffleCorruptMergedBlockChunks());
               }

               if (other.getShuffleMergedFetchFallbackCount() != (double)0.0F) {
                  this.setShuffleMergedFetchFallbackCount(other.getShuffleMergedFetchFallbackCount());
               }

               if (other.getShuffleMergedRemoteBlocksFetched() != (double)0.0F) {
                  this.setShuffleMergedRemoteBlocksFetched(other.getShuffleMergedRemoteBlocksFetched());
               }

               if (other.getShuffleMergedLocalBlocksFetched() != (double)0.0F) {
                  this.setShuffleMergedLocalBlocksFetched(other.getShuffleMergedLocalBlocksFetched());
               }

               if (other.getShuffleMergedRemoteChunksFetched() != (double)0.0F) {
                  this.setShuffleMergedRemoteChunksFetched(other.getShuffleMergedRemoteChunksFetched());
               }

               if (other.getShuffleMergedLocalChunksFetched() != (double)0.0F) {
                  this.setShuffleMergedLocalChunksFetched(other.getShuffleMergedLocalChunksFetched());
               }

               if (other.getShuffleMergedRemoteBytesRead() != (double)0.0F) {
                  this.setShuffleMergedRemoteBytesRead(other.getShuffleMergedRemoteBytesRead());
               }

               if (other.getShuffleMergedLocalBytesRead() != (double)0.0F) {
                  this.setShuffleMergedLocalBytesRead(other.getShuffleMergedLocalBytesRead());
               }

               if (other.getShuffleRemoteReqsDuration() != (double)0.0F) {
                  this.setShuffleRemoteReqsDuration(other.getShuffleRemoteReqsDuration());
               }

               if (other.getShuffleMergedRemoteReqsDuration() != (double)0.0F) {
                  this.setShuffleMergedRemoteReqsDuration(other.getShuffleMergedRemoteReqsDuration());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.stageId_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.stageAttemptId_ = input.readInt32();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.quantile_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.taskCount_ = input.readInt64();
                           this.bitField0_ |= 8;
                           break;
                        case 41:
                           this.duration_ = input.readDouble();
                           this.bitField0_ |= 16;
                           break;
                        case 49:
                           this.executorDeserializeTime_ = input.readDouble();
                           this.bitField0_ |= 32;
                           break;
                        case 57:
                           this.executorDeserializeCpuTime_ = input.readDouble();
                           this.bitField0_ |= 64;
                           break;
                        case 65:
                           this.executorRunTime_ = input.readDouble();
                           this.bitField0_ |= 128;
                           break;
                        case 73:
                           this.executorCpuTime_ = input.readDouble();
                           this.bitField0_ |= 256;
                           break;
                        case 81:
                           this.resultSize_ = input.readDouble();
                           this.bitField0_ |= 512;
                           break;
                        case 89:
                           this.jvmGcTime_ = input.readDouble();
                           this.bitField0_ |= 1024;
                           break;
                        case 97:
                           this.resultSerializationTime_ = input.readDouble();
                           this.bitField0_ |= 2048;
                           break;
                        case 105:
                           this.gettingResultTime_ = input.readDouble();
                           this.bitField0_ |= 4096;
                           break;
                        case 113:
                           this.schedulerDelay_ = input.readDouble();
                           this.bitField0_ |= 8192;
                           break;
                        case 121:
                           this.peakExecutionMemory_ = input.readDouble();
                           this.bitField0_ |= 16384;
                           break;
                        case 129:
                           this.memoryBytesSpilled_ = input.readDouble();
                           this.bitField0_ |= 32768;
                           break;
                        case 137:
                           this.diskBytesSpilled_ = input.readDouble();
                           this.bitField0_ |= 65536;
                           break;
                        case 145:
                           this.bytesRead_ = input.readDouble();
                           this.bitField0_ |= 131072;
                           break;
                        case 153:
                           this.recordsRead_ = input.readDouble();
                           this.bitField0_ |= 262144;
                           break;
                        case 161:
                           this.bytesWritten_ = input.readDouble();
                           this.bitField0_ |= 524288;
                           break;
                        case 169:
                           this.recordsWritten_ = input.readDouble();
                           this.bitField0_ |= 1048576;
                           break;
                        case 177:
                           this.shuffleReadBytes_ = input.readDouble();
                           this.bitField0_ |= 2097152;
                           break;
                        case 185:
                           this.shuffleRecordsRead_ = input.readDouble();
                           this.bitField0_ |= 4194304;
                           break;
                        case 193:
                           this.shuffleRemoteBlocksFetched_ = input.readDouble();
                           this.bitField0_ |= 8388608;
                           break;
                        case 201:
                           this.shuffleLocalBlocksFetched_ = input.readDouble();
                           this.bitField0_ |= 16777216;
                           break;
                        case 209:
                           this.shuffleFetchWaitTime_ = input.readDouble();
                           this.bitField0_ |= 33554432;
                           break;
                        case 217:
                           this.shuffleRemoteBytesRead_ = input.readDouble();
                           this.bitField0_ |= 67108864;
                           break;
                        case 225:
                           this.shuffleRemoteBytesReadToDisk_ = input.readDouble();
                           this.bitField0_ |= 134217728;
                           break;
                        case 233:
                           this.shuffleTotalBlocksFetched_ = input.readDouble();
                           this.bitField0_ |= 268435456;
                           break;
                        case 241:
                           this.shuffleWriteBytes_ = input.readDouble();
                           this.bitField0_ |= 536870912;
                           break;
                        case 249:
                           this.shuffleWriteRecords_ = input.readDouble();
                           this.bitField0_ |= 1073741824;
                           break;
                        case 257:
                           this.shuffleWriteTime_ = input.readDouble();
                           this.bitField0_ |= Integer.MIN_VALUE;
                           break;
                        case 265:
                           this.shuffleCorruptMergedBlockChunks_ = input.readDouble();
                           this.bitField1_ |= 1;
                           break;
                        case 273:
                           this.shuffleMergedFetchFallbackCount_ = input.readDouble();
                           this.bitField1_ |= 2;
                           break;
                        case 281:
                           this.shuffleMergedRemoteBlocksFetched_ = input.readDouble();
                           this.bitField1_ |= 4;
                           break;
                        case 289:
                           this.shuffleMergedLocalBlocksFetched_ = input.readDouble();
                           this.bitField1_ |= 8;
                           break;
                        case 297:
                           this.shuffleMergedRemoteChunksFetched_ = input.readDouble();
                           this.bitField1_ |= 16;
                           break;
                        case 305:
                           this.shuffleMergedLocalChunksFetched_ = input.readDouble();
                           this.bitField1_ |= 32;
                           break;
                        case 313:
                           this.shuffleMergedRemoteBytesRead_ = input.readDouble();
                           this.bitField1_ |= 64;
                           break;
                        case 321:
                           this.shuffleMergedLocalBytesRead_ = input.readDouble();
                           this.bitField1_ |= 128;
                           break;
                        case 329:
                           this.shuffleRemoteReqsDuration_ = input.readDouble();
                           this.bitField1_ |= 256;
                           break;
                        case 337:
                           this.shuffleMergedRemoteReqsDuration_ = input.readDouble();
                           this.bitField1_ |= 512;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getStageId() {
            return this.stageId_;
         }

         public Builder setStageId(long value) {
            this.stageId_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearStageId() {
            this.bitField0_ &= -2;
            this.stageId_ = 0L;
            this.onChanged();
            return this;
         }

         public int getStageAttemptId() {
            return this.stageAttemptId_;
         }

         public Builder setStageAttemptId(int value) {
            this.stageAttemptId_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearStageAttemptId() {
            this.bitField0_ &= -3;
            this.stageAttemptId_ = 0;
            this.onChanged();
            return this;
         }

         public boolean hasQuantile() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getQuantile() {
            Object ref = this.quantile_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.quantile_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getQuantileBytes() {
            Object ref = this.quantile_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.quantile_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setQuantile(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.quantile_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearQuantile() {
            this.quantile_ = StoreTypes.CachedQuantile.getDefaultInstance().getQuantile();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setQuantileBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.CachedQuantile.checkByteStringIsUtf8(value);
               this.quantile_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public long getTaskCount() {
            return this.taskCount_;
         }

         public Builder setTaskCount(long value) {
            this.taskCount_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearTaskCount() {
            this.bitField0_ &= -9;
            this.taskCount_ = 0L;
            this.onChanged();
            return this;
         }

         public double getDuration() {
            return this.duration_;
         }

         public Builder setDuration(double value) {
            this.duration_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearDuration() {
            this.bitField0_ &= -17;
            this.duration_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getExecutorDeserializeTime() {
            return this.executorDeserializeTime_;
         }

         public Builder setExecutorDeserializeTime(double value) {
            this.executorDeserializeTime_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorDeserializeTime() {
            this.bitField0_ &= -33;
            this.executorDeserializeTime_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getExecutorDeserializeCpuTime() {
            return this.executorDeserializeCpuTime_;
         }

         public Builder setExecutorDeserializeCpuTime(double value) {
            this.executorDeserializeCpuTime_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorDeserializeCpuTime() {
            this.bitField0_ &= -65;
            this.executorDeserializeCpuTime_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getExecutorRunTime() {
            return this.executorRunTime_;
         }

         public Builder setExecutorRunTime(double value) {
            this.executorRunTime_ = value;
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorRunTime() {
            this.bitField0_ &= -129;
            this.executorRunTime_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getExecutorCpuTime() {
            return this.executorCpuTime_;
         }

         public Builder setExecutorCpuTime(double value) {
            this.executorCpuTime_ = value;
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorCpuTime() {
            this.bitField0_ &= -257;
            this.executorCpuTime_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getResultSize() {
            return this.resultSize_;
         }

         public Builder setResultSize(double value) {
            this.resultSize_ = value;
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder clearResultSize() {
            this.bitField0_ &= -513;
            this.resultSize_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getJvmGcTime() {
            return this.jvmGcTime_;
         }

         public Builder setJvmGcTime(double value) {
            this.jvmGcTime_ = value;
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder clearJvmGcTime() {
            this.bitField0_ &= -1025;
            this.jvmGcTime_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getResultSerializationTime() {
            return this.resultSerializationTime_;
         }

         public Builder setResultSerializationTime(double value) {
            this.resultSerializationTime_ = value;
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder clearResultSerializationTime() {
            this.bitField0_ &= -2049;
            this.resultSerializationTime_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getGettingResultTime() {
            return this.gettingResultTime_;
         }

         public Builder setGettingResultTime(double value) {
            this.gettingResultTime_ = value;
            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder clearGettingResultTime() {
            this.bitField0_ &= -4097;
            this.gettingResultTime_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getSchedulerDelay() {
            return this.schedulerDelay_;
         }

         public Builder setSchedulerDelay(double value) {
            this.schedulerDelay_ = value;
            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder clearSchedulerDelay() {
            this.bitField0_ &= -8193;
            this.schedulerDelay_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getPeakExecutionMemory() {
            return this.peakExecutionMemory_;
         }

         public Builder setPeakExecutionMemory(double value) {
            this.peakExecutionMemory_ = value;
            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder clearPeakExecutionMemory() {
            this.bitField0_ &= -16385;
            this.peakExecutionMemory_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getMemoryBytesSpilled() {
            return this.memoryBytesSpilled_;
         }

         public Builder setMemoryBytesSpilled(double value) {
            this.memoryBytesSpilled_ = value;
            this.bitField0_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryBytesSpilled() {
            this.bitField0_ &= -32769;
            this.memoryBytesSpilled_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getDiskBytesSpilled() {
            return this.diskBytesSpilled_;
         }

         public Builder setDiskBytesSpilled(double value) {
            this.diskBytesSpilled_ = value;
            this.bitField0_ |= 65536;
            this.onChanged();
            return this;
         }

         public Builder clearDiskBytesSpilled() {
            this.bitField0_ &= -65537;
            this.diskBytesSpilled_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getBytesRead() {
            return this.bytesRead_;
         }

         public Builder setBytesRead(double value) {
            this.bytesRead_ = value;
            this.bitField0_ |= 131072;
            this.onChanged();
            return this;
         }

         public Builder clearBytesRead() {
            this.bitField0_ &= -131073;
            this.bytesRead_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getRecordsRead() {
            return this.recordsRead_;
         }

         public Builder setRecordsRead(double value) {
            this.recordsRead_ = value;
            this.bitField0_ |= 262144;
            this.onChanged();
            return this;
         }

         public Builder clearRecordsRead() {
            this.bitField0_ &= -262145;
            this.recordsRead_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getBytesWritten() {
            return this.bytesWritten_;
         }

         public Builder setBytesWritten(double value) {
            this.bytesWritten_ = value;
            this.bitField0_ |= 524288;
            this.onChanged();
            return this;
         }

         public Builder clearBytesWritten() {
            this.bitField0_ &= -524289;
            this.bytesWritten_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getRecordsWritten() {
            return this.recordsWritten_;
         }

         public Builder setRecordsWritten(double value) {
            this.recordsWritten_ = value;
            this.bitField0_ |= 1048576;
            this.onChanged();
            return this;
         }

         public Builder clearRecordsWritten() {
            this.bitField0_ &= -1048577;
            this.recordsWritten_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleReadBytes() {
            return this.shuffleReadBytes_;
         }

         public Builder setShuffleReadBytes(double value) {
            this.shuffleReadBytes_ = value;
            this.bitField0_ |= 2097152;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleReadBytes() {
            this.bitField0_ &= -2097153;
            this.shuffleReadBytes_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleRecordsRead() {
            return this.shuffleRecordsRead_;
         }

         public Builder setShuffleRecordsRead(double value) {
            this.shuffleRecordsRead_ = value;
            this.bitField0_ |= 4194304;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRecordsRead() {
            this.bitField0_ &= -4194305;
            this.shuffleRecordsRead_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleRemoteBlocksFetched() {
            return this.shuffleRemoteBlocksFetched_;
         }

         public Builder setShuffleRemoteBlocksFetched(double value) {
            this.shuffleRemoteBlocksFetched_ = value;
            this.bitField0_ |= 8388608;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteBlocksFetched() {
            this.bitField0_ &= -8388609;
            this.shuffleRemoteBlocksFetched_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleLocalBlocksFetched() {
            return this.shuffleLocalBlocksFetched_;
         }

         public Builder setShuffleLocalBlocksFetched(double value) {
            this.shuffleLocalBlocksFetched_ = value;
            this.bitField0_ |= 16777216;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleLocalBlocksFetched() {
            this.bitField0_ &= -16777217;
            this.shuffleLocalBlocksFetched_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleFetchWaitTime() {
            return this.shuffleFetchWaitTime_;
         }

         public Builder setShuffleFetchWaitTime(double value) {
            this.shuffleFetchWaitTime_ = value;
            this.bitField0_ |= 33554432;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleFetchWaitTime() {
            this.bitField0_ &= -33554433;
            this.shuffleFetchWaitTime_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleRemoteBytesRead() {
            return this.shuffleRemoteBytesRead_;
         }

         public Builder setShuffleRemoteBytesRead(double value) {
            this.shuffleRemoteBytesRead_ = value;
            this.bitField0_ |= 67108864;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteBytesRead() {
            this.bitField0_ &= -67108865;
            this.shuffleRemoteBytesRead_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleRemoteBytesReadToDisk() {
            return this.shuffleRemoteBytesReadToDisk_;
         }

         public Builder setShuffleRemoteBytesReadToDisk(double value) {
            this.shuffleRemoteBytesReadToDisk_ = value;
            this.bitField0_ |= 134217728;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteBytesReadToDisk() {
            this.bitField0_ &= -134217729;
            this.shuffleRemoteBytesReadToDisk_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleTotalBlocksFetched() {
            return this.shuffleTotalBlocksFetched_;
         }

         public Builder setShuffleTotalBlocksFetched(double value) {
            this.shuffleTotalBlocksFetched_ = value;
            this.bitField0_ |= 268435456;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleTotalBlocksFetched() {
            this.bitField0_ &= -268435457;
            this.shuffleTotalBlocksFetched_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleWriteBytes() {
            return this.shuffleWriteBytes_;
         }

         public Builder setShuffleWriteBytes(double value) {
            this.shuffleWriteBytes_ = value;
            this.bitField0_ |= 536870912;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleWriteBytes() {
            this.bitField0_ &= -536870913;
            this.shuffleWriteBytes_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleWriteRecords() {
            return this.shuffleWriteRecords_;
         }

         public Builder setShuffleWriteRecords(double value) {
            this.shuffleWriteRecords_ = value;
            this.bitField0_ |= 1073741824;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleWriteRecords() {
            this.bitField0_ &= -1073741825;
            this.shuffleWriteRecords_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleWriteTime() {
            return this.shuffleWriteTime_;
         }

         public Builder setShuffleWriteTime(double value) {
            this.shuffleWriteTime_ = value;
            this.bitField0_ |= Integer.MIN_VALUE;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleWriteTime() {
            this.bitField0_ &= Integer.MAX_VALUE;
            this.shuffleWriteTime_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleCorruptMergedBlockChunks() {
            return this.shuffleCorruptMergedBlockChunks_;
         }

         public Builder setShuffleCorruptMergedBlockChunks(double value) {
            this.shuffleCorruptMergedBlockChunks_ = value;
            this.bitField1_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleCorruptMergedBlockChunks() {
            this.bitField1_ &= -2;
            this.shuffleCorruptMergedBlockChunks_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleMergedFetchFallbackCount() {
            return this.shuffleMergedFetchFallbackCount_;
         }

         public Builder setShuffleMergedFetchFallbackCount(double value) {
            this.shuffleMergedFetchFallbackCount_ = value;
            this.bitField1_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedFetchFallbackCount() {
            this.bitField1_ &= -3;
            this.shuffleMergedFetchFallbackCount_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleMergedRemoteBlocksFetched() {
            return this.shuffleMergedRemoteBlocksFetched_;
         }

         public Builder setShuffleMergedRemoteBlocksFetched(double value) {
            this.shuffleMergedRemoteBlocksFetched_ = value;
            this.bitField1_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteBlocksFetched() {
            this.bitField1_ &= -5;
            this.shuffleMergedRemoteBlocksFetched_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleMergedLocalBlocksFetched() {
            return this.shuffleMergedLocalBlocksFetched_;
         }

         public Builder setShuffleMergedLocalBlocksFetched(double value) {
            this.shuffleMergedLocalBlocksFetched_ = value;
            this.bitField1_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedLocalBlocksFetched() {
            this.bitField1_ &= -9;
            this.shuffleMergedLocalBlocksFetched_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleMergedRemoteChunksFetched() {
            return this.shuffleMergedRemoteChunksFetched_;
         }

         public Builder setShuffleMergedRemoteChunksFetched(double value) {
            this.shuffleMergedRemoteChunksFetched_ = value;
            this.bitField1_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteChunksFetched() {
            this.bitField1_ &= -17;
            this.shuffleMergedRemoteChunksFetched_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleMergedLocalChunksFetched() {
            return this.shuffleMergedLocalChunksFetched_;
         }

         public Builder setShuffleMergedLocalChunksFetched(double value) {
            this.shuffleMergedLocalChunksFetched_ = value;
            this.bitField1_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedLocalChunksFetched() {
            this.bitField1_ &= -33;
            this.shuffleMergedLocalChunksFetched_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleMergedRemoteBytesRead() {
            return this.shuffleMergedRemoteBytesRead_;
         }

         public Builder setShuffleMergedRemoteBytesRead(double value) {
            this.shuffleMergedRemoteBytesRead_ = value;
            this.bitField1_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteBytesRead() {
            this.bitField1_ &= -65;
            this.shuffleMergedRemoteBytesRead_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleMergedLocalBytesRead() {
            return this.shuffleMergedLocalBytesRead_;
         }

         public Builder setShuffleMergedLocalBytesRead(double value) {
            this.shuffleMergedLocalBytesRead_ = value;
            this.bitField1_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedLocalBytesRead() {
            this.bitField1_ &= -129;
            this.shuffleMergedLocalBytesRead_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleRemoteReqsDuration() {
            return this.shuffleRemoteReqsDuration_;
         }

         public Builder setShuffleRemoteReqsDuration(double value) {
            this.shuffleRemoteReqsDuration_ = value;
            this.bitField1_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteReqsDuration() {
            this.bitField1_ &= -257;
            this.shuffleRemoteReqsDuration_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getShuffleMergedRemoteReqsDuration() {
            return this.shuffleMergedRemoteReqsDuration_;
         }

         public Builder setShuffleMergedRemoteReqsDuration(double value) {
            this.shuffleMergedRemoteReqsDuration_ = value;
            this.bitField1_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteReqsDuration() {
            this.bitField1_ &= -513;
            this.shuffleMergedRemoteReqsDuration_ = (double)0.0F;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class SpeculationStageSummary extends GeneratedMessage implements SpeculationStageSummaryOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int NUM_TASKS_FIELD_NUMBER = 1;
      private int numTasks_ = 0;
      public static final int NUM_ACTIVE_TASKS_FIELD_NUMBER = 2;
      private int numActiveTasks_ = 0;
      public static final int NUM_COMPLETED_TASKS_FIELD_NUMBER = 3;
      private int numCompletedTasks_ = 0;
      public static final int NUM_FAILED_TASKS_FIELD_NUMBER = 4;
      private int numFailedTasks_ = 0;
      public static final int NUM_KILLED_TASKS_FIELD_NUMBER = 5;
      private int numKilledTasks_ = 0;
      private byte memoizedIsInitialized = -1;
      private static final SpeculationStageSummary DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private SpeculationStageSummary(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private SpeculationStageSummary() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SpeculationStageSummary_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SpeculationStageSummary_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeculationStageSummary.class, Builder.class);
      }

      public int getNumTasks() {
         return this.numTasks_;
      }

      public int getNumActiveTasks() {
         return this.numActiveTasks_;
      }

      public int getNumCompletedTasks() {
         return this.numCompletedTasks_;
      }

      public int getNumFailedTasks() {
         return this.numFailedTasks_;
      }

      public int getNumKilledTasks() {
         return this.numKilledTasks_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.numTasks_ != 0) {
            output.writeInt32(1, this.numTasks_);
         }

         if (this.numActiveTasks_ != 0) {
            output.writeInt32(2, this.numActiveTasks_);
         }

         if (this.numCompletedTasks_ != 0) {
            output.writeInt32(3, this.numCompletedTasks_);
         }

         if (this.numFailedTasks_ != 0) {
            output.writeInt32(4, this.numFailedTasks_);
         }

         if (this.numKilledTasks_ != 0) {
            output.writeInt32(5, this.numKilledTasks_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.numTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(1, this.numTasks_);
            }

            if (this.numActiveTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(2, this.numActiveTasks_);
            }

            if (this.numCompletedTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(3, this.numCompletedTasks_);
            }

            if (this.numFailedTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(4, this.numFailedTasks_);
            }

            if (this.numKilledTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(5, this.numKilledTasks_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof SpeculationStageSummary)) {
            return super.equals(obj);
         } else {
            SpeculationStageSummary other = (SpeculationStageSummary)obj;
            if (this.getNumTasks() != other.getNumTasks()) {
               return false;
            } else if (this.getNumActiveTasks() != other.getNumActiveTasks()) {
               return false;
            } else if (this.getNumCompletedTasks() != other.getNumCompletedTasks()) {
               return false;
            } else if (this.getNumFailedTasks() != other.getNumFailedTasks()) {
               return false;
            } else if (this.getNumKilledTasks() != other.getNumKilledTasks()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + this.getNumTasks();
            hash = 37 * hash + 2;
            hash = 53 * hash + this.getNumActiveTasks();
            hash = 37 * hash + 3;
            hash = 53 * hash + this.getNumCompletedTasks();
            hash = 37 * hash + 4;
            hash = 53 * hash + this.getNumFailedTasks();
            hash = 37 * hash + 5;
            hash = 53 * hash + this.getNumKilledTasks();
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static SpeculationStageSummary parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (SpeculationStageSummary)PARSER.parseFrom(data);
      }

      public static SpeculationStageSummary parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SpeculationStageSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SpeculationStageSummary parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (SpeculationStageSummary)PARSER.parseFrom(data);
      }

      public static SpeculationStageSummary parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SpeculationStageSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SpeculationStageSummary parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (SpeculationStageSummary)PARSER.parseFrom(data);
      }

      public static SpeculationStageSummary parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SpeculationStageSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SpeculationStageSummary parseFrom(InputStream input) throws IOException {
         return (SpeculationStageSummary)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SpeculationStageSummary parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SpeculationStageSummary)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static SpeculationStageSummary parseDelimitedFrom(InputStream input) throws IOException {
         return (SpeculationStageSummary)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static SpeculationStageSummary parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SpeculationStageSummary)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static SpeculationStageSummary parseFrom(CodedInputStream input) throws IOException {
         return (SpeculationStageSummary)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SpeculationStageSummary parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SpeculationStageSummary)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(SpeculationStageSummary prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static SpeculationStageSummary getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public SpeculationStageSummary getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", SpeculationStageSummary.class.getName());
         DEFAULT_INSTANCE = new SpeculationStageSummary();
         PARSER = new AbstractParser() {
            public SpeculationStageSummary parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.SpeculationStageSummary.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements SpeculationStageSummaryOrBuilder {
         private int bitField0_;
         private int numTasks_;
         private int numActiveTasks_;
         private int numCompletedTasks_;
         private int numFailedTasks_;
         private int numKilledTasks_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SpeculationStageSummary_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SpeculationStageSummary_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeculationStageSummary.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.numTasks_ = 0;
            this.numActiveTasks_ = 0;
            this.numCompletedTasks_ = 0;
            this.numFailedTasks_ = 0;
            this.numKilledTasks_ = 0;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SpeculationStageSummary_descriptor;
         }

         public SpeculationStageSummary getDefaultInstanceForType() {
            return StoreTypes.SpeculationStageSummary.getDefaultInstance();
         }

         public SpeculationStageSummary build() {
            SpeculationStageSummary result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public SpeculationStageSummary buildPartial() {
            SpeculationStageSummary result = new SpeculationStageSummary(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(SpeculationStageSummary result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.numTasks_ = this.numTasks_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.numActiveTasks_ = this.numActiveTasks_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.numCompletedTasks_ = this.numCompletedTasks_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.numFailedTasks_ = this.numFailedTasks_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.numKilledTasks_ = this.numKilledTasks_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof SpeculationStageSummary) {
               return this.mergeFrom((SpeculationStageSummary)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(SpeculationStageSummary other) {
            if (other == StoreTypes.SpeculationStageSummary.getDefaultInstance()) {
               return this;
            } else {
               if (other.getNumTasks() != 0) {
                  this.setNumTasks(other.getNumTasks());
               }

               if (other.getNumActiveTasks() != 0) {
                  this.setNumActiveTasks(other.getNumActiveTasks());
               }

               if (other.getNumCompletedTasks() != 0) {
                  this.setNumCompletedTasks(other.getNumCompletedTasks());
               }

               if (other.getNumFailedTasks() != 0) {
                  this.setNumFailedTasks(other.getNumFailedTasks());
               }

               if (other.getNumKilledTasks() != 0) {
                  this.setNumKilledTasks(other.getNumKilledTasks());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.numTasks_ = input.readInt32();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.numActiveTasks_ = input.readInt32();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.numCompletedTasks_ = input.readInt32();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.numFailedTasks_ = input.readInt32();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.numKilledTasks_ = input.readInt32();
                           this.bitField0_ |= 16;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public int getNumTasks() {
            return this.numTasks_;
         }

         public Builder setNumTasks(int value) {
            this.numTasks_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearNumTasks() {
            this.bitField0_ &= -2;
            this.numTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumActiveTasks() {
            return this.numActiveTasks_;
         }

         public Builder setNumActiveTasks(int value) {
            this.numActiveTasks_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearNumActiveTasks() {
            this.bitField0_ &= -3;
            this.numActiveTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumCompletedTasks() {
            return this.numCompletedTasks_;
         }

         public Builder setNumCompletedTasks(int value) {
            this.numCompletedTasks_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearNumCompletedTasks() {
            this.bitField0_ &= -5;
            this.numCompletedTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumFailedTasks() {
            return this.numFailedTasks_;
         }

         public Builder setNumFailedTasks(int value) {
            this.numFailedTasks_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearNumFailedTasks() {
            this.bitField0_ &= -9;
            this.numFailedTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumKilledTasks() {
            return this.numKilledTasks_;
         }

         public Builder setNumKilledTasks(int value) {
            this.numKilledTasks_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearNumKilledTasks() {
            this.bitField0_ &= -17;
            this.numKilledTasks_ = 0;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class SpeculationStageSummaryWrapper extends GeneratedMessage implements SpeculationStageSummaryWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int STAGE_ID_FIELD_NUMBER = 1;
      private long stageId_ = 0L;
      public static final int STAGE_ATTEMPT_ID_FIELD_NUMBER = 2;
      private int stageAttemptId_ = 0;
      public static final int INFO_FIELD_NUMBER = 3;
      private SpeculationStageSummary info_;
      private byte memoizedIsInitialized = -1;
      private static final SpeculationStageSummaryWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private SpeculationStageSummaryWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private SpeculationStageSummaryWrapper() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SpeculationStageSummaryWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SpeculationStageSummaryWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeculationStageSummaryWrapper.class, Builder.class);
      }

      public long getStageId() {
         return this.stageId_;
      }

      public int getStageAttemptId() {
         return this.stageAttemptId_;
      }

      public boolean hasInfo() {
         return (this.bitField0_ & 1) != 0;
      }

      public SpeculationStageSummary getInfo() {
         return this.info_ == null ? StoreTypes.SpeculationStageSummary.getDefaultInstance() : this.info_;
      }

      public SpeculationStageSummaryOrBuilder getInfoOrBuilder() {
         return this.info_ == null ? StoreTypes.SpeculationStageSummary.getDefaultInstance() : this.info_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.stageId_ != 0L) {
            output.writeInt64(1, this.stageId_);
         }

         if (this.stageAttemptId_ != 0) {
            output.writeInt32(2, this.stageAttemptId_);
         }

         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(3, this.getInfo());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.stageId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.stageId_);
            }

            if (this.stageAttemptId_ != 0) {
               size += CodedOutputStream.computeInt32Size(2, this.stageAttemptId_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(3, this.getInfo());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof SpeculationStageSummaryWrapper)) {
            return super.equals(obj);
         } else {
            SpeculationStageSummaryWrapper other = (SpeculationStageSummaryWrapper)obj;
            if (this.getStageId() != other.getStageId()) {
               return false;
            } else if (this.getStageAttemptId() != other.getStageAttemptId()) {
               return false;
            } else if (this.hasInfo() != other.hasInfo()) {
               return false;
            } else if (this.hasInfo() && !this.getInfo().equals(other.getInfo())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getStageId());
            hash = 37 * hash + 2;
            hash = 53 * hash + this.getStageAttemptId();
            if (this.hasInfo()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getInfo().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static SpeculationStageSummaryWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (SpeculationStageSummaryWrapper)PARSER.parseFrom(data);
      }

      public static SpeculationStageSummaryWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SpeculationStageSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SpeculationStageSummaryWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (SpeculationStageSummaryWrapper)PARSER.parseFrom(data);
      }

      public static SpeculationStageSummaryWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SpeculationStageSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SpeculationStageSummaryWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (SpeculationStageSummaryWrapper)PARSER.parseFrom(data);
      }

      public static SpeculationStageSummaryWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SpeculationStageSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SpeculationStageSummaryWrapper parseFrom(InputStream input) throws IOException {
         return (SpeculationStageSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SpeculationStageSummaryWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SpeculationStageSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static SpeculationStageSummaryWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (SpeculationStageSummaryWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static SpeculationStageSummaryWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SpeculationStageSummaryWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static SpeculationStageSummaryWrapper parseFrom(CodedInputStream input) throws IOException {
         return (SpeculationStageSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SpeculationStageSummaryWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SpeculationStageSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(SpeculationStageSummaryWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static SpeculationStageSummaryWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public SpeculationStageSummaryWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", SpeculationStageSummaryWrapper.class.getName());
         DEFAULT_INSTANCE = new SpeculationStageSummaryWrapper();
         PARSER = new AbstractParser() {
            public SpeculationStageSummaryWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.SpeculationStageSummaryWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements SpeculationStageSummaryWrapperOrBuilder {
         private int bitField0_;
         private long stageId_;
         private int stageAttemptId_;
         private SpeculationStageSummary info_;
         private SingleFieldBuilder infoBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SpeculationStageSummaryWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SpeculationStageSummaryWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeculationStageSummaryWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.SpeculationStageSummaryWrapper.alwaysUseFieldBuilders) {
               this.getInfoFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.stageId_ = 0L;
            this.stageAttemptId_ = 0;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SpeculationStageSummaryWrapper_descriptor;
         }

         public SpeculationStageSummaryWrapper getDefaultInstanceForType() {
            return StoreTypes.SpeculationStageSummaryWrapper.getDefaultInstance();
         }

         public SpeculationStageSummaryWrapper build() {
            SpeculationStageSummaryWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public SpeculationStageSummaryWrapper buildPartial() {
            SpeculationStageSummaryWrapper result = new SpeculationStageSummaryWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(SpeculationStageSummaryWrapper result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.stageId_ = this.stageId_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.stageAttemptId_ = this.stageAttemptId_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 4) != 0) {
               result.info_ = this.infoBuilder_ == null ? this.info_ : (SpeculationStageSummary)this.infoBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof SpeculationStageSummaryWrapper) {
               return this.mergeFrom((SpeculationStageSummaryWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(SpeculationStageSummaryWrapper other) {
            if (other == StoreTypes.SpeculationStageSummaryWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.getStageId() != 0L) {
                  this.setStageId(other.getStageId());
               }

               if (other.getStageAttemptId() != 0) {
                  this.setStageAttemptId(other.getStageAttemptId());
               }

               if (other.hasInfo()) {
                  this.mergeInfo(other.getInfo());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.stageId_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.stageAttemptId_ = input.readInt32();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           input.readMessage((MessageLite.Builder)this.getInfoFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 4;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getStageId() {
            return this.stageId_;
         }

         public Builder setStageId(long value) {
            this.stageId_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearStageId() {
            this.bitField0_ &= -2;
            this.stageId_ = 0L;
            this.onChanged();
            return this;
         }

         public int getStageAttemptId() {
            return this.stageAttemptId_;
         }

         public Builder setStageAttemptId(int value) {
            this.stageAttemptId_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearStageAttemptId() {
            this.bitField0_ &= -3;
            this.stageAttemptId_ = 0;
            this.onChanged();
            return this;
         }

         public boolean hasInfo() {
            return (this.bitField0_ & 4) != 0;
         }

         public SpeculationStageSummary getInfo() {
            if (this.infoBuilder_ == null) {
               return this.info_ == null ? StoreTypes.SpeculationStageSummary.getDefaultInstance() : this.info_;
            } else {
               return (SpeculationStageSummary)this.infoBuilder_.getMessage();
            }
         }

         public Builder setInfo(SpeculationStageSummary value) {
            if (this.infoBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.info_ = value;
            } else {
               this.infoBuilder_.setMessage(value);
            }

            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder setInfo(SpeculationStageSummary.Builder builderForValue) {
            if (this.infoBuilder_ == null) {
               this.info_ = builderForValue.build();
            } else {
               this.infoBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder mergeInfo(SpeculationStageSummary value) {
            if (this.infoBuilder_ == null) {
               if ((this.bitField0_ & 4) != 0 && this.info_ != null && this.info_ != StoreTypes.SpeculationStageSummary.getDefaultInstance()) {
                  this.getInfoBuilder().mergeFrom(value);
               } else {
                  this.info_ = value;
               }
            } else {
               this.infoBuilder_.mergeFrom(value);
            }

            if (this.info_ != null) {
               this.bitField0_ |= 4;
               this.onChanged();
            }

            return this;
         }

         public Builder clearInfo() {
            this.bitField0_ &= -5;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public SpeculationStageSummary.Builder getInfoBuilder() {
            this.bitField0_ |= 4;
            this.onChanged();
            return (SpeculationStageSummary.Builder)this.getInfoFieldBuilder().getBuilder();
         }

         public SpeculationStageSummaryOrBuilder getInfoOrBuilder() {
            if (this.infoBuilder_ != null) {
               return (SpeculationStageSummaryOrBuilder)this.infoBuilder_.getMessageOrBuilder();
            } else {
               return this.info_ == null ? StoreTypes.SpeculationStageSummary.getDefaultInstance() : this.info_;
            }
         }

         private SingleFieldBuilder getInfoFieldBuilder() {
            if (this.infoBuilder_ == null) {
               this.infoBuilder_ = new SingleFieldBuilder(this.getInfo(), this.getParentForChildren(), this.isClean());
               this.info_ = null;
            }

            return this.infoBuilder_;
         }
      }
   }

   public static final class ProcessSummary extends GeneratedMessage implements ProcessSummaryOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private volatile Object id_ = "";
      public static final int HOST_PORT_FIELD_NUMBER = 2;
      private volatile Object hostPort_ = "";
      public static final int IS_ACTIVE_FIELD_NUMBER = 3;
      private boolean isActive_ = false;
      public static final int TOTAL_CORES_FIELD_NUMBER = 4;
      private int totalCores_ = 0;
      public static final int ADD_TIME_FIELD_NUMBER = 5;
      private long addTime_ = 0L;
      public static final int REMOVE_TIME_FIELD_NUMBER = 6;
      private long removeTime_ = 0L;
      public static final int PROCESS_LOGS_FIELD_NUMBER = 7;
      private MapField processLogs_;
      private byte memoizedIsInitialized = -1;
      private static final ProcessSummary DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ProcessSummary(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ProcessSummary() {
         this.id_ = "";
         this.hostPort_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ProcessSummary_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 7 -> {
               return this.internalGetProcessLogs();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ProcessSummary_fieldAccessorTable.ensureFieldAccessorsInitialized(ProcessSummary.class, Builder.class);
      }

      public boolean hasId() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getId() {
         Object ref = this.id_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.id_ = s;
            return s;
         }
      }

      public ByteString getIdBytes() {
         Object ref = this.id_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.id_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasHostPort() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getHostPort() {
         Object ref = this.hostPort_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.hostPort_ = s;
            return s;
         }
      }

      public ByteString getHostPortBytes() {
         Object ref = this.hostPort_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.hostPort_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean getIsActive() {
         return this.isActive_;
      }

      public int getTotalCores() {
         return this.totalCores_;
      }

      public long getAddTime() {
         return this.addTime_;
      }

      public boolean hasRemoveTime() {
         return (this.bitField0_ & 4) != 0;
      }

      public long getRemoveTime() {
         return this.removeTime_;
      }

      private MapField internalGetProcessLogs() {
         return this.processLogs_ == null ? MapField.emptyMapField(StoreTypes.ProcessSummary.ProcessLogsDefaultEntryHolder.defaultEntry) : this.processLogs_;
      }

      public int getProcessLogsCount() {
         return this.internalGetProcessLogs().getMap().size();
      }

      public boolean containsProcessLogs(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetProcessLogs().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getProcessLogs() {
         return this.getProcessLogsMap();
      }

      public Map getProcessLogsMap() {
         return this.internalGetProcessLogs().getMap();
      }

      public String getProcessLogsOrDefault(String key, String defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetProcessLogs().getMap();
            return map.containsKey(key) ? (String)map.get(key) : defaultValue;
         }
      }

      public String getProcessLogsOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetProcessLogs().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (String)map.get(key);
            }
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.id_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 2, this.hostPort_);
         }

         if (this.isActive_) {
            output.writeBool(3, this.isActive_);
         }

         if (this.totalCores_ != 0) {
            output.writeInt32(4, this.totalCores_);
         }

         if (this.addTime_ != 0L) {
            output.writeInt64(5, this.addTime_);
         }

         if ((this.bitField0_ & 4) != 0) {
            output.writeInt64(6, this.removeTime_);
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetProcessLogs(), StoreTypes.ProcessSummary.ProcessLogsDefaultEntryHolder.defaultEntry, 7);
         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.id_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.hostPort_);
            }

            if (this.isActive_) {
               size += CodedOutputStream.computeBoolSize(3, this.isActive_);
            }

            if (this.totalCores_ != 0) {
               size += CodedOutputStream.computeInt32Size(4, this.totalCores_);
            }

            if (this.addTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.addTime_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += CodedOutputStream.computeInt64Size(6, this.removeTime_);
            }

            for(Map.Entry entry : this.internalGetProcessLogs().getMap().entrySet()) {
               MapEntry<String, String> processLogs__ = StoreTypes.ProcessSummary.ProcessLogsDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((String)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(7, processLogs__);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ProcessSummary)) {
            return super.equals(obj);
         } else {
            ProcessSummary other = (ProcessSummary)obj;
            if (this.hasId() != other.hasId()) {
               return false;
            } else if (this.hasId() && !this.getId().equals(other.getId())) {
               return false;
            } else if (this.hasHostPort() != other.hasHostPort()) {
               return false;
            } else if (this.hasHostPort() && !this.getHostPort().equals(other.getHostPort())) {
               return false;
            } else if (this.getIsActive() != other.getIsActive()) {
               return false;
            } else if (this.getTotalCores() != other.getTotalCores()) {
               return false;
            } else if (this.getAddTime() != other.getAddTime()) {
               return false;
            } else if (this.hasRemoveTime() != other.hasRemoveTime()) {
               return false;
            } else if (this.hasRemoveTime() && this.getRemoveTime() != other.getRemoveTime()) {
               return false;
            } else if (!this.internalGetProcessLogs().equals(other.internalGetProcessLogs())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasId()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getId().hashCode();
            }

            if (this.hasHostPort()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getHostPort().hashCode();
            }

            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashBoolean(this.getIsActive());
            hash = 37 * hash + 4;
            hash = 53 * hash + this.getTotalCores();
            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getAddTime());
            if (this.hasRemoveTime()) {
               hash = 37 * hash + 6;
               hash = 53 * hash + Internal.hashLong(this.getRemoveTime());
            }

            if (!this.internalGetProcessLogs().getMap().isEmpty()) {
               hash = 37 * hash + 7;
               hash = 53 * hash + this.internalGetProcessLogs().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ProcessSummary parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ProcessSummary)PARSER.parseFrom(data);
      }

      public static ProcessSummary parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ProcessSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ProcessSummary parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ProcessSummary)PARSER.parseFrom(data);
      }

      public static ProcessSummary parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ProcessSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ProcessSummary parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ProcessSummary)PARSER.parseFrom(data);
      }

      public static ProcessSummary parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ProcessSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ProcessSummary parseFrom(InputStream input) throws IOException {
         return (ProcessSummary)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ProcessSummary parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ProcessSummary)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ProcessSummary parseDelimitedFrom(InputStream input) throws IOException {
         return (ProcessSummary)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ProcessSummary parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ProcessSummary)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ProcessSummary parseFrom(CodedInputStream input) throws IOException {
         return (ProcessSummary)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ProcessSummary parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ProcessSummary)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ProcessSummary prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ProcessSummary getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ProcessSummary getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ProcessSummary.class.getName());
         DEFAULT_INSTANCE = new ProcessSummary();
         PARSER = new AbstractParser() {
            public ProcessSummary parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ProcessSummary.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      private static final class ProcessLogsDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_ProcessSummary_ProcessLogsEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.STRING, "");
         }
      }

      public static final class Builder extends GeneratedMessage.Builder implements ProcessSummaryOrBuilder {
         private int bitField0_;
         private Object id_ = "";
         private Object hostPort_ = "";
         private boolean isActive_;
         private int totalCores_;
         private long addTime_;
         private long removeTime_;
         private MapField processLogs_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ProcessSummary_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 7 -> {
                  return this.internalGetProcessLogs();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 7 -> {
                  return this.internalGetMutableProcessLogs();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ProcessSummary_fieldAccessorTable.ensureFieldAccessorsInitialized(ProcessSummary.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.id_ = "";
            this.hostPort_ = "";
            this.isActive_ = false;
            this.totalCores_ = 0;
            this.addTime_ = 0L;
            this.removeTime_ = 0L;
            this.internalGetMutableProcessLogs().clear();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ProcessSummary_descriptor;
         }

         public ProcessSummary getDefaultInstanceForType() {
            return StoreTypes.ProcessSummary.getDefaultInstance();
         }

         public ProcessSummary build() {
            ProcessSummary result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ProcessSummary buildPartial() {
            ProcessSummary result = new ProcessSummary(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ProcessSummary result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.id_ = this.id_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.hostPort_ = this.hostPort_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.isActive_ = this.isActive_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.totalCores_ = this.totalCores_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.addTime_ = this.addTime_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.removeTime_ = this.removeTime_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.processLogs_ = this.internalGetProcessLogs();
               result.processLogs_.makeImmutable();
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ProcessSummary) {
               return this.mergeFrom((ProcessSummary)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ProcessSummary other) {
            if (other == StoreTypes.ProcessSummary.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasId()) {
                  this.id_ = other.id_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.hasHostPort()) {
                  this.hostPort_ = other.hostPort_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.getIsActive()) {
                  this.setIsActive(other.getIsActive());
               }

               if (other.getTotalCores() != 0) {
                  this.setTotalCores(other.getTotalCores());
               }

               if (other.getAddTime() != 0L) {
                  this.setAddTime(other.getAddTime());
               }

               if (other.hasRemoveTime()) {
                  this.setRemoveTime(other.getRemoveTime());
               }

               this.internalGetMutableProcessLogs().mergeFrom(other.internalGetProcessLogs());
               this.bitField0_ |= 64;
               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.id_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.hostPort_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.isActive_ = input.readBool();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.totalCores_ = input.readInt32();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.addTime_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.removeTime_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 58:
                           MapEntry<String, String> processLogs__ = (MapEntry)input.readMessage(StoreTypes.ProcessSummary.ProcessLogsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableProcessLogs().getMutableMap().put((String)processLogs__.getKey(), (String)processLogs__.getValue());
                           this.bitField0_ |= 64;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasId() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getId() {
            Object ref = this.id_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.id_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.id_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.id_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearId() {
            this.id_ = StoreTypes.ProcessSummary.getDefaultInstance().getId();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ProcessSummary.checkByteStringIsUtf8(value);
               this.id_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public boolean hasHostPort() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getHostPort() {
            Object ref = this.hostPort_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.hostPort_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getHostPortBytes() {
            Object ref = this.hostPort_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.hostPort_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setHostPort(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.hostPort_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearHostPort() {
            this.hostPort_ = StoreTypes.ProcessSummary.getDefaultInstance().getHostPort();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setHostPortBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ProcessSummary.checkByteStringIsUtf8(value);
               this.hostPort_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean getIsActive() {
            return this.isActive_;
         }

         public Builder setIsActive(boolean value) {
            this.isActive_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearIsActive() {
            this.bitField0_ &= -5;
            this.isActive_ = false;
            this.onChanged();
            return this;
         }

         public int getTotalCores() {
            return this.totalCores_;
         }

         public Builder setTotalCores(int value) {
            this.totalCores_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearTotalCores() {
            this.bitField0_ &= -9;
            this.totalCores_ = 0;
            this.onChanged();
            return this;
         }

         public long getAddTime() {
            return this.addTime_;
         }

         public Builder setAddTime(long value) {
            this.addTime_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearAddTime() {
            this.bitField0_ &= -17;
            this.addTime_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasRemoveTime() {
            return (this.bitField0_ & 32) != 0;
         }

         public long getRemoveTime() {
            return this.removeTime_;
         }

         public Builder setRemoveTime(long value) {
            this.removeTime_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearRemoveTime() {
            this.bitField0_ &= -33;
            this.removeTime_ = 0L;
            this.onChanged();
            return this;
         }

         private MapField internalGetProcessLogs() {
            return this.processLogs_ == null ? MapField.emptyMapField(StoreTypes.ProcessSummary.ProcessLogsDefaultEntryHolder.defaultEntry) : this.processLogs_;
         }

         private MapField internalGetMutableProcessLogs() {
            if (this.processLogs_ == null) {
               this.processLogs_ = MapField.newMapField(StoreTypes.ProcessSummary.ProcessLogsDefaultEntryHolder.defaultEntry);
            }

            if (!this.processLogs_.isMutable()) {
               this.processLogs_ = this.processLogs_.copy();
            }

            this.bitField0_ |= 64;
            this.onChanged();
            return this.processLogs_;
         }

         public int getProcessLogsCount() {
            return this.internalGetProcessLogs().getMap().size();
         }

         public boolean containsProcessLogs(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetProcessLogs().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getProcessLogs() {
            return this.getProcessLogsMap();
         }

         public Map getProcessLogsMap() {
            return this.internalGetProcessLogs().getMap();
         }

         public String getProcessLogsOrDefault(String key, String defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetProcessLogs().getMap();
               return map.containsKey(key) ? (String)map.get(key) : defaultValue;
            }
         }

         public String getProcessLogsOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetProcessLogs().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (String)map.get(key);
               }
            }
         }

         public Builder clearProcessLogs() {
            this.bitField0_ &= -65;
            this.internalGetMutableProcessLogs().getMutableMap().clear();
            return this;
         }

         public Builder removeProcessLogs(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableProcessLogs().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableProcessLogs() {
            this.bitField0_ |= 64;
            return this.internalGetMutableProcessLogs().getMutableMap();
         }

         public Builder putProcessLogs(String key, String value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableProcessLogs().getMutableMap().put(key, value);
               this.bitField0_ |= 64;
               return this;
            }
         }

         public Builder putAllProcessLogs(Map values) {
            this.internalGetMutableProcessLogs().getMutableMap().putAll(values);
            this.bitField0_ |= 64;
            return this;
         }
      }
   }

   public static final class ProcessSummaryWrapper extends GeneratedMessage implements ProcessSummaryWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int INFO_FIELD_NUMBER = 1;
      private ProcessSummary info_;
      private byte memoizedIsInitialized = -1;
      private static final ProcessSummaryWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ProcessSummaryWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ProcessSummaryWrapper() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ProcessSummaryWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ProcessSummaryWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ProcessSummaryWrapper.class, Builder.class);
      }

      public boolean hasInfo() {
         return (this.bitField0_ & 1) != 0;
      }

      public ProcessSummary getInfo() {
         return this.info_ == null ? StoreTypes.ProcessSummary.getDefaultInstance() : this.info_;
      }

      public ProcessSummaryOrBuilder getInfoOrBuilder() {
         return this.info_ == null ? StoreTypes.ProcessSummary.getDefaultInstance() : this.info_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(1, this.getInfo());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(1, this.getInfo());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ProcessSummaryWrapper)) {
            return super.equals(obj);
         } else {
            ProcessSummaryWrapper other = (ProcessSummaryWrapper)obj;
            if (this.hasInfo() != other.hasInfo()) {
               return false;
            } else if (this.hasInfo() && !this.getInfo().equals(other.getInfo())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasInfo()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getInfo().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ProcessSummaryWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ProcessSummaryWrapper)PARSER.parseFrom(data);
      }

      public static ProcessSummaryWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ProcessSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ProcessSummaryWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ProcessSummaryWrapper)PARSER.parseFrom(data);
      }

      public static ProcessSummaryWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ProcessSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ProcessSummaryWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ProcessSummaryWrapper)PARSER.parseFrom(data);
      }

      public static ProcessSummaryWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ProcessSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ProcessSummaryWrapper parseFrom(InputStream input) throws IOException {
         return (ProcessSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ProcessSummaryWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ProcessSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ProcessSummaryWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (ProcessSummaryWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ProcessSummaryWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ProcessSummaryWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ProcessSummaryWrapper parseFrom(CodedInputStream input) throws IOException {
         return (ProcessSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ProcessSummaryWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ProcessSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ProcessSummaryWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ProcessSummaryWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ProcessSummaryWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ProcessSummaryWrapper.class.getName());
         DEFAULT_INSTANCE = new ProcessSummaryWrapper();
         PARSER = new AbstractParser() {
            public ProcessSummaryWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ProcessSummaryWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ProcessSummaryWrapperOrBuilder {
         private int bitField0_;
         private ProcessSummary info_;
         private SingleFieldBuilder infoBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ProcessSummaryWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ProcessSummaryWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ProcessSummaryWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ProcessSummaryWrapper.alwaysUseFieldBuilders) {
               this.getInfoFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ProcessSummaryWrapper_descriptor;
         }

         public ProcessSummaryWrapper getDefaultInstanceForType() {
            return StoreTypes.ProcessSummaryWrapper.getDefaultInstance();
         }

         public ProcessSummaryWrapper build() {
            ProcessSummaryWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ProcessSummaryWrapper buildPartial() {
            ProcessSummaryWrapper result = new ProcessSummaryWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ProcessSummaryWrapper result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.info_ = this.infoBuilder_ == null ? this.info_ : (ProcessSummary)this.infoBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ProcessSummaryWrapper) {
               return this.mergeFrom((ProcessSummaryWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ProcessSummaryWrapper other) {
            if (other == StoreTypes.ProcessSummaryWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasInfo()) {
                  this.mergeInfo(other.getInfo());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           input.readMessage((MessageLite.Builder)this.getInfoFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasInfo() {
            return (this.bitField0_ & 1) != 0;
         }

         public ProcessSummary getInfo() {
            if (this.infoBuilder_ == null) {
               return this.info_ == null ? StoreTypes.ProcessSummary.getDefaultInstance() : this.info_;
            } else {
               return (ProcessSummary)this.infoBuilder_.getMessage();
            }
         }

         public Builder setInfo(ProcessSummary value) {
            if (this.infoBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.info_ = value;
            } else {
               this.infoBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder setInfo(ProcessSummary.Builder builderForValue) {
            if (this.infoBuilder_ == null) {
               this.info_ = builderForValue.build();
            } else {
               this.infoBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder mergeInfo(ProcessSummary value) {
            if (this.infoBuilder_ == null) {
               if ((this.bitField0_ & 1) != 0 && this.info_ != null && this.info_ != StoreTypes.ProcessSummary.getDefaultInstance()) {
                  this.getInfoBuilder().mergeFrom(value);
               } else {
                  this.info_ = value;
               }
            } else {
               this.infoBuilder_.mergeFrom(value);
            }

            if (this.info_ != null) {
               this.bitField0_ |= 1;
               this.onChanged();
            }

            return this;
         }

         public Builder clearInfo() {
            this.bitField0_ &= -2;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ProcessSummary.Builder getInfoBuilder() {
            this.bitField0_ |= 1;
            this.onChanged();
            return (ProcessSummary.Builder)this.getInfoFieldBuilder().getBuilder();
         }

         public ProcessSummaryOrBuilder getInfoOrBuilder() {
            if (this.infoBuilder_ != null) {
               return (ProcessSummaryOrBuilder)this.infoBuilder_.getMessageOrBuilder();
            } else {
               return this.info_ == null ? StoreTypes.ProcessSummary.getDefaultInstance() : this.info_;
            }
         }

         private SingleFieldBuilder getInfoFieldBuilder() {
            if (this.infoBuilder_ == null) {
               this.infoBuilder_ = new SingleFieldBuilder(this.getInfo(), this.getParentForChildren(), this.isClean());
               this.info_ = null;
            }

            return this.infoBuilder_;
         }
      }
   }

   public static final class MemoryMetrics extends GeneratedMessage implements MemoryMetricsOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int USED_ON_HEAP_STORAGE_MEMORY_FIELD_NUMBER = 1;
      private long usedOnHeapStorageMemory_ = 0L;
      public static final int USED_OFF_HEAP_STORAGE_MEMORY_FIELD_NUMBER = 2;
      private long usedOffHeapStorageMemory_ = 0L;
      public static final int TOTAL_ON_HEAP_STORAGE_MEMORY_FIELD_NUMBER = 3;
      private long totalOnHeapStorageMemory_ = 0L;
      public static final int TOTAL_OFF_HEAP_STORAGE_MEMORY_FIELD_NUMBER = 4;
      private long totalOffHeapStorageMemory_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final MemoryMetrics DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private MemoryMetrics(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private MemoryMetrics() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_MemoryMetrics_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_MemoryMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(MemoryMetrics.class, Builder.class);
      }

      public long getUsedOnHeapStorageMemory() {
         return this.usedOnHeapStorageMemory_;
      }

      public long getUsedOffHeapStorageMemory() {
         return this.usedOffHeapStorageMemory_;
      }

      public long getTotalOnHeapStorageMemory() {
         return this.totalOnHeapStorageMemory_;
      }

      public long getTotalOffHeapStorageMemory() {
         return this.totalOffHeapStorageMemory_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.usedOnHeapStorageMemory_ != 0L) {
            output.writeInt64(1, this.usedOnHeapStorageMemory_);
         }

         if (this.usedOffHeapStorageMemory_ != 0L) {
            output.writeInt64(2, this.usedOffHeapStorageMemory_);
         }

         if (this.totalOnHeapStorageMemory_ != 0L) {
            output.writeInt64(3, this.totalOnHeapStorageMemory_);
         }

         if (this.totalOffHeapStorageMemory_ != 0L) {
            output.writeInt64(4, this.totalOffHeapStorageMemory_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.usedOnHeapStorageMemory_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.usedOnHeapStorageMemory_);
            }

            if (this.usedOffHeapStorageMemory_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.usedOffHeapStorageMemory_);
            }

            if (this.totalOnHeapStorageMemory_ != 0L) {
               size += CodedOutputStream.computeInt64Size(3, this.totalOnHeapStorageMemory_);
            }

            if (this.totalOffHeapStorageMemory_ != 0L) {
               size += CodedOutputStream.computeInt64Size(4, this.totalOffHeapStorageMemory_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof MemoryMetrics)) {
            return super.equals(obj);
         } else {
            MemoryMetrics other = (MemoryMetrics)obj;
            if (this.getUsedOnHeapStorageMemory() != other.getUsedOnHeapStorageMemory()) {
               return false;
            } else if (this.getUsedOffHeapStorageMemory() != other.getUsedOffHeapStorageMemory()) {
               return false;
            } else if (this.getTotalOnHeapStorageMemory() != other.getTotalOnHeapStorageMemory()) {
               return false;
            } else if (this.getTotalOffHeapStorageMemory() != other.getTotalOffHeapStorageMemory()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getUsedOnHeapStorageMemory());
            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getUsedOffHeapStorageMemory());
            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashLong(this.getTotalOnHeapStorageMemory());
            hash = 37 * hash + 4;
            hash = 53 * hash + Internal.hashLong(this.getTotalOffHeapStorageMemory());
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static MemoryMetrics parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (MemoryMetrics)PARSER.parseFrom(data);
      }

      public static MemoryMetrics parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (MemoryMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static MemoryMetrics parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (MemoryMetrics)PARSER.parseFrom(data);
      }

      public static MemoryMetrics parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (MemoryMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static MemoryMetrics parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (MemoryMetrics)PARSER.parseFrom(data);
      }

      public static MemoryMetrics parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (MemoryMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static MemoryMetrics parseFrom(InputStream input) throws IOException {
         return (MemoryMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static MemoryMetrics parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (MemoryMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static MemoryMetrics parseDelimitedFrom(InputStream input) throws IOException {
         return (MemoryMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static MemoryMetrics parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (MemoryMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static MemoryMetrics parseFrom(CodedInputStream input) throws IOException {
         return (MemoryMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static MemoryMetrics parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (MemoryMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(MemoryMetrics prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static MemoryMetrics getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public MemoryMetrics getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", MemoryMetrics.class.getName());
         DEFAULT_INSTANCE = new MemoryMetrics();
         PARSER = new AbstractParser() {
            public MemoryMetrics parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.MemoryMetrics.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements MemoryMetricsOrBuilder {
         private int bitField0_;
         private long usedOnHeapStorageMemory_;
         private long usedOffHeapStorageMemory_;
         private long totalOnHeapStorageMemory_;
         private long totalOffHeapStorageMemory_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_MemoryMetrics_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_MemoryMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(MemoryMetrics.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.usedOnHeapStorageMemory_ = 0L;
            this.usedOffHeapStorageMemory_ = 0L;
            this.totalOnHeapStorageMemory_ = 0L;
            this.totalOffHeapStorageMemory_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_MemoryMetrics_descriptor;
         }

         public MemoryMetrics getDefaultInstanceForType() {
            return StoreTypes.MemoryMetrics.getDefaultInstance();
         }

         public MemoryMetrics build() {
            MemoryMetrics result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public MemoryMetrics buildPartial() {
            MemoryMetrics result = new MemoryMetrics(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(MemoryMetrics result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.usedOnHeapStorageMemory_ = this.usedOnHeapStorageMemory_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.usedOffHeapStorageMemory_ = this.usedOffHeapStorageMemory_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.totalOnHeapStorageMemory_ = this.totalOnHeapStorageMemory_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.totalOffHeapStorageMemory_ = this.totalOffHeapStorageMemory_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof MemoryMetrics) {
               return this.mergeFrom((MemoryMetrics)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(MemoryMetrics other) {
            if (other == StoreTypes.MemoryMetrics.getDefaultInstance()) {
               return this;
            } else {
               if (other.getUsedOnHeapStorageMemory() != 0L) {
                  this.setUsedOnHeapStorageMemory(other.getUsedOnHeapStorageMemory());
               }

               if (other.getUsedOffHeapStorageMemory() != 0L) {
                  this.setUsedOffHeapStorageMemory(other.getUsedOffHeapStorageMemory());
               }

               if (other.getTotalOnHeapStorageMemory() != 0L) {
                  this.setTotalOnHeapStorageMemory(other.getTotalOnHeapStorageMemory());
               }

               if (other.getTotalOffHeapStorageMemory() != 0L) {
                  this.setTotalOffHeapStorageMemory(other.getTotalOffHeapStorageMemory());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.usedOnHeapStorageMemory_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.usedOffHeapStorageMemory_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.totalOnHeapStorageMemory_ = input.readInt64();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.totalOffHeapStorageMemory_ = input.readInt64();
                           this.bitField0_ |= 8;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getUsedOnHeapStorageMemory() {
            return this.usedOnHeapStorageMemory_;
         }

         public Builder setUsedOnHeapStorageMemory(long value) {
            this.usedOnHeapStorageMemory_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearUsedOnHeapStorageMemory() {
            this.bitField0_ &= -2;
            this.usedOnHeapStorageMemory_ = 0L;
            this.onChanged();
            return this;
         }

         public long getUsedOffHeapStorageMemory() {
            return this.usedOffHeapStorageMemory_;
         }

         public Builder setUsedOffHeapStorageMemory(long value) {
            this.usedOffHeapStorageMemory_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearUsedOffHeapStorageMemory() {
            this.bitField0_ &= -3;
            this.usedOffHeapStorageMemory_ = 0L;
            this.onChanged();
            return this;
         }

         public long getTotalOnHeapStorageMemory() {
            return this.totalOnHeapStorageMemory_;
         }

         public Builder setTotalOnHeapStorageMemory(long value) {
            this.totalOnHeapStorageMemory_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearTotalOnHeapStorageMemory() {
            this.bitField0_ &= -5;
            this.totalOnHeapStorageMemory_ = 0L;
            this.onChanged();
            return this;
         }

         public long getTotalOffHeapStorageMemory() {
            return this.totalOffHeapStorageMemory_;
         }

         public Builder setTotalOffHeapStorageMemory(long value) {
            this.totalOffHeapStorageMemory_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearTotalOffHeapStorageMemory() {
            this.bitField0_ &= -9;
            this.totalOffHeapStorageMemory_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class ResourceInformation extends GeneratedMessage implements ResourceInformationOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      private volatile Object name_ = "";
      public static final int ADDRESSES_FIELD_NUMBER = 2;
      private LazyStringArrayList addresses_ = LazyStringArrayList.emptyList();
      private byte memoizedIsInitialized = -1;
      private static final ResourceInformation DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ResourceInformation(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ResourceInformation() {
         this.name_ = "";
         this.addresses_ = LazyStringArrayList.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceInformation_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceInformation_fieldAccessorTable.ensureFieldAccessorsInitialized(ResourceInformation.class, Builder.class);
      }

      public boolean hasName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public ProtocolStringList getAddressesList() {
         return this.addresses_;
      }

      public int getAddressesCount() {
         return this.addresses_.size();
      }

      public String getAddresses(int index) {
         return this.addresses_.get(index);
      }

      public ByteString getAddressesBytes(int index) {
         return this.addresses_.getByteString(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.name_);
         }

         for(int i = 0; i < this.addresses_.size(); ++i) {
            GeneratedMessage.writeString(output, 2, this.addresses_.getRaw(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.name_);
            }

            int dataSize = 0;

            for(int i = 0; i < this.addresses_.size(); ++i) {
               dataSize += computeStringSizeNoTag(this.addresses_.getRaw(i));
            }

            size += dataSize;
            size += 1 * this.getAddressesList().size();
            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ResourceInformation)) {
            return super.equals(obj);
         } else {
            ResourceInformation other = (ResourceInformation)obj;
            if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (!this.getAddressesList().equals(other.getAddressesList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasName()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.getAddressesCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getAddressesList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ResourceInformation parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ResourceInformation)PARSER.parseFrom(data);
      }

      public static ResourceInformation parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ResourceInformation)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ResourceInformation parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ResourceInformation)PARSER.parseFrom(data);
      }

      public static ResourceInformation parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ResourceInformation)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ResourceInformation parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ResourceInformation)PARSER.parseFrom(data);
      }

      public static ResourceInformation parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ResourceInformation)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ResourceInformation parseFrom(InputStream input) throws IOException {
         return (ResourceInformation)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ResourceInformation parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ResourceInformation)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ResourceInformation parseDelimitedFrom(InputStream input) throws IOException {
         return (ResourceInformation)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ResourceInformation parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ResourceInformation)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ResourceInformation parseFrom(CodedInputStream input) throws IOException {
         return (ResourceInformation)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ResourceInformation parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ResourceInformation)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ResourceInformation prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ResourceInformation getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ResourceInformation getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ResourceInformation.class.getName());
         DEFAULT_INSTANCE = new ResourceInformation();
         PARSER = new AbstractParser() {
            public ResourceInformation parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ResourceInformation.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ResourceInformationOrBuilder {
         private int bitField0_;
         private Object name_ = "";
         private LazyStringArrayList addresses_ = LazyStringArrayList.emptyList();

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceInformation_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceInformation_fieldAccessorTable.ensureFieldAccessorsInitialized(ResourceInformation.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.name_ = "";
            this.addresses_ = LazyStringArrayList.emptyList();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ResourceInformation_descriptor;
         }

         public ResourceInformation getDefaultInstanceForType() {
            return StoreTypes.ResourceInformation.getDefaultInstance();
         }

         public ResourceInformation build() {
            ResourceInformation result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ResourceInformation buildPartial() {
            ResourceInformation result = new ResourceInformation(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ResourceInformation result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               this.addresses_.makeImmutable();
               result.addresses_ = this.addresses_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ResourceInformation) {
               return this.mergeFrom((ResourceInformation)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ResourceInformation other) {
            if (other == StoreTypes.ResourceInformation.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (!other.addresses_.isEmpty()) {
                  if (this.addresses_.isEmpty()) {
                     this.addresses_ = other.addresses_;
                     this.bitField0_ |= 2;
                  } else {
                     this.ensureAddressesIsMutable();
                     this.addresses_.addAll(other.addresses_);
                  }

                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           String s = input.readStringRequireUtf8();
                           this.ensureAddressesIsMutable();
                           this.addresses_.add(s);
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasName() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.ResourceInformation.getDefaultInstance().getName();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ResourceInformation.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         private void ensureAddressesIsMutable() {
            if (!this.addresses_.isModifiable()) {
               this.addresses_ = new LazyStringArrayList(this.addresses_);
            }

            this.bitField0_ |= 2;
         }

         public ProtocolStringList getAddressesList() {
            this.addresses_.makeImmutable();
            return this.addresses_;
         }

         public int getAddressesCount() {
            return this.addresses_.size();
         }

         public String getAddresses(int index) {
            return this.addresses_.get(index);
         }

         public ByteString getAddressesBytes(int index) {
            return this.addresses_.getByteString(index);
         }

         public Builder setAddresses(int index, String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.ensureAddressesIsMutable();
               this.addresses_.set(index, value);
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder addAddresses(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.ensureAddressesIsMutable();
               this.addresses_.add(value);
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder addAllAddresses(Iterable values) {
            this.ensureAddressesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.addresses_);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearAddresses() {
            this.addresses_ = LazyStringArrayList.emptyList();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder addAddressesBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ResourceInformation.checkByteStringIsUtf8(value);
               this.ensureAddressesIsMutable();
               this.addresses_.add(value);
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }
      }
   }

   public static final class ExecutorSummary extends GeneratedMessage implements ExecutorSummaryOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private volatile Object id_ = "";
      public static final int HOST_PORT_FIELD_NUMBER = 2;
      private volatile Object hostPort_ = "";
      public static final int IS_ACTIVE_FIELD_NUMBER = 3;
      private boolean isActive_ = false;
      public static final int RDD_BLOCKS_FIELD_NUMBER = 4;
      private int rddBlocks_ = 0;
      public static final int MEMORY_USED_FIELD_NUMBER = 5;
      private long memoryUsed_ = 0L;
      public static final int DISK_USED_FIELD_NUMBER = 6;
      private long diskUsed_ = 0L;
      public static final int TOTAL_CORES_FIELD_NUMBER = 7;
      private int totalCores_ = 0;
      public static final int MAX_TASKS_FIELD_NUMBER = 8;
      private int maxTasks_ = 0;
      public static final int ACTIVE_TASKS_FIELD_NUMBER = 9;
      private int activeTasks_ = 0;
      public static final int FAILED_TASKS_FIELD_NUMBER = 10;
      private int failedTasks_ = 0;
      public static final int COMPLETED_TASKS_FIELD_NUMBER = 11;
      private int completedTasks_ = 0;
      public static final int TOTAL_TASKS_FIELD_NUMBER = 12;
      private int totalTasks_ = 0;
      public static final int TOTAL_DURATION_FIELD_NUMBER = 13;
      private long totalDuration_ = 0L;
      public static final int TOTAL_GC_TIME_FIELD_NUMBER = 14;
      private long totalGcTime_ = 0L;
      public static final int TOTAL_INPUT_BYTES_FIELD_NUMBER = 15;
      private long totalInputBytes_ = 0L;
      public static final int TOTAL_SHUFFLE_READ_FIELD_NUMBER = 16;
      private long totalShuffleRead_ = 0L;
      public static final int TOTAL_SHUFFLE_WRITE_FIELD_NUMBER = 17;
      private long totalShuffleWrite_ = 0L;
      public static final int IS_BLACKLISTED_FIELD_NUMBER = 18;
      private boolean isBlacklisted_ = false;
      public static final int MAX_MEMORY_FIELD_NUMBER = 19;
      private long maxMemory_ = 0L;
      public static final int ADD_TIME_FIELD_NUMBER = 20;
      private long addTime_ = 0L;
      public static final int REMOVE_TIME_FIELD_NUMBER = 21;
      private long removeTime_ = 0L;
      public static final int REMOVE_REASON_FIELD_NUMBER = 22;
      private volatile Object removeReason_ = "";
      public static final int EXECUTOR_LOGS_FIELD_NUMBER = 23;
      private MapField executorLogs_;
      public static final int MEMORY_METRICS_FIELD_NUMBER = 24;
      private MemoryMetrics memoryMetrics_;
      public static final int BLACKLISTED_IN_STAGES_FIELD_NUMBER = 25;
      private Internal.LongList blacklistedInStages_ = emptyLongList();
      private int blacklistedInStagesMemoizedSerializedSize = -1;
      public static final int PEAK_MEMORY_METRICS_FIELD_NUMBER = 26;
      private ExecutorMetrics peakMemoryMetrics_;
      public static final int ATTRIBUTES_FIELD_NUMBER = 27;
      private MapField attributes_;
      public static final int RESOURCES_FIELD_NUMBER = 28;
      private MapField resources_;
      public static final int RESOURCE_PROFILE_ID_FIELD_NUMBER = 29;
      private int resourceProfileId_ = 0;
      public static final int IS_EXCLUDED_FIELD_NUMBER = 30;
      private boolean isExcluded_ = false;
      public static final int EXCLUDED_IN_STAGES_FIELD_NUMBER = 31;
      private Internal.LongList excludedInStages_ = emptyLongList();
      private int excludedInStagesMemoizedSerializedSize = -1;
      private byte memoizedIsInitialized = -1;
      private static final ExecutorSummary DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ExecutorSummary(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ExecutorSummary() {
         this.id_ = "";
         this.hostPort_ = "";
         this.removeReason_ = "";
         this.blacklistedInStages_ = emptyLongList();
         this.excludedInStages_ = emptyLongList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummary_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 23 -> {
               return this.internalGetExecutorLogs();
            }
            case 27 -> {
               return this.internalGetAttributes();
            }
            case 28 -> {
               return this.internalGetResources();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummary_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorSummary.class, Builder.class);
      }

      public boolean hasId() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getId() {
         Object ref = this.id_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.id_ = s;
            return s;
         }
      }

      public ByteString getIdBytes() {
         Object ref = this.id_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.id_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasHostPort() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getHostPort() {
         Object ref = this.hostPort_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.hostPort_ = s;
            return s;
         }
      }

      public ByteString getHostPortBytes() {
         Object ref = this.hostPort_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.hostPort_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean getIsActive() {
         return this.isActive_;
      }

      public int getRddBlocks() {
         return this.rddBlocks_;
      }

      public long getMemoryUsed() {
         return this.memoryUsed_;
      }

      public long getDiskUsed() {
         return this.diskUsed_;
      }

      public int getTotalCores() {
         return this.totalCores_;
      }

      public int getMaxTasks() {
         return this.maxTasks_;
      }

      public int getActiveTasks() {
         return this.activeTasks_;
      }

      public int getFailedTasks() {
         return this.failedTasks_;
      }

      public int getCompletedTasks() {
         return this.completedTasks_;
      }

      public int getTotalTasks() {
         return this.totalTasks_;
      }

      public long getTotalDuration() {
         return this.totalDuration_;
      }

      public long getTotalGcTime() {
         return this.totalGcTime_;
      }

      public long getTotalInputBytes() {
         return this.totalInputBytes_;
      }

      public long getTotalShuffleRead() {
         return this.totalShuffleRead_;
      }

      public long getTotalShuffleWrite() {
         return this.totalShuffleWrite_;
      }

      public boolean getIsBlacklisted() {
         return this.isBlacklisted_;
      }

      public long getMaxMemory() {
         return this.maxMemory_;
      }

      public long getAddTime() {
         return this.addTime_;
      }

      public boolean hasRemoveTime() {
         return (this.bitField0_ & 4) != 0;
      }

      public long getRemoveTime() {
         return this.removeTime_;
      }

      public boolean hasRemoveReason() {
         return (this.bitField0_ & 8) != 0;
      }

      public String getRemoveReason() {
         Object ref = this.removeReason_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.removeReason_ = s;
            return s;
         }
      }

      public ByteString getRemoveReasonBytes() {
         Object ref = this.removeReason_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.removeReason_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      private MapField internalGetExecutorLogs() {
         return this.executorLogs_ == null ? MapField.emptyMapField(StoreTypes.ExecutorSummary.ExecutorLogsDefaultEntryHolder.defaultEntry) : this.executorLogs_;
      }

      public int getExecutorLogsCount() {
         return this.internalGetExecutorLogs().getMap().size();
      }

      public boolean containsExecutorLogs(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetExecutorLogs().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getExecutorLogs() {
         return this.getExecutorLogsMap();
      }

      public Map getExecutorLogsMap() {
         return this.internalGetExecutorLogs().getMap();
      }

      public String getExecutorLogsOrDefault(String key, String defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetExecutorLogs().getMap();
            return map.containsKey(key) ? (String)map.get(key) : defaultValue;
         }
      }

      public String getExecutorLogsOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetExecutorLogs().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (String)map.get(key);
            }
         }
      }

      public boolean hasMemoryMetrics() {
         return (this.bitField0_ & 16) != 0;
      }

      public MemoryMetrics getMemoryMetrics() {
         return this.memoryMetrics_ == null ? StoreTypes.MemoryMetrics.getDefaultInstance() : this.memoryMetrics_;
      }

      public MemoryMetricsOrBuilder getMemoryMetricsOrBuilder() {
         return this.memoryMetrics_ == null ? StoreTypes.MemoryMetrics.getDefaultInstance() : this.memoryMetrics_;
      }

      public List getBlacklistedInStagesList() {
         return this.blacklistedInStages_;
      }

      public int getBlacklistedInStagesCount() {
         return this.blacklistedInStages_.size();
      }

      public long getBlacklistedInStages(int index) {
         return this.blacklistedInStages_.getLong(index);
      }

      public boolean hasPeakMemoryMetrics() {
         return (this.bitField0_ & 32) != 0;
      }

      public ExecutorMetrics getPeakMemoryMetrics() {
         return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakMemoryMetrics_;
      }

      public ExecutorMetricsOrBuilder getPeakMemoryMetricsOrBuilder() {
         return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakMemoryMetrics_;
      }

      private MapField internalGetAttributes() {
         return this.attributes_ == null ? MapField.emptyMapField(StoreTypes.ExecutorSummary.AttributesDefaultEntryHolder.defaultEntry) : this.attributes_;
      }

      public int getAttributesCount() {
         return this.internalGetAttributes().getMap().size();
      }

      public boolean containsAttributes(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetAttributes().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getAttributes() {
         return this.getAttributesMap();
      }

      public Map getAttributesMap() {
         return this.internalGetAttributes().getMap();
      }

      public String getAttributesOrDefault(String key, String defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetAttributes().getMap();
            return map.containsKey(key) ? (String)map.get(key) : defaultValue;
         }
      }

      public String getAttributesOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetAttributes().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (String)map.get(key);
            }
         }
      }

      private MapField internalGetResources() {
         return this.resources_ == null ? MapField.emptyMapField(StoreTypes.ExecutorSummary.ResourcesDefaultEntryHolder.defaultEntry) : this.resources_;
      }

      public int getResourcesCount() {
         return this.internalGetResources().getMap().size();
      }

      public boolean containsResources(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetResources().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getResources() {
         return this.getResourcesMap();
      }

      public Map getResourcesMap() {
         return this.internalGetResources().getMap();
      }

      public ResourceInformation getResourcesOrDefault(String key, ResourceInformation defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, ResourceInformation> map = this.internalGetResources().getMap();
            return map.containsKey(key) ? (ResourceInformation)map.get(key) : defaultValue;
         }
      }

      public ResourceInformation getResourcesOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, ResourceInformation> map = this.internalGetResources().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (ResourceInformation)map.get(key);
            }
         }
      }

      public int getResourceProfileId() {
         return this.resourceProfileId_;
      }

      public boolean getIsExcluded() {
         return this.isExcluded_;
      }

      public List getExcludedInStagesList() {
         return this.excludedInStages_;
      }

      public int getExcludedInStagesCount() {
         return this.excludedInStages_.size();
      }

      public long getExcludedInStages(int index) {
         return this.excludedInStages_.getLong(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.id_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 2, this.hostPort_);
         }

         if (this.isActive_) {
            output.writeBool(3, this.isActive_);
         }

         if (this.rddBlocks_ != 0) {
            output.writeInt32(4, this.rddBlocks_);
         }

         if (this.memoryUsed_ != 0L) {
            output.writeInt64(5, this.memoryUsed_);
         }

         if (this.diskUsed_ != 0L) {
            output.writeInt64(6, this.diskUsed_);
         }

         if (this.totalCores_ != 0) {
            output.writeInt32(7, this.totalCores_);
         }

         if (this.maxTasks_ != 0) {
            output.writeInt32(8, this.maxTasks_);
         }

         if (this.activeTasks_ != 0) {
            output.writeInt32(9, this.activeTasks_);
         }

         if (this.failedTasks_ != 0) {
            output.writeInt32(10, this.failedTasks_);
         }

         if (this.completedTasks_ != 0) {
            output.writeInt32(11, this.completedTasks_);
         }

         if (this.totalTasks_ != 0) {
            output.writeInt32(12, this.totalTasks_);
         }

         if (this.totalDuration_ != 0L) {
            output.writeInt64(13, this.totalDuration_);
         }

         if (this.totalGcTime_ != 0L) {
            output.writeInt64(14, this.totalGcTime_);
         }

         if (this.totalInputBytes_ != 0L) {
            output.writeInt64(15, this.totalInputBytes_);
         }

         if (this.totalShuffleRead_ != 0L) {
            output.writeInt64(16, this.totalShuffleRead_);
         }

         if (this.totalShuffleWrite_ != 0L) {
            output.writeInt64(17, this.totalShuffleWrite_);
         }

         if (this.isBlacklisted_) {
            output.writeBool(18, this.isBlacklisted_);
         }

         if (this.maxMemory_ != 0L) {
            output.writeInt64(19, this.maxMemory_);
         }

         if (this.addTime_ != 0L) {
            output.writeInt64(20, this.addTime_);
         }

         if ((this.bitField0_ & 4) != 0) {
            output.writeInt64(21, this.removeTime_);
         }

         if ((this.bitField0_ & 8) != 0) {
            GeneratedMessage.writeString(output, 22, this.removeReason_);
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetExecutorLogs(), StoreTypes.ExecutorSummary.ExecutorLogsDefaultEntryHolder.defaultEntry, 23);
         if ((this.bitField0_ & 16) != 0) {
            output.writeMessage(24, this.getMemoryMetrics());
         }

         if (this.getBlacklistedInStagesList().size() > 0) {
            output.writeUInt32NoTag(202);
            output.writeUInt32NoTag(this.blacklistedInStagesMemoizedSerializedSize);
         }

         for(int i = 0; i < this.blacklistedInStages_.size(); ++i) {
            output.writeInt64NoTag(this.blacklistedInStages_.getLong(i));
         }

         if ((this.bitField0_ & 32) != 0) {
            output.writeMessage(26, this.getPeakMemoryMetrics());
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetAttributes(), StoreTypes.ExecutorSummary.AttributesDefaultEntryHolder.defaultEntry, 27);
         GeneratedMessage.serializeStringMapTo(output, this.internalGetResources(), StoreTypes.ExecutorSummary.ResourcesDefaultEntryHolder.defaultEntry, 28);
         if (this.resourceProfileId_ != 0) {
            output.writeInt32(29, this.resourceProfileId_);
         }

         if (this.isExcluded_) {
            output.writeBool(30, this.isExcluded_);
         }

         if (this.getExcludedInStagesList().size() > 0) {
            output.writeUInt32NoTag(250);
            output.writeUInt32NoTag(this.excludedInStagesMemoizedSerializedSize);
         }

         for(int i = 0; i < this.excludedInStages_.size(); ++i) {
            output.writeInt64NoTag(this.excludedInStages_.getLong(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.id_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.hostPort_);
            }

            if (this.isActive_) {
               size += CodedOutputStream.computeBoolSize(3, this.isActive_);
            }

            if (this.rddBlocks_ != 0) {
               size += CodedOutputStream.computeInt32Size(4, this.rddBlocks_);
            }

            if (this.memoryUsed_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.memoryUsed_);
            }

            if (this.diskUsed_ != 0L) {
               size += CodedOutputStream.computeInt64Size(6, this.diskUsed_);
            }

            if (this.totalCores_ != 0) {
               size += CodedOutputStream.computeInt32Size(7, this.totalCores_);
            }

            if (this.maxTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(8, this.maxTasks_);
            }

            if (this.activeTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(9, this.activeTasks_);
            }

            if (this.failedTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(10, this.failedTasks_);
            }

            if (this.completedTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(11, this.completedTasks_);
            }

            if (this.totalTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(12, this.totalTasks_);
            }

            if (this.totalDuration_ != 0L) {
               size += CodedOutputStream.computeInt64Size(13, this.totalDuration_);
            }

            if (this.totalGcTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(14, this.totalGcTime_);
            }

            if (this.totalInputBytes_ != 0L) {
               size += CodedOutputStream.computeInt64Size(15, this.totalInputBytes_);
            }

            if (this.totalShuffleRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(16, this.totalShuffleRead_);
            }

            if (this.totalShuffleWrite_ != 0L) {
               size += CodedOutputStream.computeInt64Size(17, this.totalShuffleWrite_);
            }

            if (this.isBlacklisted_) {
               size += CodedOutputStream.computeBoolSize(18, this.isBlacklisted_);
            }

            if (this.maxMemory_ != 0L) {
               size += CodedOutputStream.computeInt64Size(19, this.maxMemory_);
            }

            if (this.addTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(20, this.addTime_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += CodedOutputStream.computeInt64Size(21, this.removeTime_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += GeneratedMessage.computeStringSize(22, this.removeReason_);
            }

            for(Map.Entry entry : this.internalGetExecutorLogs().getMap().entrySet()) {
               MapEntry<String, String> executorLogs__ = StoreTypes.ExecutorSummary.ExecutorLogsDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((String)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(23, executorLogs__);
            }

            if ((this.bitField0_ & 16) != 0) {
               size += CodedOutputStream.computeMessageSize(24, this.getMemoryMetrics());
            }

            int dataSize = 0;

            for(int i = 0; i < this.blacklistedInStages_.size(); ++i) {
               dataSize += CodedOutputStream.computeInt64SizeNoTag(this.blacklistedInStages_.getLong(i));
            }

            size += dataSize;
            if (!this.getBlacklistedInStagesList().isEmpty()) {
               size += 2;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.blacklistedInStagesMemoizedSerializedSize = dataSize;
            if ((this.bitField0_ & 32) != 0) {
               size += CodedOutputStream.computeMessageSize(26, this.getPeakMemoryMetrics());
            }

            for(Map.Entry entry : this.internalGetAttributes().getMap().entrySet()) {
               MapEntry<String, String> attributes__ = StoreTypes.ExecutorSummary.AttributesDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((String)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(27, attributes__);
            }

            for(Map.Entry entry : this.internalGetResources().getMap().entrySet()) {
               MapEntry<String, ResourceInformation> resources__ = StoreTypes.ExecutorSummary.ResourcesDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((ResourceInformation)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(28, resources__);
            }

            if (this.resourceProfileId_ != 0) {
               size += CodedOutputStream.computeInt32Size(29, this.resourceProfileId_);
            }

            if (this.isExcluded_) {
               size += CodedOutputStream.computeBoolSize(30, this.isExcluded_);
            }

            dataSize = 0;

            for(int i = 0; i < this.excludedInStages_.size(); ++i) {
               dataSize += CodedOutputStream.computeInt64SizeNoTag(this.excludedInStages_.getLong(i));
            }

            size += dataSize;
            if (!this.getExcludedInStagesList().isEmpty()) {
               size += 2;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.excludedInStagesMemoizedSerializedSize = dataSize;
            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ExecutorSummary)) {
            return super.equals(obj);
         } else {
            ExecutorSummary other = (ExecutorSummary)obj;
            if (this.hasId() != other.hasId()) {
               return false;
            } else if (this.hasId() && !this.getId().equals(other.getId())) {
               return false;
            } else if (this.hasHostPort() != other.hasHostPort()) {
               return false;
            } else if (this.hasHostPort() && !this.getHostPort().equals(other.getHostPort())) {
               return false;
            } else if (this.getIsActive() != other.getIsActive()) {
               return false;
            } else if (this.getRddBlocks() != other.getRddBlocks()) {
               return false;
            } else if (this.getMemoryUsed() != other.getMemoryUsed()) {
               return false;
            } else if (this.getDiskUsed() != other.getDiskUsed()) {
               return false;
            } else if (this.getTotalCores() != other.getTotalCores()) {
               return false;
            } else if (this.getMaxTasks() != other.getMaxTasks()) {
               return false;
            } else if (this.getActiveTasks() != other.getActiveTasks()) {
               return false;
            } else if (this.getFailedTasks() != other.getFailedTasks()) {
               return false;
            } else if (this.getCompletedTasks() != other.getCompletedTasks()) {
               return false;
            } else if (this.getTotalTasks() != other.getTotalTasks()) {
               return false;
            } else if (this.getTotalDuration() != other.getTotalDuration()) {
               return false;
            } else if (this.getTotalGcTime() != other.getTotalGcTime()) {
               return false;
            } else if (this.getTotalInputBytes() != other.getTotalInputBytes()) {
               return false;
            } else if (this.getTotalShuffleRead() != other.getTotalShuffleRead()) {
               return false;
            } else if (this.getTotalShuffleWrite() != other.getTotalShuffleWrite()) {
               return false;
            } else if (this.getIsBlacklisted() != other.getIsBlacklisted()) {
               return false;
            } else if (this.getMaxMemory() != other.getMaxMemory()) {
               return false;
            } else if (this.getAddTime() != other.getAddTime()) {
               return false;
            } else if (this.hasRemoveTime() != other.hasRemoveTime()) {
               return false;
            } else if (this.hasRemoveTime() && this.getRemoveTime() != other.getRemoveTime()) {
               return false;
            } else if (this.hasRemoveReason() != other.hasRemoveReason()) {
               return false;
            } else if (this.hasRemoveReason() && !this.getRemoveReason().equals(other.getRemoveReason())) {
               return false;
            } else if (!this.internalGetExecutorLogs().equals(other.internalGetExecutorLogs())) {
               return false;
            } else if (this.hasMemoryMetrics() != other.hasMemoryMetrics()) {
               return false;
            } else if (this.hasMemoryMetrics() && !this.getMemoryMetrics().equals(other.getMemoryMetrics())) {
               return false;
            } else if (!this.getBlacklistedInStagesList().equals(other.getBlacklistedInStagesList())) {
               return false;
            } else if (this.hasPeakMemoryMetrics() != other.hasPeakMemoryMetrics()) {
               return false;
            } else if (this.hasPeakMemoryMetrics() && !this.getPeakMemoryMetrics().equals(other.getPeakMemoryMetrics())) {
               return false;
            } else if (!this.internalGetAttributes().equals(other.internalGetAttributes())) {
               return false;
            } else if (!this.internalGetResources().equals(other.internalGetResources())) {
               return false;
            } else if (this.getResourceProfileId() != other.getResourceProfileId()) {
               return false;
            } else if (this.getIsExcluded() != other.getIsExcluded()) {
               return false;
            } else if (!this.getExcludedInStagesList().equals(other.getExcludedInStagesList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasId()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getId().hashCode();
            }

            if (this.hasHostPort()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getHostPort().hashCode();
            }

            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashBoolean(this.getIsActive());
            hash = 37 * hash + 4;
            hash = 53 * hash + this.getRddBlocks();
            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getMemoryUsed());
            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(this.getDiskUsed());
            hash = 37 * hash + 7;
            hash = 53 * hash + this.getTotalCores();
            hash = 37 * hash + 8;
            hash = 53 * hash + this.getMaxTasks();
            hash = 37 * hash + 9;
            hash = 53 * hash + this.getActiveTasks();
            hash = 37 * hash + 10;
            hash = 53 * hash + this.getFailedTasks();
            hash = 37 * hash + 11;
            hash = 53 * hash + this.getCompletedTasks();
            hash = 37 * hash + 12;
            hash = 53 * hash + this.getTotalTasks();
            hash = 37 * hash + 13;
            hash = 53 * hash + Internal.hashLong(this.getTotalDuration());
            hash = 37 * hash + 14;
            hash = 53 * hash + Internal.hashLong(this.getTotalGcTime());
            hash = 37 * hash + 15;
            hash = 53 * hash + Internal.hashLong(this.getTotalInputBytes());
            hash = 37 * hash + 16;
            hash = 53 * hash + Internal.hashLong(this.getTotalShuffleRead());
            hash = 37 * hash + 17;
            hash = 53 * hash + Internal.hashLong(this.getTotalShuffleWrite());
            hash = 37 * hash + 18;
            hash = 53 * hash + Internal.hashBoolean(this.getIsBlacklisted());
            hash = 37 * hash + 19;
            hash = 53 * hash + Internal.hashLong(this.getMaxMemory());
            hash = 37 * hash + 20;
            hash = 53 * hash + Internal.hashLong(this.getAddTime());
            if (this.hasRemoveTime()) {
               hash = 37 * hash + 21;
               hash = 53 * hash + Internal.hashLong(this.getRemoveTime());
            }

            if (this.hasRemoveReason()) {
               hash = 37 * hash + 22;
               hash = 53 * hash + this.getRemoveReason().hashCode();
            }

            if (!this.internalGetExecutorLogs().getMap().isEmpty()) {
               hash = 37 * hash + 23;
               hash = 53 * hash + this.internalGetExecutorLogs().hashCode();
            }

            if (this.hasMemoryMetrics()) {
               hash = 37 * hash + 24;
               hash = 53 * hash + this.getMemoryMetrics().hashCode();
            }

            if (this.getBlacklistedInStagesCount() > 0) {
               hash = 37 * hash + 25;
               hash = 53 * hash + this.getBlacklistedInStagesList().hashCode();
            }

            if (this.hasPeakMemoryMetrics()) {
               hash = 37 * hash + 26;
               hash = 53 * hash + this.getPeakMemoryMetrics().hashCode();
            }

            if (!this.internalGetAttributes().getMap().isEmpty()) {
               hash = 37 * hash + 27;
               hash = 53 * hash + this.internalGetAttributes().hashCode();
            }

            if (!this.internalGetResources().getMap().isEmpty()) {
               hash = 37 * hash + 28;
               hash = 53 * hash + this.internalGetResources().hashCode();
            }

            hash = 37 * hash + 29;
            hash = 53 * hash + this.getResourceProfileId();
            hash = 37 * hash + 30;
            hash = 53 * hash + Internal.hashBoolean(this.getIsExcluded());
            if (this.getExcludedInStagesCount() > 0) {
               hash = 37 * hash + 31;
               hash = 53 * hash + this.getExcludedInStagesList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ExecutorSummary parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ExecutorSummary)PARSER.parseFrom(data);
      }

      public static ExecutorSummary parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorSummary parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ExecutorSummary)PARSER.parseFrom(data);
      }

      public static ExecutorSummary parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorSummary parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ExecutorSummary)PARSER.parseFrom(data);
      }

      public static ExecutorSummary parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorSummary parseFrom(InputStream input) throws IOException {
         return (ExecutorSummary)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorSummary parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorSummary)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorSummary parseDelimitedFrom(InputStream input) throws IOException {
         return (ExecutorSummary)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ExecutorSummary parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorSummary)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorSummary parseFrom(CodedInputStream input) throws IOException {
         return (ExecutorSummary)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorSummary parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorSummary)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ExecutorSummary prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ExecutorSummary getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ExecutorSummary getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ExecutorSummary.class.getName());
         DEFAULT_INSTANCE = new ExecutorSummary();
         PARSER = new AbstractParser() {
            public ExecutorSummary parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ExecutorSummary.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      private static final class ExecutorLogsDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ExecutorLogsEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.STRING, "");
         }
      }

      private static final class AttributesDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummary_AttributesEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.STRING, "");
         }
      }

      private static final class ResourcesDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummary_ResourcesEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.MESSAGE, StoreTypes.ResourceInformation.getDefaultInstance());
         }
      }

      public static final class Builder extends GeneratedMessage.Builder implements ExecutorSummaryOrBuilder {
         private int bitField0_;
         private Object id_ = "";
         private Object hostPort_ = "";
         private boolean isActive_;
         private int rddBlocks_;
         private long memoryUsed_;
         private long diskUsed_;
         private int totalCores_;
         private int maxTasks_;
         private int activeTasks_;
         private int failedTasks_;
         private int completedTasks_;
         private int totalTasks_;
         private long totalDuration_;
         private long totalGcTime_;
         private long totalInputBytes_;
         private long totalShuffleRead_;
         private long totalShuffleWrite_;
         private boolean isBlacklisted_;
         private long maxMemory_;
         private long addTime_;
         private long removeTime_;
         private Object removeReason_ = "";
         private MapField executorLogs_;
         private MemoryMetrics memoryMetrics_;
         private SingleFieldBuilder memoryMetricsBuilder_;
         private Internal.LongList blacklistedInStages_ = StoreTypes.ExecutorSummary.emptyLongList();
         private ExecutorMetrics peakMemoryMetrics_;
         private SingleFieldBuilder peakMemoryMetricsBuilder_;
         private MapField attributes_;
         private static final ResourcesConverter resourcesConverter = new ResourcesConverter();
         private MapFieldBuilder resources_;
         private int resourceProfileId_;
         private boolean isExcluded_;
         private Internal.LongList excludedInStages_ = StoreTypes.ExecutorSummary.emptyLongList();

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummary_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 23 -> {
                  return this.internalGetExecutorLogs();
               }
               case 27 -> {
                  return this.internalGetAttributes();
               }
               case 28 -> {
                  return this.internalGetResources();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 23 -> {
                  return this.internalGetMutableExecutorLogs();
               }
               case 27 -> {
                  return this.internalGetMutableAttributes();
               }
               case 28 -> {
                  return this.internalGetMutableResources();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummary_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorSummary.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ExecutorSummary.alwaysUseFieldBuilders) {
               this.getMemoryMetricsFieldBuilder();
               this.getPeakMemoryMetricsFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.id_ = "";
            this.hostPort_ = "";
            this.isActive_ = false;
            this.rddBlocks_ = 0;
            this.memoryUsed_ = 0L;
            this.diskUsed_ = 0L;
            this.totalCores_ = 0;
            this.maxTasks_ = 0;
            this.activeTasks_ = 0;
            this.failedTasks_ = 0;
            this.completedTasks_ = 0;
            this.totalTasks_ = 0;
            this.totalDuration_ = 0L;
            this.totalGcTime_ = 0L;
            this.totalInputBytes_ = 0L;
            this.totalShuffleRead_ = 0L;
            this.totalShuffleWrite_ = 0L;
            this.isBlacklisted_ = false;
            this.maxMemory_ = 0L;
            this.addTime_ = 0L;
            this.removeTime_ = 0L;
            this.removeReason_ = "";
            this.internalGetMutableExecutorLogs().clear();
            this.memoryMetrics_ = null;
            if (this.memoryMetricsBuilder_ != null) {
               this.memoryMetricsBuilder_.dispose();
               this.memoryMetricsBuilder_ = null;
            }

            this.blacklistedInStages_ = StoreTypes.ExecutorSummary.emptyLongList();
            this.peakMemoryMetrics_ = null;
            if (this.peakMemoryMetricsBuilder_ != null) {
               this.peakMemoryMetricsBuilder_.dispose();
               this.peakMemoryMetricsBuilder_ = null;
            }

            this.internalGetMutableAttributes().clear();
            this.internalGetMutableResources().clear();
            this.resourceProfileId_ = 0;
            this.isExcluded_ = false;
            this.excludedInStages_ = StoreTypes.ExecutorSummary.emptyLongList();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummary_descriptor;
         }

         public ExecutorSummary getDefaultInstanceForType() {
            return StoreTypes.ExecutorSummary.getDefaultInstance();
         }

         public ExecutorSummary build() {
            ExecutorSummary result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ExecutorSummary buildPartial() {
            ExecutorSummary result = new ExecutorSummary(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ExecutorSummary result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.id_ = this.id_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.hostPort_ = this.hostPort_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.isActive_ = this.isActive_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.rddBlocks_ = this.rddBlocks_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.memoryUsed_ = this.memoryUsed_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.diskUsed_ = this.diskUsed_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.totalCores_ = this.totalCores_;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.maxTasks_ = this.maxTasks_;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.activeTasks_ = this.activeTasks_;
            }

            if ((from_bitField0_ & 512) != 0) {
               result.failedTasks_ = this.failedTasks_;
            }

            if ((from_bitField0_ & 1024) != 0) {
               result.completedTasks_ = this.completedTasks_;
            }

            if ((from_bitField0_ & 2048) != 0) {
               result.totalTasks_ = this.totalTasks_;
            }

            if ((from_bitField0_ & 4096) != 0) {
               result.totalDuration_ = this.totalDuration_;
            }

            if ((from_bitField0_ & 8192) != 0) {
               result.totalGcTime_ = this.totalGcTime_;
            }

            if ((from_bitField0_ & 16384) != 0) {
               result.totalInputBytes_ = this.totalInputBytes_;
            }

            if ((from_bitField0_ & '耀') != 0) {
               result.totalShuffleRead_ = this.totalShuffleRead_;
            }

            if ((from_bitField0_ & 65536) != 0) {
               result.totalShuffleWrite_ = this.totalShuffleWrite_;
            }

            if ((from_bitField0_ & 131072) != 0) {
               result.isBlacklisted_ = this.isBlacklisted_;
            }

            if ((from_bitField0_ & 262144) != 0) {
               result.maxMemory_ = this.maxMemory_;
            }

            if ((from_bitField0_ & 524288) != 0) {
               result.addTime_ = this.addTime_;
            }

            if ((from_bitField0_ & 1048576) != 0) {
               result.removeTime_ = this.removeTime_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 2097152) != 0) {
               result.removeReason_ = this.removeReason_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 4194304) != 0) {
               result.executorLogs_ = this.internalGetExecutorLogs();
               result.executorLogs_.makeImmutable();
            }

            if ((from_bitField0_ & 8388608) != 0) {
               result.memoryMetrics_ = this.memoryMetricsBuilder_ == null ? this.memoryMetrics_ : (MemoryMetrics)this.memoryMetricsBuilder_.build();
               to_bitField0_ |= 16;
            }

            if ((from_bitField0_ & 16777216) != 0) {
               this.blacklistedInStages_.makeImmutable();
               result.blacklistedInStages_ = this.blacklistedInStages_;
            }

            if ((from_bitField0_ & 33554432) != 0) {
               result.peakMemoryMetrics_ = this.peakMemoryMetricsBuilder_ == null ? this.peakMemoryMetrics_ : (ExecutorMetrics)this.peakMemoryMetricsBuilder_.build();
               to_bitField0_ |= 32;
            }

            if ((from_bitField0_ & 67108864) != 0) {
               result.attributes_ = this.internalGetAttributes();
               result.attributes_.makeImmutable();
            }

            if ((from_bitField0_ & 134217728) != 0) {
               result.resources_ = this.internalGetResources().build(StoreTypes.ExecutorSummary.ResourcesDefaultEntryHolder.defaultEntry);
            }

            if ((from_bitField0_ & 268435456) != 0) {
               result.resourceProfileId_ = this.resourceProfileId_;
            }

            if ((from_bitField0_ & 536870912) != 0) {
               result.isExcluded_ = this.isExcluded_;
            }

            if ((from_bitField0_ & 1073741824) != 0) {
               this.excludedInStages_.makeImmutable();
               result.excludedInStages_ = this.excludedInStages_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ExecutorSummary) {
               return this.mergeFrom((ExecutorSummary)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ExecutorSummary other) {
            if (other == StoreTypes.ExecutorSummary.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasId()) {
                  this.id_ = other.id_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.hasHostPort()) {
                  this.hostPort_ = other.hostPort_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.getIsActive()) {
                  this.setIsActive(other.getIsActive());
               }

               if (other.getRddBlocks() != 0) {
                  this.setRddBlocks(other.getRddBlocks());
               }

               if (other.getMemoryUsed() != 0L) {
                  this.setMemoryUsed(other.getMemoryUsed());
               }

               if (other.getDiskUsed() != 0L) {
                  this.setDiskUsed(other.getDiskUsed());
               }

               if (other.getTotalCores() != 0) {
                  this.setTotalCores(other.getTotalCores());
               }

               if (other.getMaxTasks() != 0) {
                  this.setMaxTasks(other.getMaxTasks());
               }

               if (other.getActiveTasks() != 0) {
                  this.setActiveTasks(other.getActiveTasks());
               }

               if (other.getFailedTasks() != 0) {
                  this.setFailedTasks(other.getFailedTasks());
               }

               if (other.getCompletedTasks() != 0) {
                  this.setCompletedTasks(other.getCompletedTasks());
               }

               if (other.getTotalTasks() != 0) {
                  this.setTotalTasks(other.getTotalTasks());
               }

               if (other.getTotalDuration() != 0L) {
                  this.setTotalDuration(other.getTotalDuration());
               }

               if (other.getTotalGcTime() != 0L) {
                  this.setTotalGcTime(other.getTotalGcTime());
               }

               if (other.getTotalInputBytes() != 0L) {
                  this.setTotalInputBytes(other.getTotalInputBytes());
               }

               if (other.getTotalShuffleRead() != 0L) {
                  this.setTotalShuffleRead(other.getTotalShuffleRead());
               }

               if (other.getTotalShuffleWrite() != 0L) {
                  this.setTotalShuffleWrite(other.getTotalShuffleWrite());
               }

               if (other.getIsBlacklisted()) {
                  this.setIsBlacklisted(other.getIsBlacklisted());
               }

               if (other.getMaxMemory() != 0L) {
                  this.setMaxMemory(other.getMaxMemory());
               }

               if (other.getAddTime() != 0L) {
                  this.setAddTime(other.getAddTime());
               }

               if (other.hasRemoveTime()) {
                  this.setRemoveTime(other.getRemoveTime());
               }

               if (other.hasRemoveReason()) {
                  this.removeReason_ = other.removeReason_;
                  this.bitField0_ |= 2097152;
                  this.onChanged();
               }

               this.internalGetMutableExecutorLogs().mergeFrom(other.internalGetExecutorLogs());
               this.bitField0_ |= 4194304;
               if (other.hasMemoryMetrics()) {
                  this.mergeMemoryMetrics(other.getMemoryMetrics());
               }

               if (!other.blacklistedInStages_.isEmpty()) {
                  if (this.blacklistedInStages_.isEmpty()) {
                     this.blacklistedInStages_ = other.blacklistedInStages_;
                     this.blacklistedInStages_.makeImmutable();
                     this.bitField0_ |= 16777216;
                  } else {
                     this.ensureBlacklistedInStagesIsMutable();
                     this.blacklistedInStages_.addAll(other.blacklistedInStages_);
                  }

                  this.onChanged();
               }

               if (other.hasPeakMemoryMetrics()) {
                  this.mergePeakMemoryMetrics(other.getPeakMemoryMetrics());
               }

               this.internalGetMutableAttributes().mergeFrom(other.internalGetAttributes());
               this.bitField0_ |= 67108864;
               this.internalGetMutableResources().mergeFrom(other.internalGetResources());
               this.bitField0_ |= 134217728;
               if (other.getResourceProfileId() != 0) {
                  this.setResourceProfileId(other.getResourceProfileId());
               }

               if (other.getIsExcluded()) {
                  this.setIsExcluded(other.getIsExcluded());
               }

               if (!other.excludedInStages_.isEmpty()) {
                  if (this.excludedInStages_.isEmpty()) {
                     this.excludedInStages_ = other.excludedInStages_;
                     this.excludedInStages_.makeImmutable();
                     this.bitField0_ |= 1073741824;
                  } else {
                     this.ensureExcludedInStagesIsMutable();
                     this.excludedInStages_.addAll(other.excludedInStages_);
                  }

                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.id_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.hostPort_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.isActive_ = input.readBool();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.rddBlocks_ = input.readInt32();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.memoryUsed_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.diskUsed_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.totalCores_ = input.readInt32();
                           this.bitField0_ |= 64;
                           break;
                        case 64:
                           this.maxTasks_ = input.readInt32();
                           this.bitField0_ |= 128;
                           break;
                        case 72:
                           this.activeTasks_ = input.readInt32();
                           this.bitField0_ |= 256;
                           break;
                        case 80:
                           this.failedTasks_ = input.readInt32();
                           this.bitField0_ |= 512;
                           break;
                        case 88:
                           this.completedTasks_ = input.readInt32();
                           this.bitField0_ |= 1024;
                           break;
                        case 96:
                           this.totalTasks_ = input.readInt32();
                           this.bitField0_ |= 2048;
                           break;
                        case 104:
                           this.totalDuration_ = input.readInt64();
                           this.bitField0_ |= 4096;
                           break;
                        case 112:
                           this.totalGcTime_ = input.readInt64();
                           this.bitField0_ |= 8192;
                           break;
                        case 120:
                           this.totalInputBytes_ = input.readInt64();
                           this.bitField0_ |= 16384;
                           break;
                        case 128:
                           this.totalShuffleRead_ = input.readInt64();
                           this.bitField0_ |= 32768;
                           break;
                        case 136:
                           this.totalShuffleWrite_ = input.readInt64();
                           this.bitField0_ |= 65536;
                           break;
                        case 144:
                           this.isBlacklisted_ = input.readBool();
                           this.bitField0_ |= 131072;
                           break;
                        case 152:
                           this.maxMemory_ = input.readInt64();
                           this.bitField0_ |= 262144;
                           break;
                        case 160:
                           this.addTime_ = input.readInt64();
                           this.bitField0_ |= 524288;
                           break;
                        case 168:
                           this.removeTime_ = input.readInt64();
                           this.bitField0_ |= 1048576;
                           break;
                        case 178:
                           this.removeReason_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2097152;
                           break;
                        case 186:
                           MapEntry<String, String> executorLogs__ = (MapEntry)input.readMessage(StoreTypes.ExecutorSummary.ExecutorLogsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableExecutorLogs().getMutableMap().put((String)executorLogs__.getKey(), (String)executorLogs__.getValue());
                           this.bitField0_ |= 4194304;
                           break;
                        case 194:
                           input.readMessage((MessageLite.Builder)this.getMemoryMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 8388608;
                           break;
                        case 200:
                           long v = input.readInt64();
                           this.ensureBlacklistedInStagesIsMutable();
                           this.blacklistedInStages_.addLong(v);
                           break;
                        case 202:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           this.ensureBlacklistedInStagesIsMutable();

                           while(input.getBytesUntilLimit() > 0) {
                              this.blacklistedInStages_.addLong(input.readInt64());
                           }

                           input.popLimit(limit);
                           break;
                        case 210:
                           input.readMessage((MessageLite.Builder)this.getPeakMemoryMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 33554432;
                           break;
                        case 218:
                           MapEntry<String, String> attributes__ = (MapEntry)input.readMessage(StoreTypes.ExecutorSummary.AttributesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableAttributes().getMutableMap().put((String)attributes__.getKey(), (String)attributes__.getValue());
                           this.bitField0_ |= 67108864;
                           break;
                        case 226:
                           MapEntry<String, ResourceInformation> resources__ = (MapEntry)input.readMessage(StoreTypes.ExecutorSummary.ResourcesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableResources().ensureBuilderMap().put((String)resources__.getKey(), (ResourceInformationOrBuilder)resources__.getValue());
                           this.bitField0_ |= 134217728;
                           break;
                        case 232:
                           this.resourceProfileId_ = input.readInt32();
                           this.bitField0_ |= 268435456;
                           break;
                        case 240:
                           this.isExcluded_ = input.readBool();
                           this.bitField0_ |= 536870912;
                           break;
                        case 248:
                           long v = input.readInt64();
                           this.ensureExcludedInStagesIsMutable();
                           this.excludedInStages_.addLong(v);
                           break;
                        case 250:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           this.ensureExcludedInStagesIsMutable();

                           while(input.getBytesUntilLimit() > 0) {
                              this.excludedInStages_.addLong(input.readInt64());
                           }

                           input.popLimit(limit);
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasId() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getId() {
            Object ref = this.id_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.id_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.id_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.id_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearId() {
            this.id_ = StoreTypes.ExecutorSummary.getDefaultInstance().getId();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ExecutorSummary.checkByteStringIsUtf8(value);
               this.id_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public boolean hasHostPort() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getHostPort() {
            Object ref = this.hostPort_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.hostPort_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getHostPortBytes() {
            Object ref = this.hostPort_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.hostPort_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setHostPort(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.hostPort_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearHostPort() {
            this.hostPort_ = StoreTypes.ExecutorSummary.getDefaultInstance().getHostPort();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setHostPortBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ExecutorSummary.checkByteStringIsUtf8(value);
               this.hostPort_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean getIsActive() {
            return this.isActive_;
         }

         public Builder setIsActive(boolean value) {
            this.isActive_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearIsActive() {
            this.bitField0_ &= -5;
            this.isActive_ = false;
            this.onChanged();
            return this;
         }

         public int getRddBlocks() {
            return this.rddBlocks_;
         }

         public Builder setRddBlocks(int value) {
            this.rddBlocks_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearRddBlocks() {
            this.bitField0_ &= -9;
            this.rddBlocks_ = 0;
            this.onChanged();
            return this;
         }

         public long getMemoryUsed() {
            return this.memoryUsed_;
         }

         public Builder setMemoryUsed(long value) {
            this.memoryUsed_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryUsed() {
            this.bitField0_ &= -17;
            this.memoryUsed_ = 0L;
            this.onChanged();
            return this;
         }

         public long getDiskUsed() {
            return this.diskUsed_;
         }

         public Builder setDiskUsed(long value) {
            this.diskUsed_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearDiskUsed() {
            this.bitField0_ &= -33;
            this.diskUsed_ = 0L;
            this.onChanged();
            return this;
         }

         public int getTotalCores() {
            return this.totalCores_;
         }

         public Builder setTotalCores(int value) {
            this.totalCores_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearTotalCores() {
            this.bitField0_ &= -65;
            this.totalCores_ = 0;
            this.onChanged();
            return this;
         }

         public int getMaxTasks() {
            return this.maxTasks_;
         }

         public Builder setMaxTasks(int value) {
            this.maxTasks_ = value;
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearMaxTasks() {
            this.bitField0_ &= -129;
            this.maxTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getActiveTasks() {
            return this.activeTasks_;
         }

         public Builder setActiveTasks(int value) {
            this.activeTasks_ = value;
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearActiveTasks() {
            this.bitField0_ &= -257;
            this.activeTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getFailedTasks() {
            return this.failedTasks_;
         }

         public Builder setFailedTasks(int value) {
            this.failedTasks_ = value;
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder clearFailedTasks() {
            this.bitField0_ &= -513;
            this.failedTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getCompletedTasks() {
            return this.completedTasks_;
         }

         public Builder setCompletedTasks(int value) {
            this.completedTasks_ = value;
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder clearCompletedTasks() {
            this.bitField0_ &= -1025;
            this.completedTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getTotalTasks() {
            return this.totalTasks_;
         }

         public Builder setTotalTasks(int value) {
            this.totalTasks_ = value;
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder clearTotalTasks() {
            this.bitField0_ &= -2049;
            this.totalTasks_ = 0;
            this.onChanged();
            return this;
         }

         public long getTotalDuration() {
            return this.totalDuration_;
         }

         public Builder setTotalDuration(long value) {
            this.totalDuration_ = value;
            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder clearTotalDuration() {
            this.bitField0_ &= -4097;
            this.totalDuration_ = 0L;
            this.onChanged();
            return this;
         }

         public long getTotalGcTime() {
            return this.totalGcTime_;
         }

         public Builder setTotalGcTime(long value) {
            this.totalGcTime_ = value;
            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder clearTotalGcTime() {
            this.bitField0_ &= -8193;
            this.totalGcTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getTotalInputBytes() {
            return this.totalInputBytes_;
         }

         public Builder setTotalInputBytes(long value) {
            this.totalInputBytes_ = value;
            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder clearTotalInputBytes() {
            this.bitField0_ &= -16385;
            this.totalInputBytes_ = 0L;
            this.onChanged();
            return this;
         }

         public long getTotalShuffleRead() {
            return this.totalShuffleRead_;
         }

         public Builder setTotalShuffleRead(long value) {
            this.totalShuffleRead_ = value;
            this.bitField0_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder clearTotalShuffleRead() {
            this.bitField0_ &= -32769;
            this.totalShuffleRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getTotalShuffleWrite() {
            return this.totalShuffleWrite_;
         }

         public Builder setTotalShuffleWrite(long value) {
            this.totalShuffleWrite_ = value;
            this.bitField0_ |= 65536;
            this.onChanged();
            return this;
         }

         public Builder clearTotalShuffleWrite() {
            this.bitField0_ &= -65537;
            this.totalShuffleWrite_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean getIsBlacklisted() {
            return this.isBlacklisted_;
         }

         public Builder setIsBlacklisted(boolean value) {
            this.isBlacklisted_ = value;
            this.bitField0_ |= 131072;
            this.onChanged();
            return this;
         }

         public Builder clearIsBlacklisted() {
            this.bitField0_ &= -131073;
            this.isBlacklisted_ = false;
            this.onChanged();
            return this;
         }

         public long getMaxMemory() {
            return this.maxMemory_;
         }

         public Builder setMaxMemory(long value) {
            this.maxMemory_ = value;
            this.bitField0_ |= 262144;
            this.onChanged();
            return this;
         }

         public Builder clearMaxMemory() {
            this.bitField0_ &= -262145;
            this.maxMemory_ = 0L;
            this.onChanged();
            return this;
         }

         public long getAddTime() {
            return this.addTime_;
         }

         public Builder setAddTime(long value) {
            this.addTime_ = value;
            this.bitField0_ |= 524288;
            this.onChanged();
            return this;
         }

         public Builder clearAddTime() {
            this.bitField0_ &= -524289;
            this.addTime_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasRemoveTime() {
            return (this.bitField0_ & 1048576) != 0;
         }

         public long getRemoveTime() {
            return this.removeTime_;
         }

         public Builder setRemoveTime(long value) {
            this.removeTime_ = value;
            this.bitField0_ |= 1048576;
            this.onChanged();
            return this;
         }

         public Builder clearRemoveTime() {
            this.bitField0_ &= -1048577;
            this.removeTime_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasRemoveReason() {
            return (this.bitField0_ & 2097152) != 0;
         }

         public String getRemoveReason() {
            Object ref = this.removeReason_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.removeReason_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getRemoveReasonBytes() {
            Object ref = this.removeReason_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.removeReason_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setRemoveReason(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.removeReason_ = value;
               this.bitField0_ |= 2097152;
               this.onChanged();
               return this;
            }
         }

         public Builder clearRemoveReason() {
            this.removeReason_ = StoreTypes.ExecutorSummary.getDefaultInstance().getRemoveReason();
            this.bitField0_ &= -2097153;
            this.onChanged();
            return this;
         }

         public Builder setRemoveReasonBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.ExecutorSummary.checkByteStringIsUtf8(value);
               this.removeReason_ = value;
               this.bitField0_ |= 2097152;
               this.onChanged();
               return this;
            }
         }

         private MapField internalGetExecutorLogs() {
            return this.executorLogs_ == null ? MapField.emptyMapField(StoreTypes.ExecutorSummary.ExecutorLogsDefaultEntryHolder.defaultEntry) : this.executorLogs_;
         }

         private MapField internalGetMutableExecutorLogs() {
            if (this.executorLogs_ == null) {
               this.executorLogs_ = MapField.newMapField(StoreTypes.ExecutorSummary.ExecutorLogsDefaultEntryHolder.defaultEntry);
            }

            if (!this.executorLogs_.isMutable()) {
               this.executorLogs_ = this.executorLogs_.copy();
            }

            this.bitField0_ |= 4194304;
            this.onChanged();
            return this.executorLogs_;
         }

         public int getExecutorLogsCount() {
            return this.internalGetExecutorLogs().getMap().size();
         }

         public boolean containsExecutorLogs(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetExecutorLogs().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getExecutorLogs() {
            return this.getExecutorLogsMap();
         }

         public Map getExecutorLogsMap() {
            return this.internalGetExecutorLogs().getMap();
         }

         public String getExecutorLogsOrDefault(String key, String defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetExecutorLogs().getMap();
               return map.containsKey(key) ? (String)map.get(key) : defaultValue;
            }
         }

         public String getExecutorLogsOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetExecutorLogs().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (String)map.get(key);
               }
            }
         }

         public Builder clearExecutorLogs() {
            this.bitField0_ &= -4194305;
            this.internalGetMutableExecutorLogs().getMutableMap().clear();
            return this;
         }

         public Builder removeExecutorLogs(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableExecutorLogs().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableExecutorLogs() {
            this.bitField0_ |= 4194304;
            return this.internalGetMutableExecutorLogs().getMutableMap();
         }

         public Builder putExecutorLogs(String key, String value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableExecutorLogs().getMutableMap().put(key, value);
               this.bitField0_ |= 4194304;
               return this;
            }
         }

         public Builder putAllExecutorLogs(Map values) {
            this.internalGetMutableExecutorLogs().getMutableMap().putAll(values);
            this.bitField0_ |= 4194304;
            return this;
         }

         public boolean hasMemoryMetrics() {
            return (this.bitField0_ & 8388608) != 0;
         }

         public MemoryMetrics getMemoryMetrics() {
            if (this.memoryMetricsBuilder_ == null) {
               return this.memoryMetrics_ == null ? StoreTypes.MemoryMetrics.getDefaultInstance() : this.memoryMetrics_;
            } else {
               return (MemoryMetrics)this.memoryMetricsBuilder_.getMessage();
            }
         }

         public Builder setMemoryMetrics(MemoryMetrics value) {
            if (this.memoryMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.memoryMetrics_ = value;
            } else {
               this.memoryMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 8388608;
            this.onChanged();
            return this;
         }

         public Builder setMemoryMetrics(MemoryMetrics.Builder builderForValue) {
            if (this.memoryMetricsBuilder_ == null) {
               this.memoryMetrics_ = builderForValue.build();
            } else {
               this.memoryMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 8388608;
            this.onChanged();
            return this;
         }

         public Builder mergeMemoryMetrics(MemoryMetrics value) {
            if (this.memoryMetricsBuilder_ == null) {
               if ((this.bitField0_ & 8388608) != 0 && this.memoryMetrics_ != null && this.memoryMetrics_ != StoreTypes.MemoryMetrics.getDefaultInstance()) {
                  this.getMemoryMetricsBuilder().mergeFrom(value);
               } else {
                  this.memoryMetrics_ = value;
               }
            } else {
               this.memoryMetricsBuilder_.mergeFrom(value);
            }

            if (this.memoryMetrics_ != null) {
               this.bitField0_ |= 8388608;
               this.onChanged();
            }

            return this;
         }

         public Builder clearMemoryMetrics() {
            this.bitField0_ &= -8388609;
            this.memoryMetrics_ = null;
            if (this.memoryMetricsBuilder_ != null) {
               this.memoryMetricsBuilder_.dispose();
               this.memoryMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public MemoryMetrics.Builder getMemoryMetricsBuilder() {
            this.bitField0_ |= 8388608;
            this.onChanged();
            return (MemoryMetrics.Builder)this.getMemoryMetricsFieldBuilder().getBuilder();
         }

         public MemoryMetricsOrBuilder getMemoryMetricsOrBuilder() {
            if (this.memoryMetricsBuilder_ != null) {
               return (MemoryMetricsOrBuilder)this.memoryMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.memoryMetrics_ == null ? StoreTypes.MemoryMetrics.getDefaultInstance() : this.memoryMetrics_;
            }
         }

         private SingleFieldBuilder getMemoryMetricsFieldBuilder() {
            if (this.memoryMetricsBuilder_ == null) {
               this.memoryMetricsBuilder_ = new SingleFieldBuilder(this.getMemoryMetrics(), this.getParentForChildren(), this.isClean());
               this.memoryMetrics_ = null;
            }

            return this.memoryMetricsBuilder_;
         }

         private void ensureBlacklistedInStagesIsMutable() {
            if (!this.blacklistedInStages_.isModifiable()) {
               this.blacklistedInStages_ = (Internal.LongList)StoreTypes.ExecutorSummary.makeMutableCopy(this.blacklistedInStages_);
            }

            this.bitField0_ |= 16777216;
         }

         public List getBlacklistedInStagesList() {
            this.blacklistedInStages_.makeImmutable();
            return this.blacklistedInStages_;
         }

         public int getBlacklistedInStagesCount() {
            return this.blacklistedInStages_.size();
         }

         public long getBlacklistedInStages(int index) {
            return this.blacklistedInStages_.getLong(index);
         }

         public Builder setBlacklistedInStages(int index, long value) {
            this.ensureBlacklistedInStagesIsMutable();
            this.blacklistedInStages_.setLong(index, value);
            this.bitField0_ |= 16777216;
            this.onChanged();
            return this;
         }

         public Builder addBlacklistedInStages(long value) {
            this.ensureBlacklistedInStagesIsMutable();
            this.blacklistedInStages_.addLong(value);
            this.bitField0_ |= 16777216;
            this.onChanged();
            return this;
         }

         public Builder addAllBlacklistedInStages(Iterable values) {
            this.ensureBlacklistedInStagesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.blacklistedInStages_);
            this.bitField0_ |= 16777216;
            this.onChanged();
            return this;
         }

         public Builder clearBlacklistedInStages() {
            this.blacklistedInStages_ = StoreTypes.ExecutorSummary.emptyLongList();
            this.bitField0_ &= -16777217;
            this.onChanged();
            return this;
         }

         public boolean hasPeakMemoryMetrics() {
            return (this.bitField0_ & 33554432) != 0;
         }

         public ExecutorMetrics getPeakMemoryMetrics() {
            if (this.peakMemoryMetricsBuilder_ == null) {
               return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakMemoryMetrics_;
            } else {
               return (ExecutorMetrics)this.peakMemoryMetricsBuilder_.getMessage();
            }
         }

         public Builder setPeakMemoryMetrics(ExecutorMetrics value) {
            if (this.peakMemoryMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.peakMemoryMetrics_ = value;
            } else {
               this.peakMemoryMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 33554432;
            this.onChanged();
            return this;
         }

         public Builder setPeakMemoryMetrics(ExecutorMetrics.Builder builderForValue) {
            if (this.peakMemoryMetricsBuilder_ == null) {
               this.peakMemoryMetrics_ = builderForValue.build();
            } else {
               this.peakMemoryMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 33554432;
            this.onChanged();
            return this;
         }

         public Builder mergePeakMemoryMetrics(ExecutorMetrics value) {
            if (this.peakMemoryMetricsBuilder_ == null) {
               if ((this.bitField0_ & 33554432) != 0 && this.peakMemoryMetrics_ != null && this.peakMemoryMetrics_ != StoreTypes.ExecutorMetrics.getDefaultInstance()) {
                  this.getPeakMemoryMetricsBuilder().mergeFrom(value);
               } else {
                  this.peakMemoryMetrics_ = value;
               }
            } else {
               this.peakMemoryMetricsBuilder_.mergeFrom(value);
            }

            if (this.peakMemoryMetrics_ != null) {
               this.bitField0_ |= 33554432;
               this.onChanged();
            }

            return this;
         }

         public Builder clearPeakMemoryMetrics() {
            this.bitField0_ &= -33554433;
            this.peakMemoryMetrics_ = null;
            if (this.peakMemoryMetricsBuilder_ != null) {
               this.peakMemoryMetricsBuilder_.dispose();
               this.peakMemoryMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ExecutorMetrics.Builder getPeakMemoryMetricsBuilder() {
            this.bitField0_ |= 33554432;
            this.onChanged();
            return (ExecutorMetrics.Builder)this.getPeakMemoryMetricsFieldBuilder().getBuilder();
         }

         public ExecutorMetricsOrBuilder getPeakMemoryMetricsOrBuilder() {
            if (this.peakMemoryMetricsBuilder_ != null) {
               return (ExecutorMetricsOrBuilder)this.peakMemoryMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakMemoryMetrics_;
            }
         }

         private SingleFieldBuilder getPeakMemoryMetricsFieldBuilder() {
            if (this.peakMemoryMetricsBuilder_ == null) {
               this.peakMemoryMetricsBuilder_ = new SingleFieldBuilder(this.getPeakMemoryMetrics(), this.getParentForChildren(), this.isClean());
               this.peakMemoryMetrics_ = null;
            }

            return this.peakMemoryMetricsBuilder_;
         }

         private MapField internalGetAttributes() {
            return this.attributes_ == null ? MapField.emptyMapField(StoreTypes.ExecutorSummary.AttributesDefaultEntryHolder.defaultEntry) : this.attributes_;
         }

         private MapField internalGetMutableAttributes() {
            if (this.attributes_ == null) {
               this.attributes_ = MapField.newMapField(StoreTypes.ExecutorSummary.AttributesDefaultEntryHolder.defaultEntry);
            }

            if (!this.attributes_.isMutable()) {
               this.attributes_ = this.attributes_.copy();
            }

            this.bitField0_ |= 67108864;
            this.onChanged();
            return this.attributes_;
         }

         public int getAttributesCount() {
            return this.internalGetAttributes().getMap().size();
         }

         public boolean containsAttributes(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetAttributes().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getAttributes() {
            return this.getAttributesMap();
         }

         public Map getAttributesMap() {
            return this.internalGetAttributes().getMap();
         }

         public String getAttributesOrDefault(String key, String defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetAttributes().getMap();
               return map.containsKey(key) ? (String)map.get(key) : defaultValue;
            }
         }

         public String getAttributesOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetAttributes().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (String)map.get(key);
               }
            }
         }

         public Builder clearAttributes() {
            this.bitField0_ &= -67108865;
            this.internalGetMutableAttributes().getMutableMap().clear();
            return this;
         }

         public Builder removeAttributes(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableAttributes().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableAttributes() {
            this.bitField0_ |= 67108864;
            return this.internalGetMutableAttributes().getMutableMap();
         }

         public Builder putAttributes(String key, String value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableAttributes().getMutableMap().put(key, value);
               this.bitField0_ |= 67108864;
               return this;
            }
         }

         public Builder putAllAttributes(Map values) {
            this.internalGetMutableAttributes().getMutableMap().putAll(values);
            this.bitField0_ |= 67108864;
            return this;
         }

         private MapFieldBuilder internalGetResources() {
            return this.resources_ == null ? new MapFieldBuilder(resourcesConverter) : this.resources_;
         }

         private MapFieldBuilder internalGetMutableResources() {
            if (this.resources_ == null) {
               this.resources_ = new MapFieldBuilder(resourcesConverter);
            }

            this.bitField0_ |= 134217728;
            this.onChanged();
            return this.resources_;
         }

         public int getResourcesCount() {
            return this.internalGetResources().ensureBuilderMap().size();
         }

         public boolean containsResources(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetResources().ensureBuilderMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getResources() {
            return this.getResourcesMap();
         }

         public Map getResourcesMap() {
            return this.internalGetResources().getImmutableMap();
         }

         public ResourceInformation getResourcesOrDefault(String key, ResourceInformation defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, ResourceInformationOrBuilder> map = this.internalGetMutableResources().ensureBuilderMap();
               return map.containsKey(key) ? resourcesConverter.build((ResourceInformationOrBuilder)map.get(key)) : defaultValue;
            }
         }

         public ResourceInformation getResourcesOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, ResourceInformationOrBuilder> map = this.internalGetMutableResources().ensureBuilderMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return resourcesConverter.build((ResourceInformationOrBuilder)map.get(key));
               }
            }
         }

         public Builder clearResources() {
            this.bitField0_ &= -134217729;
            this.internalGetMutableResources().clear();
            return this;
         }

         public Builder removeResources(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableResources().ensureBuilderMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableResources() {
            this.bitField0_ |= 134217728;
            return this.internalGetMutableResources().ensureMessageMap();
         }

         public Builder putResources(String key, ResourceInformation value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableResources().ensureBuilderMap().put(key, value);
               this.bitField0_ |= 134217728;
               return this;
            }
         }

         public Builder putAllResources(Map values) {
            for(Map.Entry e : values.entrySet()) {
               if (e.getKey() == null || e.getValue() == null) {
                  throw new NullPointerException();
               }
            }

            this.internalGetMutableResources().ensureBuilderMap().putAll(values);
            this.bitField0_ |= 134217728;
            return this;
         }

         public ResourceInformation.Builder putResourcesBuilderIfAbsent(String key) {
            Map<String, ResourceInformationOrBuilder> builderMap = this.internalGetMutableResources().ensureBuilderMap();
            ResourceInformationOrBuilder entry = (ResourceInformationOrBuilder)builderMap.get(key);
            if (entry == null) {
               entry = StoreTypes.ResourceInformation.newBuilder();
               builderMap.put(key, entry);
            }

            if (entry instanceof ResourceInformation) {
               entry = ((ResourceInformation)entry).toBuilder();
               builderMap.put(key, entry);
            }

            return (ResourceInformation.Builder)entry;
         }

         public int getResourceProfileId() {
            return this.resourceProfileId_;
         }

         public Builder setResourceProfileId(int value) {
            this.resourceProfileId_ = value;
            this.bitField0_ |= 268435456;
            this.onChanged();
            return this;
         }

         public Builder clearResourceProfileId() {
            this.bitField0_ &= -268435457;
            this.resourceProfileId_ = 0;
            this.onChanged();
            return this;
         }

         public boolean getIsExcluded() {
            return this.isExcluded_;
         }

         public Builder setIsExcluded(boolean value) {
            this.isExcluded_ = value;
            this.bitField0_ |= 536870912;
            this.onChanged();
            return this;
         }

         public Builder clearIsExcluded() {
            this.bitField0_ &= -536870913;
            this.isExcluded_ = false;
            this.onChanged();
            return this;
         }

         private void ensureExcludedInStagesIsMutable() {
            if (!this.excludedInStages_.isModifiable()) {
               this.excludedInStages_ = (Internal.LongList)StoreTypes.ExecutorSummary.makeMutableCopy(this.excludedInStages_);
            }

            this.bitField0_ |= 1073741824;
         }

         public List getExcludedInStagesList() {
            this.excludedInStages_.makeImmutable();
            return this.excludedInStages_;
         }

         public int getExcludedInStagesCount() {
            return this.excludedInStages_.size();
         }

         public long getExcludedInStages(int index) {
            return this.excludedInStages_.getLong(index);
         }

         public Builder setExcludedInStages(int index, long value) {
            this.ensureExcludedInStagesIsMutable();
            this.excludedInStages_.setLong(index, value);
            this.bitField0_ |= 1073741824;
            this.onChanged();
            return this;
         }

         public Builder addExcludedInStages(long value) {
            this.ensureExcludedInStagesIsMutable();
            this.excludedInStages_.addLong(value);
            this.bitField0_ |= 1073741824;
            this.onChanged();
            return this;
         }

         public Builder addAllExcludedInStages(Iterable values) {
            this.ensureExcludedInStagesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.excludedInStages_);
            this.bitField0_ |= 1073741824;
            this.onChanged();
            return this;
         }

         public Builder clearExcludedInStages() {
            this.excludedInStages_ = StoreTypes.ExecutorSummary.emptyLongList();
            this.bitField0_ &= -1073741825;
            this.onChanged();
            return this;
         }

         private static final class ResourcesConverter implements MapFieldBuilder.Converter {
            public ResourceInformation build(ResourceInformationOrBuilder val) {
               return val instanceof ResourceInformation ? (ResourceInformation)val : ((ResourceInformation.Builder)val).build();
            }

            public MapEntry defaultEntry() {
               return StoreTypes.ExecutorSummary.ResourcesDefaultEntryHolder.defaultEntry;
            }
         }
      }
   }

   public static final class ExecutorSummaryWrapper extends GeneratedMessage implements ExecutorSummaryWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int INFO_FIELD_NUMBER = 1;
      private ExecutorSummary info_;
      private byte memoizedIsInitialized = -1;
      private static final ExecutorSummaryWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ExecutorSummaryWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ExecutorSummaryWrapper() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummaryWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummaryWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorSummaryWrapper.class, Builder.class);
      }

      public boolean hasInfo() {
         return (this.bitField0_ & 1) != 0;
      }

      public ExecutorSummary getInfo() {
         return this.info_ == null ? StoreTypes.ExecutorSummary.getDefaultInstance() : this.info_;
      }

      public ExecutorSummaryOrBuilder getInfoOrBuilder() {
         return this.info_ == null ? StoreTypes.ExecutorSummary.getDefaultInstance() : this.info_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(1, this.getInfo());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(1, this.getInfo());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ExecutorSummaryWrapper)) {
            return super.equals(obj);
         } else {
            ExecutorSummaryWrapper other = (ExecutorSummaryWrapper)obj;
            if (this.hasInfo() != other.hasInfo()) {
               return false;
            } else if (this.hasInfo() && !this.getInfo().equals(other.getInfo())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasInfo()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getInfo().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ExecutorSummaryWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ExecutorSummaryWrapper)PARSER.parseFrom(data);
      }

      public static ExecutorSummaryWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorSummaryWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ExecutorSummaryWrapper)PARSER.parseFrom(data);
      }

      public static ExecutorSummaryWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorSummaryWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ExecutorSummaryWrapper)PARSER.parseFrom(data);
      }

      public static ExecutorSummaryWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorSummaryWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorSummaryWrapper parseFrom(InputStream input) throws IOException {
         return (ExecutorSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorSummaryWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorSummaryWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (ExecutorSummaryWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ExecutorSummaryWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorSummaryWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorSummaryWrapper parseFrom(CodedInputStream input) throws IOException {
         return (ExecutorSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorSummaryWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorSummaryWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ExecutorSummaryWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ExecutorSummaryWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ExecutorSummaryWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ExecutorSummaryWrapper.class.getName());
         DEFAULT_INSTANCE = new ExecutorSummaryWrapper();
         PARSER = new AbstractParser() {
            public ExecutorSummaryWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ExecutorSummaryWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ExecutorSummaryWrapperOrBuilder {
         private int bitField0_;
         private ExecutorSummary info_;
         private SingleFieldBuilder infoBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummaryWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummaryWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorSummaryWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ExecutorSummaryWrapper.alwaysUseFieldBuilders) {
               this.getInfoFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorSummaryWrapper_descriptor;
         }

         public ExecutorSummaryWrapper getDefaultInstanceForType() {
            return StoreTypes.ExecutorSummaryWrapper.getDefaultInstance();
         }

         public ExecutorSummaryWrapper build() {
            ExecutorSummaryWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ExecutorSummaryWrapper buildPartial() {
            ExecutorSummaryWrapper result = new ExecutorSummaryWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ExecutorSummaryWrapper result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.info_ = this.infoBuilder_ == null ? this.info_ : (ExecutorSummary)this.infoBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ExecutorSummaryWrapper) {
               return this.mergeFrom((ExecutorSummaryWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ExecutorSummaryWrapper other) {
            if (other == StoreTypes.ExecutorSummaryWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasInfo()) {
                  this.mergeInfo(other.getInfo());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           input.readMessage((MessageLite.Builder)this.getInfoFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasInfo() {
            return (this.bitField0_ & 1) != 0;
         }

         public ExecutorSummary getInfo() {
            if (this.infoBuilder_ == null) {
               return this.info_ == null ? StoreTypes.ExecutorSummary.getDefaultInstance() : this.info_;
            } else {
               return (ExecutorSummary)this.infoBuilder_.getMessage();
            }
         }

         public Builder setInfo(ExecutorSummary value) {
            if (this.infoBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.info_ = value;
            } else {
               this.infoBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder setInfo(ExecutorSummary.Builder builderForValue) {
            if (this.infoBuilder_ == null) {
               this.info_ = builderForValue.build();
            } else {
               this.infoBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder mergeInfo(ExecutorSummary value) {
            if (this.infoBuilder_ == null) {
               if ((this.bitField0_ & 1) != 0 && this.info_ != null && this.info_ != StoreTypes.ExecutorSummary.getDefaultInstance()) {
                  this.getInfoBuilder().mergeFrom(value);
               } else {
                  this.info_ = value;
               }
            } else {
               this.infoBuilder_.mergeFrom(value);
            }

            if (this.info_ != null) {
               this.bitField0_ |= 1;
               this.onChanged();
            }

            return this;
         }

         public Builder clearInfo() {
            this.bitField0_ &= -2;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ExecutorSummary.Builder getInfoBuilder() {
            this.bitField0_ |= 1;
            this.onChanged();
            return (ExecutorSummary.Builder)this.getInfoFieldBuilder().getBuilder();
         }

         public ExecutorSummaryOrBuilder getInfoOrBuilder() {
            if (this.infoBuilder_ != null) {
               return (ExecutorSummaryOrBuilder)this.infoBuilder_.getMessageOrBuilder();
            } else {
               return this.info_ == null ? StoreTypes.ExecutorSummary.getDefaultInstance() : this.info_;
            }
         }

         private SingleFieldBuilder getInfoFieldBuilder() {
            if (this.infoBuilder_ == null) {
               this.infoBuilder_ = new SingleFieldBuilder(this.getInfo(), this.getParentForChildren(), this.isClean());
               this.info_ = null;
            }

            return this.infoBuilder_;
         }
      }
   }

   public static final class SQLPlanMetric extends GeneratedMessage implements SQLPlanMetricOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      private volatile Object name_ = "";
      public static final int ACCUMULATOR_ID_FIELD_NUMBER = 2;
      private long accumulatorId_ = 0L;
      public static final int METRIC_TYPE_FIELD_NUMBER = 3;
      private volatile Object metricType_ = "";
      private byte memoizedIsInitialized = -1;
      private static final SQLPlanMetric DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private SQLPlanMetric(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private SQLPlanMetric() {
         this.name_ = "";
         this.metricType_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLPlanMetric_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLPlanMetric_fieldAccessorTable.ensureFieldAccessorsInitialized(SQLPlanMetric.class, Builder.class);
      }

      public boolean hasName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getAccumulatorId() {
         return this.accumulatorId_;
      }

      public boolean hasMetricType() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getMetricType() {
         Object ref = this.metricType_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.metricType_ = s;
            return s;
         }
      }

      public ByteString getMetricTypeBytes() {
         Object ref = this.metricType_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.metricType_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.name_);
         }

         if (this.accumulatorId_ != 0L) {
            output.writeInt64(2, this.accumulatorId_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 3, this.metricType_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.name_);
            }

            if (this.accumulatorId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.accumulatorId_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.metricType_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof SQLPlanMetric)) {
            return super.equals(obj);
         } else {
            SQLPlanMetric other = (SQLPlanMetric)obj;
            if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.getAccumulatorId() != other.getAccumulatorId()) {
               return false;
            } else if (this.hasMetricType() != other.hasMetricType()) {
               return false;
            } else if (this.hasMetricType() && !this.getMetricType().equals(other.getMetricType())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasName()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getName().hashCode();
            }

            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getAccumulatorId());
            if (this.hasMetricType()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getMetricType().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static SQLPlanMetric parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (SQLPlanMetric)PARSER.parseFrom(data);
      }

      public static SQLPlanMetric parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SQLPlanMetric)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SQLPlanMetric parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (SQLPlanMetric)PARSER.parseFrom(data);
      }

      public static SQLPlanMetric parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SQLPlanMetric)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SQLPlanMetric parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (SQLPlanMetric)PARSER.parseFrom(data);
      }

      public static SQLPlanMetric parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SQLPlanMetric)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SQLPlanMetric parseFrom(InputStream input) throws IOException {
         return (SQLPlanMetric)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SQLPlanMetric parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SQLPlanMetric)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static SQLPlanMetric parseDelimitedFrom(InputStream input) throws IOException {
         return (SQLPlanMetric)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static SQLPlanMetric parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SQLPlanMetric)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static SQLPlanMetric parseFrom(CodedInputStream input) throws IOException {
         return (SQLPlanMetric)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SQLPlanMetric parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SQLPlanMetric)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(SQLPlanMetric prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static SQLPlanMetric getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public SQLPlanMetric getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", SQLPlanMetric.class.getName());
         DEFAULT_INSTANCE = new SQLPlanMetric();
         PARSER = new AbstractParser() {
            public SQLPlanMetric parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.SQLPlanMetric.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements SQLPlanMetricOrBuilder {
         private int bitField0_;
         private Object name_ = "";
         private long accumulatorId_;
         private Object metricType_ = "";

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLPlanMetric_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLPlanMetric_fieldAccessorTable.ensureFieldAccessorsInitialized(SQLPlanMetric.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.name_ = "";
            this.accumulatorId_ = 0L;
            this.metricType_ = "";
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLPlanMetric_descriptor;
         }

         public SQLPlanMetric getDefaultInstanceForType() {
            return StoreTypes.SQLPlanMetric.getDefaultInstance();
         }

         public SQLPlanMetric build() {
            SQLPlanMetric result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public SQLPlanMetric buildPartial() {
            SQLPlanMetric result = new SQLPlanMetric(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(SQLPlanMetric result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.accumulatorId_ = this.accumulatorId_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.metricType_ = this.metricType_;
               to_bitField0_ |= 2;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof SQLPlanMetric) {
               return this.mergeFrom((SQLPlanMetric)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(SQLPlanMetric other) {
            if (other == StoreTypes.SQLPlanMetric.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.getAccumulatorId() != 0L) {
                  this.setAccumulatorId(other.getAccumulatorId());
               }

               if (other.hasMetricType()) {
                  this.metricType_ = other.metricType_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.accumulatorId_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.metricType_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasName() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.SQLPlanMetric.getDefaultInstance().getName();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SQLPlanMetric.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public long getAccumulatorId() {
            return this.accumulatorId_;
         }

         public Builder setAccumulatorId(long value) {
            this.accumulatorId_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearAccumulatorId() {
            this.bitField0_ &= -3;
            this.accumulatorId_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasMetricType() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getMetricType() {
            Object ref = this.metricType_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.metricType_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getMetricTypeBytes() {
            Object ref = this.metricType_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.metricType_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setMetricType(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.metricType_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearMetricType() {
            this.metricType_ = StoreTypes.SQLPlanMetric.getDefaultInstance().getMetricType();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setMetricTypeBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SQLPlanMetric.checkByteStringIsUtf8(value);
               this.metricType_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }
      }
   }

   public static final class SQLExecutionUIData extends GeneratedMessage implements SQLExecutionUIDataOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int EXECUTION_ID_FIELD_NUMBER = 1;
      private long executionId_ = 0L;
      public static final int ROOT_EXECUTION_ID_FIELD_NUMBER = 2;
      private long rootExecutionId_ = 0L;
      public static final int DESCRIPTION_FIELD_NUMBER = 3;
      private volatile Object description_ = "";
      public static final int DETAILS_FIELD_NUMBER = 4;
      private volatile Object details_ = "";
      public static final int PHYSICAL_PLAN_DESCRIPTION_FIELD_NUMBER = 5;
      private volatile Object physicalPlanDescription_ = "";
      public static final int MODIFIED_CONFIGS_FIELD_NUMBER = 6;
      private MapField modifiedConfigs_;
      public static final int METRICS_FIELD_NUMBER = 7;
      private List metrics_;
      public static final int SUBMISSION_TIME_FIELD_NUMBER = 8;
      private long submissionTime_ = 0L;
      public static final int COMPLETION_TIME_FIELD_NUMBER = 9;
      private long completionTime_ = 0L;
      public static final int ERROR_MESSAGE_FIELD_NUMBER = 10;
      private volatile Object errorMessage_ = "";
      public static final int JOBS_FIELD_NUMBER = 11;
      private MapField jobs_;
      private static final Internal.MapAdapter.Converter jobsValueConverter;
      public static final int STAGES_FIELD_NUMBER = 12;
      private Internal.LongList stages_ = emptyLongList();
      private int stagesMemoizedSerializedSize = -1;
      public static final int METRIC_VALUES_IS_NULL_FIELD_NUMBER = 13;
      private boolean metricValuesIsNull_ = false;
      public static final int METRIC_VALUES_FIELD_NUMBER = 14;
      private MapField metricValues_;
      private byte memoizedIsInitialized = -1;
      private static final SQLExecutionUIData DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private SQLExecutionUIData(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private SQLExecutionUIData() {
         this.description_ = "";
         this.details_ = "";
         this.physicalPlanDescription_ = "";
         this.metrics_ = Collections.emptyList();
         this.errorMessage_ = "";
         this.stages_ = emptyLongList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 6 -> {
               return this.internalGetModifiedConfigs();
            }
            case 11 -> {
               return this.internalGetJobs();
            }
            case 14 -> {
               return this.internalGetMetricValues();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_fieldAccessorTable.ensureFieldAccessorsInitialized(SQLExecutionUIData.class, Builder.class);
      }

      public long getExecutionId() {
         return this.executionId_;
      }

      public long getRootExecutionId() {
         return this.rootExecutionId_;
      }

      public boolean hasDescription() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getDescription() {
         Object ref = this.description_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.description_ = s;
            return s;
         }
      }

      public ByteString getDescriptionBytes() {
         Object ref = this.description_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.description_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasDetails() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getDetails() {
         Object ref = this.details_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.details_ = s;
            return s;
         }
      }

      public ByteString getDetailsBytes() {
         Object ref = this.details_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.details_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasPhysicalPlanDescription() {
         return (this.bitField0_ & 4) != 0;
      }

      public String getPhysicalPlanDescription() {
         Object ref = this.physicalPlanDescription_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.physicalPlanDescription_ = s;
            return s;
         }
      }

      public ByteString getPhysicalPlanDescriptionBytes() {
         Object ref = this.physicalPlanDescription_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.physicalPlanDescription_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      private MapField internalGetModifiedConfigs() {
         return this.modifiedConfigs_ == null ? MapField.emptyMapField(StoreTypes.SQLExecutionUIData.ModifiedConfigsDefaultEntryHolder.defaultEntry) : this.modifiedConfigs_;
      }

      public int getModifiedConfigsCount() {
         return this.internalGetModifiedConfigs().getMap().size();
      }

      public boolean containsModifiedConfigs(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetModifiedConfigs().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getModifiedConfigs() {
         return this.getModifiedConfigsMap();
      }

      public Map getModifiedConfigsMap() {
         return this.internalGetModifiedConfigs().getMap();
      }

      public String getModifiedConfigsOrDefault(String key, String defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetModifiedConfigs().getMap();
            return map.containsKey(key) ? (String)map.get(key) : defaultValue;
         }
      }

      public String getModifiedConfigsOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetModifiedConfigs().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (String)map.get(key);
            }
         }
      }

      public List getMetricsList() {
         return this.metrics_;
      }

      public List getMetricsOrBuilderList() {
         return this.metrics_;
      }

      public int getMetricsCount() {
         return this.metrics_.size();
      }

      public SQLPlanMetric getMetrics(int index) {
         return (SQLPlanMetric)this.metrics_.get(index);
      }

      public SQLPlanMetricOrBuilder getMetricsOrBuilder(int index) {
         return (SQLPlanMetricOrBuilder)this.metrics_.get(index);
      }

      public long getSubmissionTime() {
         return this.submissionTime_;
      }

      public boolean hasCompletionTime() {
         return (this.bitField0_ & 8) != 0;
      }

      public long getCompletionTime() {
         return this.completionTime_;
      }

      public boolean hasErrorMessage() {
         return (this.bitField0_ & 16) != 0;
      }

      public String getErrorMessage() {
         Object ref = this.errorMessage_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.errorMessage_ = s;
            return s;
         }
      }

      public ByteString getErrorMessageBytes() {
         Object ref = this.errorMessage_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.errorMessage_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      private MapField internalGetJobs() {
         return this.jobs_ == null ? MapField.emptyMapField(StoreTypes.SQLExecutionUIData.JobsDefaultEntryHolder.defaultEntry) : this.jobs_;
      }

      private static final Map internalGetAdaptedJobsMap(Map map) {
         return new Internal.MapAdapter(map, jobsValueConverter);
      }

      public int getJobsCount() {
         return this.internalGetJobs().getMap().size();
      }

      public boolean containsJobs(long key) {
         return this.internalGetJobs().getMap().containsKey(key);
      }

      /** @deprecated */
      @Deprecated
      public Map getJobs() {
         return this.getJobsMap();
      }

      public Map getJobsMap() {
         return internalGetAdaptedJobsMap(this.internalGetJobs().getMap());
      }

      public JobExecutionStatus getJobsOrDefault(long key, JobExecutionStatus defaultValue) {
         Map<Long, Integer> map = this.internalGetJobs().getMap();
         return map.containsKey(key) ? (JobExecutionStatus)jobsValueConverter.doForward((Integer)map.get(key)) : defaultValue;
      }

      public JobExecutionStatus getJobsOrThrow(long key) {
         Map<Long, Integer> map = this.internalGetJobs().getMap();
         if (!map.containsKey(key)) {
            throw new IllegalArgumentException();
         } else {
            return (JobExecutionStatus)jobsValueConverter.doForward((Integer)map.get(key));
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getJobsValue() {
         return this.getJobsValueMap();
      }

      public Map getJobsValueMap() {
         return this.internalGetJobs().getMap();
      }

      public int getJobsValueOrDefault(long key, int defaultValue) {
         Map<Long, Integer> map = this.internalGetJobs().getMap();
         return map.containsKey(key) ? (Integer)map.get(key) : defaultValue;
      }

      public int getJobsValueOrThrow(long key) {
         Map<Long, Integer> map = this.internalGetJobs().getMap();
         if (!map.containsKey(key)) {
            throw new IllegalArgumentException();
         } else {
            return (Integer)map.get(key);
         }
      }

      public List getStagesList() {
         return this.stages_;
      }

      public int getStagesCount() {
         return this.stages_.size();
      }

      public long getStages(int index) {
         return this.stages_.getLong(index);
      }

      public boolean getMetricValuesIsNull() {
         return this.metricValuesIsNull_;
      }

      private MapField internalGetMetricValues() {
         return this.metricValues_ == null ? MapField.emptyMapField(StoreTypes.SQLExecutionUIData.MetricValuesDefaultEntryHolder.defaultEntry) : this.metricValues_;
      }

      public int getMetricValuesCount() {
         return this.internalGetMetricValues().getMap().size();
      }

      public boolean containsMetricValues(long key) {
         return this.internalGetMetricValues().getMap().containsKey(key);
      }

      /** @deprecated */
      @Deprecated
      public Map getMetricValues() {
         return this.getMetricValuesMap();
      }

      public Map getMetricValuesMap() {
         return this.internalGetMetricValues().getMap();
      }

      public String getMetricValuesOrDefault(long key, String defaultValue) {
         Map<Long, String> map = this.internalGetMetricValues().getMap();
         return map.containsKey(key) ? (String)map.get(key) : defaultValue;
      }

      public String getMetricValuesOrThrow(long key) {
         Map<Long, String> map = this.internalGetMetricValues().getMap();
         if (!map.containsKey(key)) {
            throw new IllegalArgumentException();
         } else {
            return (String)map.get(key);
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if (this.executionId_ != 0L) {
            output.writeInt64(1, this.executionId_);
         }

         if (this.rootExecutionId_ != 0L) {
            output.writeInt64(2, this.rootExecutionId_);
         }

         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 3, this.description_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 4, this.details_);
         }

         if ((this.bitField0_ & 4) != 0) {
            GeneratedMessage.writeString(output, 5, this.physicalPlanDescription_);
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetModifiedConfigs(), StoreTypes.SQLExecutionUIData.ModifiedConfigsDefaultEntryHolder.defaultEntry, 6);

         for(int i = 0; i < this.metrics_.size(); ++i) {
            output.writeMessage(7, (MessageLite)this.metrics_.get(i));
         }

         if (this.submissionTime_ != 0L) {
            output.writeInt64(8, this.submissionTime_);
         }

         if ((this.bitField0_ & 8) != 0) {
            output.writeInt64(9, this.completionTime_);
         }

         if ((this.bitField0_ & 16) != 0) {
            GeneratedMessage.writeString(output, 10, this.errorMessage_);
         }

         GeneratedMessage.serializeLongMapTo(output, this.internalGetJobs(), StoreTypes.SQLExecutionUIData.JobsDefaultEntryHolder.defaultEntry, 11);
         if (this.getStagesList().size() > 0) {
            output.writeUInt32NoTag(98);
            output.writeUInt32NoTag(this.stagesMemoizedSerializedSize);
         }

         for(int i = 0; i < this.stages_.size(); ++i) {
            output.writeInt64NoTag(this.stages_.getLong(i));
         }

         if (this.metricValuesIsNull_) {
            output.writeBool(13, this.metricValuesIsNull_);
         }

         GeneratedMessage.serializeLongMapTo(output, this.internalGetMetricValues(), StoreTypes.SQLExecutionUIData.MetricValuesDefaultEntryHolder.defaultEntry, 14);
         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.executionId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.executionId_);
            }

            if (this.rootExecutionId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.rootExecutionId_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.description_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(4, this.details_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += GeneratedMessage.computeStringSize(5, this.physicalPlanDescription_);
            }

            for(Map.Entry entry : this.internalGetModifiedConfigs().getMap().entrySet()) {
               MapEntry<String, String> modifiedConfigs__ = StoreTypes.SQLExecutionUIData.ModifiedConfigsDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((String)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(6, modifiedConfigs__);
            }

            for(int i = 0; i < this.metrics_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(7, (MessageLite)this.metrics_.get(i));
            }

            if (this.submissionTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(8, this.submissionTime_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += CodedOutputStream.computeInt64Size(9, this.completionTime_);
            }

            if ((this.bitField0_ & 16) != 0) {
               size += GeneratedMessage.computeStringSize(10, this.errorMessage_);
            }

            for(Map.Entry entry : this.internalGetJobs().getMap().entrySet()) {
               MapEntry<Long, Integer> jobs__ = StoreTypes.SQLExecutionUIData.JobsDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((Long)entry.getKey()).setValue((Integer)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(11, jobs__);
            }

            int dataSize = 0;

            for(int i = 0; i < this.stages_.size(); ++i) {
               dataSize += CodedOutputStream.computeInt64SizeNoTag(this.stages_.getLong(i));
            }

            size += dataSize;
            if (!this.getStagesList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.stagesMemoizedSerializedSize = dataSize;
            if (this.metricValuesIsNull_) {
               size += CodedOutputStream.computeBoolSize(13, this.metricValuesIsNull_);
            }

            for(Map.Entry entry : this.internalGetMetricValues().getMap().entrySet()) {
               MapEntry<Long, String> metricValues__ = StoreTypes.SQLExecutionUIData.MetricValuesDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((Long)entry.getKey()).setValue((String)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(14, metricValues__);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof SQLExecutionUIData)) {
            return super.equals(obj);
         } else {
            SQLExecutionUIData other = (SQLExecutionUIData)obj;
            if (this.getExecutionId() != other.getExecutionId()) {
               return false;
            } else if (this.getRootExecutionId() != other.getRootExecutionId()) {
               return false;
            } else if (this.hasDescription() != other.hasDescription()) {
               return false;
            } else if (this.hasDescription() && !this.getDescription().equals(other.getDescription())) {
               return false;
            } else if (this.hasDetails() != other.hasDetails()) {
               return false;
            } else if (this.hasDetails() && !this.getDetails().equals(other.getDetails())) {
               return false;
            } else if (this.hasPhysicalPlanDescription() != other.hasPhysicalPlanDescription()) {
               return false;
            } else if (this.hasPhysicalPlanDescription() && !this.getPhysicalPlanDescription().equals(other.getPhysicalPlanDescription())) {
               return false;
            } else if (!this.internalGetModifiedConfigs().equals(other.internalGetModifiedConfigs())) {
               return false;
            } else if (!this.getMetricsList().equals(other.getMetricsList())) {
               return false;
            } else if (this.getSubmissionTime() != other.getSubmissionTime()) {
               return false;
            } else if (this.hasCompletionTime() != other.hasCompletionTime()) {
               return false;
            } else if (this.hasCompletionTime() && this.getCompletionTime() != other.getCompletionTime()) {
               return false;
            } else if (this.hasErrorMessage() != other.hasErrorMessage()) {
               return false;
            } else if (this.hasErrorMessage() && !this.getErrorMessage().equals(other.getErrorMessage())) {
               return false;
            } else if (!this.internalGetJobs().equals(other.internalGetJobs())) {
               return false;
            } else if (!this.getStagesList().equals(other.getStagesList())) {
               return false;
            } else if (this.getMetricValuesIsNull() != other.getMetricValuesIsNull()) {
               return false;
            } else if (!this.internalGetMetricValues().equals(other.internalGetMetricValues())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getExecutionId());
            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getRootExecutionId());
            if (this.hasDescription()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getDescription().hashCode();
            }

            if (this.hasDetails()) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getDetails().hashCode();
            }

            if (this.hasPhysicalPlanDescription()) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getPhysicalPlanDescription().hashCode();
            }

            if (!this.internalGetModifiedConfigs().getMap().isEmpty()) {
               hash = 37 * hash + 6;
               hash = 53 * hash + this.internalGetModifiedConfigs().hashCode();
            }

            if (this.getMetricsCount() > 0) {
               hash = 37 * hash + 7;
               hash = 53 * hash + this.getMetricsList().hashCode();
            }

            hash = 37 * hash + 8;
            hash = 53 * hash + Internal.hashLong(this.getSubmissionTime());
            if (this.hasCompletionTime()) {
               hash = 37 * hash + 9;
               hash = 53 * hash + Internal.hashLong(this.getCompletionTime());
            }

            if (this.hasErrorMessage()) {
               hash = 37 * hash + 10;
               hash = 53 * hash + this.getErrorMessage().hashCode();
            }

            if (!this.internalGetJobs().getMap().isEmpty()) {
               hash = 37 * hash + 11;
               hash = 53 * hash + this.internalGetJobs().hashCode();
            }

            if (this.getStagesCount() > 0) {
               hash = 37 * hash + 12;
               hash = 53 * hash + this.getStagesList().hashCode();
            }

            hash = 37 * hash + 13;
            hash = 53 * hash + Internal.hashBoolean(this.getMetricValuesIsNull());
            if (!this.internalGetMetricValues().getMap().isEmpty()) {
               hash = 37 * hash + 14;
               hash = 53 * hash + this.internalGetMetricValues().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static SQLExecutionUIData parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (SQLExecutionUIData)PARSER.parseFrom(data);
      }

      public static SQLExecutionUIData parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SQLExecutionUIData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SQLExecutionUIData parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (SQLExecutionUIData)PARSER.parseFrom(data);
      }

      public static SQLExecutionUIData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SQLExecutionUIData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SQLExecutionUIData parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (SQLExecutionUIData)PARSER.parseFrom(data);
      }

      public static SQLExecutionUIData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SQLExecutionUIData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SQLExecutionUIData parseFrom(InputStream input) throws IOException {
         return (SQLExecutionUIData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SQLExecutionUIData parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SQLExecutionUIData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static SQLExecutionUIData parseDelimitedFrom(InputStream input) throws IOException {
         return (SQLExecutionUIData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static SQLExecutionUIData parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SQLExecutionUIData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static SQLExecutionUIData parseFrom(CodedInputStream input) throws IOException {
         return (SQLExecutionUIData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SQLExecutionUIData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SQLExecutionUIData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(SQLExecutionUIData prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static SQLExecutionUIData getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public SQLExecutionUIData getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", SQLExecutionUIData.class.getName());
         jobsValueConverter = Internal.MapAdapter.newEnumConverter(StoreTypes.JobExecutionStatus.internalGetValueMap(), StoreTypes.JobExecutionStatus.UNRECOGNIZED);
         DEFAULT_INSTANCE = new SQLExecutionUIData();
         PARSER = new AbstractParser() {
            public SQLExecutionUIData parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.SQLExecutionUIData.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      private static final class ModifiedConfigsDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_ModifiedConfigsEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.STRING, "");
         }
      }

      private static final class JobsDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_JobsEntry_descriptor, WireFormat.FieldType.INT64, 0L, WireFormat.FieldType.ENUM, StoreTypes.JobExecutionStatus.JOB_EXECUTION_STATUS_UNSPECIFIED.getNumber());
         }
      }

      private static final class MetricValuesDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_MetricValuesEntry_descriptor, WireFormat.FieldType.INT64, 0L, WireFormat.FieldType.STRING, "");
         }
      }

      public static final class Builder extends GeneratedMessage.Builder implements SQLExecutionUIDataOrBuilder {
         private int bitField0_;
         private long executionId_;
         private long rootExecutionId_;
         private Object description_ = "";
         private Object details_ = "";
         private Object physicalPlanDescription_ = "";
         private MapField modifiedConfigs_;
         private List metrics_ = Collections.emptyList();
         private RepeatedFieldBuilder metricsBuilder_;
         private long submissionTime_;
         private long completionTime_;
         private Object errorMessage_ = "";
         private MapField jobs_;
         private Internal.LongList stages_ = StoreTypes.SQLExecutionUIData.emptyLongList();
         private boolean metricValuesIsNull_;
         private MapField metricValues_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 6 -> {
                  return this.internalGetModifiedConfigs();
               }
               case 11 -> {
                  return this.internalGetJobs();
               }
               case 14 -> {
                  return this.internalGetMetricValues();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 6 -> {
                  return this.internalGetMutableModifiedConfigs();
               }
               case 11 -> {
                  return this.internalGetMutableJobs();
               }
               case 14 -> {
                  return this.internalGetMutableMetricValues();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_fieldAccessorTable.ensureFieldAccessorsInitialized(SQLExecutionUIData.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.executionId_ = 0L;
            this.rootExecutionId_ = 0L;
            this.description_ = "";
            this.details_ = "";
            this.physicalPlanDescription_ = "";
            this.internalGetMutableModifiedConfigs().clear();
            if (this.metricsBuilder_ == null) {
               this.metrics_ = Collections.emptyList();
            } else {
               this.metrics_ = null;
               this.metricsBuilder_.clear();
            }

            this.bitField0_ &= -65;
            this.submissionTime_ = 0L;
            this.completionTime_ = 0L;
            this.errorMessage_ = "";
            this.internalGetMutableJobs().clear();
            this.stages_ = StoreTypes.SQLExecutionUIData.emptyLongList();
            this.metricValuesIsNull_ = false;
            this.internalGetMutableMetricValues().clear();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SQLExecutionUIData_descriptor;
         }

         public SQLExecutionUIData getDefaultInstanceForType() {
            return StoreTypes.SQLExecutionUIData.getDefaultInstance();
         }

         public SQLExecutionUIData build() {
            SQLExecutionUIData result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public SQLExecutionUIData buildPartial() {
            SQLExecutionUIData result = new SQLExecutionUIData(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(SQLExecutionUIData result) {
            if (this.metricsBuilder_ == null) {
               if ((this.bitField0_ & 64) != 0) {
                  this.metrics_ = Collections.unmodifiableList(this.metrics_);
                  this.bitField0_ &= -65;
               }

               result.metrics_ = this.metrics_;
            } else {
               result.metrics_ = this.metricsBuilder_.build();
            }

         }

         private void buildPartial0(SQLExecutionUIData result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.executionId_ = this.executionId_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.rootExecutionId_ = this.rootExecutionId_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 4) != 0) {
               result.description_ = this.description_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.details_ = this.details_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.physicalPlanDescription_ = this.physicalPlanDescription_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.modifiedConfigs_ = this.internalGetModifiedConfigs();
               result.modifiedConfigs_.makeImmutable();
            }

            if ((from_bitField0_ & 128) != 0) {
               result.submissionTime_ = this.submissionTime_;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.completionTime_ = this.completionTime_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 512) != 0) {
               result.errorMessage_ = this.errorMessage_;
               to_bitField0_ |= 16;
            }

            if ((from_bitField0_ & 1024) != 0) {
               result.jobs_ = this.internalGetJobs();
               result.jobs_.makeImmutable();
            }

            if ((from_bitField0_ & 2048) != 0) {
               this.stages_.makeImmutable();
               result.stages_ = this.stages_;
            }

            if ((from_bitField0_ & 4096) != 0) {
               result.metricValuesIsNull_ = this.metricValuesIsNull_;
            }

            if ((from_bitField0_ & 8192) != 0) {
               result.metricValues_ = this.internalGetMetricValues();
               result.metricValues_.makeImmutable();
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof SQLExecutionUIData) {
               return this.mergeFrom((SQLExecutionUIData)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(SQLExecutionUIData other) {
            if (other == StoreTypes.SQLExecutionUIData.getDefaultInstance()) {
               return this;
            } else {
               if (other.getExecutionId() != 0L) {
                  this.setExecutionId(other.getExecutionId());
               }

               if (other.getRootExecutionId() != 0L) {
                  this.setRootExecutionId(other.getRootExecutionId());
               }

               if (other.hasDescription()) {
                  this.description_ = other.description_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (other.hasDetails()) {
                  this.details_ = other.details_;
                  this.bitField0_ |= 8;
                  this.onChanged();
               }

               if (other.hasPhysicalPlanDescription()) {
                  this.physicalPlanDescription_ = other.physicalPlanDescription_;
                  this.bitField0_ |= 16;
                  this.onChanged();
               }

               this.internalGetMutableModifiedConfigs().mergeFrom(other.internalGetModifiedConfigs());
               this.bitField0_ |= 32;
               if (this.metricsBuilder_ == null) {
                  if (!other.metrics_.isEmpty()) {
                     if (this.metrics_.isEmpty()) {
                        this.metrics_ = other.metrics_;
                        this.bitField0_ &= -65;
                     } else {
                        this.ensureMetricsIsMutable();
                        this.metrics_.addAll(other.metrics_);
                     }

                     this.onChanged();
                  }
               } else if (!other.metrics_.isEmpty()) {
                  if (this.metricsBuilder_.isEmpty()) {
                     this.metricsBuilder_.dispose();
                     this.metricsBuilder_ = null;
                     this.metrics_ = other.metrics_;
                     this.bitField0_ &= -65;
                     this.metricsBuilder_ = StoreTypes.SQLExecutionUIData.alwaysUseFieldBuilders ? this.getMetricsFieldBuilder() : null;
                  } else {
                     this.metricsBuilder_.addAllMessages(other.metrics_);
                  }
               }

               if (other.getSubmissionTime() != 0L) {
                  this.setSubmissionTime(other.getSubmissionTime());
               }

               if (other.hasCompletionTime()) {
                  this.setCompletionTime(other.getCompletionTime());
               }

               if (other.hasErrorMessage()) {
                  this.errorMessage_ = other.errorMessage_;
                  this.bitField0_ |= 512;
                  this.onChanged();
               }

               this.internalGetMutableJobs().mergeFrom(other.internalGetJobs());
               this.bitField0_ |= 1024;
               if (!other.stages_.isEmpty()) {
                  if (this.stages_.isEmpty()) {
                     this.stages_ = other.stages_;
                     this.stages_.makeImmutable();
                     this.bitField0_ |= 2048;
                  } else {
                     this.ensureStagesIsMutable();
                     this.stages_.addAll(other.stages_);
                  }

                  this.onChanged();
               }

               if (other.getMetricValuesIsNull()) {
                  this.setMetricValuesIsNull(other.getMetricValuesIsNull());
               }

               this.internalGetMutableMetricValues().mergeFrom(other.internalGetMetricValues());
               this.bitField0_ |= 8192;
               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.executionId_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.rootExecutionId_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.description_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 34:
                           this.details_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 8;
                           break;
                        case 42:
                           this.physicalPlanDescription_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 16;
                           break;
                        case 50:
                           MapEntry<String, String> modifiedConfigs__ = (MapEntry)input.readMessage(StoreTypes.SQLExecutionUIData.ModifiedConfigsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableModifiedConfigs().getMutableMap().put((String)modifiedConfigs__.getKey(), (String)modifiedConfigs__.getValue());
                           this.bitField0_ |= 32;
                           break;
                        case 58:
                           SQLPlanMetric m = (SQLPlanMetric)input.readMessage(StoreTypes.SQLPlanMetric.parser(), extensionRegistry);
                           if (this.metricsBuilder_ == null) {
                              this.ensureMetricsIsMutable();
                              this.metrics_.add(m);
                           } else {
                              this.metricsBuilder_.addMessage(m);
                           }
                           break;
                        case 64:
                           this.submissionTime_ = input.readInt64();
                           this.bitField0_ |= 128;
                           break;
                        case 72:
                           this.completionTime_ = input.readInt64();
                           this.bitField0_ |= 256;
                           break;
                        case 82:
                           this.errorMessage_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 512;
                           break;
                        case 90:
                           MapEntry<Long, Integer> jobs__ = (MapEntry)input.readMessage(StoreTypes.SQLExecutionUIData.JobsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableJobs().getMutableMap().put((Long)jobs__.getKey(), (Integer)jobs__.getValue());
                           this.bitField0_ |= 1024;
                           break;
                        case 96:
                           long v = input.readInt64();
                           this.ensureStagesIsMutable();
                           this.stages_.addLong(v);
                           break;
                        case 98:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           this.ensureStagesIsMutable();

                           while(input.getBytesUntilLimit() > 0) {
                              this.stages_.addLong(input.readInt64());
                           }

                           input.popLimit(limit);
                           break;
                        case 104:
                           this.metricValuesIsNull_ = input.readBool();
                           this.bitField0_ |= 4096;
                           break;
                        case 114:
                           MapEntry<Long, String> metricValues__ = (MapEntry)input.readMessage(StoreTypes.SQLExecutionUIData.MetricValuesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableMetricValues().getMutableMap().put((Long)metricValues__.getKey(), (String)metricValues__.getValue());
                           this.bitField0_ |= 8192;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getExecutionId() {
            return this.executionId_;
         }

         public Builder setExecutionId(long value) {
            this.executionId_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearExecutionId() {
            this.bitField0_ &= -2;
            this.executionId_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRootExecutionId() {
            return this.rootExecutionId_;
         }

         public Builder setRootExecutionId(long value) {
            this.rootExecutionId_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearRootExecutionId() {
            this.bitField0_ &= -3;
            this.rootExecutionId_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasDescription() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getDescription() {
            Object ref = this.description_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.description_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getDescriptionBytes() {
            Object ref = this.description_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.description_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setDescription(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.description_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearDescription() {
            this.description_ = StoreTypes.SQLExecutionUIData.getDefaultInstance().getDescription();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setDescriptionBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SQLExecutionUIData.checkByteStringIsUtf8(value);
               this.description_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public boolean hasDetails() {
            return (this.bitField0_ & 8) != 0;
         }

         public String getDetails() {
            Object ref = this.details_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.details_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getDetailsBytes() {
            Object ref = this.details_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.details_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setDetails(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.details_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }

         public Builder clearDetails() {
            this.details_ = StoreTypes.SQLExecutionUIData.getDefaultInstance().getDetails();
            this.bitField0_ &= -9;
            this.onChanged();
            return this;
         }

         public Builder setDetailsBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SQLExecutionUIData.checkByteStringIsUtf8(value);
               this.details_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }

         public boolean hasPhysicalPlanDescription() {
            return (this.bitField0_ & 16) != 0;
         }

         public String getPhysicalPlanDescription() {
            Object ref = this.physicalPlanDescription_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.physicalPlanDescription_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getPhysicalPlanDescriptionBytes() {
            Object ref = this.physicalPlanDescription_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.physicalPlanDescription_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setPhysicalPlanDescription(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.physicalPlanDescription_ = value;
               this.bitField0_ |= 16;
               this.onChanged();
               return this;
            }
         }

         public Builder clearPhysicalPlanDescription() {
            this.physicalPlanDescription_ = StoreTypes.SQLExecutionUIData.getDefaultInstance().getPhysicalPlanDescription();
            this.bitField0_ &= -17;
            this.onChanged();
            return this;
         }

         public Builder setPhysicalPlanDescriptionBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SQLExecutionUIData.checkByteStringIsUtf8(value);
               this.physicalPlanDescription_ = value;
               this.bitField0_ |= 16;
               this.onChanged();
               return this;
            }
         }

         private MapField internalGetModifiedConfigs() {
            return this.modifiedConfigs_ == null ? MapField.emptyMapField(StoreTypes.SQLExecutionUIData.ModifiedConfigsDefaultEntryHolder.defaultEntry) : this.modifiedConfigs_;
         }

         private MapField internalGetMutableModifiedConfigs() {
            if (this.modifiedConfigs_ == null) {
               this.modifiedConfigs_ = MapField.newMapField(StoreTypes.SQLExecutionUIData.ModifiedConfigsDefaultEntryHolder.defaultEntry);
            }

            if (!this.modifiedConfigs_.isMutable()) {
               this.modifiedConfigs_ = this.modifiedConfigs_.copy();
            }

            this.bitField0_ |= 32;
            this.onChanged();
            return this.modifiedConfigs_;
         }

         public int getModifiedConfigsCount() {
            return this.internalGetModifiedConfigs().getMap().size();
         }

         public boolean containsModifiedConfigs(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetModifiedConfigs().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getModifiedConfigs() {
            return this.getModifiedConfigsMap();
         }

         public Map getModifiedConfigsMap() {
            return this.internalGetModifiedConfigs().getMap();
         }

         public String getModifiedConfigsOrDefault(String key, String defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetModifiedConfigs().getMap();
               return map.containsKey(key) ? (String)map.get(key) : defaultValue;
            }
         }

         public String getModifiedConfigsOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetModifiedConfigs().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (String)map.get(key);
               }
            }
         }

         public Builder clearModifiedConfigs() {
            this.bitField0_ &= -33;
            this.internalGetMutableModifiedConfigs().getMutableMap().clear();
            return this;
         }

         public Builder removeModifiedConfigs(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableModifiedConfigs().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableModifiedConfigs() {
            this.bitField0_ |= 32;
            return this.internalGetMutableModifiedConfigs().getMutableMap();
         }

         public Builder putModifiedConfigs(String key, String value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableModifiedConfigs().getMutableMap().put(key, value);
               this.bitField0_ |= 32;
               return this;
            }
         }

         public Builder putAllModifiedConfigs(Map values) {
            this.internalGetMutableModifiedConfigs().getMutableMap().putAll(values);
            this.bitField0_ |= 32;
            return this;
         }

         private void ensureMetricsIsMutable() {
            if ((this.bitField0_ & 64) == 0) {
               this.metrics_ = new ArrayList(this.metrics_);
               this.bitField0_ |= 64;
            }

         }

         public List getMetricsList() {
            return this.metricsBuilder_ == null ? Collections.unmodifiableList(this.metrics_) : this.metricsBuilder_.getMessageList();
         }

         public int getMetricsCount() {
            return this.metricsBuilder_ == null ? this.metrics_.size() : this.metricsBuilder_.getCount();
         }

         public SQLPlanMetric getMetrics(int index) {
            return this.metricsBuilder_ == null ? (SQLPlanMetric)this.metrics_.get(index) : (SQLPlanMetric)this.metricsBuilder_.getMessage(index);
         }

         public Builder setMetrics(int index, SQLPlanMetric value) {
            if (this.metricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsIsMutable();
               this.metrics_.set(index, value);
               this.onChanged();
            } else {
               this.metricsBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setMetrics(int index, SQLPlanMetric.Builder builderForValue) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.metricsBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addMetrics(SQLPlanMetric value) {
            if (this.metricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsIsMutable();
               this.metrics_.add(value);
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addMetrics(int index, SQLPlanMetric value) {
            if (this.metricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsIsMutable();
               this.metrics_.add(index, value);
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addMetrics(SQLPlanMetric.Builder builderForValue) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addMetrics(int index, SQLPlanMetric.Builder builderForValue) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllMetrics(Iterable values) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.metrics_);
               this.onChanged();
            } else {
               this.metricsBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearMetrics() {
            if (this.metricsBuilder_ == null) {
               this.metrics_ = Collections.emptyList();
               this.bitField0_ &= -65;
               this.onChanged();
            } else {
               this.metricsBuilder_.clear();
            }

            return this;
         }

         public Builder removeMetrics(int index) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.remove(index);
               this.onChanged();
            } else {
               this.metricsBuilder_.remove(index);
            }

            return this;
         }

         public SQLPlanMetric.Builder getMetricsBuilder(int index) {
            return (SQLPlanMetric.Builder)this.getMetricsFieldBuilder().getBuilder(index);
         }

         public SQLPlanMetricOrBuilder getMetricsOrBuilder(int index) {
            return this.metricsBuilder_ == null ? (SQLPlanMetricOrBuilder)this.metrics_.get(index) : (SQLPlanMetricOrBuilder)this.metricsBuilder_.getMessageOrBuilder(index);
         }

         public List getMetricsOrBuilderList() {
            return this.metricsBuilder_ != null ? this.metricsBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.metrics_);
         }

         public SQLPlanMetric.Builder addMetricsBuilder() {
            return (SQLPlanMetric.Builder)this.getMetricsFieldBuilder().addBuilder(StoreTypes.SQLPlanMetric.getDefaultInstance());
         }

         public SQLPlanMetric.Builder addMetricsBuilder(int index) {
            return (SQLPlanMetric.Builder)this.getMetricsFieldBuilder().addBuilder(index, StoreTypes.SQLPlanMetric.getDefaultInstance());
         }

         public List getMetricsBuilderList() {
            return this.getMetricsFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getMetricsFieldBuilder() {
            if (this.metricsBuilder_ == null) {
               this.metricsBuilder_ = new RepeatedFieldBuilder(this.metrics_, (this.bitField0_ & 64) != 0, this.getParentForChildren(), this.isClean());
               this.metrics_ = null;
            }

            return this.metricsBuilder_;
         }

         public long getSubmissionTime() {
            return this.submissionTime_;
         }

         public Builder setSubmissionTime(long value) {
            this.submissionTime_ = value;
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearSubmissionTime() {
            this.bitField0_ &= -129;
            this.submissionTime_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasCompletionTime() {
            return (this.bitField0_ & 256) != 0;
         }

         public long getCompletionTime() {
            return this.completionTime_;
         }

         public Builder setCompletionTime(long value) {
            this.completionTime_ = value;
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearCompletionTime() {
            this.bitField0_ &= -257;
            this.completionTime_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasErrorMessage() {
            return (this.bitField0_ & 512) != 0;
         }

         public String getErrorMessage() {
            Object ref = this.errorMessage_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.errorMessage_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getErrorMessageBytes() {
            Object ref = this.errorMessage_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.errorMessage_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setErrorMessage(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.errorMessage_ = value;
               this.bitField0_ |= 512;
               this.onChanged();
               return this;
            }
         }

         public Builder clearErrorMessage() {
            this.errorMessage_ = StoreTypes.SQLExecutionUIData.getDefaultInstance().getErrorMessage();
            this.bitField0_ &= -513;
            this.onChanged();
            return this;
         }

         public Builder setErrorMessageBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SQLExecutionUIData.checkByteStringIsUtf8(value);
               this.errorMessage_ = value;
               this.bitField0_ |= 512;
               this.onChanged();
               return this;
            }
         }

         private MapField internalGetJobs() {
            return this.jobs_ == null ? MapField.emptyMapField(StoreTypes.SQLExecutionUIData.JobsDefaultEntryHolder.defaultEntry) : this.jobs_;
         }

         private MapField internalGetMutableJobs() {
            if (this.jobs_ == null) {
               this.jobs_ = MapField.newMapField(StoreTypes.SQLExecutionUIData.JobsDefaultEntryHolder.defaultEntry);
            }

            if (!this.jobs_.isMutable()) {
               this.jobs_ = this.jobs_.copy();
            }

            this.bitField0_ |= 1024;
            this.onChanged();
            return this.jobs_;
         }

         public int getJobsCount() {
            return this.internalGetJobs().getMap().size();
         }

         public boolean containsJobs(long key) {
            return this.internalGetJobs().getMap().containsKey(key);
         }

         /** @deprecated */
         @Deprecated
         public Map getJobs() {
            return this.getJobsMap();
         }

         public Map getJobsMap() {
            return StoreTypes.SQLExecutionUIData.internalGetAdaptedJobsMap(this.internalGetJobs().getMap());
         }

         public JobExecutionStatus getJobsOrDefault(long key, JobExecutionStatus defaultValue) {
            Map<Long, Integer> map = this.internalGetJobs().getMap();
            return map.containsKey(key) ? (JobExecutionStatus)StoreTypes.SQLExecutionUIData.jobsValueConverter.doForward((Integer)map.get(key)) : defaultValue;
         }

         public JobExecutionStatus getJobsOrThrow(long key) {
            Map<Long, Integer> map = this.internalGetJobs().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (JobExecutionStatus)StoreTypes.SQLExecutionUIData.jobsValueConverter.doForward((Integer)map.get(key));
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getJobsValue() {
            return this.getJobsValueMap();
         }

         public Map getJobsValueMap() {
            return this.internalGetJobs().getMap();
         }

         public int getJobsValueOrDefault(long key, int defaultValue) {
            Map<Long, Integer> map = this.internalGetJobs().getMap();
            return map.containsKey(key) ? (Integer)map.get(key) : defaultValue;
         }

         public int getJobsValueOrThrow(long key) {
            Map<Long, Integer> map = this.internalGetJobs().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (Integer)map.get(key);
            }
         }

         public Builder clearJobs() {
            this.bitField0_ &= -1025;
            this.internalGetMutableJobs().getMutableMap().clear();
            return this;
         }

         public Builder removeJobs(long key) {
            this.internalGetMutableJobs().getMutableMap().remove(key);
            return this;
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableJobs() {
            this.bitField0_ |= 1024;
            return StoreTypes.SQLExecutionUIData.internalGetAdaptedJobsMap(this.internalGetMutableJobs().getMutableMap());
         }

         public Builder putJobs(long key, JobExecutionStatus value) {
            this.internalGetMutableJobs().getMutableMap().put(key, (Integer)StoreTypes.SQLExecutionUIData.jobsValueConverter.doBackward(value));
            this.bitField0_ |= 1024;
            return this;
         }

         public Builder putAllJobs(Map values) {
            StoreTypes.SQLExecutionUIData.internalGetAdaptedJobsMap(this.internalGetMutableJobs().getMutableMap()).putAll(values);
            this.bitField0_ |= 1024;
            return this;
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableJobsValue() {
            this.bitField0_ |= 1024;
            return this.internalGetMutableJobs().getMutableMap();
         }

         public Builder putJobsValue(long key, int value) {
            this.internalGetMutableJobs().getMutableMap().put(key, value);
            this.bitField0_ |= 1024;
            return this;
         }

         public Builder putAllJobsValue(Map values) {
            this.internalGetMutableJobs().getMutableMap().putAll(values);
            this.bitField0_ |= 1024;
            return this;
         }

         private void ensureStagesIsMutable() {
            if (!this.stages_.isModifiable()) {
               this.stages_ = (Internal.LongList)StoreTypes.SQLExecutionUIData.makeMutableCopy(this.stages_);
            }

            this.bitField0_ |= 2048;
         }

         public List getStagesList() {
            this.stages_.makeImmutable();
            return this.stages_;
         }

         public int getStagesCount() {
            return this.stages_.size();
         }

         public long getStages(int index) {
            return this.stages_.getLong(index);
         }

         public Builder setStages(int index, long value) {
            this.ensureStagesIsMutable();
            this.stages_.setLong(index, value);
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder addStages(long value) {
            this.ensureStagesIsMutable();
            this.stages_.addLong(value);
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder addAllStages(Iterable values) {
            this.ensureStagesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.stages_);
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder clearStages() {
            this.stages_ = StoreTypes.SQLExecutionUIData.emptyLongList();
            this.bitField0_ &= -2049;
            this.onChanged();
            return this;
         }

         public boolean getMetricValuesIsNull() {
            return this.metricValuesIsNull_;
         }

         public Builder setMetricValuesIsNull(boolean value) {
            this.metricValuesIsNull_ = value;
            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder clearMetricValuesIsNull() {
            this.bitField0_ &= -4097;
            this.metricValuesIsNull_ = false;
            this.onChanged();
            return this;
         }

         private MapField internalGetMetricValues() {
            return this.metricValues_ == null ? MapField.emptyMapField(StoreTypes.SQLExecutionUIData.MetricValuesDefaultEntryHolder.defaultEntry) : this.metricValues_;
         }

         private MapField internalGetMutableMetricValues() {
            if (this.metricValues_ == null) {
               this.metricValues_ = MapField.newMapField(StoreTypes.SQLExecutionUIData.MetricValuesDefaultEntryHolder.defaultEntry);
            }

            if (!this.metricValues_.isMutable()) {
               this.metricValues_ = this.metricValues_.copy();
            }

            this.bitField0_ |= 8192;
            this.onChanged();
            return this.metricValues_;
         }

         public int getMetricValuesCount() {
            return this.internalGetMetricValues().getMap().size();
         }

         public boolean containsMetricValues(long key) {
            return this.internalGetMetricValues().getMap().containsKey(key);
         }

         /** @deprecated */
         @Deprecated
         public Map getMetricValues() {
            return this.getMetricValuesMap();
         }

         public Map getMetricValuesMap() {
            return this.internalGetMetricValues().getMap();
         }

         public String getMetricValuesOrDefault(long key, String defaultValue) {
            Map<Long, String> map = this.internalGetMetricValues().getMap();
            return map.containsKey(key) ? (String)map.get(key) : defaultValue;
         }

         public String getMetricValuesOrThrow(long key) {
            Map<Long, String> map = this.internalGetMetricValues().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (String)map.get(key);
            }
         }

         public Builder clearMetricValues() {
            this.bitField0_ &= -8193;
            this.internalGetMutableMetricValues().getMutableMap().clear();
            return this;
         }

         public Builder removeMetricValues(long key) {
            this.internalGetMutableMetricValues().getMutableMap().remove(key);
            return this;
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableMetricValues() {
            this.bitField0_ |= 8192;
            return this.internalGetMutableMetricValues().getMutableMap();
         }

         public Builder putMetricValues(long key, String value) {
            if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableMetricValues().getMutableMap().put(key, value);
               this.bitField0_ |= 8192;
               return this;
            }
         }

         public Builder putAllMetricValues(Map values) {
            this.internalGetMutableMetricValues().getMutableMap().putAll(values);
            this.bitField0_ |= 8192;
            return this;
         }
      }
   }

   public static final class SparkPlanGraphNode extends GeneratedMessage implements SparkPlanGraphNodeOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private long id_ = 0L;
      public static final int NAME_FIELD_NUMBER = 2;
      private volatile Object name_ = "";
      public static final int DESC_FIELD_NUMBER = 3;
      private volatile Object desc_ = "";
      public static final int METRICS_FIELD_NUMBER = 4;
      private List metrics_;
      private byte memoizedIsInitialized = -1;
      private static final SparkPlanGraphNode DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private SparkPlanGraphNode(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private SparkPlanGraphNode() {
         this.name_ = "";
         this.desc_ = "";
         this.metrics_ = Collections.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNode_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNode_fieldAccessorTable.ensureFieldAccessorsInitialized(SparkPlanGraphNode.class, Builder.class);
      }

      public long getId() {
         return this.id_;
      }

      public boolean hasName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasDesc() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getDesc() {
         Object ref = this.desc_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.desc_ = s;
            return s;
         }
      }

      public ByteString getDescBytes() {
         Object ref = this.desc_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.desc_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public List getMetricsList() {
         return this.metrics_;
      }

      public List getMetricsOrBuilderList() {
         return this.metrics_;
      }

      public int getMetricsCount() {
         return this.metrics_.size();
      }

      public SQLPlanMetric getMetrics(int index) {
         return (SQLPlanMetric)this.metrics_.get(index);
      }

      public SQLPlanMetricOrBuilder getMetricsOrBuilder(int index) {
         return (SQLPlanMetricOrBuilder)this.metrics_.get(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.id_ != 0L) {
            output.writeInt64(1, this.id_);
         }

         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 2, this.name_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 3, this.desc_);
         }

         for(int i = 0; i < this.metrics_.size(); ++i) {
            output.writeMessage(4, (MessageLite)this.metrics_.get(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.id_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.id_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.name_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.desc_);
            }

            for(int i = 0; i < this.metrics_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(4, (MessageLite)this.metrics_.get(i));
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof SparkPlanGraphNode)) {
            return super.equals(obj);
         } else {
            SparkPlanGraphNode other = (SparkPlanGraphNode)obj;
            if (this.getId() != other.getId()) {
               return false;
            } else if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.hasDesc() != other.hasDesc()) {
               return false;
            } else if (this.hasDesc() && !this.getDesc().equals(other.getDesc())) {
               return false;
            } else if (!this.getMetricsList().equals(other.getMetricsList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getId());
            if (this.hasName()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.hasDesc()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getDesc().hashCode();
            }

            if (this.getMetricsCount() > 0) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getMetricsList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static SparkPlanGraphNode parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNode)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphNode parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNode)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNode)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNode)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNode)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNode)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphNode parseFrom(InputStream input) throws IOException {
         return (SparkPlanGraphNode)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SparkPlanGraphNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphNode)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static SparkPlanGraphNode parseDelimitedFrom(InputStream input) throws IOException {
         return (SparkPlanGraphNode)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static SparkPlanGraphNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphNode)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static SparkPlanGraphNode parseFrom(CodedInputStream input) throws IOException {
         return (SparkPlanGraphNode)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SparkPlanGraphNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphNode)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(SparkPlanGraphNode prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static SparkPlanGraphNode getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public SparkPlanGraphNode getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", SparkPlanGraphNode.class.getName());
         DEFAULT_INSTANCE = new SparkPlanGraphNode();
         PARSER = new AbstractParser() {
            public SparkPlanGraphNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.SparkPlanGraphNode.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements SparkPlanGraphNodeOrBuilder {
         private int bitField0_;
         private long id_;
         private Object name_ = "";
         private Object desc_ = "";
         private List metrics_ = Collections.emptyList();
         private RepeatedFieldBuilder metricsBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNode_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNode_fieldAccessorTable.ensureFieldAccessorsInitialized(SparkPlanGraphNode.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.id_ = 0L;
            this.name_ = "";
            this.desc_ = "";
            if (this.metricsBuilder_ == null) {
               this.metrics_ = Collections.emptyList();
            } else {
               this.metrics_ = null;
               this.metricsBuilder_.clear();
            }

            this.bitField0_ &= -9;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNode_descriptor;
         }

         public SparkPlanGraphNode getDefaultInstanceForType() {
            return StoreTypes.SparkPlanGraphNode.getDefaultInstance();
         }

         public SparkPlanGraphNode build() {
            SparkPlanGraphNode result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public SparkPlanGraphNode buildPartial() {
            SparkPlanGraphNode result = new SparkPlanGraphNode(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(SparkPlanGraphNode result) {
            if (this.metricsBuilder_ == null) {
               if ((this.bitField0_ & 8) != 0) {
                  this.metrics_ = Collections.unmodifiableList(this.metrics_);
                  this.bitField0_ &= -9;
               }

               result.metrics_ = this.metrics_;
            } else {
               result.metrics_ = this.metricsBuilder_.build();
            }

         }

         private void buildPartial0(SparkPlanGraphNode result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.id_ = this.id_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 2) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.desc_ = this.desc_;
               to_bitField0_ |= 2;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof SparkPlanGraphNode) {
               return this.mergeFrom((SparkPlanGraphNode)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(SparkPlanGraphNode other) {
            if (other == StoreTypes.SparkPlanGraphNode.getDefaultInstance()) {
               return this;
            } else {
               if (other.getId() != 0L) {
                  this.setId(other.getId());
               }

               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.hasDesc()) {
                  this.desc_ = other.desc_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (this.metricsBuilder_ == null) {
                  if (!other.metrics_.isEmpty()) {
                     if (this.metrics_.isEmpty()) {
                        this.metrics_ = other.metrics_;
                        this.bitField0_ &= -9;
                     } else {
                        this.ensureMetricsIsMutable();
                        this.metrics_.addAll(other.metrics_);
                     }

                     this.onChanged();
                  }
               } else if (!other.metrics_.isEmpty()) {
                  if (this.metricsBuilder_.isEmpty()) {
                     this.metricsBuilder_.dispose();
                     this.metricsBuilder_ = null;
                     this.metrics_ = other.metrics_;
                     this.bitField0_ &= -9;
                     this.metricsBuilder_ = StoreTypes.SparkPlanGraphNode.alwaysUseFieldBuilders ? this.getMetricsFieldBuilder() : null;
                  } else {
                     this.metricsBuilder_.addAllMessages(other.metrics_);
                  }
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.id_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.desc_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 34:
                           SQLPlanMetric m = (SQLPlanMetric)input.readMessage(StoreTypes.SQLPlanMetric.parser(), extensionRegistry);
                           if (this.metricsBuilder_ == null) {
                              this.ensureMetricsIsMutable();
                              this.metrics_.add(m);
                           } else {
                              this.metricsBuilder_.addMessage(m);
                           }
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getId() {
            return this.id_;
         }

         public Builder setId(long value) {
            this.id_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearId() {
            this.bitField0_ &= -2;
            this.id_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasName() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.SparkPlanGraphNode.getDefaultInstance().getName();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SparkPlanGraphNode.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean hasDesc() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getDesc() {
            Object ref = this.desc_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.desc_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getDescBytes() {
            Object ref = this.desc_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.desc_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setDesc(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.desc_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearDesc() {
            this.desc_ = StoreTypes.SparkPlanGraphNode.getDefaultInstance().getDesc();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setDescBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SparkPlanGraphNode.checkByteStringIsUtf8(value);
               this.desc_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         private void ensureMetricsIsMutable() {
            if ((this.bitField0_ & 8) == 0) {
               this.metrics_ = new ArrayList(this.metrics_);
               this.bitField0_ |= 8;
            }

         }

         public List getMetricsList() {
            return this.metricsBuilder_ == null ? Collections.unmodifiableList(this.metrics_) : this.metricsBuilder_.getMessageList();
         }

         public int getMetricsCount() {
            return this.metricsBuilder_ == null ? this.metrics_.size() : this.metricsBuilder_.getCount();
         }

         public SQLPlanMetric getMetrics(int index) {
            return this.metricsBuilder_ == null ? (SQLPlanMetric)this.metrics_.get(index) : (SQLPlanMetric)this.metricsBuilder_.getMessage(index);
         }

         public Builder setMetrics(int index, SQLPlanMetric value) {
            if (this.metricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsIsMutable();
               this.metrics_.set(index, value);
               this.onChanged();
            } else {
               this.metricsBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setMetrics(int index, SQLPlanMetric.Builder builderForValue) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.metricsBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addMetrics(SQLPlanMetric value) {
            if (this.metricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsIsMutable();
               this.metrics_.add(value);
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addMetrics(int index, SQLPlanMetric value) {
            if (this.metricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsIsMutable();
               this.metrics_.add(index, value);
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addMetrics(SQLPlanMetric.Builder builderForValue) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addMetrics(int index, SQLPlanMetric.Builder builderForValue) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllMetrics(Iterable values) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.metrics_);
               this.onChanged();
            } else {
               this.metricsBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearMetrics() {
            if (this.metricsBuilder_ == null) {
               this.metrics_ = Collections.emptyList();
               this.bitField0_ &= -9;
               this.onChanged();
            } else {
               this.metricsBuilder_.clear();
            }

            return this;
         }

         public Builder removeMetrics(int index) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.remove(index);
               this.onChanged();
            } else {
               this.metricsBuilder_.remove(index);
            }

            return this;
         }

         public SQLPlanMetric.Builder getMetricsBuilder(int index) {
            return (SQLPlanMetric.Builder)this.getMetricsFieldBuilder().getBuilder(index);
         }

         public SQLPlanMetricOrBuilder getMetricsOrBuilder(int index) {
            return this.metricsBuilder_ == null ? (SQLPlanMetricOrBuilder)this.metrics_.get(index) : (SQLPlanMetricOrBuilder)this.metricsBuilder_.getMessageOrBuilder(index);
         }

         public List getMetricsOrBuilderList() {
            return this.metricsBuilder_ != null ? this.metricsBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.metrics_);
         }

         public SQLPlanMetric.Builder addMetricsBuilder() {
            return (SQLPlanMetric.Builder)this.getMetricsFieldBuilder().addBuilder(StoreTypes.SQLPlanMetric.getDefaultInstance());
         }

         public SQLPlanMetric.Builder addMetricsBuilder(int index) {
            return (SQLPlanMetric.Builder)this.getMetricsFieldBuilder().addBuilder(index, StoreTypes.SQLPlanMetric.getDefaultInstance());
         }

         public List getMetricsBuilderList() {
            return this.getMetricsFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getMetricsFieldBuilder() {
            if (this.metricsBuilder_ == null) {
               this.metricsBuilder_ = new RepeatedFieldBuilder(this.metrics_, (this.bitField0_ & 8) != 0, this.getParentForChildren(), this.isClean());
               this.metrics_ = null;
            }

            return this.metricsBuilder_;
         }
      }
   }

   public static final class SparkPlanGraphClusterWrapper extends GeneratedMessage implements SparkPlanGraphClusterWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private long id_ = 0L;
      public static final int NAME_FIELD_NUMBER = 2;
      private volatile Object name_ = "";
      public static final int DESC_FIELD_NUMBER = 3;
      private volatile Object desc_ = "";
      public static final int NODES_FIELD_NUMBER = 4;
      private List nodes_;
      public static final int METRICS_FIELD_NUMBER = 5;
      private List metrics_;
      private byte memoizedIsInitialized = -1;
      private static final SparkPlanGraphClusterWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private SparkPlanGraphClusterWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private SparkPlanGraphClusterWrapper() {
         this.name_ = "";
         this.desc_ = "";
         this.nodes_ = Collections.emptyList();
         this.metrics_ = Collections.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphClusterWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphClusterWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(SparkPlanGraphClusterWrapper.class, Builder.class);
      }

      public long getId() {
         return this.id_;
      }

      public boolean hasName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasDesc() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getDesc() {
         Object ref = this.desc_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.desc_ = s;
            return s;
         }
      }

      public ByteString getDescBytes() {
         Object ref = this.desc_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.desc_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public List getNodesList() {
         return this.nodes_;
      }

      public List getNodesOrBuilderList() {
         return this.nodes_;
      }

      public int getNodesCount() {
         return this.nodes_.size();
      }

      public SparkPlanGraphNodeWrapper getNodes(int index) {
         return (SparkPlanGraphNodeWrapper)this.nodes_.get(index);
      }

      public SparkPlanGraphNodeWrapperOrBuilder getNodesOrBuilder(int index) {
         return (SparkPlanGraphNodeWrapperOrBuilder)this.nodes_.get(index);
      }

      public List getMetricsList() {
         return this.metrics_;
      }

      public List getMetricsOrBuilderList() {
         return this.metrics_;
      }

      public int getMetricsCount() {
         return this.metrics_.size();
      }

      public SQLPlanMetric getMetrics(int index) {
         return (SQLPlanMetric)this.metrics_.get(index);
      }

      public SQLPlanMetricOrBuilder getMetricsOrBuilder(int index) {
         return (SQLPlanMetricOrBuilder)this.metrics_.get(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.id_ != 0L) {
            output.writeInt64(1, this.id_);
         }

         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 2, this.name_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 3, this.desc_);
         }

         for(int i = 0; i < this.nodes_.size(); ++i) {
            output.writeMessage(4, (MessageLite)this.nodes_.get(i));
         }

         for(int i = 0; i < this.metrics_.size(); ++i) {
            output.writeMessage(5, (MessageLite)this.metrics_.get(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.id_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.id_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.name_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.desc_);
            }

            for(int i = 0; i < this.nodes_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(4, (MessageLite)this.nodes_.get(i));
            }

            for(int i = 0; i < this.metrics_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(5, (MessageLite)this.metrics_.get(i));
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof SparkPlanGraphClusterWrapper)) {
            return super.equals(obj);
         } else {
            SparkPlanGraphClusterWrapper other = (SparkPlanGraphClusterWrapper)obj;
            if (this.getId() != other.getId()) {
               return false;
            } else if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.hasDesc() != other.hasDesc()) {
               return false;
            } else if (this.hasDesc() && !this.getDesc().equals(other.getDesc())) {
               return false;
            } else if (!this.getNodesList().equals(other.getNodesList())) {
               return false;
            } else if (!this.getMetricsList().equals(other.getMetricsList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getId());
            if (this.hasName()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.hasDesc()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getDesc().hashCode();
            }

            if (this.getNodesCount() > 0) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getNodesList().hashCode();
            }

            if (this.getMetricsCount() > 0) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getMetricsList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static SparkPlanGraphClusterWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphClusterWrapper)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphClusterWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphClusterWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphClusterWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphClusterWrapper)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphClusterWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphClusterWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphClusterWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphClusterWrapper)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphClusterWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphClusterWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphClusterWrapper parseFrom(InputStream input) throws IOException {
         return (SparkPlanGraphClusterWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SparkPlanGraphClusterWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphClusterWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static SparkPlanGraphClusterWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (SparkPlanGraphClusterWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static SparkPlanGraphClusterWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphClusterWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static SparkPlanGraphClusterWrapper parseFrom(CodedInputStream input) throws IOException {
         return (SparkPlanGraphClusterWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SparkPlanGraphClusterWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphClusterWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(SparkPlanGraphClusterWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static SparkPlanGraphClusterWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public SparkPlanGraphClusterWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", SparkPlanGraphClusterWrapper.class.getName());
         DEFAULT_INSTANCE = new SparkPlanGraphClusterWrapper();
         PARSER = new AbstractParser() {
            public SparkPlanGraphClusterWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.SparkPlanGraphClusterWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements SparkPlanGraphClusterWrapperOrBuilder {
         private int bitField0_;
         private long id_;
         private Object name_ = "";
         private Object desc_ = "";
         private List nodes_ = Collections.emptyList();
         private RepeatedFieldBuilder nodesBuilder_;
         private List metrics_ = Collections.emptyList();
         private RepeatedFieldBuilder metricsBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphClusterWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphClusterWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(SparkPlanGraphClusterWrapper.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.id_ = 0L;
            this.name_ = "";
            this.desc_ = "";
            if (this.nodesBuilder_ == null) {
               this.nodes_ = Collections.emptyList();
            } else {
               this.nodes_ = null;
               this.nodesBuilder_.clear();
            }

            this.bitField0_ &= -9;
            if (this.metricsBuilder_ == null) {
               this.metrics_ = Collections.emptyList();
            } else {
               this.metrics_ = null;
               this.metricsBuilder_.clear();
            }

            this.bitField0_ &= -17;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphClusterWrapper_descriptor;
         }

         public SparkPlanGraphClusterWrapper getDefaultInstanceForType() {
            return StoreTypes.SparkPlanGraphClusterWrapper.getDefaultInstance();
         }

         public SparkPlanGraphClusterWrapper build() {
            SparkPlanGraphClusterWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public SparkPlanGraphClusterWrapper buildPartial() {
            SparkPlanGraphClusterWrapper result = new SparkPlanGraphClusterWrapper(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(SparkPlanGraphClusterWrapper result) {
            if (this.nodesBuilder_ == null) {
               if ((this.bitField0_ & 8) != 0) {
                  this.nodes_ = Collections.unmodifiableList(this.nodes_);
                  this.bitField0_ &= -9;
               }

               result.nodes_ = this.nodes_;
            } else {
               result.nodes_ = this.nodesBuilder_.build();
            }

            if (this.metricsBuilder_ == null) {
               if ((this.bitField0_ & 16) != 0) {
                  this.metrics_ = Collections.unmodifiableList(this.metrics_);
                  this.bitField0_ &= -17;
               }

               result.metrics_ = this.metrics_;
            } else {
               result.metrics_ = this.metricsBuilder_.build();
            }

         }

         private void buildPartial0(SparkPlanGraphClusterWrapper result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.id_ = this.id_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 2) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.desc_ = this.desc_;
               to_bitField0_ |= 2;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof SparkPlanGraphClusterWrapper) {
               return this.mergeFrom((SparkPlanGraphClusterWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(SparkPlanGraphClusterWrapper other) {
            if (other == StoreTypes.SparkPlanGraphClusterWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.getId() != 0L) {
                  this.setId(other.getId());
               }

               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.hasDesc()) {
                  this.desc_ = other.desc_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (this.nodesBuilder_ == null) {
                  if (!other.nodes_.isEmpty()) {
                     if (this.nodes_.isEmpty()) {
                        this.nodes_ = other.nodes_;
                        this.bitField0_ &= -9;
                     } else {
                        this.ensureNodesIsMutable();
                        this.nodes_.addAll(other.nodes_);
                     }

                     this.onChanged();
                  }
               } else if (!other.nodes_.isEmpty()) {
                  if (this.nodesBuilder_.isEmpty()) {
                     this.nodesBuilder_.dispose();
                     this.nodesBuilder_ = null;
                     this.nodes_ = other.nodes_;
                     this.bitField0_ &= -9;
                     this.nodesBuilder_ = StoreTypes.SparkPlanGraphClusterWrapper.alwaysUseFieldBuilders ? this.getNodesFieldBuilder() : null;
                  } else {
                     this.nodesBuilder_.addAllMessages(other.nodes_);
                  }
               }

               if (this.metricsBuilder_ == null) {
                  if (!other.metrics_.isEmpty()) {
                     if (this.metrics_.isEmpty()) {
                        this.metrics_ = other.metrics_;
                        this.bitField0_ &= -17;
                     } else {
                        this.ensureMetricsIsMutable();
                        this.metrics_.addAll(other.metrics_);
                     }

                     this.onChanged();
                  }
               } else if (!other.metrics_.isEmpty()) {
                  if (this.metricsBuilder_.isEmpty()) {
                     this.metricsBuilder_.dispose();
                     this.metricsBuilder_ = null;
                     this.metrics_ = other.metrics_;
                     this.bitField0_ &= -17;
                     this.metricsBuilder_ = StoreTypes.SparkPlanGraphClusterWrapper.alwaysUseFieldBuilders ? this.getMetricsFieldBuilder() : null;
                  } else {
                     this.metricsBuilder_.addAllMessages(other.metrics_);
                  }
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.id_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.desc_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 34:
                           SparkPlanGraphNodeWrapper m = (SparkPlanGraphNodeWrapper)input.readMessage(StoreTypes.SparkPlanGraphNodeWrapper.parser(), extensionRegistry);
                           if (this.nodesBuilder_ == null) {
                              this.ensureNodesIsMutable();
                              this.nodes_.add(m);
                           } else {
                              this.nodesBuilder_.addMessage(m);
                           }
                           break;
                        case 42:
                           SQLPlanMetric m = (SQLPlanMetric)input.readMessage(StoreTypes.SQLPlanMetric.parser(), extensionRegistry);
                           if (this.metricsBuilder_ == null) {
                              this.ensureMetricsIsMutable();
                              this.metrics_.add(m);
                           } else {
                              this.metricsBuilder_.addMessage(m);
                           }
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getId() {
            return this.id_;
         }

         public Builder setId(long value) {
            this.id_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearId() {
            this.bitField0_ &= -2;
            this.id_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasName() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.SparkPlanGraphClusterWrapper.getDefaultInstance().getName();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SparkPlanGraphClusterWrapper.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean hasDesc() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getDesc() {
            Object ref = this.desc_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.desc_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getDescBytes() {
            Object ref = this.desc_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.desc_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setDesc(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.desc_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearDesc() {
            this.desc_ = StoreTypes.SparkPlanGraphClusterWrapper.getDefaultInstance().getDesc();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setDescBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SparkPlanGraphClusterWrapper.checkByteStringIsUtf8(value);
               this.desc_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         private void ensureNodesIsMutable() {
            if ((this.bitField0_ & 8) == 0) {
               this.nodes_ = new ArrayList(this.nodes_);
               this.bitField0_ |= 8;
            }

         }

         public List getNodesList() {
            return this.nodesBuilder_ == null ? Collections.unmodifiableList(this.nodes_) : this.nodesBuilder_.getMessageList();
         }

         public int getNodesCount() {
            return this.nodesBuilder_ == null ? this.nodes_.size() : this.nodesBuilder_.getCount();
         }

         public SparkPlanGraphNodeWrapper getNodes(int index) {
            return this.nodesBuilder_ == null ? (SparkPlanGraphNodeWrapper)this.nodes_.get(index) : (SparkPlanGraphNodeWrapper)this.nodesBuilder_.getMessage(index);
         }

         public Builder setNodes(int index, SparkPlanGraphNodeWrapper value) {
            if (this.nodesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureNodesIsMutable();
               this.nodes_.set(index, value);
               this.onChanged();
            } else {
               this.nodesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setNodes(int index, SparkPlanGraphNodeWrapper.Builder builderForValue) {
            if (this.nodesBuilder_ == null) {
               this.ensureNodesIsMutable();
               this.nodes_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.nodesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addNodes(SparkPlanGraphNodeWrapper value) {
            if (this.nodesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureNodesIsMutable();
               this.nodes_.add(value);
               this.onChanged();
            } else {
               this.nodesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addNodes(int index, SparkPlanGraphNodeWrapper value) {
            if (this.nodesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureNodesIsMutable();
               this.nodes_.add(index, value);
               this.onChanged();
            } else {
               this.nodesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addNodes(SparkPlanGraphNodeWrapper.Builder builderForValue) {
            if (this.nodesBuilder_ == null) {
               this.ensureNodesIsMutable();
               this.nodes_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.nodesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addNodes(int index, SparkPlanGraphNodeWrapper.Builder builderForValue) {
            if (this.nodesBuilder_ == null) {
               this.ensureNodesIsMutable();
               this.nodes_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.nodesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllNodes(Iterable values) {
            if (this.nodesBuilder_ == null) {
               this.ensureNodesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.nodes_);
               this.onChanged();
            } else {
               this.nodesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearNodes() {
            if (this.nodesBuilder_ == null) {
               this.nodes_ = Collections.emptyList();
               this.bitField0_ &= -9;
               this.onChanged();
            } else {
               this.nodesBuilder_.clear();
            }

            return this;
         }

         public Builder removeNodes(int index) {
            if (this.nodesBuilder_ == null) {
               this.ensureNodesIsMutable();
               this.nodes_.remove(index);
               this.onChanged();
            } else {
               this.nodesBuilder_.remove(index);
            }

            return this;
         }

         public SparkPlanGraphNodeWrapper.Builder getNodesBuilder(int index) {
            return (SparkPlanGraphNodeWrapper.Builder)this.getNodesFieldBuilder().getBuilder(index);
         }

         public SparkPlanGraphNodeWrapperOrBuilder getNodesOrBuilder(int index) {
            return this.nodesBuilder_ == null ? (SparkPlanGraphNodeWrapperOrBuilder)this.nodes_.get(index) : (SparkPlanGraphNodeWrapperOrBuilder)this.nodesBuilder_.getMessageOrBuilder(index);
         }

         public List getNodesOrBuilderList() {
            return this.nodesBuilder_ != null ? this.nodesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.nodes_);
         }

         public SparkPlanGraphNodeWrapper.Builder addNodesBuilder() {
            return (SparkPlanGraphNodeWrapper.Builder)this.getNodesFieldBuilder().addBuilder(StoreTypes.SparkPlanGraphNodeWrapper.getDefaultInstance());
         }

         public SparkPlanGraphNodeWrapper.Builder addNodesBuilder(int index) {
            return (SparkPlanGraphNodeWrapper.Builder)this.getNodesFieldBuilder().addBuilder(index, StoreTypes.SparkPlanGraphNodeWrapper.getDefaultInstance());
         }

         public List getNodesBuilderList() {
            return this.getNodesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getNodesFieldBuilder() {
            if (this.nodesBuilder_ == null) {
               this.nodesBuilder_ = new RepeatedFieldBuilder(this.nodes_, (this.bitField0_ & 8) != 0, this.getParentForChildren(), this.isClean());
               this.nodes_ = null;
            }

            return this.nodesBuilder_;
         }

         private void ensureMetricsIsMutable() {
            if ((this.bitField0_ & 16) == 0) {
               this.metrics_ = new ArrayList(this.metrics_);
               this.bitField0_ |= 16;
            }

         }

         public List getMetricsList() {
            return this.metricsBuilder_ == null ? Collections.unmodifiableList(this.metrics_) : this.metricsBuilder_.getMessageList();
         }

         public int getMetricsCount() {
            return this.metricsBuilder_ == null ? this.metrics_.size() : this.metricsBuilder_.getCount();
         }

         public SQLPlanMetric getMetrics(int index) {
            return this.metricsBuilder_ == null ? (SQLPlanMetric)this.metrics_.get(index) : (SQLPlanMetric)this.metricsBuilder_.getMessage(index);
         }

         public Builder setMetrics(int index, SQLPlanMetric value) {
            if (this.metricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsIsMutable();
               this.metrics_.set(index, value);
               this.onChanged();
            } else {
               this.metricsBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setMetrics(int index, SQLPlanMetric.Builder builderForValue) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.metricsBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addMetrics(SQLPlanMetric value) {
            if (this.metricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsIsMutable();
               this.metrics_.add(value);
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addMetrics(int index, SQLPlanMetric value) {
            if (this.metricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureMetricsIsMutable();
               this.metrics_.add(index, value);
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addMetrics(SQLPlanMetric.Builder builderForValue) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addMetrics(int index, SQLPlanMetric.Builder builderForValue) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.metricsBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllMetrics(Iterable values) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.metrics_);
               this.onChanged();
            } else {
               this.metricsBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearMetrics() {
            if (this.metricsBuilder_ == null) {
               this.metrics_ = Collections.emptyList();
               this.bitField0_ &= -17;
               this.onChanged();
            } else {
               this.metricsBuilder_.clear();
            }

            return this;
         }

         public Builder removeMetrics(int index) {
            if (this.metricsBuilder_ == null) {
               this.ensureMetricsIsMutable();
               this.metrics_.remove(index);
               this.onChanged();
            } else {
               this.metricsBuilder_.remove(index);
            }

            return this;
         }

         public SQLPlanMetric.Builder getMetricsBuilder(int index) {
            return (SQLPlanMetric.Builder)this.getMetricsFieldBuilder().getBuilder(index);
         }

         public SQLPlanMetricOrBuilder getMetricsOrBuilder(int index) {
            return this.metricsBuilder_ == null ? (SQLPlanMetricOrBuilder)this.metrics_.get(index) : (SQLPlanMetricOrBuilder)this.metricsBuilder_.getMessageOrBuilder(index);
         }

         public List getMetricsOrBuilderList() {
            return this.metricsBuilder_ != null ? this.metricsBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.metrics_);
         }

         public SQLPlanMetric.Builder addMetricsBuilder() {
            return (SQLPlanMetric.Builder)this.getMetricsFieldBuilder().addBuilder(StoreTypes.SQLPlanMetric.getDefaultInstance());
         }

         public SQLPlanMetric.Builder addMetricsBuilder(int index) {
            return (SQLPlanMetric.Builder)this.getMetricsFieldBuilder().addBuilder(index, StoreTypes.SQLPlanMetric.getDefaultInstance());
         }

         public List getMetricsBuilderList() {
            return this.getMetricsFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getMetricsFieldBuilder() {
            if (this.metricsBuilder_ == null) {
               this.metricsBuilder_ = new RepeatedFieldBuilder(this.metrics_, (this.bitField0_ & 16) != 0, this.getParentForChildren(), this.isClean());
               this.metrics_ = null;
            }

            return this.metricsBuilder_;
         }
      }
   }

   public static final class SparkPlanGraphNodeWrapper extends GeneratedMessage implements SparkPlanGraphNodeWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int wrapperCase_ = 0;
      private Object wrapper_;
      public static final int NODE_FIELD_NUMBER = 1;
      public static final int CLUSTER_FIELD_NUMBER = 2;
      private byte memoizedIsInitialized = -1;
      private static final SparkPlanGraphNodeWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private SparkPlanGraphNodeWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private SparkPlanGraphNodeWrapper() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNodeWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNodeWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(SparkPlanGraphNodeWrapper.class, Builder.class);
      }

      public WrapperCase getWrapperCase() {
         return StoreTypes.SparkPlanGraphNodeWrapper.WrapperCase.forNumber(this.wrapperCase_);
      }

      public boolean hasNode() {
         return this.wrapperCase_ == 1;
      }

      public SparkPlanGraphNode getNode() {
         return this.wrapperCase_ == 1 ? (SparkPlanGraphNode)this.wrapper_ : StoreTypes.SparkPlanGraphNode.getDefaultInstance();
      }

      public SparkPlanGraphNodeOrBuilder getNodeOrBuilder() {
         return this.wrapperCase_ == 1 ? (SparkPlanGraphNode)this.wrapper_ : StoreTypes.SparkPlanGraphNode.getDefaultInstance();
      }

      public boolean hasCluster() {
         return this.wrapperCase_ == 2;
      }

      public SparkPlanGraphClusterWrapper getCluster() {
         return this.wrapperCase_ == 2 ? (SparkPlanGraphClusterWrapper)this.wrapper_ : StoreTypes.SparkPlanGraphClusterWrapper.getDefaultInstance();
      }

      public SparkPlanGraphClusterWrapperOrBuilder getClusterOrBuilder() {
         return this.wrapperCase_ == 2 ? (SparkPlanGraphClusterWrapper)this.wrapper_ : StoreTypes.SparkPlanGraphClusterWrapper.getDefaultInstance();
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.wrapperCase_ == 1) {
            output.writeMessage(1, (SparkPlanGraphNode)this.wrapper_);
         }

         if (this.wrapperCase_ == 2) {
            output.writeMessage(2, (SparkPlanGraphClusterWrapper)this.wrapper_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.wrapperCase_ == 1) {
               size += CodedOutputStream.computeMessageSize(1, (SparkPlanGraphNode)this.wrapper_);
            }

            if (this.wrapperCase_ == 2) {
               size += CodedOutputStream.computeMessageSize(2, (SparkPlanGraphClusterWrapper)this.wrapper_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof SparkPlanGraphNodeWrapper)) {
            return super.equals(obj);
         } else {
            SparkPlanGraphNodeWrapper other = (SparkPlanGraphNodeWrapper)obj;
            if (!this.getWrapperCase().equals(other.getWrapperCase())) {
               return false;
            } else {
               switch (this.wrapperCase_) {
                  case 0:
                  default:
                     break;
                  case 1:
                     if (!this.getNode().equals(other.getNode())) {
                        return false;
                     }
                     break;
                  case 2:
                     if (!this.getCluster().equals(other.getCluster())) {
                        return false;
                     }
               }

               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            switch (this.wrapperCase_) {
               case 0:
               default:
                  break;
               case 1:
                  hash = 37 * hash + 1;
                  hash = 53 * hash + this.getNode().hashCode();
                  break;
               case 2:
                  hash = 37 * hash + 2;
                  hash = 53 * hash + this.getCluster().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static SparkPlanGraphNodeWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNodeWrapper)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphNodeWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNodeWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphNodeWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNodeWrapper)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphNodeWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNodeWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphNodeWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNodeWrapper)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphNodeWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphNodeWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphNodeWrapper parseFrom(InputStream input) throws IOException {
         return (SparkPlanGraphNodeWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SparkPlanGraphNodeWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphNodeWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static SparkPlanGraphNodeWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (SparkPlanGraphNodeWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static SparkPlanGraphNodeWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphNodeWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static SparkPlanGraphNodeWrapper parseFrom(CodedInputStream input) throws IOException {
         return (SparkPlanGraphNodeWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SparkPlanGraphNodeWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphNodeWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(SparkPlanGraphNodeWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static SparkPlanGraphNodeWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public SparkPlanGraphNodeWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", SparkPlanGraphNodeWrapper.class.getName());
         DEFAULT_INSTANCE = new SparkPlanGraphNodeWrapper();
         PARSER = new AbstractParser() {
            public SparkPlanGraphNodeWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.SparkPlanGraphNodeWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static enum WrapperCase implements Internal.EnumLite, AbstractMessageLite.InternalOneOfEnum {
         NODE(1),
         CLUSTER(2),
         WRAPPER_NOT_SET(0);

         private final int value;

         private WrapperCase(int value) {
            this.value = value;
         }

         /** @deprecated */
         @Deprecated
         public static WrapperCase valueOf(int value) {
            return forNumber(value);
         }

         public static WrapperCase forNumber(int value) {
            switch (value) {
               case 0 -> {
                  return WRAPPER_NOT_SET;
               }
               case 1 -> {
                  return NODE;
               }
               case 2 -> {
                  return CLUSTER;
               }
               default -> {
                  return null;
               }
            }
         }

         public int getNumber() {
            return this.value;
         }

         // $FF: synthetic method
         private static WrapperCase[] $values() {
            return new WrapperCase[]{NODE, CLUSTER, WRAPPER_NOT_SET};
         }
      }

      public static final class Builder extends GeneratedMessage.Builder implements SparkPlanGraphNodeWrapperOrBuilder {
         private int wrapperCase_ = 0;
         private Object wrapper_;
         private int bitField0_;
         private SingleFieldBuilder nodeBuilder_;
         private SingleFieldBuilder clusterBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNodeWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNodeWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(SparkPlanGraphNodeWrapper.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            if (this.nodeBuilder_ != null) {
               this.nodeBuilder_.clear();
            }

            if (this.clusterBuilder_ != null) {
               this.clusterBuilder_.clear();
            }

            this.wrapperCase_ = 0;
            this.wrapper_ = null;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphNodeWrapper_descriptor;
         }

         public SparkPlanGraphNodeWrapper getDefaultInstanceForType() {
            return StoreTypes.SparkPlanGraphNodeWrapper.getDefaultInstance();
         }

         public SparkPlanGraphNodeWrapper build() {
            SparkPlanGraphNodeWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public SparkPlanGraphNodeWrapper buildPartial() {
            SparkPlanGraphNodeWrapper result = new SparkPlanGraphNodeWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.buildPartialOneofs(result);
            this.onBuilt();
            return result;
         }

         private void buildPartial0(SparkPlanGraphNodeWrapper result) {
            int from_bitField0_ = this.bitField0_;
         }

         private void buildPartialOneofs(SparkPlanGraphNodeWrapper result) {
            result.wrapperCase_ = this.wrapperCase_;
            result.wrapper_ = this.wrapper_;
            if (this.wrapperCase_ == 1 && this.nodeBuilder_ != null) {
               result.wrapper_ = this.nodeBuilder_.build();
            }

            if (this.wrapperCase_ == 2 && this.clusterBuilder_ != null) {
               result.wrapper_ = this.clusterBuilder_.build();
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof SparkPlanGraphNodeWrapper) {
               return this.mergeFrom((SparkPlanGraphNodeWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(SparkPlanGraphNodeWrapper other) {
            if (other == StoreTypes.SparkPlanGraphNodeWrapper.getDefaultInstance()) {
               return this;
            } else {
               switch (other.getWrapperCase()) {
                  case NODE:
                     this.mergeNode(other.getNode());
                     break;
                  case CLUSTER:
                     this.mergeCluster(other.getCluster());
                  case WRAPPER_NOT_SET:
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           input.readMessage((MessageLite.Builder)this.getNodeFieldBuilder().getBuilder(), extensionRegistry);
                           this.wrapperCase_ = 1;
                           break;
                        case 18:
                           input.readMessage((MessageLite.Builder)this.getClusterFieldBuilder().getBuilder(), extensionRegistry);
                           this.wrapperCase_ = 2;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public WrapperCase getWrapperCase() {
            return StoreTypes.SparkPlanGraphNodeWrapper.WrapperCase.forNumber(this.wrapperCase_);
         }

         public Builder clearWrapper() {
            this.wrapperCase_ = 0;
            this.wrapper_ = null;
            this.onChanged();
            return this;
         }

         public boolean hasNode() {
            return this.wrapperCase_ == 1;
         }

         public SparkPlanGraphNode getNode() {
            if (this.nodeBuilder_ == null) {
               return this.wrapperCase_ == 1 ? (SparkPlanGraphNode)this.wrapper_ : StoreTypes.SparkPlanGraphNode.getDefaultInstance();
            } else {
               return this.wrapperCase_ == 1 ? (SparkPlanGraphNode)this.nodeBuilder_.getMessage() : StoreTypes.SparkPlanGraphNode.getDefaultInstance();
            }
         }

         public Builder setNode(SparkPlanGraphNode value) {
            if (this.nodeBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.wrapper_ = value;
               this.onChanged();
            } else {
               this.nodeBuilder_.setMessage(value);
            }

            this.wrapperCase_ = 1;
            return this;
         }

         public Builder setNode(SparkPlanGraphNode.Builder builderForValue) {
            if (this.nodeBuilder_ == null) {
               this.wrapper_ = builderForValue.build();
               this.onChanged();
            } else {
               this.nodeBuilder_.setMessage(builderForValue.build());
            }

            this.wrapperCase_ = 1;
            return this;
         }

         public Builder mergeNode(SparkPlanGraphNode value) {
            if (this.nodeBuilder_ == null) {
               if (this.wrapperCase_ == 1 && this.wrapper_ != StoreTypes.SparkPlanGraphNode.getDefaultInstance()) {
                  this.wrapper_ = StoreTypes.SparkPlanGraphNode.newBuilder((SparkPlanGraphNode)this.wrapper_).mergeFrom(value).buildPartial();
               } else {
                  this.wrapper_ = value;
               }

               this.onChanged();
            } else if (this.wrapperCase_ == 1) {
               this.nodeBuilder_.mergeFrom(value);
            } else {
               this.nodeBuilder_.setMessage(value);
            }

            this.wrapperCase_ = 1;
            return this;
         }

         public Builder clearNode() {
            if (this.nodeBuilder_ == null) {
               if (this.wrapperCase_ == 1) {
                  this.wrapperCase_ = 0;
                  this.wrapper_ = null;
                  this.onChanged();
               }
            } else {
               if (this.wrapperCase_ == 1) {
                  this.wrapperCase_ = 0;
                  this.wrapper_ = null;
               }

               this.nodeBuilder_.clear();
            }

            return this;
         }

         public SparkPlanGraphNode.Builder getNodeBuilder() {
            return (SparkPlanGraphNode.Builder)this.getNodeFieldBuilder().getBuilder();
         }

         public SparkPlanGraphNodeOrBuilder getNodeOrBuilder() {
            if (this.wrapperCase_ == 1 && this.nodeBuilder_ != null) {
               return (SparkPlanGraphNodeOrBuilder)this.nodeBuilder_.getMessageOrBuilder();
            } else {
               return this.wrapperCase_ == 1 ? (SparkPlanGraphNode)this.wrapper_ : StoreTypes.SparkPlanGraphNode.getDefaultInstance();
            }
         }

         private SingleFieldBuilder getNodeFieldBuilder() {
            if (this.nodeBuilder_ == null) {
               if (this.wrapperCase_ != 1) {
                  this.wrapper_ = StoreTypes.SparkPlanGraphNode.getDefaultInstance();
               }

               this.nodeBuilder_ = new SingleFieldBuilder((SparkPlanGraphNode)this.wrapper_, this.getParentForChildren(), this.isClean());
               this.wrapper_ = null;
            }

            this.wrapperCase_ = 1;
            this.onChanged();
            return this.nodeBuilder_;
         }

         public boolean hasCluster() {
            return this.wrapperCase_ == 2;
         }

         public SparkPlanGraphClusterWrapper getCluster() {
            if (this.clusterBuilder_ == null) {
               return this.wrapperCase_ == 2 ? (SparkPlanGraphClusterWrapper)this.wrapper_ : StoreTypes.SparkPlanGraphClusterWrapper.getDefaultInstance();
            } else {
               return this.wrapperCase_ == 2 ? (SparkPlanGraphClusterWrapper)this.clusterBuilder_.getMessage() : StoreTypes.SparkPlanGraphClusterWrapper.getDefaultInstance();
            }
         }

         public Builder setCluster(SparkPlanGraphClusterWrapper value) {
            if (this.clusterBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.wrapper_ = value;
               this.onChanged();
            } else {
               this.clusterBuilder_.setMessage(value);
            }

            this.wrapperCase_ = 2;
            return this;
         }

         public Builder setCluster(SparkPlanGraphClusterWrapper.Builder builderForValue) {
            if (this.clusterBuilder_ == null) {
               this.wrapper_ = builderForValue.build();
               this.onChanged();
            } else {
               this.clusterBuilder_.setMessage(builderForValue.build());
            }

            this.wrapperCase_ = 2;
            return this;
         }

         public Builder mergeCluster(SparkPlanGraphClusterWrapper value) {
            if (this.clusterBuilder_ == null) {
               if (this.wrapperCase_ == 2 && this.wrapper_ != StoreTypes.SparkPlanGraphClusterWrapper.getDefaultInstance()) {
                  this.wrapper_ = StoreTypes.SparkPlanGraphClusterWrapper.newBuilder((SparkPlanGraphClusterWrapper)this.wrapper_).mergeFrom(value).buildPartial();
               } else {
                  this.wrapper_ = value;
               }

               this.onChanged();
            } else if (this.wrapperCase_ == 2) {
               this.clusterBuilder_.mergeFrom(value);
            } else {
               this.clusterBuilder_.setMessage(value);
            }

            this.wrapperCase_ = 2;
            return this;
         }

         public Builder clearCluster() {
            if (this.clusterBuilder_ == null) {
               if (this.wrapperCase_ == 2) {
                  this.wrapperCase_ = 0;
                  this.wrapper_ = null;
                  this.onChanged();
               }
            } else {
               if (this.wrapperCase_ == 2) {
                  this.wrapperCase_ = 0;
                  this.wrapper_ = null;
               }

               this.clusterBuilder_.clear();
            }

            return this;
         }

         public SparkPlanGraphClusterWrapper.Builder getClusterBuilder() {
            return (SparkPlanGraphClusterWrapper.Builder)this.getClusterFieldBuilder().getBuilder();
         }

         public SparkPlanGraphClusterWrapperOrBuilder getClusterOrBuilder() {
            if (this.wrapperCase_ == 2 && this.clusterBuilder_ != null) {
               return (SparkPlanGraphClusterWrapperOrBuilder)this.clusterBuilder_.getMessageOrBuilder();
            } else {
               return this.wrapperCase_ == 2 ? (SparkPlanGraphClusterWrapper)this.wrapper_ : StoreTypes.SparkPlanGraphClusterWrapper.getDefaultInstance();
            }
         }

         private SingleFieldBuilder getClusterFieldBuilder() {
            if (this.clusterBuilder_ == null) {
               if (this.wrapperCase_ != 2) {
                  this.wrapper_ = StoreTypes.SparkPlanGraphClusterWrapper.getDefaultInstance();
               }

               this.clusterBuilder_ = new SingleFieldBuilder((SparkPlanGraphClusterWrapper)this.wrapper_, this.getParentForChildren(), this.isClean());
               this.wrapper_ = null;
            }

            this.wrapperCase_ = 2;
            this.onChanged();
            return this.clusterBuilder_;
         }
      }
   }

   public static final class SparkPlanGraphEdge extends GeneratedMessage implements SparkPlanGraphEdgeOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int FROM_ID_FIELD_NUMBER = 1;
      private long fromId_ = 0L;
      public static final int TO_ID_FIELD_NUMBER = 2;
      private long toId_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final SparkPlanGraphEdge DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private SparkPlanGraphEdge(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private SparkPlanGraphEdge() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphEdge_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphEdge_fieldAccessorTable.ensureFieldAccessorsInitialized(SparkPlanGraphEdge.class, Builder.class);
      }

      public long getFromId() {
         return this.fromId_;
      }

      public long getToId() {
         return this.toId_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.fromId_ != 0L) {
            output.writeInt64(1, this.fromId_);
         }

         if (this.toId_ != 0L) {
            output.writeInt64(2, this.toId_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.fromId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.fromId_);
            }

            if (this.toId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.toId_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof SparkPlanGraphEdge)) {
            return super.equals(obj);
         } else {
            SparkPlanGraphEdge other = (SparkPlanGraphEdge)obj;
            if (this.getFromId() != other.getFromId()) {
               return false;
            } else if (this.getToId() != other.getToId()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getFromId());
            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getToId());
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static SparkPlanGraphEdge parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphEdge)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphEdge parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphEdge)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphEdge parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphEdge)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphEdge parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphEdge)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphEdge parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphEdge)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphEdge parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphEdge)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphEdge parseFrom(InputStream input) throws IOException {
         return (SparkPlanGraphEdge)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SparkPlanGraphEdge parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphEdge)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static SparkPlanGraphEdge parseDelimitedFrom(InputStream input) throws IOException {
         return (SparkPlanGraphEdge)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static SparkPlanGraphEdge parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphEdge)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static SparkPlanGraphEdge parseFrom(CodedInputStream input) throws IOException {
         return (SparkPlanGraphEdge)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SparkPlanGraphEdge parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphEdge)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(SparkPlanGraphEdge prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static SparkPlanGraphEdge getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public SparkPlanGraphEdge getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", SparkPlanGraphEdge.class.getName());
         DEFAULT_INSTANCE = new SparkPlanGraphEdge();
         PARSER = new AbstractParser() {
            public SparkPlanGraphEdge parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.SparkPlanGraphEdge.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements SparkPlanGraphEdgeOrBuilder {
         private int bitField0_;
         private long fromId_;
         private long toId_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphEdge_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphEdge_fieldAccessorTable.ensureFieldAccessorsInitialized(SparkPlanGraphEdge.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.fromId_ = 0L;
            this.toId_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphEdge_descriptor;
         }

         public SparkPlanGraphEdge getDefaultInstanceForType() {
            return StoreTypes.SparkPlanGraphEdge.getDefaultInstance();
         }

         public SparkPlanGraphEdge build() {
            SparkPlanGraphEdge result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public SparkPlanGraphEdge buildPartial() {
            SparkPlanGraphEdge result = new SparkPlanGraphEdge(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(SparkPlanGraphEdge result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.fromId_ = this.fromId_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.toId_ = this.toId_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof SparkPlanGraphEdge) {
               return this.mergeFrom((SparkPlanGraphEdge)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(SparkPlanGraphEdge other) {
            if (other == StoreTypes.SparkPlanGraphEdge.getDefaultInstance()) {
               return this;
            } else {
               if (other.getFromId() != 0L) {
                  this.setFromId(other.getFromId());
               }

               if (other.getToId() != 0L) {
                  this.setToId(other.getToId());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.fromId_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.toId_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getFromId() {
            return this.fromId_;
         }

         public Builder setFromId(long value) {
            this.fromId_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearFromId() {
            this.bitField0_ &= -2;
            this.fromId_ = 0L;
            this.onChanged();
            return this;
         }

         public long getToId() {
            return this.toId_;
         }

         public Builder setToId(long value) {
            this.toId_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearToId() {
            this.bitField0_ &= -3;
            this.toId_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class SparkPlanGraphWrapper extends GeneratedMessage implements SparkPlanGraphWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int EXECUTION_ID_FIELD_NUMBER = 1;
      private long executionId_ = 0L;
      public static final int NODES_FIELD_NUMBER = 2;
      private List nodes_;
      public static final int EDGES_FIELD_NUMBER = 3;
      private List edges_;
      private byte memoizedIsInitialized = -1;
      private static final SparkPlanGraphWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private SparkPlanGraphWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private SparkPlanGraphWrapper() {
         this.nodes_ = Collections.emptyList();
         this.edges_ = Collections.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(SparkPlanGraphWrapper.class, Builder.class);
      }

      public long getExecutionId() {
         return this.executionId_;
      }

      public List getNodesList() {
         return this.nodes_;
      }

      public List getNodesOrBuilderList() {
         return this.nodes_;
      }

      public int getNodesCount() {
         return this.nodes_.size();
      }

      public SparkPlanGraphNodeWrapper getNodes(int index) {
         return (SparkPlanGraphNodeWrapper)this.nodes_.get(index);
      }

      public SparkPlanGraphNodeWrapperOrBuilder getNodesOrBuilder(int index) {
         return (SparkPlanGraphNodeWrapperOrBuilder)this.nodes_.get(index);
      }

      public List getEdgesList() {
         return this.edges_;
      }

      public List getEdgesOrBuilderList() {
         return this.edges_;
      }

      public int getEdgesCount() {
         return this.edges_.size();
      }

      public SparkPlanGraphEdge getEdges(int index) {
         return (SparkPlanGraphEdge)this.edges_.get(index);
      }

      public SparkPlanGraphEdgeOrBuilder getEdgesOrBuilder(int index) {
         return (SparkPlanGraphEdgeOrBuilder)this.edges_.get(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.executionId_ != 0L) {
            output.writeInt64(1, this.executionId_);
         }

         for(int i = 0; i < this.nodes_.size(); ++i) {
            output.writeMessage(2, (MessageLite)this.nodes_.get(i));
         }

         for(int i = 0; i < this.edges_.size(); ++i) {
            output.writeMessage(3, (MessageLite)this.edges_.get(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.executionId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.executionId_);
            }

            for(int i = 0; i < this.nodes_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.nodes_.get(i));
            }

            for(int i = 0; i < this.edges_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.edges_.get(i));
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof SparkPlanGraphWrapper)) {
            return super.equals(obj);
         } else {
            SparkPlanGraphWrapper other = (SparkPlanGraphWrapper)obj;
            if (this.getExecutionId() != other.getExecutionId()) {
               return false;
            } else if (!this.getNodesList().equals(other.getNodesList())) {
               return false;
            } else if (!this.getEdgesList().equals(other.getEdgesList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getExecutionId());
            if (this.getNodesCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getNodesList().hashCode();
            }

            if (this.getEdgesCount() > 0) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getEdgesList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static SparkPlanGraphWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphWrapper)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphWrapper)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (SparkPlanGraphWrapper)PARSER.parseFrom(data);
      }

      public static SparkPlanGraphWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SparkPlanGraphWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SparkPlanGraphWrapper parseFrom(InputStream input) throws IOException {
         return (SparkPlanGraphWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SparkPlanGraphWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static SparkPlanGraphWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (SparkPlanGraphWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static SparkPlanGraphWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static SparkPlanGraphWrapper parseFrom(CodedInputStream input) throws IOException {
         return (SparkPlanGraphWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SparkPlanGraphWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SparkPlanGraphWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(SparkPlanGraphWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static SparkPlanGraphWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public SparkPlanGraphWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", SparkPlanGraphWrapper.class.getName());
         DEFAULT_INSTANCE = new SparkPlanGraphWrapper();
         PARSER = new AbstractParser() {
            public SparkPlanGraphWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.SparkPlanGraphWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements SparkPlanGraphWrapperOrBuilder {
         private int bitField0_;
         private long executionId_;
         private List nodes_ = Collections.emptyList();
         private RepeatedFieldBuilder nodesBuilder_;
         private List edges_ = Collections.emptyList();
         private RepeatedFieldBuilder edgesBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(SparkPlanGraphWrapper.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.executionId_ = 0L;
            if (this.nodesBuilder_ == null) {
               this.nodes_ = Collections.emptyList();
            } else {
               this.nodes_ = null;
               this.nodesBuilder_.clear();
            }

            this.bitField0_ &= -3;
            if (this.edgesBuilder_ == null) {
               this.edges_ = Collections.emptyList();
            } else {
               this.edges_ = null;
               this.edgesBuilder_.clear();
            }

            this.bitField0_ &= -5;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SparkPlanGraphWrapper_descriptor;
         }

         public SparkPlanGraphWrapper getDefaultInstanceForType() {
            return StoreTypes.SparkPlanGraphWrapper.getDefaultInstance();
         }

         public SparkPlanGraphWrapper build() {
            SparkPlanGraphWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public SparkPlanGraphWrapper buildPartial() {
            SparkPlanGraphWrapper result = new SparkPlanGraphWrapper(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(SparkPlanGraphWrapper result) {
            if (this.nodesBuilder_ == null) {
               if ((this.bitField0_ & 2) != 0) {
                  this.nodes_ = Collections.unmodifiableList(this.nodes_);
                  this.bitField0_ &= -3;
               }

               result.nodes_ = this.nodes_;
            } else {
               result.nodes_ = this.nodesBuilder_.build();
            }

            if (this.edgesBuilder_ == null) {
               if ((this.bitField0_ & 4) != 0) {
                  this.edges_ = Collections.unmodifiableList(this.edges_);
                  this.bitField0_ &= -5;
               }

               result.edges_ = this.edges_;
            } else {
               result.edges_ = this.edgesBuilder_.build();
            }

         }

         private void buildPartial0(SparkPlanGraphWrapper result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.executionId_ = this.executionId_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof SparkPlanGraphWrapper) {
               return this.mergeFrom((SparkPlanGraphWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(SparkPlanGraphWrapper other) {
            if (other == StoreTypes.SparkPlanGraphWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.getExecutionId() != 0L) {
                  this.setExecutionId(other.getExecutionId());
               }

               if (this.nodesBuilder_ == null) {
                  if (!other.nodes_.isEmpty()) {
                     if (this.nodes_.isEmpty()) {
                        this.nodes_ = other.nodes_;
                        this.bitField0_ &= -3;
                     } else {
                        this.ensureNodesIsMutable();
                        this.nodes_.addAll(other.nodes_);
                     }

                     this.onChanged();
                  }
               } else if (!other.nodes_.isEmpty()) {
                  if (this.nodesBuilder_.isEmpty()) {
                     this.nodesBuilder_.dispose();
                     this.nodesBuilder_ = null;
                     this.nodes_ = other.nodes_;
                     this.bitField0_ &= -3;
                     this.nodesBuilder_ = StoreTypes.SparkPlanGraphWrapper.alwaysUseFieldBuilders ? this.getNodesFieldBuilder() : null;
                  } else {
                     this.nodesBuilder_.addAllMessages(other.nodes_);
                  }
               }

               if (this.edgesBuilder_ == null) {
                  if (!other.edges_.isEmpty()) {
                     if (this.edges_.isEmpty()) {
                        this.edges_ = other.edges_;
                        this.bitField0_ &= -5;
                     } else {
                        this.ensureEdgesIsMutable();
                        this.edges_.addAll(other.edges_);
                     }

                     this.onChanged();
                  }
               } else if (!other.edges_.isEmpty()) {
                  if (this.edgesBuilder_.isEmpty()) {
                     this.edgesBuilder_.dispose();
                     this.edgesBuilder_ = null;
                     this.edges_ = other.edges_;
                     this.bitField0_ &= -5;
                     this.edgesBuilder_ = StoreTypes.SparkPlanGraphWrapper.alwaysUseFieldBuilders ? this.getEdgesFieldBuilder() : null;
                  } else {
                     this.edgesBuilder_.addAllMessages(other.edges_);
                  }
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.executionId_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           SparkPlanGraphNodeWrapper m = (SparkPlanGraphNodeWrapper)input.readMessage(StoreTypes.SparkPlanGraphNodeWrapper.parser(), extensionRegistry);
                           if (this.nodesBuilder_ == null) {
                              this.ensureNodesIsMutable();
                              this.nodes_.add(m);
                           } else {
                              this.nodesBuilder_.addMessage(m);
                           }
                           break;
                        case 26:
                           SparkPlanGraphEdge m = (SparkPlanGraphEdge)input.readMessage(StoreTypes.SparkPlanGraphEdge.parser(), extensionRegistry);
                           if (this.edgesBuilder_ == null) {
                              this.ensureEdgesIsMutable();
                              this.edges_.add(m);
                           } else {
                              this.edgesBuilder_.addMessage(m);
                           }
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getExecutionId() {
            return this.executionId_;
         }

         public Builder setExecutionId(long value) {
            this.executionId_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearExecutionId() {
            this.bitField0_ &= -2;
            this.executionId_ = 0L;
            this.onChanged();
            return this;
         }

         private void ensureNodesIsMutable() {
            if ((this.bitField0_ & 2) == 0) {
               this.nodes_ = new ArrayList(this.nodes_);
               this.bitField0_ |= 2;
            }

         }

         public List getNodesList() {
            return this.nodesBuilder_ == null ? Collections.unmodifiableList(this.nodes_) : this.nodesBuilder_.getMessageList();
         }

         public int getNodesCount() {
            return this.nodesBuilder_ == null ? this.nodes_.size() : this.nodesBuilder_.getCount();
         }

         public SparkPlanGraphNodeWrapper getNodes(int index) {
            return this.nodesBuilder_ == null ? (SparkPlanGraphNodeWrapper)this.nodes_.get(index) : (SparkPlanGraphNodeWrapper)this.nodesBuilder_.getMessage(index);
         }

         public Builder setNodes(int index, SparkPlanGraphNodeWrapper value) {
            if (this.nodesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureNodesIsMutable();
               this.nodes_.set(index, value);
               this.onChanged();
            } else {
               this.nodesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setNodes(int index, SparkPlanGraphNodeWrapper.Builder builderForValue) {
            if (this.nodesBuilder_ == null) {
               this.ensureNodesIsMutable();
               this.nodes_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.nodesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addNodes(SparkPlanGraphNodeWrapper value) {
            if (this.nodesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureNodesIsMutable();
               this.nodes_.add(value);
               this.onChanged();
            } else {
               this.nodesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addNodes(int index, SparkPlanGraphNodeWrapper value) {
            if (this.nodesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureNodesIsMutable();
               this.nodes_.add(index, value);
               this.onChanged();
            } else {
               this.nodesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addNodes(SparkPlanGraphNodeWrapper.Builder builderForValue) {
            if (this.nodesBuilder_ == null) {
               this.ensureNodesIsMutable();
               this.nodes_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.nodesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addNodes(int index, SparkPlanGraphNodeWrapper.Builder builderForValue) {
            if (this.nodesBuilder_ == null) {
               this.ensureNodesIsMutable();
               this.nodes_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.nodesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllNodes(Iterable values) {
            if (this.nodesBuilder_ == null) {
               this.ensureNodesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.nodes_);
               this.onChanged();
            } else {
               this.nodesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearNodes() {
            if (this.nodesBuilder_ == null) {
               this.nodes_ = Collections.emptyList();
               this.bitField0_ &= -3;
               this.onChanged();
            } else {
               this.nodesBuilder_.clear();
            }

            return this;
         }

         public Builder removeNodes(int index) {
            if (this.nodesBuilder_ == null) {
               this.ensureNodesIsMutable();
               this.nodes_.remove(index);
               this.onChanged();
            } else {
               this.nodesBuilder_.remove(index);
            }

            return this;
         }

         public SparkPlanGraphNodeWrapper.Builder getNodesBuilder(int index) {
            return (SparkPlanGraphNodeWrapper.Builder)this.getNodesFieldBuilder().getBuilder(index);
         }

         public SparkPlanGraphNodeWrapperOrBuilder getNodesOrBuilder(int index) {
            return this.nodesBuilder_ == null ? (SparkPlanGraphNodeWrapperOrBuilder)this.nodes_.get(index) : (SparkPlanGraphNodeWrapperOrBuilder)this.nodesBuilder_.getMessageOrBuilder(index);
         }

         public List getNodesOrBuilderList() {
            return this.nodesBuilder_ != null ? this.nodesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.nodes_);
         }

         public SparkPlanGraphNodeWrapper.Builder addNodesBuilder() {
            return (SparkPlanGraphNodeWrapper.Builder)this.getNodesFieldBuilder().addBuilder(StoreTypes.SparkPlanGraphNodeWrapper.getDefaultInstance());
         }

         public SparkPlanGraphNodeWrapper.Builder addNodesBuilder(int index) {
            return (SparkPlanGraphNodeWrapper.Builder)this.getNodesFieldBuilder().addBuilder(index, StoreTypes.SparkPlanGraphNodeWrapper.getDefaultInstance());
         }

         public List getNodesBuilderList() {
            return this.getNodesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getNodesFieldBuilder() {
            if (this.nodesBuilder_ == null) {
               this.nodesBuilder_ = new RepeatedFieldBuilder(this.nodes_, (this.bitField0_ & 2) != 0, this.getParentForChildren(), this.isClean());
               this.nodes_ = null;
            }

            return this.nodesBuilder_;
         }

         private void ensureEdgesIsMutable() {
            if ((this.bitField0_ & 4) == 0) {
               this.edges_ = new ArrayList(this.edges_);
               this.bitField0_ |= 4;
            }

         }

         public List getEdgesList() {
            return this.edgesBuilder_ == null ? Collections.unmodifiableList(this.edges_) : this.edgesBuilder_.getMessageList();
         }

         public int getEdgesCount() {
            return this.edgesBuilder_ == null ? this.edges_.size() : this.edgesBuilder_.getCount();
         }

         public SparkPlanGraphEdge getEdges(int index) {
            return this.edgesBuilder_ == null ? (SparkPlanGraphEdge)this.edges_.get(index) : (SparkPlanGraphEdge)this.edgesBuilder_.getMessage(index);
         }

         public Builder setEdges(int index, SparkPlanGraphEdge value) {
            if (this.edgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureEdgesIsMutable();
               this.edges_.set(index, value);
               this.onChanged();
            } else {
               this.edgesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setEdges(int index, SparkPlanGraphEdge.Builder builderForValue) {
            if (this.edgesBuilder_ == null) {
               this.ensureEdgesIsMutable();
               this.edges_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.edgesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addEdges(SparkPlanGraphEdge value) {
            if (this.edgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureEdgesIsMutable();
               this.edges_.add(value);
               this.onChanged();
            } else {
               this.edgesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addEdges(int index, SparkPlanGraphEdge value) {
            if (this.edgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureEdgesIsMutable();
               this.edges_.add(index, value);
               this.onChanged();
            } else {
               this.edgesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addEdges(SparkPlanGraphEdge.Builder builderForValue) {
            if (this.edgesBuilder_ == null) {
               this.ensureEdgesIsMutable();
               this.edges_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.edgesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addEdges(int index, SparkPlanGraphEdge.Builder builderForValue) {
            if (this.edgesBuilder_ == null) {
               this.ensureEdgesIsMutable();
               this.edges_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.edgesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllEdges(Iterable values) {
            if (this.edgesBuilder_ == null) {
               this.ensureEdgesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.edges_);
               this.onChanged();
            } else {
               this.edgesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearEdges() {
            if (this.edgesBuilder_ == null) {
               this.edges_ = Collections.emptyList();
               this.bitField0_ &= -5;
               this.onChanged();
            } else {
               this.edgesBuilder_.clear();
            }

            return this;
         }

         public Builder removeEdges(int index) {
            if (this.edgesBuilder_ == null) {
               this.ensureEdgesIsMutable();
               this.edges_.remove(index);
               this.onChanged();
            } else {
               this.edgesBuilder_.remove(index);
            }

            return this;
         }

         public SparkPlanGraphEdge.Builder getEdgesBuilder(int index) {
            return (SparkPlanGraphEdge.Builder)this.getEdgesFieldBuilder().getBuilder(index);
         }

         public SparkPlanGraphEdgeOrBuilder getEdgesOrBuilder(int index) {
            return this.edgesBuilder_ == null ? (SparkPlanGraphEdgeOrBuilder)this.edges_.get(index) : (SparkPlanGraphEdgeOrBuilder)this.edgesBuilder_.getMessageOrBuilder(index);
         }

         public List getEdgesOrBuilderList() {
            return this.edgesBuilder_ != null ? this.edgesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.edges_);
         }

         public SparkPlanGraphEdge.Builder addEdgesBuilder() {
            return (SparkPlanGraphEdge.Builder)this.getEdgesFieldBuilder().addBuilder(StoreTypes.SparkPlanGraphEdge.getDefaultInstance());
         }

         public SparkPlanGraphEdge.Builder addEdgesBuilder(int index) {
            return (SparkPlanGraphEdge.Builder)this.getEdgesFieldBuilder().addBuilder(index, StoreTypes.SparkPlanGraphEdge.getDefaultInstance());
         }

         public List getEdgesBuilderList() {
            return this.getEdgesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getEdgesFieldBuilder() {
            if (this.edgesBuilder_ == null) {
               this.edgesBuilder_ = new RepeatedFieldBuilder(this.edges_, (this.bitField0_ & 4) != 0, this.getParentForChildren(), this.isClean());
               this.edges_ = null;
            }

            return this.edgesBuilder_;
         }
      }
   }

   public static final class RDDOperationEdge extends GeneratedMessage implements RDDOperationEdgeOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int FROM_ID_FIELD_NUMBER = 1;
      private int fromId_ = 0;
      public static final int TO_ID_FIELD_NUMBER = 2;
      private int toId_ = 0;
      private byte memoizedIsInitialized = -1;
      private static final RDDOperationEdge DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private RDDOperationEdge(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private RDDOperationEdge() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationEdge_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationEdge_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDOperationEdge.class, Builder.class);
      }

      public int getFromId() {
         return this.fromId_;
      }

      public int getToId() {
         return this.toId_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.fromId_ != 0) {
            output.writeInt32(1, this.fromId_);
         }

         if (this.toId_ != 0) {
            output.writeInt32(2, this.toId_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.fromId_ != 0) {
               size += CodedOutputStream.computeInt32Size(1, this.fromId_);
            }

            if (this.toId_ != 0) {
               size += CodedOutputStream.computeInt32Size(2, this.toId_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof RDDOperationEdge)) {
            return super.equals(obj);
         } else {
            RDDOperationEdge other = (RDDOperationEdge)obj;
            if (this.getFromId() != other.getFromId()) {
               return false;
            } else if (this.getToId() != other.getToId()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + this.getFromId();
            hash = 37 * hash + 2;
            hash = 53 * hash + this.getToId();
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static RDDOperationEdge parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (RDDOperationEdge)PARSER.parseFrom(data);
      }

      public static RDDOperationEdge parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationEdge)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationEdge parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (RDDOperationEdge)PARSER.parseFrom(data);
      }

      public static RDDOperationEdge parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationEdge)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationEdge parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (RDDOperationEdge)PARSER.parseFrom(data);
      }

      public static RDDOperationEdge parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationEdge)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationEdge parseFrom(InputStream input) throws IOException {
         return (RDDOperationEdge)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDOperationEdge parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationEdge)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDOperationEdge parseDelimitedFrom(InputStream input) throws IOException {
         return (RDDOperationEdge)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static RDDOperationEdge parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationEdge)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDOperationEdge parseFrom(CodedInputStream input) throws IOException {
         return (RDDOperationEdge)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDOperationEdge parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationEdge)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(RDDOperationEdge prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static RDDOperationEdge getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public RDDOperationEdge getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", RDDOperationEdge.class.getName());
         DEFAULT_INSTANCE = new RDDOperationEdge();
         PARSER = new AbstractParser() {
            public RDDOperationEdge parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.RDDOperationEdge.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements RDDOperationEdgeOrBuilder {
         private int bitField0_;
         private int fromId_;
         private int toId_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationEdge_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationEdge_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDOperationEdge.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.fromId_ = 0;
            this.toId_ = 0;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationEdge_descriptor;
         }

         public RDDOperationEdge getDefaultInstanceForType() {
            return StoreTypes.RDDOperationEdge.getDefaultInstance();
         }

         public RDDOperationEdge build() {
            RDDOperationEdge result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public RDDOperationEdge buildPartial() {
            RDDOperationEdge result = new RDDOperationEdge(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(RDDOperationEdge result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.fromId_ = this.fromId_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.toId_ = this.toId_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof RDDOperationEdge) {
               return this.mergeFrom((RDDOperationEdge)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(RDDOperationEdge other) {
            if (other == StoreTypes.RDDOperationEdge.getDefaultInstance()) {
               return this;
            } else {
               if (other.getFromId() != 0) {
                  this.setFromId(other.getFromId());
               }

               if (other.getToId() != 0) {
                  this.setToId(other.getToId());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.fromId_ = input.readInt32();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.toId_ = input.readInt32();
                           this.bitField0_ |= 2;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public int getFromId() {
            return this.fromId_;
         }

         public Builder setFromId(int value) {
            this.fromId_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearFromId() {
            this.bitField0_ &= -2;
            this.fromId_ = 0;
            this.onChanged();
            return this;
         }

         public int getToId() {
            return this.toId_;
         }

         public Builder setToId(int value) {
            this.toId_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearToId() {
            this.bitField0_ &= -3;
            this.toId_ = 0;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class RDDOperationNode extends GeneratedMessage implements RDDOperationNodeOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private int id_ = 0;
      public static final int NAME_FIELD_NUMBER = 2;
      private volatile Object name_ = "";
      public static final int CACHED_FIELD_NUMBER = 3;
      private boolean cached_ = false;
      public static final int BARRIER_FIELD_NUMBER = 4;
      private boolean barrier_ = false;
      public static final int CALLSITE_FIELD_NUMBER = 5;
      private volatile Object callsite_ = "";
      public static final int OUTPUT_DETERMINISTIC_LEVEL_FIELD_NUMBER = 6;
      private int outputDeterministicLevel_ = 0;
      private byte memoizedIsInitialized = -1;
      private static final RDDOperationNode DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private RDDOperationNode(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private RDDOperationNode() {
         this.name_ = "";
         this.callsite_ = "";
         this.outputDeterministicLevel_ = 0;
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationNode_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationNode_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDOperationNode.class, Builder.class);
      }

      public int getId() {
         return this.id_;
      }

      public boolean hasName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean getCached() {
         return this.cached_;
      }

      public boolean getBarrier() {
         return this.barrier_;
      }

      public boolean hasCallsite() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getCallsite() {
         Object ref = this.callsite_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.callsite_ = s;
            return s;
         }
      }

      public ByteString getCallsiteBytes() {
         Object ref = this.callsite_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.callsite_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public int getOutputDeterministicLevelValue() {
         return this.outputDeterministicLevel_;
      }

      public DeterministicLevel getOutputDeterministicLevel() {
         DeterministicLevel result = StoreTypes.DeterministicLevel.forNumber(this.outputDeterministicLevel_);
         return result == null ? StoreTypes.DeterministicLevel.UNRECOGNIZED : result;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.id_ != 0) {
            output.writeInt32(1, this.id_);
         }

         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 2, this.name_);
         }

         if (this.cached_) {
            output.writeBool(3, this.cached_);
         }

         if (this.barrier_) {
            output.writeBool(4, this.barrier_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 5, this.callsite_);
         }

         if (this.outputDeterministicLevel_ != StoreTypes.DeterministicLevel.DETERMINISTIC_LEVEL_UNSPECIFIED.getNumber()) {
            output.writeEnum(6, this.outputDeterministicLevel_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.id_ != 0) {
               size += CodedOutputStream.computeInt32Size(1, this.id_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.name_);
            }

            if (this.cached_) {
               size += CodedOutputStream.computeBoolSize(3, this.cached_);
            }

            if (this.barrier_) {
               size += CodedOutputStream.computeBoolSize(4, this.barrier_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(5, this.callsite_);
            }

            if (this.outputDeterministicLevel_ != StoreTypes.DeterministicLevel.DETERMINISTIC_LEVEL_UNSPECIFIED.getNumber()) {
               size += CodedOutputStream.computeEnumSize(6, this.outputDeterministicLevel_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof RDDOperationNode)) {
            return super.equals(obj);
         } else {
            RDDOperationNode other = (RDDOperationNode)obj;
            if (this.getId() != other.getId()) {
               return false;
            } else if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.getCached() != other.getCached()) {
               return false;
            } else if (this.getBarrier() != other.getBarrier()) {
               return false;
            } else if (this.hasCallsite() != other.hasCallsite()) {
               return false;
            } else if (this.hasCallsite() && !this.getCallsite().equals(other.getCallsite())) {
               return false;
            } else if (this.outputDeterministicLevel_ != other.outputDeterministicLevel_) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + this.getId();
            if (this.hasName()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getName().hashCode();
            }

            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashBoolean(this.getCached());
            hash = 37 * hash + 4;
            hash = 53 * hash + Internal.hashBoolean(this.getBarrier());
            if (this.hasCallsite()) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getCallsite().hashCode();
            }

            hash = 37 * hash + 6;
            hash = 53 * hash + this.outputDeterministicLevel_;
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static RDDOperationNode parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (RDDOperationNode)PARSER.parseFrom(data);
      }

      public static RDDOperationNode parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationNode)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationNode parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (RDDOperationNode)PARSER.parseFrom(data);
      }

      public static RDDOperationNode parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationNode)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationNode parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (RDDOperationNode)PARSER.parseFrom(data);
      }

      public static RDDOperationNode parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationNode)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationNode parseFrom(InputStream input) throws IOException {
         return (RDDOperationNode)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDOperationNode parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationNode)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDOperationNode parseDelimitedFrom(InputStream input) throws IOException {
         return (RDDOperationNode)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static RDDOperationNode parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationNode)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDOperationNode parseFrom(CodedInputStream input) throws IOException {
         return (RDDOperationNode)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDOperationNode parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationNode)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(RDDOperationNode prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static RDDOperationNode getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public RDDOperationNode getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", RDDOperationNode.class.getName());
         DEFAULT_INSTANCE = new RDDOperationNode();
         PARSER = new AbstractParser() {
            public RDDOperationNode parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.RDDOperationNode.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements RDDOperationNodeOrBuilder {
         private int bitField0_;
         private int id_;
         private Object name_ = "";
         private boolean cached_;
         private boolean barrier_;
         private Object callsite_ = "";
         private int outputDeterministicLevel_ = 0;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationNode_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationNode_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDOperationNode.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.id_ = 0;
            this.name_ = "";
            this.cached_ = false;
            this.barrier_ = false;
            this.callsite_ = "";
            this.outputDeterministicLevel_ = 0;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationNode_descriptor;
         }

         public RDDOperationNode getDefaultInstanceForType() {
            return StoreTypes.RDDOperationNode.getDefaultInstance();
         }

         public RDDOperationNode build() {
            RDDOperationNode result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public RDDOperationNode buildPartial() {
            RDDOperationNode result = new RDDOperationNode(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(RDDOperationNode result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.id_ = this.id_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 2) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.cached_ = this.cached_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.barrier_ = this.barrier_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.callsite_ = this.callsite_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.outputDeterministicLevel_ = this.outputDeterministicLevel_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof RDDOperationNode) {
               return this.mergeFrom((RDDOperationNode)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(RDDOperationNode other) {
            if (other == StoreTypes.RDDOperationNode.getDefaultInstance()) {
               return this;
            } else {
               if (other.getId() != 0) {
                  this.setId(other.getId());
               }

               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.getCached()) {
                  this.setCached(other.getCached());
               }

               if (other.getBarrier()) {
                  this.setBarrier(other.getBarrier());
               }

               if (other.hasCallsite()) {
                  this.callsite_ = other.callsite_;
                  this.bitField0_ |= 16;
                  this.onChanged();
               }

               if (other.outputDeterministicLevel_ != 0) {
                  this.setOutputDeterministicLevelValue(other.getOutputDeterministicLevelValue());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.id_ = input.readInt32();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.cached_ = input.readBool();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.barrier_ = input.readBool();
                           this.bitField0_ |= 8;
                           break;
                        case 42:
                           this.callsite_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.outputDeterministicLevel_ = input.readEnum();
                           this.bitField0_ |= 32;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public int getId() {
            return this.id_;
         }

         public Builder setId(int value) {
            this.id_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearId() {
            this.bitField0_ &= -2;
            this.id_ = 0;
            this.onChanged();
            return this;
         }

         public boolean hasName() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.RDDOperationNode.getDefaultInstance().getName();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RDDOperationNode.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean getCached() {
            return this.cached_;
         }

         public Builder setCached(boolean value) {
            this.cached_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearCached() {
            this.bitField0_ &= -5;
            this.cached_ = false;
            this.onChanged();
            return this;
         }

         public boolean getBarrier() {
            return this.barrier_;
         }

         public Builder setBarrier(boolean value) {
            this.barrier_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearBarrier() {
            this.bitField0_ &= -9;
            this.barrier_ = false;
            this.onChanged();
            return this;
         }

         public boolean hasCallsite() {
            return (this.bitField0_ & 16) != 0;
         }

         public String getCallsite() {
            Object ref = this.callsite_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.callsite_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getCallsiteBytes() {
            Object ref = this.callsite_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.callsite_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setCallsite(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.callsite_ = value;
               this.bitField0_ |= 16;
               this.onChanged();
               return this;
            }
         }

         public Builder clearCallsite() {
            this.callsite_ = StoreTypes.RDDOperationNode.getDefaultInstance().getCallsite();
            this.bitField0_ &= -17;
            this.onChanged();
            return this;
         }

         public Builder setCallsiteBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RDDOperationNode.checkByteStringIsUtf8(value);
               this.callsite_ = value;
               this.bitField0_ |= 16;
               this.onChanged();
               return this;
            }
         }

         public int getOutputDeterministicLevelValue() {
            return this.outputDeterministicLevel_;
         }

         public Builder setOutputDeterministicLevelValue(int value) {
            this.outputDeterministicLevel_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public DeterministicLevel getOutputDeterministicLevel() {
            DeterministicLevel result = StoreTypes.DeterministicLevel.forNumber(this.outputDeterministicLevel_);
            return result == null ? StoreTypes.DeterministicLevel.UNRECOGNIZED : result;
         }

         public Builder setOutputDeterministicLevel(DeterministicLevel value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.bitField0_ |= 32;
               this.outputDeterministicLevel_ = value.getNumber();
               this.onChanged();
               return this;
            }
         }

         public Builder clearOutputDeterministicLevel() {
            this.bitField0_ &= -33;
            this.outputDeterministicLevel_ = 0;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class RDDOperationClusterWrapper extends GeneratedMessage implements RDDOperationClusterWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private volatile Object id_ = "";
      public static final int NAME_FIELD_NUMBER = 2;
      private volatile Object name_ = "";
      public static final int CHILD_NODES_FIELD_NUMBER = 3;
      private List childNodes_;
      public static final int CHILD_CLUSTERS_FIELD_NUMBER = 4;
      private List childClusters_;
      private byte memoizedIsInitialized = -1;
      private static final RDDOperationClusterWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private RDDOperationClusterWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private RDDOperationClusterWrapper() {
         this.id_ = "";
         this.name_ = "";
         this.childNodes_ = Collections.emptyList();
         this.childClusters_ = Collections.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationClusterWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationClusterWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDOperationClusterWrapper.class, Builder.class);
      }

      public boolean hasId() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getId() {
         Object ref = this.id_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.id_ = s;
            return s;
         }
      }

      public ByteString getIdBytes() {
         Object ref = this.id_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.id_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasName() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public List getChildNodesList() {
         return this.childNodes_;
      }

      public List getChildNodesOrBuilderList() {
         return this.childNodes_;
      }

      public int getChildNodesCount() {
         return this.childNodes_.size();
      }

      public RDDOperationNode getChildNodes(int index) {
         return (RDDOperationNode)this.childNodes_.get(index);
      }

      public RDDOperationNodeOrBuilder getChildNodesOrBuilder(int index) {
         return (RDDOperationNodeOrBuilder)this.childNodes_.get(index);
      }

      public List getChildClustersList() {
         return this.childClusters_;
      }

      public List getChildClustersOrBuilderList() {
         return this.childClusters_;
      }

      public int getChildClustersCount() {
         return this.childClusters_.size();
      }

      public RDDOperationClusterWrapper getChildClusters(int index) {
         return (RDDOperationClusterWrapper)this.childClusters_.get(index);
      }

      public RDDOperationClusterWrapperOrBuilder getChildClustersOrBuilder(int index) {
         return (RDDOperationClusterWrapperOrBuilder)this.childClusters_.get(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.id_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 2, this.name_);
         }

         for(int i = 0; i < this.childNodes_.size(); ++i) {
            output.writeMessage(3, (MessageLite)this.childNodes_.get(i));
         }

         for(int i = 0; i < this.childClusters_.size(); ++i) {
            output.writeMessage(4, (MessageLite)this.childClusters_.get(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.id_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.name_);
            }

            for(int i = 0; i < this.childNodes_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.childNodes_.get(i));
            }

            for(int i = 0; i < this.childClusters_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(4, (MessageLite)this.childClusters_.get(i));
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof RDDOperationClusterWrapper)) {
            return super.equals(obj);
         } else {
            RDDOperationClusterWrapper other = (RDDOperationClusterWrapper)obj;
            if (this.hasId() != other.hasId()) {
               return false;
            } else if (this.hasId() && !this.getId().equals(other.getId())) {
               return false;
            } else if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (!this.getChildNodesList().equals(other.getChildNodesList())) {
               return false;
            } else if (!this.getChildClustersList().equals(other.getChildClustersList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasId()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getId().hashCode();
            }

            if (this.hasName()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.getChildNodesCount() > 0) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getChildNodesList().hashCode();
            }

            if (this.getChildClustersCount() > 0) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getChildClustersList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static RDDOperationClusterWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (RDDOperationClusterWrapper)PARSER.parseFrom(data);
      }

      public static RDDOperationClusterWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationClusterWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationClusterWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (RDDOperationClusterWrapper)PARSER.parseFrom(data);
      }

      public static RDDOperationClusterWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationClusterWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationClusterWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (RDDOperationClusterWrapper)PARSER.parseFrom(data);
      }

      public static RDDOperationClusterWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationClusterWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationClusterWrapper parseFrom(InputStream input) throws IOException {
         return (RDDOperationClusterWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDOperationClusterWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationClusterWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDOperationClusterWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (RDDOperationClusterWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static RDDOperationClusterWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationClusterWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDOperationClusterWrapper parseFrom(CodedInputStream input) throws IOException {
         return (RDDOperationClusterWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDOperationClusterWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationClusterWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(RDDOperationClusterWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static RDDOperationClusterWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public RDDOperationClusterWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", RDDOperationClusterWrapper.class.getName());
         DEFAULT_INSTANCE = new RDDOperationClusterWrapper();
         PARSER = new AbstractParser() {
            public RDDOperationClusterWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.RDDOperationClusterWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements RDDOperationClusterWrapperOrBuilder {
         private int bitField0_;
         private Object id_ = "";
         private Object name_ = "";
         private List childNodes_ = Collections.emptyList();
         private RepeatedFieldBuilder childNodesBuilder_;
         private List childClusters_ = Collections.emptyList();
         private RepeatedFieldBuilder childClustersBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationClusterWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationClusterWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDOperationClusterWrapper.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.id_ = "";
            this.name_ = "";
            if (this.childNodesBuilder_ == null) {
               this.childNodes_ = Collections.emptyList();
            } else {
               this.childNodes_ = null;
               this.childNodesBuilder_.clear();
            }

            this.bitField0_ &= -5;
            if (this.childClustersBuilder_ == null) {
               this.childClusters_ = Collections.emptyList();
            } else {
               this.childClusters_ = null;
               this.childClustersBuilder_.clear();
            }

            this.bitField0_ &= -9;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationClusterWrapper_descriptor;
         }

         public RDDOperationClusterWrapper getDefaultInstanceForType() {
            return StoreTypes.RDDOperationClusterWrapper.getDefaultInstance();
         }

         public RDDOperationClusterWrapper build() {
            RDDOperationClusterWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public RDDOperationClusterWrapper buildPartial() {
            RDDOperationClusterWrapper result = new RDDOperationClusterWrapper(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(RDDOperationClusterWrapper result) {
            if (this.childNodesBuilder_ == null) {
               if ((this.bitField0_ & 4) != 0) {
                  this.childNodes_ = Collections.unmodifiableList(this.childNodes_);
                  this.bitField0_ &= -5;
               }

               result.childNodes_ = this.childNodes_;
            } else {
               result.childNodes_ = this.childNodesBuilder_.build();
            }

            if (this.childClustersBuilder_ == null) {
               if ((this.bitField0_ & 8) != 0) {
                  this.childClusters_ = Collections.unmodifiableList(this.childClusters_);
                  this.bitField0_ &= -9;
               }

               result.childClusters_ = this.childClusters_;
            } else {
               result.childClusters_ = this.childClustersBuilder_.build();
            }

         }

         private void buildPartial0(RDDOperationClusterWrapper result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.id_ = this.id_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 2;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof RDDOperationClusterWrapper) {
               return this.mergeFrom((RDDOperationClusterWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(RDDOperationClusterWrapper other) {
            if (other == StoreTypes.RDDOperationClusterWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasId()) {
                  this.id_ = other.id_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (this.childNodesBuilder_ == null) {
                  if (!other.childNodes_.isEmpty()) {
                     if (this.childNodes_.isEmpty()) {
                        this.childNodes_ = other.childNodes_;
                        this.bitField0_ &= -5;
                     } else {
                        this.ensureChildNodesIsMutable();
                        this.childNodes_.addAll(other.childNodes_);
                     }

                     this.onChanged();
                  }
               } else if (!other.childNodes_.isEmpty()) {
                  if (this.childNodesBuilder_.isEmpty()) {
                     this.childNodesBuilder_.dispose();
                     this.childNodesBuilder_ = null;
                     this.childNodes_ = other.childNodes_;
                     this.bitField0_ &= -5;
                     this.childNodesBuilder_ = StoreTypes.RDDOperationClusterWrapper.alwaysUseFieldBuilders ? this.getChildNodesFieldBuilder() : null;
                  } else {
                     this.childNodesBuilder_.addAllMessages(other.childNodes_);
                  }
               }

               if (this.childClustersBuilder_ == null) {
                  if (!other.childClusters_.isEmpty()) {
                     if (this.childClusters_.isEmpty()) {
                        this.childClusters_ = other.childClusters_;
                        this.bitField0_ &= -9;
                     } else {
                        this.ensureChildClustersIsMutable();
                        this.childClusters_.addAll(other.childClusters_);
                     }

                     this.onChanged();
                  }
               } else if (!other.childClusters_.isEmpty()) {
                  if (this.childClustersBuilder_.isEmpty()) {
                     this.childClustersBuilder_.dispose();
                     this.childClustersBuilder_ = null;
                     this.childClusters_ = other.childClusters_;
                     this.bitField0_ &= -9;
                     this.childClustersBuilder_ = StoreTypes.RDDOperationClusterWrapper.alwaysUseFieldBuilders ? this.getChildClustersFieldBuilder() : null;
                  } else {
                     this.childClustersBuilder_.addAllMessages(other.childClusters_);
                  }
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.id_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           RDDOperationNode m = (RDDOperationNode)input.readMessage(StoreTypes.RDDOperationNode.parser(), extensionRegistry);
                           if (this.childNodesBuilder_ == null) {
                              this.ensureChildNodesIsMutable();
                              this.childNodes_.add(m);
                           } else {
                              this.childNodesBuilder_.addMessage(m);
                           }
                           break;
                        case 34:
                           RDDOperationClusterWrapper m = (RDDOperationClusterWrapper)input.readMessage(StoreTypes.RDDOperationClusterWrapper.parser(), extensionRegistry);
                           if (this.childClustersBuilder_ == null) {
                              this.ensureChildClustersIsMutable();
                              this.childClusters_.add(m);
                           } else {
                              this.childClustersBuilder_.addMessage(m);
                           }
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasId() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getId() {
            Object ref = this.id_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.id_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.id_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.id_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearId() {
            this.id_ = StoreTypes.RDDOperationClusterWrapper.getDefaultInstance().getId();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RDDOperationClusterWrapper.checkByteStringIsUtf8(value);
               this.id_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public boolean hasName() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.RDDOperationClusterWrapper.getDefaultInstance().getName();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.RDDOperationClusterWrapper.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         private void ensureChildNodesIsMutable() {
            if ((this.bitField0_ & 4) == 0) {
               this.childNodes_ = new ArrayList(this.childNodes_);
               this.bitField0_ |= 4;
            }

         }

         public List getChildNodesList() {
            return this.childNodesBuilder_ == null ? Collections.unmodifiableList(this.childNodes_) : this.childNodesBuilder_.getMessageList();
         }

         public int getChildNodesCount() {
            return this.childNodesBuilder_ == null ? this.childNodes_.size() : this.childNodesBuilder_.getCount();
         }

         public RDDOperationNode getChildNodes(int index) {
            return this.childNodesBuilder_ == null ? (RDDOperationNode)this.childNodes_.get(index) : (RDDOperationNode)this.childNodesBuilder_.getMessage(index);
         }

         public Builder setChildNodes(int index, RDDOperationNode value) {
            if (this.childNodesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureChildNodesIsMutable();
               this.childNodes_.set(index, value);
               this.onChanged();
            } else {
               this.childNodesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setChildNodes(int index, RDDOperationNode.Builder builderForValue) {
            if (this.childNodesBuilder_ == null) {
               this.ensureChildNodesIsMutable();
               this.childNodes_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.childNodesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addChildNodes(RDDOperationNode value) {
            if (this.childNodesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureChildNodesIsMutable();
               this.childNodes_.add(value);
               this.onChanged();
            } else {
               this.childNodesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addChildNodes(int index, RDDOperationNode value) {
            if (this.childNodesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureChildNodesIsMutable();
               this.childNodes_.add(index, value);
               this.onChanged();
            } else {
               this.childNodesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addChildNodes(RDDOperationNode.Builder builderForValue) {
            if (this.childNodesBuilder_ == null) {
               this.ensureChildNodesIsMutable();
               this.childNodes_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.childNodesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addChildNodes(int index, RDDOperationNode.Builder builderForValue) {
            if (this.childNodesBuilder_ == null) {
               this.ensureChildNodesIsMutable();
               this.childNodes_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.childNodesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllChildNodes(Iterable values) {
            if (this.childNodesBuilder_ == null) {
               this.ensureChildNodesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.childNodes_);
               this.onChanged();
            } else {
               this.childNodesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearChildNodes() {
            if (this.childNodesBuilder_ == null) {
               this.childNodes_ = Collections.emptyList();
               this.bitField0_ &= -5;
               this.onChanged();
            } else {
               this.childNodesBuilder_.clear();
            }

            return this;
         }

         public Builder removeChildNodes(int index) {
            if (this.childNodesBuilder_ == null) {
               this.ensureChildNodesIsMutable();
               this.childNodes_.remove(index);
               this.onChanged();
            } else {
               this.childNodesBuilder_.remove(index);
            }

            return this;
         }

         public RDDOperationNode.Builder getChildNodesBuilder(int index) {
            return (RDDOperationNode.Builder)this.getChildNodesFieldBuilder().getBuilder(index);
         }

         public RDDOperationNodeOrBuilder getChildNodesOrBuilder(int index) {
            return this.childNodesBuilder_ == null ? (RDDOperationNodeOrBuilder)this.childNodes_.get(index) : (RDDOperationNodeOrBuilder)this.childNodesBuilder_.getMessageOrBuilder(index);
         }

         public List getChildNodesOrBuilderList() {
            return this.childNodesBuilder_ != null ? this.childNodesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.childNodes_);
         }

         public RDDOperationNode.Builder addChildNodesBuilder() {
            return (RDDOperationNode.Builder)this.getChildNodesFieldBuilder().addBuilder(StoreTypes.RDDOperationNode.getDefaultInstance());
         }

         public RDDOperationNode.Builder addChildNodesBuilder(int index) {
            return (RDDOperationNode.Builder)this.getChildNodesFieldBuilder().addBuilder(index, StoreTypes.RDDOperationNode.getDefaultInstance());
         }

         public List getChildNodesBuilderList() {
            return this.getChildNodesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getChildNodesFieldBuilder() {
            if (this.childNodesBuilder_ == null) {
               this.childNodesBuilder_ = new RepeatedFieldBuilder(this.childNodes_, (this.bitField0_ & 4) != 0, this.getParentForChildren(), this.isClean());
               this.childNodes_ = null;
            }

            return this.childNodesBuilder_;
         }

         private void ensureChildClustersIsMutable() {
            if ((this.bitField0_ & 8) == 0) {
               this.childClusters_ = new ArrayList(this.childClusters_);
               this.bitField0_ |= 8;
            }

         }

         public List getChildClustersList() {
            return this.childClustersBuilder_ == null ? Collections.unmodifiableList(this.childClusters_) : this.childClustersBuilder_.getMessageList();
         }

         public int getChildClustersCount() {
            return this.childClustersBuilder_ == null ? this.childClusters_.size() : this.childClustersBuilder_.getCount();
         }

         public RDDOperationClusterWrapper getChildClusters(int index) {
            return this.childClustersBuilder_ == null ? (RDDOperationClusterWrapper)this.childClusters_.get(index) : (RDDOperationClusterWrapper)this.childClustersBuilder_.getMessage(index);
         }

         public Builder setChildClusters(int index, RDDOperationClusterWrapper value) {
            if (this.childClustersBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureChildClustersIsMutable();
               this.childClusters_.set(index, value);
               this.onChanged();
            } else {
               this.childClustersBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setChildClusters(int index, Builder builderForValue) {
            if (this.childClustersBuilder_ == null) {
               this.ensureChildClustersIsMutable();
               this.childClusters_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.childClustersBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addChildClusters(RDDOperationClusterWrapper value) {
            if (this.childClustersBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureChildClustersIsMutable();
               this.childClusters_.add(value);
               this.onChanged();
            } else {
               this.childClustersBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addChildClusters(int index, RDDOperationClusterWrapper value) {
            if (this.childClustersBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureChildClustersIsMutable();
               this.childClusters_.add(index, value);
               this.onChanged();
            } else {
               this.childClustersBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addChildClusters(Builder builderForValue) {
            if (this.childClustersBuilder_ == null) {
               this.ensureChildClustersIsMutable();
               this.childClusters_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.childClustersBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addChildClusters(int index, Builder builderForValue) {
            if (this.childClustersBuilder_ == null) {
               this.ensureChildClustersIsMutable();
               this.childClusters_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.childClustersBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllChildClusters(Iterable values) {
            if (this.childClustersBuilder_ == null) {
               this.ensureChildClustersIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.childClusters_);
               this.onChanged();
            } else {
               this.childClustersBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearChildClusters() {
            if (this.childClustersBuilder_ == null) {
               this.childClusters_ = Collections.emptyList();
               this.bitField0_ &= -9;
               this.onChanged();
            } else {
               this.childClustersBuilder_.clear();
            }

            return this;
         }

         public Builder removeChildClusters(int index) {
            if (this.childClustersBuilder_ == null) {
               this.ensureChildClustersIsMutable();
               this.childClusters_.remove(index);
               this.onChanged();
            } else {
               this.childClustersBuilder_.remove(index);
            }

            return this;
         }

         public Builder getChildClustersBuilder(int index) {
            return (Builder)this.getChildClustersFieldBuilder().getBuilder(index);
         }

         public RDDOperationClusterWrapperOrBuilder getChildClustersOrBuilder(int index) {
            return this.childClustersBuilder_ == null ? (RDDOperationClusterWrapperOrBuilder)this.childClusters_.get(index) : (RDDOperationClusterWrapperOrBuilder)this.childClustersBuilder_.getMessageOrBuilder(index);
         }

         public List getChildClustersOrBuilderList() {
            return this.childClustersBuilder_ != null ? this.childClustersBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.childClusters_);
         }

         public Builder addChildClustersBuilder() {
            return (Builder)this.getChildClustersFieldBuilder().addBuilder(StoreTypes.RDDOperationClusterWrapper.getDefaultInstance());
         }

         public Builder addChildClustersBuilder(int index) {
            return (Builder)this.getChildClustersFieldBuilder().addBuilder(index, StoreTypes.RDDOperationClusterWrapper.getDefaultInstance());
         }

         public List getChildClustersBuilderList() {
            return this.getChildClustersFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getChildClustersFieldBuilder() {
            if (this.childClustersBuilder_ == null) {
               this.childClustersBuilder_ = new RepeatedFieldBuilder(this.childClusters_, (this.bitField0_ & 8) != 0, this.getParentForChildren(), this.isClean());
               this.childClusters_ = null;
            }

            return this.childClustersBuilder_;
         }
      }
   }

   public static final class RDDOperationGraphWrapper extends GeneratedMessage implements RDDOperationGraphWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int STAGE_ID_FIELD_NUMBER = 1;
      private long stageId_ = 0L;
      public static final int EDGES_FIELD_NUMBER = 2;
      private List edges_;
      public static final int OUTGOING_EDGES_FIELD_NUMBER = 3;
      private List outgoingEdges_;
      public static final int INCOMING_EDGES_FIELD_NUMBER = 4;
      private List incomingEdges_;
      public static final int ROOT_CLUSTER_FIELD_NUMBER = 5;
      private RDDOperationClusterWrapper rootCluster_;
      private byte memoizedIsInitialized = -1;
      private static final RDDOperationGraphWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private RDDOperationGraphWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private RDDOperationGraphWrapper() {
         this.edges_ = Collections.emptyList();
         this.outgoingEdges_ = Collections.emptyList();
         this.incomingEdges_ = Collections.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationGraphWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationGraphWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDOperationGraphWrapper.class, Builder.class);
      }

      public long getStageId() {
         return this.stageId_;
      }

      public List getEdgesList() {
         return this.edges_;
      }

      public List getEdgesOrBuilderList() {
         return this.edges_;
      }

      public int getEdgesCount() {
         return this.edges_.size();
      }

      public RDDOperationEdge getEdges(int index) {
         return (RDDOperationEdge)this.edges_.get(index);
      }

      public RDDOperationEdgeOrBuilder getEdgesOrBuilder(int index) {
         return (RDDOperationEdgeOrBuilder)this.edges_.get(index);
      }

      public List getOutgoingEdgesList() {
         return this.outgoingEdges_;
      }

      public List getOutgoingEdgesOrBuilderList() {
         return this.outgoingEdges_;
      }

      public int getOutgoingEdgesCount() {
         return this.outgoingEdges_.size();
      }

      public RDDOperationEdge getOutgoingEdges(int index) {
         return (RDDOperationEdge)this.outgoingEdges_.get(index);
      }

      public RDDOperationEdgeOrBuilder getOutgoingEdgesOrBuilder(int index) {
         return (RDDOperationEdgeOrBuilder)this.outgoingEdges_.get(index);
      }

      public List getIncomingEdgesList() {
         return this.incomingEdges_;
      }

      public List getIncomingEdgesOrBuilderList() {
         return this.incomingEdges_;
      }

      public int getIncomingEdgesCount() {
         return this.incomingEdges_.size();
      }

      public RDDOperationEdge getIncomingEdges(int index) {
         return (RDDOperationEdge)this.incomingEdges_.get(index);
      }

      public RDDOperationEdgeOrBuilder getIncomingEdgesOrBuilder(int index) {
         return (RDDOperationEdgeOrBuilder)this.incomingEdges_.get(index);
      }

      public boolean hasRootCluster() {
         return (this.bitField0_ & 1) != 0;
      }

      public RDDOperationClusterWrapper getRootCluster() {
         return this.rootCluster_ == null ? StoreTypes.RDDOperationClusterWrapper.getDefaultInstance() : this.rootCluster_;
      }

      public RDDOperationClusterWrapperOrBuilder getRootClusterOrBuilder() {
         return this.rootCluster_ == null ? StoreTypes.RDDOperationClusterWrapper.getDefaultInstance() : this.rootCluster_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.stageId_ != 0L) {
            output.writeInt64(1, this.stageId_);
         }

         for(int i = 0; i < this.edges_.size(); ++i) {
            output.writeMessage(2, (MessageLite)this.edges_.get(i));
         }

         for(int i = 0; i < this.outgoingEdges_.size(); ++i) {
            output.writeMessage(3, (MessageLite)this.outgoingEdges_.get(i));
         }

         for(int i = 0; i < this.incomingEdges_.size(); ++i) {
            output.writeMessage(4, (MessageLite)this.incomingEdges_.get(i));
         }

         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(5, this.getRootCluster());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.stageId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.stageId_);
            }

            for(int i = 0; i < this.edges_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.edges_.get(i));
            }

            for(int i = 0; i < this.outgoingEdges_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(3, (MessageLite)this.outgoingEdges_.get(i));
            }

            for(int i = 0; i < this.incomingEdges_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(4, (MessageLite)this.incomingEdges_.get(i));
            }

            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(5, this.getRootCluster());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof RDDOperationGraphWrapper)) {
            return super.equals(obj);
         } else {
            RDDOperationGraphWrapper other = (RDDOperationGraphWrapper)obj;
            if (this.getStageId() != other.getStageId()) {
               return false;
            } else if (!this.getEdgesList().equals(other.getEdgesList())) {
               return false;
            } else if (!this.getOutgoingEdgesList().equals(other.getOutgoingEdgesList())) {
               return false;
            } else if (!this.getIncomingEdgesList().equals(other.getIncomingEdgesList())) {
               return false;
            } else if (this.hasRootCluster() != other.hasRootCluster()) {
               return false;
            } else if (this.hasRootCluster() && !this.getRootCluster().equals(other.getRootCluster())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getStageId());
            if (this.getEdgesCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getEdgesList().hashCode();
            }

            if (this.getOutgoingEdgesCount() > 0) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getOutgoingEdgesList().hashCode();
            }

            if (this.getIncomingEdgesCount() > 0) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getIncomingEdgesList().hashCode();
            }

            if (this.hasRootCluster()) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getRootCluster().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static RDDOperationGraphWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (RDDOperationGraphWrapper)PARSER.parseFrom(data);
      }

      public static RDDOperationGraphWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationGraphWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationGraphWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (RDDOperationGraphWrapper)PARSER.parseFrom(data);
      }

      public static RDDOperationGraphWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationGraphWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationGraphWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (RDDOperationGraphWrapper)PARSER.parseFrom(data);
      }

      public static RDDOperationGraphWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (RDDOperationGraphWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static RDDOperationGraphWrapper parseFrom(InputStream input) throws IOException {
         return (RDDOperationGraphWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDOperationGraphWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationGraphWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDOperationGraphWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (RDDOperationGraphWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static RDDOperationGraphWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationGraphWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static RDDOperationGraphWrapper parseFrom(CodedInputStream input) throws IOException {
         return (RDDOperationGraphWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static RDDOperationGraphWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (RDDOperationGraphWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(RDDOperationGraphWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static RDDOperationGraphWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public RDDOperationGraphWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", RDDOperationGraphWrapper.class.getName());
         DEFAULT_INSTANCE = new RDDOperationGraphWrapper();
         PARSER = new AbstractParser() {
            public RDDOperationGraphWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.RDDOperationGraphWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements RDDOperationGraphWrapperOrBuilder {
         private int bitField0_;
         private long stageId_;
         private List edges_ = Collections.emptyList();
         private RepeatedFieldBuilder edgesBuilder_;
         private List outgoingEdges_ = Collections.emptyList();
         private RepeatedFieldBuilder outgoingEdgesBuilder_;
         private List incomingEdges_ = Collections.emptyList();
         private RepeatedFieldBuilder incomingEdgesBuilder_;
         private RDDOperationClusterWrapper rootCluster_;
         private SingleFieldBuilder rootClusterBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationGraphWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationGraphWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(RDDOperationGraphWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.RDDOperationGraphWrapper.alwaysUseFieldBuilders) {
               this.getEdgesFieldBuilder();
               this.getOutgoingEdgesFieldBuilder();
               this.getIncomingEdgesFieldBuilder();
               this.getRootClusterFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.stageId_ = 0L;
            if (this.edgesBuilder_ == null) {
               this.edges_ = Collections.emptyList();
            } else {
               this.edges_ = null;
               this.edgesBuilder_.clear();
            }

            this.bitField0_ &= -3;
            if (this.outgoingEdgesBuilder_ == null) {
               this.outgoingEdges_ = Collections.emptyList();
            } else {
               this.outgoingEdges_ = null;
               this.outgoingEdgesBuilder_.clear();
            }

            this.bitField0_ &= -5;
            if (this.incomingEdgesBuilder_ == null) {
               this.incomingEdges_ = Collections.emptyList();
            } else {
               this.incomingEdges_ = null;
               this.incomingEdgesBuilder_.clear();
            }

            this.bitField0_ &= -9;
            this.rootCluster_ = null;
            if (this.rootClusterBuilder_ != null) {
               this.rootClusterBuilder_.dispose();
               this.rootClusterBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_RDDOperationGraphWrapper_descriptor;
         }

         public RDDOperationGraphWrapper getDefaultInstanceForType() {
            return StoreTypes.RDDOperationGraphWrapper.getDefaultInstance();
         }

         public RDDOperationGraphWrapper build() {
            RDDOperationGraphWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public RDDOperationGraphWrapper buildPartial() {
            RDDOperationGraphWrapper result = new RDDOperationGraphWrapper(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(RDDOperationGraphWrapper result) {
            if (this.edgesBuilder_ == null) {
               if ((this.bitField0_ & 2) != 0) {
                  this.edges_ = Collections.unmodifiableList(this.edges_);
                  this.bitField0_ &= -3;
               }

               result.edges_ = this.edges_;
            } else {
               result.edges_ = this.edgesBuilder_.build();
            }

            if (this.outgoingEdgesBuilder_ == null) {
               if ((this.bitField0_ & 4) != 0) {
                  this.outgoingEdges_ = Collections.unmodifiableList(this.outgoingEdges_);
                  this.bitField0_ &= -5;
               }

               result.outgoingEdges_ = this.outgoingEdges_;
            } else {
               result.outgoingEdges_ = this.outgoingEdgesBuilder_.build();
            }

            if (this.incomingEdgesBuilder_ == null) {
               if ((this.bitField0_ & 8) != 0) {
                  this.incomingEdges_ = Collections.unmodifiableList(this.incomingEdges_);
                  this.bitField0_ &= -9;
               }

               result.incomingEdges_ = this.incomingEdges_;
            } else {
               result.incomingEdges_ = this.incomingEdgesBuilder_.build();
            }

         }

         private void buildPartial0(RDDOperationGraphWrapper result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.stageId_ = this.stageId_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 16) != 0) {
               result.rootCluster_ = this.rootClusterBuilder_ == null ? this.rootCluster_ : (RDDOperationClusterWrapper)this.rootClusterBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof RDDOperationGraphWrapper) {
               return this.mergeFrom((RDDOperationGraphWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(RDDOperationGraphWrapper other) {
            if (other == StoreTypes.RDDOperationGraphWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.getStageId() != 0L) {
                  this.setStageId(other.getStageId());
               }

               if (this.edgesBuilder_ == null) {
                  if (!other.edges_.isEmpty()) {
                     if (this.edges_.isEmpty()) {
                        this.edges_ = other.edges_;
                        this.bitField0_ &= -3;
                     } else {
                        this.ensureEdgesIsMutable();
                        this.edges_.addAll(other.edges_);
                     }

                     this.onChanged();
                  }
               } else if (!other.edges_.isEmpty()) {
                  if (this.edgesBuilder_.isEmpty()) {
                     this.edgesBuilder_.dispose();
                     this.edgesBuilder_ = null;
                     this.edges_ = other.edges_;
                     this.bitField0_ &= -3;
                     this.edgesBuilder_ = StoreTypes.RDDOperationGraphWrapper.alwaysUseFieldBuilders ? this.getEdgesFieldBuilder() : null;
                  } else {
                     this.edgesBuilder_.addAllMessages(other.edges_);
                  }
               }

               if (this.outgoingEdgesBuilder_ == null) {
                  if (!other.outgoingEdges_.isEmpty()) {
                     if (this.outgoingEdges_.isEmpty()) {
                        this.outgoingEdges_ = other.outgoingEdges_;
                        this.bitField0_ &= -5;
                     } else {
                        this.ensureOutgoingEdgesIsMutable();
                        this.outgoingEdges_.addAll(other.outgoingEdges_);
                     }

                     this.onChanged();
                  }
               } else if (!other.outgoingEdges_.isEmpty()) {
                  if (this.outgoingEdgesBuilder_.isEmpty()) {
                     this.outgoingEdgesBuilder_.dispose();
                     this.outgoingEdgesBuilder_ = null;
                     this.outgoingEdges_ = other.outgoingEdges_;
                     this.bitField0_ &= -5;
                     this.outgoingEdgesBuilder_ = StoreTypes.RDDOperationGraphWrapper.alwaysUseFieldBuilders ? this.getOutgoingEdgesFieldBuilder() : null;
                  } else {
                     this.outgoingEdgesBuilder_.addAllMessages(other.outgoingEdges_);
                  }
               }

               if (this.incomingEdgesBuilder_ == null) {
                  if (!other.incomingEdges_.isEmpty()) {
                     if (this.incomingEdges_.isEmpty()) {
                        this.incomingEdges_ = other.incomingEdges_;
                        this.bitField0_ &= -9;
                     } else {
                        this.ensureIncomingEdgesIsMutable();
                        this.incomingEdges_.addAll(other.incomingEdges_);
                     }

                     this.onChanged();
                  }
               } else if (!other.incomingEdges_.isEmpty()) {
                  if (this.incomingEdgesBuilder_.isEmpty()) {
                     this.incomingEdgesBuilder_.dispose();
                     this.incomingEdgesBuilder_ = null;
                     this.incomingEdges_ = other.incomingEdges_;
                     this.bitField0_ &= -9;
                     this.incomingEdgesBuilder_ = StoreTypes.RDDOperationGraphWrapper.alwaysUseFieldBuilders ? this.getIncomingEdgesFieldBuilder() : null;
                  } else {
                     this.incomingEdgesBuilder_.addAllMessages(other.incomingEdges_);
                  }
               }

               if (other.hasRootCluster()) {
                  this.mergeRootCluster(other.getRootCluster());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.stageId_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           RDDOperationEdge m = (RDDOperationEdge)input.readMessage(StoreTypes.RDDOperationEdge.parser(), extensionRegistry);
                           if (this.edgesBuilder_ == null) {
                              this.ensureEdgesIsMutable();
                              this.edges_.add(m);
                           } else {
                              this.edgesBuilder_.addMessage(m);
                           }
                           break;
                        case 26:
                           RDDOperationEdge m = (RDDOperationEdge)input.readMessage(StoreTypes.RDDOperationEdge.parser(), extensionRegistry);
                           if (this.outgoingEdgesBuilder_ == null) {
                              this.ensureOutgoingEdgesIsMutable();
                              this.outgoingEdges_.add(m);
                           } else {
                              this.outgoingEdgesBuilder_.addMessage(m);
                           }
                           break;
                        case 34:
                           RDDOperationEdge m = (RDDOperationEdge)input.readMessage(StoreTypes.RDDOperationEdge.parser(), extensionRegistry);
                           if (this.incomingEdgesBuilder_ == null) {
                              this.ensureIncomingEdgesIsMutable();
                              this.incomingEdges_.add(m);
                           } else {
                              this.incomingEdgesBuilder_.addMessage(m);
                           }
                           break;
                        case 42:
                           input.readMessage((MessageLite.Builder)this.getRootClusterFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 16;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getStageId() {
            return this.stageId_;
         }

         public Builder setStageId(long value) {
            this.stageId_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearStageId() {
            this.bitField0_ &= -2;
            this.stageId_ = 0L;
            this.onChanged();
            return this;
         }

         private void ensureEdgesIsMutable() {
            if ((this.bitField0_ & 2) == 0) {
               this.edges_ = new ArrayList(this.edges_);
               this.bitField0_ |= 2;
            }

         }

         public List getEdgesList() {
            return this.edgesBuilder_ == null ? Collections.unmodifiableList(this.edges_) : this.edgesBuilder_.getMessageList();
         }

         public int getEdgesCount() {
            return this.edgesBuilder_ == null ? this.edges_.size() : this.edgesBuilder_.getCount();
         }

         public RDDOperationEdge getEdges(int index) {
            return this.edgesBuilder_ == null ? (RDDOperationEdge)this.edges_.get(index) : (RDDOperationEdge)this.edgesBuilder_.getMessage(index);
         }

         public Builder setEdges(int index, RDDOperationEdge value) {
            if (this.edgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureEdgesIsMutable();
               this.edges_.set(index, value);
               this.onChanged();
            } else {
               this.edgesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setEdges(int index, RDDOperationEdge.Builder builderForValue) {
            if (this.edgesBuilder_ == null) {
               this.ensureEdgesIsMutable();
               this.edges_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.edgesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addEdges(RDDOperationEdge value) {
            if (this.edgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureEdgesIsMutable();
               this.edges_.add(value);
               this.onChanged();
            } else {
               this.edgesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addEdges(int index, RDDOperationEdge value) {
            if (this.edgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureEdgesIsMutable();
               this.edges_.add(index, value);
               this.onChanged();
            } else {
               this.edgesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addEdges(RDDOperationEdge.Builder builderForValue) {
            if (this.edgesBuilder_ == null) {
               this.ensureEdgesIsMutable();
               this.edges_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.edgesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addEdges(int index, RDDOperationEdge.Builder builderForValue) {
            if (this.edgesBuilder_ == null) {
               this.ensureEdgesIsMutable();
               this.edges_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.edgesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllEdges(Iterable values) {
            if (this.edgesBuilder_ == null) {
               this.ensureEdgesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.edges_);
               this.onChanged();
            } else {
               this.edgesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearEdges() {
            if (this.edgesBuilder_ == null) {
               this.edges_ = Collections.emptyList();
               this.bitField0_ &= -3;
               this.onChanged();
            } else {
               this.edgesBuilder_.clear();
            }

            return this;
         }

         public Builder removeEdges(int index) {
            if (this.edgesBuilder_ == null) {
               this.ensureEdgesIsMutable();
               this.edges_.remove(index);
               this.onChanged();
            } else {
               this.edgesBuilder_.remove(index);
            }

            return this;
         }

         public RDDOperationEdge.Builder getEdgesBuilder(int index) {
            return (RDDOperationEdge.Builder)this.getEdgesFieldBuilder().getBuilder(index);
         }

         public RDDOperationEdgeOrBuilder getEdgesOrBuilder(int index) {
            return this.edgesBuilder_ == null ? (RDDOperationEdgeOrBuilder)this.edges_.get(index) : (RDDOperationEdgeOrBuilder)this.edgesBuilder_.getMessageOrBuilder(index);
         }

         public List getEdgesOrBuilderList() {
            return this.edgesBuilder_ != null ? this.edgesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.edges_);
         }

         public RDDOperationEdge.Builder addEdgesBuilder() {
            return (RDDOperationEdge.Builder)this.getEdgesFieldBuilder().addBuilder(StoreTypes.RDDOperationEdge.getDefaultInstance());
         }

         public RDDOperationEdge.Builder addEdgesBuilder(int index) {
            return (RDDOperationEdge.Builder)this.getEdgesFieldBuilder().addBuilder(index, StoreTypes.RDDOperationEdge.getDefaultInstance());
         }

         public List getEdgesBuilderList() {
            return this.getEdgesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getEdgesFieldBuilder() {
            if (this.edgesBuilder_ == null) {
               this.edgesBuilder_ = new RepeatedFieldBuilder(this.edges_, (this.bitField0_ & 2) != 0, this.getParentForChildren(), this.isClean());
               this.edges_ = null;
            }

            return this.edgesBuilder_;
         }

         private void ensureOutgoingEdgesIsMutable() {
            if ((this.bitField0_ & 4) == 0) {
               this.outgoingEdges_ = new ArrayList(this.outgoingEdges_);
               this.bitField0_ |= 4;
            }

         }

         public List getOutgoingEdgesList() {
            return this.outgoingEdgesBuilder_ == null ? Collections.unmodifiableList(this.outgoingEdges_) : this.outgoingEdgesBuilder_.getMessageList();
         }

         public int getOutgoingEdgesCount() {
            return this.outgoingEdgesBuilder_ == null ? this.outgoingEdges_.size() : this.outgoingEdgesBuilder_.getCount();
         }

         public RDDOperationEdge getOutgoingEdges(int index) {
            return this.outgoingEdgesBuilder_ == null ? (RDDOperationEdge)this.outgoingEdges_.get(index) : (RDDOperationEdge)this.outgoingEdgesBuilder_.getMessage(index);
         }

         public Builder setOutgoingEdges(int index, RDDOperationEdge value) {
            if (this.outgoingEdgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureOutgoingEdgesIsMutable();
               this.outgoingEdges_.set(index, value);
               this.onChanged();
            } else {
               this.outgoingEdgesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setOutgoingEdges(int index, RDDOperationEdge.Builder builderForValue) {
            if (this.outgoingEdgesBuilder_ == null) {
               this.ensureOutgoingEdgesIsMutable();
               this.outgoingEdges_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.outgoingEdgesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addOutgoingEdges(RDDOperationEdge value) {
            if (this.outgoingEdgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureOutgoingEdgesIsMutable();
               this.outgoingEdges_.add(value);
               this.onChanged();
            } else {
               this.outgoingEdgesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addOutgoingEdges(int index, RDDOperationEdge value) {
            if (this.outgoingEdgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureOutgoingEdgesIsMutable();
               this.outgoingEdges_.add(index, value);
               this.onChanged();
            } else {
               this.outgoingEdgesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addOutgoingEdges(RDDOperationEdge.Builder builderForValue) {
            if (this.outgoingEdgesBuilder_ == null) {
               this.ensureOutgoingEdgesIsMutable();
               this.outgoingEdges_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.outgoingEdgesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addOutgoingEdges(int index, RDDOperationEdge.Builder builderForValue) {
            if (this.outgoingEdgesBuilder_ == null) {
               this.ensureOutgoingEdgesIsMutable();
               this.outgoingEdges_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.outgoingEdgesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllOutgoingEdges(Iterable values) {
            if (this.outgoingEdgesBuilder_ == null) {
               this.ensureOutgoingEdgesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.outgoingEdges_);
               this.onChanged();
            } else {
               this.outgoingEdgesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearOutgoingEdges() {
            if (this.outgoingEdgesBuilder_ == null) {
               this.outgoingEdges_ = Collections.emptyList();
               this.bitField0_ &= -5;
               this.onChanged();
            } else {
               this.outgoingEdgesBuilder_.clear();
            }

            return this;
         }

         public Builder removeOutgoingEdges(int index) {
            if (this.outgoingEdgesBuilder_ == null) {
               this.ensureOutgoingEdgesIsMutable();
               this.outgoingEdges_.remove(index);
               this.onChanged();
            } else {
               this.outgoingEdgesBuilder_.remove(index);
            }

            return this;
         }

         public RDDOperationEdge.Builder getOutgoingEdgesBuilder(int index) {
            return (RDDOperationEdge.Builder)this.getOutgoingEdgesFieldBuilder().getBuilder(index);
         }

         public RDDOperationEdgeOrBuilder getOutgoingEdgesOrBuilder(int index) {
            return this.outgoingEdgesBuilder_ == null ? (RDDOperationEdgeOrBuilder)this.outgoingEdges_.get(index) : (RDDOperationEdgeOrBuilder)this.outgoingEdgesBuilder_.getMessageOrBuilder(index);
         }

         public List getOutgoingEdgesOrBuilderList() {
            return this.outgoingEdgesBuilder_ != null ? this.outgoingEdgesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.outgoingEdges_);
         }

         public RDDOperationEdge.Builder addOutgoingEdgesBuilder() {
            return (RDDOperationEdge.Builder)this.getOutgoingEdgesFieldBuilder().addBuilder(StoreTypes.RDDOperationEdge.getDefaultInstance());
         }

         public RDDOperationEdge.Builder addOutgoingEdgesBuilder(int index) {
            return (RDDOperationEdge.Builder)this.getOutgoingEdgesFieldBuilder().addBuilder(index, StoreTypes.RDDOperationEdge.getDefaultInstance());
         }

         public List getOutgoingEdgesBuilderList() {
            return this.getOutgoingEdgesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getOutgoingEdgesFieldBuilder() {
            if (this.outgoingEdgesBuilder_ == null) {
               this.outgoingEdgesBuilder_ = new RepeatedFieldBuilder(this.outgoingEdges_, (this.bitField0_ & 4) != 0, this.getParentForChildren(), this.isClean());
               this.outgoingEdges_ = null;
            }

            return this.outgoingEdgesBuilder_;
         }

         private void ensureIncomingEdgesIsMutable() {
            if ((this.bitField0_ & 8) == 0) {
               this.incomingEdges_ = new ArrayList(this.incomingEdges_);
               this.bitField0_ |= 8;
            }

         }

         public List getIncomingEdgesList() {
            return this.incomingEdgesBuilder_ == null ? Collections.unmodifiableList(this.incomingEdges_) : this.incomingEdgesBuilder_.getMessageList();
         }

         public int getIncomingEdgesCount() {
            return this.incomingEdgesBuilder_ == null ? this.incomingEdges_.size() : this.incomingEdgesBuilder_.getCount();
         }

         public RDDOperationEdge getIncomingEdges(int index) {
            return this.incomingEdgesBuilder_ == null ? (RDDOperationEdge)this.incomingEdges_.get(index) : (RDDOperationEdge)this.incomingEdgesBuilder_.getMessage(index);
         }

         public Builder setIncomingEdges(int index, RDDOperationEdge value) {
            if (this.incomingEdgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureIncomingEdgesIsMutable();
               this.incomingEdges_.set(index, value);
               this.onChanged();
            } else {
               this.incomingEdgesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setIncomingEdges(int index, RDDOperationEdge.Builder builderForValue) {
            if (this.incomingEdgesBuilder_ == null) {
               this.ensureIncomingEdgesIsMutable();
               this.incomingEdges_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.incomingEdgesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addIncomingEdges(RDDOperationEdge value) {
            if (this.incomingEdgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureIncomingEdgesIsMutable();
               this.incomingEdges_.add(value);
               this.onChanged();
            } else {
               this.incomingEdgesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addIncomingEdges(int index, RDDOperationEdge value) {
            if (this.incomingEdgesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureIncomingEdgesIsMutable();
               this.incomingEdges_.add(index, value);
               this.onChanged();
            } else {
               this.incomingEdgesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addIncomingEdges(RDDOperationEdge.Builder builderForValue) {
            if (this.incomingEdgesBuilder_ == null) {
               this.ensureIncomingEdgesIsMutable();
               this.incomingEdges_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.incomingEdgesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addIncomingEdges(int index, RDDOperationEdge.Builder builderForValue) {
            if (this.incomingEdgesBuilder_ == null) {
               this.ensureIncomingEdgesIsMutable();
               this.incomingEdges_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.incomingEdgesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllIncomingEdges(Iterable values) {
            if (this.incomingEdgesBuilder_ == null) {
               this.ensureIncomingEdgesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.incomingEdges_);
               this.onChanged();
            } else {
               this.incomingEdgesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearIncomingEdges() {
            if (this.incomingEdgesBuilder_ == null) {
               this.incomingEdges_ = Collections.emptyList();
               this.bitField0_ &= -9;
               this.onChanged();
            } else {
               this.incomingEdgesBuilder_.clear();
            }

            return this;
         }

         public Builder removeIncomingEdges(int index) {
            if (this.incomingEdgesBuilder_ == null) {
               this.ensureIncomingEdgesIsMutable();
               this.incomingEdges_.remove(index);
               this.onChanged();
            } else {
               this.incomingEdgesBuilder_.remove(index);
            }

            return this;
         }

         public RDDOperationEdge.Builder getIncomingEdgesBuilder(int index) {
            return (RDDOperationEdge.Builder)this.getIncomingEdgesFieldBuilder().getBuilder(index);
         }

         public RDDOperationEdgeOrBuilder getIncomingEdgesOrBuilder(int index) {
            return this.incomingEdgesBuilder_ == null ? (RDDOperationEdgeOrBuilder)this.incomingEdges_.get(index) : (RDDOperationEdgeOrBuilder)this.incomingEdgesBuilder_.getMessageOrBuilder(index);
         }

         public List getIncomingEdgesOrBuilderList() {
            return this.incomingEdgesBuilder_ != null ? this.incomingEdgesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.incomingEdges_);
         }

         public RDDOperationEdge.Builder addIncomingEdgesBuilder() {
            return (RDDOperationEdge.Builder)this.getIncomingEdgesFieldBuilder().addBuilder(StoreTypes.RDDOperationEdge.getDefaultInstance());
         }

         public RDDOperationEdge.Builder addIncomingEdgesBuilder(int index) {
            return (RDDOperationEdge.Builder)this.getIncomingEdgesFieldBuilder().addBuilder(index, StoreTypes.RDDOperationEdge.getDefaultInstance());
         }

         public List getIncomingEdgesBuilderList() {
            return this.getIncomingEdgesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getIncomingEdgesFieldBuilder() {
            if (this.incomingEdgesBuilder_ == null) {
               this.incomingEdgesBuilder_ = new RepeatedFieldBuilder(this.incomingEdges_, (this.bitField0_ & 8) != 0, this.getParentForChildren(), this.isClean());
               this.incomingEdges_ = null;
            }

            return this.incomingEdgesBuilder_;
         }

         public boolean hasRootCluster() {
            return (this.bitField0_ & 16) != 0;
         }

         public RDDOperationClusterWrapper getRootCluster() {
            if (this.rootClusterBuilder_ == null) {
               return this.rootCluster_ == null ? StoreTypes.RDDOperationClusterWrapper.getDefaultInstance() : this.rootCluster_;
            } else {
               return (RDDOperationClusterWrapper)this.rootClusterBuilder_.getMessage();
            }
         }

         public Builder setRootCluster(RDDOperationClusterWrapper value) {
            if (this.rootClusterBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.rootCluster_ = value;
            } else {
               this.rootClusterBuilder_.setMessage(value);
            }

            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder setRootCluster(RDDOperationClusterWrapper.Builder builderForValue) {
            if (this.rootClusterBuilder_ == null) {
               this.rootCluster_ = builderForValue.build();
            } else {
               this.rootClusterBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder mergeRootCluster(RDDOperationClusterWrapper value) {
            if (this.rootClusterBuilder_ == null) {
               if ((this.bitField0_ & 16) != 0 && this.rootCluster_ != null && this.rootCluster_ != StoreTypes.RDDOperationClusterWrapper.getDefaultInstance()) {
                  this.getRootClusterBuilder().mergeFrom(value);
               } else {
                  this.rootCluster_ = value;
               }
            } else {
               this.rootClusterBuilder_.mergeFrom(value);
            }

            if (this.rootCluster_ != null) {
               this.bitField0_ |= 16;
               this.onChanged();
            }

            return this;
         }

         public Builder clearRootCluster() {
            this.bitField0_ &= -17;
            this.rootCluster_ = null;
            if (this.rootClusterBuilder_ != null) {
               this.rootClusterBuilder_.dispose();
               this.rootClusterBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public RDDOperationClusterWrapper.Builder getRootClusterBuilder() {
            this.bitField0_ |= 16;
            this.onChanged();
            return (RDDOperationClusterWrapper.Builder)this.getRootClusterFieldBuilder().getBuilder();
         }

         public RDDOperationClusterWrapperOrBuilder getRootClusterOrBuilder() {
            if (this.rootClusterBuilder_ != null) {
               return (RDDOperationClusterWrapperOrBuilder)this.rootClusterBuilder_.getMessageOrBuilder();
            } else {
               return this.rootCluster_ == null ? StoreTypes.RDDOperationClusterWrapper.getDefaultInstance() : this.rootCluster_;
            }
         }

         private SingleFieldBuilder getRootClusterFieldBuilder() {
            if (this.rootClusterBuilder_ == null) {
               this.rootClusterBuilder_ = new SingleFieldBuilder(this.getRootCluster(), this.getParentForChildren(), this.isClean());
               this.rootCluster_ = null;
            }

            return this.rootClusterBuilder_;
         }
      }
   }

   public static final class StreamingQueryData extends GeneratedMessage implements StreamingQueryDataOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      private volatile Object name_ = "";
      public static final int ID_FIELD_NUMBER = 2;
      private volatile Object id_ = "";
      public static final int RUN_ID_FIELD_NUMBER = 3;
      private volatile Object runId_ = "";
      public static final int IS_ACTIVE_FIELD_NUMBER = 4;
      private boolean isActive_ = false;
      public static final int EXCEPTION_FIELD_NUMBER = 5;
      private volatile Object exception_ = "";
      public static final int START_TIMESTAMP_FIELD_NUMBER = 6;
      private long startTimestamp_ = 0L;
      public static final int END_TIMESTAMP_FIELD_NUMBER = 7;
      private long endTimestamp_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final StreamingQueryData DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private StreamingQueryData(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private StreamingQueryData() {
         this.name_ = "";
         this.id_ = "";
         this.runId_ = "";
         this.exception_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryData_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryData_fieldAccessorTable.ensureFieldAccessorsInitialized(StreamingQueryData.class, Builder.class);
      }

      public boolean hasName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasId() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getId() {
         Object ref = this.id_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.id_ = s;
            return s;
         }
      }

      public ByteString getIdBytes() {
         Object ref = this.id_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.id_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasRunId() {
         return (this.bitField0_ & 4) != 0;
      }

      public String getRunId() {
         Object ref = this.runId_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.runId_ = s;
            return s;
         }
      }

      public ByteString getRunIdBytes() {
         Object ref = this.runId_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.runId_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean getIsActive() {
         return this.isActive_;
      }

      public boolean hasException() {
         return (this.bitField0_ & 8) != 0;
      }

      public String getException() {
         Object ref = this.exception_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.exception_ = s;
            return s;
         }
      }

      public ByteString getExceptionBytes() {
         Object ref = this.exception_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.exception_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getStartTimestamp() {
         return this.startTimestamp_;
      }

      public boolean hasEndTimestamp() {
         return (this.bitField0_ & 16) != 0;
      }

      public long getEndTimestamp() {
         return this.endTimestamp_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.name_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 2, this.id_);
         }

         if ((this.bitField0_ & 4) != 0) {
            GeneratedMessage.writeString(output, 3, this.runId_);
         }

         if (this.isActive_) {
            output.writeBool(4, this.isActive_);
         }

         if ((this.bitField0_ & 8) != 0) {
            GeneratedMessage.writeString(output, 5, this.exception_);
         }

         if (this.startTimestamp_ != 0L) {
            output.writeInt64(6, this.startTimestamp_);
         }

         if ((this.bitField0_ & 16) != 0) {
            output.writeInt64(7, this.endTimestamp_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.name_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.id_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.runId_);
            }

            if (this.isActive_) {
               size += CodedOutputStream.computeBoolSize(4, this.isActive_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += GeneratedMessage.computeStringSize(5, this.exception_);
            }

            if (this.startTimestamp_ != 0L) {
               size += CodedOutputStream.computeInt64Size(6, this.startTimestamp_);
            }

            if ((this.bitField0_ & 16) != 0) {
               size += CodedOutputStream.computeInt64Size(7, this.endTimestamp_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof StreamingQueryData)) {
            return super.equals(obj);
         } else {
            StreamingQueryData other = (StreamingQueryData)obj;
            if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.hasId() != other.hasId()) {
               return false;
            } else if (this.hasId() && !this.getId().equals(other.getId())) {
               return false;
            } else if (this.hasRunId() != other.hasRunId()) {
               return false;
            } else if (this.hasRunId() && !this.getRunId().equals(other.getRunId())) {
               return false;
            } else if (this.getIsActive() != other.getIsActive()) {
               return false;
            } else if (this.hasException() != other.hasException()) {
               return false;
            } else if (this.hasException() && !this.getException().equals(other.getException())) {
               return false;
            } else if (this.getStartTimestamp() != other.getStartTimestamp()) {
               return false;
            } else if (this.hasEndTimestamp() != other.hasEndTimestamp()) {
               return false;
            } else if (this.hasEndTimestamp() && this.getEndTimestamp() != other.getEndTimestamp()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasName()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.hasId()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getId().hashCode();
            }

            if (this.hasRunId()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getRunId().hashCode();
            }

            hash = 37 * hash + 4;
            hash = 53 * hash + Internal.hashBoolean(this.getIsActive());
            if (this.hasException()) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getException().hashCode();
            }

            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(this.getStartTimestamp());
            if (this.hasEndTimestamp()) {
               hash = 37 * hash + 7;
               hash = 53 * hash + Internal.hashLong(this.getEndTimestamp());
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static StreamingQueryData parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (StreamingQueryData)PARSER.parseFrom(data);
      }

      public static StreamingQueryData parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamingQueryData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamingQueryData parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (StreamingQueryData)PARSER.parseFrom(data);
      }

      public static StreamingQueryData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamingQueryData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamingQueryData parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (StreamingQueryData)PARSER.parseFrom(data);
      }

      public static StreamingQueryData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamingQueryData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamingQueryData parseFrom(InputStream input) throws IOException {
         return (StreamingQueryData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StreamingQueryData parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamingQueryData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static StreamingQueryData parseDelimitedFrom(InputStream input) throws IOException {
         return (StreamingQueryData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static StreamingQueryData parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamingQueryData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static StreamingQueryData parseFrom(CodedInputStream input) throws IOException {
         return (StreamingQueryData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StreamingQueryData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamingQueryData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(StreamingQueryData prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static StreamingQueryData getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public StreamingQueryData getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", StreamingQueryData.class.getName());
         DEFAULT_INSTANCE = new StreamingQueryData();
         PARSER = new AbstractParser() {
            public StreamingQueryData parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.StreamingQueryData.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements StreamingQueryDataOrBuilder {
         private int bitField0_;
         private Object name_ = "";
         private Object id_ = "";
         private Object runId_ = "";
         private boolean isActive_;
         private Object exception_ = "";
         private long startTimestamp_;
         private long endTimestamp_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryData_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryData_fieldAccessorTable.ensureFieldAccessorsInitialized(StreamingQueryData.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.name_ = "";
            this.id_ = "";
            this.runId_ = "";
            this.isActive_ = false;
            this.exception_ = "";
            this.startTimestamp_ = 0L;
            this.endTimestamp_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryData_descriptor;
         }

         public StreamingQueryData getDefaultInstanceForType() {
            return StoreTypes.StreamingQueryData.getDefaultInstance();
         }

         public StreamingQueryData build() {
            StreamingQueryData result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public StreamingQueryData buildPartial() {
            StreamingQueryData result = new StreamingQueryData(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(StreamingQueryData result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.id_ = this.id_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.runId_ = this.runId_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.isActive_ = this.isActive_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.exception_ = this.exception_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.startTimestamp_ = this.startTimestamp_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.endTimestamp_ = this.endTimestamp_;
               to_bitField0_ |= 16;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof StreamingQueryData) {
               return this.mergeFrom((StreamingQueryData)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(StreamingQueryData other) {
            if (other == StoreTypes.StreamingQueryData.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.hasId()) {
                  this.id_ = other.id_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.hasRunId()) {
                  this.runId_ = other.runId_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (other.getIsActive()) {
                  this.setIsActive(other.getIsActive());
               }

               if (other.hasException()) {
                  this.exception_ = other.exception_;
                  this.bitField0_ |= 16;
                  this.onChanged();
               }

               if (other.getStartTimestamp() != 0L) {
                  this.setStartTimestamp(other.getStartTimestamp());
               }

               if (other.hasEndTimestamp()) {
                  this.setEndTimestamp(other.getEndTimestamp());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.id_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.runId_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.isActive_ = input.readBool();
                           this.bitField0_ |= 8;
                           break;
                        case 42:
                           this.exception_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.startTimestamp_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.endTimestamp_ = input.readInt64();
                           this.bitField0_ |= 64;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasName() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.StreamingQueryData.getDefaultInstance().getName();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamingQueryData.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public boolean hasId() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getId() {
            Object ref = this.id_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.id_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.id_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.id_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearId() {
            this.id_ = StoreTypes.StreamingQueryData.getDefaultInstance().getId();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamingQueryData.checkByteStringIsUtf8(value);
               this.id_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean hasRunId() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getRunId() {
            Object ref = this.runId_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.runId_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getRunIdBytes() {
            Object ref = this.runId_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.runId_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setRunId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.runId_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearRunId() {
            this.runId_ = StoreTypes.StreamingQueryData.getDefaultInstance().getRunId();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setRunIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamingQueryData.checkByteStringIsUtf8(value);
               this.runId_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public boolean getIsActive() {
            return this.isActive_;
         }

         public Builder setIsActive(boolean value) {
            this.isActive_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearIsActive() {
            this.bitField0_ &= -9;
            this.isActive_ = false;
            this.onChanged();
            return this;
         }

         public boolean hasException() {
            return (this.bitField0_ & 16) != 0;
         }

         public String getException() {
            Object ref = this.exception_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.exception_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getExceptionBytes() {
            Object ref = this.exception_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.exception_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setException(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.exception_ = value;
               this.bitField0_ |= 16;
               this.onChanged();
               return this;
            }
         }

         public Builder clearException() {
            this.exception_ = StoreTypes.StreamingQueryData.getDefaultInstance().getException();
            this.bitField0_ &= -17;
            this.onChanged();
            return this;
         }

         public Builder setExceptionBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamingQueryData.checkByteStringIsUtf8(value);
               this.exception_ = value;
               this.bitField0_ |= 16;
               this.onChanged();
               return this;
            }
         }

         public long getStartTimestamp() {
            return this.startTimestamp_;
         }

         public Builder setStartTimestamp(long value) {
            this.startTimestamp_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearStartTimestamp() {
            this.bitField0_ &= -33;
            this.startTimestamp_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasEndTimestamp() {
            return (this.bitField0_ & 64) != 0;
         }

         public long getEndTimestamp() {
            return this.endTimestamp_;
         }

         public Builder setEndTimestamp(long value) {
            this.endTimestamp_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearEndTimestamp() {
            this.bitField0_ &= -65;
            this.endTimestamp_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class StageDataWrapper extends GeneratedMessage implements StageDataWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int INFO_FIELD_NUMBER = 1;
      private StageData info_;
      public static final int JOB_IDS_FIELD_NUMBER = 2;
      private Internal.LongList jobIds_ = emptyLongList();
      private int jobIdsMemoizedSerializedSize = -1;
      public static final int LOCALITY_FIELD_NUMBER = 3;
      private MapField locality_;
      private byte memoizedIsInitialized = -1;
      private static final StageDataWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private StageDataWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private StageDataWrapper() {
         this.jobIds_ = emptyLongList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StageDataWrapper_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 3 -> {
               return this.internalGetLocality();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StageDataWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(StageDataWrapper.class, Builder.class);
      }

      public boolean hasInfo() {
         return (this.bitField0_ & 1) != 0;
      }

      public StageData getInfo() {
         return this.info_ == null ? StoreTypes.StageData.getDefaultInstance() : this.info_;
      }

      public StageDataOrBuilder getInfoOrBuilder() {
         return this.info_ == null ? StoreTypes.StageData.getDefaultInstance() : this.info_;
      }

      public List getJobIdsList() {
         return this.jobIds_;
      }

      public int getJobIdsCount() {
         return this.jobIds_.size();
      }

      public long getJobIds(int index) {
         return this.jobIds_.getLong(index);
      }

      private MapField internalGetLocality() {
         return this.locality_ == null ? MapField.emptyMapField(StoreTypes.StageDataWrapper.LocalityDefaultEntryHolder.defaultEntry) : this.locality_;
      }

      public int getLocalityCount() {
         return this.internalGetLocality().getMap().size();
      }

      public boolean containsLocality(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetLocality().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getLocality() {
         return this.getLocalityMap();
      }

      public Map getLocalityMap() {
         return this.internalGetLocality().getMap();
      }

      public long getLocalityOrDefault(String key, long defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Long> map = this.internalGetLocality().getMap();
            return map.containsKey(key) ? (Long)map.get(key) : defaultValue;
         }
      }

      public long getLocalityOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Long> map = this.internalGetLocality().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (Long)map.get(key);
            }
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(1, this.getInfo());
         }

         if (this.getJobIdsList().size() > 0) {
            output.writeUInt32NoTag(18);
            output.writeUInt32NoTag(this.jobIdsMemoizedSerializedSize);
         }

         for(int i = 0; i < this.jobIds_.size(); ++i) {
            output.writeInt64NoTag(this.jobIds_.getLong(i));
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetLocality(), StoreTypes.StageDataWrapper.LocalityDefaultEntryHolder.defaultEntry, 3);
         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(1, this.getInfo());
            }

            int dataSize = 0;

            for(int i = 0; i < this.jobIds_.size(); ++i) {
               dataSize += CodedOutputStream.computeInt64SizeNoTag(this.jobIds_.getLong(i));
            }

            size += dataSize;
            if (!this.getJobIdsList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.jobIdsMemoizedSerializedSize = dataSize;

            for(Map.Entry entry : this.internalGetLocality().getMap().entrySet()) {
               MapEntry<String, Long> locality__ = StoreTypes.StageDataWrapper.LocalityDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((Long)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(3, locality__);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof StageDataWrapper)) {
            return super.equals(obj);
         } else {
            StageDataWrapper other = (StageDataWrapper)obj;
            if (this.hasInfo() != other.hasInfo()) {
               return false;
            } else if (this.hasInfo() && !this.getInfo().equals(other.getInfo())) {
               return false;
            } else if (!this.getJobIdsList().equals(other.getJobIdsList())) {
               return false;
            } else if (!this.internalGetLocality().equals(other.internalGetLocality())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasInfo()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getInfo().hashCode();
            }

            if (this.getJobIdsCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getJobIdsList().hashCode();
            }

            if (!this.internalGetLocality().getMap().isEmpty()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.internalGetLocality().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static StageDataWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (StageDataWrapper)PARSER.parseFrom(data);
      }

      public static StageDataWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StageDataWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StageDataWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (StageDataWrapper)PARSER.parseFrom(data);
      }

      public static StageDataWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StageDataWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StageDataWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (StageDataWrapper)PARSER.parseFrom(data);
      }

      public static StageDataWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StageDataWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StageDataWrapper parseFrom(InputStream input) throws IOException {
         return (StageDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StageDataWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StageDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static StageDataWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (StageDataWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static StageDataWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StageDataWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static StageDataWrapper parseFrom(CodedInputStream input) throws IOException {
         return (StageDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StageDataWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StageDataWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(StageDataWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static StageDataWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public StageDataWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", StageDataWrapper.class.getName());
         DEFAULT_INSTANCE = new StageDataWrapper();
         PARSER = new AbstractParser() {
            public StageDataWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.StageDataWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      private static final class LocalityDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_StageDataWrapper_LocalityEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);
         }
      }

      public static final class Builder extends GeneratedMessage.Builder implements StageDataWrapperOrBuilder {
         private int bitField0_;
         private StageData info_;
         private SingleFieldBuilder infoBuilder_;
         private Internal.LongList jobIds_ = StoreTypes.StageDataWrapper.emptyLongList();
         private MapField locality_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StageDataWrapper_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 3 -> {
                  return this.internalGetLocality();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 3 -> {
                  return this.internalGetMutableLocality();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StageDataWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(StageDataWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.StageDataWrapper.alwaysUseFieldBuilders) {
               this.getInfoFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            this.jobIds_ = StoreTypes.StageDataWrapper.emptyLongList();
            this.internalGetMutableLocality().clear();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StageDataWrapper_descriptor;
         }

         public StageDataWrapper getDefaultInstanceForType() {
            return StoreTypes.StageDataWrapper.getDefaultInstance();
         }

         public StageDataWrapper build() {
            StageDataWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public StageDataWrapper buildPartial() {
            StageDataWrapper result = new StageDataWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(StageDataWrapper result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.info_ = this.infoBuilder_ == null ? this.info_ : (StageData)this.infoBuilder_.build();
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               this.jobIds_.makeImmutable();
               result.jobIds_ = this.jobIds_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.locality_ = this.internalGetLocality();
               result.locality_.makeImmutable();
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof StageDataWrapper) {
               return this.mergeFrom((StageDataWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(StageDataWrapper other) {
            if (other == StoreTypes.StageDataWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasInfo()) {
                  this.mergeInfo(other.getInfo());
               }

               if (!other.jobIds_.isEmpty()) {
                  if (this.jobIds_.isEmpty()) {
                     this.jobIds_ = other.jobIds_;
                     this.jobIds_.makeImmutable();
                     this.bitField0_ |= 2;
                  } else {
                     this.ensureJobIdsIsMutable();
                     this.jobIds_.addAll(other.jobIds_);
                  }

                  this.onChanged();
               }

               this.internalGetMutableLocality().mergeFrom(other.internalGetLocality());
               this.bitField0_ |= 4;
               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           input.readMessage((MessageLite.Builder)this.getInfoFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           long v = input.readInt64();
                           this.ensureJobIdsIsMutable();
                           this.jobIds_.addLong(v);
                           break;
                        case 18:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           this.ensureJobIdsIsMutable();

                           while(input.getBytesUntilLimit() > 0) {
                              this.jobIds_.addLong(input.readInt64());
                           }

                           input.popLimit(limit);
                           break;
                        case 26:
                           MapEntry<String, Long> locality__ = (MapEntry)input.readMessage(StoreTypes.StageDataWrapper.LocalityDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableLocality().getMutableMap().put((String)locality__.getKey(), (Long)locality__.getValue());
                           this.bitField0_ |= 4;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasInfo() {
            return (this.bitField0_ & 1) != 0;
         }

         public StageData getInfo() {
            if (this.infoBuilder_ == null) {
               return this.info_ == null ? StoreTypes.StageData.getDefaultInstance() : this.info_;
            } else {
               return (StageData)this.infoBuilder_.getMessage();
            }
         }

         public Builder setInfo(StageData value) {
            if (this.infoBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.info_ = value;
            } else {
               this.infoBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder setInfo(StageData.Builder builderForValue) {
            if (this.infoBuilder_ == null) {
               this.info_ = builderForValue.build();
            } else {
               this.infoBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder mergeInfo(StageData value) {
            if (this.infoBuilder_ == null) {
               if ((this.bitField0_ & 1) != 0 && this.info_ != null && this.info_ != StoreTypes.StageData.getDefaultInstance()) {
                  this.getInfoBuilder().mergeFrom(value);
               } else {
                  this.info_ = value;
               }
            } else {
               this.infoBuilder_.mergeFrom(value);
            }

            if (this.info_ != null) {
               this.bitField0_ |= 1;
               this.onChanged();
            }

            return this;
         }

         public Builder clearInfo() {
            this.bitField0_ &= -2;
            this.info_ = null;
            if (this.infoBuilder_ != null) {
               this.infoBuilder_.dispose();
               this.infoBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public StageData.Builder getInfoBuilder() {
            this.bitField0_ |= 1;
            this.onChanged();
            return (StageData.Builder)this.getInfoFieldBuilder().getBuilder();
         }

         public StageDataOrBuilder getInfoOrBuilder() {
            if (this.infoBuilder_ != null) {
               return (StageDataOrBuilder)this.infoBuilder_.getMessageOrBuilder();
            } else {
               return this.info_ == null ? StoreTypes.StageData.getDefaultInstance() : this.info_;
            }
         }

         private SingleFieldBuilder getInfoFieldBuilder() {
            if (this.infoBuilder_ == null) {
               this.infoBuilder_ = new SingleFieldBuilder(this.getInfo(), this.getParentForChildren(), this.isClean());
               this.info_ = null;
            }

            return this.infoBuilder_;
         }

         private void ensureJobIdsIsMutable() {
            if (!this.jobIds_.isModifiable()) {
               this.jobIds_ = (Internal.LongList)StoreTypes.StageDataWrapper.makeMutableCopy(this.jobIds_);
            }

            this.bitField0_ |= 2;
         }

         public List getJobIdsList() {
            this.jobIds_.makeImmutable();
            return this.jobIds_;
         }

         public int getJobIdsCount() {
            return this.jobIds_.size();
         }

         public long getJobIds(int index) {
            return this.jobIds_.getLong(index);
         }

         public Builder setJobIds(int index, long value) {
            this.ensureJobIdsIsMutable();
            this.jobIds_.setLong(index, value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addJobIds(long value) {
            this.ensureJobIdsIsMutable();
            this.jobIds_.addLong(value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addAllJobIds(Iterable values) {
            this.ensureJobIdsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.jobIds_);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearJobIds() {
            this.jobIds_ = StoreTypes.StageDataWrapper.emptyLongList();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         private MapField internalGetLocality() {
            return this.locality_ == null ? MapField.emptyMapField(StoreTypes.StageDataWrapper.LocalityDefaultEntryHolder.defaultEntry) : this.locality_;
         }

         private MapField internalGetMutableLocality() {
            if (this.locality_ == null) {
               this.locality_ = MapField.newMapField(StoreTypes.StageDataWrapper.LocalityDefaultEntryHolder.defaultEntry);
            }

            if (!this.locality_.isMutable()) {
               this.locality_ = this.locality_.copy();
            }

            this.bitField0_ |= 4;
            this.onChanged();
            return this.locality_;
         }

         public int getLocalityCount() {
            return this.internalGetLocality().getMap().size();
         }

         public boolean containsLocality(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetLocality().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getLocality() {
            return this.getLocalityMap();
         }

         public Map getLocalityMap() {
            return this.internalGetLocality().getMap();
         }

         public long getLocalityOrDefault(String key, long defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Long> map = this.internalGetLocality().getMap();
               return map.containsKey(key) ? (Long)map.get(key) : defaultValue;
            }
         }

         public long getLocalityOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Long> map = this.internalGetLocality().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (Long)map.get(key);
               }
            }
         }

         public Builder clearLocality() {
            this.bitField0_ &= -5;
            this.internalGetMutableLocality().getMutableMap().clear();
            return this;
         }

         public Builder removeLocality(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableLocality().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableLocality() {
            this.bitField0_ |= 4;
            return this.internalGetMutableLocality().getMutableMap();
         }

         public Builder putLocality(String key, long value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableLocality().getMutableMap().put(key, value);
               this.bitField0_ |= 4;
               return this;
            }
         }

         public Builder putAllLocality(Map values) {
            this.internalGetMutableLocality().getMutableMap().putAll(values);
            this.bitField0_ |= 4;
            return this;
         }
      }
   }

   public static final class TaskData extends GeneratedMessage implements TaskDataOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int TASK_ID_FIELD_NUMBER = 1;
      private long taskId_ = 0L;
      public static final int INDEX_FIELD_NUMBER = 2;
      private int index_ = 0;
      public static final int ATTEMPT_FIELD_NUMBER = 3;
      private int attempt_ = 0;
      public static final int PARTITION_ID_FIELD_NUMBER = 4;
      private int partitionId_ = 0;
      public static final int LAUNCH_TIME_FIELD_NUMBER = 5;
      private long launchTime_ = 0L;
      public static final int RESULT_FETCH_START_FIELD_NUMBER = 6;
      private long resultFetchStart_ = 0L;
      public static final int DURATION_FIELD_NUMBER = 7;
      private long duration_ = 0L;
      public static final int EXECUTOR_ID_FIELD_NUMBER = 8;
      private volatile Object executorId_ = "";
      public static final int HOST_FIELD_NUMBER = 9;
      private volatile Object host_ = "";
      public static final int STATUS_FIELD_NUMBER = 10;
      private volatile Object status_ = "";
      public static final int TASK_LOCALITY_FIELD_NUMBER = 11;
      private volatile Object taskLocality_ = "";
      public static final int SPECULATIVE_FIELD_NUMBER = 12;
      private boolean speculative_ = false;
      public static final int ACCUMULATOR_UPDATES_FIELD_NUMBER = 13;
      private List accumulatorUpdates_;
      public static final int ERROR_MESSAGE_FIELD_NUMBER = 14;
      private volatile Object errorMessage_ = "";
      public static final int TASK_METRICS_FIELD_NUMBER = 15;
      private TaskMetrics taskMetrics_;
      public static final int EXECUTOR_LOGS_FIELD_NUMBER = 16;
      private MapField executorLogs_;
      public static final int SCHEDULER_DELAY_FIELD_NUMBER = 17;
      private long schedulerDelay_ = 0L;
      public static final int GETTING_RESULT_TIME_FIELD_NUMBER = 18;
      private long gettingResultTime_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final TaskData DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private TaskData(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private TaskData() {
         this.executorId_ = "";
         this.host_ = "";
         this.status_ = "";
         this.taskLocality_ = "";
         this.accumulatorUpdates_ = Collections.emptyList();
         this.errorMessage_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskData_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 16 -> {
               return this.internalGetExecutorLogs();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskData_fieldAccessorTable.ensureFieldAccessorsInitialized(TaskData.class, Builder.class);
      }

      public long getTaskId() {
         return this.taskId_;
      }

      public int getIndex() {
         return this.index_;
      }

      public int getAttempt() {
         return this.attempt_;
      }

      public int getPartitionId() {
         return this.partitionId_;
      }

      public long getLaunchTime() {
         return this.launchTime_;
      }

      public boolean hasResultFetchStart() {
         return (this.bitField0_ & 1) != 0;
      }

      public long getResultFetchStart() {
         return this.resultFetchStart_;
      }

      public boolean hasDuration() {
         return (this.bitField0_ & 2) != 0;
      }

      public long getDuration() {
         return this.duration_;
      }

      public boolean hasExecutorId() {
         return (this.bitField0_ & 4) != 0;
      }

      public String getExecutorId() {
         Object ref = this.executorId_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.executorId_ = s;
            return s;
         }
      }

      public ByteString getExecutorIdBytes() {
         Object ref = this.executorId_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.executorId_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasHost() {
         return (this.bitField0_ & 8) != 0;
      }

      public String getHost() {
         Object ref = this.host_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.host_ = s;
            return s;
         }
      }

      public ByteString getHostBytes() {
         Object ref = this.host_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.host_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasStatus() {
         return (this.bitField0_ & 16) != 0;
      }

      public String getStatus() {
         Object ref = this.status_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.status_ = s;
            return s;
         }
      }

      public ByteString getStatusBytes() {
         Object ref = this.status_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.status_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasTaskLocality() {
         return (this.bitField0_ & 32) != 0;
      }

      public String getTaskLocality() {
         Object ref = this.taskLocality_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.taskLocality_ = s;
            return s;
         }
      }

      public ByteString getTaskLocalityBytes() {
         Object ref = this.taskLocality_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.taskLocality_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean getSpeculative() {
         return this.speculative_;
      }

      public List getAccumulatorUpdatesList() {
         return this.accumulatorUpdates_;
      }

      public List getAccumulatorUpdatesOrBuilderList() {
         return this.accumulatorUpdates_;
      }

      public int getAccumulatorUpdatesCount() {
         return this.accumulatorUpdates_.size();
      }

      public AccumulableInfo getAccumulatorUpdates(int index) {
         return (AccumulableInfo)this.accumulatorUpdates_.get(index);
      }

      public AccumulableInfoOrBuilder getAccumulatorUpdatesOrBuilder(int index) {
         return (AccumulableInfoOrBuilder)this.accumulatorUpdates_.get(index);
      }

      public boolean hasErrorMessage() {
         return (this.bitField0_ & 64) != 0;
      }

      public String getErrorMessage() {
         Object ref = this.errorMessage_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.errorMessage_ = s;
            return s;
         }
      }

      public ByteString getErrorMessageBytes() {
         Object ref = this.errorMessage_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.errorMessage_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasTaskMetrics() {
         return (this.bitField0_ & 128) != 0;
      }

      public TaskMetrics getTaskMetrics() {
         return this.taskMetrics_ == null ? StoreTypes.TaskMetrics.getDefaultInstance() : this.taskMetrics_;
      }

      public TaskMetricsOrBuilder getTaskMetricsOrBuilder() {
         return this.taskMetrics_ == null ? StoreTypes.TaskMetrics.getDefaultInstance() : this.taskMetrics_;
      }

      private MapField internalGetExecutorLogs() {
         return this.executorLogs_ == null ? MapField.emptyMapField(StoreTypes.TaskData.ExecutorLogsDefaultEntryHolder.defaultEntry) : this.executorLogs_;
      }

      public int getExecutorLogsCount() {
         return this.internalGetExecutorLogs().getMap().size();
      }

      public boolean containsExecutorLogs(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetExecutorLogs().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getExecutorLogs() {
         return this.getExecutorLogsMap();
      }

      public Map getExecutorLogsMap() {
         return this.internalGetExecutorLogs().getMap();
      }

      public String getExecutorLogsOrDefault(String key, String defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetExecutorLogs().getMap();
            return map.containsKey(key) ? (String)map.get(key) : defaultValue;
         }
      }

      public String getExecutorLogsOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetExecutorLogs().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (String)map.get(key);
            }
         }
      }

      public long getSchedulerDelay() {
         return this.schedulerDelay_;
      }

      public long getGettingResultTime() {
         return this.gettingResultTime_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.taskId_ != 0L) {
            output.writeInt64(1, this.taskId_);
         }

         if (this.index_ != 0) {
            output.writeInt32(2, this.index_);
         }

         if (this.attempt_ != 0) {
            output.writeInt32(3, this.attempt_);
         }

         if (this.partitionId_ != 0) {
            output.writeInt32(4, this.partitionId_);
         }

         if (this.launchTime_ != 0L) {
            output.writeInt64(5, this.launchTime_);
         }

         if ((this.bitField0_ & 1) != 0) {
            output.writeInt64(6, this.resultFetchStart_);
         }

         if ((this.bitField0_ & 2) != 0) {
            output.writeInt64(7, this.duration_);
         }

         if ((this.bitField0_ & 4) != 0) {
            GeneratedMessage.writeString(output, 8, this.executorId_);
         }

         if ((this.bitField0_ & 8) != 0) {
            GeneratedMessage.writeString(output, 9, this.host_);
         }

         if ((this.bitField0_ & 16) != 0) {
            GeneratedMessage.writeString(output, 10, this.status_);
         }

         if ((this.bitField0_ & 32) != 0) {
            GeneratedMessage.writeString(output, 11, this.taskLocality_);
         }

         if (this.speculative_) {
            output.writeBool(12, this.speculative_);
         }

         for(int i = 0; i < this.accumulatorUpdates_.size(); ++i) {
            output.writeMessage(13, (MessageLite)this.accumulatorUpdates_.get(i));
         }

         if ((this.bitField0_ & 64) != 0) {
            GeneratedMessage.writeString(output, 14, this.errorMessage_);
         }

         if ((this.bitField0_ & 128) != 0) {
            output.writeMessage(15, this.getTaskMetrics());
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetExecutorLogs(), StoreTypes.TaskData.ExecutorLogsDefaultEntryHolder.defaultEntry, 16);
         if (this.schedulerDelay_ != 0L) {
            output.writeInt64(17, this.schedulerDelay_);
         }

         if (this.gettingResultTime_ != 0L) {
            output.writeInt64(18, this.gettingResultTime_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.taskId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.taskId_);
            }

            if (this.index_ != 0) {
               size += CodedOutputStream.computeInt32Size(2, this.index_);
            }

            if (this.attempt_ != 0) {
               size += CodedOutputStream.computeInt32Size(3, this.attempt_);
            }

            if (this.partitionId_ != 0) {
               size += CodedOutputStream.computeInt32Size(4, this.partitionId_);
            }

            if (this.launchTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.launchTime_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeInt64Size(6, this.resultFetchStart_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += CodedOutputStream.computeInt64Size(7, this.duration_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += GeneratedMessage.computeStringSize(8, this.executorId_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += GeneratedMessage.computeStringSize(9, this.host_);
            }

            if ((this.bitField0_ & 16) != 0) {
               size += GeneratedMessage.computeStringSize(10, this.status_);
            }

            if ((this.bitField0_ & 32) != 0) {
               size += GeneratedMessage.computeStringSize(11, this.taskLocality_);
            }

            if (this.speculative_) {
               size += CodedOutputStream.computeBoolSize(12, this.speculative_);
            }

            for(int i = 0; i < this.accumulatorUpdates_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(13, (MessageLite)this.accumulatorUpdates_.get(i));
            }

            if ((this.bitField0_ & 64) != 0) {
               size += GeneratedMessage.computeStringSize(14, this.errorMessage_);
            }

            if ((this.bitField0_ & 128) != 0) {
               size += CodedOutputStream.computeMessageSize(15, this.getTaskMetrics());
            }

            for(Map.Entry entry : this.internalGetExecutorLogs().getMap().entrySet()) {
               MapEntry<String, String> executorLogs__ = StoreTypes.TaskData.ExecutorLogsDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((String)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(16, executorLogs__);
            }

            if (this.schedulerDelay_ != 0L) {
               size += CodedOutputStream.computeInt64Size(17, this.schedulerDelay_);
            }

            if (this.gettingResultTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(18, this.gettingResultTime_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof TaskData)) {
            return super.equals(obj);
         } else {
            TaskData other = (TaskData)obj;
            if (this.getTaskId() != other.getTaskId()) {
               return false;
            } else if (this.getIndex() != other.getIndex()) {
               return false;
            } else if (this.getAttempt() != other.getAttempt()) {
               return false;
            } else if (this.getPartitionId() != other.getPartitionId()) {
               return false;
            } else if (this.getLaunchTime() != other.getLaunchTime()) {
               return false;
            } else if (this.hasResultFetchStart() != other.hasResultFetchStart()) {
               return false;
            } else if (this.hasResultFetchStart() && this.getResultFetchStart() != other.getResultFetchStart()) {
               return false;
            } else if (this.hasDuration() != other.hasDuration()) {
               return false;
            } else if (this.hasDuration() && this.getDuration() != other.getDuration()) {
               return false;
            } else if (this.hasExecutorId() != other.hasExecutorId()) {
               return false;
            } else if (this.hasExecutorId() && !this.getExecutorId().equals(other.getExecutorId())) {
               return false;
            } else if (this.hasHost() != other.hasHost()) {
               return false;
            } else if (this.hasHost() && !this.getHost().equals(other.getHost())) {
               return false;
            } else if (this.hasStatus() != other.hasStatus()) {
               return false;
            } else if (this.hasStatus() && !this.getStatus().equals(other.getStatus())) {
               return false;
            } else if (this.hasTaskLocality() != other.hasTaskLocality()) {
               return false;
            } else if (this.hasTaskLocality() && !this.getTaskLocality().equals(other.getTaskLocality())) {
               return false;
            } else if (this.getSpeculative() != other.getSpeculative()) {
               return false;
            } else if (!this.getAccumulatorUpdatesList().equals(other.getAccumulatorUpdatesList())) {
               return false;
            } else if (this.hasErrorMessage() != other.hasErrorMessage()) {
               return false;
            } else if (this.hasErrorMessage() && !this.getErrorMessage().equals(other.getErrorMessage())) {
               return false;
            } else if (this.hasTaskMetrics() != other.hasTaskMetrics()) {
               return false;
            } else if (this.hasTaskMetrics() && !this.getTaskMetrics().equals(other.getTaskMetrics())) {
               return false;
            } else if (!this.internalGetExecutorLogs().equals(other.internalGetExecutorLogs())) {
               return false;
            } else if (this.getSchedulerDelay() != other.getSchedulerDelay()) {
               return false;
            } else if (this.getGettingResultTime() != other.getGettingResultTime()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getTaskId());
            hash = 37 * hash + 2;
            hash = 53 * hash + this.getIndex();
            hash = 37 * hash + 3;
            hash = 53 * hash + this.getAttempt();
            hash = 37 * hash + 4;
            hash = 53 * hash + this.getPartitionId();
            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getLaunchTime());
            if (this.hasResultFetchStart()) {
               hash = 37 * hash + 6;
               hash = 53 * hash + Internal.hashLong(this.getResultFetchStart());
            }

            if (this.hasDuration()) {
               hash = 37 * hash + 7;
               hash = 53 * hash + Internal.hashLong(this.getDuration());
            }

            if (this.hasExecutorId()) {
               hash = 37 * hash + 8;
               hash = 53 * hash + this.getExecutorId().hashCode();
            }

            if (this.hasHost()) {
               hash = 37 * hash + 9;
               hash = 53 * hash + this.getHost().hashCode();
            }

            if (this.hasStatus()) {
               hash = 37 * hash + 10;
               hash = 53 * hash + this.getStatus().hashCode();
            }

            if (this.hasTaskLocality()) {
               hash = 37 * hash + 11;
               hash = 53 * hash + this.getTaskLocality().hashCode();
            }

            hash = 37 * hash + 12;
            hash = 53 * hash + Internal.hashBoolean(this.getSpeculative());
            if (this.getAccumulatorUpdatesCount() > 0) {
               hash = 37 * hash + 13;
               hash = 53 * hash + this.getAccumulatorUpdatesList().hashCode();
            }

            if (this.hasErrorMessage()) {
               hash = 37 * hash + 14;
               hash = 53 * hash + this.getErrorMessage().hashCode();
            }

            if (this.hasTaskMetrics()) {
               hash = 37 * hash + 15;
               hash = 53 * hash + this.getTaskMetrics().hashCode();
            }

            if (!this.internalGetExecutorLogs().getMap().isEmpty()) {
               hash = 37 * hash + 16;
               hash = 53 * hash + this.internalGetExecutorLogs().hashCode();
            }

            hash = 37 * hash + 17;
            hash = 53 * hash + Internal.hashLong(this.getSchedulerDelay());
            hash = 37 * hash + 18;
            hash = 53 * hash + Internal.hashLong(this.getGettingResultTime());
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static TaskData parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (TaskData)PARSER.parseFrom(data);
      }

      public static TaskData parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskData parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (TaskData)PARSER.parseFrom(data);
      }

      public static TaskData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskData parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (TaskData)PARSER.parseFrom(data);
      }

      public static TaskData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskData parseFrom(InputStream input) throws IOException {
         return (TaskData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static TaskData parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static TaskData parseDelimitedFrom(InputStream input) throws IOException {
         return (TaskData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static TaskData parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static TaskData parseFrom(CodedInputStream input) throws IOException {
         return (TaskData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static TaskData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(TaskData prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static TaskData getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public TaskData getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", TaskData.class.getName());
         DEFAULT_INSTANCE = new TaskData();
         PARSER = new AbstractParser() {
            public TaskData parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.TaskData.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      private static final class ExecutorLogsDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskData_ExecutorLogsEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.STRING, "");
         }
      }

      public static final class Builder extends GeneratedMessage.Builder implements TaskDataOrBuilder {
         private int bitField0_;
         private long taskId_;
         private int index_;
         private int attempt_;
         private int partitionId_;
         private long launchTime_;
         private long resultFetchStart_;
         private long duration_;
         private Object executorId_ = "";
         private Object host_ = "";
         private Object status_ = "";
         private Object taskLocality_ = "";
         private boolean speculative_;
         private List accumulatorUpdates_ = Collections.emptyList();
         private RepeatedFieldBuilder accumulatorUpdatesBuilder_;
         private Object errorMessage_ = "";
         private TaskMetrics taskMetrics_;
         private SingleFieldBuilder taskMetricsBuilder_;
         private MapField executorLogs_;
         private long schedulerDelay_;
         private long gettingResultTime_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskData_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 16 -> {
                  return this.internalGetExecutorLogs();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 16 -> {
                  return this.internalGetMutableExecutorLogs();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskData_fieldAccessorTable.ensureFieldAccessorsInitialized(TaskData.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.TaskData.alwaysUseFieldBuilders) {
               this.getAccumulatorUpdatesFieldBuilder();
               this.getTaskMetricsFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.taskId_ = 0L;
            this.index_ = 0;
            this.attempt_ = 0;
            this.partitionId_ = 0;
            this.launchTime_ = 0L;
            this.resultFetchStart_ = 0L;
            this.duration_ = 0L;
            this.executorId_ = "";
            this.host_ = "";
            this.status_ = "";
            this.taskLocality_ = "";
            this.speculative_ = false;
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.accumulatorUpdates_ = Collections.emptyList();
            } else {
               this.accumulatorUpdates_ = null;
               this.accumulatorUpdatesBuilder_.clear();
            }

            this.bitField0_ &= -4097;
            this.errorMessage_ = "";
            this.taskMetrics_ = null;
            if (this.taskMetricsBuilder_ != null) {
               this.taskMetricsBuilder_.dispose();
               this.taskMetricsBuilder_ = null;
            }

            this.internalGetMutableExecutorLogs().clear();
            this.schedulerDelay_ = 0L;
            this.gettingResultTime_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskData_descriptor;
         }

         public TaskData getDefaultInstanceForType() {
            return StoreTypes.TaskData.getDefaultInstance();
         }

         public TaskData build() {
            TaskData result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public TaskData buildPartial() {
            TaskData result = new TaskData(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(TaskData result) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if ((this.bitField0_ & 4096) != 0) {
                  this.accumulatorUpdates_ = Collections.unmodifiableList(this.accumulatorUpdates_);
                  this.bitField0_ &= -4097;
               }

               result.accumulatorUpdates_ = this.accumulatorUpdates_;
            } else {
               result.accumulatorUpdates_ = this.accumulatorUpdatesBuilder_.build();
            }

         }

         private void buildPartial0(TaskData result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.taskId_ = this.taskId_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.index_ = this.index_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.attempt_ = this.attempt_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.partitionId_ = this.partitionId_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.launchTime_ = this.launchTime_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 32) != 0) {
               result.resultFetchStart_ = this.resultFetchStart_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.duration_ = this.duration_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.executorId_ = this.executorId_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.host_ = this.host_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 512) != 0) {
               result.status_ = this.status_;
               to_bitField0_ |= 16;
            }

            if ((from_bitField0_ & 1024) != 0) {
               result.taskLocality_ = this.taskLocality_;
               to_bitField0_ |= 32;
            }

            if ((from_bitField0_ & 2048) != 0) {
               result.speculative_ = this.speculative_;
            }

            if ((from_bitField0_ & 8192) != 0) {
               result.errorMessage_ = this.errorMessage_;
               to_bitField0_ |= 64;
            }

            if ((from_bitField0_ & 16384) != 0) {
               result.taskMetrics_ = this.taskMetricsBuilder_ == null ? this.taskMetrics_ : (TaskMetrics)this.taskMetricsBuilder_.build();
               to_bitField0_ |= 128;
            }

            if ((from_bitField0_ & '耀') != 0) {
               result.executorLogs_ = this.internalGetExecutorLogs();
               result.executorLogs_.makeImmutable();
            }

            if ((from_bitField0_ & 65536) != 0) {
               result.schedulerDelay_ = this.schedulerDelay_;
            }

            if ((from_bitField0_ & 131072) != 0) {
               result.gettingResultTime_ = this.gettingResultTime_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof TaskData) {
               return this.mergeFrom((TaskData)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(TaskData other) {
            if (other == StoreTypes.TaskData.getDefaultInstance()) {
               return this;
            } else {
               if (other.getTaskId() != 0L) {
                  this.setTaskId(other.getTaskId());
               }

               if (other.getIndex() != 0) {
                  this.setIndex(other.getIndex());
               }

               if (other.getAttempt() != 0) {
                  this.setAttempt(other.getAttempt());
               }

               if (other.getPartitionId() != 0) {
                  this.setPartitionId(other.getPartitionId());
               }

               if (other.getLaunchTime() != 0L) {
                  this.setLaunchTime(other.getLaunchTime());
               }

               if (other.hasResultFetchStart()) {
                  this.setResultFetchStart(other.getResultFetchStart());
               }

               if (other.hasDuration()) {
                  this.setDuration(other.getDuration());
               }

               if (other.hasExecutorId()) {
                  this.executorId_ = other.executorId_;
                  this.bitField0_ |= 128;
                  this.onChanged();
               }

               if (other.hasHost()) {
                  this.host_ = other.host_;
                  this.bitField0_ |= 256;
                  this.onChanged();
               }

               if (other.hasStatus()) {
                  this.status_ = other.status_;
                  this.bitField0_ |= 512;
                  this.onChanged();
               }

               if (other.hasTaskLocality()) {
                  this.taskLocality_ = other.taskLocality_;
                  this.bitField0_ |= 1024;
                  this.onChanged();
               }

               if (other.getSpeculative()) {
                  this.setSpeculative(other.getSpeculative());
               }

               if (this.accumulatorUpdatesBuilder_ == null) {
                  if (!other.accumulatorUpdates_.isEmpty()) {
                     if (this.accumulatorUpdates_.isEmpty()) {
                        this.accumulatorUpdates_ = other.accumulatorUpdates_;
                        this.bitField0_ &= -4097;
                     } else {
                        this.ensureAccumulatorUpdatesIsMutable();
                        this.accumulatorUpdates_.addAll(other.accumulatorUpdates_);
                     }

                     this.onChanged();
                  }
               } else if (!other.accumulatorUpdates_.isEmpty()) {
                  if (this.accumulatorUpdatesBuilder_.isEmpty()) {
                     this.accumulatorUpdatesBuilder_.dispose();
                     this.accumulatorUpdatesBuilder_ = null;
                     this.accumulatorUpdates_ = other.accumulatorUpdates_;
                     this.bitField0_ &= -4097;
                     this.accumulatorUpdatesBuilder_ = StoreTypes.TaskData.alwaysUseFieldBuilders ? this.getAccumulatorUpdatesFieldBuilder() : null;
                  } else {
                     this.accumulatorUpdatesBuilder_.addAllMessages(other.accumulatorUpdates_);
                  }
               }

               if (other.hasErrorMessage()) {
                  this.errorMessage_ = other.errorMessage_;
                  this.bitField0_ |= 8192;
                  this.onChanged();
               }

               if (other.hasTaskMetrics()) {
                  this.mergeTaskMetrics(other.getTaskMetrics());
               }

               this.internalGetMutableExecutorLogs().mergeFrom(other.internalGetExecutorLogs());
               this.bitField0_ |= 32768;
               if (other.getSchedulerDelay() != 0L) {
                  this.setSchedulerDelay(other.getSchedulerDelay());
               }

               if (other.getGettingResultTime() != 0L) {
                  this.setGettingResultTime(other.getGettingResultTime());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.taskId_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.index_ = input.readInt32();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.attempt_ = input.readInt32();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.partitionId_ = input.readInt32();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.launchTime_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.resultFetchStart_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.duration_ = input.readInt64();
                           this.bitField0_ |= 64;
                           break;
                        case 66:
                           this.executorId_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 128;
                           break;
                        case 74:
                           this.host_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 256;
                           break;
                        case 82:
                           this.status_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 512;
                           break;
                        case 90:
                           this.taskLocality_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1024;
                           break;
                        case 96:
                           this.speculative_ = input.readBool();
                           this.bitField0_ |= 2048;
                           break;
                        case 106:
                           AccumulableInfo m = (AccumulableInfo)input.readMessage(StoreTypes.AccumulableInfo.parser(), extensionRegistry);
                           if (this.accumulatorUpdatesBuilder_ == null) {
                              this.ensureAccumulatorUpdatesIsMutable();
                              this.accumulatorUpdates_.add(m);
                           } else {
                              this.accumulatorUpdatesBuilder_.addMessage(m);
                           }
                           break;
                        case 114:
                           this.errorMessage_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 8192;
                           break;
                        case 122:
                           input.readMessage((MessageLite.Builder)this.getTaskMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 16384;
                           break;
                        case 130:
                           MapEntry<String, String> executorLogs__ = (MapEntry)input.readMessage(StoreTypes.TaskData.ExecutorLogsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableExecutorLogs().getMutableMap().put((String)executorLogs__.getKey(), (String)executorLogs__.getValue());
                           this.bitField0_ |= 32768;
                           break;
                        case 136:
                           this.schedulerDelay_ = input.readInt64();
                           this.bitField0_ |= 65536;
                           break;
                        case 144:
                           this.gettingResultTime_ = input.readInt64();
                           this.bitField0_ |= 131072;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getTaskId() {
            return this.taskId_;
         }

         public Builder setTaskId(long value) {
            this.taskId_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearTaskId() {
            this.bitField0_ &= -2;
            this.taskId_ = 0L;
            this.onChanged();
            return this;
         }

         public int getIndex() {
            return this.index_;
         }

         public Builder setIndex(int value) {
            this.index_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearIndex() {
            this.bitField0_ &= -3;
            this.index_ = 0;
            this.onChanged();
            return this;
         }

         public int getAttempt() {
            return this.attempt_;
         }

         public Builder setAttempt(int value) {
            this.attempt_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearAttempt() {
            this.bitField0_ &= -5;
            this.attempt_ = 0;
            this.onChanged();
            return this;
         }

         public int getPartitionId() {
            return this.partitionId_;
         }

         public Builder setPartitionId(int value) {
            this.partitionId_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearPartitionId() {
            this.bitField0_ &= -9;
            this.partitionId_ = 0;
            this.onChanged();
            return this;
         }

         public long getLaunchTime() {
            return this.launchTime_;
         }

         public Builder setLaunchTime(long value) {
            this.launchTime_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearLaunchTime() {
            this.bitField0_ &= -17;
            this.launchTime_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasResultFetchStart() {
            return (this.bitField0_ & 32) != 0;
         }

         public long getResultFetchStart() {
            return this.resultFetchStart_;
         }

         public Builder setResultFetchStart(long value) {
            this.resultFetchStart_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearResultFetchStart() {
            this.bitField0_ &= -33;
            this.resultFetchStart_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasDuration() {
            return (this.bitField0_ & 64) != 0;
         }

         public long getDuration() {
            return this.duration_;
         }

         public Builder setDuration(long value) {
            this.duration_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearDuration() {
            this.bitField0_ &= -65;
            this.duration_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasExecutorId() {
            return (this.bitField0_ & 128) != 0;
         }

         public String getExecutorId() {
            Object ref = this.executorId_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.executorId_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getExecutorIdBytes() {
            Object ref = this.executorId_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.executorId_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setExecutorId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.executorId_ = value;
               this.bitField0_ |= 128;
               this.onChanged();
               return this;
            }
         }

         public Builder clearExecutorId() {
            this.executorId_ = StoreTypes.TaskData.getDefaultInstance().getExecutorId();
            this.bitField0_ &= -129;
            this.onChanged();
            return this;
         }

         public Builder setExecutorIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.TaskData.checkByteStringIsUtf8(value);
               this.executorId_ = value;
               this.bitField0_ |= 128;
               this.onChanged();
               return this;
            }
         }

         public boolean hasHost() {
            return (this.bitField0_ & 256) != 0;
         }

         public String getHost() {
            Object ref = this.host_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.host_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getHostBytes() {
            Object ref = this.host_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.host_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setHost(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.host_ = value;
               this.bitField0_ |= 256;
               this.onChanged();
               return this;
            }
         }

         public Builder clearHost() {
            this.host_ = StoreTypes.TaskData.getDefaultInstance().getHost();
            this.bitField0_ &= -257;
            this.onChanged();
            return this;
         }

         public Builder setHostBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.TaskData.checkByteStringIsUtf8(value);
               this.host_ = value;
               this.bitField0_ |= 256;
               this.onChanged();
               return this;
            }
         }

         public boolean hasStatus() {
            return (this.bitField0_ & 512) != 0;
         }

         public String getStatus() {
            Object ref = this.status_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.status_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getStatusBytes() {
            Object ref = this.status_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.status_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setStatus(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.status_ = value;
               this.bitField0_ |= 512;
               this.onChanged();
               return this;
            }
         }

         public Builder clearStatus() {
            this.status_ = StoreTypes.TaskData.getDefaultInstance().getStatus();
            this.bitField0_ &= -513;
            this.onChanged();
            return this;
         }

         public Builder setStatusBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.TaskData.checkByteStringIsUtf8(value);
               this.status_ = value;
               this.bitField0_ |= 512;
               this.onChanged();
               return this;
            }
         }

         public boolean hasTaskLocality() {
            return (this.bitField0_ & 1024) != 0;
         }

         public String getTaskLocality() {
            Object ref = this.taskLocality_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.taskLocality_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getTaskLocalityBytes() {
            Object ref = this.taskLocality_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.taskLocality_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setTaskLocality(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.taskLocality_ = value;
               this.bitField0_ |= 1024;
               this.onChanged();
               return this;
            }
         }

         public Builder clearTaskLocality() {
            this.taskLocality_ = StoreTypes.TaskData.getDefaultInstance().getTaskLocality();
            this.bitField0_ &= -1025;
            this.onChanged();
            return this;
         }

         public Builder setTaskLocalityBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.TaskData.checkByteStringIsUtf8(value);
               this.taskLocality_ = value;
               this.bitField0_ |= 1024;
               this.onChanged();
               return this;
            }
         }

         public boolean getSpeculative() {
            return this.speculative_;
         }

         public Builder setSpeculative(boolean value) {
            this.speculative_ = value;
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder clearSpeculative() {
            this.bitField0_ &= -2049;
            this.speculative_ = false;
            this.onChanged();
            return this;
         }

         private void ensureAccumulatorUpdatesIsMutable() {
            if ((this.bitField0_ & 4096) == 0) {
               this.accumulatorUpdates_ = new ArrayList(this.accumulatorUpdates_);
               this.bitField0_ |= 4096;
            }

         }

         public List getAccumulatorUpdatesList() {
            return this.accumulatorUpdatesBuilder_ == null ? Collections.unmodifiableList(this.accumulatorUpdates_) : this.accumulatorUpdatesBuilder_.getMessageList();
         }

         public int getAccumulatorUpdatesCount() {
            return this.accumulatorUpdatesBuilder_ == null ? this.accumulatorUpdates_.size() : this.accumulatorUpdatesBuilder_.getCount();
         }

         public AccumulableInfo getAccumulatorUpdates(int index) {
            return this.accumulatorUpdatesBuilder_ == null ? (AccumulableInfo)this.accumulatorUpdates_.get(index) : (AccumulableInfo)this.accumulatorUpdatesBuilder_.getMessage(index);
         }

         public Builder setAccumulatorUpdates(int index, AccumulableInfo value) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.set(index, value);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setAccumulatorUpdates(int index, AccumulableInfo.Builder builderForValue) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAccumulatorUpdates(AccumulableInfo value) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(value);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addAccumulatorUpdates(int index, AccumulableInfo value) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(index, value);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addAccumulatorUpdates(AccumulableInfo.Builder builderForValue) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addAccumulatorUpdates(int index, AccumulableInfo.Builder builderForValue) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllAccumulatorUpdates(Iterable values) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.accumulatorUpdates_);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearAccumulatorUpdates() {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.accumulatorUpdates_ = Collections.emptyList();
               this.bitField0_ &= -4097;
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.clear();
            }

            return this;
         }

         public Builder removeAccumulatorUpdates(int index) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.remove(index);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.remove(index);
            }

            return this;
         }

         public AccumulableInfo.Builder getAccumulatorUpdatesBuilder(int index) {
            return (AccumulableInfo.Builder)this.getAccumulatorUpdatesFieldBuilder().getBuilder(index);
         }

         public AccumulableInfoOrBuilder getAccumulatorUpdatesOrBuilder(int index) {
            return this.accumulatorUpdatesBuilder_ == null ? (AccumulableInfoOrBuilder)this.accumulatorUpdates_.get(index) : (AccumulableInfoOrBuilder)this.accumulatorUpdatesBuilder_.getMessageOrBuilder(index);
         }

         public List getAccumulatorUpdatesOrBuilderList() {
            return this.accumulatorUpdatesBuilder_ != null ? this.accumulatorUpdatesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.accumulatorUpdates_);
         }

         public AccumulableInfo.Builder addAccumulatorUpdatesBuilder() {
            return (AccumulableInfo.Builder)this.getAccumulatorUpdatesFieldBuilder().addBuilder(StoreTypes.AccumulableInfo.getDefaultInstance());
         }

         public AccumulableInfo.Builder addAccumulatorUpdatesBuilder(int index) {
            return (AccumulableInfo.Builder)this.getAccumulatorUpdatesFieldBuilder().addBuilder(index, StoreTypes.AccumulableInfo.getDefaultInstance());
         }

         public List getAccumulatorUpdatesBuilderList() {
            return this.getAccumulatorUpdatesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getAccumulatorUpdatesFieldBuilder() {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.accumulatorUpdatesBuilder_ = new RepeatedFieldBuilder(this.accumulatorUpdates_, (this.bitField0_ & 4096) != 0, this.getParentForChildren(), this.isClean());
               this.accumulatorUpdates_ = null;
            }

            return this.accumulatorUpdatesBuilder_;
         }

         public boolean hasErrorMessage() {
            return (this.bitField0_ & 8192) != 0;
         }

         public String getErrorMessage() {
            Object ref = this.errorMessage_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.errorMessage_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getErrorMessageBytes() {
            Object ref = this.errorMessage_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.errorMessage_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setErrorMessage(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.errorMessage_ = value;
               this.bitField0_ |= 8192;
               this.onChanged();
               return this;
            }
         }

         public Builder clearErrorMessage() {
            this.errorMessage_ = StoreTypes.TaskData.getDefaultInstance().getErrorMessage();
            this.bitField0_ &= -8193;
            this.onChanged();
            return this;
         }

         public Builder setErrorMessageBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.TaskData.checkByteStringIsUtf8(value);
               this.errorMessage_ = value;
               this.bitField0_ |= 8192;
               this.onChanged();
               return this;
            }
         }

         public boolean hasTaskMetrics() {
            return (this.bitField0_ & 16384) != 0;
         }

         public TaskMetrics getTaskMetrics() {
            if (this.taskMetricsBuilder_ == null) {
               return this.taskMetrics_ == null ? StoreTypes.TaskMetrics.getDefaultInstance() : this.taskMetrics_;
            } else {
               return (TaskMetrics)this.taskMetricsBuilder_.getMessage();
            }
         }

         public Builder setTaskMetrics(TaskMetrics value) {
            if (this.taskMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.taskMetrics_ = value;
            } else {
               this.taskMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder setTaskMetrics(TaskMetrics.Builder builderForValue) {
            if (this.taskMetricsBuilder_ == null) {
               this.taskMetrics_ = builderForValue.build();
            } else {
               this.taskMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder mergeTaskMetrics(TaskMetrics value) {
            if (this.taskMetricsBuilder_ == null) {
               if ((this.bitField0_ & 16384) != 0 && this.taskMetrics_ != null && this.taskMetrics_ != StoreTypes.TaskMetrics.getDefaultInstance()) {
                  this.getTaskMetricsBuilder().mergeFrom(value);
               } else {
                  this.taskMetrics_ = value;
               }
            } else {
               this.taskMetricsBuilder_.mergeFrom(value);
            }

            if (this.taskMetrics_ != null) {
               this.bitField0_ |= 16384;
               this.onChanged();
            }

            return this;
         }

         public Builder clearTaskMetrics() {
            this.bitField0_ &= -16385;
            this.taskMetrics_ = null;
            if (this.taskMetricsBuilder_ != null) {
               this.taskMetricsBuilder_.dispose();
               this.taskMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public TaskMetrics.Builder getTaskMetricsBuilder() {
            this.bitField0_ |= 16384;
            this.onChanged();
            return (TaskMetrics.Builder)this.getTaskMetricsFieldBuilder().getBuilder();
         }

         public TaskMetricsOrBuilder getTaskMetricsOrBuilder() {
            if (this.taskMetricsBuilder_ != null) {
               return (TaskMetricsOrBuilder)this.taskMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.taskMetrics_ == null ? StoreTypes.TaskMetrics.getDefaultInstance() : this.taskMetrics_;
            }
         }

         private SingleFieldBuilder getTaskMetricsFieldBuilder() {
            if (this.taskMetricsBuilder_ == null) {
               this.taskMetricsBuilder_ = new SingleFieldBuilder(this.getTaskMetrics(), this.getParentForChildren(), this.isClean());
               this.taskMetrics_ = null;
            }

            return this.taskMetricsBuilder_;
         }

         private MapField internalGetExecutorLogs() {
            return this.executorLogs_ == null ? MapField.emptyMapField(StoreTypes.TaskData.ExecutorLogsDefaultEntryHolder.defaultEntry) : this.executorLogs_;
         }

         private MapField internalGetMutableExecutorLogs() {
            if (this.executorLogs_ == null) {
               this.executorLogs_ = MapField.newMapField(StoreTypes.TaskData.ExecutorLogsDefaultEntryHolder.defaultEntry);
            }

            if (!this.executorLogs_.isMutable()) {
               this.executorLogs_ = this.executorLogs_.copy();
            }

            this.bitField0_ |= 32768;
            this.onChanged();
            return this.executorLogs_;
         }

         public int getExecutorLogsCount() {
            return this.internalGetExecutorLogs().getMap().size();
         }

         public boolean containsExecutorLogs(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetExecutorLogs().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getExecutorLogs() {
            return this.getExecutorLogsMap();
         }

         public Map getExecutorLogsMap() {
            return this.internalGetExecutorLogs().getMap();
         }

         public String getExecutorLogsOrDefault(String key, String defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetExecutorLogs().getMap();
               return map.containsKey(key) ? (String)map.get(key) : defaultValue;
            }
         }

         public String getExecutorLogsOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetExecutorLogs().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (String)map.get(key);
               }
            }
         }

         public Builder clearExecutorLogs() {
            this.bitField0_ &= -32769;
            this.internalGetMutableExecutorLogs().getMutableMap().clear();
            return this;
         }

         public Builder removeExecutorLogs(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableExecutorLogs().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableExecutorLogs() {
            this.bitField0_ |= 32768;
            return this.internalGetMutableExecutorLogs().getMutableMap();
         }

         public Builder putExecutorLogs(String key, String value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableExecutorLogs().getMutableMap().put(key, value);
               this.bitField0_ |= 32768;
               return this;
            }
         }

         public Builder putAllExecutorLogs(Map values) {
            this.internalGetMutableExecutorLogs().getMutableMap().putAll(values);
            this.bitField0_ |= 32768;
            return this;
         }

         public long getSchedulerDelay() {
            return this.schedulerDelay_;
         }

         public Builder setSchedulerDelay(long value) {
            this.schedulerDelay_ = value;
            this.bitField0_ |= 65536;
            this.onChanged();
            return this;
         }

         public Builder clearSchedulerDelay() {
            this.bitField0_ &= -65537;
            this.schedulerDelay_ = 0L;
            this.onChanged();
            return this;
         }

         public long getGettingResultTime() {
            return this.gettingResultTime_;
         }

         public Builder setGettingResultTime(long value) {
            this.gettingResultTime_ = value;
            this.bitField0_ |= 131072;
            this.onChanged();
            return this;
         }

         public Builder clearGettingResultTime() {
            this.bitField0_ &= -131073;
            this.gettingResultTime_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public static final class StageData extends GeneratedMessage implements StageDataOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int STATUS_FIELD_NUMBER = 1;
      private int status_ = 0;
      public static final int STAGE_ID_FIELD_NUMBER = 2;
      private long stageId_ = 0L;
      public static final int ATTEMPT_ID_FIELD_NUMBER = 3;
      private int attemptId_ = 0;
      public static final int NUM_TASKS_FIELD_NUMBER = 4;
      private int numTasks_ = 0;
      public static final int NUM_ACTIVE_TASKS_FIELD_NUMBER = 5;
      private int numActiveTasks_ = 0;
      public static final int NUM_COMPLETE_TASKS_FIELD_NUMBER = 6;
      private int numCompleteTasks_ = 0;
      public static final int NUM_FAILED_TASKS_FIELD_NUMBER = 7;
      private int numFailedTasks_ = 0;
      public static final int NUM_KILLED_TASKS_FIELD_NUMBER = 8;
      private int numKilledTasks_ = 0;
      public static final int NUM_COMPLETED_INDICES_FIELD_NUMBER = 9;
      private int numCompletedIndices_ = 0;
      public static final int SUBMISSION_TIME_FIELD_NUMBER = 10;
      private long submissionTime_ = 0L;
      public static final int FIRST_TASK_LAUNCHED_TIME_FIELD_NUMBER = 11;
      private long firstTaskLaunchedTime_ = 0L;
      public static final int COMPLETION_TIME_FIELD_NUMBER = 12;
      private long completionTime_ = 0L;
      public static final int FAILURE_REASON_FIELD_NUMBER = 13;
      private volatile Object failureReason_ = "";
      public static final int EXECUTOR_DESERIALIZE_TIME_FIELD_NUMBER = 14;
      private long executorDeserializeTime_ = 0L;
      public static final int EXECUTOR_DESERIALIZE_CPU_TIME_FIELD_NUMBER = 15;
      private long executorDeserializeCpuTime_ = 0L;
      public static final int EXECUTOR_RUN_TIME_FIELD_NUMBER = 16;
      private long executorRunTime_ = 0L;
      public static final int EXECUTOR_CPU_TIME_FIELD_NUMBER = 17;
      private long executorCpuTime_ = 0L;
      public static final int RESULT_SIZE_FIELD_NUMBER = 18;
      private long resultSize_ = 0L;
      public static final int JVM_GC_TIME_FIELD_NUMBER = 19;
      private long jvmGcTime_ = 0L;
      public static final int RESULT_SERIALIZATION_TIME_FIELD_NUMBER = 20;
      private long resultSerializationTime_ = 0L;
      public static final int MEMORY_BYTES_SPILLED_FIELD_NUMBER = 21;
      private long memoryBytesSpilled_ = 0L;
      public static final int DISK_BYTES_SPILLED_FIELD_NUMBER = 22;
      private long diskBytesSpilled_ = 0L;
      public static final int PEAK_EXECUTION_MEMORY_FIELD_NUMBER = 23;
      private long peakExecutionMemory_ = 0L;
      public static final int INPUT_BYTES_FIELD_NUMBER = 24;
      private long inputBytes_ = 0L;
      public static final int INPUT_RECORDS_FIELD_NUMBER = 25;
      private long inputRecords_ = 0L;
      public static final int OUTPUT_BYTES_FIELD_NUMBER = 26;
      private long outputBytes_ = 0L;
      public static final int OUTPUT_RECORDS_FIELD_NUMBER = 27;
      private long outputRecords_ = 0L;
      public static final int SHUFFLE_REMOTE_BLOCKS_FETCHED_FIELD_NUMBER = 28;
      private long shuffleRemoteBlocksFetched_ = 0L;
      public static final int SHUFFLE_LOCAL_BLOCKS_FETCHED_FIELD_NUMBER = 29;
      private long shuffleLocalBlocksFetched_ = 0L;
      public static final int SHUFFLE_FETCH_WAIT_TIME_FIELD_NUMBER = 30;
      private long shuffleFetchWaitTime_ = 0L;
      public static final int SHUFFLE_REMOTE_BYTES_READ_FIELD_NUMBER = 31;
      private long shuffleRemoteBytesRead_ = 0L;
      public static final int SHUFFLE_REMOTE_BYTES_READ_TO_DISK_FIELD_NUMBER = 32;
      private long shuffleRemoteBytesReadToDisk_ = 0L;
      public static final int SHUFFLE_LOCAL_BYTES_READ_FIELD_NUMBER = 33;
      private long shuffleLocalBytesRead_ = 0L;
      public static final int SHUFFLE_READ_BYTES_FIELD_NUMBER = 34;
      private long shuffleReadBytes_ = 0L;
      public static final int SHUFFLE_READ_RECORDS_FIELD_NUMBER = 35;
      private long shuffleReadRecords_ = 0L;
      public static final int SHUFFLE_WRITE_BYTES_FIELD_NUMBER = 36;
      private long shuffleWriteBytes_ = 0L;
      public static final int SHUFFLE_WRITE_TIME_FIELD_NUMBER = 37;
      private long shuffleWriteTime_ = 0L;
      public static final int SHUFFLE_WRITE_RECORDS_FIELD_NUMBER = 38;
      private long shuffleWriteRecords_ = 0L;
      public static final int NAME_FIELD_NUMBER = 39;
      private volatile Object name_ = "";
      public static final int DESCRIPTION_FIELD_NUMBER = 40;
      private volatile Object description_ = "";
      public static final int DETAILS_FIELD_NUMBER = 41;
      private volatile Object details_ = "";
      public static final int SCHEDULING_POOL_FIELD_NUMBER = 42;
      private volatile Object schedulingPool_ = "";
      public static final int RDD_IDS_FIELD_NUMBER = 43;
      private Internal.LongList rddIds_ = emptyLongList();
      private int rddIdsMemoizedSerializedSize = -1;
      public static final int ACCUMULATOR_UPDATES_FIELD_NUMBER = 44;
      private List accumulatorUpdates_;
      public static final int TASKS_FIELD_NUMBER = 45;
      private MapField tasks_;
      public static final int EXECUTOR_SUMMARY_FIELD_NUMBER = 46;
      private MapField executorSummary_;
      public static final int SPECULATION_SUMMARY_FIELD_NUMBER = 47;
      private SpeculationStageSummary speculationSummary_;
      public static final int KILLED_TASKS_SUMMARY_FIELD_NUMBER = 48;
      private MapField killedTasksSummary_;
      public static final int RESOURCE_PROFILE_ID_FIELD_NUMBER = 49;
      private int resourceProfileId_ = 0;
      public static final int PEAK_EXECUTOR_METRICS_FIELD_NUMBER = 50;
      private ExecutorMetrics peakExecutorMetrics_;
      public static final int TASK_METRICS_DISTRIBUTIONS_FIELD_NUMBER = 51;
      private TaskMetricDistributions taskMetricsDistributions_;
      public static final int EXECUTOR_METRICS_DISTRIBUTIONS_FIELD_NUMBER = 52;
      private ExecutorMetricsDistributions executorMetricsDistributions_;
      public static final int SHUFFLE_CORRUPT_MERGED_BLOCK_CHUNKS_FIELD_NUMBER = 53;
      private long shuffleCorruptMergedBlockChunks_ = 0L;
      public static final int SHUFFLE_MERGED_FETCH_FALLBACK_COUNT_FIELD_NUMBER = 54;
      private long shuffleMergedFetchFallbackCount_ = 0L;
      public static final int SHUFFLE_MERGED_REMOTE_BLOCKS_FETCHED_FIELD_NUMBER = 55;
      private long shuffleMergedRemoteBlocksFetched_ = 0L;
      public static final int SHUFFLE_MERGED_LOCAL_BLOCKS_FETCHED_FIELD_NUMBER = 56;
      private long shuffleMergedLocalBlocksFetched_ = 0L;
      public static final int SHUFFLE_MERGED_REMOTE_CHUNKS_FETCHED_FIELD_NUMBER = 57;
      private long shuffleMergedRemoteChunksFetched_ = 0L;
      public static final int SHUFFLE_MERGED_LOCAL_CHUNKS_FETCHED_FIELD_NUMBER = 58;
      private long shuffleMergedLocalChunksFetched_ = 0L;
      public static final int SHUFFLE_MERGED_REMOTE_BYTES_READ_FIELD_NUMBER = 59;
      private long shuffleMergedRemoteBytesRead_ = 0L;
      public static final int SHUFFLE_MERGED_LOCAL_BYTES_READ_FIELD_NUMBER = 60;
      private long shuffleMergedLocalBytesRead_ = 0L;
      public static final int SHUFFLE_REMOTE_REQS_DURATION_FIELD_NUMBER = 61;
      private long shuffleRemoteReqsDuration_ = 0L;
      public static final int SHUFFLE_MERGED_REMOTE_REQS_DURATION_FIELD_NUMBER = 62;
      private long shuffleMergedRemoteReqsDuration_ = 0L;
      public static final int IS_SHUFFLE_PUSH_ENABLED_FIELD_NUMBER = 63;
      private boolean isShufflePushEnabled_ = false;
      public static final int SHUFFLE_MERGERS_COUNT_FIELD_NUMBER = 64;
      private int shuffleMergersCount_ = 0;
      private byte memoizedIsInitialized = -1;
      private static final StageData DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private StageData(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private StageData() {
         this.status_ = 0;
         this.failureReason_ = "";
         this.name_ = "";
         this.description_ = "";
         this.details_ = "";
         this.schedulingPool_ = "";
         this.rddIds_ = emptyLongList();
         this.accumulatorUpdates_ = Collections.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StageData_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 45:
               return this.internalGetTasks();
            case 46:
               return this.internalGetExecutorSummary();
            case 47:
            default:
               throw new RuntimeException("Invalid map field number: " + number);
            case 48:
               return this.internalGetKilledTasksSummary();
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StageData_fieldAccessorTable.ensureFieldAccessorsInitialized(StageData.class, Builder.class);
      }

      public int getStatusValue() {
         return this.status_;
      }

      public StageStatus getStatus() {
         StageStatus result = StoreTypes.StageStatus.forNumber(this.status_);
         return result == null ? StoreTypes.StageStatus.UNRECOGNIZED : result;
      }

      public long getStageId() {
         return this.stageId_;
      }

      public int getAttemptId() {
         return this.attemptId_;
      }

      public int getNumTasks() {
         return this.numTasks_;
      }

      public int getNumActiveTasks() {
         return this.numActiveTasks_;
      }

      public int getNumCompleteTasks() {
         return this.numCompleteTasks_;
      }

      public int getNumFailedTasks() {
         return this.numFailedTasks_;
      }

      public int getNumKilledTasks() {
         return this.numKilledTasks_;
      }

      public int getNumCompletedIndices() {
         return this.numCompletedIndices_;
      }

      public boolean hasSubmissionTime() {
         return (this.bitField0_ & 1) != 0;
      }

      public long getSubmissionTime() {
         return this.submissionTime_;
      }

      public boolean hasFirstTaskLaunchedTime() {
         return (this.bitField0_ & 2) != 0;
      }

      public long getFirstTaskLaunchedTime() {
         return this.firstTaskLaunchedTime_;
      }

      public boolean hasCompletionTime() {
         return (this.bitField0_ & 4) != 0;
      }

      public long getCompletionTime() {
         return this.completionTime_;
      }

      public boolean hasFailureReason() {
         return (this.bitField0_ & 8) != 0;
      }

      public String getFailureReason() {
         Object ref = this.failureReason_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.failureReason_ = s;
            return s;
         }
      }

      public ByteString getFailureReasonBytes() {
         Object ref = this.failureReason_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.failureReason_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getExecutorDeserializeTime() {
         return this.executorDeserializeTime_;
      }

      public long getExecutorDeserializeCpuTime() {
         return this.executorDeserializeCpuTime_;
      }

      public long getExecutorRunTime() {
         return this.executorRunTime_;
      }

      public long getExecutorCpuTime() {
         return this.executorCpuTime_;
      }

      public long getResultSize() {
         return this.resultSize_;
      }

      public long getJvmGcTime() {
         return this.jvmGcTime_;
      }

      public long getResultSerializationTime() {
         return this.resultSerializationTime_;
      }

      public long getMemoryBytesSpilled() {
         return this.memoryBytesSpilled_;
      }

      public long getDiskBytesSpilled() {
         return this.diskBytesSpilled_;
      }

      public long getPeakExecutionMemory() {
         return this.peakExecutionMemory_;
      }

      public long getInputBytes() {
         return this.inputBytes_;
      }

      public long getInputRecords() {
         return this.inputRecords_;
      }

      public long getOutputBytes() {
         return this.outputBytes_;
      }

      public long getOutputRecords() {
         return this.outputRecords_;
      }

      public long getShuffleRemoteBlocksFetched() {
         return this.shuffleRemoteBlocksFetched_;
      }

      public long getShuffleLocalBlocksFetched() {
         return this.shuffleLocalBlocksFetched_;
      }

      public long getShuffleFetchWaitTime() {
         return this.shuffleFetchWaitTime_;
      }

      public long getShuffleRemoteBytesRead() {
         return this.shuffleRemoteBytesRead_;
      }

      public long getShuffleRemoteBytesReadToDisk() {
         return this.shuffleRemoteBytesReadToDisk_;
      }

      public long getShuffleLocalBytesRead() {
         return this.shuffleLocalBytesRead_;
      }

      public long getShuffleReadBytes() {
         return this.shuffleReadBytes_;
      }

      public long getShuffleReadRecords() {
         return this.shuffleReadRecords_;
      }

      public long getShuffleWriteBytes() {
         return this.shuffleWriteBytes_;
      }

      public long getShuffleWriteTime() {
         return this.shuffleWriteTime_;
      }

      public long getShuffleWriteRecords() {
         return this.shuffleWriteRecords_;
      }

      public boolean hasName() {
         return (this.bitField0_ & 16) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasDescription() {
         return (this.bitField0_ & 32) != 0;
      }

      public String getDescription() {
         Object ref = this.description_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.description_ = s;
            return s;
         }
      }

      public ByteString getDescriptionBytes() {
         Object ref = this.description_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.description_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasDetails() {
         return (this.bitField0_ & 64) != 0;
      }

      public String getDetails() {
         Object ref = this.details_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.details_ = s;
            return s;
         }
      }

      public ByteString getDetailsBytes() {
         Object ref = this.details_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.details_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasSchedulingPool() {
         return (this.bitField0_ & 128) != 0;
      }

      public String getSchedulingPool() {
         Object ref = this.schedulingPool_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.schedulingPool_ = s;
            return s;
         }
      }

      public ByteString getSchedulingPoolBytes() {
         Object ref = this.schedulingPool_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.schedulingPool_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public List getRddIdsList() {
         return this.rddIds_;
      }

      public int getRddIdsCount() {
         return this.rddIds_.size();
      }

      public long getRddIds(int index) {
         return this.rddIds_.getLong(index);
      }

      public List getAccumulatorUpdatesList() {
         return this.accumulatorUpdates_;
      }

      public List getAccumulatorUpdatesOrBuilderList() {
         return this.accumulatorUpdates_;
      }

      public int getAccumulatorUpdatesCount() {
         return this.accumulatorUpdates_.size();
      }

      public AccumulableInfo getAccumulatorUpdates(int index) {
         return (AccumulableInfo)this.accumulatorUpdates_.get(index);
      }

      public AccumulableInfoOrBuilder getAccumulatorUpdatesOrBuilder(int index) {
         return (AccumulableInfoOrBuilder)this.accumulatorUpdates_.get(index);
      }

      private MapField internalGetTasks() {
         return this.tasks_ == null ? MapField.emptyMapField(StoreTypes.StageData.TasksDefaultEntryHolder.defaultEntry) : this.tasks_;
      }

      public int getTasksCount() {
         return this.internalGetTasks().getMap().size();
      }

      public boolean containsTasks(long key) {
         return this.internalGetTasks().getMap().containsKey(key);
      }

      /** @deprecated */
      @Deprecated
      public Map getTasks() {
         return this.getTasksMap();
      }

      public Map getTasksMap() {
         return this.internalGetTasks().getMap();
      }

      public TaskData getTasksOrDefault(long key, TaskData defaultValue) {
         Map<Long, TaskData> map = this.internalGetTasks().getMap();
         return map.containsKey(key) ? (TaskData)map.get(key) : defaultValue;
      }

      public TaskData getTasksOrThrow(long key) {
         Map<Long, TaskData> map = this.internalGetTasks().getMap();
         if (!map.containsKey(key)) {
            throw new IllegalArgumentException();
         } else {
            return (TaskData)map.get(key);
         }
      }

      private MapField internalGetExecutorSummary() {
         return this.executorSummary_ == null ? MapField.emptyMapField(StoreTypes.StageData.ExecutorSummaryDefaultEntryHolder.defaultEntry) : this.executorSummary_;
      }

      public int getExecutorSummaryCount() {
         return this.internalGetExecutorSummary().getMap().size();
      }

      public boolean containsExecutorSummary(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetExecutorSummary().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getExecutorSummary() {
         return this.getExecutorSummaryMap();
      }

      public Map getExecutorSummaryMap() {
         return this.internalGetExecutorSummary().getMap();
      }

      public ExecutorStageSummary getExecutorSummaryOrDefault(String key, ExecutorStageSummary defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, ExecutorStageSummary> map = this.internalGetExecutorSummary().getMap();
            return map.containsKey(key) ? (ExecutorStageSummary)map.get(key) : defaultValue;
         }
      }

      public ExecutorStageSummary getExecutorSummaryOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, ExecutorStageSummary> map = this.internalGetExecutorSummary().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (ExecutorStageSummary)map.get(key);
            }
         }
      }

      public boolean hasSpeculationSummary() {
         return (this.bitField0_ & 256) != 0;
      }

      public SpeculationStageSummary getSpeculationSummary() {
         return this.speculationSummary_ == null ? StoreTypes.SpeculationStageSummary.getDefaultInstance() : this.speculationSummary_;
      }

      public SpeculationStageSummaryOrBuilder getSpeculationSummaryOrBuilder() {
         return this.speculationSummary_ == null ? StoreTypes.SpeculationStageSummary.getDefaultInstance() : this.speculationSummary_;
      }

      private MapField internalGetKilledTasksSummary() {
         return this.killedTasksSummary_ == null ? MapField.emptyMapField(StoreTypes.StageData.KilledTasksSummaryDefaultEntryHolder.defaultEntry) : this.killedTasksSummary_;
      }

      public int getKilledTasksSummaryCount() {
         return this.internalGetKilledTasksSummary().getMap().size();
      }

      public boolean containsKilledTasksSummary(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetKilledTasksSummary().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getKilledTasksSummary() {
         return this.getKilledTasksSummaryMap();
      }

      public Map getKilledTasksSummaryMap() {
         return this.internalGetKilledTasksSummary().getMap();
      }

      public int getKilledTasksSummaryOrDefault(String key, int defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Integer> map = this.internalGetKilledTasksSummary().getMap();
            return map.containsKey(key) ? (Integer)map.get(key) : defaultValue;
         }
      }

      public int getKilledTasksSummaryOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Integer> map = this.internalGetKilledTasksSummary().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (Integer)map.get(key);
            }
         }
      }

      public int getResourceProfileId() {
         return this.resourceProfileId_;
      }

      public boolean hasPeakExecutorMetrics() {
         return (this.bitField0_ & 512) != 0;
      }

      public ExecutorMetrics getPeakExecutorMetrics() {
         return this.peakExecutorMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakExecutorMetrics_;
      }

      public ExecutorMetricsOrBuilder getPeakExecutorMetricsOrBuilder() {
         return this.peakExecutorMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakExecutorMetrics_;
      }

      public boolean hasTaskMetricsDistributions() {
         return (this.bitField0_ & 1024) != 0;
      }

      public TaskMetricDistributions getTaskMetricsDistributions() {
         return this.taskMetricsDistributions_ == null ? StoreTypes.TaskMetricDistributions.getDefaultInstance() : this.taskMetricsDistributions_;
      }

      public TaskMetricDistributionsOrBuilder getTaskMetricsDistributionsOrBuilder() {
         return this.taskMetricsDistributions_ == null ? StoreTypes.TaskMetricDistributions.getDefaultInstance() : this.taskMetricsDistributions_;
      }

      public boolean hasExecutorMetricsDistributions() {
         return (this.bitField0_ & 2048) != 0;
      }

      public ExecutorMetricsDistributions getExecutorMetricsDistributions() {
         return this.executorMetricsDistributions_ == null ? StoreTypes.ExecutorMetricsDistributions.getDefaultInstance() : this.executorMetricsDistributions_;
      }

      public ExecutorMetricsDistributionsOrBuilder getExecutorMetricsDistributionsOrBuilder() {
         return this.executorMetricsDistributions_ == null ? StoreTypes.ExecutorMetricsDistributions.getDefaultInstance() : this.executorMetricsDistributions_;
      }

      public long getShuffleCorruptMergedBlockChunks() {
         return this.shuffleCorruptMergedBlockChunks_;
      }

      public long getShuffleMergedFetchFallbackCount() {
         return this.shuffleMergedFetchFallbackCount_;
      }

      public long getShuffleMergedRemoteBlocksFetched() {
         return this.shuffleMergedRemoteBlocksFetched_;
      }

      public long getShuffleMergedLocalBlocksFetched() {
         return this.shuffleMergedLocalBlocksFetched_;
      }

      public long getShuffleMergedRemoteChunksFetched() {
         return this.shuffleMergedRemoteChunksFetched_;
      }

      public long getShuffleMergedLocalChunksFetched() {
         return this.shuffleMergedLocalChunksFetched_;
      }

      public long getShuffleMergedRemoteBytesRead() {
         return this.shuffleMergedRemoteBytesRead_;
      }

      public long getShuffleMergedLocalBytesRead() {
         return this.shuffleMergedLocalBytesRead_;
      }

      public long getShuffleRemoteReqsDuration() {
         return this.shuffleRemoteReqsDuration_;
      }

      public long getShuffleMergedRemoteReqsDuration() {
         return this.shuffleMergedRemoteReqsDuration_;
      }

      public boolean getIsShufflePushEnabled() {
         return this.isShufflePushEnabled_;
      }

      public int getShuffleMergersCount() {
         return this.shuffleMergersCount_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if (this.status_ != StoreTypes.StageStatus.STAGE_STATUS_UNSPECIFIED.getNumber()) {
            output.writeEnum(1, this.status_);
         }

         if (this.stageId_ != 0L) {
            output.writeInt64(2, this.stageId_);
         }

         if (this.attemptId_ != 0) {
            output.writeInt32(3, this.attemptId_);
         }

         if (this.numTasks_ != 0) {
            output.writeInt32(4, this.numTasks_);
         }

         if (this.numActiveTasks_ != 0) {
            output.writeInt32(5, this.numActiveTasks_);
         }

         if (this.numCompleteTasks_ != 0) {
            output.writeInt32(6, this.numCompleteTasks_);
         }

         if (this.numFailedTasks_ != 0) {
            output.writeInt32(7, this.numFailedTasks_);
         }

         if (this.numKilledTasks_ != 0) {
            output.writeInt32(8, this.numKilledTasks_);
         }

         if (this.numCompletedIndices_ != 0) {
            output.writeInt32(9, this.numCompletedIndices_);
         }

         if ((this.bitField0_ & 1) != 0) {
            output.writeInt64(10, this.submissionTime_);
         }

         if ((this.bitField0_ & 2) != 0) {
            output.writeInt64(11, this.firstTaskLaunchedTime_);
         }

         if ((this.bitField0_ & 4) != 0) {
            output.writeInt64(12, this.completionTime_);
         }

         if ((this.bitField0_ & 8) != 0) {
            GeneratedMessage.writeString(output, 13, this.failureReason_);
         }

         if (this.executorDeserializeTime_ != 0L) {
            output.writeInt64(14, this.executorDeserializeTime_);
         }

         if (this.executorDeserializeCpuTime_ != 0L) {
            output.writeInt64(15, this.executorDeserializeCpuTime_);
         }

         if (this.executorRunTime_ != 0L) {
            output.writeInt64(16, this.executorRunTime_);
         }

         if (this.executorCpuTime_ != 0L) {
            output.writeInt64(17, this.executorCpuTime_);
         }

         if (this.resultSize_ != 0L) {
            output.writeInt64(18, this.resultSize_);
         }

         if (this.jvmGcTime_ != 0L) {
            output.writeInt64(19, this.jvmGcTime_);
         }

         if (this.resultSerializationTime_ != 0L) {
            output.writeInt64(20, this.resultSerializationTime_);
         }

         if (this.memoryBytesSpilled_ != 0L) {
            output.writeInt64(21, this.memoryBytesSpilled_);
         }

         if (this.diskBytesSpilled_ != 0L) {
            output.writeInt64(22, this.diskBytesSpilled_);
         }

         if (this.peakExecutionMemory_ != 0L) {
            output.writeInt64(23, this.peakExecutionMemory_);
         }

         if (this.inputBytes_ != 0L) {
            output.writeInt64(24, this.inputBytes_);
         }

         if (this.inputRecords_ != 0L) {
            output.writeInt64(25, this.inputRecords_);
         }

         if (this.outputBytes_ != 0L) {
            output.writeInt64(26, this.outputBytes_);
         }

         if (this.outputRecords_ != 0L) {
            output.writeInt64(27, this.outputRecords_);
         }

         if (this.shuffleRemoteBlocksFetched_ != 0L) {
            output.writeInt64(28, this.shuffleRemoteBlocksFetched_);
         }

         if (this.shuffleLocalBlocksFetched_ != 0L) {
            output.writeInt64(29, this.shuffleLocalBlocksFetched_);
         }

         if (this.shuffleFetchWaitTime_ != 0L) {
            output.writeInt64(30, this.shuffleFetchWaitTime_);
         }

         if (this.shuffleRemoteBytesRead_ != 0L) {
            output.writeInt64(31, this.shuffleRemoteBytesRead_);
         }

         if (this.shuffleRemoteBytesReadToDisk_ != 0L) {
            output.writeInt64(32, this.shuffleRemoteBytesReadToDisk_);
         }

         if (this.shuffleLocalBytesRead_ != 0L) {
            output.writeInt64(33, this.shuffleLocalBytesRead_);
         }

         if (this.shuffleReadBytes_ != 0L) {
            output.writeInt64(34, this.shuffleReadBytes_);
         }

         if (this.shuffleReadRecords_ != 0L) {
            output.writeInt64(35, this.shuffleReadRecords_);
         }

         if (this.shuffleWriteBytes_ != 0L) {
            output.writeInt64(36, this.shuffleWriteBytes_);
         }

         if (this.shuffleWriteTime_ != 0L) {
            output.writeInt64(37, this.shuffleWriteTime_);
         }

         if (this.shuffleWriteRecords_ != 0L) {
            output.writeInt64(38, this.shuffleWriteRecords_);
         }

         if ((this.bitField0_ & 16) != 0) {
            GeneratedMessage.writeString(output, 39, this.name_);
         }

         if ((this.bitField0_ & 32) != 0) {
            GeneratedMessage.writeString(output, 40, this.description_);
         }

         if ((this.bitField0_ & 64) != 0) {
            GeneratedMessage.writeString(output, 41, this.details_);
         }

         if ((this.bitField0_ & 128) != 0) {
            GeneratedMessage.writeString(output, 42, this.schedulingPool_);
         }

         if (this.getRddIdsList().size() > 0) {
            output.writeUInt32NoTag(346);
            output.writeUInt32NoTag(this.rddIdsMemoizedSerializedSize);
         }

         for(int i = 0; i < this.rddIds_.size(); ++i) {
            output.writeInt64NoTag(this.rddIds_.getLong(i));
         }

         for(int i = 0; i < this.accumulatorUpdates_.size(); ++i) {
            output.writeMessage(44, (MessageLite)this.accumulatorUpdates_.get(i));
         }

         GeneratedMessage.serializeLongMapTo(output, this.internalGetTasks(), StoreTypes.StageData.TasksDefaultEntryHolder.defaultEntry, 45);
         GeneratedMessage.serializeStringMapTo(output, this.internalGetExecutorSummary(), StoreTypes.StageData.ExecutorSummaryDefaultEntryHolder.defaultEntry, 46);
         if ((this.bitField0_ & 256) != 0) {
            output.writeMessage(47, this.getSpeculationSummary());
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetKilledTasksSummary(), StoreTypes.StageData.KilledTasksSummaryDefaultEntryHolder.defaultEntry, 48);
         if (this.resourceProfileId_ != 0) {
            output.writeInt32(49, this.resourceProfileId_);
         }

         if ((this.bitField0_ & 512) != 0) {
            output.writeMessage(50, this.getPeakExecutorMetrics());
         }

         if ((this.bitField0_ & 1024) != 0) {
            output.writeMessage(51, this.getTaskMetricsDistributions());
         }

         if ((this.bitField0_ & 2048) != 0) {
            output.writeMessage(52, this.getExecutorMetricsDistributions());
         }

         if (this.shuffleCorruptMergedBlockChunks_ != 0L) {
            output.writeInt64(53, this.shuffleCorruptMergedBlockChunks_);
         }

         if (this.shuffleMergedFetchFallbackCount_ != 0L) {
            output.writeInt64(54, this.shuffleMergedFetchFallbackCount_);
         }

         if (this.shuffleMergedRemoteBlocksFetched_ != 0L) {
            output.writeInt64(55, this.shuffleMergedRemoteBlocksFetched_);
         }

         if (this.shuffleMergedLocalBlocksFetched_ != 0L) {
            output.writeInt64(56, this.shuffleMergedLocalBlocksFetched_);
         }

         if (this.shuffleMergedRemoteChunksFetched_ != 0L) {
            output.writeInt64(57, this.shuffleMergedRemoteChunksFetched_);
         }

         if (this.shuffleMergedLocalChunksFetched_ != 0L) {
            output.writeInt64(58, this.shuffleMergedLocalChunksFetched_);
         }

         if (this.shuffleMergedRemoteBytesRead_ != 0L) {
            output.writeInt64(59, this.shuffleMergedRemoteBytesRead_);
         }

         if (this.shuffleMergedLocalBytesRead_ != 0L) {
            output.writeInt64(60, this.shuffleMergedLocalBytesRead_);
         }

         if (this.shuffleRemoteReqsDuration_ != 0L) {
            output.writeInt64(61, this.shuffleRemoteReqsDuration_);
         }

         if (this.shuffleMergedRemoteReqsDuration_ != 0L) {
            output.writeInt64(62, this.shuffleMergedRemoteReqsDuration_);
         }

         if (this.isShufflePushEnabled_) {
            output.writeBool(63, this.isShufflePushEnabled_);
         }

         if (this.shuffleMergersCount_ != 0) {
            output.writeInt32(64, this.shuffleMergersCount_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.status_ != StoreTypes.StageStatus.STAGE_STATUS_UNSPECIFIED.getNumber()) {
               size += CodedOutputStream.computeEnumSize(1, this.status_);
            }

            if (this.stageId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.stageId_);
            }

            if (this.attemptId_ != 0) {
               size += CodedOutputStream.computeInt32Size(3, this.attemptId_);
            }

            if (this.numTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(4, this.numTasks_);
            }

            if (this.numActiveTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(5, this.numActiveTasks_);
            }

            if (this.numCompleteTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(6, this.numCompleteTasks_);
            }

            if (this.numFailedTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(7, this.numFailedTasks_);
            }

            if (this.numKilledTasks_ != 0) {
               size += CodedOutputStream.computeInt32Size(8, this.numKilledTasks_);
            }

            if (this.numCompletedIndices_ != 0) {
               size += CodedOutputStream.computeInt32Size(9, this.numCompletedIndices_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeInt64Size(10, this.submissionTime_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += CodedOutputStream.computeInt64Size(11, this.firstTaskLaunchedTime_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += CodedOutputStream.computeInt64Size(12, this.completionTime_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += GeneratedMessage.computeStringSize(13, this.failureReason_);
            }

            if (this.executorDeserializeTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(14, this.executorDeserializeTime_);
            }

            if (this.executorDeserializeCpuTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(15, this.executorDeserializeCpuTime_);
            }

            if (this.executorRunTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(16, this.executorRunTime_);
            }

            if (this.executorCpuTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(17, this.executorCpuTime_);
            }

            if (this.resultSize_ != 0L) {
               size += CodedOutputStream.computeInt64Size(18, this.resultSize_);
            }

            if (this.jvmGcTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(19, this.jvmGcTime_);
            }

            if (this.resultSerializationTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(20, this.resultSerializationTime_);
            }

            if (this.memoryBytesSpilled_ != 0L) {
               size += CodedOutputStream.computeInt64Size(21, this.memoryBytesSpilled_);
            }

            if (this.diskBytesSpilled_ != 0L) {
               size += CodedOutputStream.computeInt64Size(22, this.diskBytesSpilled_);
            }

            if (this.peakExecutionMemory_ != 0L) {
               size += CodedOutputStream.computeInt64Size(23, this.peakExecutionMemory_);
            }

            if (this.inputBytes_ != 0L) {
               size += CodedOutputStream.computeInt64Size(24, this.inputBytes_);
            }

            if (this.inputRecords_ != 0L) {
               size += CodedOutputStream.computeInt64Size(25, this.inputRecords_);
            }

            if (this.outputBytes_ != 0L) {
               size += CodedOutputStream.computeInt64Size(26, this.outputBytes_);
            }

            if (this.outputRecords_ != 0L) {
               size += CodedOutputStream.computeInt64Size(27, this.outputRecords_);
            }

            if (this.shuffleRemoteBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(28, this.shuffleRemoteBlocksFetched_);
            }

            if (this.shuffleLocalBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(29, this.shuffleLocalBlocksFetched_);
            }

            if (this.shuffleFetchWaitTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(30, this.shuffleFetchWaitTime_);
            }

            if (this.shuffleRemoteBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(31, this.shuffleRemoteBytesRead_);
            }

            if (this.shuffleRemoteBytesReadToDisk_ != 0L) {
               size += CodedOutputStream.computeInt64Size(32, this.shuffleRemoteBytesReadToDisk_);
            }

            if (this.shuffleLocalBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(33, this.shuffleLocalBytesRead_);
            }

            if (this.shuffleReadBytes_ != 0L) {
               size += CodedOutputStream.computeInt64Size(34, this.shuffleReadBytes_);
            }

            if (this.shuffleReadRecords_ != 0L) {
               size += CodedOutputStream.computeInt64Size(35, this.shuffleReadRecords_);
            }

            if (this.shuffleWriteBytes_ != 0L) {
               size += CodedOutputStream.computeInt64Size(36, this.shuffleWriteBytes_);
            }

            if (this.shuffleWriteTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(37, this.shuffleWriteTime_);
            }

            if (this.shuffleWriteRecords_ != 0L) {
               size += CodedOutputStream.computeInt64Size(38, this.shuffleWriteRecords_);
            }

            if ((this.bitField0_ & 16) != 0) {
               size += GeneratedMessage.computeStringSize(39, this.name_);
            }

            if ((this.bitField0_ & 32) != 0) {
               size += GeneratedMessage.computeStringSize(40, this.description_);
            }

            if ((this.bitField0_ & 64) != 0) {
               size += GeneratedMessage.computeStringSize(41, this.details_);
            }

            if ((this.bitField0_ & 128) != 0) {
               size += GeneratedMessage.computeStringSize(42, this.schedulingPool_);
            }

            int dataSize = 0;

            for(int i = 0; i < this.rddIds_.size(); ++i) {
               dataSize += CodedOutputStream.computeInt64SizeNoTag(this.rddIds_.getLong(i));
            }

            size += dataSize;
            if (!this.getRddIdsList().isEmpty()) {
               size += 2;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.rddIdsMemoizedSerializedSize = dataSize;

            for(int i = 0; i < this.accumulatorUpdates_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(44, (MessageLite)this.accumulatorUpdates_.get(i));
            }

            for(Map.Entry entry : this.internalGetTasks().getMap().entrySet()) {
               MapEntry<Long, TaskData> tasks__ = StoreTypes.StageData.TasksDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((Long)entry.getKey()).setValue((TaskData)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(45, tasks__);
            }

            for(Map.Entry entry : this.internalGetExecutorSummary().getMap().entrySet()) {
               MapEntry<String, ExecutorStageSummary> executorSummary__ = StoreTypes.StageData.ExecutorSummaryDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((ExecutorStageSummary)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(46, executorSummary__);
            }

            if ((this.bitField0_ & 256) != 0) {
               size += CodedOutputStream.computeMessageSize(47, this.getSpeculationSummary());
            }

            for(Map.Entry entry : this.internalGetKilledTasksSummary().getMap().entrySet()) {
               MapEntry<String, Integer> killedTasksSummary__ = StoreTypes.StageData.KilledTasksSummaryDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((Integer)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(48, killedTasksSummary__);
            }

            if (this.resourceProfileId_ != 0) {
               size += CodedOutputStream.computeInt32Size(49, this.resourceProfileId_);
            }

            if ((this.bitField0_ & 512) != 0) {
               size += CodedOutputStream.computeMessageSize(50, this.getPeakExecutorMetrics());
            }

            if ((this.bitField0_ & 1024) != 0) {
               size += CodedOutputStream.computeMessageSize(51, this.getTaskMetricsDistributions());
            }

            if ((this.bitField0_ & 2048) != 0) {
               size += CodedOutputStream.computeMessageSize(52, this.getExecutorMetricsDistributions());
            }

            if (this.shuffleCorruptMergedBlockChunks_ != 0L) {
               size += CodedOutputStream.computeInt64Size(53, this.shuffleCorruptMergedBlockChunks_);
            }

            if (this.shuffleMergedFetchFallbackCount_ != 0L) {
               size += CodedOutputStream.computeInt64Size(54, this.shuffleMergedFetchFallbackCount_);
            }

            if (this.shuffleMergedRemoteBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(55, this.shuffleMergedRemoteBlocksFetched_);
            }

            if (this.shuffleMergedLocalBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(56, this.shuffleMergedLocalBlocksFetched_);
            }

            if (this.shuffleMergedRemoteChunksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(57, this.shuffleMergedRemoteChunksFetched_);
            }

            if (this.shuffleMergedLocalChunksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(58, this.shuffleMergedLocalChunksFetched_);
            }

            if (this.shuffleMergedRemoteBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(59, this.shuffleMergedRemoteBytesRead_);
            }

            if (this.shuffleMergedLocalBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(60, this.shuffleMergedLocalBytesRead_);
            }

            if (this.shuffleRemoteReqsDuration_ != 0L) {
               size += CodedOutputStream.computeInt64Size(61, this.shuffleRemoteReqsDuration_);
            }

            if (this.shuffleMergedRemoteReqsDuration_ != 0L) {
               size += CodedOutputStream.computeInt64Size(62, this.shuffleMergedRemoteReqsDuration_);
            }

            if (this.isShufflePushEnabled_) {
               size += CodedOutputStream.computeBoolSize(63, this.isShufflePushEnabled_);
            }

            if (this.shuffleMergersCount_ != 0) {
               size += CodedOutputStream.computeInt32Size(64, this.shuffleMergersCount_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof StageData)) {
            return super.equals(obj);
         } else {
            StageData other = (StageData)obj;
            if (this.status_ != other.status_) {
               return false;
            } else if (this.getStageId() != other.getStageId()) {
               return false;
            } else if (this.getAttemptId() != other.getAttemptId()) {
               return false;
            } else if (this.getNumTasks() != other.getNumTasks()) {
               return false;
            } else if (this.getNumActiveTasks() != other.getNumActiveTasks()) {
               return false;
            } else if (this.getNumCompleteTasks() != other.getNumCompleteTasks()) {
               return false;
            } else if (this.getNumFailedTasks() != other.getNumFailedTasks()) {
               return false;
            } else if (this.getNumKilledTasks() != other.getNumKilledTasks()) {
               return false;
            } else if (this.getNumCompletedIndices() != other.getNumCompletedIndices()) {
               return false;
            } else if (this.hasSubmissionTime() != other.hasSubmissionTime()) {
               return false;
            } else if (this.hasSubmissionTime() && this.getSubmissionTime() != other.getSubmissionTime()) {
               return false;
            } else if (this.hasFirstTaskLaunchedTime() != other.hasFirstTaskLaunchedTime()) {
               return false;
            } else if (this.hasFirstTaskLaunchedTime() && this.getFirstTaskLaunchedTime() != other.getFirstTaskLaunchedTime()) {
               return false;
            } else if (this.hasCompletionTime() != other.hasCompletionTime()) {
               return false;
            } else if (this.hasCompletionTime() && this.getCompletionTime() != other.getCompletionTime()) {
               return false;
            } else if (this.hasFailureReason() != other.hasFailureReason()) {
               return false;
            } else if (this.hasFailureReason() && !this.getFailureReason().equals(other.getFailureReason())) {
               return false;
            } else if (this.getExecutorDeserializeTime() != other.getExecutorDeserializeTime()) {
               return false;
            } else if (this.getExecutorDeserializeCpuTime() != other.getExecutorDeserializeCpuTime()) {
               return false;
            } else if (this.getExecutorRunTime() != other.getExecutorRunTime()) {
               return false;
            } else if (this.getExecutorCpuTime() != other.getExecutorCpuTime()) {
               return false;
            } else if (this.getResultSize() != other.getResultSize()) {
               return false;
            } else if (this.getJvmGcTime() != other.getJvmGcTime()) {
               return false;
            } else if (this.getResultSerializationTime() != other.getResultSerializationTime()) {
               return false;
            } else if (this.getMemoryBytesSpilled() != other.getMemoryBytesSpilled()) {
               return false;
            } else if (this.getDiskBytesSpilled() != other.getDiskBytesSpilled()) {
               return false;
            } else if (this.getPeakExecutionMemory() != other.getPeakExecutionMemory()) {
               return false;
            } else if (this.getInputBytes() != other.getInputBytes()) {
               return false;
            } else if (this.getInputRecords() != other.getInputRecords()) {
               return false;
            } else if (this.getOutputBytes() != other.getOutputBytes()) {
               return false;
            } else if (this.getOutputRecords() != other.getOutputRecords()) {
               return false;
            } else if (this.getShuffleRemoteBlocksFetched() != other.getShuffleRemoteBlocksFetched()) {
               return false;
            } else if (this.getShuffleLocalBlocksFetched() != other.getShuffleLocalBlocksFetched()) {
               return false;
            } else if (this.getShuffleFetchWaitTime() != other.getShuffleFetchWaitTime()) {
               return false;
            } else if (this.getShuffleRemoteBytesRead() != other.getShuffleRemoteBytesRead()) {
               return false;
            } else if (this.getShuffleRemoteBytesReadToDisk() != other.getShuffleRemoteBytesReadToDisk()) {
               return false;
            } else if (this.getShuffleLocalBytesRead() != other.getShuffleLocalBytesRead()) {
               return false;
            } else if (this.getShuffleReadBytes() != other.getShuffleReadBytes()) {
               return false;
            } else if (this.getShuffleReadRecords() != other.getShuffleReadRecords()) {
               return false;
            } else if (this.getShuffleWriteBytes() != other.getShuffleWriteBytes()) {
               return false;
            } else if (this.getShuffleWriteTime() != other.getShuffleWriteTime()) {
               return false;
            } else if (this.getShuffleWriteRecords() != other.getShuffleWriteRecords()) {
               return false;
            } else if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.hasDescription() != other.hasDescription()) {
               return false;
            } else if (this.hasDescription() && !this.getDescription().equals(other.getDescription())) {
               return false;
            } else if (this.hasDetails() != other.hasDetails()) {
               return false;
            } else if (this.hasDetails() && !this.getDetails().equals(other.getDetails())) {
               return false;
            } else if (this.hasSchedulingPool() != other.hasSchedulingPool()) {
               return false;
            } else if (this.hasSchedulingPool() && !this.getSchedulingPool().equals(other.getSchedulingPool())) {
               return false;
            } else if (!this.getRddIdsList().equals(other.getRddIdsList())) {
               return false;
            } else if (!this.getAccumulatorUpdatesList().equals(other.getAccumulatorUpdatesList())) {
               return false;
            } else if (!this.internalGetTasks().equals(other.internalGetTasks())) {
               return false;
            } else if (!this.internalGetExecutorSummary().equals(other.internalGetExecutorSummary())) {
               return false;
            } else if (this.hasSpeculationSummary() != other.hasSpeculationSummary()) {
               return false;
            } else if (this.hasSpeculationSummary() && !this.getSpeculationSummary().equals(other.getSpeculationSummary())) {
               return false;
            } else if (!this.internalGetKilledTasksSummary().equals(other.internalGetKilledTasksSummary())) {
               return false;
            } else if (this.getResourceProfileId() != other.getResourceProfileId()) {
               return false;
            } else if (this.hasPeakExecutorMetrics() != other.hasPeakExecutorMetrics()) {
               return false;
            } else if (this.hasPeakExecutorMetrics() && !this.getPeakExecutorMetrics().equals(other.getPeakExecutorMetrics())) {
               return false;
            } else if (this.hasTaskMetricsDistributions() != other.hasTaskMetricsDistributions()) {
               return false;
            } else if (this.hasTaskMetricsDistributions() && !this.getTaskMetricsDistributions().equals(other.getTaskMetricsDistributions())) {
               return false;
            } else if (this.hasExecutorMetricsDistributions() != other.hasExecutorMetricsDistributions()) {
               return false;
            } else if (this.hasExecutorMetricsDistributions() && !this.getExecutorMetricsDistributions().equals(other.getExecutorMetricsDistributions())) {
               return false;
            } else if (this.getShuffleCorruptMergedBlockChunks() != other.getShuffleCorruptMergedBlockChunks()) {
               return false;
            } else if (this.getShuffleMergedFetchFallbackCount() != other.getShuffleMergedFetchFallbackCount()) {
               return false;
            } else if (this.getShuffleMergedRemoteBlocksFetched() != other.getShuffleMergedRemoteBlocksFetched()) {
               return false;
            } else if (this.getShuffleMergedLocalBlocksFetched() != other.getShuffleMergedLocalBlocksFetched()) {
               return false;
            } else if (this.getShuffleMergedRemoteChunksFetched() != other.getShuffleMergedRemoteChunksFetched()) {
               return false;
            } else if (this.getShuffleMergedLocalChunksFetched() != other.getShuffleMergedLocalChunksFetched()) {
               return false;
            } else if (this.getShuffleMergedRemoteBytesRead() != other.getShuffleMergedRemoteBytesRead()) {
               return false;
            } else if (this.getShuffleMergedLocalBytesRead() != other.getShuffleMergedLocalBytesRead()) {
               return false;
            } else if (this.getShuffleRemoteReqsDuration() != other.getShuffleRemoteReqsDuration()) {
               return false;
            } else if (this.getShuffleMergedRemoteReqsDuration() != other.getShuffleMergedRemoteReqsDuration()) {
               return false;
            } else if (this.getIsShufflePushEnabled() != other.getIsShufflePushEnabled()) {
               return false;
            } else if (this.getShuffleMergersCount() != other.getShuffleMergersCount()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + this.status_;
            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getStageId());
            hash = 37 * hash + 3;
            hash = 53 * hash + this.getAttemptId();
            hash = 37 * hash + 4;
            hash = 53 * hash + this.getNumTasks();
            hash = 37 * hash + 5;
            hash = 53 * hash + this.getNumActiveTasks();
            hash = 37 * hash + 6;
            hash = 53 * hash + this.getNumCompleteTasks();
            hash = 37 * hash + 7;
            hash = 53 * hash + this.getNumFailedTasks();
            hash = 37 * hash + 8;
            hash = 53 * hash + this.getNumKilledTasks();
            hash = 37 * hash + 9;
            hash = 53 * hash + this.getNumCompletedIndices();
            if (this.hasSubmissionTime()) {
               hash = 37 * hash + 10;
               hash = 53 * hash + Internal.hashLong(this.getSubmissionTime());
            }

            if (this.hasFirstTaskLaunchedTime()) {
               hash = 37 * hash + 11;
               hash = 53 * hash + Internal.hashLong(this.getFirstTaskLaunchedTime());
            }

            if (this.hasCompletionTime()) {
               hash = 37 * hash + 12;
               hash = 53 * hash + Internal.hashLong(this.getCompletionTime());
            }

            if (this.hasFailureReason()) {
               hash = 37 * hash + 13;
               hash = 53 * hash + this.getFailureReason().hashCode();
            }

            hash = 37 * hash + 14;
            hash = 53 * hash + Internal.hashLong(this.getExecutorDeserializeTime());
            hash = 37 * hash + 15;
            hash = 53 * hash + Internal.hashLong(this.getExecutorDeserializeCpuTime());
            hash = 37 * hash + 16;
            hash = 53 * hash + Internal.hashLong(this.getExecutorRunTime());
            hash = 37 * hash + 17;
            hash = 53 * hash + Internal.hashLong(this.getExecutorCpuTime());
            hash = 37 * hash + 18;
            hash = 53 * hash + Internal.hashLong(this.getResultSize());
            hash = 37 * hash + 19;
            hash = 53 * hash + Internal.hashLong(this.getJvmGcTime());
            hash = 37 * hash + 20;
            hash = 53 * hash + Internal.hashLong(this.getResultSerializationTime());
            hash = 37 * hash + 21;
            hash = 53 * hash + Internal.hashLong(this.getMemoryBytesSpilled());
            hash = 37 * hash + 22;
            hash = 53 * hash + Internal.hashLong(this.getDiskBytesSpilled());
            hash = 37 * hash + 23;
            hash = 53 * hash + Internal.hashLong(this.getPeakExecutionMemory());
            hash = 37 * hash + 24;
            hash = 53 * hash + Internal.hashLong(this.getInputBytes());
            hash = 37 * hash + 25;
            hash = 53 * hash + Internal.hashLong(this.getInputRecords());
            hash = 37 * hash + 26;
            hash = 53 * hash + Internal.hashLong(this.getOutputBytes());
            hash = 37 * hash + 27;
            hash = 53 * hash + Internal.hashLong(this.getOutputRecords());
            hash = 37 * hash + 28;
            hash = 53 * hash + Internal.hashLong(this.getShuffleRemoteBlocksFetched());
            hash = 37 * hash + 29;
            hash = 53 * hash + Internal.hashLong(this.getShuffleLocalBlocksFetched());
            hash = 37 * hash + 30;
            hash = 53 * hash + Internal.hashLong(this.getShuffleFetchWaitTime());
            hash = 37 * hash + 31;
            hash = 53 * hash + Internal.hashLong(this.getShuffleRemoteBytesRead());
            hash = 37 * hash + 32;
            hash = 53 * hash + Internal.hashLong(this.getShuffleRemoteBytesReadToDisk());
            hash = 37 * hash + 33;
            hash = 53 * hash + Internal.hashLong(this.getShuffleLocalBytesRead());
            hash = 37 * hash + 34;
            hash = 53 * hash + Internal.hashLong(this.getShuffleReadBytes());
            hash = 37 * hash + 35;
            hash = 53 * hash + Internal.hashLong(this.getShuffleReadRecords());
            hash = 37 * hash + 36;
            hash = 53 * hash + Internal.hashLong(this.getShuffleWriteBytes());
            hash = 37 * hash + 37;
            hash = 53 * hash + Internal.hashLong(this.getShuffleWriteTime());
            hash = 37 * hash + 38;
            hash = 53 * hash + Internal.hashLong(this.getShuffleWriteRecords());
            if (this.hasName()) {
               hash = 37 * hash + 39;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.hasDescription()) {
               hash = 37 * hash + 40;
               hash = 53 * hash + this.getDescription().hashCode();
            }

            if (this.hasDetails()) {
               hash = 37 * hash + 41;
               hash = 53 * hash + this.getDetails().hashCode();
            }

            if (this.hasSchedulingPool()) {
               hash = 37 * hash + 42;
               hash = 53 * hash + this.getSchedulingPool().hashCode();
            }

            if (this.getRddIdsCount() > 0) {
               hash = 37 * hash + 43;
               hash = 53 * hash + this.getRddIdsList().hashCode();
            }

            if (this.getAccumulatorUpdatesCount() > 0) {
               hash = 37 * hash + 44;
               hash = 53 * hash + this.getAccumulatorUpdatesList().hashCode();
            }

            if (!this.internalGetTasks().getMap().isEmpty()) {
               hash = 37 * hash + 45;
               hash = 53 * hash + this.internalGetTasks().hashCode();
            }

            if (!this.internalGetExecutorSummary().getMap().isEmpty()) {
               hash = 37 * hash + 46;
               hash = 53 * hash + this.internalGetExecutorSummary().hashCode();
            }

            if (this.hasSpeculationSummary()) {
               hash = 37 * hash + 47;
               hash = 53 * hash + this.getSpeculationSummary().hashCode();
            }

            if (!this.internalGetKilledTasksSummary().getMap().isEmpty()) {
               hash = 37 * hash + 48;
               hash = 53 * hash + this.internalGetKilledTasksSummary().hashCode();
            }

            hash = 37 * hash + 49;
            hash = 53 * hash + this.getResourceProfileId();
            if (this.hasPeakExecutorMetrics()) {
               hash = 37 * hash + 50;
               hash = 53 * hash + this.getPeakExecutorMetrics().hashCode();
            }

            if (this.hasTaskMetricsDistributions()) {
               hash = 37 * hash + 51;
               hash = 53 * hash + this.getTaskMetricsDistributions().hashCode();
            }

            if (this.hasExecutorMetricsDistributions()) {
               hash = 37 * hash + 52;
               hash = 53 * hash + this.getExecutorMetricsDistributions().hashCode();
            }

            hash = 37 * hash + 53;
            hash = 53 * hash + Internal.hashLong(this.getShuffleCorruptMergedBlockChunks());
            hash = 37 * hash + 54;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedFetchFallbackCount());
            hash = 37 * hash + 55;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedRemoteBlocksFetched());
            hash = 37 * hash + 56;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedLocalBlocksFetched());
            hash = 37 * hash + 57;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedRemoteChunksFetched());
            hash = 37 * hash + 58;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedLocalChunksFetched());
            hash = 37 * hash + 59;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedRemoteBytesRead());
            hash = 37 * hash + 60;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedLocalBytesRead());
            hash = 37 * hash + 61;
            hash = 53 * hash + Internal.hashLong(this.getShuffleRemoteReqsDuration());
            hash = 37 * hash + 62;
            hash = 53 * hash + Internal.hashLong(this.getShuffleMergedRemoteReqsDuration());
            hash = 37 * hash + 63;
            hash = 53 * hash + Internal.hashBoolean(this.getIsShufflePushEnabled());
            hash = 37 * hash + 64;
            hash = 53 * hash + this.getShuffleMergersCount();
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static StageData parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (StageData)PARSER.parseFrom(data);
      }

      public static StageData parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StageData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StageData parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (StageData)PARSER.parseFrom(data);
      }

      public static StageData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StageData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StageData parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (StageData)PARSER.parseFrom(data);
      }

      public static StageData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StageData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StageData parseFrom(InputStream input) throws IOException {
         return (StageData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StageData parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StageData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static StageData parseDelimitedFrom(InputStream input) throws IOException {
         return (StageData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static StageData parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StageData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static StageData parseFrom(CodedInputStream input) throws IOException {
         return (StageData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StageData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StageData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(StageData prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static StageData getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public StageData getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", StageData.class.getName());
         DEFAULT_INSTANCE = new StageData();
         PARSER = new AbstractParser() {
            public StageData parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.StageData.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      private static final class TasksDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_StageData_TasksEntry_descriptor, WireFormat.FieldType.INT64, 0L, WireFormat.FieldType.MESSAGE, StoreTypes.TaskData.getDefaultInstance());
         }
      }

      private static final class ExecutorSummaryDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_StageData_ExecutorSummaryEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.MESSAGE, StoreTypes.ExecutorStageSummary.getDefaultInstance());
         }
      }

      private static final class KilledTasksSummaryDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_StageData_KilledTasksSummaryEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT32, 0);
         }
      }

      public static final class Builder extends GeneratedMessage.Builder implements StageDataOrBuilder {
         private int bitField0_;
         private int bitField1_;
         private int status_ = 0;
         private long stageId_;
         private int attemptId_;
         private int numTasks_;
         private int numActiveTasks_;
         private int numCompleteTasks_;
         private int numFailedTasks_;
         private int numKilledTasks_;
         private int numCompletedIndices_;
         private long submissionTime_;
         private long firstTaskLaunchedTime_;
         private long completionTime_;
         private Object failureReason_ = "";
         private long executorDeserializeTime_;
         private long executorDeserializeCpuTime_;
         private long executorRunTime_;
         private long executorCpuTime_;
         private long resultSize_;
         private long jvmGcTime_;
         private long resultSerializationTime_;
         private long memoryBytesSpilled_;
         private long diskBytesSpilled_;
         private long peakExecutionMemory_;
         private long inputBytes_;
         private long inputRecords_;
         private long outputBytes_;
         private long outputRecords_;
         private long shuffleRemoteBlocksFetched_;
         private long shuffleLocalBlocksFetched_;
         private long shuffleFetchWaitTime_;
         private long shuffleRemoteBytesRead_;
         private long shuffleRemoteBytesReadToDisk_;
         private long shuffleLocalBytesRead_;
         private long shuffleReadBytes_;
         private long shuffleReadRecords_;
         private long shuffleWriteBytes_;
         private long shuffleWriteTime_;
         private long shuffleWriteRecords_;
         private Object name_ = "";
         private Object description_ = "";
         private Object details_ = "";
         private Object schedulingPool_ = "";
         private Internal.LongList rddIds_ = StoreTypes.StageData.emptyLongList();
         private List accumulatorUpdates_ = Collections.emptyList();
         private RepeatedFieldBuilder accumulatorUpdatesBuilder_;
         private static final TasksConverter tasksConverter = new TasksConverter();
         private MapFieldBuilder tasks_;
         private static final ExecutorSummaryConverter executorSummaryConverter = new ExecutorSummaryConverter();
         private MapFieldBuilder executorSummary_;
         private SpeculationStageSummary speculationSummary_;
         private SingleFieldBuilder speculationSummaryBuilder_;
         private MapField killedTasksSummary_;
         private int resourceProfileId_;
         private ExecutorMetrics peakExecutorMetrics_;
         private SingleFieldBuilder peakExecutorMetricsBuilder_;
         private TaskMetricDistributions taskMetricsDistributions_;
         private SingleFieldBuilder taskMetricsDistributionsBuilder_;
         private ExecutorMetricsDistributions executorMetricsDistributions_;
         private SingleFieldBuilder executorMetricsDistributionsBuilder_;
         private long shuffleCorruptMergedBlockChunks_;
         private long shuffleMergedFetchFallbackCount_;
         private long shuffleMergedRemoteBlocksFetched_;
         private long shuffleMergedLocalBlocksFetched_;
         private long shuffleMergedRemoteChunksFetched_;
         private long shuffleMergedLocalChunksFetched_;
         private long shuffleMergedRemoteBytesRead_;
         private long shuffleMergedLocalBytesRead_;
         private long shuffleRemoteReqsDuration_;
         private long shuffleMergedRemoteReqsDuration_;
         private boolean isShufflePushEnabled_;
         private int shuffleMergersCount_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StageData_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 45:
                  return this.internalGetTasks();
               case 46:
                  return this.internalGetExecutorSummary();
               case 47:
               default:
                  throw new RuntimeException("Invalid map field number: " + number);
               case 48:
                  return this.internalGetKilledTasksSummary();
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 45:
                  return this.internalGetMutableTasks();
               case 46:
                  return this.internalGetMutableExecutorSummary();
               case 47:
               default:
                  throw new RuntimeException("Invalid map field number: " + number);
               case 48:
                  return this.internalGetMutableKilledTasksSummary();
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StageData_fieldAccessorTable.ensureFieldAccessorsInitialized(StageData.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.StageData.alwaysUseFieldBuilders) {
               this.getAccumulatorUpdatesFieldBuilder();
               this.getSpeculationSummaryFieldBuilder();
               this.getPeakExecutorMetricsFieldBuilder();
               this.getTaskMetricsDistributionsFieldBuilder();
               this.getExecutorMetricsDistributionsFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.bitField1_ = 0;
            this.status_ = 0;
            this.stageId_ = 0L;
            this.attemptId_ = 0;
            this.numTasks_ = 0;
            this.numActiveTasks_ = 0;
            this.numCompleteTasks_ = 0;
            this.numFailedTasks_ = 0;
            this.numKilledTasks_ = 0;
            this.numCompletedIndices_ = 0;
            this.submissionTime_ = 0L;
            this.firstTaskLaunchedTime_ = 0L;
            this.completionTime_ = 0L;
            this.failureReason_ = "";
            this.executorDeserializeTime_ = 0L;
            this.executorDeserializeCpuTime_ = 0L;
            this.executorRunTime_ = 0L;
            this.executorCpuTime_ = 0L;
            this.resultSize_ = 0L;
            this.jvmGcTime_ = 0L;
            this.resultSerializationTime_ = 0L;
            this.memoryBytesSpilled_ = 0L;
            this.diskBytesSpilled_ = 0L;
            this.peakExecutionMemory_ = 0L;
            this.inputBytes_ = 0L;
            this.inputRecords_ = 0L;
            this.outputBytes_ = 0L;
            this.outputRecords_ = 0L;
            this.shuffleRemoteBlocksFetched_ = 0L;
            this.shuffleLocalBlocksFetched_ = 0L;
            this.shuffleFetchWaitTime_ = 0L;
            this.shuffleRemoteBytesRead_ = 0L;
            this.shuffleRemoteBytesReadToDisk_ = 0L;
            this.shuffleLocalBytesRead_ = 0L;
            this.shuffleReadBytes_ = 0L;
            this.shuffleReadRecords_ = 0L;
            this.shuffleWriteBytes_ = 0L;
            this.shuffleWriteTime_ = 0L;
            this.shuffleWriteRecords_ = 0L;
            this.name_ = "";
            this.description_ = "";
            this.details_ = "";
            this.schedulingPool_ = "";
            this.rddIds_ = StoreTypes.StageData.emptyLongList();
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.accumulatorUpdates_ = Collections.emptyList();
            } else {
               this.accumulatorUpdates_ = null;
               this.accumulatorUpdatesBuilder_.clear();
            }

            this.bitField1_ &= -2049;
            this.internalGetMutableTasks().clear();
            this.internalGetMutableExecutorSummary().clear();
            this.speculationSummary_ = null;
            if (this.speculationSummaryBuilder_ != null) {
               this.speculationSummaryBuilder_.dispose();
               this.speculationSummaryBuilder_ = null;
            }

            this.internalGetMutableKilledTasksSummary().clear();
            this.resourceProfileId_ = 0;
            this.peakExecutorMetrics_ = null;
            if (this.peakExecutorMetricsBuilder_ != null) {
               this.peakExecutorMetricsBuilder_.dispose();
               this.peakExecutorMetricsBuilder_ = null;
            }

            this.taskMetricsDistributions_ = null;
            if (this.taskMetricsDistributionsBuilder_ != null) {
               this.taskMetricsDistributionsBuilder_.dispose();
               this.taskMetricsDistributionsBuilder_ = null;
            }

            this.executorMetricsDistributions_ = null;
            if (this.executorMetricsDistributionsBuilder_ != null) {
               this.executorMetricsDistributionsBuilder_.dispose();
               this.executorMetricsDistributionsBuilder_ = null;
            }

            this.shuffleCorruptMergedBlockChunks_ = 0L;
            this.shuffleMergedFetchFallbackCount_ = 0L;
            this.shuffleMergedRemoteBlocksFetched_ = 0L;
            this.shuffleMergedLocalBlocksFetched_ = 0L;
            this.shuffleMergedRemoteChunksFetched_ = 0L;
            this.shuffleMergedLocalChunksFetched_ = 0L;
            this.shuffleMergedRemoteBytesRead_ = 0L;
            this.shuffleMergedLocalBytesRead_ = 0L;
            this.shuffleRemoteReqsDuration_ = 0L;
            this.shuffleMergedRemoteReqsDuration_ = 0L;
            this.isShufflePushEnabled_ = false;
            this.shuffleMergersCount_ = 0;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StageData_descriptor;
         }

         public StageData getDefaultInstanceForType() {
            return StoreTypes.StageData.getDefaultInstance();
         }

         public StageData build() {
            StageData result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public StageData buildPartial() {
            StageData result = new StageData(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            if (this.bitField1_ != 0) {
               this.buildPartial1(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(StageData result) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if ((this.bitField1_ & 2048) != 0) {
                  this.accumulatorUpdates_ = Collections.unmodifiableList(this.accumulatorUpdates_);
                  this.bitField1_ &= -2049;
               }

               result.accumulatorUpdates_ = this.accumulatorUpdates_;
            } else {
               result.accumulatorUpdates_ = this.accumulatorUpdatesBuilder_.build();
            }

         }

         private void buildPartial0(StageData result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.status_ = this.status_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.stageId_ = this.stageId_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.attemptId_ = this.attemptId_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.numTasks_ = this.numTasks_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.numActiveTasks_ = this.numActiveTasks_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.numCompleteTasks_ = this.numCompleteTasks_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.numFailedTasks_ = this.numFailedTasks_;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.numKilledTasks_ = this.numKilledTasks_;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.numCompletedIndices_ = this.numCompletedIndices_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 512) != 0) {
               result.submissionTime_ = this.submissionTime_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 1024) != 0) {
               result.firstTaskLaunchedTime_ = this.firstTaskLaunchedTime_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 2048) != 0) {
               result.completionTime_ = this.completionTime_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 4096) != 0) {
               result.failureReason_ = this.failureReason_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 8192) != 0) {
               result.executorDeserializeTime_ = this.executorDeserializeTime_;
            }

            if ((from_bitField0_ & 16384) != 0) {
               result.executorDeserializeCpuTime_ = this.executorDeserializeCpuTime_;
            }

            if ((from_bitField0_ & '耀') != 0) {
               result.executorRunTime_ = this.executorRunTime_;
            }

            if ((from_bitField0_ & 65536) != 0) {
               result.executorCpuTime_ = this.executorCpuTime_;
            }

            if ((from_bitField0_ & 131072) != 0) {
               result.resultSize_ = this.resultSize_;
            }

            if ((from_bitField0_ & 262144) != 0) {
               result.jvmGcTime_ = this.jvmGcTime_;
            }

            if ((from_bitField0_ & 524288) != 0) {
               result.resultSerializationTime_ = this.resultSerializationTime_;
            }

            if ((from_bitField0_ & 1048576) != 0) {
               result.memoryBytesSpilled_ = this.memoryBytesSpilled_;
            }

            if ((from_bitField0_ & 2097152) != 0) {
               result.diskBytesSpilled_ = this.diskBytesSpilled_;
            }

            if ((from_bitField0_ & 4194304) != 0) {
               result.peakExecutionMemory_ = this.peakExecutionMemory_;
            }

            if ((from_bitField0_ & 8388608) != 0) {
               result.inputBytes_ = this.inputBytes_;
            }

            if ((from_bitField0_ & 16777216) != 0) {
               result.inputRecords_ = this.inputRecords_;
            }

            if ((from_bitField0_ & 33554432) != 0) {
               result.outputBytes_ = this.outputBytes_;
            }

            if ((from_bitField0_ & 67108864) != 0) {
               result.outputRecords_ = this.outputRecords_;
            }

            if ((from_bitField0_ & 134217728) != 0) {
               result.shuffleRemoteBlocksFetched_ = this.shuffleRemoteBlocksFetched_;
            }

            if ((from_bitField0_ & 268435456) != 0) {
               result.shuffleLocalBlocksFetched_ = this.shuffleLocalBlocksFetched_;
            }

            if ((from_bitField0_ & 536870912) != 0) {
               result.shuffleFetchWaitTime_ = this.shuffleFetchWaitTime_;
            }

            if ((from_bitField0_ & 1073741824) != 0) {
               result.shuffleRemoteBytesRead_ = this.shuffleRemoteBytesRead_;
            }

            if ((from_bitField0_ & Integer.MIN_VALUE) != 0) {
               result.shuffleRemoteBytesReadToDisk_ = this.shuffleRemoteBytesReadToDisk_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         private void buildPartial1(StageData result) {
            int from_bitField1_ = this.bitField1_;
            if ((from_bitField1_ & 1) != 0) {
               result.shuffleLocalBytesRead_ = this.shuffleLocalBytesRead_;
            }

            if ((from_bitField1_ & 2) != 0) {
               result.shuffleReadBytes_ = this.shuffleReadBytes_;
            }

            if ((from_bitField1_ & 4) != 0) {
               result.shuffleReadRecords_ = this.shuffleReadRecords_;
            }

            if ((from_bitField1_ & 8) != 0) {
               result.shuffleWriteBytes_ = this.shuffleWriteBytes_;
            }

            if ((from_bitField1_ & 16) != 0) {
               result.shuffleWriteTime_ = this.shuffleWriteTime_;
            }

            if ((from_bitField1_ & 32) != 0) {
               result.shuffleWriteRecords_ = this.shuffleWriteRecords_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField1_ & 64) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 16;
            }

            if ((from_bitField1_ & 128) != 0) {
               result.description_ = this.description_;
               to_bitField0_ |= 32;
            }

            if ((from_bitField1_ & 256) != 0) {
               result.details_ = this.details_;
               to_bitField0_ |= 64;
            }

            if ((from_bitField1_ & 512) != 0) {
               result.schedulingPool_ = this.schedulingPool_;
               to_bitField0_ |= 128;
            }

            if ((from_bitField1_ & 1024) != 0) {
               this.rddIds_.makeImmutable();
               result.rddIds_ = this.rddIds_;
            }

            if ((from_bitField1_ & 4096) != 0) {
               result.tasks_ = this.internalGetTasks().build(StoreTypes.StageData.TasksDefaultEntryHolder.defaultEntry);
            }

            if ((from_bitField1_ & 8192) != 0) {
               result.executorSummary_ = this.internalGetExecutorSummary().build(StoreTypes.StageData.ExecutorSummaryDefaultEntryHolder.defaultEntry);
            }

            if ((from_bitField1_ & 16384) != 0) {
               result.speculationSummary_ = this.speculationSummaryBuilder_ == null ? this.speculationSummary_ : (SpeculationStageSummary)this.speculationSummaryBuilder_.build();
               to_bitField0_ |= 256;
            }

            if ((from_bitField1_ & '耀') != 0) {
               result.killedTasksSummary_ = this.internalGetKilledTasksSummary();
               result.killedTasksSummary_.makeImmutable();
            }

            if ((from_bitField1_ & 65536) != 0) {
               result.resourceProfileId_ = this.resourceProfileId_;
            }

            if ((from_bitField1_ & 131072) != 0) {
               result.peakExecutorMetrics_ = this.peakExecutorMetricsBuilder_ == null ? this.peakExecutorMetrics_ : (ExecutorMetrics)this.peakExecutorMetricsBuilder_.build();
               to_bitField0_ |= 512;
            }

            if ((from_bitField1_ & 262144) != 0) {
               result.taskMetricsDistributions_ = this.taskMetricsDistributionsBuilder_ == null ? this.taskMetricsDistributions_ : (TaskMetricDistributions)this.taskMetricsDistributionsBuilder_.build();
               to_bitField0_ |= 1024;
            }

            if ((from_bitField1_ & 524288) != 0) {
               result.executorMetricsDistributions_ = this.executorMetricsDistributionsBuilder_ == null ? this.executorMetricsDistributions_ : (ExecutorMetricsDistributions)this.executorMetricsDistributionsBuilder_.build();
               to_bitField0_ |= 2048;
            }

            if ((from_bitField1_ & 1048576) != 0) {
               result.shuffleCorruptMergedBlockChunks_ = this.shuffleCorruptMergedBlockChunks_;
            }

            if ((from_bitField1_ & 2097152) != 0) {
               result.shuffleMergedFetchFallbackCount_ = this.shuffleMergedFetchFallbackCount_;
            }

            if ((from_bitField1_ & 4194304) != 0) {
               result.shuffleMergedRemoteBlocksFetched_ = this.shuffleMergedRemoteBlocksFetched_;
            }

            if ((from_bitField1_ & 8388608) != 0) {
               result.shuffleMergedLocalBlocksFetched_ = this.shuffleMergedLocalBlocksFetched_;
            }

            if ((from_bitField1_ & 16777216) != 0) {
               result.shuffleMergedRemoteChunksFetched_ = this.shuffleMergedRemoteChunksFetched_;
            }

            if ((from_bitField1_ & 33554432) != 0) {
               result.shuffleMergedLocalChunksFetched_ = this.shuffleMergedLocalChunksFetched_;
            }

            if ((from_bitField1_ & 67108864) != 0) {
               result.shuffleMergedRemoteBytesRead_ = this.shuffleMergedRemoteBytesRead_;
            }

            if ((from_bitField1_ & 134217728) != 0) {
               result.shuffleMergedLocalBytesRead_ = this.shuffleMergedLocalBytesRead_;
            }

            if ((from_bitField1_ & 268435456) != 0) {
               result.shuffleRemoteReqsDuration_ = this.shuffleRemoteReqsDuration_;
            }

            if ((from_bitField1_ & 536870912) != 0) {
               result.shuffleMergedRemoteReqsDuration_ = this.shuffleMergedRemoteReqsDuration_;
            }

            if ((from_bitField1_ & 1073741824) != 0) {
               result.isShufflePushEnabled_ = this.isShufflePushEnabled_;
            }

            if ((from_bitField1_ & Integer.MIN_VALUE) != 0) {
               result.shuffleMergersCount_ = this.shuffleMergersCount_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof StageData) {
               return this.mergeFrom((StageData)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(StageData other) {
            if (other == StoreTypes.StageData.getDefaultInstance()) {
               return this;
            } else {
               if (other.status_ != 0) {
                  this.setStatusValue(other.getStatusValue());
               }

               if (other.getStageId() != 0L) {
                  this.setStageId(other.getStageId());
               }

               if (other.getAttemptId() != 0) {
                  this.setAttemptId(other.getAttemptId());
               }

               if (other.getNumTasks() != 0) {
                  this.setNumTasks(other.getNumTasks());
               }

               if (other.getNumActiveTasks() != 0) {
                  this.setNumActiveTasks(other.getNumActiveTasks());
               }

               if (other.getNumCompleteTasks() != 0) {
                  this.setNumCompleteTasks(other.getNumCompleteTasks());
               }

               if (other.getNumFailedTasks() != 0) {
                  this.setNumFailedTasks(other.getNumFailedTasks());
               }

               if (other.getNumKilledTasks() != 0) {
                  this.setNumKilledTasks(other.getNumKilledTasks());
               }

               if (other.getNumCompletedIndices() != 0) {
                  this.setNumCompletedIndices(other.getNumCompletedIndices());
               }

               if (other.hasSubmissionTime()) {
                  this.setSubmissionTime(other.getSubmissionTime());
               }

               if (other.hasFirstTaskLaunchedTime()) {
                  this.setFirstTaskLaunchedTime(other.getFirstTaskLaunchedTime());
               }

               if (other.hasCompletionTime()) {
                  this.setCompletionTime(other.getCompletionTime());
               }

               if (other.hasFailureReason()) {
                  this.failureReason_ = other.failureReason_;
                  this.bitField0_ |= 4096;
                  this.onChanged();
               }

               if (other.getExecutorDeserializeTime() != 0L) {
                  this.setExecutorDeserializeTime(other.getExecutorDeserializeTime());
               }

               if (other.getExecutorDeserializeCpuTime() != 0L) {
                  this.setExecutorDeserializeCpuTime(other.getExecutorDeserializeCpuTime());
               }

               if (other.getExecutorRunTime() != 0L) {
                  this.setExecutorRunTime(other.getExecutorRunTime());
               }

               if (other.getExecutorCpuTime() != 0L) {
                  this.setExecutorCpuTime(other.getExecutorCpuTime());
               }

               if (other.getResultSize() != 0L) {
                  this.setResultSize(other.getResultSize());
               }

               if (other.getJvmGcTime() != 0L) {
                  this.setJvmGcTime(other.getJvmGcTime());
               }

               if (other.getResultSerializationTime() != 0L) {
                  this.setResultSerializationTime(other.getResultSerializationTime());
               }

               if (other.getMemoryBytesSpilled() != 0L) {
                  this.setMemoryBytesSpilled(other.getMemoryBytesSpilled());
               }

               if (other.getDiskBytesSpilled() != 0L) {
                  this.setDiskBytesSpilled(other.getDiskBytesSpilled());
               }

               if (other.getPeakExecutionMemory() != 0L) {
                  this.setPeakExecutionMemory(other.getPeakExecutionMemory());
               }

               if (other.getInputBytes() != 0L) {
                  this.setInputBytes(other.getInputBytes());
               }

               if (other.getInputRecords() != 0L) {
                  this.setInputRecords(other.getInputRecords());
               }

               if (other.getOutputBytes() != 0L) {
                  this.setOutputBytes(other.getOutputBytes());
               }

               if (other.getOutputRecords() != 0L) {
                  this.setOutputRecords(other.getOutputRecords());
               }

               if (other.getShuffleRemoteBlocksFetched() != 0L) {
                  this.setShuffleRemoteBlocksFetched(other.getShuffleRemoteBlocksFetched());
               }

               if (other.getShuffleLocalBlocksFetched() != 0L) {
                  this.setShuffleLocalBlocksFetched(other.getShuffleLocalBlocksFetched());
               }

               if (other.getShuffleFetchWaitTime() != 0L) {
                  this.setShuffleFetchWaitTime(other.getShuffleFetchWaitTime());
               }

               if (other.getShuffleRemoteBytesRead() != 0L) {
                  this.setShuffleRemoteBytesRead(other.getShuffleRemoteBytesRead());
               }

               if (other.getShuffleRemoteBytesReadToDisk() != 0L) {
                  this.setShuffleRemoteBytesReadToDisk(other.getShuffleRemoteBytesReadToDisk());
               }

               if (other.getShuffleLocalBytesRead() != 0L) {
                  this.setShuffleLocalBytesRead(other.getShuffleLocalBytesRead());
               }

               if (other.getShuffleReadBytes() != 0L) {
                  this.setShuffleReadBytes(other.getShuffleReadBytes());
               }

               if (other.getShuffleReadRecords() != 0L) {
                  this.setShuffleReadRecords(other.getShuffleReadRecords());
               }

               if (other.getShuffleWriteBytes() != 0L) {
                  this.setShuffleWriteBytes(other.getShuffleWriteBytes());
               }

               if (other.getShuffleWriteTime() != 0L) {
                  this.setShuffleWriteTime(other.getShuffleWriteTime());
               }

               if (other.getShuffleWriteRecords() != 0L) {
                  this.setShuffleWriteRecords(other.getShuffleWriteRecords());
               }

               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField1_ |= 64;
                  this.onChanged();
               }

               if (other.hasDescription()) {
                  this.description_ = other.description_;
                  this.bitField1_ |= 128;
                  this.onChanged();
               }

               if (other.hasDetails()) {
                  this.details_ = other.details_;
                  this.bitField1_ |= 256;
                  this.onChanged();
               }

               if (other.hasSchedulingPool()) {
                  this.schedulingPool_ = other.schedulingPool_;
                  this.bitField1_ |= 512;
                  this.onChanged();
               }

               if (!other.rddIds_.isEmpty()) {
                  if (this.rddIds_.isEmpty()) {
                     this.rddIds_ = other.rddIds_;
                     this.rddIds_.makeImmutable();
                     this.bitField1_ |= 1024;
                  } else {
                     this.ensureRddIdsIsMutable();
                     this.rddIds_.addAll(other.rddIds_);
                  }

                  this.onChanged();
               }

               if (this.accumulatorUpdatesBuilder_ == null) {
                  if (!other.accumulatorUpdates_.isEmpty()) {
                     if (this.accumulatorUpdates_.isEmpty()) {
                        this.accumulatorUpdates_ = other.accumulatorUpdates_;
                        this.bitField1_ &= -2049;
                     } else {
                        this.ensureAccumulatorUpdatesIsMutable();
                        this.accumulatorUpdates_.addAll(other.accumulatorUpdates_);
                     }

                     this.onChanged();
                  }
               } else if (!other.accumulatorUpdates_.isEmpty()) {
                  if (this.accumulatorUpdatesBuilder_.isEmpty()) {
                     this.accumulatorUpdatesBuilder_.dispose();
                     this.accumulatorUpdatesBuilder_ = null;
                     this.accumulatorUpdates_ = other.accumulatorUpdates_;
                     this.bitField1_ &= -2049;
                     this.accumulatorUpdatesBuilder_ = StoreTypes.StageData.alwaysUseFieldBuilders ? this.getAccumulatorUpdatesFieldBuilder() : null;
                  } else {
                     this.accumulatorUpdatesBuilder_.addAllMessages(other.accumulatorUpdates_);
                  }
               }

               this.internalGetMutableTasks().mergeFrom(other.internalGetTasks());
               this.bitField1_ |= 4096;
               this.internalGetMutableExecutorSummary().mergeFrom(other.internalGetExecutorSummary());
               this.bitField1_ |= 8192;
               if (other.hasSpeculationSummary()) {
                  this.mergeSpeculationSummary(other.getSpeculationSummary());
               }

               this.internalGetMutableKilledTasksSummary().mergeFrom(other.internalGetKilledTasksSummary());
               this.bitField1_ |= 32768;
               if (other.getResourceProfileId() != 0) {
                  this.setResourceProfileId(other.getResourceProfileId());
               }

               if (other.hasPeakExecutorMetrics()) {
                  this.mergePeakExecutorMetrics(other.getPeakExecutorMetrics());
               }

               if (other.hasTaskMetricsDistributions()) {
                  this.mergeTaskMetricsDistributions(other.getTaskMetricsDistributions());
               }

               if (other.hasExecutorMetricsDistributions()) {
                  this.mergeExecutorMetricsDistributions(other.getExecutorMetricsDistributions());
               }

               if (other.getShuffleCorruptMergedBlockChunks() != 0L) {
                  this.setShuffleCorruptMergedBlockChunks(other.getShuffleCorruptMergedBlockChunks());
               }

               if (other.getShuffleMergedFetchFallbackCount() != 0L) {
                  this.setShuffleMergedFetchFallbackCount(other.getShuffleMergedFetchFallbackCount());
               }

               if (other.getShuffleMergedRemoteBlocksFetched() != 0L) {
                  this.setShuffleMergedRemoteBlocksFetched(other.getShuffleMergedRemoteBlocksFetched());
               }

               if (other.getShuffleMergedLocalBlocksFetched() != 0L) {
                  this.setShuffleMergedLocalBlocksFetched(other.getShuffleMergedLocalBlocksFetched());
               }

               if (other.getShuffleMergedRemoteChunksFetched() != 0L) {
                  this.setShuffleMergedRemoteChunksFetched(other.getShuffleMergedRemoteChunksFetched());
               }

               if (other.getShuffleMergedLocalChunksFetched() != 0L) {
                  this.setShuffleMergedLocalChunksFetched(other.getShuffleMergedLocalChunksFetched());
               }

               if (other.getShuffleMergedRemoteBytesRead() != 0L) {
                  this.setShuffleMergedRemoteBytesRead(other.getShuffleMergedRemoteBytesRead());
               }

               if (other.getShuffleMergedLocalBytesRead() != 0L) {
                  this.setShuffleMergedLocalBytesRead(other.getShuffleMergedLocalBytesRead());
               }

               if (other.getShuffleRemoteReqsDuration() != 0L) {
                  this.setShuffleRemoteReqsDuration(other.getShuffleRemoteReqsDuration());
               }

               if (other.getShuffleMergedRemoteReqsDuration() != 0L) {
                  this.setShuffleMergedRemoteReqsDuration(other.getShuffleMergedRemoteReqsDuration());
               }

               if (other.getIsShufflePushEnabled()) {
                  this.setIsShufflePushEnabled(other.getIsShufflePushEnabled());
               }

               if (other.getShuffleMergersCount() != 0) {
                  this.setShuffleMergersCount(other.getShuffleMergersCount());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.status_ = input.readEnum();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.stageId_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.attemptId_ = input.readInt32();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.numTasks_ = input.readInt32();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.numActiveTasks_ = input.readInt32();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.numCompleteTasks_ = input.readInt32();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.numFailedTasks_ = input.readInt32();
                           this.bitField0_ |= 64;
                           break;
                        case 64:
                           this.numKilledTasks_ = input.readInt32();
                           this.bitField0_ |= 128;
                           break;
                        case 72:
                           this.numCompletedIndices_ = input.readInt32();
                           this.bitField0_ |= 256;
                           break;
                        case 80:
                           this.submissionTime_ = input.readInt64();
                           this.bitField0_ |= 512;
                           break;
                        case 88:
                           this.firstTaskLaunchedTime_ = input.readInt64();
                           this.bitField0_ |= 1024;
                           break;
                        case 96:
                           this.completionTime_ = input.readInt64();
                           this.bitField0_ |= 2048;
                           break;
                        case 106:
                           this.failureReason_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4096;
                           break;
                        case 112:
                           this.executorDeserializeTime_ = input.readInt64();
                           this.bitField0_ |= 8192;
                           break;
                        case 120:
                           this.executorDeserializeCpuTime_ = input.readInt64();
                           this.bitField0_ |= 16384;
                           break;
                        case 128:
                           this.executorRunTime_ = input.readInt64();
                           this.bitField0_ |= 32768;
                           break;
                        case 136:
                           this.executorCpuTime_ = input.readInt64();
                           this.bitField0_ |= 65536;
                           break;
                        case 144:
                           this.resultSize_ = input.readInt64();
                           this.bitField0_ |= 131072;
                           break;
                        case 152:
                           this.jvmGcTime_ = input.readInt64();
                           this.bitField0_ |= 262144;
                           break;
                        case 160:
                           this.resultSerializationTime_ = input.readInt64();
                           this.bitField0_ |= 524288;
                           break;
                        case 168:
                           this.memoryBytesSpilled_ = input.readInt64();
                           this.bitField0_ |= 1048576;
                           break;
                        case 176:
                           this.diskBytesSpilled_ = input.readInt64();
                           this.bitField0_ |= 2097152;
                           break;
                        case 184:
                           this.peakExecutionMemory_ = input.readInt64();
                           this.bitField0_ |= 4194304;
                           break;
                        case 192:
                           this.inputBytes_ = input.readInt64();
                           this.bitField0_ |= 8388608;
                           break;
                        case 200:
                           this.inputRecords_ = input.readInt64();
                           this.bitField0_ |= 16777216;
                           break;
                        case 208:
                           this.outputBytes_ = input.readInt64();
                           this.bitField0_ |= 33554432;
                           break;
                        case 216:
                           this.outputRecords_ = input.readInt64();
                           this.bitField0_ |= 67108864;
                           break;
                        case 224:
                           this.shuffleRemoteBlocksFetched_ = input.readInt64();
                           this.bitField0_ |= 134217728;
                           break;
                        case 232:
                           this.shuffleLocalBlocksFetched_ = input.readInt64();
                           this.bitField0_ |= 268435456;
                           break;
                        case 240:
                           this.shuffleFetchWaitTime_ = input.readInt64();
                           this.bitField0_ |= 536870912;
                           break;
                        case 248:
                           this.shuffleRemoteBytesRead_ = input.readInt64();
                           this.bitField0_ |= 1073741824;
                           break;
                        case 256:
                           this.shuffleRemoteBytesReadToDisk_ = input.readInt64();
                           this.bitField0_ |= Integer.MIN_VALUE;
                           break;
                        case 264:
                           this.shuffleLocalBytesRead_ = input.readInt64();
                           this.bitField1_ |= 1;
                           break;
                        case 272:
                           this.shuffleReadBytes_ = input.readInt64();
                           this.bitField1_ |= 2;
                           break;
                        case 280:
                           this.shuffleReadRecords_ = input.readInt64();
                           this.bitField1_ |= 4;
                           break;
                        case 288:
                           this.shuffleWriteBytes_ = input.readInt64();
                           this.bitField1_ |= 8;
                           break;
                        case 296:
                           this.shuffleWriteTime_ = input.readInt64();
                           this.bitField1_ |= 16;
                           break;
                        case 304:
                           this.shuffleWriteRecords_ = input.readInt64();
                           this.bitField1_ |= 32;
                           break;
                        case 314:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField1_ |= 64;
                           break;
                        case 322:
                           this.description_ = input.readStringRequireUtf8();
                           this.bitField1_ |= 128;
                           break;
                        case 330:
                           this.details_ = input.readStringRequireUtf8();
                           this.bitField1_ |= 256;
                           break;
                        case 338:
                           this.schedulingPool_ = input.readStringRequireUtf8();
                           this.bitField1_ |= 512;
                           break;
                        case 344:
                           long v = input.readInt64();
                           this.ensureRddIdsIsMutable();
                           this.rddIds_.addLong(v);
                           break;
                        case 346:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           this.ensureRddIdsIsMutable();

                           while(input.getBytesUntilLimit() > 0) {
                              this.rddIds_.addLong(input.readInt64());
                           }

                           input.popLimit(limit);
                           break;
                        case 354:
                           AccumulableInfo m = (AccumulableInfo)input.readMessage(StoreTypes.AccumulableInfo.parser(), extensionRegistry);
                           if (this.accumulatorUpdatesBuilder_ == null) {
                              this.ensureAccumulatorUpdatesIsMutable();
                              this.accumulatorUpdates_.add(m);
                           } else {
                              this.accumulatorUpdatesBuilder_.addMessage(m);
                           }
                           break;
                        case 362:
                           MapEntry<Long, TaskData> tasks__ = (MapEntry)input.readMessage(StoreTypes.StageData.TasksDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableTasks().ensureBuilderMap().put((Long)tasks__.getKey(), (TaskDataOrBuilder)tasks__.getValue());
                           this.bitField1_ |= 4096;
                           break;
                        case 370:
                           MapEntry<String, ExecutorStageSummary> executorSummary__ = (MapEntry)input.readMessage(StoreTypes.StageData.ExecutorSummaryDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableExecutorSummary().ensureBuilderMap().put((String)executorSummary__.getKey(), (ExecutorStageSummaryOrBuilder)executorSummary__.getValue());
                           this.bitField1_ |= 8192;
                           break;
                        case 378:
                           input.readMessage((MessageLite.Builder)this.getSpeculationSummaryFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField1_ |= 16384;
                           break;
                        case 386:
                           MapEntry<String, Integer> killedTasksSummary__ = (MapEntry)input.readMessage(StoreTypes.StageData.KilledTasksSummaryDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableKilledTasksSummary().getMutableMap().put((String)killedTasksSummary__.getKey(), (Integer)killedTasksSummary__.getValue());
                           this.bitField1_ |= 32768;
                           break;
                        case 392:
                           this.resourceProfileId_ = input.readInt32();
                           this.bitField1_ |= 65536;
                           break;
                        case 402:
                           input.readMessage((MessageLite.Builder)this.getPeakExecutorMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField1_ |= 131072;
                           break;
                        case 410:
                           input.readMessage((MessageLite.Builder)this.getTaskMetricsDistributionsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField1_ |= 262144;
                           break;
                        case 418:
                           input.readMessage((MessageLite.Builder)this.getExecutorMetricsDistributionsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField1_ |= 524288;
                           break;
                        case 424:
                           this.shuffleCorruptMergedBlockChunks_ = input.readInt64();
                           this.bitField1_ |= 1048576;
                           break;
                        case 432:
                           this.shuffleMergedFetchFallbackCount_ = input.readInt64();
                           this.bitField1_ |= 2097152;
                           break;
                        case 440:
                           this.shuffleMergedRemoteBlocksFetched_ = input.readInt64();
                           this.bitField1_ |= 4194304;
                           break;
                        case 448:
                           this.shuffleMergedLocalBlocksFetched_ = input.readInt64();
                           this.bitField1_ |= 8388608;
                           break;
                        case 456:
                           this.shuffleMergedRemoteChunksFetched_ = input.readInt64();
                           this.bitField1_ |= 16777216;
                           break;
                        case 464:
                           this.shuffleMergedLocalChunksFetched_ = input.readInt64();
                           this.bitField1_ |= 33554432;
                           break;
                        case 472:
                           this.shuffleMergedRemoteBytesRead_ = input.readInt64();
                           this.bitField1_ |= 67108864;
                           break;
                        case 480:
                           this.shuffleMergedLocalBytesRead_ = input.readInt64();
                           this.bitField1_ |= 134217728;
                           break;
                        case 488:
                           this.shuffleRemoteReqsDuration_ = input.readInt64();
                           this.bitField1_ |= 268435456;
                           break;
                        case 496:
                           this.shuffleMergedRemoteReqsDuration_ = input.readInt64();
                           this.bitField1_ |= 536870912;
                           break;
                        case 504:
                           this.isShufflePushEnabled_ = input.readBool();
                           this.bitField1_ |= 1073741824;
                           break;
                        case 512:
                           this.shuffleMergersCount_ = input.readInt32();
                           this.bitField1_ |= Integer.MIN_VALUE;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public int getStatusValue() {
            return this.status_;
         }

         public Builder setStatusValue(int value) {
            this.status_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public StageStatus getStatus() {
            StageStatus result = StoreTypes.StageStatus.forNumber(this.status_);
            return result == null ? StoreTypes.StageStatus.UNRECOGNIZED : result;
         }

         public Builder setStatus(StageStatus value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.bitField0_ |= 1;
               this.status_ = value.getNumber();
               this.onChanged();
               return this;
            }
         }

         public Builder clearStatus() {
            this.bitField0_ &= -2;
            this.status_ = 0;
            this.onChanged();
            return this;
         }

         public long getStageId() {
            return this.stageId_;
         }

         public Builder setStageId(long value) {
            this.stageId_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearStageId() {
            this.bitField0_ &= -3;
            this.stageId_ = 0L;
            this.onChanged();
            return this;
         }

         public int getAttemptId() {
            return this.attemptId_;
         }

         public Builder setAttemptId(int value) {
            this.attemptId_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearAttemptId() {
            this.bitField0_ &= -5;
            this.attemptId_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumTasks() {
            return this.numTasks_;
         }

         public Builder setNumTasks(int value) {
            this.numTasks_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearNumTasks() {
            this.bitField0_ &= -9;
            this.numTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumActiveTasks() {
            return this.numActiveTasks_;
         }

         public Builder setNumActiveTasks(int value) {
            this.numActiveTasks_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearNumActiveTasks() {
            this.bitField0_ &= -17;
            this.numActiveTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumCompleteTasks() {
            return this.numCompleteTasks_;
         }

         public Builder setNumCompleteTasks(int value) {
            this.numCompleteTasks_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearNumCompleteTasks() {
            this.bitField0_ &= -33;
            this.numCompleteTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumFailedTasks() {
            return this.numFailedTasks_;
         }

         public Builder setNumFailedTasks(int value) {
            this.numFailedTasks_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearNumFailedTasks() {
            this.bitField0_ &= -65;
            this.numFailedTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumKilledTasks() {
            return this.numKilledTasks_;
         }

         public Builder setNumKilledTasks(int value) {
            this.numKilledTasks_ = value;
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearNumKilledTasks() {
            this.bitField0_ &= -129;
            this.numKilledTasks_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumCompletedIndices() {
            return this.numCompletedIndices_;
         }

         public Builder setNumCompletedIndices(int value) {
            this.numCompletedIndices_ = value;
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearNumCompletedIndices() {
            this.bitField0_ &= -257;
            this.numCompletedIndices_ = 0;
            this.onChanged();
            return this;
         }

         public boolean hasSubmissionTime() {
            return (this.bitField0_ & 512) != 0;
         }

         public long getSubmissionTime() {
            return this.submissionTime_;
         }

         public Builder setSubmissionTime(long value) {
            this.submissionTime_ = value;
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder clearSubmissionTime() {
            this.bitField0_ &= -513;
            this.submissionTime_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasFirstTaskLaunchedTime() {
            return (this.bitField0_ & 1024) != 0;
         }

         public long getFirstTaskLaunchedTime() {
            return this.firstTaskLaunchedTime_;
         }

         public Builder setFirstTaskLaunchedTime(long value) {
            this.firstTaskLaunchedTime_ = value;
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder clearFirstTaskLaunchedTime() {
            this.bitField0_ &= -1025;
            this.firstTaskLaunchedTime_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasCompletionTime() {
            return (this.bitField0_ & 2048) != 0;
         }

         public long getCompletionTime() {
            return this.completionTime_;
         }

         public Builder setCompletionTime(long value) {
            this.completionTime_ = value;
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder clearCompletionTime() {
            this.bitField0_ &= -2049;
            this.completionTime_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasFailureReason() {
            return (this.bitField0_ & 4096) != 0;
         }

         public String getFailureReason() {
            Object ref = this.failureReason_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.failureReason_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getFailureReasonBytes() {
            Object ref = this.failureReason_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.failureReason_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setFailureReason(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.failureReason_ = value;
               this.bitField0_ |= 4096;
               this.onChanged();
               return this;
            }
         }

         public Builder clearFailureReason() {
            this.failureReason_ = StoreTypes.StageData.getDefaultInstance().getFailureReason();
            this.bitField0_ &= -4097;
            this.onChanged();
            return this;
         }

         public Builder setFailureReasonBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StageData.checkByteStringIsUtf8(value);
               this.failureReason_ = value;
               this.bitField0_ |= 4096;
               this.onChanged();
               return this;
            }
         }

         public long getExecutorDeserializeTime() {
            return this.executorDeserializeTime_;
         }

         public Builder setExecutorDeserializeTime(long value) {
            this.executorDeserializeTime_ = value;
            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorDeserializeTime() {
            this.bitField0_ &= -8193;
            this.executorDeserializeTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getExecutorDeserializeCpuTime() {
            return this.executorDeserializeCpuTime_;
         }

         public Builder setExecutorDeserializeCpuTime(long value) {
            this.executorDeserializeCpuTime_ = value;
            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorDeserializeCpuTime() {
            this.bitField0_ &= -16385;
            this.executorDeserializeCpuTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getExecutorRunTime() {
            return this.executorRunTime_;
         }

         public Builder setExecutorRunTime(long value) {
            this.executorRunTime_ = value;
            this.bitField0_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorRunTime() {
            this.bitField0_ &= -32769;
            this.executorRunTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getExecutorCpuTime() {
            return this.executorCpuTime_;
         }

         public Builder setExecutorCpuTime(long value) {
            this.executorCpuTime_ = value;
            this.bitField0_ |= 65536;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorCpuTime() {
            this.bitField0_ &= -65537;
            this.executorCpuTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getResultSize() {
            return this.resultSize_;
         }

         public Builder setResultSize(long value) {
            this.resultSize_ = value;
            this.bitField0_ |= 131072;
            this.onChanged();
            return this;
         }

         public Builder clearResultSize() {
            this.bitField0_ &= -131073;
            this.resultSize_ = 0L;
            this.onChanged();
            return this;
         }

         public long getJvmGcTime() {
            return this.jvmGcTime_;
         }

         public Builder setJvmGcTime(long value) {
            this.jvmGcTime_ = value;
            this.bitField0_ |= 262144;
            this.onChanged();
            return this;
         }

         public Builder clearJvmGcTime() {
            this.bitField0_ &= -262145;
            this.jvmGcTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getResultSerializationTime() {
            return this.resultSerializationTime_;
         }

         public Builder setResultSerializationTime(long value) {
            this.resultSerializationTime_ = value;
            this.bitField0_ |= 524288;
            this.onChanged();
            return this;
         }

         public Builder clearResultSerializationTime() {
            this.bitField0_ &= -524289;
            this.resultSerializationTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getMemoryBytesSpilled() {
            return this.memoryBytesSpilled_;
         }

         public Builder setMemoryBytesSpilled(long value) {
            this.memoryBytesSpilled_ = value;
            this.bitField0_ |= 1048576;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryBytesSpilled() {
            this.bitField0_ &= -1048577;
            this.memoryBytesSpilled_ = 0L;
            this.onChanged();
            return this;
         }

         public long getDiskBytesSpilled() {
            return this.diskBytesSpilled_;
         }

         public Builder setDiskBytesSpilled(long value) {
            this.diskBytesSpilled_ = value;
            this.bitField0_ |= 2097152;
            this.onChanged();
            return this;
         }

         public Builder clearDiskBytesSpilled() {
            this.bitField0_ &= -2097153;
            this.diskBytesSpilled_ = 0L;
            this.onChanged();
            return this;
         }

         public long getPeakExecutionMemory() {
            return this.peakExecutionMemory_;
         }

         public Builder setPeakExecutionMemory(long value) {
            this.peakExecutionMemory_ = value;
            this.bitField0_ |= 4194304;
            this.onChanged();
            return this;
         }

         public Builder clearPeakExecutionMemory() {
            this.bitField0_ &= -4194305;
            this.peakExecutionMemory_ = 0L;
            this.onChanged();
            return this;
         }

         public long getInputBytes() {
            return this.inputBytes_;
         }

         public Builder setInputBytes(long value) {
            this.inputBytes_ = value;
            this.bitField0_ |= 8388608;
            this.onChanged();
            return this;
         }

         public Builder clearInputBytes() {
            this.bitField0_ &= -8388609;
            this.inputBytes_ = 0L;
            this.onChanged();
            return this;
         }

         public long getInputRecords() {
            return this.inputRecords_;
         }

         public Builder setInputRecords(long value) {
            this.inputRecords_ = value;
            this.bitField0_ |= 16777216;
            this.onChanged();
            return this;
         }

         public Builder clearInputRecords() {
            this.bitField0_ &= -16777217;
            this.inputRecords_ = 0L;
            this.onChanged();
            return this;
         }

         public long getOutputBytes() {
            return this.outputBytes_;
         }

         public Builder setOutputBytes(long value) {
            this.outputBytes_ = value;
            this.bitField0_ |= 33554432;
            this.onChanged();
            return this;
         }

         public Builder clearOutputBytes() {
            this.bitField0_ &= -33554433;
            this.outputBytes_ = 0L;
            this.onChanged();
            return this;
         }

         public long getOutputRecords() {
            return this.outputRecords_;
         }

         public Builder setOutputRecords(long value) {
            this.outputRecords_ = value;
            this.bitField0_ |= 67108864;
            this.onChanged();
            return this;
         }

         public Builder clearOutputRecords() {
            this.bitField0_ &= -67108865;
            this.outputRecords_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleRemoteBlocksFetched() {
            return this.shuffleRemoteBlocksFetched_;
         }

         public Builder setShuffleRemoteBlocksFetched(long value) {
            this.shuffleRemoteBlocksFetched_ = value;
            this.bitField0_ |= 134217728;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteBlocksFetched() {
            this.bitField0_ &= -134217729;
            this.shuffleRemoteBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleLocalBlocksFetched() {
            return this.shuffleLocalBlocksFetched_;
         }

         public Builder setShuffleLocalBlocksFetched(long value) {
            this.shuffleLocalBlocksFetched_ = value;
            this.bitField0_ |= 268435456;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleLocalBlocksFetched() {
            this.bitField0_ &= -268435457;
            this.shuffleLocalBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleFetchWaitTime() {
            return this.shuffleFetchWaitTime_;
         }

         public Builder setShuffleFetchWaitTime(long value) {
            this.shuffleFetchWaitTime_ = value;
            this.bitField0_ |= 536870912;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleFetchWaitTime() {
            this.bitField0_ &= -536870913;
            this.shuffleFetchWaitTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleRemoteBytesRead() {
            return this.shuffleRemoteBytesRead_;
         }

         public Builder setShuffleRemoteBytesRead(long value) {
            this.shuffleRemoteBytesRead_ = value;
            this.bitField0_ |= 1073741824;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteBytesRead() {
            this.bitField0_ &= -1073741825;
            this.shuffleRemoteBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleRemoteBytesReadToDisk() {
            return this.shuffleRemoteBytesReadToDisk_;
         }

         public Builder setShuffleRemoteBytesReadToDisk(long value) {
            this.shuffleRemoteBytesReadToDisk_ = value;
            this.bitField0_ |= Integer.MIN_VALUE;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteBytesReadToDisk() {
            this.bitField0_ &= Integer.MAX_VALUE;
            this.shuffleRemoteBytesReadToDisk_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleLocalBytesRead() {
            return this.shuffleLocalBytesRead_;
         }

         public Builder setShuffleLocalBytesRead(long value) {
            this.shuffleLocalBytesRead_ = value;
            this.bitField1_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleLocalBytesRead() {
            this.bitField1_ &= -2;
            this.shuffleLocalBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleReadBytes() {
            return this.shuffleReadBytes_;
         }

         public Builder setShuffleReadBytes(long value) {
            this.shuffleReadBytes_ = value;
            this.bitField1_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleReadBytes() {
            this.bitField1_ &= -3;
            this.shuffleReadBytes_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleReadRecords() {
            return this.shuffleReadRecords_;
         }

         public Builder setShuffleReadRecords(long value) {
            this.shuffleReadRecords_ = value;
            this.bitField1_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleReadRecords() {
            this.bitField1_ &= -5;
            this.shuffleReadRecords_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleWriteBytes() {
            return this.shuffleWriteBytes_;
         }

         public Builder setShuffleWriteBytes(long value) {
            this.shuffleWriteBytes_ = value;
            this.bitField1_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleWriteBytes() {
            this.bitField1_ &= -9;
            this.shuffleWriteBytes_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleWriteTime() {
            return this.shuffleWriteTime_;
         }

         public Builder setShuffleWriteTime(long value) {
            this.shuffleWriteTime_ = value;
            this.bitField1_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleWriteTime() {
            this.bitField1_ &= -17;
            this.shuffleWriteTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleWriteRecords() {
            return this.shuffleWriteRecords_;
         }

         public Builder setShuffleWriteRecords(long value) {
            this.shuffleWriteRecords_ = value;
            this.bitField1_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleWriteRecords() {
            this.bitField1_ &= -33;
            this.shuffleWriteRecords_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasName() {
            return (this.bitField1_ & 64) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField1_ |= 64;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.StageData.getDefaultInstance().getName();
            this.bitField1_ &= -65;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StageData.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField1_ |= 64;
               this.onChanged();
               return this;
            }
         }

         public boolean hasDescription() {
            return (this.bitField1_ & 128) != 0;
         }

         public String getDescription() {
            Object ref = this.description_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.description_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getDescriptionBytes() {
            Object ref = this.description_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.description_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setDescription(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.description_ = value;
               this.bitField1_ |= 128;
               this.onChanged();
               return this;
            }
         }

         public Builder clearDescription() {
            this.description_ = StoreTypes.StageData.getDefaultInstance().getDescription();
            this.bitField1_ &= -129;
            this.onChanged();
            return this;
         }

         public Builder setDescriptionBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StageData.checkByteStringIsUtf8(value);
               this.description_ = value;
               this.bitField1_ |= 128;
               this.onChanged();
               return this;
            }
         }

         public boolean hasDetails() {
            return (this.bitField1_ & 256) != 0;
         }

         public String getDetails() {
            Object ref = this.details_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.details_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getDetailsBytes() {
            Object ref = this.details_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.details_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setDetails(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.details_ = value;
               this.bitField1_ |= 256;
               this.onChanged();
               return this;
            }
         }

         public Builder clearDetails() {
            this.details_ = StoreTypes.StageData.getDefaultInstance().getDetails();
            this.bitField1_ &= -257;
            this.onChanged();
            return this;
         }

         public Builder setDetailsBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StageData.checkByteStringIsUtf8(value);
               this.details_ = value;
               this.bitField1_ |= 256;
               this.onChanged();
               return this;
            }
         }

         public boolean hasSchedulingPool() {
            return (this.bitField1_ & 512) != 0;
         }

         public String getSchedulingPool() {
            Object ref = this.schedulingPool_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.schedulingPool_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getSchedulingPoolBytes() {
            Object ref = this.schedulingPool_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.schedulingPool_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setSchedulingPool(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.schedulingPool_ = value;
               this.bitField1_ |= 512;
               this.onChanged();
               return this;
            }
         }

         public Builder clearSchedulingPool() {
            this.schedulingPool_ = StoreTypes.StageData.getDefaultInstance().getSchedulingPool();
            this.bitField1_ &= -513;
            this.onChanged();
            return this;
         }

         public Builder setSchedulingPoolBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StageData.checkByteStringIsUtf8(value);
               this.schedulingPool_ = value;
               this.bitField1_ |= 512;
               this.onChanged();
               return this;
            }
         }

         private void ensureRddIdsIsMutable() {
            if (!this.rddIds_.isModifiable()) {
               this.rddIds_ = (Internal.LongList)StoreTypes.StageData.makeMutableCopy(this.rddIds_);
            }

            this.bitField1_ |= 1024;
         }

         public List getRddIdsList() {
            this.rddIds_.makeImmutable();
            return this.rddIds_;
         }

         public int getRddIdsCount() {
            return this.rddIds_.size();
         }

         public long getRddIds(int index) {
            return this.rddIds_.getLong(index);
         }

         public Builder setRddIds(int index, long value) {
            this.ensureRddIdsIsMutable();
            this.rddIds_.setLong(index, value);
            this.bitField1_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder addRddIds(long value) {
            this.ensureRddIdsIsMutable();
            this.rddIds_.addLong(value);
            this.bitField1_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder addAllRddIds(Iterable values) {
            this.ensureRddIdsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.rddIds_);
            this.bitField1_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder clearRddIds() {
            this.rddIds_ = StoreTypes.StageData.emptyLongList();
            this.bitField1_ &= -1025;
            this.onChanged();
            return this;
         }

         private void ensureAccumulatorUpdatesIsMutable() {
            if ((this.bitField1_ & 2048) == 0) {
               this.accumulatorUpdates_ = new ArrayList(this.accumulatorUpdates_);
               this.bitField1_ |= 2048;
            }

         }

         public List getAccumulatorUpdatesList() {
            return this.accumulatorUpdatesBuilder_ == null ? Collections.unmodifiableList(this.accumulatorUpdates_) : this.accumulatorUpdatesBuilder_.getMessageList();
         }

         public int getAccumulatorUpdatesCount() {
            return this.accumulatorUpdatesBuilder_ == null ? this.accumulatorUpdates_.size() : this.accumulatorUpdatesBuilder_.getCount();
         }

         public AccumulableInfo getAccumulatorUpdates(int index) {
            return this.accumulatorUpdatesBuilder_ == null ? (AccumulableInfo)this.accumulatorUpdates_.get(index) : (AccumulableInfo)this.accumulatorUpdatesBuilder_.getMessage(index);
         }

         public Builder setAccumulatorUpdates(int index, AccumulableInfo value) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.set(index, value);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setAccumulatorUpdates(int index, AccumulableInfo.Builder builderForValue) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAccumulatorUpdates(AccumulableInfo value) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(value);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addAccumulatorUpdates(int index, AccumulableInfo value) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(index, value);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addAccumulatorUpdates(AccumulableInfo.Builder builderForValue) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addAccumulatorUpdates(int index, AccumulableInfo.Builder builderForValue) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllAccumulatorUpdates(Iterable values) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.accumulatorUpdates_);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearAccumulatorUpdates() {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.accumulatorUpdates_ = Collections.emptyList();
               this.bitField1_ &= -2049;
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.clear();
            }

            return this;
         }

         public Builder removeAccumulatorUpdates(int index) {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.ensureAccumulatorUpdatesIsMutable();
               this.accumulatorUpdates_.remove(index);
               this.onChanged();
            } else {
               this.accumulatorUpdatesBuilder_.remove(index);
            }

            return this;
         }

         public AccumulableInfo.Builder getAccumulatorUpdatesBuilder(int index) {
            return (AccumulableInfo.Builder)this.getAccumulatorUpdatesFieldBuilder().getBuilder(index);
         }

         public AccumulableInfoOrBuilder getAccumulatorUpdatesOrBuilder(int index) {
            return this.accumulatorUpdatesBuilder_ == null ? (AccumulableInfoOrBuilder)this.accumulatorUpdates_.get(index) : (AccumulableInfoOrBuilder)this.accumulatorUpdatesBuilder_.getMessageOrBuilder(index);
         }

         public List getAccumulatorUpdatesOrBuilderList() {
            return this.accumulatorUpdatesBuilder_ != null ? this.accumulatorUpdatesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.accumulatorUpdates_);
         }

         public AccumulableInfo.Builder addAccumulatorUpdatesBuilder() {
            return (AccumulableInfo.Builder)this.getAccumulatorUpdatesFieldBuilder().addBuilder(StoreTypes.AccumulableInfo.getDefaultInstance());
         }

         public AccumulableInfo.Builder addAccumulatorUpdatesBuilder(int index) {
            return (AccumulableInfo.Builder)this.getAccumulatorUpdatesFieldBuilder().addBuilder(index, StoreTypes.AccumulableInfo.getDefaultInstance());
         }

         public List getAccumulatorUpdatesBuilderList() {
            return this.getAccumulatorUpdatesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getAccumulatorUpdatesFieldBuilder() {
            if (this.accumulatorUpdatesBuilder_ == null) {
               this.accumulatorUpdatesBuilder_ = new RepeatedFieldBuilder(this.accumulatorUpdates_, (this.bitField1_ & 2048) != 0, this.getParentForChildren(), this.isClean());
               this.accumulatorUpdates_ = null;
            }

            return this.accumulatorUpdatesBuilder_;
         }

         private MapFieldBuilder internalGetTasks() {
            return this.tasks_ == null ? new MapFieldBuilder(tasksConverter) : this.tasks_;
         }

         private MapFieldBuilder internalGetMutableTasks() {
            if (this.tasks_ == null) {
               this.tasks_ = new MapFieldBuilder(tasksConverter);
            }

            this.bitField1_ |= 4096;
            this.onChanged();
            return this.tasks_;
         }

         public int getTasksCount() {
            return this.internalGetTasks().ensureBuilderMap().size();
         }

         public boolean containsTasks(long key) {
            return this.internalGetTasks().ensureBuilderMap().containsKey(key);
         }

         /** @deprecated */
         @Deprecated
         public Map getTasks() {
            return this.getTasksMap();
         }

         public Map getTasksMap() {
            return this.internalGetTasks().getImmutableMap();
         }

         public TaskData getTasksOrDefault(long key, TaskData defaultValue) {
            Map<Long, TaskDataOrBuilder> map = this.internalGetMutableTasks().ensureBuilderMap();
            return map.containsKey(key) ? tasksConverter.build((TaskDataOrBuilder)map.get(key)) : defaultValue;
         }

         public TaskData getTasksOrThrow(long key) {
            Map<Long, TaskDataOrBuilder> map = this.internalGetMutableTasks().ensureBuilderMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return tasksConverter.build((TaskDataOrBuilder)map.get(key));
            }
         }

         public Builder clearTasks() {
            this.bitField1_ &= -4097;
            this.internalGetMutableTasks().clear();
            return this;
         }

         public Builder removeTasks(long key) {
            this.internalGetMutableTasks().ensureBuilderMap().remove(key);
            return this;
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableTasks() {
            this.bitField1_ |= 4096;
            return this.internalGetMutableTasks().ensureMessageMap();
         }

         public Builder putTasks(long key, TaskData value) {
            if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableTasks().ensureBuilderMap().put(key, value);
               this.bitField1_ |= 4096;
               return this;
            }
         }

         public Builder putAllTasks(Map values) {
            for(Map.Entry e : values.entrySet()) {
               if (e.getKey() == null || e.getValue() == null) {
                  throw new NullPointerException();
               }
            }

            this.internalGetMutableTasks().ensureBuilderMap().putAll(values);
            this.bitField1_ |= 4096;
            return this;
         }

         public TaskData.Builder putTasksBuilderIfAbsent(long key) {
            Map<Long, TaskDataOrBuilder> builderMap = this.internalGetMutableTasks().ensureBuilderMap();
            TaskDataOrBuilder entry = (TaskDataOrBuilder)builderMap.get(key);
            if (entry == null) {
               entry = StoreTypes.TaskData.newBuilder();
               builderMap.put(key, entry);
            }

            if (entry instanceof TaskData) {
               entry = ((TaskData)entry).toBuilder();
               builderMap.put(key, entry);
            }

            return (TaskData.Builder)entry;
         }

         private MapFieldBuilder internalGetExecutorSummary() {
            return this.executorSummary_ == null ? new MapFieldBuilder(executorSummaryConverter) : this.executorSummary_;
         }

         private MapFieldBuilder internalGetMutableExecutorSummary() {
            if (this.executorSummary_ == null) {
               this.executorSummary_ = new MapFieldBuilder(executorSummaryConverter);
            }

            this.bitField1_ |= 8192;
            this.onChanged();
            return this.executorSummary_;
         }

         public int getExecutorSummaryCount() {
            return this.internalGetExecutorSummary().ensureBuilderMap().size();
         }

         public boolean containsExecutorSummary(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetExecutorSummary().ensureBuilderMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getExecutorSummary() {
            return this.getExecutorSummaryMap();
         }

         public Map getExecutorSummaryMap() {
            return this.internalGetExecutorSummary().getImmutableMap();
         }

         public ExecutorStageSummary getExecutorSummaryOrDefault(String key, ExecutorStageSummary defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, ExecutorStageSummaryOrBuilder> map = this.internalGetMutableExecutorSummary().ensureBuilderMap();
               return map.containsKey(key) ? executorSummaryConverter.build((ExecutorStageSummaryOrBuilder)map.get(key)) : defaultValue;
            }
         }

         public ExecutorStageSummary getExecutorSummaryOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, ExecutorStageSummaryOrBuilder> map = this.internalGetMutableExecutorSummary().ensureBuilderMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return executorSummaryConverter.build((ExecutorStageSummaryOrBuilder)map.get(key));
               }
            }
         }

         public Builder clearExecutorSummary() {
            this.bitField1_ &= -8193;
            this.internalGetMutableExecutorSummary().clear();
            return this;
         }

         public Builder removeExecutorSummary(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableExecutorSummary().ensureBuilderMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableExecutorSummary() {
            this.bitField1_ |= 8192;
            return this.internalGetMutableExecutorSummary().ensureMessageMap();
         }

         public Builder putExecutorSummary(String key, ExecutorStageSummary value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableExecutorSummary().ensureBuilderMap().put(key, value);
               this.bitField1_ |= 8192;
               return this;
            }
         }

         public Builder putAllExecutorSummary(Map values) {
            for(Map.Entry e : values.entrySet()) {
               if (e.getKey() == null || e.getValue() == null) {
                  throw new NullPointerException();
               }
            }

            this.internalGetMutableExecutorSummary().ensureBuilderMap().putAll(values);
            this.bitField1_ |= 8192;
            return this;
         }

         public ExecutorStageSummary.Builder putExecutorSummaryBuilderIfAbsent(String key) {
            Map<String, ExecutorStageSummaryOrBuilder> builderMap = this.internalGetMutableExecutorSummary().ensureBuilderMap();
            ExecutorStageSummaryOrBuilder entry = (ExecutorStageSummaryOrBuilder)builderMap.get(key);
            if (entry == null) {
               entry = StoreTypes.ExecutorStageSummary.newBuilder();
               builderMap.put(key, entry);
            }

            if (entry instanceof ExecutorStageSummary) {
               entry = ((ExecutorStageSummary)entry).toBuilder();
               builderMap.put(key, entry);
            }

            return (ExecutorStageSummary.Builder)entry;
         }

         public boolean hasSpeculationSummary() {
            return (this.bitField1_ & 16384) != 0;
         }

         public SpeculationStageSummary getSpeculationSummary() {
            if (this.speculationSummaryBuilder_ == null) {
               return this.speculationSummary_ == null ? StoreTypes.SpeculationStageSummary.getDefaultInstance() : this.speculationSummary_;
            } else {
               return (SpeculationStageSummary)this.speculationSummaryBuilder_.getMessage();
            }
         }

         public Builder setSpeculationSummary(SpeculationStageSummary value) {
            if (this.speculationSummaryBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.speculationSummary_ = value;
            } else {
               this.speculationSummaryBuilder_.setMessage(value);
            }

            this.bitField1_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder setSpeculationSummary(SpeculationStageSummary.Builder builderForValue) {
            if (this.speculationSummaryBuilder_ == null) {
               this.speculationSummary_ = builderForValue.build();
            } else {
               this.speculationSummaryBuilder_.setMessage(builderForValue.build());
            }

            this.bitField1_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder mergeSpeculationSummary(SpeculationStageSummary value) {
            if (this.speculationSummaryBuilder_ == null) {
               if ((this.bitField1_ & 16384) != 0 && this.speculationSummary_ != null && this.speculationSummary_ != StoreTypes.SpeculationStageSummary.getDefaultInstance()) {
                  this.getSpeculationSummaryBuilder().mergeFrom(value);
               } else {
                  this.speculationSummary_ = value;
               }
            } else {
               this.speculationSummaryBuilder_.mergeFrom(value);
            }

            if (this.speculationSummary_ != null) {
               this.bitField1_ |= 16384;
               this.onChanged();
            }

            return this;
         }

         public Builder clearSpeculationSummary() {
            this.bitField1_ &= -16385;
            this.speculationSummary_ = null;
            if (this.speculationSummaryBuilder_ != null) {
               this.speculationSummaryBuilder_.dispose();
               this.speculationSummaryBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public SpeculationStageSummary.Builder getSpeculationSummaryBuilder() {
            this.bitField1_ |= 16384;
            this.onChanged();
            return (SpeculationStageSummary.Builder)this.getSpeculationSummaryFieldBuilder().getBuilder();
         }

         public SpeculationStageSummaryOrBuilder getSpeculationSummaryOrBuilder() {
            if (this.speculationSummaryBuilder_ != null) {
               return (SpeculationStageSummaryOrBuilder)this.speculationSummaryBuilder_.getMessageOrBuilder();
            } else {
               return this.speculationSummary_ == null ? StoreTypes.SpeculationStageSummary.getDefaultInstance() : this.speculationSummary_;
            }
         }

         private SingleFieldBuilder getSpeculationSummaryFieldBuilder() {
            if (this.speculationSummaryBuilder_ == null) {
               this.speculationSummaryBuilder_ = new SingleFieldBuilder(this.getSpeculationSummary(), this.getParentForChildren(), this.isClean());
               this.speculationSummary_ = null;
            }

            return this.speculationSummaryBuilder_;
         }

         private MapField internalGetKilledTasksSummary() {
            return this.killedTasksSummary_ == null ? MapField.emptyMapField(StoreTypes.StageData.KilledTasksSummaryDefaultEntryHolder.defaultEntry) : this.killedTasksSummary_;
         }

         private MapField internalGetMutableKilledTasksSummary() {
            if (this.killedTasksSummary_ == null) {
               this.killedTasksSummary_ = MapField.newMapField(StoreTypes.StageData.KilledTasksSummaryDefaultEntryHolder.defaultEntry);
            }

            if (!this.killedTasksSummary_.isMutable()) {
               this.killedTasksSummary_ = this.killedTasksSummary_.copy();
            }

            this.bitField1_ |= 32768;
            this.onChanged();
            return this.killedTasksSummary_;
         }

         public int getKilledTasksSummaryCount() {
            return this.internalGetKilledTasksSummary().getMap().size();
         }

         public boolean containsKilledTasksSummary(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetKilledTasksSummary().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getKilledTasksSummary() {
            return this.getKilledTasksSummaryMap();
         }

         public Map getKilledTasksSummaryMap() {
            return this.internalGetKilledTasksSummary().getMap();
         }

         public int getKilledTasksSummaryOrDefault(String key, int defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Integer> map = this.internalGetKilledTasksSummary().getMap();
               return map.containsKey(key) ? (Integer)map.get(key) : defaultValue;
            }
         }

         public int getKilledTasksSummaryOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Integer> map = this.internalGetKilledTasksSummary().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (Integer)map.get(key);
               }
            }
         }

         public Builder clearKilledTasksSummary() {
            this.bitField1_ &= -32769;
            this.internalGetMutableKilledTasksSummary().getMutableMap().clear();
            return this;
         }

         public Builder removeKilledTasksSummary(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableKilledTasksSummary().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableKilledTasksSummary() {
            this.bitField1_ |= 32768;
            return this.internalGetMutableKilledTasksSummary().getMutableMap();
         }

         public Builder putKilledTasksSummary(String key, int value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableKilledTasksSummary().getMutableMap().put(key, value);
               this.bitField1_ |= 32768;
               return this;
            }
         }

         public Builder putAllKilledTasksSummary(Map values) {
            this.internalGetMutableKilledTasksSummary().getMutableMap().putAll(values);
            this.bitField1_ |= 32768;
            return this;
         }

         public int getResourceProfileId() {
            return this.resourceProfileId_;
         }

         public Builder setResourceProfileId(int value) {
            this.resourceProfileId_ = value;
            this.bitField1_ |= 65536;
            this.onChanged();
            return this;
         }

         public Builder clearResourceProfileId() {
            this.bitField1_ &= -65537;
            this.resourceProfileId_ = 0;
            this.onChanged();
            return this;
         }

         public boolean hasPeakExecutorMetrics() {
            return (this.bitField1_ & 131072) != 0;
         }

         public ExecutorMetrics getPeakExecutorMetrics() {
            if (this.peakExecutorMetricsBuilder_ == null) {
               return this.peakExecutorMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakExecutorMetrics_;
            } else {
               return (ExecutorMetrics)this.peakExecutorMetricsBuilder_.getMessage();
            }
         }

         public Builder setPeakExecutorMetrics(ExecutorMetrics value) {
            if (this.peakExecutorMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.peakExecutorMetrics_ = value;
            } else {
               this.peakExecutorMetricsBuilder_.setMessage(value);
            }

            this.bitField1_ |= 131072;
            this.onChanged();
            return this;
         }

         public Builder setPeakExecutorMetrics(ExecutorMetrics.Builder builderForValue) {
            if (this.peakExecutorMetricsBuilder_ == null) {
               this.peakExecutorMetrics_ = builderForValue.build();
            } else {
               this.peakExecutorMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField1_ |= 131072;
            this.onChanged();
            return this;
         }

         public Builder mergePeakExecutorMetrics(ExecutorMetrics value) {
            if (this.peakExecutorMetricsBuilder_ == null) {
               if ((this.bitField1_ & 131072) != 0 && this.peakExecutorMetrics_ != null && this.peakExecutorMetrics_ != StoreTypes.ExecutorMetrics.getDefaultInstance()) {
                  this.getPeakExecutorMetricsBuilder().mergeFrom(value);
               } else {
                  this.peakExecutorMetrics_ = value;
               }
            } else {
               this.peakExecutorMetricsBuilder_.mergeFrom(value);
            }

            if (this.peakExecutorMetrics_ != null) {
               this.bitField1_ |= 131072;
               this.onChanged();
            }

            return this;
         }

         public Builder clearPeakExecutorMetrics() {
            this.bitField1_ &= -131073;
            this.peakExecutorMetrics_ = null;
            if (this.peakExecutorMetricsBuilder_ != null) {
               this.peakExecutorMetricsBuilder_.dispose();
               this.peakExecutorMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ExecutorMetrics.Builder getPeakExecutorMetricsBuilder() {
            this.bitField1_ |= 131072;
            this.onChanged();
            return (ExecutorMetrics.Builder)this.getPeakExecutorMetricsFieldBuilder().getBuilder();
         }

         public ExecutorMetricsOrBuilder getPeakExecutorMetricsOrBuilder() {
            if (this.peakExecutorMetricsBuilder_ != null) {
               return (ExecutorMetricsOrBuilder)this.peakExecutorMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.peakExecutorMetrics_ == null ? StoreTypes.ExecutorMetrics.getDefaultInstance() : this.peakExecutorMetrics_;
            }
         }

         private SingleFieldBuilder getPeakExecutorMetricsFieldBuilder() {
            if (this.peakExecutorMetricsBuilder_ == null) {
               this.peakExecutorMetricsBuilder_ = new SingleFieldBuilder(this.getPeakExecutorMetrics(), this.getParentForChildren(), this.isClean());
               this.peakExecutorMetrics_ = null;
            }

            return this.peakExecutorMetricsBuilder_;
         }

         public boolean hasTaskMetricsDistributions() {
            return (this.bitField1_ & 262144) != 0;
         }

         public TaskMetricDistributions getTaskMetricsDistributions() {
            if (this.taskMetricsDistributionsBuilder_ == null) {
               return this.taskMetricsDistributions_ == null ? StoreTypes.TaskMetricDistributions.getDefaultInstance() : this.taskMetricsDistributions_;
            } else {
               return (TaskMetricDistributions)this.taskMetricsDistributionsBuilder_.getMessage();
            }
         }

         public Builder setTaskMetricsDistributions(TaskMetricDistributions value) {
            if (this.taskMetricsDistributionsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.taskMetricsDistributions_ = value;
            } else {
               this.taskMetricsDistributionsBuilder_.setMessage(value);
            }

            this.bitField1_ |= 262144;
            this.onChanged();
            return this;
         }

         public Builder setTaskMetricsDistributions(TaskMetricDistributions.Builder builderForValue) {
            if (this.taskMetricsDistributionsBuilder_ == null) {
               this.taskMetricsDistributions_ = builderForValue.build();
            } else {
               this.taskMetricsDistributionsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField1_ |= 262144;
            this.onChanged();
            return this;
         }

         public Builder mergeTaskMetricsDistributions(TaskMetricDistributions value) {
            if (this.taskMetricsDistributionsBuilder_ == null) {
               if ((this.bitField1_ & 262144) != 0 && this.taskMetricsDistributions_ != null && this.taskMetricsDistributions_ != StoreTypes.TaskMetricDistributions.getDefaultInstance()) {
                  this.getTaskMetricsDistributionsBuilder().mergeFrom(value);
               } else {
                  this.taskMetricsDistributions_ = value;
               }
            } else {
               this.taskMetricsDistributionsBuilder_.mergeFrom(value);
            }

            if (this.taskMetricsDistributions_ != null) {
               this.bitField1_ |= 262144;
               this.onChanged();
            }

            return this;
         }

         public Builder clearTaskMetricsDistributions() {
            this.bitField1_ &= -262145;
            this.taskMetricsDistributions_ = null;
            if (this.taskMetricsDistributionsBuilder_ != null) {
               this.taskMetricsDistributionsBuilder_.dispose();
               this.taskMetricsDistributionsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public TaskMetricDistributions.Builder getTaskMetricsDistributionsBuilder() {
            this.bitField1_ |= 262144;
            this.onChanged();
            return (TaskMetricDistributions.Builder)this.getTaskMetricsDistributionsFieldBuilder().getBuilder();
         }

         public TaskMetricDistributionsOrBuilder getTaskMetricsDistributionsOrBuilder() {
            if (this.taskMetricsDistributionsBuilder_ != null) {
               return (TaskMetricDistributionsOrBuilder)this.taskMetricsDistributionsBuilder_.getMessageOrBuilder();
            } else {
               return this.taskMetricsDistributions_ == null ? StoreTypes.TaskMetricDistributions.getDefaultInstance() : this.taskMetricsDistributions_;
            }
         }

         private SingleFieldBuilder getTaskMetricsDistributionsFieldBuilder() {
            if (this.taskMetricsDistributionsBuilder_ == null) {
               this.taskMetricsDistributionsBuilder_ = new SingleFieldBuilder(this.getTaskMetricsDistributions(), this.getParentForChildren(), this.isClean());
               this.taskMetricsDistributions_ = null;
            }

            return this.taskMetricsDistributionsBuilder_;
         }

         public boolean hasExecutorMetricsDistributions() {
            return (this.bitField1_ & 524288) != 0;
         }

         public ExecutorMetricsDistributions getExecutorMetricsDistributions() {
            if (this.executorMetricsDistributionsBuilder_ == null) {
               return this.executorMetricsDistributions_ == null ? StoreTypes.ExecutorMetricsDistributions.getDefaultInstance() : this.executorMetricsDistributions_;
            } else {
               return (ExecutorMetricsDistributions)this.executorMetricsDistributionsBuilder_.getMessage();
            }
         }

         public Builder setExecutorMetricsDistributions(ExecutorMetricsDistributions value) {
            if (this.executorMetricsDistributionsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.executorMetricsDistributions_ = value;
            } else {
               this.executorMetricsDistributionsBuilder_.setMessage(value);
            }

            this.bitField1_ |= 524288;
            this.onChanged();
            return this;
         }

         public Builder setExecutorMetricsDistributions(ExecutorMetricsDistributions.Builder builderForValue) {
            if (this.executorMetricsDistributionsBuilder_ == null) {
               this.executorMetricsDistributions_ = builderForValue.build();
            } else {
               this.executorMetricsDistributionsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField1_ |= 524288;
            this.onChanged();
            return this;
         }

         public Builder mergeExecutorMetricsDistributions(ExecutorMetricsDistributions value) {
            if (this.executorMetricsDistributionsBuilder_ == null) {
               if ((this.bitField1_ & 524288) != 0 && this.executorMetricsDistributions_ != null && this.executorMetricsDistributions_ != StoreTypes.ExecutorMetricsDistributions.getDefaultInstance()) {
                  this.getExecutorMetricsDistributionsBuilder().mergeFrom(value);
               } else {
                  this.executorMetricsDistributions_ = value;
               }
            } else {
               this.executorMetricsDistributionsBuilder_.mergeFrom(value);
            }

            if (this.executorMetricsDistributions_ != null) {
               this.bitField1_ |= 524288;
               this.onChanged();
            }

            return this;
         }

         public Builder clearExecutorMetricsDistributions() {
            this.bitField1_ &= -524289;
            this.executorMetricsDistributions_ = null;
            if (this.executorMetricsDistributionsBuilder_ != null) {
               this.executorMetricsDistributionsBuilder_.dispose();
               this.executorMetricsDistributionsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ExecutorMetricsDistributions.Builder getExecutorMetricsDistributionsBuilder() {
            this.bitField1_ |= 524288;
            this.onChanged();
            return (ExecutorMetricsDistributions.Builder)this.getExecutorMetricsDistributionsFieldBuilder().getBuilder();
         }

         public ExecutorMetricsDistributionsOrBuilder getExecutorMetricsDistributionsOrBuilder() {
            if (this.executorMetricsDistributionsBuilder_ != null) {
               return (ExecutorMetricsDistributionsOrBuilder)this.executorMetricsDistributionsBuilder_.getMessageOrBuilder();
            } else {
               return this.executorMetricsDistributions_ == null ? StoreTypes.ExecutorMetricsDistributions.getDefaultInstance() : this.executorMetricsDistributions_;
            }
         }

         private SingleFieldBuilder getExecutorMetricsDistributionsFieldBuilder() {
            if (this.executorMetricsDistributionsBuilder_ == null) {
               this.executorMetricsDistributionsBuilder_ = new SingleFieldBuilder(this.getExecutorMetricsDistributions(), this.getParentForChildren(), this.isClean());
               this.executorMetricsDistributions_ = null;
            }

            return this.executorMetricsDistributionsBuilder_;
         }

         public long getShuffleCorruptMergedBlockChunks() {
            return this.shuffleCorruptMergedBlockChunks_;
         }

         public Builder setShuffleCorruptMergedBlockChunks(long value) {
            this.shuffleCorruptMergedBlockChunks_ = value;
            this.bitField1_ |= 1048576;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleCorruptMergedBlockChunks() {
            this.bitField1_ &= -1048577;
            this.shuffleCorruptMergedBlockChunks_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedFetchFallbackCount() {
            return this.shuffleMergedFetchFallbackCount_;
         }

         public Builder setShuffleMergedFetchFallbackCount(long value) {
            this.shuffleMergedFetchFallbackCount_ = value;
            this.bitField1_ |= 2097152;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedFetchFallbackCount() {
            this.bitField1_ &= -2097153;
            this.shuffleMergedFetchFallbackCount_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedRemoteBlocksFetched() {
            return this.shuffleMergedRemoteBlocksFetched_;
         }

         public Builder setShuffleMergedRemoteBlocksFetched(long value) {
            this.shuffleMergedRemoteBlocksFetched_ = value;
            this.bitField1_ |= 4194304;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteBlocksFetched() {
            this.bitField1_ &= -4194305;
            this.shuffleMergedRemoteBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedLocalBlocksFetched() {
            return this.shuffleMergedLocalBlocksFetched_;
         }

         public Builder setShuffleMergedLocalBlocksFetched(long value) {
            this.shuffleMergedLocalBlocksFetched_ = value;
            this.bitField1_ |= 8388608;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedLocalBlocksFetched() {
            this.bitField1_ &= -8388609;
            this.shuffleMergedLocalBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedRemoteChunksFetched() {
            return this.shuffleMergedRemoteChunksFetched_;
         }

         public Builder setShuffleMergedRemoteChunksFetched(long value) {
            this.shuffleMergedRemoteChunksFetched_ = value;
            this.bitField1_ |= 16777216;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteChunksFetched() {
            this.bitField1_ &= -16777217;
            this.shuffleMergedRemoteChunksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedLocalChunksFetched() {
            return this.shuffleMergedLocalChunksFetched_;
         }

         public Builder setShuffleMergedLocalChunksFetched(long value) {
            this.shuffleMergedLocalChunksFetched_ = value;
            this.bitField1_ |= 33554432;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedLocalChunksFetched() {
            this.bitField1_ &= -33554433;
            this.shuffleMergedLocalChunksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedRemoteBytesRead() {
            return this.shuffleMergedRemoteBytesRead_;
         }

         public Builder setShuffleMergedRemoteBytesRead(long value) {
            this.shuffleMergedRemoteBytesRead_ = value;
            this.bitField1_ |= 67108864;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteBytesRead() {
            this.bitField1_ &= -67108865;
            this.shuffleMergedRemoteBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedLocalBytesRead() {
            return this.shuffleMergedLocalBytesRead_;
         }

         public Builder setShuffleMergedLocalBytesRead(long value) {
            this.shuffleMergedLocalBytesRead_ = value;
            this.bitField1_ |= 134217728;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedLocalBytesRead() {
            this.bitField1_ &= -134217729;
            this.shuffleMergedLocalBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleRemoteReqsDuration() {
            return this.shuffleRemoteReqsDuration_;
         }

         public Builder setShuffleRemoteReqsDuration(long value) {
            this.shuffleRemoteReqsDuration_ = value;
            this.bitField1_ |= 268435456;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRemoteReqsDuration() {
            this.bitField1_ &= -268435457;
            this.shuffleRemoteReqsDuration_ = 0L;
            this.onChanged();
            return this;
         }

         public long getShuffleMergedRemoteReqsDuration() {
            return this.shuffleMergedRemoteReqsDuration_;
         }

         public Builder setShuffleMergedRemoteReqsDuration(long value) {
            this.shuffleMergedRemoteReqsDuration_ = value;
            this.bitField1_ |= 536870912;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergedRemoteReqsDuration() {
            this.bitField1_ &= -536870913;
            this.shuffleMergedRemoteReqsDuration_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean getIsShufflePushEnabled() {
            return this.isShufflePushEnabled_;
         }

         public Builder setIsShufflePushEnabled(boolean value) {
            this.isShufflePushEnabled_ = value;
            this.bitField1_ |= 1073741824;
            this.onChanged();
            return this;
         }

         public Builder clearIsShufflePushEnabled() {
            this.bitField1_ &= -1073741825;
            this.isShufflePushEnabled_ = false;
            this.onChanged();
            return this;
         }

         public int getShuffleMergersCount() {
            return this.shuffleMergersCount_;
         }

         public Builder setShuffleMergersCount(int value) {
            this.shuffleMergersCount_ = value;
            this.bitField1_ |= Integer.MIN_VALUE;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleMergersCount() {
            this.bitField1_ &= Integer.MAX_VALUE;
            this.shuffleMergersCount_ = 0;
            this.onChanged();
            return this;
         }

         private static final class ExecutorSummaryConverter implements MapFieldBuilder.Converter {
            public ExecutorStageSummary build(ExecutorStageSummaryOrBuilder val) {
               return val instanceof ExecutorStageSummary ? (ExecutorStageSummary)val : ((ExecutorStageSummary.Builder)val).build();
            }

            public MapEntry defaultEntry() {
               return StoreTypes.StageData.ExecutorSummaryDefaultEntryHolder.defaultEntry;
            }
         }

         private static final class TasksConverter implements MapFieldBuilder.Converter {
            public TaskData build(TaskDataOrBuilder val) {
               return val instanceof TaskData ? (TaskData)val : ((TaskData.Builder)val).build();
            }

            public MapEntry defaultEntry() {
               return StoreTypes.StageData.TasksDefaultEntryHolder.defaultEntry;
            }
         }
      }
   }

   public interface AccumulableInfoOrBuilder extends MessageOrBuilder {
      long getId();

      boolean hasName();

      String getName();

      ByteString getNameBytes();

      boolean hasUpdate();

      String getUpdate();

      ByteString getUpdateBytes();

      boolean hasValue();

      String getValue();

      ByteString getValueBytes();
   }

   public static final class AppSummary extends GeneratedMessage implements AppSummaryOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int NUM_COMPLETED_JOBS_FIELD_NUMBER = 1;
      private int numCompletedJobs_ = 0;
      public static final int NUM_COMPLETED_STAGES_FIELD_NUMBER = 2;
      private int numCompletedStages_ = 0;
      private byte memoizedIsInitialized = -1;
      private static final AppSummary DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private AppSummary(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private AppSummary() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_AppSummary_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_AppSummary_fieldAccessorTable.ensureFieldAccessorsInitialized(AppSummary.class, Builder.class);
      }

      public int getNumCompletedJobs() {
         return this.numCompletedJobs_;
      }

      public int getNumCompletedStages() {
         return this.numCompletedStages_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.numCompletedJobs_ != 0) {
            output.writeInt32(1, this.numCompletedJobs_);
         }

         if (this.numCompletedStages_ != 0) {
            output.writeInt32(2, this.numCompletedStages_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.numCompletedJobs_ != 0) {
               size += CodedOutputStream.computeInt32Size(1, this.numCompletedJobs_);
            }

            if (this.numCompletedStages_ != 0) {
               size += CodedOutputStream.computeInt32Size(2, this.numCompletedStages_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof AppSummary)) {
            return super.equals(obj);
         } else {
            AppSummary other = (AppSummary)obj;
            if (this.getNumCompletedJobs() != other.getNumCompletedJobs()) {
               return false;
            } else if (this.getNumCompletedStages() != other.getNumCompletedStages()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + this.getNumCompletedJobs();
            hash = 37 * hash + 2;
            hash = 53 * hash + this.getNumCompletedStages();
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static AppSummary parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (AppSummary)PARSER.parseFrom(data);
      }

      public static AppSummary parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (AppSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static AppSummary parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (AppSummary)PARSER.parseFrom(data);
      }

      public static AppSummary parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (AppSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static AppSummary parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (AppSummary)PARSER.parseFrom(data);
      }

      public static AppSummary parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (AppSummary)PARSER.parseFrom(data, extensionRegistry);
      }

      public static AppSummary parseFrom(InputStream input) throws IOException {
         return (AppSummary)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static AppSummary parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (AppSummary)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static AppSummary parseDelimitedFrom(InputStream input) throws IOException {
         return (AppSummary)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static AppSummary parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (AppSummary)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static AppSummary parseFrom(CodedInputStream input) throws IOException {
         return (AppSummary)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static AppSummary parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (AppSummary)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(AppSummary prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static AppSummary getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public AppSummary getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", AppSummary.class.getName());
         DEFAULT_INSTANCE = new AppSummary();
         PARSER = new AbstractParser() {
            public AppSummary parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.AppSummary.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements AppSummaryOrBuilder {
         private int bitField0_;
         private int numCompletedJobs_;
         private int numCompletedStages_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_AppSummary_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_AppSummary_fieldAccessorTable.ensureFieldAccessorsInitialized(AppSummary.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.numCompletedJobs_ = 0;
            this.numCompletedStages_ = 0;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_AppSummary_descriptor;
         }

         public AppSummary getDefaultInstanceForType() {
            return StoreTypes.AppSummary.getDefaultInstance();
         }

         public AppSummary build() {
            AppSummary result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public AppSummary buildPartial() {
            AppSummary result = new AppSummary(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(AppSummary result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.numCompletedJobs_ = this.numCompletedJobs_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.numCompletedStages_ = this.numCompletedStages_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof AppSummary) {
               return this.mergeFrom((AppSummary)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(AppSummary other) {
            if (other == StoreTypes.AppSummary.getDefaultInstance()) {
               return this;
            } else {
               if (other.getNumCompletedJobs() != 0) {
                  this.setNumCompletedJobs(other.getNumCompletedJobs());
               }

               if (other.getNumCompletedStages() != 0) {
                  this.setNumCompletedStages(other.getNumCompletedStages());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.numCompletedJobs_ = input.readInt32();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.numCompletedStages_ = input.readInt32();
                           this.bitField0_ |= 2;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public int getNumCompletedJobs() {
            return this.numCompletedJobs_;
         }

         public Builder setNumCompletedJobs(int value) {
            this.numCompletedJobs_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearNumCompletedJobs() {
            this.bitField0_ &= -2;
            this.numCompletedJobs_ = 0;
            this.onChanged();
            return this;
         }

         public int getNumCompletedStages() {
            return this.numCompletedStages_;
         }

         public Builder setNumCompletedStages(int value) {
            this.numCompletedStages_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearNumCompletedStages() {
            this.bitField0_ &= -3;
            this.numCompletedStages_ = 0;
            this.onChanged();
            return this;
         }
      }
   }

   public interface AppSummaryOrBuilder extends MessageOrBuilder {
      int getNumCompletedJobs();

      int getNumCompletedStages();
   }

   public interface ApplicationAttemptInfoOrBuilder extends MessageOrBuilder {
      boolean hasAttemptId();

      String getAttemptId();

      ByteString getAttemptIdBytes();

      long getStartTime();

      long getEndTime();

      long getLastUpdated();

      long getDuration();

      boolean hasSparkUser();

      String getSparkUser();

      ByteString getSparkUserBytes();

      boolean getCompleted();

      boolean hasAppSparkVersion();

      String getAppSparkVersion();

      ByteString getAppSparkVersionBytes();
   }

   public interface ApplicationEnvironmentInfoOrBuilder extends MessageOrBuilder {
      boolean hasRuntime();

      RuntimeInfo getRuntime();

      RuntimeInfoOrBuilder getRuntimeOrBuilder();

      List getSparkPropertiesList();

      PairStrings getSparkProperties(int var1);

      int getSparkPropertiesCount();

      List getSparkPropertiesOrBuilderList();

      PairStringsOrBuilder getSparkPropertiesOrBuilder(int var1);

      List getHadoopPropertiesList();

      PairStrings getHadoopProperties(int var1);

      int getHadoopPropertiesCount();

      List getHadoopPropertiesOrBuilderList();

      PairStringsOrBuilder getHadoopPropertiesOrBuilder(int var1);

      List getSystemPropertiesList();

      PairStrings getSystemProperties(int var1);

      int getSystemPropertiesCount();

      List getSystemPropertiesOrBuilderList();

      PairStringsOrBuilder getSystemPropertiesOrBuilder(int var1);

      List getMetricsPropertiesList();

      PairStrings getMetricsProperties(int var1);

      int getMetricsPropertiesCount();

      List getMetricsPropertiesOrBuilderList();

      PairStringsOrBuilder getMetricsPropertiesOrBuilder(int var1);

      List getClasspathEntriesList();

      PairStrings getClasspathEntries(int var1);

      int getClasspathEntriesCount();

      List getClasspathEntriesOrBuilderList();

      PairStringsOrBuilder getClasspathEntriesOrBuilder(int var1);

      List getResourceProfilesList();

      ResourceProfileInfo getResourceProfiles(int var1);

      int getResourceProfilesCount();

      List getResourceProfilesOrBuilderList();

      ResourceProfileInfoOrBuilder getResourceProfilesOrBuilder(int var1);
   }

   public interface ApplicationEnvironmentInfoWrapperOrBuilder extends MessageOrBuilder {
      boolean hasInfo();

      ApplicationEnvironmentInfo getInfo();

      ApplicationEnvironmentInfoOrBuilder getInfoOrBuilder();
   }

   public interface ApplicationInfoOrBuilder extends MessageOrBuilder {
      boolean hasId();

      String getId();

      ByteString getIdBytes();

      boolean hasName();

      String getName();

      ByteString getNameBytes();

      boolean hasCoresGranted();

      int getCoresGranted();

      boolean hasMaxCores();

      int getMaxCores();

      boolean hasCoresPerExecutor();

      int getCoresPerExecutor();

      boolean hasMemoryPerExecutorMb();

      int getMemoryPerExecutorMb();

      List getAttemptsList();

      ApplicationAttemptInfo getAttempts(int var1);

      int getAttemptsCount();

      List getAttemptsOrBuilderList();

      ApplicationAttemptInfoOrBuilder getAttemptsOrBuilder(int var1);
   }

   public interface ApplicationInfoWrapperOrBuilder extends MessageOrBuilder {
      boolean hasInfo();

      ApplicationInfo getInfo();

      ApplicationInfoOrBuilder getInfoOrBuilder();
   }

   public interface CachedQuantileOrBuilder extends MessageOrBuilder {
      long getStageId();

      int getStageAttemptId();

      boolean hasQuantile();

      String getQuantile();

      ByteString getQuantileBytes();

      long getTaskCount();

      double getDuration();

      double getExecutorDeserializeTime();

      double getExecutorDeserializeCpuTime();

      double getExecutorRunTime();

      double getExecutorCpuTime();

      double getResultSize();

      double getJvmGcTime();

      double getResultSerializationTime();

      double getGettingResultTime();

      double getSchedulerDelay();

      double getPeakExecutionMemory();

      double getMemoryBytesSpilled();

      double getDiskBytesSpilled();

      double getBytesRead();

      double getRecordsRead();

      double getBytesWritten();

      double getRecordsWritten();

      double getShuffleReadBytes();

      double getShuffleRecordsRead();

      double getShuffleRemoteBlocksFetched();

      double getShuffleLocalBlocksFetched();

      double getShuffleFetchWaitTime();

      double getShuffleRemoteBytesRead();

      double getShuffleRemoteBytesReadToDisk();

      double getShuffleTotalBlocksFetched();

      double getShuffleWriteBytes();

      double getShuffleWriteRecords();

      double getShuffleWriteTime();

      double getShuffleCorruptMergedBlockChunks();

      double getShuffleMergedFetchFallbackCount();

      double getShuffleMergedRemoteBlocksFetched();

      double getShuffleMergedLocalBlocksFetched();

      double getShuffleMergedRemoteChunksFetched();

      double getShuffleMergedLocalChunksFetched();

      double getShuffleMergedRemoteBytesRead();

      double getShuffleMergedLocalBytesRead();

      double getShuffleRemoteReqsDuration();

      double getShuffleMergedRemoteReqsDuration();
   }

   public static final class ExecutorMetricsDistributions extends GeneratedMessage implements ExecutorMetricsDistributionsOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int QUANTILES_FIELD_NUMBER = 1;
      private Internal.DoubleList quantiles_ = emptyDoubleList();
      private int quantilesMemoizedSerializedSize = -1;
      public static final int TASK_TIME_FIELD_NUMBER = 2;
      private Internal.DoubleList taskTime_ = emptyDoubleList();
      private int taskTimeMemoizedSerializedSize = -1;
      public static final int FAILED_TASKS_FIELD_NUMBER = 3;
      private Internal.DoubleList failedTasks_ = emptyDoubleList();
      private int failedTasksMemoizedSerializedSize = -1;
      public static final int SUCCEEDED_TASKS_FIELD_NUMBER = 4;
      private Internal.DoubleList succeededTasks_ = emptyDoubleList();
      private int succeededTasksMemoizedSerializedSize = -1;
      public static final int KILLED_TASKS_FIELD_NUMBER = 5;
      private Internal.DoubleList killedTasks_ = emptyDoubleList();
      private int killedTasksMemoizedSerializedSize = -1;
      public static final int INPUT_BYTES_FIELD_NUMBER = 6;
      private Internal.DoubleList inputBytes_ = emptyDoubleList();
      private int inputBytesMemoizedSerializedSize = -1;
      public static final int INPUT_RECORDS_FIELD_NUMBER = 7;
      private Internal.DoubleList inputRecords_ = emptyDoubleList();
      private int inputRecordsMemoizedSerializedSize = -1;
      public static final int OUTPUT_BYTES_FIELD_NUMBER = 8;
      private Internal.DoubleList outputBytes_ = emptyDoubleList();
      private int outputBytesMemoizedSerializedSize = -1;
      public static final int OUTPUT_RECORDS_FIELD_NUMBER = 9;
      private Internal.DoubleList outputRecords_ = emptyDoubleList();
      private int outputRecordsMemoizedSerializedSize = -1;
      public static final int SHUFFLE_READ_FIELD_NUMBER = 10;
      private Internal.DoubleList shuffleRead_ = emptyDoubleList();
      private int shuffleReadMemoizedSerializedSize = -1;
      public static final int SHUFFLE_READ_RECORDS_FIELD_NUMBER = 11;
      private Internal.DoubleList shuffleReadRecords_ = emptyDoubleList();
      private int shuffleReadRecordsMemoizedSerializedSize = -1;
      public static final int SHUFFLE_WRITE_FIELD_NUMBER = 12;
      private Internal.DoubleList shuffleWrite_ = emptyDoubleList();
      private int shuffleWriteMemoizedSerializedSize = -1;
      public static final int SHUFFLE_WRITE_RECORDS_FIELD_NUMBER = 13;
      private Internal.DoubleList shuffleWriteRecords_ = emptyDoubleList();
      private int shuffleWriteRecordsMemoizedSerializedSize = -1;
      public static final int MEMORY_BYTES_SPILLED_FIELD_NUMBER = 14;
      private Internal.DoubleList memoryBytesSpilled_ = emptyDoubleList();
      private int memoryBytesSpilledMemoizedSerializedSize = -1;
      public static final int DISK_BYTES_SPILLED_FIELD_NUMBER = 15;
      private Internal.DoubleList diskBytesSpilled_ = emptyDoubleList();
      private int diskBytesSpilledMemoizedSerializedSize = -1;
      public static final int PEAK_MEMORY_METRICS_FIELD_NUMBER = 16;
      private ExecutorPeakMetricsDistributions peakMemoryMetrics_;
      private byte memoizedIsInitialized = -1;
      private static final ExecutorMetricsDistributions DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ExecutorMetricsDistributions(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ExecutorMetricsDistributions() {
         this.quantiles_ = emptyDoubleList();
         this.taskTime_ = emptyDoubleList();
         this.failedTasks_ = emptyDoubleList();
         this.succeededTasks_ = emptyDoubleList();
         this.killedTasks_ = emptyDoubleList();
         this.inputBytes_ = emptyDoubleList();
         this.inputRecords_ = emptyDoubleList();
         this.outputBytes_ = emptyDoubleList();
         this.outputRecords_ = emptyDoubleList();
         this.shuffleRead_ = emptyDoubleList();
         this.shuffleReadRecords_ = emptyDoubleList();
         this.shuffleWrite_ = emptyDoubleList();
         this.shuffleWriteRecords_ = emptyDoubleList();
         this.memoryBytesSpilled_ = emptyDoubleList();
         this.diskBytesSpilled_ = emptyDoubleList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorMetricsDistributions_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorMetricsDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorMetricsDistributions.class, Builder.class);
      }

      public List getQuantilesList() {
         return this.quantiles_;
      }

      public int getQuantilesCount() {
         return this.quantiles_.size();
      }

      public double getQuantiles(int index) {
         return this.quantiles_.getDouble(index);
      }

      public List getTaskTimeList() {
         return this.taskTime_;
      }

      public int getTaskTimeCount() {
         return this.taskTime_.size();
      }

      public double getTaskTime(int index) {
         return this.taskTime_.getDouble(index);
      }

      public List getFailedTasksList() {
         return this.failedTasks_;
      }

      public int getFailedTasksCount() {
         return this.failedTasks_.size();
      }

      public double getFailedTasks(int index) {
         return this.failedTasks_.getDouble(index);
      }

      public List getSucceededTasksList() {
         return this.succeededTasks_;
      }

      public int getSucceededTasksCount() {
         return this.succeededTasks_.size();
      }

      public double getSucceededTasks(int index) {
         return this.succeededTasks_.getDouble(index);
      }

      public List getKilledTasksList() {
         return this.killedTasks_;
      }

      public int getKilledTasksCount() {
         return this.killedTasks_.size();
      }

      public double getKilledTasks(int index) {
         return this.killedTasks_.getDouble(index);
      }

      public List getInputBytesList() {
         return this.inputBytes_;
      }

      public int getInputBytesCount() {
         return this.inputBytes_.size();
      }

      public double getInputBytes(int index) {
         return this.inputBytes_.getDouble(index);
      }

      public List getInputRecordsList() {
         return this.inputRecords_;
      }

      public int getInputRecordsCount() {
         return this.inputRecords_.size();
      }

      public double getInputRecords(int index) {
         return this.inputRecords_.getDouble(index);
      }

      public List getOutputBytesList() {
         return this.outputBytes_;
      }

      public int getOutputBytesCount() {
         return this.outputBytes_.size();
      }

      public double getOutputBytes(int index) {
         return this.outputBytes_.getDouble(index);
      }

      public List getOutputRecordsList() {
         return this.outputRecords_;
      }

      public int getOutputRecordsCount() {
         return this.outputRecords_.size();
      }

      public double getOutputRecords(int index) {
         return this.outputRecords_.getDouble(index);
      }

      public List getShuffleReadList() {
         return this.shuffleRead_;
      }

      public int getShuffleReadCount() {
         return this.shuffleRead_.size();
      }

      public double getShuffleRead(int index) {
         return this.shuffleRead_.getDouble(index);
      }

      public List getShuffleReadRecordsList() {
         return this.shuffleReadRecords_;
      }

      public int getShuffleReadRecordsCount() {
         return this.shuffleReadRecords_.size();
      }

      public double getShuffleReadRecords(int index) {
         return this.shuffleReadRecords_.getDouble(index);
      }

      public List getShuffleWriteList() {
         return this.shuffleWrite_;
      }

      public int getShuffleWriteCount() {
         return this.shuffleWrite_.size();
      }

      public double getShuffleWrite(int index) {
         return this.shuffleWrite_.getDouble(index);
      }

      public List getShuffleWriteRecordsList() {
         return this.shuffleWriteRecords_;
      }

      public int getShuffleWriteRecordsCount() {
         return this.shuffleWriteRecords_.size();
      }

      public double getShuffleWriteRecords(int index) {
         return this.shuffleWriteRecords_.getDouble(index);
      }

      public List getMemoryBytesSpilledList() {
         return this.memoryBytesSpilled_;
      }

      public int getMemoryBytesSpilledCount() {
         return this.memoryBytesSpilled_.size();
      }

      public double getMemoryBytesSpilled(int index) {
         return this.memoryBytesSpilled_.getDouble(index);
      }

      public List getDiskBytesSpilledList() {
         return this.diskBytesSpilled_;
      }

      public int getDiskBytesSpilledCount() {
         return this.diskBytesSpilled_.size();
      }

      public double getDiskBytesSpilled(int index) {
         return this.diskBytesSpilled_.getDouble(index);
      }

      public boolean hasPeakMemoryMetrics() {
         return (this.bitField0_ & 1) != 0;
      }

      public ExecutorPeakMetricsDistributions getPeakMemoryMetrics() {
         return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorPeakMetricsDistributions.getDefaultInstance() : this.peakMemoryMetrics_;
      }

      public ExecutorPeakMetricsDistributionsOrBuilder getPeakMemoryMetricsOrBuilder() {
         return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorPeakMetricsDistributions.getDefaultInstance() : this.peakMemoryMetrics_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if (this.getQuantilesList().size() > 0) {
            output.writeUInt32NoTag(10);
            output.writeUInt32NoTag(this.quantilesMemoizedSerializedSize);
         }

         for(int i = 0; i < this.quantiles_.size(); ++i) {
            output.writeDoubleNoTag(this.quantiles_.getDouble(i));
         }

         if (this.getTaskTimeList().size() > 0) {
            output.writeUInt32NoTag(18);
            output.writeUInt32NoTag(this.taskTimeMemoizedSerializedSize);
         }

         for(int i = 0; i < this.taskTime_.size(); ++i) {
            output.writeDoubleNoTag(this.taskTime_.getDouble(i));
         }

         if (this.getFailedTasksList().size() > 0) {
            output.writeUInt32NoTag(26);
            output.writeUInt32NoTag(this.failedTasksMemoizedSerializedSize);
         }

         for(int i = 0; i < this.failedTasks_.size(); ++i) {
            output.writeDoubleNoTag(this.failedTasks_.getDouble(i));
         }

         if (this.getSucceededTasksList().size() > 0) {
            output.writeUInt32NoTag(34);
            output.writeUInt32NoTag(this.succeededTasksMemoizedSerializedSize);
         }

         for(int i = 0; i < this.succeededTasks_.size(); ++i) {
            output.writeDoubleNoTag(this.succeededTasks_.getDouble(i));
         }

         if (this.getKilledTasksList().size() > 0) {
            output.writeUInt32NoTag(42);
            output.writeUInt32NoTag(this.killedTasksMemoizedSerializedSize);
         }

         for(int i = 0; i < this.killedTasks_.size(); ++i) {
            output.writeDoubleNoTag(this.killedTasks_.getDouble(i));
         }

         if (this.getInputBytesList().size() > 0) {
            output.writeUInt32NoTag(50);
            output.writeUInt32NoTag(this.inputBytesMemoizedSerializedSize);
         }

         for(int i = 0; i < this.inputBytes_.size(); ++i) {
            output.writeDoubleNoTag(this.inputBytes_.getDouble(i));
         }

         if (this.getInputRecordsList().size() > 0) {
            output.writeUInt32NoTag(58);
            output.writeUInt32NoTag(this.inputRecordsMemoizedSerializedSize);
         }

         for(int i = 0; i < this.inputRecords_.size(); ++i) {
            output.writeDoubleNoTag(this.inputRecords_.getDouble(i));
         }

         if (this.getOutputBytesList().size() > 0) {
            output.writeUInt32NoTag(66);
            output.writeUInt32NoTag(this.outputBytesMemoizedSerializedSize);
         }

         for(int i = 0; i < this.outputBytes_.size(); ++i) {
            output.writeDoubleNoTag(this.outputBytes_.getDouble(i));
         }

         if (this.getOutputRecordsList().size() > 0) {
            output.writeUInt32NoTag(74);
            output.writeUInt32NoTag(this.outputRecordsMemoizedSerializedSize);
         }

         for(int i = 0; i < this.outputRecords_.size(); ++i) {
            output.writeDoubleNoTag(this.outputRecords_.getDouble(i));
         }

         if (this.getShuffleReadList().size() > 0) {
            output.writeUInt32NoTag(82);
            output.writeUInt32NoTag(this.shuffleReadMemoizedSerializedSize);
         }

         for(int i = 0; i < this.shuffleRead_.size(); ++i) {
            output.writeDoubleNoTag(this.shuffleRead_.getDouble(i));
         }

         if (this.getShuffleReadRecordsList().size() > 0) {
            output.writeUInt32NoTag(90);
            output.writeUInt32NoTag(this.shuffleReadRecordsMemoizedSerializedSize);
         }

         for(int i = 0; i < this.shuffleReadRecords_.size(); ++i) {
            output.writeDoubleNoTag(this.shuffleReadRecords_.getDouble(i));
         }

         if (this.getShuffleWriteList().size() > 0) {
            output.writeUInt32NoTag(98);
            output.writeUInt32NoTag(this.shuffleWriteMemoizedSerializedSize);
         }

         for(int i = 0; i < this.shuffleWrite_.size(); ++i) {
            output.writeDoubleNoTag(this.shuffleWrite_.getDouble(i));
         }

         if (this.getShuffleWriteRecordsList().size() > 0) {
            output.writeUInt32NoTag(106);
            output.writeUInt32NoTag(this.shuffleWriteRecordsMemoizedSerializedSize);
         }

         for(int i = 0; i < this.shuffleWriteRecords_.size(); ++i) {
            output.writeDoubleNoTag(this.shuffleWriteRecords_.getDouble(i));
         }

         if (this.getMemoryBytesSpilledList().size() > 0) {
            output.writeUInt32NoTag(114);
            output.writeUInt32NoTag(this.memoryBytesSpilledMemoizedSerializedSize);
         }

         for(int i = 0; i < this.memoryBytesSpilled_.size(); ++i) {
            output.writeDoubleNoTag(this.memoryBytesSpilled_.getDouble(i));
         }

         if (this.getDiskBytesSpilledList().size() > 0) {
            output.writeUInt32NoTag(122);
            output.writeUInt32NoTag(this.diskBytesSpilledMemoizedSerializedSize);
         }

         for(int i = 0; i < this.diskBytesSpilled_.size(); ++i) {
            output.writeDoubleNoTag(this.diskBytesSpilled_.getDouble(i));
         }

         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(16, this.getPeakMemoryMetrics());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            int dataSize = 0;
            dataSize = 8 * this.getQuantilesList().size();
            size += dataSize;
            if (!this.getQuantilesList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.quantilesMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getTaskTimeList().size();
            size += dataSize;
            if (!this.getTaskTimeList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.taskTimeMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getFailedTasksList().size();
            size += dataSize;
            if (!this.getFailedTasksList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.failedTasksMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getSucceededTasksList().size();
            size += dataSize;
            if (!this.getSucceededTasksList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.succeededTasksMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getKilledTasksList().size();
            size += dataSize;
            if (!this.getKilledTasksList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.killedTasksMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getInputBytesList().size();
            size += dataSize;
            if (!this.getInputBytesList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.inputBytesMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getInputRecordsList().size();
            size += dataSize;
            if (!this.getInputRecordsList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.inputRecordsMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getOutputBytesList().size();
            size += dataSize;
            if (!this.getOutputBytesList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.outputBytesMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getOutputRecordsList().size();
            size += dataSize;
            if (!this.getOutputRecordsList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.outputRecordsMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getShuffleReadList().size();
            size += dataSize;
            if (!this.getShuffleReadList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.shuffleReadMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getShuffleReadRecordsList().size();
            size += dataSize;
            if (!this.getShuffleReadRecordsList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.shuffleReadRecordsMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getShuffleWriteList().size();
            size += dataSize;
            if (!this.getShuffleWriteList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.shuffleWriteMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getShuffleWriteRecordsList().size();
            size += dataSize;
            if (!this.getShuffleWriteRecordsList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.shuffleWriteRecordsMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getMemoryBytesSpilledList().size();
            size += dataSize;
            if (!this.getMemoryBytesSpilledList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.memoryBytesSpilledMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getDiskBytesSpilledList().size();
            size += dataSize;
            if (!this.getDiskBytesSpilledList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.diskBytesSpilledMemoizedSerializedSize = dataSize;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(16, this.getPeakMemoryMetrics());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ExecutorMetricsDistributions)) {
            return super.equals(obj);
         } else {
            ExecutorMetricsDistributions other = (ExecutorMetricsDistributions)obj;
            if (!this.getQuantilesList().equals(other.getQuantilesList())) {
               return false;
            } else if (!this.getTaskTimeList().equals(other.getTaskTimeList())) {
               return false;
            } else if (!this.getFailedTasksList().equals(other.getFailedTasksList())) {
               return false;
            } else if (!this.getSucceededTasksList().equals(other.getSucceededTasksList())) {
               return false;
            } else if (!this.getKilledTasksList().equals(other.getKilledTasksList())) {
               return false;
            } else if (!this.getInputBytesList().equals(other.getInputBytesList())) {
               return false;
            } else if (!this.getInputRecordsList().equals(other.getInputRecordsList())) {
               return false;
            } else if (!this.getOutputBytesList().equals(other.getOutputBytesList())) {
               return false;
            } else if (!this.getOutputRecordsList().equals(other.getOutputRecordsList())) {
               return false;
            } else if (!this.getShuffleReadList().equals(other.getShuffleReadList())) {
               return false;
            } else if (!this.getShuffleReadRecordsList().equals(other.getShuffleReadRecordsList())) {
               return false;
            } else if (!this.getShuffleWriteList().equals(other.getShuffleWriteList())) {
               return false;
            } else if (!this.getShuffleWriteRecordsList().equals(other.getShuffleWriteRecordsList())) {
               return false;
            } else if (!this.getMemoryBytesSpilledList().equals(other.getMemoryBytesSpilledList())) {
               return false;
            } else if (!this.getDiskBytesSpilledList().equals(other.getDiskBytesSpilledList())) {
               return false;
            } else if (this.hasPeakMemoryMetrics() != other.hasPeakMemoryMetrics()) {
               return false;
            } else if (this.hasPeakMemoryMetrics() && !this.getPeakMemoryMetrics().equals(other.getPeakMemoryMetrics())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.getQuantilesCount() > 0) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getQuantilesList().hashCode();
            }

            if (this.getTaskTimeCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getTaskTimeList().hashCode();
            }

            if (this.getFailedTasksCount() > 0) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getFailedTasksList().hashCode();
            }

            if (this.getSucceededTasksCount() > 0) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getSucceededTasksList().hashCode();
            }

            if (this.getKilledTasksCount() > 0) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getKilledTasksList().hashCode();
            }

            if (this.getInputBytesCount() > 0) {
               hash = 37 * hash + 6;
               hash = 53 * hash + this.getInputBytesList().hashCode();
            }

            if (this.getInputRecordsCount() > 0) {
               hash = 37 * hash + 7;
               hash = 53 * hash + this.getInputRecordsList().hashCode();
            }

            if (this.getOutputBytesCount() > 0) {
               hash = 37 * hash + 8;
               hash = 53 * hash + this.getOutputBytesList().hashCode();
            }

            if (this.getOutputRecordsCount() > 0) {
               hash = 37 * hash + 9;
               hash = 53 * hash + this.getOutputRecordsList().hashCode();
            }

            if (this.getShuffleReadCount() > 0) {
               hash = 37 * hash + 10;
               hash = 53 * hash + this.getShuffleReadList().hashCode();
            }

            if (this.getShuffleReadRecordsCount() > 0) {
               hash = 37 * hash + 11;
               hash = 53 * hash + this.getShuffleReadRecordsList().hashCode();
            }

            if (this.getShuffleWriteCount() > 0) {
               hash = 37 * hash + 12;
               hash = 53 * hash + this.getShuffleWriteList().hashCode();
            }

            if (this.getShuffleWriteRecordsCount() > 0) {
               hash = 37 * hash + 13;
               hash = 53 * hash + this.getShuffleWriteRecordsList().hashCode();
            }

            if (this.getMemoryBytesSpilledCount() > 0) {
               hash = 37 * hash + 14;
               hash = 53 * hash + this.getMemoryBytesSpilledList().hashCode();
            }

            if (this.getDiskBytesSpilledCount() > 0) {
               hash = 37 * hash + 15;
               hash = 53 * hash + this.getDiskBytesSpilledList().hashCode();
            }

            if (this.hasPeakMemoryMetrics()) {
               hash = 37 * hash + 16;
               hash = 53 * hash + this.getPeakMemoryMetrics().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ExecutorMetricsDistributions parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ExecutorMetricsDistributions)PARSER.parseFrom(data);
      }

      public static ExecutorMetricsDistributions parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorMetricsDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorMetricsDistributions parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ExecutorMetricsDistributions)PARSER.parseFrom(data);
      }

      public static ExecutorMetricsDistributions parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorMetricsDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorMetricsDistributions parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ExecutorMetricsDistributions)PARSER.parseFrom(data);
      }

      public static ExecutorMetricsDistributions parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorMetricsDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorMetricsDistributions parseFrom(InputStream input) throws IOException {
         return (ExecutorMetricsDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorMetricsDistributions parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorMetricsDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorMetricsDistributions parseDelimitedFrom(InputStream input) throws IOException {
         return (ExecutorMetricsDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ExecutorMetricsDistributions parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorMetricsDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorMetricsDistributions parseFrom(CodedInputStream input) throws IOException {
         return (ExecutorMetricsDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorMetricsDistributions parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorMetricsDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ExecutorMetricsDistributions prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ExecutorMetricsDistributions getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ExecutorMetricsDistributions getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ExecutorMetricsDistributions.class.getName());
         DEFAULT_INSTANCE = new ExecutorMetricsDistributions();
         PARSER = new AbstractParser() {
            public ExecutorMetricsDistributions parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ExecutorMetricsDistributions.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ExecutorMetricsDistributionsOrBuilder {
         private int bitField0_;
         private Internal.DoubleList quantiles_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList taskTime_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList failedTasks_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList succeededTasks_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList killedTasks_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList inputBytes_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList inputRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList outputBytes_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList outputRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList shuffleRead_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList shuffleReadRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList shuffleWrite_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList shuffleWriteRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList memoryBytesSpilled_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private Internal.DoubleList diskBytesSpilled_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
         private ExecutorPeakMetricsDistributions peakMemoryMetrics_;
         private SingleFieldBuilder peakMemoryMetricsBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorMetricsDistributions_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorMetricsDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorMetricsDistributions.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ExecutorMetricsDistributions.alwaysUseFieldBuilders) {
               this.getPeakMemoryMetricsFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.quantiles_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.taskTime_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.failedTasks_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.succeededTasks_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.killedTasks_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.inputBytes_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.inputRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.outputBytes_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.outputRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.shuffleRead_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.shuffleReadRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.shuffleWrite_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.shuffleWriteRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.memoryBytesSpilled_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.diskBytesSpilled_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.peakMemoryMetrics_ = null;
            if (this.peakMemoryMetricsBuilder_ != null) {
               this.peakMemoryMetricsBuilder_.dispose();
               this.peakMemoryMetricsBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorMetricsDistributions_descriptor;
         }

         public ExecutorMetricsDistributions getDefaultInstanceForType() {
            return StoreTypes.ExecutorMetricsDistributions.getDefaultInstance();
         }

         public ExecutorMetricsDistributions build() {
            ExecutorMetricsDistributions result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ExecutorMetricsDistributions buildPartial() {
            ExecutorMetricsDistributions result = new ExecutorMetricsDistributions(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ExecutorMetricsDistributions result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               this.quantiles_.makeImmutable();
               result.quantiles_ = this.quantiles_;
            }

            if ((from_bitField0_ & 2) != 0) {
               this.taskTime_.makeImmutable();
               result.taskTime_ = this.taskTime_;
            }

            if ((from_bitField0_ & 4) != 0) {
               this.failedTasks_.makeImmutable();
               result.failedTasks_ = this.failedTasks_;
            }

            if ((from_bitField0_ & 8) != 0) {
               this.succeededTasks_.makeImmutable();
               result.succeededTasks_ = this.succeededTasks_;
            }

            if ((from_bitField0_ & 16) != 0) {
               this.killedTasks_.makeImmutable();
               result.killedTasks_ = this.killedTasks_;
            }

            if ((from_bitField0_ & 32) != 0) {
               this.inputBytes_.makeImmutable();
               result.inputBytes_ = this.inputBytes_;
            }

            if ((from_bitField0_ & 64) != 0) {
               this.inputRecords_.makeImmutable();
               result.inputRecords_ = this.inputRecords_;
            }

            if ((from_bitField0_ & 128) != 0) {
               this.outputBytes_.makeImmutable();
               result.outputBytes_ = this.outputBytes_;
            }

            if ((from_bitField0_ & 256) != 0) {
               this.outputRecords_.makeImmutable();
               result.outputRecords_ = this.outputRecords_;
            }

            if ((from_bitField0_ & 512) != 0) {
               this.shuffleRead_.makeImmutable();
               result.shuffleRead_ = this.shuffleRead_;
            }

            if ((from_bitField0_ & 1024) != 0) {
               this.shuffleReadRecords_.makeImmutable();
               result.shuffleReadRecords_ = this.shuffleReadRecords_;
            }

            if ((from_bitField0_ & 2048) != 0) {
               this.shuffleWrite_.makeImmutable();
               result.shuffleWrite_ = this.shuffleWrite_;
            }

            if ((from_bitField0_ & 4096) != 0) {
               this.shuffleWriteRecords_.makeImmutable();
               result.shuffleWriteRecords_ = this.shuffleWriteRecords_;
            }

            if ((from_bitField0_ & 8192) != 0) {
               this.memoryBytesSpilled_.makeImmutable();
               result.memoryBytesSpilled_ = this.memoryBytesSpilled_;
            }

            if ((from_bitField0_ & 16384) != 0) {
               this.diskBytesSpilled_.makeImmutable();
               result.diskBytesSpilled_ = this.diskBytesSpilled_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & '耀') != 0) {
               result.peakMemoryMetrics_ = this.peakMemoryMetricsBuilder_ == null ? this.peakMemoryMetrics_ : (ExecutorPeakMetricsDistributions)this.peakMemoryMetricsBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ExecutorMetricsDistributions) {
               return this.mergeFrom((ExecutorMetricsDistributions)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ExecutorMetricsDistributions other) {
            if (other == StoreTypes.ExecutorMetricsDistributions.getDefaultInstance()) {
               return this;
            } else {
               if (!other.quantiles_.isEmpty()) {
                  if (this.quantiles_.isEmpty()) {
                     this.quantiles_ = other.quantiles_;
                     this.quantiles_.makeImmutable();
                     this.bitField0_ |= 1;
                  } else {
                     this.ensureQuantilesIsMutable();
                     this.quantiles_.addAll(other.quantiles_);
                  }

                  this.onChanged();
               }

               if (!other.taskTime_.isEmpty()) {
                  if (this.taskTime_.isEmpty()) {
                     this.taskTime_ = other.taskTime_;
                     this.taskTime_.makeImmutable();
                     this.bitField0_ |= 2;
                  } else {
                     this.ensureTaskTimeIsMutable();
                     this.taskTime_.addAll(other.taskTime_);
                  }

                  this.onChanged();
               }

               if (!other.failedTasks_.isEmpty()) {
                  if (this.failedTasks_.isEmpty()) {
                     this.failedTasks_ = other.failedTasks_;
                     this.failedTasks_.makeImmutable();
                     this.bitField0_ |= 4;
                  } else {
                     this.ensureFailedTasksIsMutable();
                     this.failedTasks_.addAll(other.failedTasks_);
                  }

                  this.onChanged();
               }

               if (!other.succeededTasks_.isEmpty()) {
                  if (this.succeededTasks_.isEmpty()) {
                     this.succeededTasks_ = other.succeededTasks_;
                     this.succeededTasks_.makeImmutable();
                     this.bitField0_ |= 8;
                  } else {
                     this.ensureSucceededTasksIsMutable();
                     this.succeededTasks_.addAll(other.succeededTasks_);
                  }

                  this.onChanged();
               }

               if (!other.killedTasks_.isEmpty()) {
                  if (this.killedTasks_.isEmpty()) {
                     this.killedTasks_ = other.killedTasks_;
                     this.killedTasks_.makeImmutable();
                     this.bitField0_ |= 16;
                  } else {
                     this.ensureKilledTasksIsMutable();
                     this.killedTasks_.addAll(other.killedTasks_);
                  }

                  this.onChanged();
               }

               if (!other.inputBytes_.isEmpty()) {
                  if (this.inputBytes_.isEmpty()) {
                     this.inputBytes_ = other.inputBytes_;
                     this.inputBytes_.makeImmutable();
                     this.bitField0_ |= 32;
                  } else {
                     this.ensureInputBytesIsMutable();
                     this.inputBytes_.addAll(other.inputBytes_);
                  }

                  this.onChanged();
               }

               if (!other.inputRecords_.isEmpty()) {
                  if (this.inputRecords_.isEmpty()) {
                     this.inputRecords_ = other.inputRecords_;
                     this.inputRecords_.makeImmutable();
                     this.bitField0_ |= 64;
                  } else {
                     this.ensureInputRecordsIsMutable();
                     this.inputRecords_.addAll(other.inputRecords_);
                  }

                  this.onChanged();
               }

               if (!other.outputBytes_.isEmpty()) {
                  if (this.outputBytes_.isEmpty()) {
                     this.outputBytes_ = other.outputBytes_;
                     this.outputBytes_.makeImmutable();
                     this.bitField0_ |= 128;
                  } else {
                     this.ensureOutputBytesIsMutable();
                     this.outputBytes_.addAll(other.outputBytes_);
                  }

                  this.onChanged();
               }

               if (!other.outputRecords_.isEmpty()) {
                  if (this.outputRecords_.isEmpty()) {
                     this.outputRecords_ = other.outputRecords_;
                     this.outputRecords_.makeImmutable();
                     this.bitField0_ |= 256;
                  } else {
                     this.ensureOutputRecordsIsMutable();
                     this.outputRecords_.addAll(other.outputRecords_);
                  }

                  this.onChanged();
               }

               if (!other.shuffleRead_.isEmpty()) {
                  if (this.shuffleRead_.isEmpty()) {
                     this.shuffleRead_ = other.shuffleRead_;
                     this.shuffleRead_.makeImmutable();
                     this.bitField0_ |= 512;
                  } else {
                     this.ensureShuffleReadIsMutable();
                     this.shuffleRead_.addAll(other.shuffleRead_);
                  }

                  this.onChanged();
               }

               if (!other.shuffleReadRecords_.isEmpty()) {
                  if (this.shuffleReadRecords_.isEmpty()) {
                     this.shuffleReadRecords_ = other.shuffleReadRecords_;
                     this.shuffleReadRecords_.makeImmutable();
                     this.bitField0_ |= 1024;
                  } else {
                     this.ensureShuffleReadRecordsIsMutable();
                     this.shuffleReadRecords_.addAll(other.shuffleReadRecords_);
                  }

                  this.onChanged();
               }

               if (!other.shuffleWrite_.isEmpty()) {
                  if (this.shuffleWrite_.isEmpty()) {
                     this.shuffleWrite_ = other.shuffleWrite_;
                     this.shuffleWrite_.makeImmutable();
                     this.bitField0_ |= 2048;
                  } else {
                     this.ensureShuffleWriteIsMutable();
                     this.shuffleWrite_.addAll(other.shuffleWrite_);
                  }

                  this.onChanged();
               }

               if (!other.shuffleWriteRecords_.isEmpty()) {
                  if (this.shuffleWriteRecords_.isEmpty()) {
                     this.shuffleWriteRecords_ = other.shuffleWriteRecords_;
                     this.shuffleWriteRecords_.makeImmutable();
                     this.bitField0_ |= 4096;
                  } else {
                     this.ensureShuffleWriteRecordsIsMutable();
                     this.shuffleWriteRecords_.addAll(other.shuffleWriteRecords_);
                  }

                  this.onChanged();
               }

               if (!other.memoryBytesSpilled_.isEmpty()) {
                  if (this.memoryBytesSpilled_.isEmpty()) {
                     this.memoryBytesSpilled_ = other.memoryBytesSpilled_;
                     this.memoryBytesSpilled_.makeImmutable();
                     this.bitField0_ |= 8192;
                  } else {
                     this.ensureMemoryBytesSpilledIsMutable();
                     this.memoryBytesSpilled_.addAll(other.memoryBytesSpilled_);
                  }

                  this.onChanged();
               }

               if (!other.diskBytesSpilled_.isEmpty()) {
                  if (this.diskBytesSpilled_.isEmpty()) {
                     this.diskBytesSpilled_ = other.diskBytesSpilled_;
                     this.diskBytesSpilled_.makeImmutable();
                     this.bitField0_ |= 16384;
                  } else {
                     this.ensureDiskBytesSpilledIsMutable();
                     this.diskBytesSpilled_.addAll(other.diskBytesSpilled_);
                  }

                  this.onChanged();
               }

               if (other.hasPeakMemoryMetrics()) {
                  this.mergePeakMemoryMetrics(other.getPeakMemoryMetrics());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 48:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 79:
                        case 80:
                        case 83:
                        case 84:
                        case 85:
                        case 86:
                        case 87:
                        case 88:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 107:
                        case 108:
                        case 109:
                        case 110:
                        case 111:
                        case 112:
                        case 115:
                        case 116:
                        case 117:
                        case 118:
                        case 119:
                        case 120:
                        case 123:
                        case 124:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                           break;
                        case 9:
                           double v = input.readDouble();
                           this.ensureQuantilesIsMutable();
                           this.quantiles_.addDouble(v);
                           break;
                        case 10:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureQuantilesIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.quantiles_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 17:
                           double v = input.readDouble();
                           this.ensureTaskTimeIsMutable();
                           this.taskTime_.addDouble(v);
                           break;
                        case 18:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureTaskTimeIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.taskTime_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 25:
                           double v = input.readDouble();
                           this.ensureFailedTasksIsMutable();
                           this.failedTasks_.addDouble(v);
                           break;
                        case 26:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureFailedTasksIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.failedTasks_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 33:
                           double v = input.readDouble();
                           this.ensureSucceededTasksIsMutable();
                           this.succeededTasks_.addDouble(v);
                           break;
                        case 34:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureSucceededTasksIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.succeededTasks_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 41:
                           double v = input.readDouble();
                           this.ensureKilledTasksIsMutable();
                           this.killedTasks_.addDouble(v);
                           break;
                        case 42:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureKilledTasksIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.killedTasks_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 49:
                           double v = input.readDouble();
                           this.ensureInputBytesIsMutable();
                           this.inputBytes_.addDouble(v);
                           break;
                        case 50:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureInputBytesIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.inputBytes_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 57:
                           double v = input.readDouble();
                           this.ensureInputRecordsIsMutable();
                           this.inputRecords_.addDouble(v);
                           break;
                        case 58:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureInputRecordsIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.inputRecords_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 65:
                           double v = input.readDouble();
                           this.ensureOutputBytesIsMutable();
                           this.outputBytes_.addDouble(v);
                           break;
                        case 66:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureOutputBytesIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.outputBytes_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 73:
                           double v = input.readDouble();
                           this.ensureOutputRecordsIsMutable();
                           this.outputRecords_.addDouble(v);
                           break;
                        case 74:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureOutputRecordsIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.outputRecords_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 81:
                           double v = input.readDouble();
                           this.ensureShuffleReadIsMutable();
                           this.shuffleRead_.addDouble(v);
                           break;
                        case 82:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureShuffleReadIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.shuffleRead_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 89:
                           double v = input.readDouble();
                           this.ensureShuffleReadRecordsIsMutable();
                           this.shuffleReadRecords_.addDouble(v);
                           break;
                        case 90:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureShuffleReadRecordsIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.shuffleReadRecords_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 97:
                           double v = input.readDouble();
                           this.ensureShuffleWriteIsMutable();
                           this.shuffleWrite_.addDouble(v);
                           break;
                        case 98:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureShuffleWriteIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.shuffleWrite_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 105:
                           double v = input.readDouble();
                           this.ensureShuffleWriteRecordsIsMutable();
                           this.shuffleWriteRecords_.addDouble(v);
                           break;
                        case 106:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureShuffleWriteRecordsIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.shuffleWriteRecords_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 113:
                           double v = input.readDouble();
                           this.ensureMemoryBytesSpilledIsMutable();
                           this.memoryBytesSpilled_.addDouble(v);
                           break;
                        case 114:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureMemoryBytesSpilledIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.memoryBytesSpilled_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 121:
                           double v = input.readDouble();
                           this.ensureDiskBytesSpilledIsMutable();
                           this.diskBytesSpilled_.addDouble(v);
                           break;
                        case 122:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureDiskBytesSpilledIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.diskBytesSpilled_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 130:
                           input.readMessage((MessageLite.Builder)this.getPeakMemoryMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 32768;
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         private void ensureQuantilesIsMutable() {
            if (!this.quantiles_.isModifiable()) {
               this.quantiles_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.quantiles_);
            }

            this.bitField0_ |= 1;
         }

         private void ensureQuantilesIsMutable(int capacity) {
            if (!this.quantiles_.isModifiable()) {
               this.quantiles_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.quantiles_, capacity);
            }

            this.bitField0_ |= 1;
         }

         public List getQuantilesList() {
            this.quantiles_.makeImmutable();
            return this.quantiles_;
         }

         public int getQuantilesCount() {
            return this.quantiles_.size();
         }

         public double getQuantiles(int index) {
            return this.quantiles_.getDouble(index);
         }

         public Builder setQuantiles(int index, double value) {
            this.ensureQuantilesIsMutable();
            this.quantiles_.setDouble(index, value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addQuantiles(double value) {
            this.ensureQuantilesIsMutable();
            this.quantiles_.addDouble(value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addAllQuantiles(Iterable values) {
            this.ensureQuantilesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.quantiles_);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearQuantiles() {
            this.quantiles_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         private void ensureTaskTimeIsMutable() {
            if (!this.taskTime_.isModifiable()) {
               this.taskTime_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.taskTime_);
            }

            this.bitField0_ |= 2;
         }

         private void ensureTaskTimeIsMutable(int capacity) {
            if (!this.taskTime_.isModifiable()) {
               this.taskTime_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.taskTime_, capacity);
            }

            this.bitField0_ |= 2;
         }

         public List getTaskTimeList() {
            this.taskTime_.makeImmutable();
            return this.taskTime_;
         }

         public int getTaskTimeCount() {
            return this.taskTime_.size();
         }

         public double getTaskTime(int index) {
            return this.taskTime_.getDouble(index);
         }

         public Builder setTaskTime(int index, double value) {
            this.ensureTaskTimeIsMutable();
            this.taskTime_.setDouble(index, value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addTaskTime(double value) {
            this.ensureTaskTimeIsMutable();
            this.taskTime_.addDouble(value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addAllTaskTime(Iterable values) {
            this.ensureTaskTimeIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.taskTime_);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearTaskTime() {
            this.taskTime_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         private void ensureFailedTasksIsMutable() {
            if (!this.failedTasks_.isModifiable()) {
               this.failedTasks_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.failedTasks_);
            }

            this.bitField0_ |= 4;
         }

         private void ensureFailedTasksIsMutable(int capacity) {
            if (!this.failedTasks_.isModifiable()) {
               this.failedTasks_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.failedTasks_, capacity);
            }

            this.bitField0_ |= 4;
         }

         public List getFailedTasksList() {
            this.failedTasks_.makeImmutable();
            return this.failedTasks_;
         }

         public int getFailedTasksCount() {
            return this.failedTasks_.size();
         }

         public double getFailedTasks(int index) {
            return this.failedTasks_.getDouble(index);
         }

         public Builder setFailedTasks(int index, double value) {
            this.ensureFailedTasksIsMutable();
            this.failedTasks_.setDouble(index, value);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder addFailedTasks(double value) {
            this.ensureFailedTasksIsMutable();
            this.failedTasks_.addDouble(value);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder addAllFailedTasks(Iterable values) {
            this.ensureFailedTasksIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.failedTasks_);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearFailedTasks() {
            this.failedTasks_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         private void ensureSucceededTasksIsMutable() {
            if (!this.succeededTasks_.isModifiable()) {
               this.succeededTasks_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.succeededTasks_);
            }

            this.bitField0_ |= 8;
         }

         private void ensureSucceededTasksIsMutable(int capacity) {
            if (!this.succeededTasks_.isModifiable()) {
               this.succeededTasks_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.succeededTasks_, capacity);
            }

            this.bitField0_ |= 8;
         }

         public List getSucceededTasksList() {
            this.succeededTasks_.makeImmutable();
            return this.succeededTasks_;
         }

         public int getSucceededTasksCount() {
            return this.succeededTasks_.size();
         }

         public double getSucceededTasks(int index) {
            return this.succeededTasks_.getDouble(index);
         }

         public Builder setSucceededTasks(int index, double value) {
            this.ensureSucceededTasksIsMutable();
            this.succeededTasks_.setDouble(index, value);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder addSucceededTasks(double value) {
            this.ensureSucceededTasksIsMutable();
            this.succeededTasks_.addDouble(value);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder addAllSucceededTasks(Iterable values) {
            this.ensureSucceededTasksIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.succeededTasks_);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearSucceededTasks() {
            this.succeededTasks_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -9;
            this.onChanged();
            return this;
         }

         private void ensureKilledTasksIsMutable() {
            if (!this.killedTasks_.isModifiable()) {
               this.killedTasks_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.killedTasks_);
            }

            this.bitField0_ |= 16;
         }

         private void ensureKilledTasksIsMutable(int capacity) {
            if (!this.killedTasks_.isModifiable()) {
               this.killedTasks_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.killedTasks_, capacity);
            }

            this.bitField0_ |= 16;
         }

         public List getKilledTasksList() {
            this.killedTasks_.makeImmutable();
            return this.killedTasks_;
         }

         public int getKilledTasksCount() {
            return this.killedTasks_.size();
         }

         public double getKilledTasks(int index) {
            return this.killedTasks_.getDouble(index);
         }

         public Builder setKilledTasks(int index, double value) {
            this.ensureKilledTasksIsMutable();
            this.killedTasks_.setDouble(index, value);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder addKilledTasks(double value) {
            this.ensureKilledTasksIsMutable();
            this.killedTasks_.addDouble(value);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder addAllKilledTasks(Iterable values) {
            this.ensureKilledTasksIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.killedTasks_);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearKilledTasks() {
            this.killedTasks_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -17;
            this.onChanged();
            return this;
         }

         private void ensureInputBytesIsMutable() {
            if (!this.inputBytes_.isModifiable()) {
               this.inputBytes_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.inputBytes_);
            }

            this.bitField0_ |= 32;
         }

         private void ensureInputBytesIsMutable(int capacity) {
            if (!this.inputBytes_.isModifiable()) {
               this.inputBytes_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.inputBytes_, capacity);
            }

            this.bitField0_ |= 32;
         }

         public List getInputBytesList() {
            this.inputBytes_.makeImmutable();
            return this.inputBytes_;
         }

         public int getInputBytesCount() {
            return this.inputBytes_.size();
         }

         public double getInputBytes(int index) {
            return this.inputBytes_.getDouble(index);
         }

         public Builder setInputBytes(int index, double value) {
            this.ensureInputBytesIsMutable();
            this.inputBytes_.setDouble(index, value);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder addInputBytes(double value) {
            this.ensureInputBytesIsMutable();
            this.inputBytes_.addDouble(value);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder addAllInputBytes(Iterable values) {
            this.ensureInputBytesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.inputBytes_);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearInputBytes() {
            this.inputBytes_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -33;
            this.onChanged();
            return this;
         }

         private void ensureInputRecordsIsMutable() {
            if (!this.inputRecords_.isModifiable()) {
               this.inputRecords_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.inputRecords_);
            }

            this.bitField0_ |= 64;
         }

         private void ensureInputRecordsIsMutable(int capacity) {
            if (!this.inputRecords_.isModifiable()) {
               this.inputRecords_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.inputRecords_, capacity);
            }

            this.bitField0_ |= 64;
         }

         public List getInputRecordsList() {
            this.inputRecords_.makeImmutable();
            return this.inputRecords_;
         }

         public int getInputRecordsCount() {
            return this.inputRecords_.size();
         }

         public double getInputRecords(int index) {
            return this.inputRecords_.getDouble(index);
         }

         public Builder setInputRecords(int index, double value) {
            this.ensureInputRecordsIsMutable();
            this.inputRecords_.setDouble(index, value);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder addInputRecords(double value) {
            this.ensureInputRecordsIsMutable();
            this.inputRecords_.addDouble(value);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder addAllInputRecords(Iterable values) {
            this.ensureInputRecordsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.inputRecords_);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearInputRecords() {
            this.inputRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -65;
            this.onChanged();
            return this;
         }

         private void ensureOutputBytesIsMutable() {
            if (!this.outputBytes_.isModifiable()) {
               this.outputBytes_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.outputBytes_);
            }

            this.bitField0_ |= 128;
         }

         private void ensureOutputBytesIsMutable(int capacity) {
            if (!this.outputBytes_.isModifiable()) {
               this.outputBytes_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.outputBytes_, capacity);
            }

            this.bitField0_ |= 128;
         }

         public List getOutputBytesList() {
            this.outputBytes_.makeImmutable();
            return this.outputBytes_;
         }

         public int getOutputBytesCount() {
            return this.outputBytes_.size();
         }

         public double getOutputBytes(int index) {
            return this.outputBytes_.getDouble(index);
         }

         public Builder setOutputBytes(int index, double value) {
            this.ensureOutputBytesIsMutable();
            this.outputBytes_.setDouble(index, value);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder addOutputBytes(double value) {
            this.ensureOutputBytesIsMutable();
            this.outputBytes_.addDouble(value);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder addAllOutputBytes(Iterable values) {
            this.ensureOutputBytesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.outputBytes_);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearOutputBytes() {
            this.outputBytes_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -129;
            this.onChanged();
            return this;
         }

         private void ensureOutputRecordsIsMutable() {
            if (!this.outputRecords_.isModifiable()) {
               this.outputRecords_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.outputRecords_);
            }

            this.bitField0_ |= 256;
         }

         private void ensureOutputRecordsIsMutable(int capacity) {
            if (!this.outputRecords_.isModifiable()) {
               this.outputRecords_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.outputRecords_, capacity);
            }

            this.bitField0_ |= 256;
         }

         public List getOutputRecordsList() {
            this.outputRecords_.makeImmutable();
            return this.outputRecords_;
         }

         public int getOutputRecordsCount() {
            return this.outputRecords_.size();
         }

         public double getOutputRecords(int index) {
            return this.outputRecords_.getDouble(index);
         }

         public Builder setOutputRecords(int index, double value) {
            this.ensureOutputRecordsIsMutable();
            this.outputRecords_.setDouble(index, value);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder addOutputRecords(double value) {
            this.ensureOutputRecordsIsMutable();
            this.outputRecords_.addDouble(value);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder addAllOutputRecords(Iterable values) {
            this.ensureOutputRecordsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.outputRecords_);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearOutputRecords() {
            this.outputRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -257;
            this.onChanged();
            return this;
         }

         private void ensureShuffleReadIsMutable() {
            if (!this.shuffleRead_.isModifiable()) {
               this.shuffleRead_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.shuffleRead_);
            }

            this.bitField0_ |= 512;
         }

         private void ensureShuffleReadIsMutable(int capacity) {
            if (!this.shuffleRead_.isModifiable()) {
               this.shuffleRead_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.shuffleRead_, capacity);
            }

            this.bitField0_ |= 512;
         }

         public List getShuffleReadList() {
            this.shuffleRead_.makeImmutable();
            return this.shuffleRead_;
         }

         public int getShuffleReadCount() {
            return this.shuffleRead_.size();
         }

         public double getShuffleRead(int index) {
            return this.shuffleRead_.getDouble(index);
         }

         public Builder setShuffleRead(int index, double value) {
            this.ensureShuffleReadIsMutable();
            this.shuffleRead_.setDouble(index, value);
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder addShuffleRead(double value) {
            this.ensureShuffleReadIsMutable();
            this.shuffleRead_.addDouble(value);
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder addAllShuffleRead(Iterable values) {
            this.ensureShuffleReadIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.shuffleRead_);
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleRead() {
            this.shuffleRead_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -513;
            this.onChanged();
            return this;
         }

         private void ensureShuffleReadRecordsIsMutable() {
            if (!this.shuffleReadRecords_.isModifiable()) {
               this.shuffleReadRecords_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.shuffleReadRecords_);
            }

            this.bitField0_ |= 1024;
         }

         private void ensureShuffleReadRecordsIsMutable(int capacity) {
            if (!this.shuffleReadRecords_.isModifiable()) {
               this.shuffleReadRecords_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.shuffleReadRecords_, capacity);
            }

            this.bitField0_ |= 1024;
         }

         public List getShuffleReadRecordsList() {
            this.shuffleReadRecords_.makeImmutable();
            return this.shuffleReadRecords_;
         }

         public int getShuffleReadRecordsCount() {
            return this.shuffleReadRecords_.size();
         }

         public double getShuffleReadRecords(int index) {
            return this.shuffleReadRecords_.getDouble(index);
         }

         public Builder setShuffleReadRecords(int index, double value) {
            this.ensureShuffleReadRecordsIsMutable();
            this.shuffleReadRecords_.setDouble(index, value);
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder addShuffleReadRecords(double value) {
            this.ensureShuffleReadRecordsIsMutable();
            this.shuffleReadRecords_.addDouble(value);
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder addAllShuffleReadRecords(Iterable values) {
            this.ensureShuffleReadRecordsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.shuffleReadRecords_);
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleReadRecords() {
            this.shuffleReadRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -1025;
            this.onChanged();
            return this;
         }

         private void ensureShuffleWriteIsMutable() {
            if (!this.shuffleWrite_.isModifiable()) {
               this.shuffleWrite_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.shuffleWrite_);
            }

            this.bitField0_ |= 2048;
         }

         private void ensureShuffleWriteIsMutable(int capacity) {
            if (!this.shuffleWrite_.isModifiable()) {
               this.shuffleWrite_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.shuffleWrite_, capacity);
            }

            this.bitField0_ |= 2048;
         }

         public List getShuffleWriteList() {
            this.shuffleWrite_.makeImmutable();
            return this.shuffleWrite_;
         }

         public int getShuffleWriteCount() {
            return this.shuffleWrite_.size();
         }

         public double getShuffleWrite(int index) {
            return this.shuffleWrite_.getDouble(index);
         }

         public Builder setShuffleWrite(int index, double value) {
            this.ensureShuffleWriteIsMutable();
            this.shuffleWrite_.setDouble(index, value);
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder addShuffleWrite(double value) {
            this.ensureShuffleWriteIsMutable();
            this.shuffleWrite_.addDouble(value);
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder addAllShuffleWrite(Iterable values) {
            this.ensureShuffleWriteIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.shuffleWrite_);
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleWrite() {
            this.shuffleWrite_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -2049;
            this.onChanged();
            return this;
         }

         private void ensureShuffleWriteRecordsIsMutable() {
            if (!this.shuffleWriteRecords_.isModifiable()) {
               this.shuffleWriteRecords_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.shuffleWriteRecords_);
            }

            this.bitField0_ |= 4096;
         }

         private void ensureShuffleWriteRecordsIsMutable(int capacity) {
            if (!this.shuffleWriteRecords_.isModifiable()) {
               this.shuffleWriteRecords_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.shuffleWriteRecords_, capacity);
            }

            this.bitField0_ |= 4096;
         }

         public List getShuffleWriteRecordsList() {
            this.shuffleWriteRecords_.makeImmutable();
            return this.shuffleWriteRecords_;
         }

         public int getShuffleWriteRecordsCount() {
            return this.shuffleWriteRecords_.size();
         }

         public double getShuffleWriteRecords(int index) {
            return this.shuffleWriteRecords_.getDouble(index);
         }

         public Builder setShuffleWriteRecords(int index, double value) {
            this.ensureShuffleWriteRecordsIsMutable();
            this.shuffleWriteRecords_.setDouble(index, value);
            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder addShuffleWriteRecords(double value) {
            this.ensureShuffleWriteRecordsIsMutable();
            this.shuffleWriteRecords_.addDouble(value);
            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder addAllShuffleWriteRecords(Iterable values) {
            this.ensureShuffleWriteRecordsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.shuffleWriteRecords_);
            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder clearShuffleWriteRecords() {
            this.shuffleWriteRecords_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -4097;
            this.onChanged();
            return this;
         }

         private void ensureMemoryBytesSpilledIsMutable() {
            if (!this.memoryBytesSpilled_.isModifiable()) {
               this.memoryBytesSpilled_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.memoryBytesSpilled_);
            }

            this.bitField0_ |= 8192;
         }

         private void ensureMemoryBytesSpilledIsMutable(int capacity) {
            if (!this.memoryBytesSpilled_.isModifiable()) {
               this.memoryBytesSpilled_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.memoryBytesSpilled_, capacity);
            }

            this.bitField0_ |= 8192;
         }

         public List getMemoryBytesSpilledList() {
            this.memoryBytesSpilled_.makeImmutable();
            return this.memoryBytesSpilled_;
         }

         public int getMemoryBytesSpilledCount() {
            return this.memoryBytesSpilled_.size();
         }

         public double getMemoryBytesSpilled(int index) {
            return this.memoryBytesSpilled_.getDouble(index);
         }

         public Builder setMemoryBytesSpilled(int index, double value) {
            this.ensureMemoryBytesSpilledIsMutable();
            this.memoryBytesSpilled_.setDouble(index, value);
            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder addMemoryBytesSpilled(double value) {
            this.ensureMemoryBytesSpilledIsMutable();
            this.memoryBytesSpilled_.addDouble(value);
            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder addAllMemoryBytesSpilled(Iterable values) {
            this.ensureMemoryBytesSpilledIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.memoryBytesSpilled_);
            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryBytesSpilled() {
            this.memoryBytesSpilled_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -8193;
            this.onChanged();
            return this;
         }

         private void ensureDiskBytesSpilledIsMutable() {
            if (!this.diskBytesSpilled_.isModifiable()) {
               this.diskBytesSpilled_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.diskBytesSpilled_);
            }

            this.bitField0_ |= 16384;
         }

         private void ensureDiskBytesSpilledIsMutable(int capacity) {
            if (!this.diskBytesSpilled_.isModifiable()) {
               this.diskBytesSpilled_ = (Internal.DoubleList)StoreTypes.ExecutorMetricsDistributions.makeMutableCopy(this.diskBytesSpilled_, capacity);
            }

            this.bitField0_ |= 16384;
         }

         public List getDiskBytesSpilledList() {
            this.diskBytesSpilled_.makeImmutable();
            return this.diskBytesSpilled_;
         }

         public int getDiskBytesSpilledCount() {
            return this.diskBytesSpilled_.size();
         }

         public double getDiskBytesSpilled(int index) {
            return this.diskBytesSpilled_.getDouble(index);
         }

         public Builder setDiskBytesSpilled(int index, double value) {
            this.ensureDiskBytesSpilledIsMutable();
            this.diskBytesSpilled_.setDouble(index, value);
            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder addDiskBytesSpilled(double value) {
            this.ensureDiskBytesSpilledIsMutable();
            this.diskBytesSpilled_.addDouble(value);
            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder addAllDiskBytesSpilled(Iterable values) {
            this.ensureDiskBytesSpilledIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.diskBytesSpilled_);
            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder clearDiskBytesSpilled() {
            this.diskBytesSpilled_ = StoreTypes.ExecutorMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -16385;
            this.onChanged();
            return this;
         }

         public boolean hasPeakMemoryMetrics() {
            return (this.bitField0_ & '耀') != 0;
         }

         public ExecutorPeakMetricsDistributions getPeakMemoryMetrics() {
            if (this.peakMemoryMetricsBuilder_ == null) {
               return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorPeakMetricsDistributions.getDefaultInstance() : this.peakMemoryMetrics_;
            } else {
               return (ExecutorPeakMetricsDistributions)this.peakMemoryMetricsBuilder_.getMessage();
            }
         }

         public Builder setPeakMemoryMetrics(ExecutorPeakMetricsDistributions value) {
            if (this.peakMemoryMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.peakMemoryMetrics_ = value;
            } else {
               this.peakMemoryMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder setPeakMemoryMetrics(ExecutorPeakMetricsDistributions.Builder builderForValue) {
            if (this.peakMemoryMetricsBuilder_ == null) {
               this.peakMemoryMetrics_ = builderForValue.build();
            } else {
               this.peakMemoryMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder mergePeakMemoryMetrics(ExecutorPeakMetricsDistributions value) {
            if (this.peakMemoryMetricsBuilder_ == null) {
               if ((this.bitField0_ & '耀') != 0 && this.peakMemoryMetrics_ != null && this.peakMemoryMetrics_ != StoreTypes.ExecutorPeakMetricsDistributions.getDefaultInstance()) {
                  this.getPeakMemoryMetricsBuilder().mergeFrom(value);
               } else {
                  this.peakMemoryMetrics_ = value;
               }
            } else {
               this.peakMemoryMetricsBuilder_.mergeFrom(value);
            }

            if (this.peakMemoryMetrics_ != null) {
               this.bitField0_ |= 32768;
               this.onChanged();
            }

            return this;
         }

         public Builder clearPeakMemoryMetrics() {
            this.bitField0_ &= -32769;
            this.peakMemoryMetrics_ = null;
            if (this.peakMemoryMetricsBuilder_ != null) {
               this.peakMemoryMetricsBuilder_.dispose();
               this.peakMemoryMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ExecutorPeakMetricsDistributions.Builder getPeakMemoryMetricsBuilder() {
            this.bitField0_ |= 32768;
            this.onChanged();
            return (ExecutorPeakMetricsDistributions.Builder)this.getPeakMemoryMetricsFieldBuilder().getBuilder();
         }

         public ExecutorPeakMetricsDistributionsOrBuilder getPeakMemoryMetricsOrBuilder() {
            if (this.peakMemoryMetricsBuilder_ != null) {
               return (ExecutorPeakMetricsDistributionsOrBuilder)this.peakMemoryMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.peakMemoryMetrics_ == null ? StoreTypes.ExecutorPeakMetricsDistributions.getDefaultInstance() : this.peakMemoryMetrics_;
            }
         }

         private SingleFieldBuilder getPeakMemoryMetricsFieldBuilder() {
            if (this.peakMemoryMetricsBuilder_ == null) {
               this.peakMemoryMetricsBuilder_ = new SingleFieldBuilder(this.getPeakMemoryMetrics(), this.getParentForChildren(), this.isClean());
               this.peakMemoryMetrics_ = null;
            }

            return this.peakMemoryMetricsBuilder_;
         }
      }
   }

   public interface ExecutorMetricsDistributionsOrBuilder extends MessageOrBuilder {
      List getQuantilesList();

      int getQuantilesCount();

      double getQuantiles(int var1);

      List getTaskTimeList();

      int getTaskTimeCount();

      double getTaskTime(int var1);

      List getFailedTasksList();

      int getFailedTasksCount();

      double getFailedTasks(int var1);

      List getSucceededTasksList();

      int getSucceededTasksCount();

      double getSucceededTasks(int var1);

      List getKilledTasksList();

      int getKilledTasksCount();

      double getKilledTasks(int var1);

      List getInputBytesList();

      int getInputBytesCount();

      double getInputBytes(int var1);

      List getInputRecordsList();

      int getInputRecordsCount();

      double getInputRecords(int var1);

      List getOutputBytesList();

      int getOutputBytesCount();

      double getOutputBytes(int var1);

      List getOutputRecordsList();

      int getOutputRecordsCount();

      double getOutputRecords(int var1);

      List getShuffleReadList();

      int getShuffleReadCount();

      double getShuffleRead(int var1);

      List getShuffleReadRecordsList();

      int getShuffleReadRecordsCount();

      double getShuffleReadRecords(int var1);

      List getShuffleWriteList();

      int getShuffleWriteCount();

      double getShuffleWrite(int var1);

      List getShuffleWriteRecordsList();

      int getShuffleWriteRecordsCount();

      double getShuffleWriteRecords(int var1);

      List getMemoryBytesSpilledList();

      int getMemoryBytesSpilledCount();

      double getMemoryBytesSpilled(int var1);

      List getDiskBytesSpilledList();

      int getDiskBytesSpilledCount();

      double getDiskBytesSpilled(int var1);

      boolean hasPeakMemoryMetrics();

      ExecutorPeakMetricsDistributions getPeakMemoryMetrics();

      ExecutorPeakMetricsDistributionsOrBuilder getPeakMemoryMetricsOrBuilder();
   }

   public interface ExecutorMetricsOrBuilder extends MessageOrBuilder {
      int getMetricsCount();

      boolean containsMetrics(String var1);

      /** @deprecated */
      @Deprecated
      Map getMetrics();

      Map getMetricsMap();

      long getMetricsOrDefault(String var1, long var2);

      long getMetricsOrThrow(String var1);
   }

   public static final class ExecutorPeakMetricsDistributions extends GeneratedMessage implements ExecutorPeakMetricsDistributionsOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int QUANTILES_FIELD_NUMBER = 1;
      private Internal.DoubleList quantiles_ = emptyDoubleList();
      private int quantilesMemoizedSerializedSize = -1;
      public static final int EXECUTOR_METRICS_FIELD_NUMBER = 2;
      private List executorMetrics_;
      private byte memoizedIsInitialized = -1;
      private static final ExecutorPeakMetricsDistributions DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ExecutorPeakMetricsDistributions(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ExecutorPeakMetricsDistributions() {
         this.quantiles_ = emptyDoubleList();
         this.executorMetrics_ = Collections.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorPeakMetricsDistributions_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorPeakMetricsDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorPeakMetricsDistributions.class, Builder.class);
      }

      public List getQuantilesList() {
         return this.quantiles_;
      }

      public int getQuantilesCount() {
         return this.quantiles_.size();
      }

      public double getQuantiles(int index) {
         return this.quantiles_.getDouble(index);
      }

      public List getExecutorMetricsList() {
         return this.executorMetrics_;
      }

      public List getExecutorMetricsOrBuilderList() {
         return this.executorMetrics_;
      }

      public int getExecutorMetricsCount() {
         return this.executorMetrics_.size();
      }

      public ExecutorMetrics getExecutorMetrics(int index) {
         return (ExecutorMetrics)this.executorMetrics_.get(index);
      }

      public ExecutorMetricsOrBuilder getExecutorMetricsOrBuilder(int index) {
         return (ExecutorMetricsOrBuilder)this.executorMetrics_.get(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if (this.getQuantilesList().size() > 0) {
            output.writeUInt32NoTag(10);
            output.writeUInt32NoTag(this.quantilesMemoizedSerializedSize);
         }

         for(int i = 0; i < this.quantiles_.size(); ++i) {
            output.writeDoubleNoTag(this.quantiles_.getDouble(i));
         }

         for(int i = 0; i < this.executorMetrics_.size(); ++i) {
            output.writeMessage(2, (MessageLite)this.executorMetrics_.get(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            int dataSize = 0;
            dataSize = 8 * this.getQuantilesList().size();
            size += dataSize;
            if (!this.getQuantilesList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.quantilesMemoizedSerializedSize = dataSize;

            for(int i = 0; i < this.executorMetrics_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(2, (MessageLite)this.executorMetrics_.get(i));
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ExecutorPeakMetricsDistributions)) {
            return super.equals(obj);
         } else {
            ExecutorPeakMetricsDistributions other = (ExecutorPeakMetricsDistributions)obj;
            if (!this.getQuantilesList().equals(other.getQuantilesList())) {
               return false;
            } else if (!this.getExecutorMetricsList().equals(other.getExecutorMetricsList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.getQuantilesCount() > 0) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getQuantilesList().hashCode();
            }

            if (this.getExecutorMetricsCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getExecutorMetricsList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ExecutorPeakMetricsDistributions parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ExecutorPeakMetricsDistributions)PARSER.parseFrom(data);
      }

      public static ExecutorPeakMetricsDistributions parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorPeakMetricsDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorPeakMetricsDistributions parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ExecutorPeakMetricsDistributions)PARSER.parseFrom(data);
      }

      public static ExecutorPeakMetricsDistributions parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorPeakMetricsDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorPeakMetricsDistributions parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ExecutorPeakMetricsDistributions)PARSER.parseFrom(data);
      }

      public static ExecutorPeakMetricsDistributions parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ExecutorPeakMetricsDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ExecutorPeakMetricsDistributions parseFrom(InputStream input) throws IOException {
         return (ExecutorPeakMetricsDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorPeakMetricsDistributions parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorPeakMetricsDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorPeakMetricsDistributions parseDelimitedFrom(InputStream input) throws IOException {
         return (ExecutorPeakMetricsDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ExecutorPeakMetricsDistributions parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorPeakMetricsDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ExecutorPeakMetricsDistributions parseFrom(CodedInputStream input) throws IOException {
         return (ExecutorPeakMetricsDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ExecutorPeakMetricsDistributions parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ExecutorPeakMetricsDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ExecutorPeakMetricsDistributions prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ExecutorPeakMetricsDistributions getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ExecutorPeakMetricsDistributions getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ExecutorPeakMetricsDistributions.class.getName());
         DEFAULT_INSTANCE = new ExecutorPeakMetricsDistributions();
         PARSER = new AbstractParser() {
            public ExecutorPeakMetricsDistributions parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ExecutorPeakMetricsDistributions.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ExecutorPeakMetricsDistributionsOrBuilder {
         private int bitField0_;
         private Internal.DoubleList quantiles_ = StoreTypes.ExecutorPeakMetricsDistributions.emptyDoubleList();
         private List executorMetrics_ = Collections.emptyList();
         private RepeatedFieldBuilder executorMetricsBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorPeakMetricsDistributions_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorPeakMetricsDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(ExecutorPeakMetricsDistributions.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.quantiles_ = StoreTypes.ExecutorPeakMetricsDistributions.emptyDoubleList();
            if (this.executorMetricsBuilder_ == null) {
               this.executorMetrics_ = Collections.emptyList();
            } else {
               this.executorMetrics_ = null;
               this.executorMetricsBuilder_.clear();
            }

            this.bitField0_ &= -3;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ExecutorPeakMetricsDistributions_descriptor;
         }

         public ExecutorPeakMetricsDistributions getDefaultInstanceForType() {
            return StoreTypes.ExecutorPeakMetricsDistributions.getDefaultInstance();
         }

         public ExecutorPeakMetricsDistributions build() {
            ExecutorPeakMetricsDistributions result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ExecutorPeakMetricsDistributions buildPartial() {
            ExecutorPeakMetricsDistributions result = new ExecutorPeakMetricsDistributions(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(ExecutorPeakMetricsDistributions result) {
            if (this.executorMetricsBuilder_ == null) {
               if ((this.bitField0_ & 2) != 0) {
                  this.executorMetrics_ = Collections.unmodifiableList(this.executorMetrics_);
                  this.bitField0_ &= -3;
               }

               result.executorMetrics_ = this.executorMetrics_;
            } else {
               result.executorMetrics_ = this.executorMetricsBuilder_.build();
            }

         }

         private void buildPartial0(ExecutorPeakMetricsDistributions result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               this.quantiles_.makeImmutable();
               result.quantiles_ = this.quantiles_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ExecutorPeakMetricsDistributions) {
               return this.mergeFrom((ExecutorPeakMetricsDistributions)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ExecutorPeakMetricsDistributions other) {
            if (other == StoreTypes.ExecutorPeakMetricsDistributions.getDefaultInstance()) {
               return this;
            } else {
               if (!other.quantiles_.isEmpty()) {
                  if (this.quantiles_.isEmpty()) {
                     this.quantiles_ = other.quantiles_;
                     this.quantiles_.makeImmutable();
                     this.bitField0_ |= 1;
                  } else {
                     this.ensureQuantilesIsMutable();
                     this.quantiles_.addAll(other.quantiles_);
                  }

                  this.onChanged();
               }

               if (this.executorMetricsBuilder_ == null) {
                  if (!other.executorMetrics_.isEmpty()) {
                     if (this.executorMetrics_.isEmpty()) {
                        this.executorMetrics_ = other.executorMetrics_;
                        this.bitField0_ &= -3;
                     } else {
                        this.ensureExecutorMetricsIsMutable();
                        this.executorMetrics_.addAll(other.executorMetrics_);
                     }

                     this.onChanged();
                  }
               } else if (!other.executorMetrics_.isEmpty()) {
                  if (this.executorMetricsBuilder_.isEmpty()) {
                     this.executorMetricsBuilder_.dispose();
                     this.executorMetricsBuilder_ = null;
                     this.executorMetrics_ = other.executorMetrics_;
                     this.bitField0_ &= -3;
                     this.executorMetricsBuilder_ = StoreTypes.ExecutorPeakMetricsDistributions.alwaysUseFieldBuilders ? this.getExecutorMetricsFieldBuilder() : null;
                  } else {
                     this.executorMetricsBuilder_.addAllMessages(other.executorMetrics_);
                  }
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 9:
                           double v = input.readDouble();
                           this.ensureQuantilesIsMutable();
                           this.quantiles_.addDouble(v);
                           break;
                        case 10:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureQuantilesIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.quantiles_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 18:
                           ExecutorMetrics m = (ExecutorMetrics)input.readMessage(StoreTypes.ExecutorMetrics.parser(), extensionRegistry);
                           if (this.executorMetricsBuilder_ == null) {
                              this.ensureExecutorMetricsIsMutable();
                              this.executorMetrics_.add(m);
                           } else {
                              this.executorMetricsBuilder_.addMessage(m);
                           }
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         private void ensureQuantilesIsMutable() {
            if (!this.quantiles_.isModifiable()) {
               this.quantiles_ = (Internal.DoubleList)StoreTypes.ExecutorPeakMetricsDistributions.makeMutableCopy(this.quantiles_);
            }

            this.bitField0_ |= 1;
         }

         private void ensureQuantilesIsMutable(int capacity) {
            if (!this.quantiles_.isModifiable()) {
               this.quantiles_ = (Internal.DoubleList)StoreTypes.ExecutorPeakMetricsDistributions.makeMutableCopy(this.quantiles_, capacity);
            }

            this.bitField0_ |= 1;
         }

         public List getQuantilesList() {
            this.quantiles_.makeImmutable();
            return this.quantiles_;
         }

         public int getQuantilesCount() {
            return this.quantiles_.size();
         }

         public double getQuantiles(int index) {
            return this.quantiles_.getDouble(index);
         }

         public Builder setQuantiles(int index, double value) {
            this.ensureQuantilesIsMutable();
            this.quantiles_.setDouble(index, value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addQuantiles(double value) {
            this.ensureQuantilesIsMutable();
            this.quantiles_.addDouble(value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addAllQuantiles(Iterable values) {
            this.ensureQuantilesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.quantiles_);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearQuantiles() {
            this.quantiles_ = StoreTypes.ExecutorPeakMetricsDistributions.emptyDoubleList();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         private void ensureExecutorMetricsIsMutable() {
            if ((this.bitField0_ & 2) == 0) {
               this.executorMetrics_ = new ArrayList(this.executorMetrics_);
               this.bitField0_ |= 2;
            }

         }

         public List getExecutorMetricsList() {
            return this.executorMetricsBuilder_ == null ? Collections.unmodifiableList(this.executorMetrics_) : this.executorMetricsBuilder_.getMessageList();
         }

         public int getExecutorMetricsCount() {
            return this.executorMetricsBuilder_ == null ? this.executorMetrics_.size() : this.executorMetricsBuilder_.getCount();
         }

         public ExecutorMetrics getExecutorMetrics(int index) {
            return this.executorMetricsBuilder_ == null ? (ExecutorMetrics)this.executorMetrics_.get(index) : (ExecutorMetrics)this.executorMetricsBuilder_.getMessage(index);
         }

         public Builder setExecutorMetrics(int index, ExecutorMetrics value) {
            if (this.executorMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureExecutorMetricsIsMutable();
               this.executorMetrics_.set(index, value);
               this.onChanged();
            } else {
               this.executorMetricsBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setExecutorMetrics(int index, ExecutorMetrics.Builder builderForValue) {
            if (this.executorMetricsBuilder_ == null) {
               this.ensureExecutorMetricsIsMutable();
               this.executorMetrics_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.executorMetricsBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addExecutorMetrics(ExecutorMetrics value) {
            if (this.executorMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureExecutorMetricsIsMutable();
               this.executorMetrics_.add(value);
               this.onChanged();
            } else {
               this.executorMetricsBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addExecutorMetrics(int index, ExecutorMetrics value) {
            if (this.executorMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureExecutorMetricsIsMutable();
               this.executorMetrics_.add(index, value);
               this.onChanged();
            } else {
               this.executorMetricsBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addExecutorMetrics(ExecutorMetrics.Builder builderForValue) {
            if (this.executorMetricsBuilder_ == null) {
               this.ensureExecutorMetricsIsMutable();
               this.executorMetrics_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.executorMetricsBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addExecutorMetrics(int index, ExecutorMetrics.Builder builderForValue) {
            if (this.executorMetricsBuilder_ == null) {
               this.ensureExecutorMetricsIsMutable();
               this.executorMetrics_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.executorMetricsBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllExecutorMetrics(Iterable values) {
            if (this.executorMetricsBuilder_ == null) {
               this.ensureExecutorMetricsIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.executorMetrics_);
               this.onChanged();
            } else {
               this.executorMetricsBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearExecutorMetrics() {
            if (this.executorMetricsBuilder_ == null) {
               this.executorMetrics_ = Collections.emptyList();
               this.bitField0_ &= -3;
               this.onChanged();
            } else {
               this.executorMetricsBuilder_.clear();
            }

            return this;
         }

         public Builder removeExecutorMetrics(int index) {
            if (this.executorMetricsBuilder_ == null) {
               this.ensureExecutorMetricsIsMutable();
               this.executorMetrics_.remove(index);
               this.onChanged();
            } else {
               this.executorMetricsBuilder_.remove(index);
            }

            return this;
         }

         public ExecutorMetrics.Builder getExecutorMetricsBuilder(int index) {
            return (ExecutorMetrics.Builder)this.getExecutorMetricsFieldBuilder().getBuilder(index);
         }

         public ExecutorMetricsOrBuilder getExecutorMetricsOrBuilder(int index) {
            return this.executorMetricsBuilder_ == null ? (ExecutorMetricsOrBuilder)this.executorMetrics_.get(index) : (ExecutorMetricsOrBuilder)this.executorMetricsBuilder_.getMessageOrBuilder(index);
         }

         public List getExecutorMetricsOrBuilderList() {
            return this.executorMetricsBuilder_ != null ? this.executorMetricsBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.executorMetrics_);
         }

         public ExecutorMetrics.Builder addExecutorMetricsBuilder() {
            return (ExecutorMetrics.Builder)this.getExecutorMetricsFieldBuilder().addBuilder(StoreTypes.ExecutorMetrics.getDefaultInstance());
         }

         public ExecutorMetrics.Builder addExecutorMetricsBuilder(int index) {
            return (ExecutorMetrics.Builder)this.getExecutorMetricsFieldBuilder().addBuilder(index, StoreTypes.ExecutorMetrics.getDefaultInstance());
         }

         public List getExecutorMetricsBuilderList() {
            return this.getExecutorMetricsFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getExecutorMetricsFieldBuilder() {
            if (this.executorMetricsBuilder_ == null) {
               this.executorMetricsBuilder_ = new RepeatedFieldBuilder(this.executorMetrics_, (this.bitField0_ & 2) != 0, this.getParentForChildren(), this.isClean());
               this.executorMetrics_ = null;
            }

            return this.executorMetricsBuilder_;
         }
      }
   }

   public interface ExecutorPeakMetricsDistributionsOrBuilder extends MessageOrBuilder {
      List getQuantilesList();

      int getQuantilesCount();

      double getQuantiles(int var1);

      List getExecutorMetricsList();

      ExecutorMetrics getExecutorMetrics(int var1);

      int getExecutorMetricsCount();

      List getExecutorMetricsOrBuilderList();

      ExecutorMetricsOrBuilder getExecutorMetricsOrBuilder(int var1);
   }

   public interface ExecutorResourceRequestOrBuilder extends MessageOrBuilder {
      boolean hasResourceName();

      String getResourceName();

      ByteString getResourceNameBytes();

      long getAmount();

      boolean hasDiscoveryScript();

      String getDiscoveryScript();

      ByteString getDiscoveryScriptBytes();

      boolean hasVendor();

      String getVendor();

      ByteString getVendorBytes();
   }

   public interface ExecutorStageSummaryOrBuilder extends MessageOrBuilder {
      long getTaskTime();

      int getFailedTasks();

      int getSucceededTasks();

      int getKilledTasks();

      long getInputBytes();

      long getInputRecords();

      long getOutputBytes();

      long getOutputRecords();

      long getShuffleRead();

      long getShuffleReadRecords();

      long getShuffleWrite();

      long getShuffleWriteRecords();

      long getMemoryBytesSpilled();

      long getDiskBytesSpilled();

      boolean getIsBlacklistedForStage();

      boolean hasPeakMemoryMetrics();

      ExecutorMetrics getPeakMemoryMetrics();

      ExecutorMetricsOrBuilder getPeakMemoryMetricsOrBuilder();

      boolean getIsExcludedForStage();
   }

   public interface ExecutorStageSummaryWrapperOrBuilder extends MessageOrBuilder {
      long getStageId();

      int getStageAttemptId();

      boolean hasExecutorId();

      String getExecutorId();

      ByteString getExecutorIdBytes();

      boolean hasInfo();

      ExecutorStageSummary getInfo();

      ExecutorStageSummaryOrBuilder getInfoOrBuilder();
   }

   public interface ExecutorSummaryOrBuilder extends MessageOrBuilder {
      boolean hasId();

      String getId();

      ByteString getIdBytes();

      boolean hasHostPort();

      String getHostPort();

      ByteString getHostPortBytes();

      boolean getIsActive();

      int getRddBlocks();

      long getMemoryUsed();

      long getDiskUsed();

      int getTotalCores();

      int getMaxTasks();

      int getActiveTasks();

      int getFailedTasks();

      int getCompletedTasks();

      int getTotalTasks();

      long getTotalDuration();

      long getTotalGcTime();

      long getTotalInputBytes();

      long getTotalShuffleRead();

      long getTotalShuffleWrite();

      boolean getIsBlacklisted();

      long getMaxMemory();

      long getAddTime();

      boolean hasRemoveTime();

      long getRemoveTime();

      boolean hasRemoveReason();

      String getRemoveReason();

      ByteString getRemoveReasonBytes();

      int getExecutorLogsCount();

      boolean containsExecutorLogs(String var1);

      /** @deprecated */
      @Deprecated
      Map getExecutorLogs();

      Map getExecutorLogsMap();

      String getExecutorLogsOrDefault(String var1, String var2);

      String getExecutorLogsOrThrow(String var1);

      boolean hasMemoryMetrics();

      MemoryMetrics getMemoryMetrics();

      MemoryMetricsOrBuilder getMemoryMetricsOrBuilder();

      List getBlacklistedInStagesList();

      int getBlacklistedInStagesCount();

      long getBlacklistedInStages(int var1);

      boolean hasPeakMemoryMetrics();

      ExecutorMetrics getPeakMemoryMetrics();

      ExecutorMetricsOrBuilder getPeakMemoryMetricsOrBuilder();

      int getAttributesCount();

      boolean containsAttributes(String var1);

      /** @deprecated */
      @Deprecated
      Map getAttributes();

      Map getAttributesMap();

      String getAttributesOrDefault(String var1, String var2);

      String getAttributesOrThrow(String var1);

      int getResourcesCount();

      boolean containsResources(String var1);

      /** @deprecated */
      @Deprecated
      Map getResources();

      Map getResourcesMap();

      ResourceInformation getResourcesOrDefault(String var1, ResourceInformation var2);

      ResourceInformation getResourcesOrThrow(String var1);

      int getResourceProfileId();

      boolean getIsExcluded();

      List getExcludedInStagesList();

      int getExcludedInStagesCount();

      long getExcludedInStages(int var1);
   }

   public interface ExecutorSummaryWrapperOrBuilder extends MessageOrBuilder {
      boolean hasInfo();

      ExecutorSummary getInfo();

      ExecutorSummaryOrBuilder getInfoOrBuilder();
   }

   public static final class InputMetricDistributions extends GeneratedMessage implements InputMetricDistributionsOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int BYTES_READ_FIELD_NUMBER = 1;
      private Internal.DoubleList bytesRead_ = emptyDoubleList();
      private int bytesReadMemoizedSerializedSize = -1;
      public static final int RECORDS_READ_FIELD_NUMBER = 2;
      private Internal.DoubleList recordsRead_ = emptyDoubleList();
      private int recordsReadMemoizedSerializedSize = -1;
      private byte memoizedIsInitialized = -1;
      private static final InputMetricDistributions DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private InputMetricDistributions(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private InputMetricDistributions() {
         this.bytesRead_ = emptyDoubleList();
         this.recordsRead_ = emptyDoubleList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_InputMetricDistributions_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_InputMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(InputMetricDistributions.class, Builder.class);
      }

      public List getBytesReadList() {
         return this.bytesRead_;
      }

      public int getBytesReadCount() {
         return this.bytesRead_.size();
      }

      public double getBytesRead(int index) {
         return this.bytesRead_.getDouble(index);
      }

      public List getRecordsReadList() {
         return this.recordsRead_;
      }

      public int getRecordsReadCount() {
         return this.recordsRead_.size();
      }

      public double getRecordsRead(int index) {
         return this.recordsRead_.getDouble(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if (this.getBytesReadList().size() > 0) {
            output.writeUInt32NoTag(10);
            output.writeUInt32NoTag(this.bytesReadMemoizedSerializedSize);
         }

         for(int i = 0; i < this.bytesRead_.size(); ++i) {
            output.writeDoubleNoTag(this.bytesRead_.getDouble(i));
         }

         if (this.getRecordsReadList().size() > 0) {
            output.writeUInt32NoTag(18);
            output.writeUInt32NoTag(this.recordsReadMemoizedSerializedSize);
         }

         for(int i = 0; i < this.recordsRead_.size(); ++i) {
            output.writeDoubleNoTag(this.recordsRead_.getDouble(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            int dataSize = 0;
            dataSize = 8 * this.getBytesReadList().size();
            size += dataSize;
            if (!this.getBytesReadList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.bytesReadMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getRecordsReadList().size();
            size += dataSize;
            if (!this.getRecordsReadList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.recordsReadMemoizedSerializedSize = dataSize;
            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof InputMetricDistributions)) {
            return super.equals(obj);
         } else {
            InputMetricDistributions other = (InputMetricDistributions)obj;
            if (!this.getBytesReadList().equals(other.getBytesReadList())) {
               return false;
            } else if (!this.getRecordsReadList().equals(other.getRecordsReadList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.getBytesReadCount() > 0) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getBytesReadList().hashCode();
            }

            if (this.getRecordsReadCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getRecordsReadList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static InputMetricDistributions parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (InputMetricDistributions)PARSER.parseFrom(data);
      }

      public static InputMetricDistributions parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (InputMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static InputMetricDistributions parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (InputMetricDistributions)PARSER.parseFrom(data);
      }

      public static InputMetricDistributions parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (InputMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static InputMetricDistributions parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (InputMetricDistributions)PARSER.parseFrom(data);
      }

      public static InputMetricDistributions parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (InputMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static InputMetricDistributions parseFrom(InputStream input) throws IOException {
         return (InputMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static InputMetricDistributions parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (InputMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static InputMetricDistributions parseDelimitedFrom(InputStream input) throws IOException {
         return (InputMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static InputMetricDistributions parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (InputMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static InputMetricDistributions parseFrom(CodedInputStream input) throws IOException {
         return (InputMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static InputMetricDistributions parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (InputMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(InputMetricDistributions prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static InputMetricDistributions getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public InputMetricDistributions getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", InputMetricDistributions.class.getName());
         DEFAULT_INSTANCE = new InputMetricDistributions();
         PARSER = new AbstractParser() {
            public InputMetricDistributions parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.InputMetricDistributions.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements InputMetricDistributionsOrBuilder {
         private int bitField0_;
         private Internal.DoubleList bytesRead_ = StoreTypes.InputMetricDistributions.emptyDoubleList();
         private Internal.DoubleList recordsRead_ = StoreTypes.InputMetricDistributions.emptyDoubleList();

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_InputMetricDistributions_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_InputMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(InputMetricDistributions.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.bytesRead_ = StoreTypes.InputMetricDistributions.emptyDoubleList();
            this.recordsRead_ = StoreTypes.InputMetricDistributions.emptyDoubleList();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_InputMetricDistributions_descriptor;
         }

         public InputMetricDistributions getDefaultInstanceForType() {
            return StoreTypes.InputMetricDistributions.getDefaultInstance();
         }

         public InputMetricDistributions build() {
            InputMetricDistributions result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public InputMetricDistributions buildPartial() {
            InputMetricDistributions result = new InputMetricDistributions(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(InputMetricDistributions result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               this.bytesRead_.makeImmutable();
               result.bytesRead_ = this.bytesRead_;
            }

            if ((from_bitField0_ & 2) != 0) {
               this.recordsRead_.makeImmutable();
               result.recordsRead_ = this.recordsRead_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof InputMetricDistributions) {
               return this.mergeFrom((InputMetricDistributions)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(InputMetricDistributions other) {
            if (other == StoreTypes.InputMetricDistributions.getDefaultInstance()) {
               return this;
            } else {
               if (!other.bytesRead_.isEmpty()) {
                  if (this.bytesRead_.isEmpty()) {
                     this.bytesRead_ = other.bytesRead_;
                     this.bytesRead_.makeImmutable();
                     this.bitField0_ |= 1;
                  } else {
                     this.ensureBytesReadIsMutable();
                     this.bytesRead_.addAll(other.bytesRead_);
                  }

                  this.onChanged();
               }

               if (!other.recordsRead_.isEmpty()) {
                  if (this.recordsRead_.isEmpty()) {
                     this.recordsRead_ = other.recordsRead_;
                     this.recordsRead_.makeImmutable();
                     this.bitField0_ |= 2;
                  } else {
                     this.ensureRecordsReadIsMutable();
                     this.recordsRead_.addAll(other.recordsRead_);
                  }

                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 9:
                           double v = input.readDouble();
                           this.ensureBytesReadIsMutable();
                           this.bytesRead_.addDouble(v);
                           break;
                        case 10:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureBytesReadIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.bytesRead_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 17:
                           double v = input.readDouble();
                           this.ensureRecordsReadIsMutable();
                           this.recordsRead_.addDouble(v);
                           break;
                        case 18:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureRecordsReadIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.recordsRead_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         private void ensureBytesReadIsMutable() {
            if (!this.bytesRead_.isModifiable()) {
               this.bytesRead_ = (Internal.DoubleList)StoreTypes.InputMetricDistributions.makeMutableCopy(this.bytesRead_);
            }

            this.bitField0_ |= 1;
         }

         private void ensureBytesReadIsMutable(int capacity) {
            if (!this.bytesRead_.isModifiable()) {
               this.bytesRead_ = (Internal.DoubleList)StoreTypes.InputMetricDistributions.makeMutableCopy(this.bytesRead_, capacity);
            }

            this.bitField0_ |= 1;
         }

         public List getBytesReadList() {
            this.bytesRead_.makeImmutable();
            return this.bytesRead_;
         }

         public int getBytesReadCount() {
            return this.bytesRead_.size();
         }

         public double getBytesRead(int index) {
            return this.bytesRead_.getDouble(index);
         }

         public Builder setBytesRead(int index, double value) {
            this.ensureBytesReadIsMutable();
            this.bytesRead_.setDouble(index, value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addBytesRead(double value) {
            this.ensureBytesReadIsMutable();
            this.bytesRead_.addDouble(value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addAllBytesRead(Iterable values) {
            this.ensureBytesReadIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.bytesRead_);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearBytesRead() {
            this.bytesRead_ = StoreTypes.InputMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         private void ensureRecordsReadIsMutable() {
            if (!this.recordsRead_.isModifiable()) {
               this.recordsRead_ = (Internal.DoubleList)StoreTypes.InputMetricDistributions.makeMutableCopy(this.recordsRead_);
            }

            this.bitField0_ |= 2;
         }

         private void ensureRecordsReadIsMutable(int capacity) {
            if (!this.recordsRead_.isModifiable()) {
               this.recordsRead_ = (Internal.DoubleList)StoreTypes.InputMetricDistributions.makeMutableCopy(this.recordsRead_, capacity);
            }

            this.bitField0_ |= 2;
         }

         public List getRecordsReadList() {
            this.recordsRead_.makeImmutable();
            return this.recordsRead_;
         }

         public int getRecordsReadCount() {
            return this.recordsRead_.size();
         }

         public double getRecordsRead(int index) {
            return this.recordsRead_.getDouble(index);
         }

         public Builder setRecordsRead(int index, double value) {
            this.ensureRecordsReadIsMutable();
            this.recordsRead_.setDouble(index, value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addRecordsRead(double value) {
            this.ensureRecordsReadIsMutable();
            this.recordsRead_.addDouble(value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addAllRecordsRead(Iterable values) {
            this.ensureRecordsReadIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.recordsRead_);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearRecordsRead() {
            this.recordsRead_ = StoreTypes.InputMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }
      }
   }

   public interface InputMetricDistributionsOrBuilder extends MessageOrBuilder {
      List getBytesReadList();

      int getBytesReadCount();

      double getBytesRead(int var1);

      List getRecordsReadList();

      int getRecordsReadCount();

      double getRecordsRead(int var1);
   }

   public static final class InputMetrics extends GeneratedMessage implements InputMetricsOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int BYTES_READ_FIELD_NUMBER = 1;
      private long bytesRead_ = 0L;
      public static final int RECORDS_READ_FIELD_NUMBER = 2;
      private long recordsRead_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final InputMetrics DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private InputMetrics(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private InputMetrics() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_InputMetrics_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_InputMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(InputMetrics.class, Builder.class);
      }

      public long getBytesRead() {
         return this.bytesRead_;
      }

      public long getRecordsRead() {
         return this.recordsRead_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.bytesRead_ != 0L) {
            output.writeInt64(1, this.bytesRead_);
         }

         if (this.recordsRead_ != 0L) {
            output.writeInt64(2, this.recordsRead_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.bytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.bytesRead_);
            }

            if (this.recordsRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.recordsRead_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof InputMetrics)) {
            return super.equals(obj);
         } else {
            InputMetrics other = (InputMetrics)obj;
            if (this.getBytesRead() != other.getBytesRead()) {
               return false;
            } else if (this.getRecordsRead() != other.getRecordsRead()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getBytesRead());
            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getRecordsRead());
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static InputMetrics parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (InputMetrics)PARSER.parseFrom(data);
      }

      public static InputMetrics parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (InputMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static InputMetrics parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (InputMetrics)PARSER.parseFrom(data);
      }

      public static InputMetrics parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (InputMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static InputMetrics parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (InputMetrics)PARSER.parseFrom(data);
      }

      public static InputMetrics parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (InputMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static InputMetrics parseFrom(InputStream input) throws IOException {
         return (InputMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static InputMetrics parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (InputMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static InputMetrics parseDelimitedFrom(InputStream input) throws IOException {
         return (InputMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static InputMetrics parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (InputMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static InputMetrics parseFrom(CodedInputStream input) throws IOException {
         return (InputMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static InputMetrics parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (InputMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(InputMetrics prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static InputMetrics getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public InputMetrics getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", InputMetrics.class.getName());
         DEFAULT_INSTANCE = new InputMetrics();
         PARSER = new AbstractParser() {
            public InputMetrics parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.InputMetrics.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements InputMetricsOrBuilder {
         private int bitField0_;
         private long bytesRead_;
         private long recordsRead_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_InputMetrics_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_InputMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(InputMetrics.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.bytesRead_ = 0L;
            this.recordsRead_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_InputMetrics_descriptor;
         }

         public InputMetrics getDefaultInstanceForType() {
            return StoreTypes.InputMetrics.getDefaultInstance();
         }

         public InputMetrics build() {
            InputMetrics result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public InputMetrics buildPartial() {
            InputMetrics result = new InputMetrics(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(InputMetrics result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.bytesRead_ = this.bytesRead_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.recordsRead_ = this.recordsRead_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof InputMetrics) {
               return this.mergeFrom((InputMetrics)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(InputMetrics other) {
            if (other == StoreTypes.InputMetrics.getDefaultInstance()) {
               return this;
            } else {
               if (other.getBytesRead() != 0L) {
                  this.setBytesRead(other.getBytesRead());
               }

               if (other.getRecordsRead() != 0L) {
                  this.setRecordsRead(other.getRecordsRead());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.bytesRead_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.recordsRead_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getBytesRead() {
            return this.bytesRead_;
         }

         public Builder setBytesRead(long value) {
            this.bytesRead_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearBytesRead() {
            this.bitField0_ &= -2;
            this.bytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRecordsRead() {
            return this.recordsRead_;
         }

         public Builder setRecordsRead(long value) {
            this.recordsRead_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearRecordsRead() {
            this.bitField0_ &= -3;
            this.recordsRead_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public interface InputMetricsOrBuilder extends MessageOrBuilder {
      long getBytesRead();

      long getRecordsRead();
   }

   public interface JobDataOrBuilder extends MessageOrBuilder {
      long getJobId();

      boolean hasName();

      String getName();

      ByteString getNameBytes();

      boolean hasDescription();

      String getDescription();

      ByteString getDescriptionBytes();

      boolean hasSubmissionTime();

      long getSubmissionTime();

      boolean hasCompletionTime();

      long getCompletionTime();

      List getStageIdsList();

      int getStageIdsCount();

      long getStageIds(int var1);

      boolean hasJobGroup();

      String getJobGroup();

      ByteString getJobGroupBytes();

      List getJobTagsList();

      int getJobTagsCount();

      String getJobTags(int var1);

      ByteString getJobTagsBytes(int var1);

      int getStatusValue();

      JobExecutionStatus getStatus();

      int getNumTasks();

      int getNumActiveTasks();

      int getNumCompletedTasks();

      int getNumSkippedTasks();

      int getNumFailedTasks();

      int getNumKilledTasks();

      int getNumCompletedIndices();

      int getNumActiveStages();

      int getNumCompletedStages();

      int getNumSkippedStages();

      int getNumFailedStages();

      int getKillTasksSummaryCount();

      boolean containsKillTasksSummary(String var1);

      /** @deprecated */
      @Deprecated
      Map getKillTasksSummary();

      Map getKillTasksSummaryMap();

      int getKillTasksSummaryOrDefault(String var1, int var2);

      int getKillTasksSummaryOrThrow(String var1);
   }

   public interface JobDataWrapperOrBuilder extends MessageOrBuilder {
      boolean hasInfo();

      JobData getInfo();

      JobDataOrBuilder getInfoOrBuilder();

      List getSkippedStagesList();

      int getSkippedStagesCount();

      int getSkippedStages(int var1);

      boolean hasSqlExecutionId();

      long getSqlExecutionId();
   }

   public interface MemoryMetricsOrBuilder extends MessageOrBuilder {
      long getUsedOnHeapStorageMemory();

      long getUsedOffHeapStorageMemory();

      long getTotalOnHeapStorageMemory();

      long getTotalOffHeapStorageMemory();
   }

   public static final class OutputMetricDistributions extends GeneratedMessage implements OutputMetricDistributionsOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int BYTES_WRITTEN_FIELD_NUMBER = 1;
      private Internal.DoubleList bytesWritten_ = emptyDoubleList();
      private int bytesWrittenMemoizedSerializedSize = -1;
      public static final int RECORDS_WRITTEN_FIELD_NUMBER = 2;
      private Internal.DoubleList recordsWritten_ = emptyDoubleList();
      private int recordsWrittenMemoizedSerializedSize = -1;
      private byte memoizedIsInitialized = -1;
      private static final OutputMetricDistributions DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private OutputMetricDistributions(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private OutputMetricDistributions() {
         this.bytesWritten_ = emptyDoubleList();
         this.recordsWritten_ = emptyDoubleList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_OutputMetricDistributions_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_OutputMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(OutputMetricDistributions.class, Builder.class);
      }

      public List getBytesWrittenList() {
         return this.bytesWritten_;
      }

      public int getBytesWrittenCount() {
         return this.bytesWritten_.size();
      }

      public double getBytesWritten(int index) {
         return this.bytesWritten_.getDouble(index);
      }

      public List getRecordsWrittenList() {
         return this.recordsWritten_;
      }

      public int getRecordsWrittenCount() {
         return this.recordsWritten_.size();
      }

      public double getRecordsWritten(int index) {
         return this.recordsWritten_.getDouble(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if (this.getBytesWrittenList().size() > 0) {
            output.writeUInt32NoTag(10);
            output.writeUInt32NoTag(this.bytesWrittenMemoizedSerializedSize);
         }

         for(int i = 0; i < this.bytesWritten_.size(); ++i) {
            output.writeDoubleNoTag(this.bytesWritten_.getDouble(i));
         }

         if (this.getRecordsWrittenList().size() > 0) {
            output.writeUInt32NoTag(18);
            output.writeUInt32NoTag(this.recordsWrittenMemoizedSerializedSize);
         }

         for(int i = 0; i < this.recordsWritten_.size(); ++i) {
            output.writeDoubleNoTag(this.recordsWritten_.getDouble(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            int dataSize = 0;
            dataSize = 8 * this.getBytesWrittenList().size();
            size += dataSize;
            if (!this.getBytesWrittenList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.bytesWrittenMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getRecordsWrittenList().size();
            size += dataSize;
            if (!this.getRecordsWrittenList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.recordsWrittenMemoizedSerializedSize = dataSize;
            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof OutputMetricDistributions)) {
            return super.equals(obj);
         } else {
            OutputMetricDistributions other = (OutputMetricDistributions)obj;
            if (!this.getBytesWrittenList().equals(other.getBytesWrittenList())) {
               return false;
            } else if (!this.getRecordsWrittenList().equals(other.getRecordsWrittenList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.getBytesWrittenCount() > 0) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getBytesWrittenList().hashCode();
            }

            if (this.getRecordsWrittenCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getRecordsWrittenList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static OutputMetricDistributions parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (OutputMetricDistributions)PARSER.parseFrom(data);
      }

      public static OutputMetricDistributions parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (OutputMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static OutputMetricDistributions parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (OutputMetricDistributions)PARSER.parseFrom(data);
      }

      public static OutputMetricDistributions parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (OutputMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static OutputMetricDistributions parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (OutputMetricDistributions)PARSER.parseFrom(data);
      }

      public static OutputMetricDistributions parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (OutputMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static OutputMetricDistributions parseFrom(InputStream input) throws IOException {
         return (OutputMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static OutputMetricDistributions parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (OutputMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static OutputMetricDistributions parseDelimitedFrom(InputStream input) throws IOException {
         return (OutputMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static OutputMetricDistributions parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (OutputMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static OutputMetricDistributions parseFrom(CodedInputStream input) throws IOException {
         return (OutputMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static OutputMetricDistributions parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (OutputMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(OutputMetricDistributions prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static OutputMetricDistributions getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public OutputMetricDistributions getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", OutputMetricDistributions.class.getName());
         DEFAULT_INSTANCE = new OutputMetricDistributions();
         PARSER = new AbstractParser() {
            public OutputMetricDistributions parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.OutputMetricDistributions.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements OutputMetricDistributionsOrBuilder {
         private int bitField0_;
         private Internal.DoubleList bytesWritten_ = StoreTypes.OutputMetricDistributions.emptyDoubleList();
         private Internal.DoubleList recordsWritten_ = StoreTypes.OutputMetricDistributions.emptyDoubleList();

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_OutputMetricDistributions_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_OutputMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(OutputMetricDistributions.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.bytesWritten_ = StoreTypes.OutputMetricDistributions.emptyDoubleList();
            this.recordsWritten_ = StoreTypes.OutputMetricDistributions.emptyDoubleList();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_OutputMetricDistributions_descriptor;
         }

         public OutputMetricDistributions getDefaultInstanceForType() {
            return StoreTypes.OutputMetricDistributions.getDefaultInstance();
         }

         public OutputMetricDistributions build() {
            OutputMetricDistributions result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public OutputMetricDistributions buildPartial() {
            OutputMetricDistributions result = new OutputMetricDistributions(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(OutputMetricDistributions result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               this.bytesWritten_.makeImmutable();
               result.bytesWritten_ = this.bytesWritten_;
            }

            if ((from_bitField0_ & 2) != 0) {
               this.recordsWritten_.makeImmutable();
               result.recordsWritten_ = this.recordsWritten_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof OutputMetricDistributions) {
               return this.mergeFrom((OutputMetricDistributions)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(OutputMetricDistributions other) {
            if (other == StoreTypes.OutputMetricDistributions.getDefaultInstance()) {
               return this;
            } else {
               if (!other.bytesWritten_.isEmpty()) {
                  if (this.bytesWritten_.isEmpty()) {
                     this.bytesWritten_ = other.bytesWritten_;
                     this.bytesWritten_.makeImmutable();
                     this.bitField0_ |= 1;
                  } else {
                     this.ensureBytesWrittenIsMutable();
                     this.bytesWritten_.addAll(other.bytesWritten_);
                  }

                  this.onChanged();
               }

               if (!other.recordsWritten_.isEmpty()) {
                  if (this.recordsWritten_.isEmpty()) {
                     this.recordsWritten_ = other.recordsWritten_;
                     this.recordsWritten_.makeImmutable();
                     this.bitField0_ |= 2;
                  } else {
                     this.ensureRecordsWrittenIsMutable();
                     this.recordsWritten_.addAll(other.recordsWritten_);
                  }

                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 9:
                           double v = input.readDouble();
                           this.ensureBytesWrittenIsMutable();
                           this.bytesWritten_.addDouble(v);
                           break;
                        case 10:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureBytesWrittenIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.bytesWritten_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 17:
                           double v = input.readDouble();
                           this.ensureRecordsWrittenIsMutable();
                           this.recordsWritten_.addDouble(v);
                           break;
                        case 18:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureRecordsWrittenIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.recordsWritten_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         private void ensureBytesWrittenIsMutable() {
            if (!this.bytesWritten_.isModifiable()) {
               this.bytesWritten_ = (Internal.DoubleList)StoreTypes.OutputMetricDistributions.makeMutableCopy(this.bytesWritten_);
            }

            this.bitField0_ |= 1;
         }

         private void ensureBytesWrittenIsMutable(int capacity) {
            if (!this.bytesWritten_.isModifiable()) {
               this.bytesWritten_ = (Internal.DoubleList)StoreTypes.OutputMetricDistributions.makeMutableCopy(this.bytesWritten_, capacity);
            }

            this.bitField0_ |= 1;
         }

         public List getBytesWrittenList() {
            this.bytesWritten_.makeImmutable();
            return this.bytesWritten_;
         }

         public int getBytesWrittenCount() {
            return this.bytesWritten_.size();
         }

         public double getBytesWritten(int index) {
            return this.bytesWritten_.getDouble(index);
         }

         public Builder setBytesWritten(int index, double value) {
            this.ensureBytesWrittenIsMutable();
            this.bytesWritten_.setDouble(index, value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addBytesWritten(double value) {
            this.ensureBytesWrittenIsMutable();
            this.bytesWritten_.addDouble(value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addAllBytesWritten(Iterable values) {
            this.ensureBytesWrittenIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.bytesWritten_);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearBytesWritten() {
            this.bytesWritten_ = StoreTypes.OutputMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         private void ensureRecordsWrittenIsMutable() {
            if (!this.recordsWritten_.isModifiable()) {
               this.recordsWritten_ = (Internal.DoubleList)StoreTypes.OutputMetricDistributions.makeMutableCopy(this.recordsWritten_);
            }

            this.bitField0_ |= 2;
         }

         private void ensureRecordsWrittenIsMutable(int capacity) {
            if (!this.recordsWritten_.isModifiable()) {
               this.recordsWritten_ = (Internal.DoubleList)StoreTypes.OutputMetricDistributions.makeMutableCopy(this.recordsWritten_, capacity);
            }

            this.bitField0_ |= 2;
         }

         public List getRecordsWrittenList() {
            this.recordsWritten_.makeImmutable();
            return this.recordsWritten_;
         }

         public int getRecordsWrittenCount() {
            return this.recordsWritten_.size();
         }

         public double getRecordsWritten(int index) {
            return this.recordsWritten_.getDouble(index);
         }

         public Builder setRecordsWritten(int index, double value) {
            this.ensureRecordsWrittenIsMutable();
            this.recordsWritten_.setDouble(index, value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addRecordsWritten(double value) {
            this.ensureRecordsWrittenIsMutable();
            this.recordsWritten_.addDouble(value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addAllRecordsWritten(Iterable values) {
            this.ensureRecordsWrittenIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.recordsWritten_);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearRecordsWritten() {
            this.recordsWritten_ = StoreTypes.OutputMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }
      }
   }

   public interface OutputMetricDistributionsOrBuilder extends MessageOrBuilder {
      List getBytesWrittenList();

      int getBytesWrittenCount();

      double getBytesWritten(int var1);

      List getRecordsWrittenList();

      int getRecordsWrittenCount();

      double getRecordsWritten(int var1);
   }

   public static final class OutputMetrics extends GeneratedMessage implements OutputMetricsOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int BYTES_WRITTEN_FIELD_NUMBER = 1;
      private long bytesWritten_ = 0L;
      public static final int RECORDS_WRITTEN_FIELD_NUMBER = 2;
      private long recordsWritten_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final OutputMetrics DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private OutputMetrics(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private OutputMetrics() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_OutputMetrics_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_OutputMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(OutputMetrics.class, Builder.class);
      }

      public long getBytesWritten() {
         return this.bytesWritten_;
      }

      public long getRecordsWritten() {
         return this.recordsWritten_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.bytesWritten_ != 0L) {
            output.writeInt64(1, this.bytesWritten_);
         }

         if (this.recordsWritten_ != 0L) {
            output.writeInt64(2, this.recordsWritten_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.bytesWritten_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.bytesWritten_);
            }

            if (this.recordsWritten_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.recordsWritten_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof OutputMetrics)) {
            return super.equals(obj);
         } else {
            OutputMetrics other = (OutputMetrics)obj;
            if (this.getBytesWritten() != other.getBytesWritten()) {
               return false;
            } else if (this.getRecordsWritten() != other.getRecordsWritten()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getBytesWritten());
            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getRecordsWritten());
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static OutputMetrics parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (OutputMetrics)PARSER.parseFrom(data);
      }

      public static OutputMetrics parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (OutputMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static OutputMetrics parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (OutputMetrics)PARSER.parseFrom(data);
      }

      public static OutputMetrics parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (OutputMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static OutputMetrics parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (OutputMetrics)PARSER.parseFrom(data);
      }

      public static OutputMetrics parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (OutputMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static OutputMetrics parseFrom(InputStream input) throws IOException {
         return (OutputMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static OutputMetrics parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (OutputMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static OutputMetrics parseDelimitedFrom(InputStream input) throws IOException {
         return (OutputMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static OutputMetrics parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (OutputMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static OutputMetrics parseFrom(CodedInputStream input) throws IOException {
         return (OutputMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static OutputMetrics parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (OutputMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(OutputMetrics prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static OutputMetrics getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public OutputMetrics getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", OutputMetrics.class.getName());
         DEFAULT_INSTANCE = new OutputMetrics();
         PARSER = new AbstractParser() {
            public OutputMetrics parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.OutputMetrics.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements OutputMetricsOrBuilder {
         private int bitField0_;
         private long bytesWritten_;
         private long recordsWritten_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_OutputMetrics_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_OutputMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(OutputMetrics.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.bytesWritten_ = 0L;
            this.recordsWritten_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_OutputMetrics_descriptor;
         }

         public OutputMetrics getDefaultInstanceForType() {
            return StoreTypes.OutputMetrics.getDefaultInstance();
         }

         public OutputMetrics build() {
            OutputMetrics result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public OutputMetrics buildPartial() {
            OutputMetrics result = new OutputMetrics(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(OutputMetrics result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.bytesWritten_ = this.bytesWritten_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.recordsWritten_ = this.recordsWritten_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof OutputMetrics) {
               return this.mergeFrom((OutputMetrics)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(OutputMetrics other) {
            if (other == StoreTypes.OutputMetrics.getDefaultInstance()) {
               return this;
            } else {
               if (other.getBytesWritten() != 0L) {
                  this.setBytesWritten(other.getBytesWritten());
               }

               if (other.getRecordsWritten() != 0L) {
                  this.setRecordsWritten(other.getRecordsWritten());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.bytesWritten_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.recordsWritten_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getBytesWritten() {
            return this.bytesWritten_;
         }

         public Builder setBytesWritten(long value) {
            this.bytesWritten_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearBytesWritten() {
            this.bitField0_ &= -2;
            this.bytesWritten_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRecordsWritten() {
            return this.recordsWritten_;
         }

         public Builder setRecordsWritten(long value) {
            this.recordsWritten_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearRecordsWritten() {
            this.bitField0_ &= -3;
            this.recordsWritten_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public interface OutputMetricsOrBuilder extends MessageOrBuilder {
      long getBytesWritten();

      long getRecordsWritten();
   }

   public interface PairStringsOrBuilder extends MessageOrBuilder {
      boolean hasValue1();

      String getValue1();

      ByteString getValue1Bytes();

      boolean hasValue2();

      String getValue2();

      ByteString getValue2Bytes();
   }

   public static final class PoolData extends GeneratedMessage implements PoolDataOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      private volatile Object name_ = "";
      public static final int STAGE_IDS_FIELD_NUMBER = 2;
      private Internal.LongList stageIds_ = emptyLongList();
      private int stageIdsMemoizedSerializedSize = -1;
      private byte memoizedIsInitialized = -1;
      private static final PoolData DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private PoolData(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private PoolData() {
         this.name_ = "";
         this.stageIds_ = emptyLongList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_PoolData_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_PoolData_fieldAccessorTable.ensureFieldAccessorsInitialized(PoolData.class, Builder.class);
      }

      public boolean hasName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public List getStageIdsList() {
         return this.stageIds_;
      }

      public int getStageIdsCount() {
         return this.stageIds_.size();
      }

      public long getStageIds(int index) {
         return this.stageIds_.getLong(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.name_);
         }

         if (this.getStageIdsList().size() > 0) {
            output.writeUInt32NoTag(18);
            output.writeUInt32NoTag(this.stageIdsMemoizedSerializedSize);
         }

         for(int i = 0; i < this.stageIds_.size(); ++i) {
            output.writeInt64NoTag(this.stageIds_.getLong(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.name_);
            }

            int dataSize = 0;

            for(int i = 0; i < this.stageIds_.size(); ++i) {
               dataSize += CodedOutputStream.computeInt64SizeNoTag(this.stageIds_.getLong(i));
            }

            size += dataSize;
            if (!this.getStageIdsList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.stageIdsMemoizedSerializedSize = dataSize;
            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof PoolData)) {
            return super.equals(obj);
         } else {
            PoolData other = (PoolData)obj;
            if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (!this.getStageIdsList().equals(other.getStageIdsList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasName()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.getStageIdsCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getStageIdsList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static PoolData parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (PoolData)PARSER.parseFrom(data);
      }

      public static PoolData parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (PoolData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static PoolData parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (PoolData)PARSER.parseFrom(data);
      }

      public static PoolData parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (PoolData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static PoolData parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (PoolData)PARSER.parseFrom(data);
      }

      public static PoolData parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (PoolData)PARSER.parseFrom(data, extensionRegistry);
      }

      public static PoolData parseFrom(InputStream input) throws IOException {
         return (PoolData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static PoolData parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (PoolData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static PoolData parseDelimitedFrom(InputStream input) throws IOException {
         return (PoolData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static PoolData parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (PoolData)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static PoolData parseFrom(CodedInputStream input) throws IOException {
         return (PoolData)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static PoolData parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (PoolData)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(PoolData prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static PoolData getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public PoolData getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", PoolData.class.getName());
         DEFAULT_INSTANCE = new PoolData();
         PARSER = new AbstractParser() {
            public PoolData parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.PoolData.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements PoolDataOrBuilder {
         private int bitField0_;
         private Object name_ = "";
         private Internal.LongList stageIds_ = StoreTypes.PoolData.emptyLongList();

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_PoolData_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_PoolData_fieldAccessorTable.ensureFieldAccessorsInitialized(PoolData.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.name_ = "";
            this.stageIds_ = StoreTypes.PoolData.emptyLongList();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_PoolData_descriptor;
         }

         public PoolData getDefaultInstanceForType() {
            return StoreTypes.PoolData.getDefaultInstance();
         }

         public PoolData build() {
            PoolData result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public PoolData buildPartial() {
            PoolData result = new PoolData(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(PoolData result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               this.stageIds_.makeImmutable();
               result.stageIds_ = this.stageIds_;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof PoolData) {
               return this.mergeFrom((PoolData)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(PoolData other) {
            if (other == StoreTypes.PoolData.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (!other.stageIds_.isEmpty()) {
                  if (this.stageIds_.isEmpty()) {
                     this.stageIds_ = other.stageIds_;
                     this.stageIds_.makeImmutable();
                     this.bitField0_ |= 2;
                  } else {
                     this.ensureStageIdsIsMutable();
                     this.stageIds_.addAll(other.stageIds_);
                  }

                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           long v = input.readInt64();
                           this.ensureStageIdsIsMutable();
                           this.stageIds_.addLong(v);
                           break;
                        case 18:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           this.ensureStageIdsIsMutable();

                           while(input.getBytesUntilLimit() > 0) {
                              this.stageIds_.addLong(input.readInt64());
                           }

                           input.popLimit(limit);
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasName() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.PoolData.getDefaultInstance().getName();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.PoolData.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         private void ensureStageIdsIsMutable() {
            if (!this.stageIds_.isModifiable()) {
               this.stageIds_ = (Internal.LongList)StoreTypes.PoolData.makeMutableCopy(this.stageIds_);
            }

            this.bitField0_ |= 2;
         }

         public List getStageIdsList() {
            this.stageIds_.makeImmutable();
            return this.stageIds_;
         }

         public int getStageIdsCount() {
            return this.stageIds_.size();
         }

         public long getStageIds(int index) {
            return this.stageIds_.getLong(index);
         }

         public Builder setStageIds(int index, long value) {
            this.ensureStageIdsIsMutable();
            this.stageIds_.setLong(index, value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addStageIds(long value) {
            this.ensureStageIdsIsMutable();
            this.stageIds_.addLong(value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addAllStageIds(Iterable values) {
            this.ensureStageIdsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.stageIds_);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearStageIds() {
            this.stageIds_ = StoreTypes.PoolData.emptyLongList();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }
      }
   }

   public interface PoolDataOrBuilder extends MessageOrBuilder {
      boolean hasName();

      String getName();

      ByteString getNameBytes();

      List getStageIdsList();

      int getStageIdsCount();

      long getStageIds(int var1);
   }

   public interface ProcessSummaryOrBuilder extends MessageOrBuilder {
      boolean hasId();

      String getId();

      ByteString getIdBytes();

      boolean hasHostPort();

      String getHostPort();

      ByteString getHostPortBytes();

      boolean getIsActive();

      int getTotalCores();

      long getAddTime();

      boolean hasRemoveTime();

      long getRemoveTime();

      int getProcessLogsCount();

      boolean containsProcessLogs(String var1);

      /** @deprecated */
      @Deprecated
      Map getProcessLogs();

      Map getProcessLogsMap();

      String getProcessLogsOrDefault(String var1, String var2);

      String getProcessLogsOrThrow(String var1);
   }

   public interface ProcessSummaryWrapperOrBuilder extends MessageOrBuilder {
      boolean hasInfo();

      ProcessSummary getInfo();

      ProcessSummaryOrBuilder getInfoOrBuilder();
   }

   public interface RDDDataDistributionOrBuilder extends MessageOrBuilder {
      boolean hasAddress();

      String getAddress();

      ByteString getAddressBytes();

      long getMemoryUsed();

      long getMemoryRemaining();

      long getDiskUsed();

      boolean hasOnHeapMemoryUsed();

      long getOnHeapMemoryUsed();

      boolean hasOffHeapMemoryUsed();

      long getOffHeapMemoryUsed();

      boolean hasOnHeapMemoryRemaining();

      long getOnHeapMemoryRemaining();

      boolean hasOffHeapMemoryRemaining();

      long getOffHeapMemoryRemaining();
   }

   public interface RDDOperationClusterWrapperOrBuilder extends MessageOrBuilder {
      boolean hasId();

      String getId();

      ByteString getIdBytes();

      boolean hasName();

      String getName();

      ByteString getNameBytes();

      List getChildNodesList();

      RDDOperationNode getChildNodes(int var1);

      int getChildNodesCount();

      List getChildNodesOrBuilderList();

      RDDOperationNodeOrBuilder getChildNodesOrBuilder(int var1);

      List getChildClustersList();

      RDDOperationClusterWrapper getChildClusters(int var1);

      int getChildClustersCount();

      List getChildClustersOrBuilderList();

      RDDOperationClusterWrapperOrBuilder getChildClustersOrBuilder(int var1);
   }

   public interface RDDOperationEdgeOrBuilder extends MessageOrBuilder {
      int getFromId();

      int getToId();
   }

   public interface RDDOperationGraphWrapperOrBuilder extends MessageOrBuilder {
      long getStageId();

      List getEdgesList();

      RDDOperationEdge getEdges(int var1);

      int getEdgesCount();

      List getEdgesOrBuilderList();

      RDDOperationEdgeOrBuilder getEdgesOrBuilder(int var1);

      List getOutgoingEdgesList();

      RDDOperationEdge getOutgoingEdges(int var1);

      int getOutgoingEdgesCount();

      List getOutgoingEdgesOrBuilderList();

      RDDOperationEdgeOrBuilder getOutgoingEdgesOrBuilder(int var1);

      List getIncomingEdgesList();

      RDDOperationEdge getIncomingEdges(int var1);

      int getIncomingEdgesCount();

      List getIncomingEdgesOrBuilderList();

      RDDOperationEdgeOrBuilder getIncomingEdgesOrBuilder(int var1);

      boolean hasRootCluster();

      RDDOperationClusterWrapper getRootCluster();

      RDDOperationClusterWrapperOrBuilder getRootClusterOrBuilder();
   }

   public interface RDDOperationNodeOrBuilder extends MessageOrBuilder {
      int getId();

      boolean hasName();

      String getName();

      ByteString getNameBytes();

      boolean getCached();

      boolean getBarrier();

      boolean hasCallsite();

      String getCallsite();

      ByteString getCallsiteBytes();

      int getOutputDeterministicLevelValue();

      DeterministicLevel getOutputDeterministicLevel();
   }

   public interface RDDPartitionInfoOrBuilder extends MessageOrBuilder {
      boolean hasBlockName();

      String getBlockName();

      ByteString getBlockNameBytes();

      boolean hasStorageLevel();

      String getStorageLevel();

      ByteString getStorageLevelBytes();

      long getMemoryUsed();

      long getDiskUsed();

      List getExecutorsList();

      int getExecutorsCount();

      String getExecutors(int var1);

      ByteString getExecutorsBytes(int var1);
   }

   public interface RDDStorageInfoOrBuilder extends MessageOrBuilder {
      int getId();

      boolean hasName();

      String getName();

      ByteString getNameBytes();

      int getNumPartitions();

      int getNumCachedPartitions();

      boolean hasStorageLevel();

      String getStorageLevel();

      ByteString getStorageLevelBytes();

      long getMemoryUsed();

      long getDiskUsed();

      List getDataDistributionList();

      RDDDataDistribution getDataDistribution(int var1);

      int getDataDistributionCount();

      List getDataDistributionOrBuilderList();

      RDDDataDistributionOrBuilder getDataDistributionOrBuilder(int var1);

      List getPartitionsList();

      RDDPartitionInfo getPartitions(int var1);

      int getPartitionsCount();

      List getPartitionsOrBuilderList();

      RDDPartitionInfoOrBuilder getPartitionsOrBuilder(int var1);
   }

   public interface RDDStorageInfoWrapperOrBuilder extends MessageOrBuilder {
      boolean hasInfo();

      RDDStorageInfo getInfo();

      RDDStorageInfoOrBuilder getInfoOrBuilder();
   }

   public interface ResourceInformationOrBuilder extends MessageOrBuilder {
      boolean hasName();

      String getName();

      ByteString getNameBytes();

      List getAddressesList();

      int getAddressesCount();

      String getAddresses(int var1);

      ByteString getAddressesBytes(int var1);
   }

   public interface ResourceProfileInfoOrBuilder extends MessageOrBuilder {
      int getId();

      int getExecutorResourcesCount();

      boolean containsExecutorResources(String var1);

      /** @deprecated */
      @Deprecated
      Map getExecutorResources();

      Map getExecutorResourcesMap();

      ExecutorResourceRequest getExecutorResourcesOrDefault(String var1, ExecutorResourceRequest var2);

      ExecutorResourceRequest getExecutorResourcesOrThrow(String var1);

      int getTaskResourcesCount();

      boolean containsTaskResources(String var1);

      /** @deprecated */
      @Deprecated
      Map getTaskResources();

      Map getTaskResourcesMap();

      TaskResourceRequest getTaskResourcesOrDefault(String var1, TaskResourceRequest var2);

      TaskResourceRequest getTaskResourcesOrThrow(String var1);
   }

   public interface ResourceProfileWrapperOrBuilder extends MessageOrBuilder {
      boolean hasRpInfo();

      ResourceProfileInfo getRpInfo();

      ResourceProfileInfoOrBuilder getRpInfoOrBuilder();
   }

   public interface RuntimeInfoOrBuilder extends MessageOrBuilder {
      boolean hasJavaVersion();

      String getJavaVersion();

      ByteString getJavaVersionBytes();

      boolean hasJavaHome();

      String getJavaHome();

      ByteString getJavaHomeBytes();

      boolean hasScalaVersion();

      String getScalaVersion();

      ByteString getScalaVersionBytes();
   }

   public interface SQLExecutionUIDataOrBuilder extends MessageOrBuilder {
      long getExecutionId();

      long getRootExecutionId();

      boolean hasDescription();

      String getDescription();

      ByteString getDescriptionBytes();

      boolean hasDetails();

      String getDetails();

      ByteString getDetailsBytes();

      boolean hasPhysicalPlanDescription();

      String getPhysicalPlanDescription();

      ByteString getPhysicalPlanDescriptionBytes();

      int getModifiedConfigsCount();

      boolean containsModifiedConfigs(String var1);

      /** @deprecated */
      @Deprecated
      Map getModifiedConfigs();

      Map getModifiedConfigsMap();

      String getModifiedConfigsOrDefault(String var1, String var2);

      String getModifiedConfigsOrThrow(String var1);

      List getMetricsList();

      SQLPlanMetric getMetrics(int var1);

      int getMetricsCount();

      List getMetricsOrBuilderList();

      SQLPlanMetricOrBuilder getMetricsOrBuilder(int var1);

      long getSubmissionTime();

      boolean hasCompletionTime();

      long getCompletionTime();

      boolean hasErrorMessage();

      String getErrorMessage();

      ByteString getErrorMessageBytes();

      int getJobsCount();

      boolean containsJobs(long var1);

      /** @deprecated */
      @Deprecated
      Map getJobs();

      Map getJobsMap();

      JobExecutionStatus getJobsOrDefault(long var1, JobExecutionStatus var3);

      JobExecutionStatus getJobsOrThrow(long var1);

      /** @deprecated */
      @Deprecated
      Map getJobsValue();

      Map getJobsValueMap();

      int getJobsValueOrDefault(long var1, int var3);

      int getJobsValueOrThrow(long var1);

      List getStagesList();

      int getStagesCount();

      long getStages(int var1);

      boolean getMetricValuesIsNull();

      int getMetricValuesCount();

      boolean containsMetricValues(long var1);

      /** @deprecated */
      @Deprecated
      Map getMetricValues();

      Map getMetricValuesMap();

      String getMetricValuesOrDefault(long var1, String var3);

      String getMetricValuesOrThrow(long var1);
   }

   public interface SQLPlanMetricOrBuilder extends MessageOrBuilder {
      boolean hasName();

      String getName();

      ByteString getNameBytes();

      long getAccumulatorId();

      boolean hasMetricType();

      String getMetricType();

      ByteString getMetricTypeBytes();
   }

   public static final class ShufflePushReadMetricDistributions extends GeneratedMessage implements ShufflePushReadMetricDistributionsOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int CORRUPT_MERGED_BLOCK_CHUNKS_FIELD_NUMBER = 1;
      private Internal.DoubleList corruptMergedBlockChunks_ = emptyDoubleList();
      private int corruptMergedBlockChunksMemoizedSerializedSize = -1;
      public static final int MERGED_FETCH_FALLBACK_COUNT_FIELD_NUMBER = 2;
      private Internal.DoubleList mergedFetchFallbackCount_ = emptyDoubleList();
      private int mergedFetchFallbackCountMemoizedSerializedSize = -1;
      public static final int REMOTE_MERGED_BLOCKS_FETCHED_FIELD_NUMBER = 3;
      private Internal.DoubleList remoteMergedBlocksFetched_ = emptyDoubleList();
      private int remoteMergedBlocksFetchedMemoizedSerializedSize = -1;
      public static final int LOCAL_MERGED_BLOCKS_FETCHED_FIELD_NUMBER = 4;
      private Internal.DoubleList localMergedBlocksFetched_ = emptyDoubleList();
      private int localMergedBlocksFetchedMemoizedSerializedSize = -1;
      public static final int REMOTE_MERGED_CHUNKS_FETCHED_FIELD_NUMBER = 5;
      private Internal.DoubleList remoteMergedChunksFetched_ = emptyDoubleList();
      private int remoteMergedChunksFetchedMemoizedSerializedSize = -1;
      public static final int LOCAL_MERGED_CHUNKS_FETCHED_FIELD_NUMBER = 6;
      private Internal.DoubleList localMergedChunksFetched_ = emptyDoubleList();
      private int localMergedChunksFetchedMemoizedSerializedSize = -1;
      public static final int REMOTE_MERGED_BYTES_READ_FIELD_NUMBER = 7;
      private Internal.DoubleList remoteMergedBytesRead_ = emptyDoubleList();
      private int remoteMergedBytesReadMemoizedSerializedSize = -1;
      public static final int LOCAL_MERGED_BYTES_READ_FIELD_NUMBER = 8;
      private Internal.DoubleList localMergedBytesRead_ = emptyDoubleList();
      private int localMergedBytesReadMemoizedSerializedSize = -1;
      public static final int REMOTE_MERGED_REQS_DURATION_FIELD_NUMBER = 9;
      private Internal.DoubleList remoteMergedReqsDuration_ = emptyDoubleList();
      private int remoteMergedReqsDurationMemoizedSerializedSize = -1;
      private byte memoizedIsInitialized = -1;
      private static final ShufflePushReadMetricDistributions DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ShufflePushReadMetricDistributions(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ShufflePushReadMetricDistributions() {
         this.corruptMergedBlockChunks_ = emptyDoubleList();
         this.mergedFetchFallbackCount_ = emptyDoubleList();
         this.remoteMergedBlocksFetched_ = emptyDoubleList();
         this.localMergedBlocksFetched_ = emptyDoubleList();
         this.remoteMergedChunksFetched_ = emptyDoubleList();
         this.localMergedChunksFetched_ = emptyDoubleList();
         this.remoteMergedBytesRead_ = emptyDoubleList();
         this.localMergedBytesRead_ = emptyDoubleList();
         this.remoteMergedReqsDuration_ = emptyDoubleList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetricDistributions_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(ShufflePushReadMetricDistributions.class, Builder.class);
      }

      public List getCorruptMergedBlockChunksList() {
         return this.corruptMergedBlockChunks_;
      }

      public int getCorruptMergedBlockChunksCount() {
         return this.corruptMergedBlockChunks_.size();
      }

      public double getCorruptMergedBlockChunks(int index) {
         return this.corruptMergedBlockChunks_.getDouble(index);
      }

      public List getMergedFetchFallbackCountList() {
         return this.mergedFetchFallbackCount_;
      }

      public int getMergedFetchFallbackCountCount() {
         return this.mergedFetchFallbackCount_.size();
      }

      public double getMergedFetchFallbackCount(int index) {
         return this.mergedFetchFallbackCount_.getDouble(index);
      }

      public List getRemoteMergedBlocksFetchedList() {
         return this.remoteMergedBlocksFetched_;
      }

      public int getRemoteMergedBlocksFetchedCount() {
         return this.remoteMergedBlocksFetched_.size();
      }

      public double getRemoteMergedBlocksFetched(int index) {
         return this.remoteMergedBlocksFetched_.getDouble(index);
      }

      public List getLocalMergedBlocksFetchedList() {
         return this.localMergedBlocksFetched_;
      }

      public int getLocalMergedBlocksFetchedCount() {
         return this.localMergedBlocksFetched_.size();
      }

      public double getLocalMergedBlocksFetched(int index) {
         return this.localMergedBlocksFetched_.getDouble(index);
      }

      public List getRemoteMergedChunksFetchedList() {
         return this.remoteMergedChunksFetched_;
      }

      public int getRemoteMergedChunksFetchedCount() {
         return this.remoteMergedChunksFetched_.size();
      }

      public double getRemoteMergedChunksFetched(int index) {
         return this.remoteMergedChunksFetched_.getDouble(index);
      }

      public List getLocalMergedChunksFetchedList() {
         return this.localMergedChunksFetched_;
      }

      public int getLocalMergedChunksFetchedCount() {
         return this.localMergedChunksFetched_.size();
      }

      public double getLocalMergedChunksFetched(int index) {
         return this.localMergedChunksFetched_.getDouble(index);
      }

      public List getRemoteMergedBytesReadList() {
         return this.remoteMergedBytesRead_;
      }

      public int getRemoteMergedBytesReadCount() {
         return this.remoteMergedBytesRead_.size();
      }

      public double getRemoteMergedBytesRead(int index) {
         return this.remoteMergedBytesRead_.getDouble(index);
      }

      public List getLocalMergedBytesReadList() {
         return this.localMergedBytesRead_;
      }

      public int getLocalMergedBytesReadCount() {
         return this.localMergedBytesRead_.size();
      }

      public double getLocalMergedBytesRead(int index) {
         return this.localMergedBytesRead_.getDouble(index);
      }

      public List getRemoteMergedReqsDurationList() {
         return this.remoteMergedReqsDuration_;
      }

      public int getRemoteMergedReqsDurationCount() {
         return this.remoteMergedReqsDuration_.size();
      }

      public double getRemoteMergedReqsDuration(int index) {
         return this.remoteMergedReqsDuration_.getDouble(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if (this.getCorruptMergedBlockChunksList().size() > 0) {
            output.writeUInt32NoTag(10);
            output.writeUInt32NoTag(this.corruptMergedBlockChunksMemoizedSerializedSize);
         }

         for(int i = 0; i < this.corruptMergedBlockChunks_.size(); ++i) {
            output.writeDoubleNoTag(this.corruptMergedBlockChunks_.getDouble(i));
         }

         if (this.getMergedFetchFallbackCountList().size() > 0) {
            output.writeUInt32NoTag(18);
            output.writeUInt32NoTag(this.mergedFetchFallbackCountMemoizedSerializedSize);
         }

         for(int i = 0; i < this.mergedFetchFallbackCount_.size(); ++i) {
            output.writeDoubleNoTag(this.mergedFetchFallbackCount_.getDouble(i));
         }

         if (this.getRemoteMergedBlocksFetchedList().size() > 0) {
            output.writeUInt32NoTag(26);
            output.writeUInt32NoTag(this.remoteMergedBlocksFetchedMemoizedSerializedSize);
         }

         for(int i = 0; i < this.remoteMergedBlocksFetched_.size(); ++i) {
            output.writeDoubleNoTag(this.remoteMergedBlocksFetched_.getDouble(i));
         }

         if (this.getLocalMergedBlocksFetchedList().size() > 0) {
            output.writeUInt32NoTag(34);
            output.writeUInt32NoTag(this.localMergedBlocksFetchedMemoizedSerializedSize);
         }

         for(int i = 0; i < this.localMergedBlocksFetched_.size(); ++i) {
            output.writeDoubleNoTag(this.localMergedBlocksFetched_.getDouble(i));
         }

         if (this.getRemoteMergedChunksFetchedList().size() > 0) {
            output.writeUInt32NoTag(42);
            output.writeUInt32NoTag(this.remoteMergedChunksFetchedMemoizedSerializedSize);
         }

         for(int i = 0; i < this.remoteMergedChunksFetched_.size(); ++i) {
            output.writeDoubleNoTag(this.remoteMergedChunksFetched_.getDouble(i));
         }

         if (this.getLocalMergedChunksFetchedList().size() > 0) {
            output.writeUInt32NoTag(50);
            output.writeUInt32NoTag(this.localMergedChunksFetchedMemoizedSerializedSize);
         }

         for(int i = 0; i < this.localMergedChunksFetched_.size(); ++i) {
            output.writeDoubleNoTag(this.localMergedChunksFetched_.getDouble(i));
         }

         if (this.getRemoteMergedBytesReadList().size() > 0) {
            output.writeUInt32NoTag(58);
            output.writeUInt32NoTag(this.remoteMergedBytesReadMemoizedSerializedSize);
         }

         for(int i = 0; i < this.remoteMergedBytesRead_.size(); ++i) {
            output.writeDoubleNoTag(this.remoteMergedBytesRead_.getDouble(i));
         }

         if (this.getLocalMergedBytesReadList().size() > 0) {
            output.writeUInt32NoTag(66);
            output.writeUInt32NoTag(this.localMergedBytesReadMemoizedSerializedSize);
         }

         for(int i = 0; i < this.localMergedBytesRead_.size(); ++i) {
            output.writeDoubleNoTag(this.localMergedBytesRead_.getDouble(i));
         }

         if (this.getRemoteMergedReqsDurationList().size() > 0) {
            output.writeUInt32NoTag(74);
            output.writeUInt32NoTag(this.remoteMergedReqsDurationMemoizedSerializedSize);
         }

         for(int i = 0; i < this.remoteMergedReqsDuration_.size(); ++i) {
            output.writeDoubleNoTag(this.remoteMergedReqsDuration_.getDouble(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            int dataSize = 0;
            dataSize = 8 * this.getCorruptMergedBlockChunksList().size();
            size += dataSize;
            if (!this.getCorruptMergedBlockChunksList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.corruptMergedBlockChunksMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getMergedFetchFallbackCountList().size();
            size += dataSize;
            if (!this.getMergedFetchFallbackCountList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.mergedFetchFallbackCountMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getRemoteMergedBlocksFetchedList().size();
            size += dataSize;
            if (!this.getRemoteMergedBlocksFetchedList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.remoteMergedBlocksFetchedMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getLocalMergedBlocksFetchedList().size();
            size += dataSize;
            if (!this.getLocalMergedBlocksFetchedList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.localMergedBlocksFetchedMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getRemoteMergedChunksFetchedList().size();
            size += dataSize;
            if (!this.getRemoteMergedChunksFetchedList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.remoteMergedChunksFetchedMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getLocalMergedChunksFetchedList().size();
            size += dataSize;
            if (!this.getLocalMergedChunksFetchedList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.localMergedChunksFetchedMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getRemoteMergedBytesReadList().size();
            size += dataSize;
            if (!this.getRemoteMergedBytesReadList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.remoteMergedBytesReadMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getLocalMergedBytesReadList().size();
            size += dataSize;
            if (!this.getLocalMergedBytesReadList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.localMergedBytesReadMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getRemoteMergedReqsDurationList().size();
            size += dataSize;
            if (!this.getRemoteMergedReqsDurationList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.remoteMergedReqsDurationMemoizedSerializedSize = dataSize;
            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ShufflePushReadMetricDistributions)) {
            return super.equals(obj);
         } else {
            ShufflePushReadMetricDistributions other = (ShufflePushReadMetricDistributions)obj;
            if (!this.getCorruptMergedBlockChunksList().equals(other.getCorruptMergedBlockChunksList())) {
               return false;
            } else if (!this.getMergedFetchFallbackCountList().equals(other.getMergedFetchFallbackCountList())) {
               return false;
            } else if (!this.getRemoteMergedBlocksFetchedList().equals(other.getRemoteMergedBlocksFetchedList())) {
               return false;
            } else if (!this.getLocalMergedBlocksFetchedList().equals(other.getLocalMergedBlocksFetchedList())) {
               return false;
            } else if (!this.getRemoteMergedChunksFetchedList().equals(other.getRemoteMergedChunksFetchedList())) {
               return false;
            } else if (!this.getLocalMergedChunksFetchedList().equals(other.getLocalMergedChunksFetchedList())) {
               return false;
            } else if (!this.getRemoteMergedBytesReadList().equals(other.getRemoteMergedBytesReadList())) {
               return false;
            } else if (!this.getLocalMergedBytesReadList().equals(other.getLocalMergedBytesReadList())) {
               return false;
            } else if (!this.getRemoteMergedReqsDurationList().equals(other.getRemoteMergedReqsDurationList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.getCorruptMergedBlockChunksCount() > 0) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getCorruptMergedBlockChunksList().hashCode();
            }

            if (this.getMergedFetchFallbackCountCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getMergedFetchFallbackCountList().hashCode();
            }

            if (this.getRemoteMergedBlocksFetchedCount() > 0) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getRemoteMergedBlocksFetchedList().hashCode();
            }

            if (this.getLocalMergedBlocksFetchedCount() > 0) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getLocalMergedBlocksFetchedList().hashCode();
            }

            if (this.getRemoteMergedChunksFetchedCount() > 0) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getRemoteMergedChunksFetchedList().hashCode();
            }

            if (this.getLocalMergedChunksFetchedCount() > 0) {
               hash = 37 * hash + 6;
               hash = 53 * hash + this.getLocalMergedChunksFetchedList().hashCode();
            }

            if (this.getRemoteMergedBytesReadCount() > 0) {
               hash = 37 * hash + 7;
               hash = 53 * hash + this.getRemoteMergedBytesReadList().hashCode();
            }

            if (this.getLocalMergedBytesReadCount() > 0) {
               hash = 37 * hash + 8;
               hash = 53 * hash + this.getLocalMergedBytesReadList().hashCode();
            }

            if (this.getRemoteMergedReqsDurationCount() > 0) {
               hash = 37 * hash + 9;
               hash = 53 * hash + this.getRemoteMergedReqsDurationList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ShufflePushReadMetricDistributions parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetricDistributions)PARSER.parseFrom(data);
      }

      public static ShufflePushReadMetricDistributions parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShufflePushReadMetricDistributions parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetricDistributions)PARSER.parseFrom(data);
      }

      public static ShufflePushReadMetricDistributions parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShufflePushReadMetricDistributions parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetricDistributions)PARSER.parseFrom(data);
      }

      public static ShufflePushReadMetricDistributions parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShufflePushReadMetricDistributions parseFrom(InputStream input) throws IOException {
         return (ShufflePushReadMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShufflePushReadMetricDistributions parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShufflePushReadMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShufflePushReadMetricDistributions parseDelimitedFrom(InputStream input) throws IOException {
         return (ShufflePushReadMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ShufflePushReadMetricDistributions parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShufflePushReadMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShufflePushReadMetricDistributions parseFrom(CodedInputStream input) throws IOException {
         return (ShufflePushReadMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShufflePushReadMetricDistributions parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShufflePushReadMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ShufflePushReadMetricDistributions prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ShufflePushReadMetricDistributions getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ShufflePushReadMetricDistributions getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ShufflePushReadMetricDistributions.class.getName());
         DEFAULT_INSTANCE = new ShufflePushReadMetricDistributions();
         PARSER = new AbstractParser() {
            public ShufflePushReadMetricDistributions parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ShufflePushReadMetricDistributions.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ShufflePushReadMetricDistributionsOrBuilder {
         private int bitField0_;
         private Internal.DoubleList corruptMergedBlockChunks_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList mergedFetchFallbackCount_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList remoteMergedBlocksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList localMergedBlocksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList remoteMergedChunksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList localMergedChunksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList remoteMergedBytesRead_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList localMergedBytesRead_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList remoteMergedReqsDuration_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetricDistributions_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(ShufflePushReadMetricDistributions.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.corruptMergedBlockChunks_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.mergedFetchFallbackCount_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.remoteMergedBlocksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.localMergedBlocksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.remoteMergedChunksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.localMergedChunksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.remoteMergedBytesRead_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.localMergedBytesRead_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.remoteMergedReqsDuration_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetricDistributions_descriptor;
         }

         public ShufflePushReadMetricDistributions getDefaultInstanceForType() {
            return StoreTypes.ShufflePushReadMetricDistributions.getDefaultInstance();
         }

         public ShufflePushReadMetricDistributions build() {
            ShufflePushReadMetricDistributions result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ShufflePushReadMetricDistributions buildPartial() {
            ShufflePushReadMetricDistributions result = new ShufflePushReadMetricDistributions(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ShufflePushReadMetricDistributions result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               this.corruptMergedBlockChunks_.makeImmutable();
               result.corruptMergedBlockChunks_ = this.corruptMergedBlockChunks_;
            }

            if ((from_bitField0_ & 2) != 0) {
               this.mergedFetchFallbackCount_.makeImmutable();
               result.mergedFetchFallbackCount_ = this.mergedFetchFallbackCount_;
            }

            if ((from_bitField0_ & 4) != 0) {
               this.remoteMergedBlocksFetched_.makeImmutable();
               result.remoteMergedBlocksFetched_ = this.remoteMergedBlocksFetched_;
            }

            if ((from_bitField0_ & 8) != 0) {
               this.localMergedBlocksFetched_.makeImmutable();
               result.localMergedBlocksFetched_ = this.localMergedBlocksFetched_;
            }

            if ((from_bitField0_ & 16) != 0) {
               this.remoteMergedChunksFetched_.makeImmutable();
               result.remoteMergedChunksFetched_ = this.remoteMergedChunksFetched_;
            }

            if ((from_bitField0_ & 32) != 0) {
               this.localMergedChunksFetched_.makeImmutable();
               result.localMergedChunksFetched_ = this.localMergedChunksFetched_;
            }

            if ((from_bitField0_ & 64) != 0) {
               this.remoteMergedBytesRead_.makeImmutable();
               result.remoteMergedBytesRead_ = this.remoteMergedBytesRead_;
            }

            if ((from_bitField0_ & 128) != 0) {
               this.localMergedBytesRead_.makeImmutable();
               result.localMergedBytesRead_ = this.localMergedBytesRead_;
            }

            if ((from_bitField0_ & 256) != 0) {
               this.remoteMergedReqsDuration_.makeImmutable();
               result.remoteMergedReqsDuration_ = this.remoteMergedReqsDuration_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ShufflePushReadMetricDistributions) {
               return this.mergeFrom((ShufflePushReadMetricDistributions)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ShufflePushReadMetricDistributions other) {
            if (other == StoreTypes.ShufflePushReadMetricDistributions.getDefaultInstance()) {
               return this;
            } else {
               if (!other.corruptMergedBlockChunks_.isEmpty()) {
                  if (this.corruptMergedBlockChunks_.isEmpty()) {
                     this.corruptMergedBlockChunks_ = other.corruptMergedBlockChunks_;
                     this.corruptMergedBlockChunks_.makeImmutable();
                     this.bitField0_ |= 1;
                  } else {
                     this.ensureCorruptMergedBlockChunksIsMutable();
                     this.corruptMergedBlockChunks_.addAll(other.corruptMergedBlockChunks_);
                  }

                  this.onChanged();
               }

               if (!other.mergedFetchFallbackCount_.isEmpty()) {
                  if (this.mergedFetchFallbackCount_.isEmpty()) {
                     this.mergedFetchFallbackCount_ = other.mergedFetchFallbackCount_;
                     this.mergedFetchFallbackCount_.makeImmutable();
                     this.bitField0_ |= 2;
                  } else {
                     this.ensureMergedFetchFallbackCountIsMutable();
                     this.mergedFetchFallbackCount_.addAll(other.mergedFetchFallbackCount_);
                  }

                  this.onChanged();
               }

               if (!other.remoteMergedBlocksFetched_.isEmpty()) {
                  if (this.remoteMergedBlocksFetched_.isEmpty()) {
                     this.remoteMergedBlocksFetched_ = other.remoteMergedBlocksFetched_;
                     this.remoteMergedBlocksFetched_.makeImmutable();
                     this.bitField0_ |= 4;
                  } else {
                     this.ensureRemoteMergedBlocksFetchedIsMutable();
                     this.remoteMergedBlocksFetched_.addAll(other.remoteMergedBlocksFetched_);
                  }

                  this.onChanged();
               }

               if (!other.localMergedBlocksFetched_.isEmpty()) {
                  if (this.localMergedBlocksFetched_.isEmpty()) {
                     this.localMergedBlocksFetched_ = other.localMergedBlocksFetched_;
                     this.localMergedBlocksFetched_.makeImmutable();
                     this.bitField0_ |= 8;
                  } else {
                     this.ensureLocalMergedBlocksFetchedIsMutable();
                     this.localMergedBlocksFetched_.addAll(other.localMergedBlocksFetched_);
                  }

                  this.onChanged();
               }

               if (!other.remoteMergedChunksFetched_.isEmpty()) {
                  if (this.remoteMergedChunksFetched_.isEmpty()) {
                     this.remoteMergedChunksFetched_ = other.remoteMergedChunksFetched_;
                     this.remoteMergedChunksFetched_.makeImmutable();
                     this.bitField0_ |= 16;
                  } else {
                     this.ensureRemoteMergedChunksFetchedIsMutable();
                     this.remoteMergedChunksFetched_.addAll(other.remoteMergedChunksFetched_);
                  }

                  this.onChanged();
               }

               if (!other.localMergedChunksFetched_.isEmpty()) {
                  if (this.localMergedChunksFetched_.isEmpty()) {
                     this.localMergedChunksFetched_ = other.localMergedChunksFetched_;
                     this.localMergedChunksFetched_.makeImmutable();
                     this.bitField0_ |= 32;
                  } else {
                     this.ensureLocalMergedChunksFetchedIsMutable();
                     this.localMergedChunksFetched_.addAll(other.localMergedChunksFetched_);
                  }

                  this.onChanged();
               }

               if (!other.remoteMergedBytesRead_.isEmpty()) {
                  if (this.remoteMergedBytesRead_.isEmpty()) {
                     this.remoteMergedBytesRead_ = other.remoteMergedBytesRead_;
                     this.remoteMergedBytesRead_.makeImmutable();
                     this.bitField0_ |= 64;
                  } else {
                     this.ensureRemoteMergedBytesReadIsMutable();
                     this.remoteMergedBytesRead_.addAll(other.remoteMergedBytesRead_);
                  }

                  this.onChanged();
               }

               if (!other.localMergedBytesRead_.isEmpty()) {
                  if (this.localMergedBytesRead_.isEmpty()) {
                     this.localMergedBytesRead_ = other.localMergedBytesRead_;
                     this.localMergedBytesRead_.makeImmutable();
                     this.bitField0_ |= 128;
                  } else {
                     this.ensureLocalMergedBytesReadIsMutable();
                     this.localMergedBytesRead_.addAll(other.localMergedBytesRead_);
                  }

                  this.onChanged();
               }

               if (!other.remoteMergedReqsDuration_.isEmpty()) {
                  if (this.remoteMergedReqsDuration_.isEmpty()) {
                     this.remoteMergedReqsDuration_ = other.remoteMergedReqsDuration_;
                     this.remoteMergedReqsDuration_.makeImmutable();
                     this.bitField0_ |= 256;
                  } else {
                     this.ensureRemoteMergedReqsDurationIsMutable();
                     this.remoteMergedReqsDuration_.addAll(other.remoteMergedReqsDuration_);
                  }

                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 48:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                           break;
                        case 9:
                           double v = input.readDouble();
                           this.ensureCorruptMergedBlockChunksIsMutable();
                           this.corruptMergedBlockChunks_.addDouble(v);
                           break;
                        case 10:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureCorruptMergedBlockChunksIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.corruptMergedBlockChunks_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 17:
                           double v = input.readDouble();
                           this.ensureMergedFetchFallbackCountIsMutable();
                           this.mergedFetchFallbackCount_.addDouble(v);
                           break;
                        case 18:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureMergedFetchFallbackCountIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.mergedFetchFallbackCount_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 25:
                           double v = input.readDouble();
                           this.ensureRemoteMergedBlocksFetchedIsMutable();
                           this.remoteMergedBlocksFetched_.addDouble(v);
                           break;
                        case 26:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureRemoteMergedBlocksFetchedIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.remoteMergedBlocksFetched_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 33:
                           double v = input.readDouble();
                           this.ensureLocalMergedBlocksFetchedIsMutable();
                           this.localMergedBlocksFetched_.addDouble(v);
                           break;
                        case 34:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureLocalMergedBlocksFetchedIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.localMergedBlocksFetched_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 41:
                           double v = input.readDouble();
                           this.ensureRemoteMergedChunksFetchedIsMutable();
                           this.remoteMergedChunksFetched_.addDouble(v);
                           break;
                        case 42:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureRemoteMergedChunksFetchedIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.remoteMergedChunksFetched_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 49:
                           double v = input.readDouble();
                           this.ensureLocalMergedChunksFetchedIsMutable();
                           this.localMergedChunksFetched_.addDouble(v);
                           break;
                        case 50:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureLocalMergedChunksFetchedIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.localMergedChunksFetched_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 57:
                           double v = input.readDouble();
                           this.ensureRemoteMergedBytesReadIsMutable();
                           this.remoteMergedBytesRead_.addDouble(v);
                           break;
                        case 58:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureRemoteMergedBytesReadIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.remoteMergedBytesRead_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 65:
                           double v = input.readDouble();
                           this.ensureLocalMergedBytesReadIsMutable();
                           this.localMergedBytesRead_.addDouble(v);
                           break;
                        case 66:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureLocalMergedBytesReadIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.localMergedBytesRead_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 73:
                           double v = input.readDouble();
                           this.ensureRemoteMergedReqsDurationIsMutable();
                           this.remoteMergedReqsDuration_.addDouble(v);
                           break;
                        case 74:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureRemoteMergedReqsDurationIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.remoteMergedReqsDuration_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         private void ensureCorruptMergedBlockChunksIsMutable() {
            if (!this.corruptMergedBlockChunks_.isModifiable()) {
               this.corruptMergedBlockChunks_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.corruptMergedBlockChunks_);
            }

            this.bitField0_ |= 1;
         }

         private void ensureCorruptMergedBlockChunksIsMutable(int capacity) {
            if (!this.corruptMergedBlockChunks_.isModifiable()) {
               this.corruptMergedBlockChunks_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.corruptMergedBlockChunks_, capacity);
            }

            this.bitField0_ |= 1;
         }

         public List getCorruptMergedBlockChunksList() {
            this.corruptMergedBlockChunks_.makeImmutable();
            return this.corruptMergedBlockChunks_;
         }

         public int getCorruptMergedBlockChunksCount() {
            return this.corruptMergedBlockChunks_.size();
         }

         public double getCorruptMergedBlockChunks(int index) {
            return this.corruptMergedBlockChunks_.getDouble(index);
         }

         public Builder setCorruptMergedBlockChunks(int index, double value) {
            this.ensureCorruptMergedBlockChunksIsMutable();
            this.corruptMergedBlockChunks_.setDouble(index, value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addCorruptMergedBlockChunks(double value) {
            this.ensureCorruptMergedBlockChunksIsMutable();
            this.corruptMergedBlockChunks_.addDouble(value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addAllCorruptMergedBlockChunks(Iterable values) {
            this.ensureCorruptMergedBlockChunksIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.corruptMergedBlockChunks_);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearCorruptMergedBlockChunks() {
            this.corruptMergedBlockChunks_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         private void ensureMergedFetchFallbackCountIsMutable() {
            if (!this.mergedFetchFallbackCount_.isModifiable()) {
               this.mergedFetchFallbackCount_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.mergedFetchFallbackCount_);
            }

            this.bitField0_ |= 2;
         }

         private void ensureMergedFetchFallbackCountIsMutable(int capacity) {
            if (!this.mergedFetchFallbackCount_.isModifiable()) {
               this.mergedFetchFallbackCount_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.mergedFetchFallbackCount_, capacity);
            }

            this.bitField0_ |= 2;
         }

         public List getMergedFetchFallbackCountList() {
            this.mergedFetchFallbackCount_.makeImmutable();
            return this.mergedFetchFallbackCount_;
         }

         public int getMergedFetchFallbackCountCount() {
            return this.mergedFetchFallbackCount_.size();
         }

         public double getMergedFetchFallbackCount(int index) {
            return this.mergedFetchFallbackCount_.getDouble(index);
         }

         public Builder setMergedFetchFallbackCount(int index, double value) {
            this.ensureMergedFetchFallbackCountIsMutable();
            this.mergedFetchFallbackCount_.setDouble(index, value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addMergedFetchFallbackCount(double value) {
            this.ensureMergedFetchFallbackCountIsMutable();
            this.mergedFetchFallbackCount_.addDouble(value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addAllMergedFetchFallbackCount(Iterable values) {
            this.ensureMergedFetchFallbackCountIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.mergedFetchFallbackCount_);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearMergedFetchFallbackCount() {
            this.mergedFetchFallbackCount_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         private void ensureRemoteMergedBlocksFetchedIsMutable() {
            if (!this.remoteMergedBlocksFetched_.isModifiable()) {
               this.remoteMergedBlocksFetched_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.remoteMergedBlocksFetched_);
            }

            this.bitField0_ |= 4;
         }

         private void ensureRemoteMergedBlocksFetchedIsMutable(int capacity) {
            if (!this.remoteMergedBlocksFetched_.isModifiable()) {
               this.remoteMergedBlocksFetched_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.remoteMergedBlocksFetched_, capacity);
            }

            this.bitField0_ |= 4;
         }

         public List getRemoteMergedBlocksFetchedList() {
            this.remoteMergedBlocksFetched_.makeImmutable();
            return this.remoteMergedBlocksFetched_;
         }

         public int getRemoteMergedBlocksFetchedCount() {
            return this.remoteMergedBlocksFetched_.size();
         }

         public double getRemoteMergedBlocksFetched(int index) {
            return this.remoteMergedBlocksFetched_.getDouble(index);
         }

         public Builder setRemoteMergedBlocksFetched(int index, double value) {
            this.ensureRemoteMergedBlocksFetchedIsMutable();
            this.remoteMergedBlocksFetched_.setDouble(index, value);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder addRemoteMergedBlocksFetched(double value) {
            this.ensureRemoteMergedBlocksFetchedIsMutable();
            this.remoteMergedBlocksFetched_.addDouble(value);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder addAllRemoteMergedBlocksFetched(Iterable values) {
            this.ensureRemoteMergedBlocksFetchedIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.remoteMergedBlocksFetched_);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteMergedBlocksFetched() {
            this.remoteMergedBlocksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         private void ensureLocalMergedBlocksFetchedIsMutable() {
            if (!this.localMergedBlocksFetched_.isModifiable()) {
               this.localMergedBlocksFetched_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.localMergedBlocksFetched_);
            }

            this.bitField0_ |= 8;
         }

         private void ensureLocalMergedBlocksFetchedIsMutable(int capacity) {
            if (!this.localMergedBlocksFetched_.isModifiable()) {
               this.localMergedBlocksFetched_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.localMergedBlocksFetched_, capacity);
            }

            this.bitField0_ |= 8;
         }

         public List getLocalMergedBlocksFetchedList() {
            this.localMergedBlocksFetched_.makeImmutable();
            return this.localMergedBlocksFetched_;
         }

         public int getLocalMergedBlocksFetchedCount() {
            return this.localMergedBlocksFetched_.size();
         }

         public double getLocalMergedBlocksFetched(int index) {
            return this.localMergedBlocksFetched_.getDouble(index);
         }

         public Builder setLocalMergedBlocksFetched(int index, double value) {
            this.ensureLocalMergedBlocksFetchedIsMutable();
            this.localMergedBlocksFetched_.setDouble(index, value);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder addLocalMergedBlocksFetched(double value) {
            this.ensureLocalMergedBlocksFetchedIsMutable();
            this.localMergedBlocksFetched_.addDouble(value);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder addAllLocalMergedBlocksFetched(Iterable values) {
            this.ensureLocalMergedBlocksFetchedIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.localMergedBlocksFetched_);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearLocalMergedBlocksFetched() {
            this.localMergedBlocksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -9;
            this.onChanged();
            return this;
         }

         private void ensureRemoteMergedChunksFetchedIsMutable() {
            if (!this.remoteMergedChunksFetched_.isModifiable()) {
               this.remoteMergedChunksFetched_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.remoteMergedChunksFetched_);
            }

            this.bitField0_ |= 16;
         }

         private void ensureRemoteMergedChunksFetchedIsMutable(int capacity) {
            if (!this.remoteMergedChunksFetched_.isModifiable()) {
               this.remoteMergedChunksFetched_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.remoteMergedChunksFetched_, capacity);
            }

            this.bitField0_ |= 16;
         }

         public List getRemoteMergedChunksFetchedList() {
            this.remoteMergedChunksFetched_.makeImmutable();
            return this.remoteMergedChunksFetched_;
         }

         public int getRemoteMergedChunksFetchedCount() {
            return this.remoteMergedChunksFetched_.size();
         }

         public double getRemoteMergedChunksFetched(int index) {
            return this.remoteMergedChunksFetched_.getDouble(index);
         }

         public Builder setRemoteMergedChunksFetched(int index, double value) {
            this.ensureRemoteMergedChunksFetchedIsMutable();
            this.remoteMergedChunksFetched_.setDouble(index, value);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder addRemoteMergedChunksFetched(double value) {
            this.ensureRemoteMergedChunksFetchedIsMutable();
            this.remoteMergedChunksFetched_.addDouble(value);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder addAllRemoteMergedChunksFetched(Iterable values) {
            this.ensureRemoteMergedChunksFetchedIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.remoteMergedChunksFetched_);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteMergedChunksFetched() {
            this.remoteMergedChunksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -17;
            this.onChanged();
            return this;
         }

         private void ensureLocalMergedChunksFetchedIsMutable() {
            if (!this.localMergedChunksFetched_.isModifiable()) {
               this.localMergedChunksFetched_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.localMergedChunksFetched_);
            }

            this.bitField0_ |= 32;
         }

         private void ensureLocalMergedChunksFetchedIsMutable(int capacity) {
            if (!this.localMergedChunksFetched_.isModifiable()) {
               this.localMergedChunksFetched_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.localMergedChunksFetched_, capacity);
            }

            this.bitField0_ |= 32;
         }

         public List getLocalMergedChunksFetchedList() {
            this.localMergedChunksFetched_.makeImmutable();
            return this.localMergedChunksFetched_;
         }

         public int getLocalMergedChunksFetchedCount() {
            return this.localMergedChunksFetched_.size();
         }

         public double getLocalMergedChunksFetched(int index) {
            return this.localMergedChunksFetched_.getDouble(index);
         }

         public Builder setLocalMergedChunksFetched(int index, double value) {
            this.ensureLocalMergedChunksFetchedIsMutable();
            this.localMergedChunksFetched_.setDouble(index, value);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder addLocalMergedChunksFetched(double value) {
            this.ensureLocalMergedChunksFetchedIsMutable();
            this.localMergedChunksFetched_.addDouble(value);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder addAllLocalMergedChunksFetched(Iterable values) {
            this.ensureLocalMergedChunksFetchedIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.localMergedChunksFetched_);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearLocalMergedChunksFetched() {
            this.localMergedChunksFetched_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -33;
            this.onChanged();
            return this;
         }

         private void ensureRemoteMergedBytesReadIsMutable() {
            if (!this.remoteMergedBytesRead_.isModifiable()) {
               this.remoteMergedBytesRead_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.remoteMergedBytesRead_);
            }

            this.bitField0_ |= 64;
         }

         private void ensureRemoteMergedBytesReadIsMutable(int capacity) {
            if (!this.remoteMergedBytesRead_.isModifiable()) {
               this.remoteMergedBytesRead_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.remoteMergedBytesRead_, capacity);
            }

            this.bitField0_ |= 64;
         }

         public List getRemoteMergedBytesReadList() {
            this.remoteMergedBytesRead_.makeImmutable();
            return this.remoteMergedBytesRead_;
         }

         public int getRemoteMergedBytesReadCount() {
            return this.remoteMergedBytesRead_.size();
         }

         public double getRemoteMergedBytesRead(int index) {
            return this.remoteMergedBytesRead_.getDouble(index);
         }

         public Builder setRemoteMergedBytesRead(int index, double value) {
            this.ensureRemoteMergedBytesReadIsMutable();
            this.remoteMergedBytesRead_.setDouble(index, value);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder addRemoteMergedBytesRead(double value) {
            this.ensureRemoteMergedBytesReadIsMutable();
            this.remoteMergedBytesRead_.addDouble(value);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder addAllRemoteMergedBytesRead(Iterable values) {
            this.ensureRemoteMergedBytesReadIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.remoteMergedBytesRead_);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteMergedBytesRead() {
            this.remoteMergedBytesRead_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -65;
            this.onChanged();
            return this;
         }

         private void ensureLocalMergedBytesReadIsMutable() {
            if (!this.localMergedBytesRead_.isModifiable()) {
               this.localMergedBytesRead_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.localMergedBytesRead_);
            }

            this.bitField0_ |= 128;
         }

         private void ensureLocalMergedBytesReadIsMutable(int capacity) {
            if (!this.localMergedBytesRead_.isModifiable()) {
               this.localMergedBytesRead_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.localMergedBytesRead_, capacity);
            }

            this.bitField0_ |= 128;
         }

         public List getLocalMergedBytesReadList() {
            this.localMergedBytesRead_.makeImmutable();
            return this.localMergedBytesRead_;
         }

         public int getLocalMergedBytesReadCount() {
            return this.localMergedBytesRead_.size();
         }

         public double getLocalMergedBytesRead(int index) {
            return this.localMergedBytesRead_.getDouble(index);
         }

         public Builder setLocalMergedBytesRead(int index, double value) {
            this.ensureLocalMergedBytesReadIsMutable();
            this.localMergedBytesRead_.setDouble(index, value);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder addLocalMergedBytesRead(double value) {
            this.ensureLocalMergedBytesReadIsMutable();
            this.localMergedBytesRead_.addDouble(value);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder addAllLocalMergedBytesRead(Iterable values) {
            this.ensureLocalMergedBytesReadIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.localMergedBytesRead_);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearLocalMergedBytesRead() {
            this.localMergedBytesRead_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -129;
            this.onChanged();
            return this;
         }

         private void ensureRemoteMergedReqsDurationIsMutable() {
            if (!this.remoteMergedReqsDuration_.isModifiable()) {
               this.remoteMergedReqsDuration_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.remoteMergedReqsDuration_);
            }

            this.bitField0_ |= 256;
         }

         private void ensureRemoteMergedReqsDurationIsMutable(int capacity) {
            if (!this.remoteMergedReqsDuration_.isModifiable()) {
               this.remoteMergedReqsDuration_ = (Internal.DoubleList)StoreTypes.ShufflePushReadMetricDistributions.makeMutableCopy(this.remoteMergedReqsDuration_, capacity);
            }

            this.bitField0_ |= 256;
         }

         public List getRemoteMergedReqsDurationList() {
            this.remoteMergedReqsDuration_.makeImmutable();
            return this.remoteMergedReqsDuration_;
         }

         public int getRemoteMergedReqsDurationCount() {
            return this.remoteMergedReqsDuration_.size();
         }

         public double getRemoteMergedReqsDuration(int index) {
            return this.remoteMergedReqsDuration_.getDouble(index);
         }

         public Builder setRemoteMergedReqsDuration(int index, double value) {
            this.ensureRemoteMergedReqsDurationIsMutable();
            this.remoteMergedReqsDuration_.setDouble(index, value);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder addRemoteMergedReqsDuration(double value) {
            this.ensureRemoteMergedReqsDurationIsMutable();
            this.remoteMergedReqsDuration_.addDouble(value);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder addAllRemoteMergedReqsDuration(Iterable values) {
            this.ensureRemoteMergedReqsDurationIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.remoteMergedReqsDuration_);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteMergedReqsDuration() {
            this.remoteMergedReqsDuration_ = StoreTypes.ShufflePushReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -257;
            this.onChanged();
            return this;
         }
      }
   }

   public interface ShufflePushReadMetricDistributionsOrBuilder extends MessageOrBuilder {
      List getCorruptMergedBlockChunksList();

      int getCorruptMergedBlockChunksCount();

      double getCorruptMergedBlockChunks(int var1);

      List getMergedFetchFallbackCountList();

      int getMergedFetchFallbackCountCount();

      double getMergedFetchFallbackCount(int var1);

      List getRemoteMergedBlocksFetchedList();

      int getRemoteMergedBlocksFetchedCount();

      double getRemoteMergedBlocksFetched(int var1);

      List getLocalMergedBlocksFetchedList();

      int getLocalMergedBlocksFetchedCount();

      double getLocalMergedBlocksFetched(int var1);

      List getRemoteMergedChunksFetchedList();

      int getRemoteMergedChunksFetchedCount();

      double getRemoteMergedChunksFetched(int var1);

      List getLocalMergedChunksFetchedList();

      int getLocalMergedChunksFetchedCount();

      double getLocalMergedChunksFetched(int var1);

      List getRemoteMergedBytesReadList();

      int getRemoteMergedBytesReadCount();

      double getRemoteMergedBytesRead(int var1);

      List getLocalMergedBytesReadList();

      int getLocalMergedBytesReadCount();

      double getLocalMergedBytesRead(int var1);

      List getRemoteMergedReqsDurationList();

      int getRemoteMergedReqsDurationCount();

      double getRemoteMergedReqsDuration(int var1);
   }

   public static final class ShufflePushReadMetrics extends GeneratedMessage implements ShufflePushReadMetricsOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int CORRUPT_MERGED_BLOCK_CHUNKS_FIELD_NUMBER = 1;
      private long corruptMergedBlockChunks_ = 0L;
      public static final int MERGED_FETCH_FALLBACK_COUNT_FIELD_NUMBER = 2;
      private long mergedFetchFallbackCount_ = 0L;
      public static final int REMOTE_MERGED_BLOCKS_FETCHED_FIELD_NUMBER = 3;
      private long remoteMergedBlocksFetched_ = 0L;
      public static final int LOCAL_MERGED_BLOCKS_FETCHED_FIELD_NUMBER = 4;
      private long localMergedBlocksFetched_ = 0L;
      public static final int REMOTE_MERGED_CHUNKS_FETCHED_FIELD_NUMBER = 5;
      private long remoteMergedChunksFetched_ = 0L;
      public static final int LOCAL_MERGED_CHUNKS_FETCHED_FIELD_NUMBER = 6;
      private long localMergedChunksFetched_ = 0L;
      public static final int REMOTE_MERGED_BYTES_READ_FIELD_NUMBER = 7;
      private long remoteMergedBytesRead_ = 0L;
      public static final int LOCAL_MERGED_BYTES_READ_FIELD_NUMBER = 8;
      private long localMergedBytesRead_ = 0L;
      public static final int REMOTE_MERGED_REQS_DURATION_FIELD_NUMBER = 9;
      private long remoteMergedReqsDuration_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final ShufflePushReadMetrics DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ShufflePushReadMetrics(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ShufflePushReadMetrics() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetrics_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(ShufflePushReadMetrics.class, Builder.class);
      }

      public long getCorruptMergedBlockChunks() {
         return this.corruptMergedBlockChunks_;
      }

      public long getMergedFetchFallbackCount() {
         return this.mergedFetchFallbackCount_;
      }

      public long getRemoteMergedBlocksFetched() {
         return this.remoteMergedBlocksFetched_;
      }

      public long getLocalMergedBlocksFetched() {
         return this.localMergedBlocksFetched_;
      }

      public long getRemoteMergedChunksFetched() {
         return this.remoteMergedChunksFetched_;
      }

      public long getLocalMergedChunksFetched() {
         return this.localMergedChunksFetched_;
      }

      public long getRemoteMergedBytesRead() {
         return this.remoteMergedBytesRead_;
      }

      public long getLocalMergedBytesRead() {
         return this.localMergedBytesRead_;
      }

      public long getRemoteMergedReqsDuration() {
         return this.remoteMergedReqsDuration_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.corruptMergedBlockChunks_ != 0L) {
            output.writeInt64(1, this.corruptMergedBlockChunks_);
         }

         if (this.mergedFetchFallbackCount_ != 0L) {
            output.writeInt64(2, this.mergedFetchFallbackCount_);
         }

         if (this.remoteMergedBlocksFetched_ != 0L) {
            output.writeInt64(3, this.remoteMergedBlocksFetched_);
         }

         if (this.localMergedBlocksFetched_ != 0L) {
            output.writeInt64(4, this.localMergedBlocksFetched_);
         }

         if (this.remoteMergedChunksFetched_ != 0L) {
            output.writeInt64(5, this.remoteMergedChunksFetched_);
         }

         if (this.localMergedChunksFetched_ != 0L) {
            output.writeInt64(6, this.localMergedChunksFetched_);
         }

         if (this.remoteMergedBytesRead_ != 0L) {
            output.writeInt64(7, this.remoteMergedBytesRead_);
         }

         if (this.localMergedBytesRead_ != 0L) {
            output.writeInt64(8, this.localMergedBytesRead_);
         }

         if (this.remoteMergedReqsDuration_ != 0L) {
            output.writeInt64(9, this.remoteMergedReqsDuration_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.corruptMergedBlockChunks_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.corruptMergedBlockChunks_);
            }

            if (this.mergedFetchFallbackCount_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.mergedFetchFallbackCount_);
            }

            if (this.remoteMergedBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(3, this.remoteMergedBlocksFetched_);
            }

            if (this.localMergedBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(4, this.localMergedBlocksFetched_);
            }

            if (this.remoteMergedChunksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.remoteMergedChunksFetched_);
            }

            if (this.localMergedChunksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(6, this.localMergedChunksFetched_);
            }

            if (this.remoteMergedBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(7, this.remoteMergedBytesRead_);
            }

            if (this.localMergedBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(8, this.localMergedBytesRead_);
            }

            if (this.remoteMergedReqsDuration_ != 0L) {
               size += CodedOutputStream.computeInt64Size(9, this.remoteMergedReqsDuration_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ShufflePushReadMetrics)) {
            return super.equals(obj);
         } else {
            ShufflePushReadMetrics other = (ShufflePushReadMetrics)obj;
            if (this.getCorruptMergedBlockChunks() != other.getCorruptMergedBlockChunks()) {
               return false;
            } else if (this.getMergedFetchFallbackCount() != other.getMergedFetchFallbackCount()) {
               return false;
            } else if (this.getRemoteMergedBlocksFetched() != other.getRemoteMergedBlocksFetched()) {
               return false;
            } else if (this.getLocalMergedBlocksFetched() != other.getLocalMergedBlocksFetched()) {
               return false;
            } else if (this.getRemoteMergedChunksFetched() != other.getRemoteMergedChunksFetched()) {
               return false;
            } else if (this.getLocalMergedChunksFetched() != other.getLocalMergedChunksFetched()) {
               return false;
            } else if (this.getRemoteMergedBytesRead() != other.getRemoteMergedBytesRead()) {
               return false;
            } else if (this.getLocalMergedBytesRead() != other.getLocalMergedBytesRead()) {
               return false;
            } else if (this.getRemoteMergedReqsDuration() != other.getRemoteMergedReqsDuration()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getCorruptMergedBlockChunks());
            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getMergedFetchFallbackCount());
            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashLong(this.getRemoteMergedBlocksFetched());
            hash = 37 * hash + 4;
            hash = 53 * hash + Internal.hashLong(this.getLocalMergedBlocksFetched());
            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getRemoteMergedChunksFetched());
            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(this.getLocalMergedChunksFetched());
            hash = 37 * hash + 7;
            hash = 53 * hash + Internal.hashLong(this.getRemoteMergedBytesRead());
            hash = 37 * hash + 8;
            hash = 53 * hash + Internal.hashLong(this.getLocalMergedBytesRead());
            hash = 37 * hash + 9;
            hash = 53 * hash + Internal.hashLong(this.getRemoteMergedReqsDuration());
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ShufflePushReadMetrics parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetrics)PARSER.parseFrom(data);
      }

      public static ShufflePushReadMetrics parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShufflePushReadMetrics parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetrics)PARSER.parseFrom(data);
      }

      public static ShufflePushReadMetrics parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShufflePushReadMetrics parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetrics)PARSER.parseFrom(data);
      }

      public static ShufflePushReadMetrics parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShufflePushReadMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShufflePushReadMetrics parseFrom(InputStream input) throws IOException {
         return (ShufflePushReadMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShufflePushReadMetrics parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShufflePushReadMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShufflePushReadMetrics parseDelimitedFrom(InputStream input) throws IOException {
         return (ShufflePushReadMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ShufflePushReadMetrics parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShufflePushReadMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShufflePushReadMetrics parseFrom(CodedInputStream input) throws IOException {
         return (ShufflePushReadMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShufflePushReadMetrics parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShufflePushReadMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ShufflePushReadMetrics prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ShufflePushReadMetrics getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ShufflePushReadMetrics getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ShufflePushReadMetrics.class.getName());
         DEFAULT_INSTANCE = new ShufflePushReadMetrics();
         PARSER = new AbstractParser() {
            public ShufflePushReadMetrics parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ShufflePushReadMetrics.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ShufflePushReadMetricsOrBuilder {
         private int bitField0_;
         private long corruptMergedBlockChunks_;
         private long mergedFetchFallbackCount_;
         private long remoteMergedBlocksFetched_;
         private long localMergedBlocksFetched_;
         private long remoteMergedChunksFetched_;
         private long localMergedChunksFetched_;
         private long remoteMergedBytesRead_;
         private long localMergedBytesRead_;
         private long remoteMergedReqsDuration_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetrics_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(ShufflePushReadMetrics.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.corruptMergedBlockChunks_ = 0L;
            this.mergedFetchFallbackCount_ = 0L;
            this.remoteMergedBlocksFetched_ = 0L;
            this.localMergedBlocksFetched_ = 0L;
            this.remoteMergedChunksFetched_ = 0L;
            this.localMergedChunksFetched_ = 0L;
            this.remoteMergedBytesRead_ = 0L;
            this.localMergedBytesRead_ = 0L;
            this.remoteMergedReqsDuration_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShufflePushReadMetrics_descriptor;
         }

         public ShufflePushReadMetrics getDefaultInstanceForType() {
            return StoreTypes.ShufflePushReadMetrics.getDefaultInstance();
         }

         public ShufflePushReadMetrics build() {
            ShufflePushReadMetrics result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ShufflePushReadMetrics buildPartial() {
            ShufflePushReadMetrics result = new ShufflePushReadMetrics(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ShufflePushReadMetrics result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.corruptMergedBlockChunks_ = this.corruptMergedBlockChunks_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.mergedFetchFallbackCount_ = this.mergedFetchFallbackCount_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.remoteMergedBlocksFetched_ = this.remoteMergedBlocksFetched_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.localMergedBlocksFetched_ = this.localMergedBlocksFetched_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.remoteMergedChunksFetched_ = this.remoteMergedChunksFetched_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.localMergedChunksFetched_ = this.localMergedChunksFetched_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.remoteMergedBytesRead_ = this.remoteMergedBytesRead_;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.localMergedBytesRead_ = this.localMergedBytesRead_;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.remoteMergedReqsDuration_ = this.remoteMergedReqsDuration_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ShufflePushReadMetrics) {
               return this.mergeFrom((ShufflePushReadMetrics)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ShufflePushReadMetrics other) {
            if (other == StoreTypes.ShufflePushReadMetrics.getDefaultInstance()) {
               return this;
            } else {
               if (other.getCorruptMergedBlockChunks() != 0L) {
                  this.setCorruptMergedBlockChunks(other.getCorruptMergedBlockChunks());
               }

               if (other.getMergedFetchFallbackCount() != 0L) {
                  this.setMergedFetchFallbackCount(other.getMergedFetchFallbackCount());
               }

               if (other.getRemoteMergedBlocksFetched() != 0L) {
                  this.setRemoteMergedBlocksFetched(other.getRemoteMergedBlocksFetched());
               }

               if (other.getLocalMergedBlocksFetched() != 0L) {
                  this.setLocalMergedBlocksFetched(other.getLocalMergedBlocksFetched());
               }

               if (other.getRemoteMergedChunksFetched() != 0L) {
                  this.setRemoteMergedChunksFetched(other.getRemoteMergedChunksFetched());
               }

               if (other.getLocalMergedChunksFetched() != 0L) {
                  this.setLocalMergedChunksFetched(other.getLocalMergedChunksFetched());
               }

               if (other.getRemoteMergedBytesRead() != 0L) {
                  this.setRemoteMergedBytesRead(other.getRemoteMergedBytesRead());
               }

               if (other.getLocalMergedBytesRead() != 0L) {
                  this.setLocalMergedBytesRead(other.getLocalMergedBytesRead());
               }

               if (other.getRemoteMergedReqsDuration() != 0L) {
                  this.setRemoteMergedReqsDuration(other.getRemoteMergedReqsDuration());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.corruptMergedBlockChunks_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.mergedFetchFallbackCount_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.remoteMergedBlocksFetched_ = input.readInt64();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.localMergedBlocksFetched_ = input.readInt64();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.remoteMergedChunksFetched_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.localMergedChunksFetched_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.remoteMergedBytesRead_ = input.readInt64();
                           this.bitField0_ |= 64;
                           break;
                        case 64:
                           this.localMergedBytesRead_ = input.readInt64();
                           this.bitField0_ |= 128;
                           break;
                        case 72:
                           this.remoteMergedReqsDuration_ = input.readInt64();
                           this.bitField0_ |= 256;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getCorruptMergedBlockChunks() {
            return this.corruptMergedBlockChunks_;
         }

         public Builder setCorruptMergedBlockChunks(long value) {
            this.corruptMergedBlockChunks_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearCorruptMergedBlockChunks() {
            this.bitField0_ &= -2;
            this.corruptMergedBlockChunks_ = 0L;
            this.onChanged();
            return this;
         }

         public long getMergedFetchFallbackCount() {
            return this.mergedFetchFallbackCount_;
         }

         public Builder setMergedFetchFallbackCount(long value) {
            this.mergedFetchFallbackCount_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearMergedFetchFallbackCount() {
            this.bitField0_ &= -3;
            this.mergedFetchFallbackCount_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRemoteMergedBlocksFetched() {
            return this.remoteMergedBlocksFetched_;
         }

         public Builder setRemoteMergedBlocksFetched(long value) {
            this.remoteMergedBlocksFetched_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteMergedBlocksFetched() {
            this.bitField0_ &= -5;
            this.remoteMergedBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getLocalMergedBlocksFetched() {
            return this.localMergedBlocksFetched_;
         }

         public Builder setLocalMergedBlocksFetched(long value) {
            this.localMergedBlocksFetched_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearLocalMergedBlocksFetched() {
            this.bitField0_ &= -9;
            this.localMergedBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRemoteMergedChunksFetched() {
            return this.remoteMergedChunksFetched_;
         }

         public Builder setRemoteMergedChunksFetched(long value) {
            this.remoteMergedChunksFetched_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteMergedChunksFetched() {
            this.bitField0_ &= -17;
            this.remoteMergedChunksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getLocalMergedChunksFetched() {
            return this.localMergedChunksFetched_;
         }

         public Builder setLocalMergedChunksFetched(long value) {
            this.localMergedChunksFetched_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearLocalMergedChunksFetched() {
            this.bitField0_ &= -33;
            this.localMergedChunksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRemoteMergedBytesRead() {
            return this.remoteMergedBytesRead_;
         }

         public Builder setRemoteMergedBytesRead(long value) {
            this.remoteMergedBytesRead_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteMergedBytesRead() {
            this.bitField0_ &= -65;
            this.remoteMergedBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getLocalMergedBytesRead() {
            return this.localMergedBytesRead_;
         }

         public Builder setLocalMergedBytesRead(long value) {
            this.localMergedBytesRead_ = value;
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearLocalMergedBytesRead() {
            this.bitField0_ &= -129;
            this.localMergedBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRemoteMergedReqsDuration() {
            return this.remoteMergedReqsDuration_;
         }

         public Builder setRemoteMergedReqsDuration(long value) {
            this.remoteMergedReqsDuration_ = value;
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteMergedReqsDuration() {
            this.bitField0_ &= -257;
            this.remoteMergedReqsDuration_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public interface ShufflePushReadMetricsOrBuilder extends MessageOrBuilder {
      long getCorruptMergedBlockChunks();

      long getMergedFetchFallbackCount();

      long getRemoteMergedBlocksFetched();

      long getLocalMergedBlocksFetched();

      long getRemoteMergedChunksFetched();

      long getLocalMergedChunksFetched();

      long getRemoteMergedBytesRead();

      long getLocalMergedBytesRead();

      long getRemoteMergedReqsDuration();
   }

   public static final class ShuffleReadMetricDistributions extends GeneratedMessage implements ShuffleReadMetricDistributionsOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int READ_BYTES_FIELD_NUMBER = 1;
      private Internal.DoubleList readBytes_ = emptyDoubleList();
      private int readBytesMemoizedSerializedSize = -1;
      public static final int READ_RECORDS_FIELD_NUMBER = 2;
      private Internal.DoubleList readRecords_ = emptyDoubleList();
      private int readRecordsMemoizedSerializedSize = -1;
      public static final int REMOTE_BLOCKS_FETCHED_FIELD_NUMBER = 3;
      private Internal.DoubleList remoteBlocksFetched_ = emptyDoubleList();
      private int remoteBlocksFetchedMemoizedSerializedSize = -1;
      public static final int LOCAL_BLOCKS_FETCHED_FIELD_NUMBER = 4;
      private Internal.DoubleList localBlocksFetched_ = emptyDoubleList();
      private int localBlocksFetchedMemoizedSerializedSize = -1;
      public static final int FETCH_WAIT_TIME_FIELD_NUMBER = 5;
      private Internal.DoubleList fetchWaitTime_ = emptyDoubleList();
      private int fetchWaitTimeMemoizedSerializedSize = -1;
      public static final int REMOTE_BYTES_READ_FIELD_NUMBER = 6;
      private Internal.DoubleList remoteBytesRead_ = emptyDoubleList();
      private int remoteBytesReadMemoizedSerializedSize = -1;
      public static final int REMOTE_BYTES_READ_TO_DISK_FIELD_NUMBER = 7;
      private Internal.DoubleList remoteBytesReadToDisk_ = emptyDoubleList();
      private int remoteBytesReadToDiskMemoizedSerializedSize = -1;
      public static final int TOTAL_BLOCKS_FETCHED_FIELD_NUMBER = 8;
      private Internal.DoubleList totalBlocksFetched_ = emptyDoubleList();
      private int totalBlocksFetchedMemoizedSerializedSize = -1;
      public static final int REMOTE_REQS_DURATION_FIELD_NUMBER = 9;
      private Internal.DoubleList remoteReqsDuration_ = emptyDoubleList();
      private int remoteReqsDurationMemoizedSerializedSize = -1;
      public static final int SHUFFLE_PUSH_READ_METRICS_DIST_FIELD_NUMBER = 10;
      private ShufflePushReadMetricDistributions shufflePushReadMetricsDist_;
      private byte memoizedIsInitialized = -1;
      private static final ShuffleReadMetricDistributions DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ShuffleReadMetricDistributions(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ShuffleReadMetricDistributions() {
         this.readBytes_ = emptyDoubleList();
         this.readRecords_ = emptyDoubleList();
         this.remoteBlocksFetched_ = emptyDoubleList();
         this.localBlocksFetched_ = emptyDoubleList();
         this.fetchWaitTime_ = emptyDoubleList();
         this.remoteBytesRead_ = emptyDoubleList();
         this.remoteBytesReadToDisk_ = emptyDoubleList();
         this.totalBlocksFetched_ = emptyDoubleList();
         this.remoteReqsDuration_ = emptyDoubleList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleReadMetricDistributions_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleReadMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(ShuffleReadMetricDistributions.class, Builder.class);
      }

      public List getReadBytesList() {
         return this.readBytes_;
      }

      public int getReadBytesCount() {
         return this.readBytes_.size();
      }

      public double getReadBytes(int index) {
         return this.readBytes_.getDouble(index);
      }

      public List getReadRecordsList() {
         return this.readRecords_;
      }

      public int getReadRecordsCount() {
         return this.readRecords_.size();
      }

      public double getReadRecords(int index) {
         return this.readRecords_.getDouble(index);
      }

      public List getRemoteBlocksFetchedList() {
         return this.remoteBlocksFetched_;
      }

      public int getRemoteBlocksFetchedCount() {
         return this.remoteBlocksFetched_.size();
      }

      public double getRemoteBlocksFetched(int index) {
         return this.remoteBlocksFetched_.getDouble(index);
      }

      public List getLocalBlocksFetchedList() {
         return this.localBlocksFetched_;
      }

      public int getLocalBlocksFetchedCount() {
         return this.localBlocksFetched_.size();
      }

      public double getLocalBlocksFetched(int index) {
         return this.localBlocksFetched_.getDouble(index);
      }

      public List getFetchWaitTimeList() {
         return this.fetchWaitTime_;
      }

      public int getFetchWaitTimeCount() {
         return this.fetchWaitTime_.size();
      }

      public double getFetchWaitTime(int index) {
         return this.fetchWaitTime_.getDouble(index);
      }

      public List getRemoteBytesReadList() {
         return this.remoteBytesRead_;
      }

      public int getRemoteBytesReadCount() {
         return this.remoteBytesRead_.size();
      }

      public double getRemoteBytesRead(int index) {
         return this.remoteBytesRead_.getDouble(index);
      }

      public List getRemoteBytesReadToDiskList() {
         return this.remoteBytesReadToDisk_;
      }

      public int getRemoteBytesReadToDiskCount() {
         return this.remoteBytesReadToDisk_.size();
      }

      public double getRemoteBytesReadToDisk(int index) {
         return this.remoteBytesReadToDisk_.getDouble(index);
      }

      public List getTotalBlocksFetchedList() {
         return this.totalBlocksFetched_;
      }

      public int getTotalBlocksFetchedCount() {
         return this.totalBlocksFetched_.size();
      }

      public double getTotalBlocksFetched(int index) {
         return this.totalBlocksFetched_.getDouble(index);
      }

      public List getRemoteReqsDurationList() {
         return this.remoteReqsDuration_;
      }

      public int getRemoteReqsDurationCount() {
         return this.remoteReqsDuration_.size();
      }

      public double getRemoteReqsDuration(int index) {
         return this.remoteReqsDuration_.getDouble(index);
      }

      public boolean hasShufflePushReadMetricsDist() {
         return (this.bitField0_ & 1) != 0;
      }

      public ShufflePushReadMetricDistributions getShufflePushReadMetricsDist() {
         return this.shufflePushReadMetricsDist_ == null ? StoreTypes.ShufflePushReadMetricDistributions.getDefaultInstance() : this.shufflePushReadMetricsDist_;
      }

      public ShufflePushReadMetricDistributionsOrBuilder getShufflePushReadMetricsDistOrBuilder() {
         return this.shufflePushReadMetricsDist_ == null ? StoreTypes.ShufflePushReadMetricDistributions.getDefaultInstance() : this.shufflePushReadMetricsDist_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if (this.getReadBytesList().size() > 0) {
            output.writeUInt32NoTag(10);
            output.writeUInt32NoTag(this.readBytesMemoizedSerializedSize);
         }

         for(int i = 0; i < this.readBytes_.size(); ++i) {
            output.writeDoubleNoTag(this.readBytes_.getDouble(i));
         }

         if (this.getReadRecordsList().size() > 0) {
            output.writeUInt32NoTag(18);
            output.writeUInt32NoTag(this.readRecordsMemoizedSerializedSize);
         }

         for(int i = 0; i < this.readRecords_.size(); ++i) {
            output.writeDoubleNoTag(this.readRecords_.getDouble(i));
         }

         if (this.getRemoteBlocksFetchedList().size() > 0) {
            output.writeUInt32NoTag(26);
            output.writeUInt32NoTag(this.remoteBlocksFetchedMemoizedSerializedSize);
         }

         for(int i = 0; i < this.remoteBlocksFetched_.size(); ++i) {
            output.writeDoubleNoTag(this.remoteBlocksFetched_.getDouble(i));
         }

         if (this.getLocalBlocksFetchedList().size() > 0) {
            output.writeUInt32NoTag(34);
            output.writeUInt32NoTag(this.localBlocksFetchedMemoizedSerializedSize);
         }

         for(int i = 0; i < this.localBlocksFetched_.size(); ++i) {
            output.writeDoubleNoTag(this.localBlocksFetched_.getDouble(i));
         }

         if (this.getFetchWaitTimeList().size() > 0) {
            output.writeUInt32NoTag(42);
            output.writeUInt32NoTag(this.fetchWaitTimeMemoizedSerializedSize);
         }

         for(int i = 0; i < this.fetchWaitTime_.size(); ++i) {
            output.writeDoubleNoTag(this.fetchWaitTime_.getDouble(i));
         }

         if (this.getRemoteBytesReadList().size() > 0) {
            output.writeUInt32NoTag(50);
            output.writeUInt32NoTag(this.remoteBytesReadMemoizedSerializedSize);
         }

         for(int i = 0; i < this.remoteBytesRead_.size(); ++i) {
            output.writeDoubleNoTag(this.remoteBytesRead_.getDouble(i));
         }

         if (this.getRemoteBytesReadToDiskList().size() > 0) {
            output.writeUInt32NoTag(58);
            output.writeUInt32NoTag(this.remoteBytesReadToDiskMemoizedSerializedSize);
         }

         for(int i = 0; i < this.remoteBytesReadToDisk_.size(); ++i) {
            output.writeDoubleNoTag(this.remoteBytesReadToDisk_.getDouble(i));
         }

         if (this.getTotalBlocksFetchedList().size() > 0) {
            output.writeUInt32NoTag(66);
            output.writeUInt32NoTag(this.totalBlocksFetchedMemoizedSerializedSize);
         }

         for(int i = 0; i < this.totalBlocksFetched_.size(); ++i) {
            output.writeDoubleNoTag(this.totalBlocksFetched_.getDouble(i));
         }

         if (this.getRemoteReqsDurationList().size() > 0) {
            output.writeUInt32NoTag(74);
            output.writeUInt32NoTag(this.remoteReqsDurationMemoizedSerializedSize);
         }

         for(int i = 0; i < this.remoteReqsDuration_.size(); ++i) {
            output.writeDoubleNoTag(this.remoteReqsDuration_.getDouble(i));
         }

         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(10, this.getShufflePushReadMetricsDist());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            int dataSize = 0;
            dataSize = 8 * this.getReadBytesList().size();
            size += dataSize;
            if (!this.getReadBytesList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.readBytesMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getReadRecordsList().size();
            size += dataSize;
            if (!this.getReadRecordsList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.readRecordsMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getRemoteBlocksFetchedList().size();
            size += dataSize;
            if (!this.getRemoteBlocksFetchedList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.remoteBlocksFetchedMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getLocalBlocksFetchedList().size();
            size += dataSize;
            if (!this.getLocalBlocksFetchedList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.localBlocksFetchedMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getFetchWaitTimeList().size();
            size += dataSize;
            if (!this.getFetchWaitTimeList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.fetchWaitTimeMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getRemoteBytesReadList().size();
            size += dataSize;
            if (!this.getRemoteBytesReadList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.remoteBytesReadMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getRemoteBytesReadToDiskList().size();
            size += dataSize;
            if (!this.getRemoteBytesReadToDiskList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.remoteBytesReadToDiskMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getTotalBlocksFetchedList().size();
            size += dataSize;
            if (!this.getTotalBlocksFetchedList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.totalBlocksFetchedMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getRemoteReqsDurationList().size();
            size += dataSize;
            if (!this.getRemoteReqsDurationList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.remoteReqsDurationMemoizedSerializedSize = dataSize;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(10, this.getShufflePushReadMetricsDist());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ShuffleReadMetricDistributions)) {
            return super.equals(obj);
         } else {
            ShuffleReadMetricDistributions other = (ShuffleReadMetricDistributions)obj;
            if (!this.getReadBytesList().equals(other.getReadBytesList())) {
               return false;
            } else if (!this.getReadRecordsList().equals(other.getReadRecordsList())) {
               return false;
            } else if (!this.getRemoteBlocksFetchedList().equals(other.getRemoteBlocksFetchedList())) {
               return false;
            } else if (!this.getLocalBlocksFetchedList().equals(other.getLocalBlocksFetchedList())) {
               return false;
            } else if (!this.getFetchWaitTimeList().equals(other.getFetchWaitTimeList())) {
               return false;
            } else if (!this.getRemoteBytesReadList().equals(other.getRemoteBytesReadList())) {
               return false;
            } else if (!this.getRemoteBytesReadToDiskList().equals(other.getRemoteBytesReadToDiskList())) {
               return false;
            } else if (!this.getTotalBlocksFetchedList().equals(other.getTotalBlocksFetchedList())) {
               return false;
            } else if (!this.getRemoteReqsDurationList().equals(other.getRemoteReqsDurationList())) {
               return false;
            } else if (this.hasShufflePushReadMetricsDist() != other.hasShufflePushReadMetricsDist()) {
               return false;
            } else if (this.hasShufflePushReadMetricsDist() && !this.getShufflePushReadMetricsDist().equals(other.getShufflePushReadMetricsDist())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.getReadBytesCount() > 0) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getReadBytesList().hashCode();
            }

            if (this.getReadRecordsCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getReadRecordsList().hashCode();
            }

            if (this.getRemoteBlocksFetchedCount() > 0) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getRemoteBlocksFetchedList().hashCode();
            }

            if (this.getLocalBlocksFetchedCount() > 0) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getLocalBlocksFetchedList().hashCode();
            }

            if (this.getFetchWaitTimeCount() > 0) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getFetchWaitTimeList().hashCode();
            }

            if (this.getRemoteBytesReadCount() > 0) {
               hash = 37 * hash + 6;
               hash = 53 * hash + this.getRemoteBytesReadList().hashCode();
            }

            if (this.getRemoteBytesReadToDiskCount() > 0) {
               hash = 37 * hash + 7;
               hash = 53 * hash + this.getRemoteBytesReadToDiskList().hashCode();
            }

            if (this.getTotalBlocksFetchedCount() > 0) {
               hash = 37 * hash + 8;
               hash = 53 * hash + this.getTotalBlocksFetchedList().hashCode();
            }

            if (this.getRemoteReqsDurationCount() > 0) {
               hash = 37 * hash + 9;
               hash = 53 * hash + this.getRemoteReqsDurationList().hashCode();
            }

            if (this.hasShufflePushReadMetricsDist()) {
               hash = 37 * hash + 10;
               hash = 53 * hash + this.getShufflePushReadMetricsDist().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ShuffleReadMetricDistributions parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ShuffleReadMetricDistributions)PARSER.parseFrom(data);
      }

      public static ShuffleReadMetricDistributions parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleReadMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleReadMetricDistributions parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ShuffleReadMetricDistributions)PARSER.parseFrom(data);
      }

      public static ShuffleReadMetricDistributions parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleReadMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleReadMetricDistributions parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ShuffleReadMetricDistributions)PARSER.parseFrom(data);
      }

      public static ShuffleReadMetricDistributions parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleReadMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleReadMetricDistributions parseFrom(InputStream input) throws IOException {
         return (ShuffleReadMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShuffleReadMetricDistributions parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleReadMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShuffleReadMetricDistributions parseDelimitedFrom(InputStream input) throws IOException {
         return (ShuffleReadMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ShuffleReadMetricDistributions parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleReadMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShuffleReadMetricDistributions parseFrom(CodedInputStream input) throws IOException {
         return (ShuffleReadMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShuffleReadMetricDistributions parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleReadMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ShuffleReadMetricDistributions prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ShuffleReadMetricDistributions getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ShuffleReadMetricDistributions getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ShuffleReadMetricDistributions.class.getName());
         DEFAULT_INSTANCE = new ShuffleReadMetricDistributions();
         PARSER = new AbstractParser() {
            public ShuffleReadMetricDistributions parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ShuffleReadMetricDistributions.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ShuffleReadMetricDistributionsOrBuilder {
         private int bitField0_;
         private Internal.DoubleList readBytes_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList readRecords_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList remoteBlocksFetched_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList localBlocksFetched_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList fetchWaitTime_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList remoteBytesRead_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList remoteBytesReadToDisk_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList totalBlocksFetched_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
         private Internal.DoubleList remoteReqsDuration_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
         private ShufflePushReadMetricDistributions shufflePushReadMetricsDist_;
         private SingleFieldBuilder shufflePushReadMetricsDistBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleReadMetricDistributions_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleReadMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(ShuffleReadMetricDistributions.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ShuffleReadMetricDistributions.alwaysUseFieldBuilders) {
               this.getShufflePushReadMetricsDistFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.readBytes_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.readRecords_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.remoteBlocksFetched_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.localBlocksFetched_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.fetchWaitTime_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.remoteBytesRead_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.remoteBytesReadToDisk_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.totalBlocksFetched_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.remoteReqsDuration_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.shufflePushReadMetricsDist_ = null;
            if (this.shufflePushReadMetricsDistBuilder_ != null) {
               this.shufflePushReadMetricsDistBuilder_.dispose();
               this.shufflePushReadMetricsDistBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleReadMetricDistributions_descriptor;
         }

         public ShuffleReadMetricDistributions getDefaultInstanceForType() {
            return StoreTypes.ShuffleReadMetricDistributions.getDefaultInstance();
         }

         public ShuffleReadMetricDistributions build() {
            ShuffleReadMetricDistributions result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ShuffleReadMetricDistributions buildPartial() {
            ShuffleReadMetricDistributions result = new ShuffleReadMetricDistributions(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ShuffleReadMetricDistributions result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               this.readBytes_.makeImmutable();
               result.readBytes_ = this.readBytes_;
            }

            if ((from_bitField0_ & 2) != 0) {
               this.readRecords_.makeImmutable();
               result.readRecords_ = this.readRecords_;
            }

            if ((from_bitField0_ & 4) != 0) {
               this.remoteBlocksFetched_.makeImmutable();
               result.remoteBlocksFetched_ = this.remoteBlocksFetched_;
            }

            if ((from_bitField0_ & 8) != 0) {
               this.localBlocksFetched_.makeImmutable();
               result.localBlocksFetched_ = this.localBlocksFetched_;
            }

            if ((from_bitField0_ & 16) != 0) {
               this.fetchWaitTime_.makeImmutable();
               result.fetchWaitTime_ = this.fetchWaitTime_;
            }

            if ((from_bitField0_ & 32) != 0) {
               this.remoteBytesRead_.makeImmutable();
               result.remoteBytesRead_ = this.remoteBytesRead_;
            }

            if ((from_bitField0_ & 64) != 0) {
               this.remoteBytesReadToDisk_.makeImmutable();
               result.remoteBytesReadToDisk_ = this.remoteBytesReadToDisk_;
            }

            if ((from_bitField0_ & 128) != 0) {
               this.totalBlocksFetched_.makeImmutable();
               result.totalBlocksFetched_ = this.totalBlocksFetched_;
            }

            if ((from_bitField0_ & 256) != 0) {
               this.remoteReqsDuration_.makeImmutable();
               result.remoteReqsDuration_ = this.remoteReqsDuration_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 512) != 0) {
               result.shufflePushReadMetricsDist_ = this.shufflePushReadMetricsDistBuilder_ == null ? this.shufflePushReadMetricsDist_ : (ShufflePushReadMetricDistributions)this.shufflePushReadMetricsDistBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ShuffleReadMetricDistributions) {
               return this.mergeFrom((ShuffleReadMetricDistributions)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ShuffleReadMetricDistributions other) {
            if (other == StoreTypes.ShuffleReadMetricDistributions.getDefaultInstance()) {
               return this;
            } else {
               if (!other.readBytes_.isEmpty()) {
                  if (this.readBytes_.isEmpty()) {
                     this.readBytes_ = other.readBytes_;
                     this.readBytes_.makeImmutable();
                     this.bitField0_ |= 1;
                  } else {
                     this.ensureReadBytesIsMutable();
                     this.readBytes_.addAll(other.readBytes_);
                  }

                  this.onChanged();
               }

               if (!other.readRecords_.isEmpty()) {
                  if (this.readRecords_.isEmpty()) {
                     this.readRecords_ = other.readRecords_;
                     this.readRecords_.makeImmutable();
                     this.bitField0_ |= 2;
                  } else {
                     this.ensureReadRecordsIsMutable();
                     this.readRecords_.addAll(other.readRecords_);
                  }

                  this.onChanged();
               }

               if (!other.remoteBlocksFetched_.isEmpty()) {
                  if (this.remoteBlocksFetched_.isEmpty()) {
                     this.remoteBlocksFetched_ = other.remoteBlocksFetched_;
                     this.remoteBlocksFetched_.makeImmutable();
                     this.bitField0_ |= 4;
                  } else {
                     this.ensureRemoteBlocksFetchedIsMutable();
                     this.remoteBlocksFetched_.addAll(other.remoteBlocksFetched_);
                  }

                  this.onChanged();
               }

               if (!other.localBlocksFetched_.isEmpty()) {
                  if (this.localBlocksFetched_.isEmpty()) {
                     this.localBlocksFetched_ = other.localBlocksFetched_;
                     this.localBlocksFetched_.makeImmutable();
                     this.bitField0_ |= 8;
                  } else {
                     this.ensureLocalBlocksFetchedIsMutable();
                     this.localBlocksFetched_.addAll(other.localBlocksFetched_);
                  }

                  this.onChanged();
               }

               if (!other.fetchWaitTime_.isEmpty()) {
                  if (this.fetchWaitTime_.isEmpty()) {
                     this.fetchWaitTime_ = other.fetchWaitTime_;
                     this.fetchWaitTime_.makeImmutable();
                     this.bitField0_ |= 16;
                  } else {
                     this.ensureFetchWaitTimeIsMutable();
                     this.fetchWaitTime_.addAll(other.fetchWaitTime_);
                  }

                  this.onChanged();
               }

               if (!other.remoteBytesRead_.isEmpty()) {
                  if (this.remoteBytesRead_.isEmpty()) {
                     this.remoteBytesRead_ = other.remoteBytesRead_;
                     this.remoteBytesRead_.makeImmutable();
                     this.bitField0_ |= 32;
                  } else {
                     this.ensureRemoteBytesReadIsMutable();
                     this.remoteBytesRead_.addAll(other.remoteBytesRead_);
                  }

                  this.onChanged();
               }

               if (!other.remoteBytesReadToDisk_.isEmpty()) {
                  if (this.remoteBytesReadToDisk_.isEmpty()) {
                     this.remoteBytesReadToDisk_ = other.remoteBytesReadToDisk_;
                     this.remoteBytesReadToDisk_.makeImmutable();
                     this.bitField0_ |= 64;
                  } else {
                     this.ensureRemoteBytesReadToDiskIsMutable();
                     this.remoteBytesReadToDisk_.addAll(other.remoteBytesReadToDisk_);
                  }

                  this.onChanged();
               }

               if (!other.totalBlocksFetched_.isEmpty()) {
                  if (this.totalBlocksFetched_.isEmpty()) {
                     this.totalBlocksFetched_ = other.totalBlocksFetched_;
                     this.totalBlocksFetched_.makeImmutable();
                     this.bitField0_ |= 128;
                  } else {
                     this.ensureTotalBlocksFetchedIsMutable();
                     this.totalBlocksFetched_.addAll(other.totalBlocksFetched_);
                  }

                  this.onChanged();
               }

               if (!other.remoteReqsDuration_.isEmpty()) {
                  if (this.remoteReqsDuration_.isEmpty()) {
                     this.remoteReqsDuration_ = other.remoteReqsDuration_;
                     this.remoteReqsDuration_.makeImmutable();
                     this.bitField0_ |= 256;
                  } else {
                     this.ensureRemoteReqsDurationIsMutable();
                     this.remoteReqsDuration_.addAll(other.remoteReqsDuration_);
                  }

                  this.onChanged();
               }

               if (other.hasShufflePushReadMetricsDist()) {
                  this.mergeShufflePushReadMetricsDist(other.getShufflePushReadMetricsDist());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 48:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 79:
                        case 80:
                        case 81:
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                           break;
                        case 9:
                           double v = input.readDouble();
                           this.ensureReadBytesIsMutable();
                           this.readBytes_.addDouble(v);
                           break;
                        case 10:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureReadBytesIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.readBytes_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 17:
                           double v = input.readDouble();
                           this.ensureReadRecordsIsMutable();
                           this.readRecords_.addDouble(v);
                           break;
                        case 18:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureReadRecordsIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.readRecords_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 25:
                           double v = input.readDouble();
                           this.ensureRemoteBlocksFetchedIsMutable();
                           this.remoteBlocksFetched_.addDouble(v);
                           break;
                        case 26:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureRemoteBlocksFetchedIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.remoteBlocksFetched_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 33:
                           double v = input.readDouble();
                           this.ensureLocalBlocksFetchedIsMutable();
                           this.localBlocksFetched_.addDouble(v);
                           break;
                        case 34:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureLocalBlocksFetchedIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.localBlocksFetched_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 41:
                           double v = input.readDouble();
                           this.ensureFetchWaitTimeIsMutable();
                           this.fetchWaitTime_.addDouble(v);
                           break;
                        case 42:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureFetchWaitTimeIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.fetchWaitTime_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 49:
                           double v = input.readDouble();
                           this.ensureRemoteBytesReadIsMutable();
                           this.remoteBytesRead_.addDouble(v);
                           break;
                        case 50:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureRemoteBytesReadIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.remoteBytesRead_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 57:
                           double v = input.readDouble();
                           this.ensureRemoteBytesReadToDiskIsMutable();
                           this.remoteBytesReadToDisk_.addDouble(v);
                           break;
                        case 58:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureRemoteBytesReadToDiskIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.remoteBytesReadToDisk_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 65:
                           double v = input.readDouble();
                           this.ensureTotalBlocksFetchedIsMutable();
                           this.totalBlocksFetched_.addDouble(v);
                           break;
                        case 66:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureTotalBlocksFetchedIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.totalBlocksFetched_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 73:
                           double v = input.readDouble();
                           this.ensureRemoteReqsDurationIsMutable();
                           this.remoteReqsDuration_.addDouble(v);
                           break;
                        case 74:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureRemoteReqsDurationIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.remoteReqsDuration_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 82:
                           input.readMessage((MessageLite.Builder)this.getShufflePushReadMetricsDistFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 512;
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         private void ensureReadBytesIsMutable() {
            if (!this.readBytes_.isModifiable()) {
               this.readBytes_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.readBytes_);
            }

            this.bitField0_ |= 1;
         }

         private void ensureReadBytesIsMutable(int capacity) {
            if (!this.readBytes_.isModifiable()) {
               this.readBytes_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.readBytes_, capacity);
            }

            this.bitField0_ |= 1;
         }

         public List getReadBytesList() {
            this.readBytes_.makeImmutable();
            return this.readBytes_;
         }

         public int getReadBytesCount() {
            return this.readBytes_.size();
         }

         public double getReadBytes(int index) {
            return this.readBytes_.getDouble(index);
         }

         public Builder setReadBytes(int index, double value) {
            this.ensureReadBytesIsMutable();
            this.readBytes_.setDouble(index, value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addReadBytes(double value) {
            this.ensureReadBytesIsMutable();
            this.readBytes_.addDouble(value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addAllReadBytes(Iterable values) {
            this.ensureReadBytesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.readBytes_);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearReadBytes() {
            this.readBytes_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         private void ensureReadRecordsIsMutable() {
            if (!this.readRecords_.isModifiable()) {
               this.readRecords_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.readRecords_);
            }

            this.bitField0_ |= 2;
         }

         private void ensureReadRecordsIsMutable(int capacity) {
            if (!this.readRecords_.isModifiable()) {
               this.readRecords_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.readRecords_, capacity);
            }

            this.bitField0_ |= 2;
         }

         public List getReadRecordsList() {
            this.readRecords_.makeImmutable();
            return this.readRecords_;
         }

         public int getReadRecordsCount() {
            return this.readRecords_.size();
         }

         public double getReadRecords(int index) {
            return this.readRecords_.getDouble(index);
         }

         public Builder setReadRecords(int index, double value) {
            this.ensureReadRecordsIsMutable();
            this.readRecords_.setDouble(index, value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addReadRecords(double value) {
            this.ensureReadRecordsIsMutable();
            this.readRecords_.addDouble(value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addAllReadRecords(Iterable values) {
            this.ensureReadRecordsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.readRecords_);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearReadRecords() {
            this.readRecords_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         private void ensureRemoteBlocksFetchedIsMutable() {
            if (!this.remoteBlocksFetched_.isModifiable()) {
               this.remoteBlocksFetched_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.remoteBlocksFetched_);
            }

            this.bitField0_ |= 4;
         }

         private void ensureRemoteBlocksFetchedIsMutable(int capacity) {
            if (!this.remoteBlocksFetched_.isModifiable()) {
               this.remoteBlocksFetched_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.remoteBlocksFetched_, capacity);
            }

            this.bitField0_ |= 4;
         }

         public List getRemoteBlocksFetchedList() {
            this.remoteBlocksFetched_.makeImmutable();
            return this.remoteBlocksFetched_;
         }

         public int getRemoteBlocksFetchedCount() {
            return this.remoteBlocksFetched_.size();
         }

         public double getRemoteBlocksFetched(int index) {
            return this.remoteBlocksFetched_.getDouble(index);
         }

         public Builder setRemoteBlocksFetched(int index, double value) {
            this.ensureRemoteBlocksFetchedIsMutable();
            this.remoteBlocksFetched_.setDouble(index, value);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder addRemoteBlocksFetched(double value) {
            this.ensureRemoteBlocksFetchedIsMutable();
            this.remoteBlocksFetched_.addDouble(value);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder addAllRemoteBlocksFetched(Iterable values) {
            this.ensureRemoteBlocksFetchedIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.remoteBlocksFetched_);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteBlocksFetched() {
            this.remoteBlocksFetched_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         private void ensureLocalBlocksFetchedIsMutable() {
            if (!this.localBlocksFetched_.isModifiable()) {
               this.localBlocksFetched_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.localBlocksFetched_);
            }

            this.bitField0_ |= 8;
         }

         private void ensureLocalBlocksFetchedIsMutable(int capacity) {
            if (!this.localBlocksFetched_.isModifiable()) {
               this.localBlocksFetched_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.localBlocksFetched_, capacity);
            }

            this.bitField0_ |= 8;
         }

         public List getLocalBlocksFetchedList() {
            this.localBlocksFetched_.makeImmutable();
            return this.localBlocksFetched_;
         }

         public int getLocalBlocksFetchedCount() {
            return this.localBlocksFetched_.size();
         }

         public double getLocalBlocksFetched(int index) {
            return this.localBlocksFetched_.getDouble(index);
         }

         public Builder setLocalBlocksFetched(int index, double value) {
            this.ensureLocalBlocksFetchedIsMutable();
            this.localBlocksFetched_.setDouble(index, value);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder addLocalBlocksFetched(double value) {
            this.ensureLocalBlocksFetchedIsMutable();
            this.localBlocksFetched_.addDouble(value);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder addAllLocalBlocksFetched(Iterable values) {
            this.ensureLocalBlocksFetchedIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.localBlocksFetched_);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearLocalBlocksFetched() {
            this.localBlocksFetched_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -9;
            this.onChanged();
            return this;
         }

         private void ensureFetchWaitTimeIsMutable() {
            if (!this.fetchWaitTime_.isModifiable()) {
               this.fetchWaitTime_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.fetchWaitTime_);
            }

            this.bitField0_ |= 16;
         }

         private void ensureFetchWaitTimeIsMutable(int capacity) {
            if (!this.fetchWaitTime_.isModifiable()) {
               this.fetchWaitTime_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.fetchWaitTime_, capacity);
            }

            this.bitField0_ |= 16;
         }

         public List getFetchWaitTimeList() {
            this.fetchWaitTime_.makeImmutable();
            return this.fetchWaitTime_;
         }

         public int getFetchWaitTimeCount() {
            return this.fetchWaitTime_.size();
         }

         public double getFetchWaitTime(int index) {
            return this.fetchWaitTime_.getDouble(index);
         }

         public Builder setFetchWaitTime(int index, double value) {
            this.ensureFetchWaitTimeIsMutable();
            this.fetchWaitTime_.setDouble(index, value);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder addFetchWaitTime(double value) {
            this.ensureFetchWaitTimeIsMutable();
            this.fetchWaitTime_.addDouble(value);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder addAllFetchWaitTime(Iterable values) {
            this.ensureFetchWaitTimeIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.fetchWaitTime_);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearFetchWaitTime() {
            this.fetchWaitTime_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -17;
            this.onChanged();
            return this;
         }

         private void ensureRemoteBytesReadIsMutable() {
            if (!this.remoteBytesRead_.isModifiable()) {
               this.remoteBytesRead_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.remoteBytesRead_);
            }

            this.bitField0_ |= 32;
         }

         private void ensureRemoteBytesReadIsMutable(int capacity) {
            if (!this.remoteBytesRead_.isModifiable()) {
               this.remoteBytesRead_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.remoteBytesRead_, capacity);
            }

            this.bitField0_ |= 32;
         }

         public List getRemoteBytesReadList() {
            this.remoteBytesRead_.makeImmutable();
            return this.remoteBytesRead_;
         }

         public int getRemoteBytesReadCount() {
            return this.remoteBytesRead_.size();
         }

         public double getRemoteBytesRead(int index) {
            return this.remoteBytesRead_.getDouble(index);
         }

         public Builder setRemoteBytesRead(int index, double value) {
            this.ensureRemoteBytesReadIsMutable();
            this.remoteBytesRead_.setDouble(index, value);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder addRemoteBytesRead(double value) {
            this.ensureRemoteBytesReadIsMutable();
            this.remoteBytesRead_.addDouble(value);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder addAllRemoteBytesRead(Iterable values) {
            this.ensureRemoteBytesReadIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.remoteBytesRead_);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteBytesRead() {
            this.remoteBytesRead_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -33;
            this.onChanged();
            return this;
         }

         private void ensureRemoteBytesReadToDiskIsMutable() {
            if (!this.remoteBytesReadToDisk_.isModifiable()) {
               this.remoteBytesReadToDisk_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.remoteBytesReadToDisk_);
            }

            this.bitField0_ |= 64;
         }

         private void ensureRemoteBytesReadToDiskIsMutable(int capacity) {
            if (!this.remoteBytesReadToDisk_.isModifiable()) {
               this.remoteBytesReadToDisk_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.remoteBytesReadToDisk_, capacity);
            }

            this.bitField0_ |= 64;
         }

         public List getRemoteBytesReadToDiskList() {
            this.remoteBytesReadToDisk_.makeImmutable();
            return this.remoteBytesReadToDisk_;
         }

         public int getRemoteBytesReadToDiskCount() {
            return this.remoteBytesReadToDisk_.size();
         }

         public double getRemoteBytesReadToDisk(int index) {
            return this.remoteBytesReadToDisk_.getDouble(index);
         }

         public Builder setRemoteBytesReadToDisk(int index, double value) {
            this.ensureRemoteBytesReadToDiskIsMutable();
            this.remoteBytesReadToDisk_.setDouble(index, value);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder addRemoteBytesReadToDisk(double value) {
            this.ensureRemoteBytesReadToDiskIsMutable();
            this.remoteBytesReadToDisk_.addDouble(value);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder addAllRemoteBytesReadToDisk(Iterable values) {
            this.ensureRemoteBytesReadToDiskIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.remoteBytesReadToDisk_);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteBytesReadToDisk() {
            this.remoteBytesReadToDisk_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -65;
            this.onChanged();
            return this;
         }

         private void ensureTotalBlocksFetchedIsMutable() {
            if (!this.totalBlocksFetched_.isModifiable()) {
               this.totalBlocksFetched_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.totalBlocksFetched_);
            }

            this.bitField0_ |= 128;
         }

         private void ensureTotalBlocksFetchedIsMutable(int capacity) {
            if (!this.totalBlocksFetched_.isModifiable()) {
               this.totalBlocksFetched_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.totalBlocksFetched_, capacity);
            }

            this.bitField0_ |= 128;
         }

         public List getTotalBlocksFetchedList() {
            this.totalBlocksFetched_.makeImmutable();
            return this.totalBlocksFetched_;
         }

         public int getTotalBlocksFetchedCount() {
            return this.totalBlocksFetched_.size();
         }

         public double getTotalBlocksFetched(int index) {
            return this.totalBlocksFetched_.getDouble(index);
         }

         public Builder setTotalBlocksFetched(int index, double value) {
            this.ensureTotalBlocksFetchedIsMutable();
            this.totalBlocksFetched_.setDouble(index, value);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder addTotalBlocksFetched(double value) {
            this.ensureTotalBlocksFetchedIsMutable();
            this.totalBlocksFetched_.addDouble(value);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder addAllTotalBlocksFetched(Iterable values) {
            this.ensureTotalBlocksFetchedIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.totalBlocksFetched_);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearTotalBlocksFetched() {
            this.totalBlocksFetched_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -129;
            this.onChanged();
            return this;
         }

         private void ensureRemoteReqsDurationIsMutable() {
            if (!this.remoteReqsDuration_.isModifiable()) {
               this.remoteReqsDuration_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.remoteReqsDuration_);
            }

            this.bitField0_ |= 256;
         }

         private void ensureRemoteReqsDurationIsMutable(int capacity) {
            if (!this.remoteReqsDuration_.isModifiable()) {
               this.remoteReqsDuration_ = (Internal.DoubleList)StoreTypes.ShuffleReadMetricDistributions.makeMutableCopy(this.remoteReqsDuration_, capacity);
            }

            this.bitField0_ |= 256;
         }

         public List getRemoteReqsDurationList() {
            this.remoteReqsDuration_.makeImmutable();
            return this.remoteReqsDuration_;
         }

         public int getRemoteReqsDurationCount() {
            return this.remoteReqsDuration_.size();
         }

         public double getRemoteReqsDuration(int index) {
            return this.remoteReqsDuration_.getDouble(index);
         }

         public Builder setRemoteReqsDuration(int index, double value) {
            this.ensureRemoteReqsDurationIsMutable();
            this.remoteReqsDuration_.setDouble(index, value);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder addRemoteReqsDuration(double value) {
            this.ensureRemoteReqsDurationIsMutable();
            this.remoteReqsDuration_.addDouble(value);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder addAllRemoteReqsDuration(Iterable values) {
            this.ensureRemoteReqsDurationIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.remoteReqsDuration_);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteReqsDuration() {
            this.remoteReqsDuration_ = StoreTypes.ShuffleReadMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -257;
            this.onChanged();
            return this;
         }

         public boolean hasShufflePushReadMetricsDist() {
            return (this.bitField0_ & 512) != 0;
         }

         public ShufflePushReadMetricDistributions getShufflePushReadMetricsDist() {
            if (this.shufflePushReadMetricsDistBuilder_ == null) {
               return this.shufflePushReadMetricsDist_ == null ? StoreTypes.ShufflePushReadMetricDistributions.getDefaultInstance() : this.shufflePushReadMetricsDist_;
            } else {
               return (ShufflePushReadMetricDistributions)this.shufflePushReadMetricsDistBuilder_.getMessage();
            }
         }

         public Builder setShufflePushReadMetricsDist(ShufflePushReadMetricDistributions value) {
            if (this.shufflePushReadMetricsDistBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.shufflePushReadMetricsDist_ = value;
            } else {
               this.shufflePushReadMetricsDistBuilder_.setMessage(value);
            }

            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder setShufflePushReadMetricsDist(ShufflePushReadMetricDistributions.Builder builderForValue) {
            if (this.shufflePushReadMetricsDistBuilder_ == null) {
               this.shufflePushReadMetricsDist_ = builderForValue.build();
            } else {
               this.shufflePushReadMetricsDistBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder mergeShufflePushReadMetricsDist(ShufflePushReadMetricDistributions value) {
            if (this.shufflePushReadMetricsDistBuilder_ == null) {
               if ((this.bitField0_ & 512) != 0 && this.shufflePushReadMetricsDist_ != null && this.shufflePushReadMetricsDist_ != StoreTypes.ShufflePushReadMetricDistributions.getDefaultInstance()) {
                  this.getShufflePushReadMetricsDistBuilder().mergeFrom(value);
               } else {
                  this.shufflePushReadMetricsDist_ = value;
               }
            } else {
               this.shufflePushReadMetricsDistBuilder_.mergeFrom(value);
            }

            if (this.shufflePushReadMetricsDist_ != null) {
               this.bitField0_ |= 512;
               this.onChanged();
            }

            return this;
         }

         public Builder clearShufflePushReadMetricsDist() {
            this.bitField0_ &= -513;
            this.shufflePushReadMetricsDist_ = null;
            if (this.shufflePushReadMetricsDistBuilder_ != null) {
               this.shufflePushReadMetricsDistBuilder_.dispose();
               this.shufflePushReadMetricsDistBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ShufflePushReadMetricDistributions.Builder getShufflePushReadMetricsDistBuilder() {
            this.bitField0_ |= 512;
            this.onChanged();
            return (ShufflePushReadMetricDistributions.Builder)this.getShufflePushReadMetricsDistFieldBuilder().getBuilder();
         }

         public ShufflePushReadMetricDistributionsOrBuilder getShufflePushReadMetricsDistOrBuilder() {
            if (this.shufflePushReadMetricsDistBuilder_ != null) {
               return (ShufflePushReadMetricDistributionsOrBuilder)this.shufflePushReadMetricsDistBuilder_.getMessageOrBuilder();
            } else {
               return this.shufflePushReadMetricsDist_ == null ? StoreTypes.ShufflePushReadMetricDistributions.getDefaultInstance() : this.shufflePushReadMetricsDist_;
            }
         }

         private SingleFieldBuilder getShufflePushReadMetricsDistFieldBuilder() {
            if (this.shufflePushReadMetricsDistBuilder_ == null) {
               this.shufflePushReadMetricsDistBuilder_ = new SingleFieldBuilder(this.getShufflePushReadMetricsDist(), this.getParentForChildren(), this.isClean());
               this.shufflePushReadMetricsDist_ = null;
            }

            return this.shufflePushReadMetricsDistBuilder_;
         }
      }
   }

   public interface ShuffleReadMetricDistributionsOrBuilder extends MessageOrBuilder {
      List getReadBytesList();

      int getReadBytesCount();

      double getReadBytes(int var1);

      List getReadRecordsList();

      int getReadRecordsCount();

      double getReadRecords(int var1);

      List getRemoteBlocksFetchedList();

      int getRemoteBlocksFetchedCount();

      double getRemoteBlocksFetched(int var1);

      List getLocalBlocksFetchedList();

      int getLocalBlocksFetchedCount();

      double getLocalBlocksFetched(int var1);

      List getFetchWaitTimeList();

      int getFetchWaitTimeCount();

      double getFetchWaitTime(int var1);

      List getRemoteBytesReadList();

      int getRemoteBytesReadCount();

      double getRemoteBytesRead(int var1);

      List getRemoteBytesReadToDiskList();

      int getRemoteBytesReadToDiskCount();

      double getRemoteBytesReadToDisk(int var1);

      List getTotalBlocksFetchedList();

      int getTotalBlocksFetchedCount();

      double getTotalBlocksFetched(int var1);

      List getRemoteReqsDurationList();

      int getRemoteReqsDurationCount();

      double getRemoteReqsDuration(int var1);

      boolean hasShufflePushReadMetricsDist();

      ShufflePushReadMetricDistributions getShufflePushReadMetricsDist();

      ShufflePushReadMetricDistributionsOrBuilder getShufflePushReadMetricsDistOrBuilder();
   }

   public static final class ShuffleReadMetrics extends GeneratedMessage implements ShuffleReadMetricsOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int REMOTE_BLOCKS_FETCHED_FIELD_NUMBER = 1;
      private long remoteBlocksFetched_ = 0L;
      public static final int LOCAL_BLOCKS_FETCHED_FIELD_NUMBER = 2;
      private long localBlocksFetched_ = 0L;
      public static final int FETCH_WAIT_TIME_FIELD_NUMBER = 3;
      private long fetchWaitTime_ = 0L;
      public static final int REMOTE_BYTES_READ_FIELD_NUMBER = 4;
      private long remoteBytesRead_ = 0L;
      public static final int REMOTE_BYTES_READ_TO_DISK_FIELD_NUMBER = 5;
      private long remoteBytesReadToDisk_ = 0L;
      public static final int LOCAL_BYTES_READ_FIELD_NUMBER = 6;
      private long localBytesRead_ = 0L;
      public static final int RECORDS_READ_FIELD_NUMBER = 7;
      private long recordsRead_ = 0L;
      public static final int REMOTE_REQS_DURATION_FIELD_NUMBER = 8;
      private long remoteReqsDuration_ = 0L;
      public static final int SHUFFLE_PUSH_READ_METRICS_FIELD_NUMBER = 9;
      private ShufflePushReadMetrics shufflePushReadMetrics_;
      private byte memoizedIsInitialized = -1;
      private static final ShuffleReadMetrics DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ShuffleReadMetrics(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ShuffleReadMetrics() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleReadMetrics_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleReadMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(ShuffleReadMetrics.class, Builder.class);
      }

      public long getRemoteBlocksFetched() {
         return this.remoteBlocksFetched_;
      }

      public long getLocalBlocksFetched() {
         return this.localBlocksFetched_;
      }

      public long getFetchWaitTime() {
         return this.fetchWaitTime_;
      }

      public long getRemoteBytesRead() {
         return this.remoteBytesRead_;
      }

      public long getRemoteBytesReadToDisk() {
         return this.remoteBytesReadToDisk_;
      }

      public long getLocalBytesRead() {
         return this.localBytesRead_;
      }

      public long getRecordsRead() {
         return this.recordsRead_;
      }

      public long getRemoteReqsDuration() {
         return this.remoteReqsDuration_;
      }

      public boolean hasShufflePushReadMetrics() {
         return (this.bitField0_ & 1) != 0;
      }

      public ShufflePushReadMetrics getShufflePushReadMetrics() {
         return this.shufflePushReadMetrics_ == null ? StoreTypes.ShufflePushReadMetrics.getDefaultInstance() : this.shufflePushReadMetrics_;
      }

      public ShufflePushReadMetricsOrBuilder getShufflePushReadMetricsOrBuilder() {
         return this.shufflePushReadMetrics_ == null ? StoreTypes.ShufflePushReadMetrics.getDefaultInstance() : this.shufflePushReadMetrics_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.remoteBlocksFetched_ != 0L) {
            output.writeInt64(1, this.remoteBlocksFetched_);
         }

         if (this.localBlocksFetched_ != 0L) {
            output.writeInt64(2, this.localBlocksFetched_);
         }

         if (this.fetchWaitTime_ != 0L) {
            output.writeInt64(3, this.fetchWaitTime_);
         }

         if (this.remoteBytesRead_ != 0L) {
            output.writeInt64(4, this.remoteBytesRead_);
         }

         if (this.remoteBytesReadToDisk_ != 0L) {
            output.writeInt64(5, this.remoteBytesReadToDisk_);
         }

         if (this.localBytesRead_ != 0L) {
            output.writeInt64(6, this.localBytesRead_);
         }

         if (this.recordsRead_ != 0L) {
            output.writeInt64(7, this.recordsRead_);
         }

         if (this.remoteReqsDuration_ != 0L) {
            output.writeInt64(8, this.remoteReqsDuration_);
         }

         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(9, this.getShufflePushReadMetrics());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.remoteBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.remoteBlocksFetched_);
            }

            if (this.localBlocksFetched_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.localBlocksFetched_);
            }

            if (this.fetchWaitTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(3, this.fetchWaitTime_);
            }

            if (this.remoteBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(4, this.remoteBytesRead_);
            }

            if (this.remoteBytesReadToDisk_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.remoteBytesReadToDisk_);
            }

            if (this.localBytesRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(6, this.localBytesRead_);
            }

            if (this.recordsRead_ != 0L) {
               size += CodedOutputStream.computeInt64Size(7, this.recordsRead_);
            }

            if (this.remoteReqsDuration_ != 0L) {
               size += CodedOutputStream.computeInt64Size(8, this.remoteReqsDuration_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(9, this.getShufflePushReadMetrics());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ShuffleReadMetrics)) {
            return super.equals(obj);
         } else {
            ShuffleReadMetrics other = (ShuffleReadMetrics)obj;
            if (this.getRemoteBlocksFetched() != other.getRemoteBlocksFetched()) {
               return false;
            } else if (this.getLocalBlocksFetched() != other.getLocalBlocksFetched()) {
               return false;
            } else if (this.getFetchWaitTime() != other.getFetchWaitTime()) {
               return false;
            } else if (this.getRemoteBytesRead() != other.getRemoteBytesRead()) {
               return false;
            } else if (this.getRemoteBytesReadToDisk() != other.getRemoteBytesReadToDisk()) {
               return false;
            } else if (this.getLocalBytesRead() != other.getLocalBytesRead()) {
               return false;
            } else if (this.getRecordsRead() != other.getRecordsRead()) {
               return false;
            } else if (this.getRemoteReqsDuration() != other.getRemoteReqsDuration()) {
               return false;
            } else if (this.hasShufflePushReadMetrics() != other.hasShufflePushReadMetrics()) {
               return false;
            } else if (this.hasShufflePushReadMetrics() && !this.getShufflePushReadMetrics().equals(other.getShufflePushReadMetrics())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getRemoteBlocksFetched());
            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getLocalBlocksFetched());
            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashLong(this.getFetchWaitTime());
            hash = 37 * hash + 4;
            hash = 53 * hash + Internal.hashLong(this.getRemoteBytesRead());
            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getRemoteBytesReadToDisk());
            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(this.getLocalBytesRead());
            hash = 37 * hash + 7;
            hash = 53 * hash + Internal.hashLong(this.getRecordsRead());
            hash = 37 * hash + 8;
            hash = 53 * hash + Internal.hashLong(this.getRemoteReqsDuration());
            if (this.hasShufflePushReadMetrics()) {
               hash = 37 * hash + 9;
               hash = 53 * hash + this.getShufflePushReadMetrics().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ShuffleReadMetrics parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ShuffleReadMetrics)PARSER.parseFrom(data);
      }

      public static ShuffleReadMetrics parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleReadMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleReadMetrics parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ShuffleReadMetrics)PARSER.parseFrom(data);
      }

      public static ShuffleReadMetrics parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleReadMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleReadMetrics parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ShuffleReadMetrics)PARSER.parseFrom(data);
      }

      public static ShuffleReadMetrics parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleReadMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleReadMetrics parseFrom(InputStream input) throws IOException {
         return (ShuffleReadMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShuffleReadMetrics parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleReadMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShuffleReadMetrics parseDelimitedFrom(InputStream input) throws IOException {
         return (ShuffleReadMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ShuffleReadMetrics parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleReadMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShuffleReadMetrics parseFrom(CodedInputStream input) throws IOException {
         return (ShuffleReadMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShuffleReadMetrics parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleReadMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ShuffleReadMetrics prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ShuffleReadMetrics getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ShuffleReadMetrics getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ShuffleReadMetrics.class.getName());
         DEFAULT_INSTANCE = new ShuffleReadMetrics();
         PARSER = new AbstractParser() {
            public ShuffleReadMetrics parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ShuffleReadMetrics.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ShuffleReadMetricsOrBuilder {
         private int bitField0_;
         private long remoteBlocksFetched_;
         private long localBlocksFetched_;
         private long fetchWaitTime_;
         private long remoteBytesRead_;
         private long remoteBytesReadToDisk_;
         private long localBytesRead_;
         private long recordsRead_;
         private long remoteReqsDuration_;
         private ShufflePushReadMetrics shufflePushReadMetrics_;
         private SingleFieldBuilder shufflePushReadMetricsBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleReadMetrics_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleReadMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(ShuffleReadMetrics.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.ShuffleReadMetrics.alwaysUseFieldBuilders) {
               this.getShufflePushReadMetricsFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.remoteBlocksFetched_ = 0L;
            this.localBlocksFetched_ = 0L;
            this.fetchWaitTime_ = 0L;
            this.remoteBytesRead_ = 0L;
            this.remoteBytesReadToDisk_ = 0L;
            this.localBytesRead_ = 0L;
            this.recordsRead_ = 0L;
            this.remoteReqsDuration_ = 0L;
            this.shufflePushReadMetrics_ = null;
            if (this.shufflePushReadMetricsBuilder_ != null) {
               this.shufflePushReadMetricsBuilder_.dispose();
               this.shufflePushReadMetricsBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleReadMetrics_descriptor;
         }

         public ShuffleReadMetrics getDefaultInstanceForType() {
            return StoreTypes.ShuffleReadMetrics.getDefaultInstance();
         }

         public ShuffleReadMetrics build() {
            ShuffleReadMetrics result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ShuffleReadMetrics buildPartial() {
            ShuffleReadMetrics result = new ShuffleReadMetrics(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ShuffleReadMetrics result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.remoteBlocksFetched_ = this.remoteBlocksFetched_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.localBlocksFetched_ = this.localBlocksFetched_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.fetchWaitTime_ = this.fetchWaitTime_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.remoteBytesRead_ = this.remoteBytesRead_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.remoteBytesReadToDisk_ = this.remoteBytesReadToDisk_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.localBytesRead_ = this.localBytesRead_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.recordsRead_ = this.recordsRead_;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.remoteReqsDuration_ = this.remoteReqsDuration_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 256) != 0) {
               result.shufflePushReadMetrics_ = this.shufflePushReadMetricsBuilder_ == null ? this.shufflePushReadMetrics_ : (ShufflePushReadMetrics)this.shufflePushReadMetricsBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ShuffleReadMetrics) {
               return this.mergeFrom((ShuffleReadMetrics)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ShuffleReadMetrics other) {
            if (other == StoreTypes.ShuffleReadMetrics.getDefaultInstance()) {
               return this;
            } else {
               if (other.getRemoteBlocksFetched() != 0L) {
                  this.setRemoteBlocksFetched(other.getRemoteBlocksFetched());
               }

               if (other.getLocalBlocksFetched() != 0L) {
                  this.setLocalBlocksFetched(other.getLocalBlocksFetched());
               }

               if (other.getFetchWaitTime() != 0L) {
                  this.setFetchWaitTime(other.getFetchWaitTime());
               }

               if (other.getRemoteBytesRead() != 0L) {
                  this.setRemoteBytesRead(other.getRemoteBytesRead());
               }

               if (other.getRemoteBytesReadToDisk() != 0L) {
                  this.setRemoteBytesReadToDisk(other.getRemoteBytesReadToDisk());
               }

               if (other.getLocalBytesRead() != 0L) {
                  this.setLocalBytesRead(other.getLocalBytesRead());
               }

               if (other.getRecordsRead() != 0L) {
                  this.setRecordsRead(other.getRecordsRead());
               }

               if (other.getRemoteReqsDuration() != 0L) {
                  this.setRemoteReqsDuration(other.getRemoteReqsDuration());
               }

               if (other.hasShufflePushReadMetrics()) {
                  this.mergeShufflePushReadMetrics(other.getShufflePushReadMetrics());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.remoteBlocksFetched_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.localBlocksFetched_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.fetchWaitTime_ = input.readInt64();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.remoteBytesRead_ = input.readInt64();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.remoteBytesReadToDisk_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.localBytesRead_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.recordsRead_ = input.readInt64();
                           this.bitField0_ |= 64;
                           break;
                        case 64:
                           this.remoteReqsDuration_ = input.readInt64();
                           this.bitField0_ |= 128;
                           break;
                        case 74:
                           input.readMessage((MessageLite.Builder)this.getShufflePushReadMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 256;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getRemoteBlocksFetched() {
            return this.remoteBlocksFetched_;
         }

         public Builder setRemoteBlocksFetched(long value) {
            this.remoteBlocksFetched_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteBlocksFetched() {
            this.bitField0_ &= -2;
            this.remoteBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getLocalBlocksFetched() {
            return this.localBlocksFetched_;
         }

         public Builder setLocalBlocksFetched(long value) {
            this.localBlocksFetched_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearLocalBlocksFetched() {
            this.bitField0_ &= -3;
            this.localBlocksFetched_ = 0L;
            this.onChanged();
            return this;
         }

         public long getFetchWaitTime() {
            return this.fetchWaitTime_;
         }

         public Builder setFetchWaitTime(long value) {
            this.fetchWaitTime_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearFetchWaitTime() {
            this.bitField0_ &= -5;
            this.fetchWaitTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRemoteBytesRead() {
            return this.remoteBytesRead_;
         }

         public Builder setRemoteBytesRead(long value) {
            this.remoteBytesRead_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteBytesRead() {
            this.bitField0_ &= -9;
            this.remoteBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRemoteBytesReadToDisk() {
            return this.remoteBytesReadToDisk_;
         }

         public Builder setRemoteBytesReadToDisk(long value) {
            this.remoteBytesReadToDisk_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteBytesReadToDisk() {
            this.bitField0_ &= -17;
            this.remoteBytesReadToDisk_ = 0L;
            this.onChanged();
            return this;
         }

         public long getLocalBytesRead() {
            return this.localBytesRead_;
         }

         public Builder setLocalBytesRead(long value) {
            this.localBytesRead_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearLocalBytesRead() {
            this.bitField0_ &= -33;
            this.localBytesRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRecordsRead() {
            return this.recordsRead_;
         }

         public Builder setRecordsRead(long value) {
            this.recordsRead_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearRecordsRead() {
            this.bitField0_ &= -65;
            this.recordsRead_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRemoteReqsDuration() {
            return this.remoteReqsDuration_;
         }

         public Builder setRemoteReqsDuration(long value) {
            this.remoteReqsDuration_ = value;
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearRemoteReqsDuration() {
            this.bitField0_ &= -129;
            this.remoteReqsDuration_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasShufflePushReadMetrics() {
            return (this.bitField0_ & 256) != 0;
         }

         public ShufflePushReadMetrics getShufflePushReadMetrics() {
            if (this.shufflePushReadMetricsBuilder_ == null) {
               return this.shufflePushReadMetrics_ == null ? StoreTypes.ShufflePushReadMetrics.getDefaultInstance() : this.shufflePushReadMetrics_;
            } else {
               return (ShufflePushReadMetrics)this.shufflePushReadMetricsBuilder_.getMessage();
            }
         }

         public Builder setShufflePushReadMetrics(ShufflePushReadMetrics value) {
            if (this.shufflePushReadMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.shufflePushReadMetrics_ = value;
            } else {
               this.shufflePushReadMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder setShufflePushReadMetrics(ShufflePushReadMetrics.Builder builderForValue) {
            if (this.shufflePushReadMetricsBuilder_ == null) {
               this.shufflePushReadMetrics_ = builderForValue.build();
            } else {
               this.shufflePushReadMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder mergeShufflePushReadMetrics(ShufflePushReadMetrics value) {
            if (this.shufflePushReadMetricsBuilder_ == null) {
               if ((this.bitField0_ & 256) != 0 && this.shufflePushReadMetrics_ != null && this.shufflePushReadMetrics_ != StoreTypes.ShufflePushReadMetrics.getDefaultInstance()) {
                  this.getShufflePushReadMetricsBuilder().mergeFrom(value);
               } else {
                  this.shufflePushReadMetrics_ = value;
               }
            } else {
               this.shufflePushReadMetricsBuilder_.mergeFrom(value);
            }

            if (this.shufflePushReadMetrics_ != null) {
               this.bitField0_ |= 256;
               this.onChanged();
            }

            return this;
         }

         public Builder clearShufflePushReadMetrics() {
            this.bitField0_ &= -257;
            this.shufflePushReadMetrics_ = null;
            if (this.shufflePushReadMetricsBuilder_ != null) {
               this.shufflePushReadMetricsBuilder_.dispose();
               this.shufflePushReadMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ShufflePushReadMetrics.Builder getShufflePushReadMetricsBuilder() {
            this.bitField0_ |= 256;
            this.onChanged();
            return (ShufflePushReadMetrics.Builder)this.getShufflePushReadMetricsFieldBuilder().getBuilder();
         }

         public ShufflePushReadMetricsOrBuilder getShufflePushReadMetricsOrBuilder() {
            if (this.shufflePushReadMetricsBuilder_ != null) {
               return (ShufflePushReadMetricsOrBuilder)this.shufflePushReadMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.shufflePushReadMetrics_ == null ? StoreTypes.ShufflePushReadMetrics.getDefaultInstance() : this.shufflePushReadMetrics_;
            }
         }

         private SingleFieldBuilder getShufflePushReadMetricsFieldBuilder() {
            if (this.shufflePushReadMetricsBuilder_ == null) {
               this.shufflePushReadMetricsBuilder_ = new SingleFieldBuilder(this.getShufflePushReadMetrics(), this.getParentForChildren(), this.isClean());
               this.shufflePushReadMetrics_ = null;
            }

            return this.shufflePushReadMetricsBuilder_;
         }
      }
   }

   public interface ShuffleReadMetricsOrBuilder extends MessageOrBuilder {
      long getRemoteBlocksFetched();

      long getLocalBlocksFetched();

      long getFetchWaitTime();

      long getRemoteBytesRead();

      long getRemoteBytesReadToDisk();

      long getLocalBytesRead();

      long getRecordsRead();

      long getRemoteReqsDuration();

      boolean hasShufflePushReadMetrics();

      ShufflePushReadMetrics getShufflePushReadMetrics();

      ShufflePushReadMetricsOrBuilder getShufflePushReadMetricsOrBuilder();
   }

   public static final class ShuffleWriteMetricDistributions extends GeneratedMessage implements ShuffleWriteMetricDistributionsOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int WRITE_BYTES_FIELD_NUMBER = 1;
      private Internal.DoubleList writeBytes_ = emptyDoubleList();
      private int writeBytesMemoizedSerializedSize = -1;
      public static final int WRITE_RECORDS_FIELD_NUMBER = 2;
      private Internal.DoubleList writeRecords_ = emptyDoubleList();
      private int writeRecordsMemoizedSerializedSize = -1;
      public static final int WRITE_TIME_FIELD_NUMBER = 3;
      private Internal.DoubleList writeTime_ = emptyDoubleList();
      private int writeTimeMemoizedSerializedSize = -1;
      private byte memoizedIsInitialized = -1;
      private static final ShuffleWriteMetricDistributions DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ShuffleWriteMetricDistributions(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ShuffleWriteMetricDistributions() {
         this.writeBytes_ = emptyDoubleList();
         this.writeRecords_ = emptyDoubleList();
         this.writeTime_ = emptyDoubleList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetricDistributions_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(ShuffleWriteMetricDistributions.class, Builder.class);
      }

      public List getWriteBytesList() {
         return this.writeBytes_;
      }

      public int getWriteBytesCount() {
         return this.writeBytes_.size();
      }

      public double getWriteBytes(int index) {
         return this.writeBytes_.getDouble(index);
      }

      public List getWriteRecordsList() {
         return this.writeRecords_;
      }

      public int getWriteRecordsCount() {
         return this.writeRecords_.size();
      }

      public double getWriteRecords(int index) {
         return this.writeRecords_.getDouble(index);
      }

      public List getWriteTimeList() {
         return this.writeTime_;
      }

      public int getWriteTimeCount() {
         return this.writeTime_.size();
      }

      public double getWriteTime(int index) {
         return this.writeTime_.getDouble(index);
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if (this.getWriteBytesList().size() > 0) {
            output.writeUInt32NoTag(10);
            output.writeUInt32NoTag(this.writeBytesMemoizedSerializedSize);
         }

         for(int i = 0; i < this.writeBytes_.size(); ++i) {
            output.writeDoubleNoTag(this.writeBytes_.getDouble(i));
         }

         if (this.getWriteRecordsList().size() > 0) {
            output.writeUInt32NoTag(18);
            output.writeUInt32NoTag(this.writeRecordsMemoizedSerializedSize);
         }

         for(int i = 0; i < this.writeRecords_.size(); ++i) {
            output.writeDoubleNoTag(this.writeRecords_.getDouble(i));
         }

         if (this.getWriteTimeList().size() > 0) {
            output.writeUInt32NoTag(26);
            output.writeUInt32NoTag(this.writeTimeMemoizedSerializedSize);
         }

         for(int i = 0; i < this.writeTime_.size(); ++i) {
            output.writeDoubleNoTag(this.writeTime_.getDouble(i));
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            int dataSize = 0;
            dataSize = 8 * this.getWriteBytesList().size();
            size += dataSize;
            if (!this.getWriteBytesList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.writeBytesMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getWriteRecordsList().size();
            size += dataSize;
            if (!this.getWriteRecordsList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.writeRecordsMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getWriteTimeList().size();
            size += dataSize;
            if (!this.getWriteTimeList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.writeTimeMemoizedSerializedSize = dataSize;
            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ShuffleWriteMetricDistributions)) {
            return super.equals(obj);
         } else {
            ShuffleWriteMetricDistributions other = (ShuffleWriteMetricDistributions)obj;
            if (!this.getWriteBytesList().equals(other.getWriteBytesList())) {
               return false;
            } else if (!this.getWriteRecordsList().equals(other.getWriteRecordsList())) {
               return false;
            } else if (!this.getWriteTimeList().equals(other.getWriteTimeList())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.getWriteBytesCount() > 0) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getWriteBytesList().hashCode();
            }

            if (this.getWriteRecordsCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getWriteRecordsList().hashCode();
            }

            if (this.getWriteTimeCount() > 0) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getWriteTimeList().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ShuffleWriteMetricDistributions parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetricDistributions)PARSER.parseFrom(data);
      }

      public static ShuffleWriteMetricDistributions parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleWriteMetricDistributions parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetricDistributions)PARSER.parseFrom(data);
      }

      public static ShuffleWriteMetricDistributions parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleWriteMetricDistributions parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetricDistributions)PARSER.parseFrom(data);
      }

      public static ShuffleWriteMetricDistributions parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleWriteMetricDistributions parseFrom(InputStream input) throws IOException {
         return (ShuffleWriteMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShuffleWriteMetricDistributions parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleWriteMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShuffleWriteMetricDistributions parseDelimitedFrom(InputStream input) throws IOException {
         return (ShuffleWriteMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ShuffleWriteMetricDistributions parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleWriteMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShuffleWriteMetricDistributions parseFrom(CodedInputStream input) throws IOException {
         return (ShuffleWriteMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShuffleWriteMetricDistributions parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleWriteMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ShuffleWriteMetricDistributions prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ShuffleWriteMetricDistributions getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ShuffleWriteMetricDistributions getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ShuffleWriteMetricDistributions.class.getName());
         DEFAULT_INSTANCE = new ShuffleWriteMetricDistributions();
         PARSER = new AbstractParser() {
            public ShuffleWriteMetricDistributions parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ShuffleWriteMetricDistributions.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ShuffleWriteMetricDistributionsOrBuilder {
         private int bitField0_;
         private Internal.DoubleList writeBytes_ = StoreTypes.ShuffleWriteMetricDistributions.emptyDoubleList();
         private Internal.DoubleList writeRecords_ = StoreTypes.ShuffleWriteMetricDistributions.emptyDoubleList();
         private Internal.DoubleList writeTime_ = StoreTypes.ShuffleWriteMetricDistributions.emptyDoubleList();

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetricDistributions_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(ShuffleWriteMetricDistributions.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.writeBytes_ = StoreTypes.ShuffleWriteMetricDistributions.emptyDoubleList();
            this.writeRecords_ = StoreTypes.ShuffleWriteMetricDistributions.emptyDoubleList();
            this.writeTime_ = StoreTypes.ShuffleWriteMetricDistributions.emptyDoubleList();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetricDistributions_descriptor;
         }

         public ShuffleWriteMetricDistributions getDefaultInstanceForType() {
            return StoreTypes.ShuffleWriteMetricDistributions.getDefaultInstance();
         }

         public ShuffleWriteMetricDistributions build() {
            ShuffleWriteMetricDistributions result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ShuffleWriteMetricDistributions buildPartial() {
            ShuffleWriteMetricDistributions result = new ShuffleWriteMetricDistributions(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ShuffleWriteMetricDistributions result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               this.writeBytes_.makeImmutable();
               result.writeBytes_ = this.writeBytes_;
            }

            if ((from_bitField0_ & 2) != 0) {
               this.writeRecords_.makeImmutable();
               result.writeRecords_ = this.writeRecords_;
            }

            if ((from_bitField0_ & 4) != 0) {
               this.writeTime_.makeImmutable();
               result.writeTime_ = this.writeTime_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ShuffleWriteMetricDistributions) {
               return this.mergeFrom((ShuffleWriteMetricDistributions)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ShuffleWriteMetricDistributions other) {
            if (other == StoreTypes.ShuffleWriteMetricDistributions.getDefaultInstance()) {
               return this;
            } else {
               if (!other.writeBytes_.isEmpty()) {
                  if (this.writeBytes_.isEmpty()) {
                     this.writeBytes_ = other.writeBytes_;
                     this.writeBytes_.makeImmutable();
                     this.bitField0_ |= 1;
                  } else {
                     this.ensureWriteBytesIsMutable();
                     this.writeBytes_.addAll(other.writeBytes_);
                  }

                  this.onChanged();
               }

               if (!other.writeRecords_.isEmpty()) {
                  if (this.writeRecords_.isEmpty()) {
                     this.writeRecords_ = other.writeRecords_;
                     this.writeRecords_.makeImmutable();
                     this.bitField0_ |= 2;
                  } else {
                     this.ensureWriteRecordsIsMutable();
                     this.writeRecords_.addAll(other.writeRecords_);
                  }

                  this.onChanged();
               }

               if (!other.writeTime_.isEmpty()) {
                  if (this.writeTime_.isEmpty()) {
                     this.writeTime_ = other.writeTime_;
                     this.writeTime_.makeImmutable();
                     this.bitField0_ |= 4;
                  } else {
                     this.ensureWriteTimeIsMutable();
                     this.writeTime_.addAll(other.writeTime_);
                  }

                  this.onChanged();
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 9:
                           double v = input.readDouble();
                           this.ensureWriteBytesIsMutable();
                           this.writeBytes_.addDouble(v);
                           break;
                        case 10:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureWriteBytesIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.writeBytes_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 17:
                           double v = input.readDouble();
                           this.ensureWriteRecordsIsMutable();
                           this.writeRecords_.addDouble(v);
                           break;
                        case 18:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureWriteRecordsIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.writeRecords_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 25:
                           double v = input.readDouble();
                           this.ensureWriteTimeIsMutable();
                           this.writeTime_.addDouble(v);
                           break;
                        case 26:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureWriteTimeIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.writeTime_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         private void ensureWriteBytesIsMutable() {
            if (!this.writeBytes_.isModifiable()) {
               this.writeBytes_ = (Internal.DoubleList)StoreTypes.ShuffleWriteMetricDistributions.makeMutableCopy(this.writeBytes_);
            }

            this.bitField0_ |= 1;
         }

         private void ensureWriteBytesIsMutable(int capacity) {
            if (!this.writeBytes_.isModifiable()) {
               this.writeBytes_ = (Internal.DoubleList)StoreTypes.ShuffleWriteMetricDistributions.makeMutableCopy(this.writeBytes_, capacity);
            }

            this.bitField0_ |= 1;
         }

         public List getWriteBytesList() {
            this.writeBytes_.makeImmutable();
            return this.writeBytes_;
         }

         public int getWriteBytesCount() {
            return this.writeBytes_.size();
         }

         public double getWriteBytes(int index) {
            return this.writeBytes_.getDouble(index);
         }

         public Builder setWriteBytes(int index, double value) {
            this.ensureWriteBytesIsMutable();
            this.writeBytes_.setDouble(index, value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addWriteBytes(double value) {
            this.ensureWriteBytesIsMutable();
            this.writeBytes_.addDouble(value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addAllWriteBytes(Iterable values) {
            this.ensureWriteBytesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.writeBytes_);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearWriteBytes() {
            this.writeBytes_ = StoreTypes.ShuffleWriteMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         private void ensureWriteRecordsIsMutable() {
            if (!this.writeRecords_.isModifiable()) {
               this.writeRecords_ = (Internal.DoubleList)StoreTypes.ShuffleWriteMetricDistributions.makeMutableCopy(this.writeRecords_);
            }

            this.bitField0_ |= 2;
         }

         private void ensureWriteRecordsIsMutable(int capacity) {
            if (!this.writeRecords_.isModifiable()) {
               this.writeRecords_ = (Internal.DoubleList)StoreTypes.ShuffleWriteMetricDistributions.makeMutableCopy(this.writeRecords_, capacity);
            }

            this.bitField0_ |= 2;
         }

         public List getWriteRecordsList() {
            this.writeRecords_.makeImmutable();
            return this.writeRecords_;
         }

         public int getWriteRecordsCount() {
            return this.writeRecords_.size();
         }

         public double getWriteRecords(int index) {
            return this.writeRecords_.getDouble(index);
         }

         public Builder setWriteRecords(int index, double value) {
            this.ensureWriteRecordsIsMutable();
            this.writeRecords_.setDouble(index, value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addWriteRecords(double value) {
            this.ensureWriteRecordsIsMutable();
            this.writeRecords_.addDouble(value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addAllWriteRecords(Iterable values) {
            this.ensureWriteRecordsIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.writeRecords_);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearWriteRecords() {
            this.writeRecords_ = StoreTypes.ShuffleWriteMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         private void ensureWriteTimeIsMutable() {
            if (!this.writeTime_.isModifiable()) {
               this.writeTime_ = (Internal.DoubleList)StoreTypes.ShuffleWriteMetricDistributions.makeMutableCopy(this.writeTime_);
            }

            this.bitField0_ |= 4;
         }

         private void ensureWriteTimeIsMutable(int capacity) {
            if (!this.writeTime_.isModifiable()) {
               this.writeTime_ = (Internal.DoubleList)StoreTypes.ShuffleWriteMetricDistributions.makeMutableCopy(this.writeTime_, capacity);
            }

            this.bitField0_ |= 4;
         }

         public List getWriteTimeList() {
            this.writeTime_.makeImmutable();
            return this.writeTime_;
         }

         public int getWriteTimeCount() {
            return this.writeTime_.size();
         }

         public double getWriteTime(int index) {
            return this.writeTime_.getDouble(index);
         }

         public Builder setWriteTime(int index, double value) {
            this.ensureWriteTimeIsMutable();
            this.writeTime_.setDouble(index, value);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder addWriteTime(double value) {
            this.ensureWriteTimeIsMutable();
            this.writeTime_.addDouble(value);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder addAllWriteTime(Iterable values) {
            this.ensureWriteTimeIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.writeTime_);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearWriteTime() {
            this.writeTime_ = StoreTypes.ShuffleWriteMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }
      }
   }

   public interface ShuffleWriteMetricDistributionsOrBuilder extends MessageOrBuilder {
      List getWriteBytesList();

      int getWriteBytesCount();

      double getWriteBytes(int var1);

      List getWriteRecordsList();

      int getWriteRecordsCount();

      double getWriteRecords(int var1);

      List getWriteTimeList();

      int getWriteTimeCount();

      double getWriteTime(int var1);
   }

   public static final class ShuffleWriteMetrics extends GeneratedMessage implements ShuffleWriteMetricsOrBuilder {
      private static final long serialVersionUID = 0L;
      public static final int BYTES_WRITTEN_FIELD_NUMBER = 1;
      private long bytesWritten_ = 0L;
      public static final int WRITE_TIME_FIELD_NUMBER = 2;
      private long writeTime_ = 0L;
      public static final int RECORDS_WRITTEN_FIELD_NUMBER = 3;
      private long recordsWritten_ = 0L;
      private byte memoizedIsInitialized = -1;
      private static final ShuffleWriteMetrics DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private ShuffleWriteMetrics(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private ShuffleWriteMetrics() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetrics_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(ShuffleWriteMetrics.class, Builder.class);
      }

      public long getBytesWritten() {
         return this.bytesWritten_;
      }

      public long getWriteTime() {
         return this.writeTime_;
      }

      public long getRecordsWritten() {
         return this.recordsWritten_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.bytesWritten_ != 0L) {
            output.writeInt64(1, this.bytesWritten_);
         }

         if (this.writeTime_ != 0L) {
            output.writeInt64(2, this.writeTime_);
         }

         if (this.recordsWritten_ != 0L) {
            output.writeInt64(3, this.recordsWritten_);
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.bytesWritten_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.bytesWritten_);
            }

            if (this.writeTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.writeTime_);
            }

            if (this.recordsWritten_ != 0L) {
               size += CodedOutputStream.computeInt64Size(3, this.recordsWritten_);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof ShuffleWriteMetrics)) {
            return super.equals(obj);
         } else {
            ShuffleWriteMetrics other = (ShuffleWriteMetrics)obj;
            if (this.getBytesWritten() != other.getBytesWritten()) {
               return false;
            } else if (this.getWriteTime() != other.getWriteTime()) {
               return false;
            } else if (this.getRecordsWritten() != other.getRecordsWritten()) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getBytesWritten());
            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getWriteTime());
            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashLong(this.getRecordsWritten());
            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static ShuffleWriteMetrics parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetrics)PARSER.parseFrom(data);
      }

      public static ShuffleWriteMetrics parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleWriteMetrics parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetrics)PARSER.parseFrom(data);
      }

      public static ShuffleWriteMetrics parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleWriteMetrics parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetrics)PARSER.parseFrom(data);
      }

      public static ShuffleWriteMetrics parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (ShuffleWriteMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static ShuffleWriteMetrics parseFrom(InputStream input) throws IOException {
         return (ShuffleWriteMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShuffleWriteMetrics parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleWriteMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShuffleWriteMetrics parseDelimitedFrom(InputStream input) throws IOException {
         return (ShuffleWriteMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static ShuffleWriteMetrics parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleWriteMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static ShuffleWriteMetrics parseFrom(CodedInputStream input) throws IOException {
         return (ShuffleWriteMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static ShuffleWriteMetrics parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (ShuffleWriteMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(ShuffleWriteMetrics prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static ShuffleWriteMetrics getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public ShuffleWriteMetrics getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", ShuffleWriteMetrics.class.getName());
         DEFAULT_INSTANCE = new ShuffleWriteMetrics();
         PARSER = new AbstractParser() {
            public ShuffleWriteMetrics parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.ShuffleWriteMetrics.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements ShuffleWriteMetricsOrBuilder {
         private int bitField0_;
         private long bytesWritten_;
         private long writeTime_;
         private long recordsWritten_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetrics_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(ShuffleWriteMetrics.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.bytesWritten_ = 0L;
            this.writeTime_ = 0L;
            this.recordsWritten_ = 0L;
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_ShuffleWriteMetrics_descriptor;
         }

         public ShuffleWriteMetrics getDefaultInstanceForType() {
            return StoreTypes.ShuffleWriteMetrics.getDefaultInstance();
         }

         public ShuffleWriteMetrics build() {
            ShuffleWriteMetrics result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public ShuffleWriteMetrics buildPartial() {
            ShuffleWriteMetrics result = new ShuffleWriteMetrics(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(ShuffleWriteMetrics result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.bytesWritten_ = this.bytesWritten_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.writeTime_ = this.writeTime_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.recordsWritten_ = this.recordsWritten_;
            }

         }

         public Builder mergeFrom(Message other) {
            if (other instanceof ShuffleWriteMetrics) {
               return this.mergeFrom((ShuffleWriteMetrics)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(ShuffleWriteMetrics other) {
            if (other == StoreTypes.ShuffleWriteMetrics.getDefaultInstance()) {
               return this;
            } else {
               if (other.getBytesWritten() != 0L) {
                  this.setBytesWritten(other.getBytesWritten());
               }

               if (other.getWriteTime() != 0L) {
                  this.setWriteTime(other.getWriteTime());
               }

               if (other.getRecordsWritten() != 0L) {
                  this.setRecordsWritten(other.getRecordsWritten());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.bytesWritten_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.writeTime_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.recordsWritten_ = input.readInt64();
                           this.bitField0_ |= 4;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getBytesWritten() {
            return this.bytesWritten_;
         }

         public Builder setBytesWritten(long value) {
            this.bytesWritten_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearBytesWritten() {
            this.bitField0_ &= -2;
            this.bytesWritten_ = 0L;
            this.onChanged();
            return this;
         }

         public long getWriteTime() {
            return this.writeTime_;
         }

         public Builder setWriteTime(long value) {
            this.writeTime_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearWriteTime() {
            this.bitField0_ &= -3;
            this.writeTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getRecordsWritten() {
            return this.recordsWritten_;
         }

         public Builder setRecordsWritten(long value) {
            this.recordsWritten_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearRecordsWritten() {
            this.bitField0_ &= -5;
            this.recordsWritten_ = 0L;
            this.onChanged();
            return this;
         }
      }
   }

   public interface ShuffleWriteMetricsOrBuilder extends MessageOrBuilder {
      long getBytesWritten();

      long getWriteTime();

      long getRecordsWritten();
   }

   public static final class SinkProgress extends GeneratedMessage implements SinkProgressOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int DESCRIPTION_FIELD_NUMBER = 1;
      private volatile Object description_ = "";
      public static final int NUM_OUTPUT_ROWS_FIELD_NUMBER = 2;
      private long numOutputRows_ = 0L;
      public static final int METRICS_FIELD_NUMBER = 3;
      private MapField metrics_;
      private byte memoizedIsInitialized = -1;
      private static final SinkProgress DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private SinkProgress(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private SinkProgress() {
         this.description_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SinkProgress_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 3 -> {
               return this.internalGetMetrics();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SinkProgress_fieldAccessorTable.ensureFieldAccessorsInitialized(SinkProgress.class, Builder.class);
      }

      public boolean hasDescription() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getDescription() {
         Object ref = this.description_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.description_ = s;
            return s;
         }
      }

      public ByteString getDescriptionBytes() {
         Object ref = this.description_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.description_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getNumOutputRows() {
         return this.numOutputRows_;
      }

      private MapField internalGetMetrics() {
         return this.metrics_ == null ? MapField.emptyMapField(StoreTypes.SinkProgress.MetricsDefaultEntryHolder.defaultEntry) : this.metrics_;
      }

      public int getMetricsCount() {
         return this.internalGetMetrics().getMap().size();
      }

      public boolean containsMetrics(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetMetrics().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getMetrics() {
         return this.getMetricsMap();
      }

      public Map getMetricsMap() {
         return this.internalGetMetrics().getMap();
      }

      public String getMetricsOrDefault(String key, String defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetMetrics().getMap();
            return map.containsKey(key) ? (String)map.get(key) : defaultValue;
         }
      }

      public String getMetricsOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetMetrics().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (String)map.get(key);
            }
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.description_);
         }

         if (this.numOutputRows_ != 0L) {
            output.writeInt64(2, this.numOutputRows_);
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetMetrics(), StoreTypes.SinkProgress.MetricsDefaultEntryHolder.defaultEntry, 3);
         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.description_);
            }

            if (this.numOutputRows_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.numOutputRows_);
            }

            for(Map.Entry entry : this.internalGetMetrics().getMap().entrySet()) {
               MapEntry<String, String> metrics__ = StoreTypes.SinkProgress.MetricsDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((String)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(3, metrics__);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof SinkProgress)) {
            return super.equals(obj);
         } else {
            SinkProgress other = (SinkProgress)obj;
            if (this.hasDescription() != other.hasDescription()) {
               return false;
            } else if (this.hasDescription() && !this.getDescription().equals(other.getDescription())) {
               return false;
            } else if (this.getNumOutputRows() != other.getNumOutputRows()) {
               return false;
            } else if (!this.internalGetMetrics().equals(other.internalGetMetrics())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasDescription()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getDescription().hashCode();
            }

            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getNumOutputRows());
            if (!this.internalGetMetrics().getMap().isEmpty()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.internalGetMetrics().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static SinkProgress parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (SinkProgress)PARSER.parseFrom(data);
      }

      public static SinkProgress parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SinkProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SinkProgress parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (SinkProgress)PARSER.parseFrom(data);
      }

      public static SinkProgress parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SinkProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SinkProgress parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (SinkProgress)PARSER.parseFrom(data);
      }

      public static SinkProgress parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SinkProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SinkProgress parseFrom(InputStream input) throws IOException {
         return (SinkProgress)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SinkProgress parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SinkProgress)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static SinkProgress parseDelimitedFrom(InputStream input) throws IOException {
         return (SinkProgress)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static SinkProgress parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SinkProgress)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static SinkProgress parseFrom(CodedInputStream input) throws IOException {
         return (SinkProgress)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SinkProgress parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SinkProgress)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(SinkProgress prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static SinkProgress getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public SinkProgress getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", SinkProgress.class.getName());
         DEFAULT_INSTANCE = new SinkProgress();
         PARSER = new AbstractParser() {
            public SinkProgress parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.SinkProgress.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements SinkProgressOrBuilder {
         private int bitField0_;
         private Object description_ = "";
         private long numOutputRows_;
         private MapField metrics_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SinkProgress_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 3 -> {
                  return this.internalGetMetrics();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 3 -> {
                  return this.internalGetMutableMetrics();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SinkProgress_fieldAccessorTable.ensureFieldAccessorsInitialized(SinkProgress.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.description_ = "";
            this.numOutputRows_ = 0L;
            this.internalGetMutableMetrics().clear();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SinkProgress_descriptor;
         }

         public SinkProgress getDefaultInstanceForType() {
            return StoreTypes.SinkProgress.getDefaultInstance();
         }

         public SinkProgress build() {
            SinkProgress result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public SinkProgress buildPartial() {
            SinkProgress result = new SinkProgress(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(SinkProgress result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.description_ = this.description_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.numOutputRows_ = this.numOutputRows_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.metrics_ = this.internalGetMetrics();
               result.metrics_.makeImmutable();
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof SinkProgress) {
               return this.mergeFrom((SinkProgress)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(SinkProgress other) {
            if (other == StoreTypes.SinkProgress.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasDescription()) {
                  this.description_ = other.description_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.getNumOutputRows() != 0L) {
                  this.setNumOutputRows(other.getNumOutputRows());
               }

               this.internalGetMutableMetrics().mergeFrom(other.internalGetMetrics());
               this.bitField0_ |= 4;
               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.description_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.numOutputRows_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           MapEntry<String, String> metrics__ = (MapEntry)input.readMessage(StoreTypes.SinkProgress.MetricsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableMetrics().getMutableMap().put((String)metrics__.getKey(), (String)metrics__.getValue());
                           this.bitField0_ |= 4;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasDescription() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getDescription() {
            Object ref = this.description_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.description_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getDescriptionBytes() {
            Object ref = this.description_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.description_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setDescription(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.description_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearDescription() {
            this.description_ = StoreTypes.SinkProgress.getDefaultInstance().getDescription();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setDescriptionBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SinkProgress.checkByteStringIsUtf8(value);
               this.description_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public long getNumOutputRows() {
            return this.numOutputRows_;
         }

         public Builder setNumOutputRows(long value) {
            this.numOutputRows_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearNumOutputRows() {
            this.bitField0_ &= -3;
            this.numOutputRows_ = 0L;
            this.onChanged();
            return this;
         }

         private MapField internalGetMetrics() {
            return this.metrics_ == null ? MapField.emptyMapField(StoreTypes.SinkProgress.MetricsDefaultEntryHolder.defaultEntry) : this.metrics_;
         }

         private MapField internalGetMutableMetrics() {
            if (this.metrics_ == null) {
               this.metrics_ = MapField.newMapField(StoreTypes.SinkProgress.MetricsDefaultEntryHolder.defaultEntry);
            }

            if (!this.metrics_.isMutable()) {
               this.metrics_ = this.metrics_.copy();
            }

            this.bitField0_ |= 4;
            this.onChanged();
            return this.metrics_;
         }

         public int getMetricsCount() {
            return this.internalGetMetrics().getMap().size();
         }

         public boolean containsMetrics(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetMetrics().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMetrics() {
            return this.getMetricsMap();
         }

         public Map getMetricsMap() {
            return this.internalGetMetrics().getMap();
         }

         public String getMetricsOrDefault(String key, String defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetMetrics().getMap();
               return map.containsKey(key) ? (String)map.get(key) : defaultValue;
            }
         }

         public String getMetricsOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetMetrics().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (String)map.get(key);
               }
            }
         }

         public Builder clearMetrics() {
            this.bitField0_ &= -5;
            this.internalGetMutableMetrics().getMutableMap().clear();
            return this;
         }

         public Builder removeMetrics(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableMetrics().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableMetrics() {
            this.bitField0_ |= 4;
            return this.internalGetMutableMetrics().getMutableMap();
         }

         public Builder putMetrics(String key, String value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableMetrics().getMutableMap().put(key, value);
               this.bitField0_ |= 4;
               return this;
            }
         }

         public Builder putAllMetrics(Map values) {
            this.internalGetMutableMetrics().getMutableMap().putAll(values);
            this.bitField0_ |= 4;
            return this;
         }
      }

      private static final class MetricsDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_SinkProgress_MetricsEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.STRING, "");
         }
      }
   }

   public interface SinkProgressOrBuilder extends MessageOrBuilder {
      boolean hasDescription();

      String getDescription();

      ByteString getDescriptionBytes();

      long getNumOutputRows();

      int getMetricsCount();

      boolean containsMetrics(String var1);

      /** @deprecated */
      @Deprecated
      Map getMetrics();

      Map getMetricsMap();

      String getMetricsOrDefault(String var1, String var2);

      String getMetricsOrThrow(String var1);
   }

   public static final class SourceProgress extends GeneratedMessage implements SourceProgressOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int DESCRIPTION_FIELD_NUMBER = 1;
      private volatile Object description_ = "";
      public static final int START_OFFSET_FIELD_NUMBER = 2;
      private volatile Object startOffset_ = "";
      public static final int END_OFFSET_FIELD_NUMBER = 3;
      private volatile Object endOffset_ = "";
      public static final int LATEST_OFFSET_FIELD_NUMBER = 4;
      private volatile Object latestOffset_ = "";
      public static final int NUM_INPUT_ROWS_FIELD_NUMBER = 5;
      private long numInputRows_ = 0L;
      public static final int INPUT_ROWS_PER_SECOND_FIELD_NUMBER = 6;
      private double inputRowsPerSecond_ = (double)0.0F;
      public static final int PROCESSED_ROWS_PER_SECOND_FIELD_NUMBER = 7;
      private double processedRowsPerSecond_ = (double)0.0F;
      public static final int METRICS_FIELD_NUMBER = 8;
      private MapField metrics_;
      private byte memoizedIsInitialized = -1;
      private static final SourceProgress DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private SourceProgress(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private SourceProgress() {
         this.description_ = "";
         this.startOffset_ = "";
         this.endOffset_ = "";
         this.latestOffset_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SourceProgress_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 8 -> {
               return this.internalGetMetrics();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_SourceProgress_fieldAccessorTable.ensureFieldAccessorsInitialized(SourceProgress.class, Builder.class);
      }

      public boolean hasDescription() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getDescription() {
         Object ref = this.description_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.description_ = s;
            return s;
         }
      }

      public ByteString getDescriptionBytes() {
         Object ref = this.description_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.description_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasStartOffset() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getStartOffset() {
         Object ref = this.startOffset_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.startOffset_ = s;
            return s;
         }
      }

      public ByteString getStartOffsetBytes() {
         Object ref = this.startOffset_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.startOffset_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasEndOffset() {
         return (this.bitField0_ & 4) != 0;
      }

      public String getEndOffset() {
         Object ref = this.endOffset_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.endOffset_ = s;
            return s;
         }
      }

      public ByteString getEndOffsetBytes() {
         Object ref = this.endOffset_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.endOffset_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasLatestOffset() {
         return (this.bitField0_ & 8) != 0;
      }

      public String getLatestOffset() {
         Object ref = this.latestOffset_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.latestOffset_ = s;
            return s;
         }
      }

      public ByteString getLatestOffsetBytes() {
         Object ref = this.latestOffset_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.latestOffset_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getNumInputRows() {
         return this.numInputRows_;
      }

      public double getInputRowsPerSecond() {
         return this.inputRowsPerSecond_;
      }

      public double getProcessedRowsPerSecond() {
         return this.processedRowsPerSecond_;
      }

      private MapField internalGetMetrics() {
         return this.metrics_ == null ? MapField.emptyMapField(StoreTypes.SourceProgress.MetricsDefaultEntryHolder.defaultEntry) : this.metrics_;
      }

      public int getMetricsCount() {
         return this.internalGetMetrics().getMap().size();
      }

      public boolean containsMetrics(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetMetrics().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getMetrics() {
         return this.getMetricsMap();
      }

      public Map getMetricsMap() {
         return this.internalGetMetrics().getMap();
      }

      public String getMetricsOrDefault(String key, String defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetMetrics().getMap();
            return map.containsKey(key) ? (String)map.get(key) : defaultValue;
         }
      }

      public String getMetricsOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetMetrics().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (String)map.get(key);
            }
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.description_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 2, this.startOffset_);
         }

         if ((this.bitField0_ & 4) != 0) {
            GeneratedMessage.writeString(output, 3, this.endOffset_);
         }

         if ((this.bitField0_ & 8) != 0) {
            GeneratedMessage.writeString(output, 4, this.latestOffset_);
         }

         if (this.numInputRows_ != 0L) {
            output.writeInt64(5, this.numInputRows_);
         }

         if (Double.doubleToRawLongBits(this.inputRowsPerSecond_) != 0L) {
            output.writeDouble(6, this.inputRowsPerSecond_);
         }

         if (Double.doubleToRawLongBits(this.processedRowsPerSecond_) != 0L) {
            output.writeDouble(7, this.processedRowsPerSecond_);
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetMetrics(), StoreTypes.SourceProgress.MetricsDefaultEntryHolder.defaultEntry, 8);
         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.description_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.startOffset_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.endOffset_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += GeneratedMessage.computeStringSize(4, this.latestOffset_);
            }

            if (this.numInputRows_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.numInputRows_);
            }

            if (Double.doubleToRawLongBits(this.inputRowsPerSecond_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(6, this.inputRowsPerSecond_);
            }

            if (Double.doubleToRawLongBits(this.processedRowsPerSecond_) != 0L) {
               size += CodedOutputStream.computeDoubleSize(7, this.processedRowsPerSecond_);
            }

            for(Map.Entry entry : this.internalGetMetrics().getMap().entrySet()) {
               MapEntry<String, String> metrics__ = StoreTypes.SourceProgress.MetricsDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((String)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(8, metrics__);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof SourceProgress)) {
            return super.equals(obj);
         } else {
            SourceProgress other = (SourceProgress)obj;
            if (this.hasDescription() != other.hasDescription()) {
               return false;
            } else if (this.hasDescription() && !this.getDescription().equals(other.getDescription())) {
               return false;
            } else if (this.hasStartOffset() != other.hasStartOffset()) {
               return false;
            } else if (this.hasStartOffset() && !this.getStartOffset().equals(other.getStartOffset())) {
               return false;
            } else if (this.hasEndOffset() != other.hasEndOffset()) {
               return false;
            } else if (this.hasEndOffset() && !this.getEndOffset().equals(other.getEndOffset())) {
               return false;
            } else if (this.hasLatestOffset() != other.hasLatestOffset()) {
               return false;
            } else if (this.hasLatestOffset() && !this.getLatestOffset().equals(other.getLatestOffset())) {
               return false;
            } else if (this.getNumInputRows() != other.getNumInputRows()) {
               return false;
            } else if (Double.doubleToLongBits(this.getInputRowsPerSecond()) != Double.doubleToLongBits(other.getInputRowsPerSecond())) {
               return false;
            } else if (Double.doubleToLongBits(this.getProcessedRowsPerSecond()) != Double.doubleToLongBits(other.getProcessedRowsPerSecond())) {
               return false;
            } else if (!this.internalGetMetrics().equals(other.internalGetMetrics())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasDescription()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getDescription().hashCode();
            }

            if (this.hasStartOffset()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getStartOffset().hashCode();
            }

            if (this.hasEndOffset()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getEndOffset().hashCode();
            }

            if (this.hasLatestOffset()) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getLatestOffset().hashCode();
            }

            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getNumInputRows());
            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getInputRowsPerSecond()));
            hash = 37 * hash + 7;
            hash = 53 * hash + Internal.hashLong(Double.doubleToLongBits(this.getProcessedRowsPerSecond()));
            if (!this.internalGetMetrics().getMap().isEmpty()) {
               hash = 37 * hash + 8;
               hash = 53 * hash + this.internalGetMetrics().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static SourceProgress parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (SourceProgress)PARSER.parseFrom(data);
      }

      public static SourceProgress parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SourceProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SourceProgress parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (SourceProgress)PARSER.parseFrom(data);
      }

      public static SourceProgress parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SourceProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SourceProgress parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (SourceProgress)PARSER.parseFrom(data);
      }

      public static SourceProgress parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (SourceProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static SourceProgress parseFrom(InputStream input) throws IOException {
         return (SourceProgress)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SourceProgress parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SourceProgress)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static SourceProgress parseDelimitedFrom(InputStream input) throws IOException {
         return (SourceProgress)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static SourceProgress parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SourceProgress)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static SourceProgress parseFrom(CodedInputStream input) throws IOException {
         return (SourceProgress)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static SourceProgress parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (SourceProgress)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(SourceProgress prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static SourceProgress getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public SourceProgress getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", SourceProgress.class.getName());
         DEFAULT_INSTANCE = new SourceProgress();
         PARSER = new AbstractParser() {
            public SourceProgress parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.SourceProgress.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements SourceProgressOrBuilder {
         private int bitField0_;
         private Object description_ = "";
         private Object startOffset_ = "";
         private Object endOffset_ = "";
         private Object latestOffset_ = "";
         private long numInputRows_;
         private double inputRowsPerSecond_;
         private double processedRowsPerSecond_;
         private MapField metrics_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SourceProgress_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 8 -> {
                  return this.internalGetMetrics();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 8 -> {
                  return this.internalGetMutableMetrics();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SourceProgress_fieldAccessorTable.ensureFieldAccessorsInitialized(SourceProgress.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.description_ = "";
            this.startOffset_ = "";
            this.endOffset_ = "";
            this.latestOffset_ = "";
            this.numInputRows_ = 0L;
            this.inputRowsPerSecond_ = (double)0.0F;
            this.processedRowsPerSecond_ = (double)0.0F;
            this.internalGetMutableMetrics().clear();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_SourceProgress_descriptor;
         }

         public SourceProgress getDefaultInstanceForType() {
            return StoreTypes.SourceProgress.getDefaultInstance();
         }

         public SourceProgress build() {
            SourceProgress result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public SourceProgress buildPartial() {
            SourceProgress result = new SourceProgress(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(SourceProgress result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.description_ = this.description_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.startOffset_ = this.startOffset_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.endOffset_ = this.endOffset_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.latestOffset_ = this.latestOffset_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.numInputRows_ = this.numInputRows_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.inputRowsPerSecond_ = this.inputRowsPerSecond_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.processedRowsPerSecond_ = this.processedRowsPerSecond_;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.metrics_ = this.internalGetMetrics();
               result.metrics_.makeImmutable();
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof SourceProgress) {
               return this.mergeFrom((SourceProgress)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(SourceProgress other) {
            if (other == StoreTypes.SourceProgress.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasDescription()) {
                  this.description_ = other.description_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.hasStartOffset()) {
                  this.startOffset_ = other.startOffset_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.hasEndOffset()) {
                  this.endOffset_ = other.endOffset_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (other.hasLatestOffset()) {
                  this.latestOffset_ = other.latestOffset_;
                  this.bitField0_ |= 8;
                  this.onChanged();
               }

               if (other.getNumInputRows() != 0L) {
                  this.setNumInputRows(other.getNumInputRows());
               }

               if (other.getInputRowsPerSecond() != (double)0.0F) {
                  this.setInputRowsPerSecond(other.getInputRowsPerSecond());
               }

               if (other.getProcessedRowsPerSecond() != (double)0.0F) {
                  this.setProcessedRowsPerSecond(other.getProcessedRowsPerSecond());
               }

               this.internalGetMutableMetrics().mergeFrom(other.internalGetMetrics());
               this.bitField0_ |= 128;
               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.description_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.startOffset_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.endOffset_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 34:
                           this.latestOffset_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.numInputRows_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 49:
                           this.inputRowsPerSecond_ = input.readDouble();
                           this.bitField0_ |= 32;
                           break;
                        case 57:
                           this.processedRowsPerSecond_ = input.readDouble();
                           this.bitField0_ |= 64;
                           break;
                        case 66:
                           MapEntry<String, String> metrics__ = (MapEntry)input.readMessage(StoreTypes.SourceProgress.MetricsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableMetrics().getMutableMap().put((String)metrics__.getKey(), (String)metrics__.getValue());
                           this.bitField0_ |= 128;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasDescription() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getDescription() {
            Object ref = this.description_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.description_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getDescriptionBytes() {
            Object ref = this.description_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.description_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setDescription(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.description_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearDescription() {
            this.description_ = StoreTypes.SourceProgress.getDefaultInstance().getDescription();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setDescriptionBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SourceProgress.checkByteStringIsUtf8(value);
               this.description_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public boolean hasStartOffset() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getStartOffset() {
            Object ref = this.startOffset_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.startOffset_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getStartOffsetBytes() {
            Object ref = this.startOffset_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.startOffset_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setStartOffset(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.startOffset_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearStartOffset() {
            this.startOffset_ = StoreTypes.SourceProgress.getDefaultInstance().getStartOffset();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setStartOffsetBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SourceProgress.checkByteStringIsUtf8(value);
               this.startOffset_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean hasEndOffset() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getEndOffset() {
            Object ref = this.endOffset_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.endOffset_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getEndOffsetBytes() {
            Object ref = this.endOffset_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.endOffset_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setEndOffset(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.endOffset_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearEndOffset() {
            this.endOffset_ = StoreTypes.SourceProgress.getDefaultInstance().getEndOffset();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setEndOffsetBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SourceProgress.checkByteStringIsUtf8(value);
               this.endOffset_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public boolean hasLatestOffset() {
            return (this.bitField0_ & 8) != 0;
         }

         public String getLatestOffset() {
            Object ref = this.latestOffset_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.latestOffset_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getLatestOffsetBytes() {
            Object ref = this.latestOffset_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.latestOffset_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setLatestOffset(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.latestOffset_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }

         public Builder clearLatestOffset() {
            this.latestOffset_ = StoreTypes.SourceProgress.getDefaultInstance().getLatestOffset();
            this.bitField0_ &= -9;
            this.onChanged();
            return this;
         }

         public Builder setLatestOffsetBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.SourceProgress.checkByteStringIsUtf8(value);
               this.latestOffset_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }

         public long getNumInputRows() {
            return this.numInputRows_;
         }

         public Builder setNumInputRows(long value) {
            this.numInputRows_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearNumInputRows() {
            this.bitField0_ &= -17;
            this.numInputRows_ = 0L;
            this.onChanged();
            return this;
         }

         public double getInputRowsPerSecond() {
            return this.inputRowsPerSecond_;
         }

         public Builder setInputRowsPerSecond(double value) {
            this.inputRowsPerSecond_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearInputRowsPerSecond() {
            this.bitField0_ &= -33;
            this.inputRowsPerSecond_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         public double getProcessedRowsPerSecond() {
            return this.processedRowsPerSecond_;
         }

         public Builder setProcessedRowsPerSecond(double value) {
            this.processedRowsPerSecond_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearProcessedRowsPerSecond() {
            this.bitField0_ &= -65;
            this.processedRowsPerSecond_ = (double)0.0F;
            this.onChanged();
            return this;
         }

         private MapField internalGetMetrics() {
            return this.metrics_ == null ? MapField.emptyMapField(StoreTypes.SourceProgress.MetricsDefaultEntryHolder.defaultEntry) : this.metrics_;
         }

         private MapField internalGetMutableMetrics() {
            if (this.metrics_ == null) {
               this.metrics_ = MapField.newMapField(StoreTypes.SourceProgress.MetricsDefaultEntryHolder.defaultEntry);
            }

            if (!this.metrics_.isMutable()) {
               this.metrics_ = this.metrics_.copy();
            }

            this.bitField0_ |= 128;
            this.onChanged();
            return this.metrics_;
         }

         public int getMetricsCount() {
            return this.internalGetMetrics().getMap().size();
         }

         public boolean containsMetrics(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetMetrics().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMetrics() {
            return this.getMetricsMap();
         }

         public Map getMetricsMap() {
            return this.internalGetMetrics().getMap();
         }

         public String getMetricsOrDefault(String key, String defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetMetrics().getMap();
               return map.containsKey(key) ? (String)map.get(key) : defaultValue;
            }
         }

         public String getMetricsOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetMetrics().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (String)map.get(key);
               }
            }
         }

         public Builder clearMetrics() {
            this.bitField0_ &= -129;
            this.internalGetMutableMetrics().getMutableMap().clear();
            return this;
         }

         public Builder removeMetrics(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableMetrics().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableMetrics() {
            this.bitField0_ |= 128;
            return this.internalGetMutableMetrics().getMutableMap();
         }

         public Builder putMetrics(String key, String value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableMetrics().getMutableMap().put(key, value);
               this.bitField0_ |= 128;
               return this;
            }
         }

         public Builder putAllMetrics(Map values) {
            this.internalGetMutableMetrics().getMutableMap().putAll(values);
            this.bitField0_ |= 128;
            return this;
         }
      }

      private static final class MetricsDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_SourceProgress_MetricsEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.STRING, "");
         }
      }
   }

   public interface SourceProgressOrBuilder extends MessageOrBuilder {
      boolean hasDescription();

      String getDescription();

      ByteString getDescriptionBytes();

      boolean hasStartOffset();

      String getStartOffset();

      ByteString getStartOffsetBytes();

      boolean hasEndOffset();

      String getEndOffset();

      ByteString getEndOffsetBytes();

      boolean hasLatestOffset();

      String getLatestOffset();

      ByteString getLatestOffsetBytes();

      long getNumInputRows();

      double getInputRowsPerSecond();

      double getProcessedRowsPerSecond();

      int getMetricsCount();

      boolean containsMetrics(String var1);

      /** @deprecated */
      @Deprecated
      Map getMetrics();

      Map getMetricsMap();

      String getMetricsOrDefault(String var1, String var2);

      String getMetricsOrThrow(String var1);
   }

   public interface SparkPlanGraphClusterWrapperOrBuilder extends MessageOrBuilder {
      long getId();

      boolean hasName();

      String getName();

      ByteString getNameBytes();

      boolean hasDesc();

      String getDesc();

      ByteString getDescBytes();

      List getNodesList();

      SparkPlanGraphNodeWrapper getNodes(int var1);

      int getNodesCount();

      List getNodesOrBuilderList();

      SparkPlanGraphNodeWrapperOrBuilder getNodesOrBuilder(int var1);

      List getMetricsList();

      SQLPlanMetric getMetrics(int var1);

      int getMetricsCount();

      List getMetricsOrBuilderList();

      SQLPlanMetricOrBuilder getMetricsOrBuilder(int var1);
   }

   public interface SparkPlanGraphEdgeOrBuilder extends MessageOrBuilder {
      long getFromId();

      long getToId();
   }

   public interface SparkPlanGraphNodeOrBuilder extends MessageOrBuilder {
      long getId();

      boolean hasName();

      String getName();

      ByteString getNameBytes();

      boolean hasDesc();

      String getDesc();

      ByteString getDescBytes();

      List getMetricsList();

      SQLPlanMetric getMetrics(int var1);

      int getMetricsCount();

      List getMetricsOrBuilderList();

      SQLPlanMetricOrBuilder getMetricsOrBuilder(int var1);
   }

   public interface SparkPlanGraphNodeWrapperOrBuilder extends MessageOrBuilder {
      boolean hasNode();

      SparkPlanGraphNode getNode();

      SparkPlanGraphNodeOrBuilder getNodeOrBuilder();

      boolean hasCluster();

      SparkPlanGraphClusterWrapper getCluster();

      SparkPlanGraphClusterWrapperOrBuilder getClusterOrBuilder();

      SparkPlanGraphNodeWrapper.WrapperCase getWrapperCase();
   }

   public interface SparkPlanGraphWrapperOrBuilder extends MessageOrBuilder {
      long getExecutionId();

      List getNodesList();

      SparkPlanGraphNodeWrapper getNodes(int var1);

      int getNodesCount();

      List getNodesOrBuilderList();

      SparkPlanGraphNodeWrapperOrBuilder getNodesOrBuilder(int var1);

      List getEdgesList();

      SparkPlanGraphEdge getEdges(int var1);

      int getEdgesCount();

      List getEdgesOrBuilderList();

      SparkPlanGraphEdgeOrBuilder getEdgesOrBuilder(int var1);
   }

   public interface SpeculationStageSummaryOrBuilder extends MessageOrBuilder {
      int getNumTasks();

      int getNumActiveTasks();

      int getNumCompletedTasks();

      int getNumFailedTasks();

      int getNumKilledTasks();
   }

   public interface SpeculationStageSummaryWrapperOrBuilder extends MessageOrBuilder {
      long getStageId();

      int getStageAttemptId();

      boolean hasInfo();

      SpeculationStageSummary getInfo();

      SpeculationStageSummaryOrBuilder getInfoOrBuilder();
   }

   public interface StageDataOrBuilder extends MessageOrBuilder {
      int getStatusValue();

      StageStatus getStatus();

      long getStageId();

      int getAttemptId();

      int getNumTasks();

      int getNumActiveTasks();

      int getNumCompleteTasks();

      int getNumFailedTasks();

      int getNumKilledTasks();

      int getNumCompletedIndices();

      boolean hasSubmissionTime();

      long getSubmissionTime();

      boolean hasFirstTaskLaunchedTime();

      long getFirstTaskLaunchedTime();

      boolean hasCompletionTime();

      long getCompletionTime();

      boolean hasFailureReason();

      String getFailureReason();

      ByteString getFailureReasonBytes();

      long getExecutorDeserializeTime();

      long getExecutorDeserializeCpuTime();

      long getExecutorRunTime();

      long getExecutorCpuTime();

      long getResultSize();

      long getJvmGcTime();

      long getResultSerializationTime();

      long getMemoryBytesSpilled();

      long getDiskBytesSpilled();

      long getPeakExecutionMemory();

      long getInputBytes();

      long getInputRecords();

      long getOutputBytes();

      long getOutputRecords();

      long getShuffleRemoteBlocksFetched();

      long getShuffleLocalBlocksFetched();

      long getShuffleFetchWaitTime();

      long getShuffleRemoteBytesRead();

      long getShuffleRemoteBytesReadToDisk();

      long getShuffleLocalBytesRead();

      long getShuffleReadBytes();

      long getShuffleReadRecords();

      long getShuffleWriteBytes();

      long getShuffleWriteTime();

      long getShuffleWriteRecords();

      boolean hasName();

      String getName();

      ByteString getNameBytes();

      boolean hasDescription();

      String getDescription();

      ByteString getDescriptionBytes();

      boolean hasDetails();

      String getDetails();

      ByteString getDetailsBytes();

      boolean hasSchedulingPool();

      String getSchedulingPool();

      ByteString getSchedulingPoolBytes();

      List getRddIdsList();

      int getRddIdsCount();

      long getRddIds(int var1);

      List getAccumulatorUpdatesList();

      AccumulableInfo getAccumulatorUpdates(int var1);

      int getAccumulatorUpdatesCount();

      List getAccumulatorUpdatesOrBuilderList();

      AccumulableInfoOrBuilder getAccumulatorUpdatesOrBuilder(int var1);

      int getTasksCount();

      boolean containsTasks(long var1);

      /** @deprecated */
      @Deprecated
      Map getTasks();

      Map getTasksMap();

      TaskData getTasksOrDefault(long var1, TaskData var3);

      TaskData getTasksOrThrow(long var1);

      int getExecutorSummaryCount();

      boolean containsExecutorSummary(String var1);

      /** @deprecated */
      @Deprecated
      Map getExecutorSummary();

      Map getExecutorSummaryMap();

      ExecutorStageSummary getExecutorSummaryOrDefault(String var1, ExecutorStageSummary var2);

      ExecutorStageSummary getExecutorSummaryOrThrow(String var1);

      boolean hasSpeculationSummary();

      SpeculationStageSummary getSpeculationSummary();

      SpeculationStageSummaryOrBuilder getSpeculationSummaryOrBuilder();

      int getKilledTasksSummaryCount();

      boolean containsKilledTasksSummary(String var1);

      /** @deprecated */
      @Deprecated
      Map getKilledTasksSummary();

      Map getKilledTasksSummaryMap();

      int getKilledTasksSummaryOrDefault(String var1, int var2);

      int getKilledTasksSummaryOrThrow(String var1);

      int getResourceProfileId();

      boolean hasPeakExecutorMetrics();

      ExecutorMetrics getPeakExecutorMetrics();

      ExecutorMetricsOrBuilder getPeakExecutorMetricsOrBuilder();

      boolean hasTaskMetricsDistributions();

      TaskMetricDistributions getTaskMetricsDistributions();

      TaskMetricDistributionsOrBuilder getTaskMetricsDistributionsOrBuilder();

      boolean hasExecutorMetricsDistributions();

      ExecutorMetricsDistributions getExecutorMetricsDistributions();

      ExecutorMetricsDistributionsOrBuilder getExecutorMetricsDistributionsOrBuilder();

      long getShuffleCorruptMergedBlockChunks();

      long getShuffleMergedFetchFallbackCount();

      long getShuffleMergedRemoteBlocksFetched();

      long getShuffleMergedLocalBlocksFetched();

      long getShuffleMergedRemoteChunksFetched();

      long getShuffleMergedLocalChunksFetched();

      long getShuffleMergedRemoteBytesRead();

      long getShuffleMergedLocalBytesRead();

      long getShuffleRemoteReqsDuration();

      long getShuffleMergedRemoteReqsDuration();

      boolean getIsShufflePushEnabled();

      int getShuffleMergersCount();
   }

   public interface StageDataWrapperOrBuilder extends MessageOrBuilder {
      boolean hasInfo();

      StageData getInfo();

      StageDataOrBuilder getInfoOrBuilder();

      List getJobIdsList();

      int getJobIdsCount();

      long getJobIds(int var1);

      int getLocalityCount();

      boolean containsLocality(String var1);

      /** @deprecated */
      @Deprecated
      Map getLocality();

      Map getLocalityMap();

      long getLocalityOrDefault(String var1, long var2);

      long getLocalityOrThrow(String var1);
   }

   public static final class StateOperatorProgress extends GeneratedMessage implements StateOperatorProgressOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int OPERATOR_NAME_FIELD_NUMBER = 1;
      private volatile Object operatorName_ = "";
      public static final int NUM_ROWS_TOTAL_FIELD_NUMBER = 2;
      private long numRowsTotal_ = 0L;
      public static final int NUM_ROWS_UPDATED_FIELD_NUMBER = 3;
      private long numRowsUpdated_ = 0L;
      public static final int ALL_UPDATES_TIME_MS_FIELD_NUMBER = 4;
      private long allUpdatesTimeMs_ = 0L;
      public static final int NUM_ROWS_REMOVED_FIELD_NUMBER = 5;
      private long numRowsRemoved_ = 0L;
      public static final int ALL_REMOVALS_TIME_MS_FIELD_NUMBER = 6;
      private long allRemovalsTimeMs_ = 0L;
      public static final int COMMIT_TIME_MS_FIELD_NUMBER = 7;
      private long commitTimeMs_ = 0L;
      public static final int MEMORY_USED_BYTES_FIELD_NUMBER = 8;
      private long memoryUsedBytes_ = 0L;
      public static final int NUM_ROWS_DROPPED_BY_WATERMARK_FIELD_NUMBER = 9;
      private long numRowsDroppedByWatermark_ = 0L;
      public static final int NUM_SHUFFLE_PARTITIONS_FIELD_NUMBER = 10;
      private long numShufflePartitions_ = 0L;
      public static final int NUM_STATE_STORE_INSTANCES_FIELD_NUMBER = 11;
      private long numStateStoreInstances_ = 0L;
      public static final int CUSTOM_METRICS_FIELD_NUMBER = 12;
      private MapField customMetrics_;
      private byte memoizedIsInitialized = -1;
      private static final StateOperatorProgress DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private StateOperatorProgress(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private StateOperatorProgress() {
         this.operatorName_ = "";
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 12 -> {
               return this.internalGetCustomMetrics();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_fieldAccessorTable.ensureFieldAccessorsInitialized(StateOperatorProgress.class, Builder.class);
      }

      public boolean hasOperatorName() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getOperatorName() {
         Object ref = this.operatorName_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.operatorName_ = s;
            return s;
         }
      }

      public ByteString getOperatorNameBytes() {
         Object ref = this.operatorName_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.operatorName_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getNumRowsTotal() {
         return this.numRowsTotal_;
      }

      public long getNumRowsUpdated() {
         return this.numRowsUpdated_;
      }

      public long getAllUpdatesTimeMs() {
         return this.allUpdatesTimeMs_;
      }

      public long getNumRowsRemoved() {
         return this.numRowsRemoved_;
      }

      public long getAllRemovalsTimeMs() {
         return this.allRemovalsTimeMs_;
      }

      public long getCommitTimeMs() {
         return this.commitTimeMs_;
      }

      public long getMemoryUsedBytes() {
         return this.memoryUsedBytes_;
      }

      public long getNumRowsDroppedByWatermark() {
         return this.numRowsDroppedByWatermark_;
      }

      public long getNumShufflePartitions() {
         return this.numShufflePartitions_;
      }

      public long getNumStateStoreInstances() {
         return this.numStateStoreInstances_;
      }

      private MapField internalGetCustomMetrics() {
         return this.customMetrics_ == null ? MapField.emptyMapField(StoreTypes.StateOperatorProgress.CustomMetricsDefaultEntryHolder.defaultEntry) : this.customMetrics_;
      }

      public int getCustomMetricsCount() {
         return this.internalGetCustomMetrics().getMap().size();
      }

      public boolean containsCustomMetrics(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetCustomMetrics().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getCustomMetrics() {
         return this.getCustomMetricsMap();
      }

      public Map getCustomMetricsMap() {
         return this.internalGetCustomMetrics().getMap();
      }

      public long getCustomMetricsOrDefault(String key, long defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Long> map = this.internalGetCustomMetrics().getMap();
            return map.containsKey(key) ? (Long)map.get(key) : defaultValue;
         }
      }

      public long getCustomMetricsOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Long> map = this.internalGetCustomMetrics().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (Long)map.get(key);
            }
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.operatorName_);
         }

         if (this.numRowsTotal_ != 0L) {
            output.writeInt64(2, this.numRowsTotal_);
         }

         if (this.numRowsUpdated_ != 0L) {
            output.writeInt64(3, this.numRowsUpdated_);
         }

         if (this.allUpdatesTimeMs_ != 0L) {
            output.writeInt64(4, this.allUpdatesTimeMs_);
         }

         if (this.numRowsRemoved_ != 0L) {
            output.writeInt64(5, this.numRowsRemoved_);
         }

         if (this.allRemovalsTimeMs_ != 0L) {
            output.writeInt64(6, this.allRemovalsTimeMs_);
         }

         if (this.commitTimeMs_ != 0L) {
            output.writeInt64(7, this.commitTimeMs_);
         }

         if (this.memoryUsedBytes_ != 0L) {
            output.writeInt64(8, this.memoryUsedBytes_);
         }

         if (this.numRowsDroppedByWatermark_ != 0L) {
            output.writeInt64(9, this.numRowsDroppedByWatermark_);
         }

         if (this.numShufflePartitions_ != 0L) {
            output.writeInt64(10, this.numShufflePartitions_);
         }

         if (this.numStateStoreInstances_ != 0L) {
            output.writeInt64(11, this.numStateStoreInstances_);
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetCustomMetrics(), StoreTypes.StateOperatorProgress.CustomMetricsDefaultEntryHolder.defaultEntry, 12);
         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.operatorName_);
            }

            if (this.numRowsTotal_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.numRowsTotal_);
            }

            if (this.numRowsUpdated_ != 0L) {
               size += CodedOutputStream.computeInt64Size(3, this.numRowsUpdated_);
            }

            if (this.allUpdatesTimeMs_ != 0L) {
               size += CodedOutputStream.computeInt64Size(4, this.allUpdatesTimeMs_);
            }

            if (this.numRowsRemoved_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.numRowsRemoved_);
            }

            if (this.allRemovalsTimeMs_ != 0L) {
               size += CodedOutputStream.computeInt64Size(6, this.allRemovalsTimeMs_);
            }

            if (this.commitTimeMs_ != 0L) {
               size += CodedOutputStream.computeInt64Size(7, this.commitTimeMs_);
            }

            if (this.memoryUsedBytes_ != 0L) {
               size += CodedOutputStream.computeInt64Size(8, this.memoryUsedBytes_);
            }

            if (this.numRowsDroppedByWatermark_ != 0L) {
               size += CodedOutputStream.computeInt64Size(9, this.numRowsDroppedByWatermark_);
            }

            if (this.numShufflePartitions_ != 0L) {
               size += CodedOutputStream.computeInt64Size(10, this.numShufflePartitions_);
            }

            if (this.numStateStoreInstances_ != 0L) {
               size += CodedOutputStream.computeInt64Size(11, this.numStateStoreInstances_);
            }

            for(Map.Entry entry : this.internalGetCustomMetrics().getMap().entrySet()) {
               MapEntry<String, Long> customMetrics__ = StoreTypes.StateOperatorProgress.CustomMetricsDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((Long)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(12, customMetrics__);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof StateOperatorProgress)) {
            return super.equals(obj);
         } else {
            StateOperatorProgress other = (StateOperatorProgress)obj;
            if (this.hasOperatorName() != other.hasOperatorName()) {
               return false;
            } else if (this.hasOperatorName() && !this.getOperatorName().equals(other.getOperatorName())) {
               return false;
            } else if (this.getNumRowsTotal() != other.getNumRowsTotal()) {
               return false;
            } else if (this.getNumRowsUpdated() != other.getNumRowsUpdated()) {
               return false;
            } else if (this.getAllUpdatesTimeMs() != other.getAllUpdatesTimeMs()) {
               return false;
            } else if (this.getNumRowsRemoved() != other.getNumRowsRemoved()) {
               return false;
            } else if (this.getAllRemovalsTimeMs() != other.getAllRemovalsTimeMs()) {
               return false;
            } else if (this.getCommitTimeMs() != other.getCommitTimeMs()) {
               return false;
            } else if (this.getMemoryUsedBytes() != other.getMemoryUsedBytes()) {
               return false;
            } else if (this.getNumRowsDroppedByWatermark() != other.getNumRowsDroppedByWatermark()) {
               return false;
            } else if (this.getNumShufflePartitions() != other.getNumShufflePartitions()) {
               return false;
            } else if (this.getNumStateStoreInstances() != other.getNumStateStoreInstances()) {
               return false;
            } else if (!this.internalGetCustomMetrics().equals(other.internalGetCustomMetrics())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasOperatorName()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getOperatorName().hashCode();
            }

            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getNumRowsTotal());
            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashLong(this.getNumRowsUpdated());
            hash = 37 * hash + 4;
            hash = 53 * hash + Internal.hashLong(this.getAllUpdatesTimeMs());
            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getNumRowsRemoved());
            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(this.getAllRemovalsTimeMs());
            hash = 37 * hash + 7;
            hash = 53 * hash + Internal.hashLong(this.getCommitTimeMs());
            hash = 37 * hash + 8;
            hash = 53 * hash + Internal.hashLong(this.getMemoryUsedBytes());
            hash = 37 * hash + 9;
            hash = 53 * hash + Internal.hashLong(this.getNumRowsDroppedByWatermark());
            hash = 37 * hash + 10;
            hash = 53 * hash + Internal.hashLong(this.getNumShufflePartitions());
            hash = 37 * hash + 11;
            hash = 53 * hash + Internal.hashLong(this.getNumStateStoreInstances());
            if (!this.internalGetCustomMetrics().getMap().isEmpty()) {
               hash = 37 * hash + 12;
               hash = 53 * hash + this.internalGetCustomMetrics().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static StateOperatorProgress parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (StateOperatorProgress)PARSER.parseFrom(data);
      }

      public static StateOperatorProgress parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StateOperatorProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StateOperatorProgress parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (StateOperatorProgress)PARSER.parseFrom(data);
      }

      public static StateOperatorProgress parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StateOperatorProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StateOperatorProgress parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (StateOperatorProgress)PARSER.parseFrom(data);
      }

      public static StateOperatorProgress parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StateOperatorProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StateOperatorProgress parseFrom(InputStream input) throws IOException {
         return (StateOperatorProgress)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StateOperatorProgress parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StateOperatorProgress)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static StateOperatorProgress parseDelimitedFrom(InputStream input) throws IOException {
         return (StateOperatorProgress)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static StateOperatorProgress parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StateOperatorProgress)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static StateOperatorProgress parseFrom(CodedInputStream input) throws IOException {
         return (StateOperatorProgress)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StateOperatorProgress parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StateOperatorProgress)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(StateOperatorProgress prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static StateOperatorProgress getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public StateOperatorProgress getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", StateOperatorProgress.class.getName());
         DEFAULT_INSTANCE = new StateOperatorProgress();
         PARSER = new AbstractParser() {
            public StateOperatorProgress parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.StateOperatorProgress.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements StateOperatorProgressOrBuilder {
         private int bitField0_;
         private Object operatorName_ = "";
         private long numRowsTotal_;
         private long numRowsUpdated_;
         private long allUpdatesTimeMs_;
         private long numRowsRemoved_;
         private long allRemovalsTimeMs_;
         private long commitTimeMs_;
         private long memoryUsedBytes_;
         private long numRowsDroppedByWatermark_;
         private long numShufflePartitions_;
         private long numStateStoreInstances_;
         private MapField customMetrics_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 12 -> {
                  return this.internalGetCustomMetrics();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 12 -> {
                  return this.internalGetMutableCustomMetrics();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_fieldAccessorTable.ensureFieldAccessorsInitialized(StateOperatorProgress.class, Builder.class);
         }

         private Builder() {
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.operatorName_ = "";
            this.numRowsTotal_ = 0L;
            this.numRowsUpdated_ = 0L;
            this.allUpdatesTimeMs_ = 0L;
            this.numRowsRemoved_ = 0L;
            this.allRemovalsTimeMs_ = 0L;
            this.commitTimeMs_ = 0L;
            this.memoryUsedBytes_ = 0L;
            this.numRowsDroppedByWatermark_ = 0L;
            this.numShufflePartitions_ = 0L;
            this.numStateStoreInstances_ = 0L;
            this.internalGetMutableCustomMetrics().clear();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_descriptor;
         }

         public StateOperatorProgress getDefaultInstanceForType() {
            return StoreTypes.StateOperatorProgress.getDefaultInstance();
         }

         public StateOperatorProgress build() {
            StateOperatorProgress result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public StateOperatorProgress buildPartial() {
            StateOperatorProgress result = new StateOperatorProgress(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(StateOperatorProgress result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.operatorName_ = this.operatorName_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.numRowsTotal_ = this.numRowsTotal_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.numRowsUpdated_ = this.numRowsUpdated_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.allUpdatesTimeMs_ = this.allUpdatesTimeMs_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.numRowsRemoved_ = this.numRowsRemoved_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.allRemovalsTimeMs_ = this.allRemovalsTimeMs_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.commitTimeMs_ = this.commitTimeMs_;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.memoryUsedBytes_ = this.memoryUsedBytes_;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.numRowsDroppedByWatermark_ = this.numRowsDroppedByWatermark_;
            }

            if ((from_bitField0_ & 512) != 0) {
               result.numShufflePartitions_ = this.numShufflePartitions_;
            }

            if ((from_bitField0_ & 1024) != 0) {
               result.numStateStoreInstances_ = this.numStateStoreInstances_;
            }

            if ((from_bitField0_ & 2048) != 0) {
               result.customMetrics_ = this.internalGetCustomMetrics();
               result.customMetrics_.makeImmutable();
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof StateOperatorProgress) {
               return this.mergeFrom((StateOperatorProgress)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(StateOperatorProgress other) {
            if (other == StoreTypes.StateOperatorProgress.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasOperatorName()) {
                  this.operatorName_ = other.operatorName_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.getNumRowsTotal() != 0L) {
                  this.setNumRowsTotal(other.getNumRowsTotal());
               }

               if (other.getNumRowsUpdated() != 0L) {
                  this.setNumRowsUpdated(other.getNumRowsUpdated());
               }

               if (other.getAllUpdatesTimeMs() != 0L) {
                  this.setAllUpdatesTimeMs(other.getAllUpdatesTimeMs());
               }

               if (other.getNumRowsRemoved() != 0L) {
                  this.setNumRowsRemoved(other.getNumRowsRemoved());
               }

               if (other.getAllRemovalsTimeMs() != 0L) {
                  this.setAllRemovalsTimeMs(other.getAllRemovalsTimeMs());
               }

               if (other.getCommitTimeMs() != 0L) {
                  this.setCommitTimeMs(other.getCommitTimeMs());
               }

               if (other.getMemoryUsedBytes() != 0L) {
                  this.setMemoryUsedBytes(other.getMemoryUsedBytes());
               }

               if (other.getNumRowsDroppedByWatermark() != 0L) {
                  this.setNumRowsDroppedByWatermark(other.getNumRowsDroppedByWatermark());
               }

               if (other.getNumShufflePartitions() != 0L) {
                  this.setNumShufflePartitions(other.getNumShufflePartitions());
               }

               if (other.getNumStateStoreInstances() != 0L) {
                  this.setNumStateStoreInstances(other.getNumStateStoreInstances());
               }

               this.internalGetMutableCustomMetrics().mergeFrom(other.internalGetCustomMetrics());
               this.bitField0_ |= 2048;
               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.operatorName_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.numRowsTotal_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.numRowsUpdated_ = input.readInt64();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.allUpdatesTimeMs_ = input.readInt64();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.numRowsRemoved_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.allRemovalsTimeMs_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.commitTimeMs_ = input.readInt64();
                           this.bitField0_ |= 64;
                           break;
                        case 64:
                           this.memoryUsedBytes_ = input.readInt64();
                           this.bitField0_ |= 128;
                           break;
                        case 72:
                           this.numRowsDroppedByWatermark_ = input.readInt64();
                           this.bitField0_ |= 256;
                           break;
                        case 80:
                           this.numShufflePartitions_ = input.readInt64();
                           this.bitField0_ |= 512;
                           break;
                        case 88:
                           this.numStateStoreInstances_ = input.readInt64();
                           this.bitField0_ |= 1024;
                           break;
                        case 98:
                           MapEntry<String, Long> customMetrics__ = (MapEntry)input.readMessage(StoreTypes.StateOperatorProgress.CustomMetricsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableCustomMetrics().getMutableMap().put((String)customMetrics__.getKey(), (Long)customMetrics__.getValue());
                           this.bitField0_ |= 2048;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasOperatorName() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getOperatorName() {
            Object ref = this.operatorName_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.operatorName_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getOperatorNameBytes() {
            Object ref = this.operatorName_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.operatorName_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setOperatorName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.operatorName_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearOperatorName() {
            this.operatorName_ = StoreTypes.StateOperatorProgress.getDefaultInstance().getOperatorName();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setOperatorNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StateOperatorProgress.checkByteStringIsUtf8(value);
               this.operatorName_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public long getNumRowsTotal() {
            return this.numRowsTotal_;
         }

         public Builder setNumRowsTotal(long value) {
            this.numRowsTotal_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearNumRowsTotal() {
            this.bitField0_ &= -3;
            this.numRowsTotal_ = 0L;
            this.onChanged();
            return this;
         }

         public long getNumRowsUpdated() {
            return this.numRowsUpdated_;
         }

         public Builder setNumRowsUpdated(long value) {
            this.numRowsUpdated_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearNumRowsUpdated() {
            this.bitField0_ &= -5;
            this.numRowsUpdated_ = 0L;
            this.onChanged();
            return this;
         }

         public long getAllUpdatesTimeMs() {
            return this.allUpdatesTimeMs_;
         }

         public Builder setAllUpdatesTimeMs(long value) {
            this.allUpdatesTimeMs_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearAllUpdatesTimeMs() {
            this.bitField0_ &= -9;
            this.allUpdatesTimeMs_ = 0L;
            this.onChanged();
            return this;
         }

         public long getNumRowsRemoved() {
            return this.numRowsRemoved_;
         }

         public Builder setNumRowsRemoved(long value) {
            this.numRowsRemoved_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearNumRowsRemoved() {
            this.bitField0_ &= -17;
            this.numRowsRemoved_ = 0L;
            this.onChanged();
            return this;
         }

         public long getAllRemovalsTimeMs() {
            return this.allRemovalsTimeMs_;
         }

         public Builder setAllRemovalsTimeMs(long value) {
            this.allRemovalsTimeMs_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearAllRemovalsTimeMs() {
            this.bitField0_ &= -33;
            this.allRemovalsTimeMs_ = 0L;
            this.onChanged();
            return this;
         }

         public long getCommitTimeMs() {
            return this.commitTimeMs_;
         }

         public Builder setCommitTimeMs(long value) {
            this.commitTimeMs_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearCommitTimeMs() {
            this.bitField0_ &= -65;
            this.commitTimeMs_ = 0L;
            this.onChanged();
            return this;
         }

         public long getMemoryUsedBytes() {
            return this.memoryUsedBytes_;
         }

         public Builder setMemoryUsedBytes(long value) {
            this.memoryUsedBytes_ = value;
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryUsedBytes() {
            this.bitField0_ &= -129;
            this.memoryUsedBytes_ = 0L;
            this.onChanged();
            return this;
         }

         public long getNumRowsDroppedByWatermark() {
            return this.numRowsDroppedByWatermark_;
         }

         public Builder setNumRowsDroppedByWatermark(long value) {
            this.numRowsDroppedByWatermark_ = value;
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearNumRowsDroppedByWatermark() {
            this.bitField0_ &= -257;
            this.numRowsDroppedByWatermark_ = 0L;
            this.onChanged();
            return this;
         }

         public long getNumShufflePartitions() {
            return this.numShufflePartitions_;
         }

         public Builder setNumShufflePartitions(long value) {
            this.numShufflePartitions_ = value;
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder clearNumShufflePartitions() {
            this.bitField0_ &= -513;
            this.numShufflePartitions_ = 0L;
            this.onChanged();
            return this;
         }

         public long getNumStateStoreInstances() {
            return this.numStateStoreInstances_;
         }

         public Builder setNumStateStoreInstances(long value) {
            this.numStateStoreInstances_ = value;
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder clearNumStateStoreInstances() {
            this.bitField0_ &= -1025;
            this.numStateStoreInstances_ = 0L;
            this.onChanged();
            return this;
         }

         private MapField internalGetCustomMetrics() {
            return this.customMetrics_ == null ? MapField.emptyMapField(StoreTypes.StateOperatorProgress.CustomMetricsDefaultEntryHolder.defaultEntry) : this.customMetrics_;
         }

         private MapField internalGetMutableCustomMetrics() {
            if (this.customMetrics_ == null) {
               this.customMetrics_ = MapField.newMapField(StoreTypes.StateOperatorProgress.CustomMetricsDefaultEntryHolder.defaultEntry);
            }

            if (!this.customMetrics_.isMutable()) {
               this.customMetrics_ = this.customMetrics_.copy();
            }

            this.bitField0_ |= 2048;
            this.onChanged();
            return this.customMetrics_;
         }

         public int getCustomMetricsCount() {
            return this.internalGetCustomMetrics().getMap().size();
         }

         public boolean containsCustomMetrics(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetCustomMetrics().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getCustomMetrics() {
            return this.getCustomMetricsMap();
         }

         public Map getCustomMetricsMap() {
            return this.internalGetCustomMetrics().getMap();
         }

         public long getCustomMetricsOrDefault(String key, long defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Long> map = this.internalGetCustomMetrics().getMap();
               return map.containsKey(key) ? (Long)map.get(key) : defaultValue;
            }
         }

         public long getCustomMetricsOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Long> map = this.internalGetCustomMetrics().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (Long)map.get(key);
               }
            }
         }

         public Builder clearCustomMetrics() {
            this.bitField0_ &= -2049;
            this.internalGetMutableCustomMetrics().getMutableMap().clear();
            return this;
         }

         public Builder removeCustomMetrics(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableCustomMetrics().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableCustomMetrics() {
            this.bitField0_ |= 2048;
            return this.internalGetMutableCustomMetrics().getMutableMap();
         }

         public Builder putCustomMetrics(String key, long value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableCustomMetrics().getMutableMap().put(key, value);
               this.bitField0_ |= 2048;
               return this;
            }
         }

         public Builder putAllCustomMetrics(Map values) {
            this.internalGetMutableCustomMetrics().getMutableMap().putAll(values);
            this.bitField0_ |= 2048;
            return this;
         }
      }

      private static final class CustomMetricsDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_StateOperatorProgress_CustomMetricsEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);
         }
      }
   }

   public interface StateOperatorProgressOrBuilder extends MessageOrBuilder {
      boolean hasOperatorName();

      String getOperatorName();

      ByteString getOperatorNameBytes();

      long getNumRowsTotal();

      long getNumRowsUpdated();

      long getAllUpdatesTimeMs();

      long getNumRowsRemoved();

      long getAllRemovalsTimeMs();

      long getCommitTimeMs();

      long getMemoryUsedBytes();

      long getNumRowsDroppedByWatermark();

      long getNumShufflePartitions();

      long getNumStateStoreInstances();

      int getCustomMetricsCount();

      boolean containsCustomMetrics(String var1);

      /** @deprecated */
      @Deprecated
      Map getCustomMetrics();

      Map getCustomMetricsMap();

      long getCustomMetricsOrDefault(String var1, long var2);

      long getCustomMetricsOrThrow(String var1);
   }

   public interface StreamBlockDataOrBuilder extends MessageOrBuilder {
      boolean hasName();

      String getName();

      ByteString getNameBytes();

      boolean hasExecutorId();

      String getExecutorId();

      ByteString getExecutorIdBytes();

      boolean hasHostPort();

      String getHostPort();

      ByteString getHostPortBytes();

      boolean hasStorageLevel();

      String getStorageLevel();

      ByteString getStorageLevelBytes();

      boolean getUseMemory();

      boolean getUseDisk();

      boolean getDeserialized();

      long getMemSize();

      long getDiskSize();
   }

   public interface StreamingQueryDataOrBuilder extends MessageOrBuilder {
      boolean hasName();

      String getName();

      ByteString getNameBytes();

      boolean hasId();

      String getId();

      ByteString getIdBytes();

      boolean hasRunId();

      String getRunId();

      ByteString getRunIdBytes();

      boolean getIsActive();

      boolean hasException();

      String getException();

      ByteString getExceptionBytes();

      long getStartTimestamp();

      boolean hasEndTimestamp();

      long getEndTimestamp();
   }

   public static final class StreamingQueryProgress extends GeneratedMessage implements StreamingQueryProgressOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int ID_FIELD_NUMBER = 1;
      private volatile Object id_ = "";
      public static final int RUN_ID_FIELD_NUMBER = 2;
      private volatile Object runId_ = "";
      public static final int NAME_FIELD_NUMBER = 3;
      private volatile Object name_ = "";
      public static final int TIMESTAMP_FIELD_NUMBER = 4;
      private volatile Object timestamp_ = "";
      public static final int BATCH_ID_FIELD_NUMBER = 5;
      private long batchId_ = 0L;
      public static final int BATCH_DURATION_FIELD_NUMBER = 6;
      private long batchDuration_ = 0L;
      public static final int DURATION_MS_FIELD_NUMBER = 7;
      private MapField durationMs_;
      public static final int EVENT_TIME_FIELD_NUMBER = 8;
      private MapField eventTime_;
      public static final int STATE_OPERATORS_FIELD_NUMBER = 9;
      private List stateOperators_;
      public static final int SOURCES_FIELD_NUMBER = 10;
      private List sources_;
      public static final int SINK_FIELD_NUMBER = 11;
      private SinkProgress sink_;
      public static final int OBSERVED_METRICS_FIELD_NUMBER = 12;
      private MapField observedMetrics_;
      private byte memoizedIsInitialized = -1;
      private static final StreamingQueryProgress DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private StreamingQueryProgress(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private StreamingQueryProgress() {
         this.id_ = "";
         this.runId_ = "";
         this.name_ = "";
         this.timestamp_ = "";
         this.stateOperators_ = Collections.emptyList();
         this.sources_ = Collections.emptyList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_descriptor;
      }

      protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
         switch (number) {
            case 7 -> {
               return this.internalGetDurationMs();
            }
            case 8 -> {
               return this.internalGetEventTime();
            }
            case 12 -> {
               return this.internalGetObservedMetrics();
            }
            default -> throw new RuntimeException("Invalid map field number: " + number);
         }
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_fieldAccessorTable.ensureFieldAccessorsInitialized(StreamingQueryProgress.class, Builder.class);
      }

      public boolean hasId() {
         return (this.bitField0_ & 1) != 0;
      }

      public String getId() {
         Object ref = this.id_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.id_ = s;
            return s;
         }
      }

      public ByteString getIdBytes() {
         Object ref = this.id_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.id_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasRunId() {
         return (this.bitField0_ & 2) != 0;
      }

      public String getRunId() {
         Object ref = this.runId_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.runId_ = s;
            return s;
         }
      }

      public ByteString getRunIdBytes() {
         Object ref = this.runId_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.runId_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasName() {
         return (this.bitField0_ & 4) != 0;
      }

      public String getName() {
         Object ref = this.name_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.name_ = s;
            return s;
         }
      }

      public ByteString getNameBytes() {
         Object ref = this.name_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.name_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public boolean hasTimestamp() {
         return (this.bitField0_ & 8) != 0;
      }

      public String getTimestamp() {
         Object ref = this.timestamp_;
         if (ref instanceof String) {
            return (String)ref;
         } else {
            ByteString bs = (ByteString)ref;
            String s = bs.toStringUtf8();
            this.timestamp_ = s;
            return s;
         }
      }

      public ByteString getTimestampBytes() {
         Object ref = this.timestamp_;
         if (ref instanceof String) {
            ByteString b = ByteString.copyFromUtf8((String)ref);
            this.timestamp_ = b;
            return b;
         } else {
            return (ByteString)ref;
         }
      }

      public long getBatchId() {
         return this.batchId_;
      }

      public long getBatchDuration() {
         return this.batchDuration_;
      }

      private MapField internalGetDurationMs() {
         return this.durationMs_ == null ? MapField.emptyMapField(StoreTypes.StreamingQueryProgress.DurationMsDefaultEntryHolder.defaultEntry) : this.durationMs_;
      }

      public int getDurationMsCount() {
         return this.internalGetDurationMs().getMap().size();
      }

      public boolean containsDurationMs(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetDurationMs().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getDurationMs() {
         return this.getDurationMsMap();
      }

      public Map getDurationMsMap() {
         return this.internalGetDurationMs().getMap();
      }

      public long getDurationMsOrDefault(String key, long defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Long> map = this.internalGetDurationMs().getMap();
            return map.containsKey(key) ? (Long)map.get(key) : defaultValue;
         }
      }

      public long getDurationMsOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, Long> map = this.internalGetDurationMs().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (Long)map.get(key);
            }
         }
      }

      private MapField internalGetEventTime() {
         return this.eventTime_ == null ? MapField.emptyMapField(StoreTypes.StreamingQueryProgress.EventTimeDefaultEntryHolder.defaultEntry) : this.eventTime_;
      }

      public int getEventTimeCount() {
         return this.internalGetEventTime().getMap().size();
      }

      public boolean containsEventTime(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetEventTime().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getEventTime() {
         return this.getEventTimeMap();
      }

      public Map getEventTimeMap() {
         return this.internalGetEventTime().getMap();
      }

      public String getEventTimeOrDefault(String key, String defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetEventTime().getMap();
            return map.containsKey(key) ? (String)map.get(key) : defaultValue;
         }
      }

      public String getEventTimeOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetEventTime().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (String)map.get(key);
            }
         }
      }

      public List getStateOperatorsList() {
         return this.stateOperators_;
      }

      public List getStateOperatorsOrBuilderList() {
         return this.stateOperators_;
      }

      public int getStateOperatorsCount() {
         return this.stateOperators_.size();
      }

      public StateOperatorProgress getStateOperators(int index) {
         return (StateOperatorProgress)this.stateOperators_.get(index);
      }

      public StateOperatorProgressOrBuilder getStateOperatorsOrBuilder(int index) {
         return (StateOperatorProgressOrBuilder)this.stateOperators_.get(index);
      }

      public List getSourcesList() {
         return this.sources_;
      }

      public List getSourcesOrBuilderList() {
         return this.sources_;
      }

      public int getSourcesCount() {
         return this.sources_.size();
      }

      public SourceProgress getSources(int index) {
         return (SourceProgress)this.sources_.get(index);
      }

      public SourceProgressOrBuilder getSourcesOrBuilder(int index) {
         return (SourceProgressOrBuilder)this.sources_.get(index);
      }

      public boolean hasSink() {
         return (this.bitField0_ & 16) != 0;
      }

      public SinkProgress getSink() {
         return this.sink_ == null ? StoreTypes.SinkProgress.getDefaultInstance() : this.sink_;
      }

      public SinkProgressOrBuilder getSinkOrBuilder() {
         return this.sink_ == null ? StoreTypes.SinkProgress.getDefaultInstance() : this.sink_;
      }

      private MapField internalGetObservedMetrics() {
         return this.observedMetrics_ == null ? MapField.emptyMapField(StoreTypes.StreamingQueryProgress.ObservedMetricsDefaultEntryHolder.defaultEntry) : this.observedMetrics_;
      }

      public int getObservedMetricsCount() {
         return this.internalGetObservedMetrics().getMap().size();
      }

      public boolean containsObservedMetrics(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            return this.internalGetObservedMetrics().getMap().containsKey(key);
         }
      }

      /** @deprecated */
      @Deprecated
      public Map getObservedMetrics() {
         return this.getObservedMetricsMap();
      }

      public Map getObservedMetricsMap() {
         return this.internalGetObservedMetrics().getMap();
      }

      public String getObservedMetricsOrDefault(String key, String defaultValue) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetObservedMetrics().getMap();
            return map.containsKey(key) ? (String)map.get(key) : defaultValue;
         }
      }

      public String getObservedMetricsOrThrow(String key) {
         if (key == null) {
            throw new NullPointerException("map key");
         } else {
            Map<String, String> map = this.internalGetObservedMetrics().getMap();
            if (!map.containsKey(key)) {
               throw new IllegalArgumentException();
            } else {
               return (String)map.get(key);
            }
         }
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            GeneratedMessage.writeString(output, 1, this.id_);
         }

         if ((this.bitField0_ & 2) != 0) {
            GeneratedMessage.writeString(output, 2, this.runId_);
         }

         if ((this.bitField0_ & 4) != 0) {
            GeneratedMessage.writeString(output, 3, this.name_);
         }

         if ((this.bitField0_ & 8) != 0) {
            GeneratedMessage.writeString(output, 4, this.timestamp_);
         }

         if (this.batchId_ != 0L) {
            output.writeInt64(5, this.batchId_);
         }

         if (this.batchDuration_ != 0L) {
            output.writeInt64(6, this.batchDuration_);
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetDurationMs(), StoreTypes.StreamingQueryProgress.DurationMsDefaultEntryHolder.defaultEntry, 7);
         GeneratedMessage.serializeStringMapTo(output, this.internalGetEventTime(), StoreTypes.StreamingQueryProgress.EventTimeDefaultEntryHolder.defaultEntry, 8);

         for(int i = 0; i < this.stateOperators_.size(); ++i) {
            output.writeMessage(9, (MessageLite)this.stateOperators_.get(i));
         }

         for(int i = 0; i < this.sources_.size(); ++i) {
            output.writeMessage(10, (MessageLite)this.sources_.get(i));
         }

         if ((this.bitField0_ & 16) != 0) {
            output.writeMessage(11, this.getSink());
         }

         GeneratedMessage.serializeStringMapTo(output, this.internalGetObservedMetrics(), StoreTypes.StreamingQueryProgress.ObservedMetricsDefaultEntryHolder.defaultEntry, 12);
         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += GeneratedMessage.computeStringSize(1, this.id_);
            }

            if ((this.bitField0_ & 2) != 0) {
               size += GeneratedMessage.computeStringSize(2, this.runId_);
            }

            if ((this.bitField0_ & 4) != 0) {
               size += GeneratedMessage.computeStringSize(3, this.name_);
            }

            if ((this.bitField0_ & 8) != 0) {
               size += GeneratedMessage.computeStringSize(4, this.timestamp_);
            }

            if (this.batchId_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.batchId_);
            }

            if (this.batchDuration_ != 0L) {
               size += CodedOutputStream.computeInt64Size(6, this.batchDuration_);
            }

            for(Map.Entry entry : this.internalGetDurationMs().getMap().entrySet()) {
               MapEntry<String, Long> durationMs__ = StoreTypes.StreamingQueryProgress.DurationMsDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((Long)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(7, durationMs__);
            }

            for(Map.Entry entry : this.internalGetEventTime().getMap().entrySet()) {
               MapEntry<String, String> eventTime__ = StoreTypes.StreamingQueryProgress.EventTimeDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((String)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(8, eventTime__);
            }

            for(int i = 0; i < this.stateOperators_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(9, (MessageLite)this.stateOperators_.get(i));
            }

            for(int i = 0; i < this.sources_.size(); ++i) {
               size += CodedOutputStream.computeMessageSize(10, (MessageLite)this.sources_.get(i));
            }

            if ((this.bitField0_ & 16) != 0) {
               size += CodedOutputStream.computeMessageSize(11, this.getSink());
            }

            for(Map.Entry entry : this.internalGetObservedMetrics().getMap().entrySet()) {
               MapEntry<String, String> observedMetrics__ = StoreTypes.StreamingQueryProgress.ObservedMetricsDefaultEntryHolder.defaultEntry.newBuilderForType().setKey((String)entry.getKey()).setValue((String)entry.getValue()).build();
               size += CodedOutputStream.computeMessageSize(12, observedMetrics__);
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof StreamingQueryProgress)) {
            return super.equals(obj);
         } else {
            StreamingQueryProgress other = (StreamingQueryProgress)obj;
            if (this.hasId() != other.hasId()) {
               return false;
            } else if (this.hasId() && !this.getId().equals(other.getId())) {
               return false;
            } else if (this.hasRunId() != other.hasRunId()) {
               return false;
            } else if (this.hasRunId() && !this.getRunId().equals(other.getRunId())) {
               return false;
            } else if (this.hasName() != other.hasName()) {
               return false;
            } else if (this.hasName() && !this.getName().equals(other.getName())) {
               return false;
            } else if (this.hasTimestamp() != other.hasTimestamp()) {
               return false;
            } else if (this.hasTimestamp() && !this.getTimestamp().equals(other.getTimestamp())) {
               return false;
            } else if (this.getBatchId() != other.getBatchId()) {
               return false;
            } else if (this.getBatchDuration() != other.getBatchDuration()) {
               return false;
            } else if (!this.internalGetDurationMs().equals(other.internalGetDurationMs())) {
               return false;
            } else if (!this.internalGetEventTime().equals(other.internalGetEventTime())) {
               return false;
            } else if (!this.getStateOperatorsList().equals(other.getStateOperatorsList())) {
               return false;
            } else if (!this.getSourcesList().equals(other.getSourcesList())) {
               return false;
            } else if (this.hasSink() != other.hasSink()) {
               return false;
            } else if (this.hasSink() && !this.getSink().equals(other.getSink())) {
               return false;
            } else if (!this.internalGetObservedMetrics().equals(other.internalGetObservedMetrics())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasId()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getId().hashCode();
            }

            if (this.hasRunId()) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getRunId().hashCode();
            }

            if (this.hasName()) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getName().hashCode();
            }

            if (this.hasTimestamp()) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getTimestamp().hashCode();
            }

            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getBatchId());
            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(this.getBatchDuration());
            if (!this.internalGetDurationMs().getMap().isEmpty()) {
               hash = 37 * hash + 7;
               hash = 53 * hash + this.internalGetDurationMs().hashCode();
            }

            if (!this.internalGetEventTime().getMap().isEmpty()) {
               hash = 37 * hash + 8;
               hash = 53 * hash + this.internalGetEventTime().hashCode();
            }

            if (this.getStateOperatorsCount() > 0) {
               hash = 37 * hash + 9;
               hash = 53 * hash + this.getStateOperatorsList().hashCode();
            }

            if (this.getSourcesCount() > 0) {
               hash = 37 * hash + 10;
               hash = 53 * hash + this.getSourcesList().hashCode();
            }

            if (this.hasSink()) {
               hash = 37 * hash + 11;
               hash = 53 * hash + this.getSink().hashCode();
            }

            if (!this.internalGetObservedMetrics().getMap().isEmpty()) {
               hash = 37 * hash + 12;
               hash = 53 * hash + this.internalGetObservedMetrics().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static StreamingQueryProgress parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (StreamingQueryProgress)PARSER.parseFrom(data);
      }

      public static StreamingQueryProgress parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamingQueryProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamingQueryProgress parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (StreamingQueryProgress)PARSER.parseFrom(data);
      }

      public static StreamingQueryProgress parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamingQueryProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamingQueryProgress parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (StreamingQueryProgress)PARSER.parseFrom(data);
      }

      public static StreamingQueryProgress parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamingQueryProgress)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamingQueryProgress parseFrom(InputStream input) throws IOException {
         return (StreamingQueryProgress)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StreamingQueryProgress parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamingQueryProgress)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static StreamingQueryProgress parseDelimitedFrom(InputStream input) throws IOException {
         return (StreamingQueryProgress)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static StreamingQueryProgress parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamingQueryProgress)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static StreamingQueryProgress parseFrom(CodedInputStream input) throws IOException {
         return (StreamingQueryProgress)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StreamingQueryProgress parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamingQueryProgress)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(StreamingQueryProgress prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static StreamingQueryProgress getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public StreamingQueryProgress getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", StreamingQueryProgress.class.getName());
         DEFAULT_INSTANCE = new StreamingQueryProgress();
         PARSER = new AbstractParser() {
            public StreamingQueryProgress parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.StreamingQueryProgress.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements StreamingQueryProgressOrBuilder {
         private int bitField0_;
         private Object id_ = "";
         private Object runId_ = "";
         private Object name_ = "";
         private Object timestamp_ = "";
         private long batchId_;
         private long batchDuration_;
         private MapField durationMs_;
         private MapField eventTime_;
         private List stateOperators_ = Collections.emptyList();
         private RepeatedFieldBuilder stateOperatorsBuilder_;
         private List sources_ = Collections.emptyList();
         private RepeatedFieldBuilder sourcesBuilder_;
         private SinkProgress sink_;
         private SingleFieldBuilder sinkBuilder_;
         private MapField observedMetrics_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_descriptor;
         }

         protected MapFieldReflectionAccessor internalGetMapFieldReflection(int number) {
            switch (number) {
               case 7 -> {
                  return this.internalGetDurationMs();
               }
               case 8 -> {
                  return this.internalGetEventTime();
               }
               case 12 -> {
                  return this.internalGetObservedMetrics();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected MapFieldReflectionAccessor internalGetMutableMapFieldReflection(int number) {
            switch (number) {
               case 7 -> {
                  return this.internalGetMutableDurationMs();
               }
               case 8 -> {
                  return this.internalGetMutableEventTime();
               }
               case 12 -> {
                  return this.internalGetMutableObservedMetrics();
               }
               default -> throw new RuntimeException("Invalid map field number: " + number);
            }
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_fieldAccessorTable.ensureFieldAccessorsInitialized(StreamingQueryProgress.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.StreamingQueryProgress.alwaysUseFieldBuilders) {
               this.getStateOperatorsFieldBuilder();
               this.getSourcesFieldBuilder();
               this.getSinkFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.id_ = "";
            this.runId_ = "";
            this.name_ = "";
            this.timestamp_ = "";
            this.batchId_ = 0L;
            this.batchDuration_ = 0L;
            this.internalGetMutableDurationMs().clear();
            this.internalGetMutableEventTime().clear();
            if (this.stateOperatorsBuilder_ == null) {
               this.stateOperators_ = Collections.emptyList();
            } else {
               this.stateOperators_ = null;
               this.stateOperatorsBuilder_.clear();
            }

            this.bitField0_ &= -257;
            if (this.sourcesBuilder_ == null) {
               this.sources_ = Collections.emptyList();
            } else {
               this.sources_ = null;
               this.sourcesBuilder_.clear();
            }

            this.bitField0_ &= -513;
            this.sink_ = null;
            if (this.sinkBuilder_ != null) {
               this.sinkBuilder_.dispose();
               this.sinkBuilder_ = null;
            }

            this.internalGetMutableObservedMetrics().clear();
            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_descriptor;
         }

         public StreamingQueryProgress getDefaultInstanceForType() {
            return StoreTypes.StreamingQueryProgress.getDefaultInstance();
         }

         public StreamingQueryProgress build() {
            StreamingQueryProgress result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public StreamingQueryProgress buildPartial() {
            StreamingQueryProgress result = new StreamingQueryProgress(this);
            this.buildPartialRepeatedFields(result);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartialRepeatedFields(StreamingQueryProgress result) {
            if (this.stateOperatorsBuilder_ == null) {
               if ((this.bitField0_ & 256) != 0) {
                  this.stateOperators_ = Collections.unmodifiableList(this.stateOperators_);
                  this.bitField0_ &= -257;
               }

               result.stateOperators_ = this.stateOperators_;
            } else {
               result.stateOperators_ = this.stateOperatorsBuilder_.build();
            }

            if (this.sourcesBuilder_ == null) {
               if ((this.bitField0_ & 512) != 0) {
                  this.sources_ = Collections.unmodifiableList(this.sources_);
                  this.bitField0_ &= -513;
               }

               result.sources_ = this.sources_;
            } else {
               result.sources_ = this.sourcesBuilder_.build();
            }

         }

         private void buildPartial0(StreamingQueryProgress result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.id_ = this.id_;
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.runId_ = this.runId_;
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.name_ = this.name_;
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.timestamp_ = this.timestamp_;
               to_bitField0_ |= 8;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.batchId_ = this.batchId_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.batchDuration_ = this.batchDuration_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.durationMs_ = this.internalGetDurationMs();
               result.durationMs_.makeImmutable();
            }

            if ((from_bitField0_ & 128) != 0) {
               result.eventTime_ = this.internalGetEventTime();
               result.eventTime_.makeImmutable();
            }

            if ((from_bitField0_ & 1024) != 0) {
               result.sink_ = this.sinkBuilder_ == null ? this.sink_ : (SinkProgress)this.sinkBuilder_.build();
               to_bitField0_ |= 16;
            }

            if ((from_bitField0_ & 2048) != 0) {
               result.observedMetrics_ = this.internalGetObservedMetrics();
               result.observedMetrics_.makeImmutable();
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof StreamingQueryProgress) {
               return this.mergeFrom((StreamingQueryProgress)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(StreamingQueryProgress other) {
            if (other == StoreTypes.StreamingQueryProgress.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasId()) {
                  this.id_ = other.id_;
                  this.bitField0_ |= 1;
                  this.onChanged();
               }

               if (other.hasRunId()) {
                  this.runId_ = other.runId_;
                  this.bitField0_ |= 2;
                  this.onChanged();
               }

               if (other.hasName()) {
                  this.name_ = other.name_;
                  this.bitField0_ |= 4;
                  this.onChanged();
               }

               if (other.hasTimestamp()) {
                  this.timestamp_ = other.timestamp_;
                  this.bitField0_ |= 8;
                  this.onChanged();
               }

               if (other.getBatchId() != 0L) {
                  this.setBatchId(other.getBatchId());
               }

               if (other.getBatchDuration() != 0L) {
                  this.setBatchDuration(other.getBatchDuration());
               }

               this.internalGetMutableDurationMs().mergeFrom(other.internalGetDurationMs());
               this.bitField0_ |= 64;
               this.internalGetMutableEventTime().mergeFrom(other.internalGetEventTime());
               this.bitField0_ |= 128;
               if (this.stateOperatorsBuilder_ == null) {
                  if (!other.stateOperators_.isEmpty()) {
                     if (this.stateOperators_.isEmpty()) {
                        this.stateOperators_ = other.stateOperators_;
                        this.bitField0_ &= -257;
                     } else {
                        this.ensureStateOperatorsIsMutable();
                        this.stateOperators_.addAll(other.stateOperators_);
                     }

                     this.onChanged();
                  }
               } else if (!other.stateOperators_.isEmpty()) {
                  if (this.stateOperatorsBuilder_.isEmpty()) {
                     this.stateOperatorsBuilder_.dispose();
                     this.stateOperatorsBuilder_ = null;
                     this.stateOperators_ = other.stateOperators_;
                     this.bitField0_ &= -257;
                     this.stateOperatorsBuilder_ = StoreTypes.StreamingQueryProgress.alwaysUseFieldBuilders ? this.getStateOperatorsFieldBuilder() : null;
                  } else {
                     this.stateOperatorsBuilder_.addAllMessages(other.stateOperators_);
                  }
               }

               if (this.sourcesBuilder_ == null) {
                  if (!other.sources_.isEmpty()) {
                     if (this.sources_.isEmpty()) {
                        this.sources_ = other.sources_;
                        this.bitField0_ &= -513;
                     } else {
                        this.ensureSourcesIsMutable();
                        this.sources_.addAll(other.sources_);
                     }

                     this.onChanged();
                  }
               } else if (!other.sources_.isEmpty()) {
                  if (this.sourcesBuilder_.isEmpty()) {
                     this.sourcesBuilder_.dispose();
                     this.sourcesBuilder_ = null;
                     this.sources_ = other.sources_;
                     this.bitField0_ &= -513;
                     this.sourcesBuilder_ = StoreTypes.StreamingQueryProgress.alwaysUseFieldBuilders ? this.getSourcesFieldBuilder() : null;
                  } else {
                     this.sourcesBuilder_.addAllMessages(other.sources_);
                  }
               }

               if (other.hasSink()) {
                  this.mergeSink(other.getSink());
               }

               this.internalGetMutableObservedMetrics().mergeFrom(other.internalGetObservedMetrics());
               this.bitField0_ |= 2048;
               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           this.id_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 1;
                           break;
                        case 18:
                           this.runId_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 2;
                           break;
                        case 26:
                           this.name_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 4;
                           break;
                        case 34:
                           this.timestamp_ = input.readStringRequireUtf8();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.batchId_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.batchDuration_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 58:
                           MapEntry<String, Long> durationMs__ = (MapEntry)input.readMessage(StoreTypes.StreamingQueryProgress.DurationMsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableDurationMs().getMutableMap().put((String)durationMs__.getKey(), (Long)durationMs__.getValue());
                           this.bitField0_ |= 64;
                           break;
                        case 66:
                           MapEntry<String, String> eventTime__ = (MapEntry)input.readMessage(StoreTypes.StreamingQueryProgress.EventTimeDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableEventTime().getMutableMap().put((String)eventTime__.getKey(), (String)eventTime__.getValue());
                           this.bitField0_ |= 128;
                           break;
                        case 74:
                           StateOperatorProgress m = (StateOperatorProgress)input.readMessage(StoreTypes.StateOperatorProgress.parser(), extensionRegistry);
                           if (this.stateOperatorsBuilder_ == null) {
                              this.ensureStateOperatorsIsMutable();
                              this.stateOperators_.add(m);
                           } else {
                              this.stateOperatorsBuilder_.addMessage(m);
                           }
                           break;
                        case 82:
                           SourceProgress m = (SourceProgress)input.readMessage(StoreTypes.SourceProgress.parser(), extensionRegistry);
                           if (this.sourcesBuilder_ == null) {
                              this.ensureSourcesIsMutable();
                              this.sources_.add(m);
                           } else {
                              this.sourcesBuilder_.addMessage(m);
                           }
                           break;
                        case 90:
                           input.readMessage((MessageLite.Builder)this.getSinkFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1024;
                           break;
                        case 98:
                           MapEntry<String, String> observedMetrics__ = (MapEntry)input.readMessage(StoreTypes.StreamingQueryProgress.ObservedMetricsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                           this.internalGetMutableObservedMetrics().getMutableMap().put((String)observedMetrics__.getKey(), (String)observedMetrics__.getValue());
                           this.bitField0_ |= 2048;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasId() {
            return (this.bitField0_ & 1) != 0;
         }

         public String getId() {
            Object ref = this.id_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.id_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getIdBytes() {
            Object ref = this.id_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.id_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.id_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public Builder clearId() {
            this.id_ = StoreTypes.StreamingQueryProgress.getDefaultInstance().getId();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         public Builder setIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamingQueryProgress.checkByteStringIsUtf8(value);
               this.id_ = value;
               this.bitField0_ |= 1;
               this.onChanged();
               return this;
            }
         }

         public boolean hasRunId() {
            return (this.bitField0_ & 2) != 0;
         }

         public String getRunId() {
            Object ref = this.runId_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.runId_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getRunIdBytes() {
            Object ref = this.runId_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.runId_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setRunId(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.runId_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public Builder clearRunId() {
            this.runId_ = StoreTypes.StreamingQueryProgress.getDefaultInstance().getRunId();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         public Builder setRunIdBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamingQueryProgress.checkByteStringIsUtf8(value);
               this.runId_ = value;
               this.bitField0_ |= 2;
               this.onChanged();
               return this;
            }
         }

         public boolean hasName() {
            return (this.bitField0_ & 4) != 0;
         }

         public String getName() {
            Object ref = this.name_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.name_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getNameBytes() {
            Object ref = this.name_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.name_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setName(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.name_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public Builder clearName() {
            this.name_ = StoreTypes.StreamingQueryProgress.getDefaultInstance().getName();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         public Builder setNameBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamingQueryProgress.checkByteStringIsUtf8(value);
               this.name_ = value;
               this.bitField0_ |= 4;
               this.onChanged();
               return this;
            }
         }

         public boolean hasTimestamp() {
            return (this.bitField0_ & 8) != 0;
         }

         public String getTimestamp() {
            Object ref = this.timestamp_;
            if (!(ref instanceof String)) {
               ByteString bs = (ByteString)ref;
               String s = bs.toStringUtf8();
               this.timestamp_ = s;
               return s;
            } else {
               return (String)ref;
            }
         }

         public ByteString getTimestampBytes() {
            Object ref = this.timestamp_;
            if (ref instanceof String) {
               ByteString b = ByteString.copyFromUtf8((String)ref);
               this.timestamp_ = b;
               return b;
            } else {
               return (ByteString)ref;
            }
         }

         public Builder setTimestamp(String value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               this.timestamp_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }

         public Builder clearTimestamp() {
            this.timestamp_ = StoreTypes.StreamingQueryProgress.getDefaultInstance().getTimestamp();
            this.bitField0_ &= -9;
            this.onChanged();
            return this;
         }

         public Builder setTimestampBytes(ByteString value) {
            if (value == null) {
               throw new NullPointerException();
            } else {
               StoreTypes.StreamingQueryProgress.checkByteStringIsUtf8(value);
               this.timestamp_ = value;
               this.bitField0_ |= 8;
               this.onChanged();
               return this;
            }
         }

         public long getBatchId() {
            return this.batchId_;
         }

         public Builder setBatchId(long value) {
            this.batchId_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearBatchId() {
            this.bitField0_ &= -17;
            this.batchId_ = 0L;
            this.onChanged();
            return this;
         }

         public long getBatchDuration() {
            return this.batchDuration_;
         }

         public Builder setBatchDuration(long value) {
            this.batchDuration_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearBatchDuration() {
            this.bitField0_ &= -33;
            this.batchDuration_ = 0L;
            this.onChanged();
            return this;
         }

         private MapField internalGetDurationMs() {
            return this.durationMs_ == null ? MapField.emptyMapField(StoreTypes.StreamingQueryProgress.DurationMsDefaultEntryHolder.defaultEntry) : this.durationMs_;
         }

         private MapField internalGetMutableDurationMs() {
            if (this.durationMs_ == null) {
               this.durationMs_ = MapField.newMapField(StoreTypes.StreamingQueryProgress.DurationMsDefaultEntryHolder.defaultEntry);
            }

            if (!this.durationMs_.isMutable()) {
               this.durationMs_ = this.durationMs_.copy();
            }

            this.bitField0_ |= 64;
            this.onChanged();
            return this.durationMs_;
         }

         public int getDurationMsCount() {
            return this.internalGetDurationMs().getMap().size();
         }

         public boolean containsDurationMs(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetDurationMs().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getDurationMs() {
            return this.getDurationMsMap();
         }

         public Map getDurationMsMap() {
            return this.internalGetDurationMs().getMap();
         }

         public long getDurationMsOrDefault(String key, long defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Long> map = this.internalGetDurationMs().getMap();
               return map.containsKey(key) ? (Long)map.get(key) : defaultValue;
            }
         }

         public long getDurationMsOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, Long> map = this.internalGetDurationMs().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (Long)map.get(key);
               }
            }
         }

         public Builder clearDurationMs() {
            this.bitField0_ &= -65;
            this.internalGetMutableDurationMs().getMutableMap().clear();
            return this;
         }

         public Builder removeDurationMs(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableDurationMs().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableDurationMs() {
            this.bitField0_ |= 64;
            return this.internalGetMutableDurationMs().getMutableMap();
         }

         public Builder putDurationMs(String key, long value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableDurationMs().getMutableMap().put(key, value);
               this.bitField0_ |= 64;
               return this;
            }
         }

         public Builder putAllDurationMs(Map values) {
            this.internalGetMutableDurationMs().getMutableMap().putAll(values);
            this.bitField0_ |= 64;
            return this;
         }

         private MapField internalGetEventTime() {
            return this.eventTime_ == null ? MapField.emptyMapField(StoreTypes.StreamingQueryProgress.EventTimeDefaultEntryHolder.defaultEntry) : this.eventTime_;
         }

         private MapField internalGetMutableEventTime() {
            if (this.eventTime_ == null) {
               this.eventTime_ = MapField.newMapField(StoreTypes.StreamingQueryProgress.EventTimeDefaultEntryHolder.defaultEntry);
            }

            if (!this.eventTime_.isMutable()) {
               this.eventTime_ = this.eventTime_.copy();
            }

            this.bitField0_ |= 128;
            this.onChanged();
            return this.eventTime_;
         }

         public int getEventTimeCount() {
            return this.internalGetEventTime().getMap().size();
         }

         public boolean containsEventTime(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetEventTime().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getEventTime() {
            return this.getEventTimeMap();
         }

         public Map getEventTimeMap() {
            return this.internalGetEventTime().getMap();
         }

         public String getEventTimeOrDefault(String key, String defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetEventTime().getMap();
               return map.containsKey(key) ? (String)map.get(key) : defaultValue;
            }
         }

         public String getEventTimeOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetEventTime().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (String)map.get(key);
               }
            }
         }

         public Builder clearEventTime() {
            this.bitField0_ &= -129;
            this.internalGetMutableEventTime().getMutableMap().clear();
            return this;
         }

         public Builder removeEventTime(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableEventTime().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableEventTime() {
            this.bitField0_ |= 128;
            return this.internalGetMutableEventTime().getMutableMap();
         }

         public Builder putEventTime(String key, String value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableEventTime().getMutableMap().put(key, value);
               this.bitField0_ |= 128;
               return this;
            }
         }

         public Builder putAllEventTime(Map values) {
            this.internalGetMutableEventTime().getMutableMap().putAll(values);
            this.bitField0_ |= 128;
            return this;
         }

         private void ensureStateOperatorsIsMutable() {
            if ((this.bitField0_ & 256) == 0) {
               this.stateOperators_ = new ArrayList(this.stateOperators_);
               this.bitField0_ |= 256;
            }

         }

         public List getStateOperatorsList() {
            return this.stateOperatorsBuilder_ == null ? Collections.unmodifiableList(this.stateOperators_) : this.stateOperatorsBuilder_.getMessageList();
         }

         public int getStateOperatorsCount() {
            return this.stateOperatorsBuilder_ == null ? this.stateOperators_.size() : this.stateOperatorsBuilder_.getCount();
         }

         public StateOperatorProgress getStateOperators(int index) {
            return this.stateOperatorsBuilder_ == null ? (StateOperatorProgress)this.stateOperators_.get(index) : (StateOperatorProgress)this.stateOperatorsBuilder_.getMessage(index);
         }

         public Builder setStateOperators(int index, StateOperatorProgress value) {
            if (this.stateOperatorsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureStateOperatorsIsMutable();
               this.stateOperators_.set(index, value);
               this.onChanged();
            } else {
               this.stateOperatorsBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setStateOperators(int index, StateOperatorProgress.Builder builderForValue) {
            if (this.stateOperatorsBuilder_ == null) {
               this.ensureStateOperatorsIsMutable();
               this.stateOperators_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.stateOperatorsBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addStateOperators(StateOperatorProgress value) {
            if (this.stateOperatorsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureStateOperatorsIsMutable();
               this.stateOperators_.add(value);
               this.onChanged();
            } else {
               this.stateOperatorsBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addStateOperators(int index, StateOperatorProgress value) {
            if (this.stateOperatorsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureStateOperatorsIsMutable();
               this.stateOperators_.add(index, value);
               this.onChanged();
            } else {
               this.stateOperatorsBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addStateOperators(StateOperatorProgress.Builder builderForValue) {
            if (this.stateOperatorsBuilder_ == null) {
               this.ensureStateOperatorsIsMutable();
               this.stateOperators_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.stateOperatorsBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addStateOperators(int index, StateOperatorProgress.Builder builderForValue) {
            if (this.stateOperatorsBuilder_ == null) {
               this.ensureStateOperatorsIsMutable();
               this.stateOperators_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.stateOperatorsBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllStateOperators(Iterable values) {
            if (this.stateOperatorsBuilder_ == null) {
               this.ensureStateOperatorsIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.stateOperators_);
               this.onChanged();
            } else {
               this.stateOperatorsBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearStateOperators() {
            if (this.stateOperatorsBuilder_ == null) {
               this.stateOperators_ = Collections.emptyList();
               this.bitField0_ &= -257;
               this.onChanged();
            } else {
               this.stateOperatorsBuilder_.clear();
            }

            return this;
         }

         public Builder removeStateOperators(int index) {
            if (this.stateOperatorsBuilder_ == null) {
               this.ensureStateOperatorsIsMutable();
               this.stateOperators_.remove(index);
               this.onChanged();
            } else {
               this.stateOperatorsBuilder_.remove(index);
            }

            return this;
         }

         public StateOperatorProgress.Builder getStateOperatorsBuilder(int index) {
            return (StateOperatorProgress.Builder)this.getStateOperatorsFieldBuilder().getBuilder(index);
         }

         public StateOperatorProgressOrBuilder getStateOperatorsOrBuilder(int index) {
            return this.stateOperatorsBuilder_ == null ? (StateOperatorProgressOrBuilder)this.stateOperators_.get(index) : (StateOperatorProgressOrBuilder)this.stateOperatorsBuilder_.getMessageOrBuilder(index);
         }

         public List getStateOperatorsOrBuilderList() {
            return this.stateOperatorsBuilder_ != null ? this.stateOperatorsBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.stateOperators_);
         }

         public StateOperatorProgress.Builder addStateOperatorsBuilder() {
            return (StateOperatorProgress.Builder)this.getStateOperatorsFieldBuilder().addBuilder(StoreTypes.StateOperatorProgress.getDefaultInstance());
         }

         public StateOperatorProgress.Builder addStateOperatorsBuilder(int index) {
            return (StateOperatorProgress.Builder)this.getStateOperatorsFieldBuilder().addBuilder(index, StoreTypes.StateOperatorProgress.getDefaultInstance());
         }

         public List getStateOperatorsBuilderList() {
            return this.getStateOperatorsFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getStateOperatorsFieldBuilder() {
            if (this.stateOperatorsBuilder_ == null) {
               this.stateOperatorsBuilder_ = new RepeatedFieldBuilder(this.stateOperators_, (this.bitField0_ & 256) != 0, this.getParentForChildren(), this.isClean());
               this.stateOperators_ = null;
            }

            return this.stateOperatorsBuilder_;
         }

         private void ensureSourcesIsMutable() {
            if ((this.bitField0_ & 512) == 0) {
               this.sources_ = new ArrayList(this.sources_);
               this.bitField0_ |= 512;
            }

         }

         public List getSourcesList() {
            return this.sourcesBuilder_ == null ? Collections.unmodifiableList(this.sources_) : this.sourcesBuilder_.getMessageList();
         }

         public int getSourcesCount() {
            return this.sourcesBuilder_ == null ? this.sources_.size() : this.sourcesBuilder_.getCount();
         }

         public SourceProgress getSources(int index) {
            return this.sourcesBuilder_ == null ? (SourceProgress)this.sources_.get(index) : (SourceProgress)this.sourcesBuilder_.getMessage(index);
         }

         public Builder setSources(int index, SourceProgress value) {
            if (this.sourcesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureSourcesIsMutable();
               this.sources_.set(index, value);
               this.onChanged();
            } else {
               this.sourcesBuilder_.setMessage(index, value);
            }

            return this;
         }

         public Builder setSources(int index, SourceProgress.Builder builderForValue) {
            if (this.sourcesBuilder_ == null) {
               this.ensureSourcesIsMutable();
               this.sources_.set(index, builderForValue.build());
               this.onChanged();
            } else {
               this.sourcesBuilder_.setMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addSources(SourceProgress value) {
            if (this.sourcesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureSourcesIsMutable();
               this.sources_.add(value);
               this.onChanged();
            } else {
               this.sourcesBuilder_.addMessage(value);
            }

            return this;
         }

         public Builder addSources(int index, SourceProgress value) {
            if (this.sourcesBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.ensureSourcesIsMutable();
               this.sources_.add(index, value);
               this.onChanged();
            } else {
               this.sourcesBuilder_.addMessage(index, value);
            }

            return this;
         }

         public Builder addSources(SourceProgress.Builder builderForValue) {
            if (this.sourcesBuilder_ == null) {
               this.ensureSourcesIsMutable();
               this.sources_.add(builderForValue.build());
               this.onChanged();
            } else {
               this.sourcesBuilder_.addMessage(builderForValue.build());
            }

            return this;
         }

         public Builder addSources(int index, SourceProgress.Builder builderForValue) {
            if (this.sourcesBuilder_ == null) {
               this.ensureSourcesIsMutable();
               this.sources_.add(index, builderForValue.build());
               this.onChanged();
            } else {
               this.sourcesBuilder_.addMessage(index, builderForValue.build());
            }

            return this;
         }

         public Builder addAllSources(Iterable values) {
            if (this.sourcesBuilder_ == null) {
               this.ensureSourcesIsMutable();
               AbstractMessageLite.Builder.addAll(values, this.sources_);
               this.onChanged();
            } else {
               this.sourcesBuilder_.addAllMessages(values);
            }

            return this;
         }

         public Builder clearSources() {
            if (this.sourcesBuilder_ == null) {
               this.sources_ = Collections.emptyList();
               this.bitField0_ &= -513;
               this.onChanged();
            } else {
               this.sourcesBuilder_.clear();
            }

            return this;
         }

         public Builder removeSources(int index) {
            if (this.sourcesBuilder_ == null) {
               this.ensureSourcesIsMutable();
               this.sources_.remove(index);
               this.onChanged();
            } else {
               this.sourcesBuilder_.remove(index);
            }

            return this;
         }

         public SourceProgress.Builder getSourcesBuilder(int index) {
            return (SourceProgress.Builder)this.getSourcesFieldBuilder().getBuilder(index);
         }

         public SourceProgressOrBuilder getSourcesOrBuilder(int index) {
            return this.sourcesBuilder_ == null ? (SourceProgressOrBuilder)this.sources_.get(index) : (SourceProgressOrBuilder)this.sourcesBuilder_.getMessageOrBuilder(index);
         }

         public List getSourcesOrBuilderList() {
            return this.sourcesBuilder_ != null ? this.sourcesBuilder_.getMessageOrBuilderList() : Collections.unmodifiableList(this.sources_);
         }

         public SourceProgress.Builder addSourcesBuilder() {
            return (SourceProgress.Builder)this.getSourcesFieldBuilder().addBuilder(StoreTypes.SourceProgress.getDefaultInstance());
         }

         public SourceProgress.Builder addSourcesBuilder(int index) {
            return (SourceProgress.Builder)this.getSourcesFieldBuilder().addBuilder(index, StoreTypes.SourceProgress.getDefaultInstance());
         }

         public List getSourcesBuilderList() {
            return this.getSourcesFieldBuilder().getBuilderList();
         }

         private RepeatedFieldBuilder getSourcesFieldBuilder() {
            if (this.sourcesBuilder_ == null) {
               this.sourcesBuilder_ = new RepeatedFieldBuilder(this.sources_, (this.bitField0_ & 512) != 0, this.getParentForChildren(), this.isClean());
               this.sources_ = null;
            }

            return this.sourcesBuilder_;
         }

         public boolean hasSink() {
            return (this.bitField0_ & 1024) != 0;
         }

         public SinkProgress getSink() {
            if (this.sinkBuilder_ == null) {
               return this.sink_ == null ? StoreTypes.SinkProgress.getDefaultInstance() : this.sink_;
            } else {
               return (SinkProgress)this.sinkBuilder_.getMessage();
            }
         }

         public Builder setSink(SinkProgress value) {
            if (this.sinkBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.sink_ = value;
            } else {
               this.sinkBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder setSink(SinkProgress.Builder builderForValue) {
            if (this.sinkBuilder_ == null) {
               this.sink_ = builderForValue.build();
            } else {
               this.sinkBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder mergeSink(SinkProgress value) {
            if (this.sinkBuilder_ == null) {
               if ((this.bitField0_ & 1024) != 0 && this.sink_ != null && this.sink_ != StoreTypes.SinkProgress.getDefaultInstance()) {
                  this.getSinkBuilder().mergeFrom(value);
               } else {
                  this.sink_ = value;
               }
            } else {
               this.sinkBuilder_.mergeFrom(value);
            }

            if (this.sink_ != null) {
               this.bitField0_ |= 1024;
               this.onChanged();
            }

            return this;
         }

         public Builder clearSink() {
            this.bitField0_ &= -1025;
            this.sink_ = null;
            if (this.sinkBuilder_ != null) {
               this.sinkBuilder_.dispose();
               this.sinkBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public SinkProgress.Builder getSinkBuilder() {
            this.bitField0_ |= 1024;
            this.onChanged();
            return (SinkProgress.Builder)this.getSinkFieldBuilder().getBuilder();
         }

         public SinkProgressOrBuilder getSinkOrBuilder() {
            if (this.sinkBuilder_ != null) {
               return (SinkProgressOrBuilder)this.sinkBuilder_.getMessageOrBuilder();
            } else {
               return this.sink_ == null ? StoreTypes.SinkProgress.getDefaultInstance() : this.sink_;
            }
         }

         private SingleFieldBuilder getSinkFieldBuilder() {
            if (this.sinkBuilder_ == null) {
               this.sinkBuilder_ = new SingleFieldBuilder(this.getSink(), this.getParentForChildren(), this.isClean());
               this.sink_ = null;
            }

            return this.sinkBuilder_;
         }

         private MapField internalGetObservedMetrics() {
            return this.observedMetrics_ == null ? MapField.emptyMapField(StoreTypes.StreamingQueryProgress.ObservedMetricsDefaultEntryHolder.defaultEntry) : this.observedMetrics_;
         }

         private MapField internalGetMutableObservedMetrics() {
            if (this.observedMetrics_ == null) {
               this.observedMetrics_ = MapField.newMapField(StoreTypes.StreamingQueryProgress.ObservedMetricsDefaultEntryHolder.defaultEntry);
            }

            if (!this.observedMetrics_.isMutable()) {
               this.observedMetrics_ = this.observedMetrics_.copy();
            }

            this.bitField0_ |= 2048;
            this.onChanged();
            return this.observedMetrics_;
         }

         public int getObservedMetricsCount() {
            return this.internalGetObservedMetrics().getMap().size();
         }

         public boolean containsObservedMetrics(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               return this.internalGetObservedMetrics().getMap().containsKey(key);
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getObservedMetrics() {
            return this.getObservedMetricsMap();
         }

         public Map getObservedMetricsMap() {
            return this.internalGetObservedMetrics().getMap();
         }

         public String getObservedMetricsOrDefault(String key, String defaultValue) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetObservedMetrics().getMap();
               return map.containsKey(key) ? (String)map.get(key) : defaultValue;
            }
         }

         public String getObservedMetricsOrThrow(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               Map<String, String> map = this.internalGetObservedMetrics().getMap();
               if (!map.containsKey(key)) {
                  throw new IllegalArgumentException();
               } else {
                  return (String)map.get(key);
               }
            }
         }

         public Builder clearObservedMetrics() {
            this.bitField0_ &= -2049;
            this.internalGetMutableObservedMetrics().getMutableMap().clear();
            return this;
         }

         public Builder removeObservedMetrics(String key) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else {
               this.internalGetMutableObservedMetrics().getMutableMap().remove(key);
               return this;
            }
         }

         /** @deprecated */
         @Deprecated
         public Map getMutableObservedMetrics() {
            this.bitField0_ |= 2048;
            return this.internalGetMutableObservedMetrics().getMutableMap();
         }

         public Builder putObservedMetrics(String key, String value) {
            if (key == null) {
               throw new NullPointerException("map key");
            } else if (value == null) {
               throw new NullPointerException("map value");
            } else {
               this.internalGetMutableObservedMetrics().getMutableMap().put(key, value);
               this.bitField0_ |= 2048;
               return this;
            }
         }

         public Builder putAllObservedMetrics(Map values) {
            this.internalGetMutableObservedMetrics().getMutableMap().putAll(values);
            this.bitField0_ |= 2048;
            return this;
         }
      }

      private static final class DurationMsDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_DurationMsEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.INT64, 0L);
         }
      }

      private static final class EventTimeDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_EventTimeEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.STRING, "");
         }
      }

      private static final class ObservedMetricsDefaultEntryHolder {
         static final MapEntry defaultEntry;

         static {
            defaultEntry = MapEntry.newDefaultInstance(StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgress_ObservedMetricsEntry_descriptor, WireFormat.FieldType.STRING, "", WireFormat.FieldType.STRING, "");
         }
      }
   }

   public interface StreamingQueryProgressOrBuilder extends MessageOrBuilder {
      boolean hasId();

      String getId();

      ByteString getIdBytes();

      boolean hasRunId();

      String getRunId();

      ByteString getRunIdBytes();

      boolean hasName();

      String getName();

      ByteString getNameBytes();

      boolean hasTimestamp();

      String getTimestamp();

      ByteString getTimestampBytes();

      long getBatchId();

      long getBatchDuration();

      int getDurationMsCount();

      boolean containsDurationMs(String var1);

      /** @deprecated */
      @Deprecated
      Map getDurationMs();

      Map getDurationMsMap();

      long getDurationMsOrDefault(String var1, long var2);

      long getDurationMsOrThrow(String var1);

      int getEventTimeCount();

      boolean containsEventTime(String var1);

      /** @deprecated */
      @Deprecated
      Map getEventTime();

      Map getEventTimeMap();

      String getEventTimeOrDefault(String var1, String var2);

      String getEventTimeOrThrow(String var1);

      List getStateOperatorsList();

      StateOperatorProgress getStateOperators(int var1);

      int getStateOperatorsCount();

      List getStateOperatorsOrBuilderList();

      StateOperatorProgressOrBuilder getStateOperatorsOrBuilder(int var1);

      List getSourcesList();

      SourceProgress getSources(int var1);

      int getSourcesCount();

      List getSourcesOrBuilderList();

      SourceProgressOrBuilder getSourcesOrBuilder(int var1);

      boolean hasSink();

      SinkProgress getSink();

      SinkProgressOrBuilder getSinkOrBuilder();

      int getObservedMetricsCount();

      boolean containsObservedMetrics(String var1);

      /** @deprecated */
      @Deprecated
      Map getObservedMetrics();

      Map getObservedMetricsMap();

      String getObservedMetricsOrDefault(String var1, String var2);

      String getObservedMetricsOrThrow(String var1);
   }

   public static final class StreamingQueryProgressWrapper extends GeneratedMessage implements StreamingQueryProgressWrapperOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int PROGRESS_FIELD_NUMBER = 1;
      private StreamingQueryProgress progress_;
      private byte memoizedIsInitialized = -1;
      private static final StreamingQueryProgressWrapper DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private StreamingQueryProgressWrapper(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private StreamingQueryProgressWrapper() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgressWrapper_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgressWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(StreamingQueryProgressWrapper.class, Builder.class);
      }

      public boolean hasProgress() {
         return (this.bitField0_ & 1) != 0;
      }

      public StreamingQueryProgress getProgress() {
         return this.progress_ == null ? StoreTypes.StreamingQueryProgress.getDefaultInstance() : this.progress_;
      }

      public StreamingQueryProgressOrBuilder getProgressOrBuilder() {
         return this.progress_ == null ? StoreTypes.StreamingQueryProgress.getDefaultInstance() : this.progress_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(1, this.getProgress());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(1, this.getProgress());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof StreamingQueryProgressWrapper)) {
            return super.equals(obj);
         } else {
            StreamingQueryProgressWrapper other = (StreamingQueryProgressWrapper)obj;
            if (this.hasProgress() != other.hasProgress()) {
               return false;
            } else if (this.hasProgress() && !this.getProgress().equals(other.getProgress())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.hasProgress()) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getProgress().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static StreamingQueryProgressWrapper parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (StreamingQueryProgressWrapper)PARSER.parseFrom(data);
      }

      public static StreamingQueryProgressWrapper parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamingQueryProgressWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamingQueryProgressWrapper parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (StreamingQueryProgressWrapper)PARSER.parseFrom(data);
      }

      public static StreamingQueryProgressWrapper parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamingQueryProgressWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamingQueryProgressWrapper parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (StreamingQueryProgressWrapper)PARSER.parseFrom(data);
      }

      public static StreamingQueryProgressWrapper parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (StreamingQueryProgressWrapper)PARSER.parseFrom(data, extensionRegistry);
      }

      public static StreamingQueryProgressWrapper parseFrom(InputStream input) throws IOException {
         return (StreamingQueryProgressWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StreamingQueryProgressWrapper parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamingQueryProgressWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static StreamingQueryProgressWrapper parseDelimitedFrom(InputStream input) throws IOException {
         return (StreamingQueryProgressWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static StreamingQueryProgressWrapper parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamingQueryProgressWrapper)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static StreamingQueryProgressWrapper parseFrom(CodedInputStream input) throws IOException {
         return (StreamingQueryProgressWrapper)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static StreamingQueryProgressWrapper parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (StreamingQueryProgressWrapper)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(StreamingQueryProgressWrapper prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static StreamingQueryProgressWrapper getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public StreamingQueryProgressWrapper getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", StreamingQueryProgressWrapper.class.getName());
         DEFAULT_INSTANCE = new StreamingQueryProgressWrapper();
         PARSER = new AbstractParser() {
            public StreamingQueryProgressWrapper parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.StreamingQueryProgressWrapper.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements StreamingQueryProgressWrapperOrBuilder {
         private int bitField0_;
         private StreamingQueryProgress progress_;
         private SingleFieldBuilder progressBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgressWrapper_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgressWrapper_fieldAccessorTable.ensureFieldAccessorsInitialized(StreamingQueryProgressWrapper.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.StreamingQueryProgressWrapper.alwaysUseFieldBuilders) {
               this.getProgressFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.progress_ = null;
            if (this.progressBuilder_ != null) {
               this.progressBuilder_.dispose();
               this.progressBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_StreamingQueryProgressWrapper_descriptor;
         }

         public StreamingQueryProgressWrapper getDefaultInstanceForType() {
            return StoreTypes.StreamingQueryProgressWrapper.getDefaultInstance();
         }

         public StreamingQueryProgressWrapper build() {
            StreamingQueryProgressWrapper result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public StreamingQueryProgressWrapper buildPartial() {
            StreamingQueryProgressWrapper result = new StreamingQueryProgressWrapper(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(StreamingQueryProgressWrapper result) {
            int from_bitField0_ = this.bitField0_;
            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1) != 0) {
               result.progress_ = this.progressBuilder_ == null ? this.progress_ : (StreamingQueryProgress)this.progressBuilder_.build();
               to_bitField0_ |= 1;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof StreamingQueryProgressWrapper) {
               return this.mergeFrom((StreamingQueryProgressWrapper)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(StreamingQueryProgressWrapper other) {
            if (other == StoreTypes.StreamingQueryProgressWrapper.getDefaultInstance()) {
               return this;
            } else {
               if (other.hasProgress()) {
                  this.mergeProgress(other.getProgress());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 10:
                           input.readMessage((MessageLite.Builder)this.getProgressFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public boolean hasProgress() {
            return (this.bitField0_ & 1) != 0;
         }

         public StreamingQueryProgress getProgress() {
            if (this.progressBuilder_ == null) {
               return this.progress_ == null ? StoreTypes.StreamingQueryProgress.getDefaultInstance() : this.progress_;
            } else {
               return (StreamingQueryProgress)this.progressBuilder_.getMessage();
            }
         }

         public Builder setProgress(StreamingQueryProgress value) {
            if (this.progressBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.progress_ = value;
            } else {
               this.progressBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder setProgress(StreamingQueryProgress.Builder builderForValue) {
            if (this.progressBuilder_ == null) {
               this.progress_ = builderForValue.build();
            } else {
               this.progressBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder mergeProgress(StreamingQueryProgress value) {
            if (this.progressBuilder_ == null) {
               if ((this.bitField0_ & 1) != 0 && this.progress_ != null && this.progress_ != StoreTypes.StreamingQueryProgress.getDefaultInstance()) {
                  this.getProgressBuilder().mergeFrom(value);
               } else {
                  this.progress_ = value;
               }
            } else {
               this.progressBuilder_.mergeFrom(value);
            }

            if (this.progress_ != null) {
               this.bitField0_ |= 1;
               this.onChanged();
            }

            return this;
         }

         public Builder clearProgress() {
            this.bitField0_ &= -2;
            this.progress_ = null;
            if (this.progressBuilder_ != null) {
               this.progressBuilder_.dispose();
               this.progressBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public StreamingQueryProgress.Builder getProgressBuilder() {
            this.bitField0_ |= 1;
            this.onChanged();
            return (StreamingQueryProgress.Builder)this.getProgressFieldBuilder().getBuilder();
         }

         public StreamingQueryProgressOrBuilder getProgressOrBuilder() {
            if (this.progressBuilder_ != null) {
               return (StreamingQueryProgressOrBuilder)this.progressBuilder_.getMessageOrBuilder();
            } else {
               return this.progress_ == null ? StoreTypes.StreamingQueryProgress.getDefaultInstance() : this.progress_;
            }
         }

         private SingleFieldBuilder getProgressFieldBuilder() {
            if (this.progressBuilder_ == null) {
               this.progressBuilder_ = new SingleFieldBuilder(this.getProgress(), this.getParentForChildren(), this.isClean());
               this.progress_ = null;
            }

            return this.progressBuilder_;
         }
      }
   }

   public interface StreamingQueryProgressWrapperOrBuilder extends MessageOrBuilder {
      boolean hasProgress();

      StreamingQueryProgress getProgress();

      StreamingQueryProgressOrBuilder getProgressOrBuilder();
   }

   public interface TaskDataOrBuilder extends MessageOrBuilder {
      long getTaskId();

      int getIndex();

      int getAttempt();

      int getPartitionId();

      long getLaunchTime();

      boolean hasResultFetchStart();

      long getResultFetchStart();

      boolean hasDuration();

      long getDuration();

      boolean hasExecutorId();

      String getExecutorId();

      ByteString getExecutorIdBytes();

      boolean hasHost();

      String getHost();

      ByteString getHostBytes();

      boolean hasStatus();

      String getStatus();

      ByteString getStatusBytes();

      boolean hasTaskLocality();

      String getTaskLocality();

      ByteString getTaskLocalityBytes();

      boolean getSpeculative();

      List getAccumulatorUpdatesList();

      AccumulableInfo getAccumulatorUpdates(int var1);

      int getAccumulatorUpdatesCount();

      List getAccumulatorUpdatesOrBuilderList();

      AccumulableInfoOrBuilder getAccumulatorUpdatesOrBuilder(int var1);

      boolean hasErrorMessage();

      String getErrorMessage();

      ByteString getErrorMessageBytes();

      boolean hasTaskMetrics();

      TaskMetrics getTaskMetrics();

      TaskMetricsOrBuilder getTaskMetricsOrBuilder();

      int getExecutorLogsCount();

      boolean containsExecutorLogs(String var1);

      /** @deprecated */
      @Deprecated
      Map getExecutorLogs();

      Map getExecutorLogsMap();

      String getExecutorLogsOrDefault(String var1, String var2);

      String getExecutorLogsOrThrow(String var1);

      long getSchedulerDelay();

      long getGettingResultTime();
   }

   public interface TaskDataWrapperOrBuilder extends MessageOrBuilder {
      long getTaskId();

      int getIndex();

      int getAttempt();

      int getPartitionId();

      long getLaunchTime();

      long getResultFetchStart();

      long getDuration();

      boolean hasExecutorId();

      String getExecutorId();

      ByteString getExecutorIdBytes();

      boolean hasHost();

      String getHost();

      ByteString getHostBytes();

      boolean hasStatus();

      String getStatus();

      ByteString getStatusBytes();

      boolean hasTaskLocality();

      String getTaskLocality();

      ByteString getTaskLocalityBytes();

      boolean getSpeculative();

      List getAccumulatorUpdatesList();

      AccumulableInfo getAccumulatorUpdates(int var1);

      int getAccumulatorUpdatesCount();

      List getAccumulatorUpdatesOrBuilderList();

      AccumulableInfoOrBuilder getAccumulatorUpdatesOrBuilder(int var1);

      boolean hasErrorMessage();

      String getErrorMessage();

      ByteString getErrorMessageBytes();

      boolean getHasMetrics();

      long getExecutorDeserializeTime();

      long getExecutorDeserializeCpuTime();

      long getExecutorRunTime();

      long getExecutorCpuTime();

      long getResultSize();

      long getJvmGcTime();

      long getResultSerializationTime();

      long getMemoryBytesSpilled();

      long getDiskBytesSpilled();

      long getPeakExecutionMemory();

      long getInputBytesRead();

      long getInputRecordsRead();

      long getOutputBytesWritten();

      long getOutputRecordsWritten();

      long getShuffleRemoteBlocksFetched();

      long getShuffleLocalBlocksFetched();

      long getShuffleFetchWaitTime();

      long getShuffleRemoteBytesRead();

      long getShuffleRemoteBytesReadToDisk();

      long getShuffleLocalBytesRead();

      long getShuffleRecordsRead();

      long getShuffleBytesWritten();

      long getShuffleWriteTime();

      long getShuffleRecordsWritten();

      long getStageId();

      int getStageAttemptId();

      long getShuffleCorruptMergedBlockChunks();

      long getShuffleMergedFetchFallbackCount();

      long getShuffleMergedRemoteBlocksFetched();

      long getShuffleMergedLocalBlocksFetched();

      long getShuffleMergedRemoteChunksFetched();

      long getShuffleMergedLocalChunksFetched();

      long getShuffleMergedRemoteBytesRead();

      long getShuffleMergedLocalBytesRead();

      long getShuffleRemoteReqsDuration();

      long getShuffleMergedRemoteReqDuration();
   }

   public static final class TaskMetricDistributions extends GeneratedMessage implements TaskMetricDistributionsOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int QUANTILES_FIELD_NUMBER = 1;
      private Internal.DoubleList quantiles_ = emptyDoubleList();
      private int quantilesMemoizedSerializedSize = -1;
      public static final int DURATION_FIELD_NUMBER = 2;
      private Internal.DoubleList duration_ = emptyDoubleList();
      private int durationMemoizedSerializedSize = -1;
      public static final int EXECUTOR_DESERIALIZE_TIME_FIELD_NUMBER = 3;
      private Internal.DoubleList executorDeserializeTime_ = emptyDoubleList();
      private int executorDeserializeTimeMemoizedSerializedSize = -1;
      public static final int EXECUTOR_DESERIALIZE_CPU_TIME_FIELD_NUMBER = 4;
      private Internal.DoubleList executorDeserializeCpuTime_ = emptyDoubleList();
      private int executorDeserializeCpuTimeMemoizedSerializedSize = -1;
      public static final int EXECUTOR_RUN_TIME_FIELD_NUMBER = 5;
      private Internal.DoubleList executorRunTime_ = emptyDoubleList();
      private int executorRunTimeMemoizedSerializedSize = -1;
      public static final int EXECUTOR_CPU_TIME_FIELD_NUMBER = 6;
      private Internal.DoubleList executorCpuTime_ = emptyDoubleList();
      private int executorCpuTimeMemoizedSerializedSize = -1;
      public static final int RESULT_SIZE_FIELD_NUMBER = 7;
      private Internal.DoubleList resultSize_ = emptyDoubleList();
      private int resultSizeMemoizedSerializedSize = -1;
      public static final int JVM_GC_TIME_FIELD_NUMBER = 8;
      private Internal.DoubleList jvmGcTime_ = emptyDoubleList();
      private int jvmGcTimeMemoizedSerializedSize = -1;
      public static final int RESULT_SERIALIZATION_TIME_FIELD_NUMBER = 9;
      private Internal.DoubleList resultSerializationTime_ = emptyDoubleList();
      private int resultSerializationTimeMemoizedSerializedSize = -1;
      public static final int GETTING_RESULT_TIME_FIELD_NUMBER = 10;
      private Internal.DoubleList gettingResultTime_ = emptyDoubleList();
      private int gettingResultTimeMemoizedSerializedSize = -1;
      public static final int SCHEDULER_DELAY_FIELD_NUMBER = 11;
      private Internal.DoubleList schedulerDelay_ = emptyDoubleList();
      private int schedulerDelayMemoizedSerializedSize = -1;
      public static final int PEAK_EXECUTION_MEMORY_FIELD_NUMBER = 12;
      private Internal.DoubleList peakExecutionMemory_ = emptyDoubleList();
      private int peakExecutionMemoryMemoizedSerializedSize = -1;
      public static final int MEMORY_BYTES_SPILLED_FIELD_NUMBER = 13;
      private Internal.DoubleList memoryBytesSpilled_ = emptyDoubleList();
      private int memoryBytesSpilledMemoizedSerializedSize = -1;
      public static final int DISK_BYTES_SPILLED_FIELD_NUMBER = 14;
      private Internal.DoubleList diskBytesSpilled_ = emptyDoubleList();
      private int diskBytesSpilledMemoizedSerializedSize = -1;
      public static final int INPUT_METRICS_FIELD_NUMBER = 15;
      private InputMetricDistributions inputMetrics_;
      public static final int OUTPUT_METRICS_FIELD_NUMBER = 16;
      private OutputMetricDistributions outputMetrics_;
      public static final int SHUFFLE_READ_METRICS_FIELD_NUMBER = 17;
      private ShuffleReadMetricDistributions shuffleReadMetrics_;
      public static final int SHUFFLE_WRITE_METRICS_FIELD_NUMBER = 18;
      private ShuffleWriteMetricDistributions shuffleWriteMetrics_;
      private byte memoizedIsInitialized = -1;
      private static final TaskMetricDistributions DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private TaskMetricDistributions(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private TaskMetricDistributions() {
         this.quantiles_ = emptyDoubleList();
         this.duration_ = emptyDoubleList();
         this.executorDeserializeTime_ = emptyDoubleList();
         this.executorDeserializeCpuTime_ = emptyDoubleList();
         this.executorRunTime_ = emptyDoubleList();
         this.executorCpuTime_ = emptyDoubleList();
         this.resultSize_ = emptyDoubleList();
         this.jvmGcTime_ = emptyDoubleList();
         this.resultSerializationTime_ = emptyDoubleList();
         this.gettingResultTime_ = emptyDoubleList();
         this.schedulerDelay_ = emptyDoubleList();
         this.peakExecutionMemory_ = emptyDoubleList();
         this.memoryBytesSpilled_ = emptyDoubleList();
         this.diskBytesSpilled_ = emptyDoubleList();
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskMetricDistributions_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(TaskMetricDistributions.class, Builder.class);
      }

      public List getQuantilesList() {
         return this.quantiles_;
      }

      public int getQuantilesCount() {
         return this.quantiles_.size();
      }

      public double getQuantiles(int index) {
         return this.quantiles_.getDouble(index);
      }

      public List getDurationList() {
         return this.duration_;
      }

      public int getDurationCount() {
         return this.duration_.size();
      }

      public double getDuration(int index) {
         return this.duration_.getDouble(index);
      }

      public List getExecutorDeserializeTimeList() {
         return this.executorDeserializeTime_;
      }

      public int getExecutorDeserializeTimeCount() {
         return this.executorDeserializeTime_.size();
      }

      public double getExecutorDeserializeTime(int index) {
         return this.executorDeserializeTime_.getDouble(index);
      }

      public List getExecutorDeserializeCpuTimeList() {
         return this.executorDeserializeCpuTime_;
      }

      public int getExecutorDeserializeCpuTimeCount() {
         return this.executorDeserializeCpuTime_.size();
      }

      public double getExecutorDeserializeCpuTime(int index) {
         return this.executorDeserializeCpuTime_.getDouble(index);
      }

      public List getExecutorRunTimeList() {
         return this.executorRunTime_;
      }

      public int getExecutorRunTimeCount() {
         return this.executorRunTime_.size();
      }

      public double getExecutorRunTime(int index) {
         return this.executorRunTime_.getDouble(index);
      }

      public List getExecutorCpuTimeList() {
         return this.executorCpuTime_;
      }

      public int getExecutorCpuTimeCount() {
         return this.executorCpuTime_.size();
      }

      public double getExecutorCpuTime(int index) {
         return this.executorCpuTime_.getDouble(index);
      }

      public List getResultSizeList() {
         return this.resultSize_;
      }

      public int getResultSizeCount() {
         return this.resultSize_.size();
      }

      public double getResultSize(int index) {
         return this.resultSize_.getDouble(index);
      }

      public List getJvmGcTimeList() {
         return this.jvmGcTime_;
      }

      public int getJvmGcTimeCount() {
         return this.jvmGcTime_.size();
      }

      public double getJvmGcTime(int index) {
         return this.jvmGcTime_.getDouble(index);
      }

      public List getResultSerializationTimeList() {
         return this.resultSerializationTime_;
      }

      public int getResultSerializationTimeCount() {
         return this.resultSerializationTime_.size();
      }

      public double getResultSerializationTime(int index) {
         return this.resultSerializationTime_.getDouble(index);
      }

      public List getGettingResultTimeList() {
         return this.gettingResultTime_;
      }

      public int getGettingResultTimeCount() {
         return this.gettingResultTime_.size();
      }

      public double getGettingResultTime(int index) {
         return this.gettingResultTime_.getDouble(index);
      }

      public List getSchedulerDelayList() {
         return this.schedulerDelay_;
      }

      public int getSchedulerDelayCount() {
         return this.schedulerDelay_.size();
      }

      public double getSchedulerDelay(int index) {
         return this.schedulerDelay_.getDouble(index);
      }

      public List getPeakExecutionMemoryList() {
         return this.peakExecutionMemory_;
      }

      public int getPeakExecutionMemoryCount() {
         return this.peakExecutionMemory_.size();
      }

      public double getPeakExecutionMemory(int index) {
         return this.peakExecutionMemory_.getDouble(index);
      }

      public List getMemoryBytesSpilledList() {
         return this.memoryBytesSpilled_;
      }

      public int getMemoryBytesSpilledCount() {
         return this.memoryBytesSpilled_.size();
      }

      public double getMemoryBytesSpilled(int index) {
         return this.memoryBytesSpilled_.getDouble(index);
      }

      public List getDiskBytesSpilledList() {
         return this.diskBytesSpilled_;
      }

      public int getDiskBytesSpilledCount() {
         return this.diskBytesSpilled_.size();
      }

      public double getDiskBytesSpilled(int index) {
         return this.diskBytesSpilled_.getDouble(index);
      }

      public boolean hasInputMetrics() {
         return (this.bitField0_ & 1) != 0;
      }

      public InputMetricDistributions getInputMetrics() {
         return this.inputMetrics_ == null ? StoreTypes.InputMetricDistributions.getDefaultInstance() : this.inputMetrics_;
      }

      public InputMetricDistributionsOrBuilder getInputMetricsOrBuilder() {
         return this.inputMetrics_ == null ? StoreTypes.InputMetricDistributions.getDefaultInstance() : this.inputMetrics_;
      }

      public boolean hasOutputMetrics() {
         return (this.bitField0_ & 2) != 0;
      }

      public OutputMetricDistributions getOutputMetrics() {
         return this.outputMetrics_ == null ? StoreTypes.OutputMetricDistributions.getDefaultInstance() : this.outputMetrics_;
      }

      public OutputMetricDistributionsOrBuilder getOutputMetricsOrBuilder() {
         return this.outputMetrics_ == null ? StoreTypes.OutputMetricDistributions.getDefaultInstance() : this.outputMetrics_;
      }

      public boolean hasShuffleReadMetrics() {
         return (this.bitField0_ & 4) != 0;
      }

      public ShuffleReadMetricDistributions getShuffleReadMetrics() {
         return this.shuffleReadMetrics_ == null ? StoreTypes.ShuffleReadMetricDistributions.getDefaultInstance() : this.shuffleReadMetrics_;
      }

      public ShuffleReadMetricDistributionsOrBuilder getShuffleReadMetricsOrBuilder() {
         return this.shuffleReadMetrics_ == null ? StoreTypes.ShuffleReadMetricDistributions.getDefaultInstance() : this.shuffleReadMetrics_;
      }

      public boolean hasShuffleWriteMetrics() {
         return (this.bitField0_ & 8) != 0;
      }

      public ShuffleWriteMetricDistributions getShuffleWriteMetrics() {
         return this.shuffleWriteMetrics_ == null ? StoreTypes.ShuffleWriteMetricDistributions.getDefaultInstance() : this.shuffleWriteMetrics_;
      }

      public ShuffleWriteMetricDistributionsOrBuilder getShuffleWriteMetricsOrBuilder() {
         return this.shuffleWriteMetrics_ == null ? StoreTypes.ShuffleWriteMetricDistributions.getDefaultInstance() : this.shuffleWriteMetrics_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         this.getSerializedSize();
         if (this.getQuantilesList().size() > 0) {
            output.writeUInt32NoTag(10);
            output.writeUInt32NoTag(this.quantilesMemoizedSerializedSize);
         }

         for(int i = 0; i < this.quantiles_.size(); ++i) {
            output.writeDoubleNoTag(this.quantiles_.getDouble(i));
         }

         if (this.getDurationList().size() > 0) {
            output.writeUInt32NoTag(18);
            output.writeUInt32NoTag(this.durationMemoizedSerializedSize);
         }

         for(int i = 0; i < this.duration_.size(); ++i) {
            output.writeDoubleNoTag(this.duration_.getDouble(i));
         }

         if (this.getExecutorDeserializeTimeList().size() > 0) {
            output.writeUInt32NoTag(26);
            output.writeUInt32NoTag(this.executorDeserializeTimeMemoizedSerializedSize);
         }

         for(int i = 0; i < this.executorDeserializeTime_.size(); ++i) {
            output.writeDoubleNoTag(this.executorDeserializeTime_.getDouble(i));
         }

         if (this.getExecutorDeserializeCpuTimeList().size() > 0) {
            output.writeUInt32NoTag(34);
            output.writeUInt32NoTag(this.executorDeserializeCpuTimeMemoizedSerializedSize);
         }

         for(int i = 0; i < this.executorDeserializeCpuTime_.size(); ++i) {
            output.writeDoubleNoTag(this.executorDeserializeCpuTime_.getDouble(i));
         }

         if (this.getExecutorRunTimeList().size() > 0) {
            output.writeUInt32NoTag(42);
            output.writeUInt32NoTag(this.executorRunTimeMemoizedSerializedSize);
         }

         for(int i = 0; i < this.executorRunTime_.size(); ++i) {
            output.writeDoubleNoTag(this.executorRunTime_.getDouble(i));
         }

         if (this.getExecutorCpuTimeList().size() > 0) {
            output.writeUInt32NoTag(50);
            output.writeUInt32NoTag(this.executorCpuTimeMemoizedSerializedSize);
         }

         for(int i = 0; i < this.executorCpuTime_.size(); ++i) {
            output.writeDoubleNoTag(this.executorCpuTime_.getDouble(i));
         }

         if (this.getResultSizeList().size() > 0) {
            output.writeUInt32NoTag(58);
            output.writeUInt32NoTag(this.resultSizeMemoizedSerializedSize);
         }

         for(int i = 0; i < this.resultSize_.size(); ++i) {
            output.writeDoubleNoTag(this.resultSize_.getDouble(i));
         }

         if (this.getJvmGcTimeList().size() > 0) {
            output.writeUInt32NoTag(66);
            output.writeUInt32NoTag(this.jvmGcTimeMemoizedSerializedSize);
         }

         for(int i = 0; i < this.jvmGcTime_.size(); ++i) {
            output.writeDoubleNoTag(this.jvmGcTime_.getDouble(i));
         }

         if (this.getResultSerializationTimeList().size() > 0) {
            output.writeUInt32NoTag(74);
            output.writeUInt32NoTag(this.resultSerializationTimeMemoizedSerializedSize);
         }

         for(int i = 0; i < this.resultSerializationTime_.size(); ++i) {
            output.writeDoubleNoTag(this.resultSerializationTime_.getDouble(i));
         }

         if (this.getGettingResultTimeList().size() > 0) {
            output.writeUInt32NoTag(82);
            output.writeUInt32NoTag(this.gettingResultTimeMemoizedSerializedSize);
         }

         for(int i = 0; i < this.gettingResultTime_.size(); ++i) {
            output.writeDoubleNoTag(this.gettingResultTime_.getDouble(i));
         }

         if (this.getSchedulerDelayList().size() > 0) {
            output.writeUInt32NoTag(90);
            output.writeUInt32NoTag(this.schedulerDelayMemoizedSerializedSize);
         }

         for(int i = 0; i < this.schedulerDelay_.size(); ++i) {
            output.writeDoubleNoTag(this.schedulerDelay_.getDouble(i));
         }

         if (this.getPeakExecutionMemoryList().size() > 0) {
            output.writeUInt32NoTag(98);
            output.writeUInt32NoTag(this.peakExecutionMemoryMemoizedSerializedSize);
         }

         for(int i = 0; i < this.peakExecutionMemory_.size(); ++i) {
            output.writeDoubleNoTag(this.peakExecutionMemory_.getDouble(i));
         }

         if (this.getMemoryBytesSpilledList().size() > 0) {
            output.writeUInt32NoTag(106);
            output.writeUInt32NoTag(this.memoryBytesSpilledMemoizedSerializedSize);
         }

         for(int i = 0; i < this.memoryBytesSpilled_.size(); ++i) {
            output.writeDoubleNoTag(this.memoryBytesSpilled_.getDouble(i));
         }

         if (this.getDiskBytesSpilledList().size() > 0) {
            output.writeUInt32NoTag(114);
            output.writeUInt32NoTag(this.diskBytesSpilledMemoizedSerializedSize);
         }

         for(int i = 0; i < this.diskBytesSpilled_.size(); ++i) {
            output.writeDoubleNoTag(this.diskBytesSpilled_.getDouble(i));
         }

         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(15, this.getInputMetrics());
         }

         if ((this.bitField0_ & 2) != 0) {
            output.writeMessage(16, this.getOutputMetrics());
         }

         if ((this.bitField0_ & 4) != 0) {
            output.writeMessage(17, this.getShuffleReadMetrics());
         }

         if ((this.bitField0_ & 8) != 0) {
            output.writeMessage(18, this.getShuffleWriteMetrics());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            int dataSize = 0;
            dataSize = 8 * this.getQuantilesList().size();
            size += dataSize;
            if (!this.getQuantilesList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.quantilesMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getDurationList().size();
            size += dataSize;
            if (!this.getDurationList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.durationMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getExecutorDeserializeTimeList().size();
            size += dataSize;
            if (!this.getExecutorDeserializeTimeList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.executorDeserializeTimeMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getExecutorDeserializeCpuTimeList().size();
            size += dataSize;
            if (!this.getExecutorDeserializeCpuTimeList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.executorDeserializeCpuTimeMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getExecutorRunTimeList().size();
            size += dataSize;
            if (!this.getExecutorRunTimeList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.executorRunTimeMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getExecutorCpuTimeList().size();
            size += dataSize;
            if (!this.getExecutorCpuTimeList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.executorCpuTimeMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getResultSizeList().size();
            size += dataSize;
            if (!this.getResultSizeList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.resultSizeMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getJvmGcTimeList().size();
            size += dataSize;
            if (!this.getJvmGcTimeList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.jvmGcTimeMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getResultSerializationTimeList().size();
            size += dataSize;
            if (!this.getResultSerializationTimeList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.resultSerializationTimeMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getGettingResultTimeList().size();
            size += dataSize;
            if (!this.getGettingResultTimeList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.gettingResultTimeMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getSchedulerDelayList().size();
            size += dataSize;
            if (!this.getSchedulerDelayList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.schedulerDelayMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getPeakExecutionMemoryList().size();
            size += dataSize;
            if (!this.getPeakExecutionMemoryList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.peakExecutionMemoryMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getMemoryBytesSpilledList().size();
            size += dataSize;
            if (!this.getMemoryBytesSpilledList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.memoryBytesSpilledMemoizedSerializedSize = dataSize;
            dataSize = 0;
            dataSize = 8 * this.getDiskBytesSpilledList().size();
            size += dataSize;
            if (!this.getDiskBytesSpilledList().isEmpty()) {
               ++size;
               size += CodedOutputStream.computeInt32SizeNoTag(dataSize);
            }

            this.diskBytesSpilledMemoizedSerializedSize = dataSize;
            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(15, this.getInputMetrics());
            }

            if ((this.bitField0_ & 2) != 0) {
               size += CodedOutputStream.computeMessageSize(16, this.getOutputMetrics());
            }

            if ((this.bitField0_ & 4) != 0) {
               size += CodedOutputStream.computeMessageSize(17, this.getShuffleReadMetrics());
            }

            if ((this.bitField0_ & 8) != 0) {
               size += CodedOutputStream.computeMessageSize(18, this.getShuffleWriteMetrics());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof TaskMetricDistributions)) {
            return super.equals(obj);
         } else {
            TaskMetricDistributions other = (TaskMetricDistributions)obj;
            if (!this.getQuantilesList().equals(other.getQuantilesList())) {
               return false;
            } else if (!this.getDurationList().equals(other.getDurationList())) {
               return false;
            } else if (!this.getExecutorDeserializeTimeList().equals(other.getExecutorDeserializeTimeList())) {
               return false;
            } else if (!this.getExecutorDeserializeCpuTimeList().equals(other.getExecutorDeserializeCpuTimeList())) {
               return false;
            } else if (!this.getExecutorRunTimeList().equals(other.getExecutorRunTimeList())) {
               return false;
            } else if (!this.getExecutorCpuTimeList().equals(other.getExecutorCpuTimeList())) {
               return false;
            } else if (!this.getResultSizeList().equals(other.getResultSizeList())) {
               return false;
            } else if (!this.getJvmGcTimeList().equals(other.getJvmGcTimeList())) {
               return false;
            } else if (!this.getResultSerializationTimeList().equals(other.getResultSerializationTimeList())) {
               return false;
            } else if (!this.getGettingResultTimeList().equals(other.getGettingResultTimeList())) {
               return false;
            } else if (!this.getSchedulerDelayList().equals(other.getSchedulerDelayList())) {
               return false;
            } else if (!this.getPeakExecutionMemoryList().equals(other.getPeakExecutionMemoryList())) {
               return false;
            } else if (!this.getMemoryBytesSpilledList().equals(other.getMemoryBytesSpilledList())) {
               return false;
            } else if (!this.getDiskBytesSpilledList().equals(other.getDiskBytesSpilledList())) {
               return false;
            } else if (this.hasInputMetrics() != other.hasInputMetrics()) {
               return false;
            } else if (this.hasInputMetrics() && !this.getInputMetrics().equals(other.getInputMetrics())) {
               return false;
            } else if (this.hasOutputMetrics() != other.hasOutputMetrics()) {
               return false;
            } else if (this.hasOutputMetrics() && !this.getOutputMetrics().equals(other.getOutputMetrics())) {
               return false;
            } else if (this.hasShuffleReadMetrics() != other.hasShuffleReadMetrics()) {
               return false;
            } else if (this.hasShuffleReadMetrics() && !this.getShuffleReadMetrics().equals(other.getShuffleReadMetrics())) {
               return false;
            } else if (this.hasShuffleWriteMetrics() != other.hasShuffleWriteMetrics()) {
               return false;
            } else if (this.hasShuffleWriteMetrics() && !this.getShuffleWriteMetrics().equals(other.getShuffleWriteMetrics())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            if (this.getQuantilesCount() > 0) {
               hash = 37 * hash + 1;
               hash = 53 * hash + this.getQuantilesList().hashCode();
            }

            if (this.getDurationCount() > 0) {
               hash = 37 * hash + 2;
               hash = 53 * hash + this.getDurationList().hashCode();
            }

            if (this.getExecutorDeserializeTimeCount() > 0) {
               hash = 37 * hash + 3;
               hash = 53 * hash + this.getExecutorDeserializeTimeList().hashCode();
            }

            if (this.getExecutorDeserializeCpuTimeCount() > 0) {
               hash = 37 * hash + 4;
               hash = 53 * hash + this.getExecutorDeserializeCpuTimeList().hashCode();
            }

            if (this.getExecutorRunTimeCount() > 0) {
               hash = 37 * hash + 5;
               hash = 53 * hash + this.getExecutorRunTimeList().hashCode();
            }

            if (this.getExecutorCpuTimeCount() > 0) {
               hash = 37 * hash + 6;
               hash = 53 * hash + this.getExecutorCpuTimeList().hashCode();
            }

            if (this.getResultSizeCount() > 0) {
               hash = 37 * hash + 7;
               hash = 53 * hash + this.getResultSizeList().hashCode();
            }

            if (this.getJvmGcTimeCount() > 0) {
               hash = 37 * hash + 8;
               hash = 53 * hash + this.getJvmGcTimeList().hashCode();
            }

            if (this.getResultSerializationTimeCount() > 0) {
               hash = 37 * hash + 9;
               hash = 53 * hash + this.getResultSerializationTimeList().hashCode();
            }

            if (this.getGettingResultTimeCount() > 0) {
               hash = 37 * hash + 10;
               hash = 53 * hash + this.getGettingResultTimeList().hashCode();
            }

            if (this.getSchedulerDelayCount() > 0) {
               hash = 37 * hash + 11;
               hash = 53 * hash + this.getSchedulerDelayList().hashCode();
            }

            if (this.getPeakExecutionMemoryCount() > 0) {
               hash = 37 * hash + 12;
               hash = 53 * hash + this.getPeakExecutionMemoryList().hashCode();
            }

            if (this.getMemoryBytesSpilledCount() > 0) {
               hash = 37 * hash + 13;
               hash = 53 * hash + this.getMemoryBytesSpilledList().hashCode();
            }

            if (this.getDiskBytesSpilledCount() > 0) {
               hash = 37 * hash + 14;
               hash = 53 * hash + this.getDiskBytesSpilledList().hashCode();
            }

            if (this.hasInputMetrics()) {
               hash = 37 * hash + 15;
               hash = 53 * hash + this.getInputMetrics().hashCode();
            }

            if (this.hasOutputMetrics()) {
               hash = 37 * hash + 16;
               hash = 53 * hash + this.getOutputMetrics().hashCode();
            }

            if (this.hasShuffleReadMetrics()) {
               hash = 37 * hash + 17;
               hash = 53 * hash + this.getShuffleReadMetrics().hashCode();
            }

            if (this.hasShuffleWriteMetrics()) {
               hash = 37 * hash + 18;
               hash = 53 * hash + this.getShuffleWriteMetrics().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static TaskMetricDistributions parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (TaskMetricDistributions)PARSER.parseFrom(data);
      }

      public static TaskMetricDistributions parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskMetricDistributions parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (TaskMetricDistributions)PARSER.parseFrom(data);
      }

      public static TaskMetricDistributions parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskMetricDistributions parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (TaskMetricDistributions)PARSER.parseFrom(data);
      }

      public static TaskMetricDistributions parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskMetricDistributions)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskMetricDistributions parseFrom(InputStream input) throws IOException {
         return (TaskMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static TaskMetricDistributions parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static TaskMetricDistributions parseDelimitedFrom(InputStream input) throws IOException {
         return (TaskMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static TaskMetricDistributions parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskMetricDistributions)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static TaskMetricDistributions parseFrom(CodedInputStream input) throws IOException {
         return (TaskMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static TaskMetricDistributions parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskMetricDistributions)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(TaskMetricDistributions prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static TaskMetricDistributions getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public TaskMetricDistributions getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", TaskMetricDistributions.class.getName());
         DEFAULT_INSTANCE = new TaskMetricDistributions();
         PARSER = new AbstractParser() {
            public TaskMetricDistributions parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.TaskMetricDistributions.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements TaskMetricDistributionsOrBuilder {
         private int bitField0_;
         private Internal.DoubleList quantiles_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList duration_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList executorDeserializeTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList executorDeserializeCpuTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList executorRunTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList executorCpuTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList resultSize_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList jvmGcTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList resultSerializationTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList gettingResultTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList schedulerDelay_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList peakExecutionMemory_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList memoryBytesSpilled_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private Internal.DoubleList diskBytesSpilled_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
         private InputMetricDistributions inputMetrics_;
         private SingleFieldBuilder inputMetricsBuilder_;
         private OutputMetricDistributions outputMetrics_;
         private SingleFieldBuilder outputMetricsBuilder_;
         private ShuffleReadMetricDistributions shuffleReadMetrics_;
         private SingleFieldBuilder shuffleReadMetricsBuilder_;
         private ShuffleWriteMetricDistributions shuffleWriteMetrics_;
         private SingleFieldBuilder shuffleWriteMetricsBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskMetricDistributions_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskMetricDistributions_fieldAccessorTable.ensureFieldAccessorsInitialized(TaskMetricDistributions.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.TaskMetricDistributions.alwaysUseFieldBuilders) {
               this.getInputMetricsFieldBuilder();
               this.getOutputMetricsFieldBuilder();
               this.getShuffleReadMetricsFieldBuilder();
               this.getShuffleWriteMetricsFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.quantiles_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.duration_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.executorDeserializeTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.executorDeserializeCpuTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.executorRunTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.executorCpuTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.resultSize_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.jvmGcTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.resultSerializationTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.gettingResultTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.schedulerDelay_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.peakExecutionMemory_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.memoryBytesSpilled_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.diskBytesSpilled_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.inputMetrics_ = null;
            if (this.inputMetricsBuilder_ != null) {
               this.inputMetricsBuilder_.dispose();
               this.inputMetricsBuilder_ = null;
            }

            this.outputMetrics_ = null;
            if (this.outputMetricsBuilder_ != null) {
               this.outputMetricsBuilder_.dispose();
               this.outputMetricsBuilder_ = null;
            }

            this.shuffleReadMetrics_ = null;
            if (this.shuffleReadMetricsBuilder_ != null) {
               this.shuffleReadMetricsBuilder_.dispose();
               this.shuffleReadMetricsBuilder_ = null;
            }

            this.shuffleWriteMetrics_ = null;
            if (this.shuffleWriteMetricsBuilder_ != null) {
               this.shuffleWriteMetricsBuilder_.dispose();
               this.shuffleWriteMetricsBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskMetricDistributions_descriptor;
         }

         public TaskMetricDistributions getDefaultInstanceForType() {
            return StoreTypes.TaskMetricDistributions.getDefaultInstance();
         }

         public TaskMetricDistributions build() {
            TaskMetricDistributions result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public TaskMetricDistributions buildPartial() {
            TaskMetricDistributions result = new TaskMetricDistributions(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(TaskMetricDistributions result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               this.quantiles_.makeImmutable();
               result.quantiles_ = this.quantiles_;
            }

            if ((from_bitField0_ & 2) != 0) {
               this.duration_.makeImmutable();
               result.duration_ = this.duration_;
            }

            if ((from_bitField0_ & 4) != 0) {
               this.executorDeserializeTime_.makeImmutable();
               result.executorDeserializeTime_ = this.executorDeserializeTime_;
            }

            if ((from_bitField0_ & 8) != 0) {
               this.executorDeserializeCpuTime_.makeImmutable();
               result.executorDeserializeCpuTime_ = this.executorDeserializeCpuTime_;
            }

            if ((from_bitField0_ & 16) != 0) {
               this.executorRunTime_.makeImmutable();
               result.executorRunTime_ = this.executorRunTime_;
            }

            if ((from_bitField0_ & 32) != 0) {
               this.executorCpuTime_.makeImmutable();
               result.executorCpuTime_ = this.executorCpuTime_;
            }

            if ((from_bitField0_ & 64) != 0) {
               this.resultSize_.makeImmutable();
               result.resultSize_ = this.resultSize_;
            }

            if ((from_bitField0_ & 128) != 0) {
               this.jvmGcTime_.makeImmutable();
               result.jvmGcTime_ = this.jvmGcTime_;
            }

            if ((from_bitField0_ & 256) != 0) {
               this.resultSerializationTime_.makeImmutable();
               result.resultSerializationTime_ = this.resultSerializationTime_;
            }

            if ((from_bitField0_ & 512) != 0) {
               this.gettingResultTime_.makeImmutable();
               result.gettingResultTime_ = this.gettingResultTime_;
            }

            if ((from_bitField0_ & 1024) != 0) {
               this.schedulerDelay_.makeImmutable();
               result.schedulerDelay_ = this.schedulerDelay_;
            }

            if ((from_bitField0_ & 2048) != 0) {
               this.peakExecutionMemory_.makeImmutable();
               result.peakExecutionMemory_ = this.peakExecutionMemory_;
            }

            if ((from_bitField0_ & 4096) != 0) {
               this.memoryBytesSpilled_.makeImmutable();
               result.memoryBytesSpilled_ = this.memoryBytesSpilled_;
            }

            if ((from_bitField0_ & 8192) != 0) {
               this.diskBytesSpilled_.makeImmutable();
               result.diskBytesSpilled_ = this.diskBytesSpilled_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 16384) != 0) {
               result.inputMetrics_ = this.inputMetricsBuilder_ == null ? this.inputMetrics_ : (InputMetricDistributions)this.inputMetricsBuilder_.build();
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & '耀') != 0) {
               result.outputMetrics_ = this.outputMetricsBuilder_ == null ? this.outputMetrics_ : (OutputMetricDistributions)this.outputMetricsBuilder_.build();
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 65536) != 0) {
               result.shuffleReadMetrics_ = this.shuffleReadMetricsBuilder_ == null ? this.shuffleReadMetrics_ : (ShuffleReadMetricDistributions)this.shuffleReadMetricsBuilder_.build();
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 131072) != 0) {
               result.shuffleWriteMetrics_ = this.shuffleWriteMetricsBuilder_ == null ? this.shuffleWriteMetrics_ : (ShuffleWriteMetricDistributions)this.shuffleWriteMetricsBuilder_.build();
               to_bitField0_ |= 8;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof TaskMetricDistributions) {
               return this.mergeFrom((TaskMetricDistributions)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(TaskMetricDistributions other) {
            if (other == StoreTypes.TaskMetricDistributions.getDefaultInstance()) {
               return this;
            } else {
               if (!other.quantiles_.isEmpty()) {
                  if (this.quantiles_.isEmpty()) {
                     this.quantiles_ = other.quantiles_;
                     this.quantiles_.makeImmutable();
                     this.bitField0_ |= 1;
                  } else {
                     this.ensureQuantilesIsMutable();
                     this.quantiles_.addAll(other.quantiles_);
                  }

                  this.onChanged();
               }

               if (!other.duration_.isEmpty()) {
                  if (this.duration_.isEmpty()) {
                     this.duration_ = other.duration_;
                     this.duration_.makeImmutable();
                     this.bitField0_ |= 2;
                  } else {
                     this.ensureDurationIsMutable();
                     this.duration_.addAll(other.duration_);
                  }

                  this.onChanged();
               }

               if (!other.executorDeserializeTime_.isEmpty()) {
                  if (this.executorDeserializeTime_.isEmpty()) {
                     this.executorDeserializeTime_ = other.executorDeserializeTime_;
                     this.executorDeserializeTime_.makeImmutable();
                     this.bitField0_ |= 4;
                  } else {
                     this.ensureExecutorDeserializeTimeIsMutable();
                     this.executorDeserializeTime_.addAll(other.executorDeserializeTime_);
                  }

                  this.onChanged();
               }

               if (!other.executorDeserializeCpuTime_.isEmpty()) {
                  if (this.executorDeserializeCpuTime_.isEmpty()) {
                     this.executorDeserializeCpuTime_ = other.executorDeserializeCpuTime_;
                     this.executorDeserializeCpuTime_.makeImmutable();
                     this.bitField0_ |= 8;
                  } else {
                     this.ensureExecutorDeserializeCpuTimeIsMutable();
                     this.executorDeserializeCpuTime_.addAll(other.executorDeserializeCpuTime_);
                  }

                  this.onChanged();
               }

               if (!other.executorRunTime_.isEmpty()) {
                  if (this.executorRunTime_.isEmpty()) {
                     this.executorRunTime_ = other.executorRunTime_;
                     this.executorRunTime_.makeImmutable();
                     this.bitField0_ |= 16;
                  } else {
                     this.ensureExecutorRunTimeIsMutable();
                     this.executorRunTime_.addAll(other.executorRunTime_);
                  }

                  this.onChanged();
               }

               if (!other.executorCpuTime_.isEmpty()) {
                  if (this.executorCpuTime_.isEmpty()) {
                     this.executorCpuTime_ = other.executorCpuTime_;
                     this.executorCpuTime_.makeImmutable();
                     this.bitField0_ |= 32;
                  } else {
                     this.ensureExecutorCpuTimeIsMutable();
                     this.executorCpuTime_.addAll(other.executorCpuTime_);
                  }

                  this.onChanged();
               }

               if (!other.resultSize_.isEmpty()) {
                  if (this.resultSize_.isEmpty()) {
                     this.resultSize_ = other.resultSize_;
                     this.resultSize_.makeImmutable();
                     this.bitField0_ |= 64;
                  } else {
                     this.ensureResultSizeIsMutable();
                     this.resultSize_.addAll(other.resultSize_);
                  }

                  this.onChanged();
               }

               if (!other.jvmGcTime_.isEmpty()) {
                  if (this.jvmGcTime_.isEmpty()) {
                     this.jvmGcTime_ = other.jvmGcTime_;
                     this.jvmGcTime_.makeImmutable();
                     this.bitField0_ |= 128;
                  } else {
                     this.ensureJvmGcTimeIsMutable();
                     this.jvmGcTime_.addAll(other.jvmGcTime_);
                  }

                  this.onChanged();
               }

               if (!other.resultSerializationTime_.isEmpty()) {
                  if (this.resultSerializationTime_.isEmpty()) {
                     this.resultSerializationTime_ = other.resultSerializationTime_;
                     this.resultSerializationTime_.makeImmutable();
                     this.bitField0_ |= 256;
                  } else {
                     this.ensureResultSerializationTimeIsMutable();
                     this.resultSerializationTime_.addAll(other.resultSerializationTime_);
                  }

                  this.onChanged();
               }

               if (!other.gettingResultTime_.isEmpty()) {
                  if (this.gettingResultTime_.isEmpty()) {
                     this.gettingResultTime_ = other.gettingResultTime_;
                     this.gettingResultTime_.makeImmutable();
                     this.bitField0_ |= 512;
                  } else {
                     this.ensureGettingResultTimeIsMutable();
                     this.gettingResultTime_.addAll(other.gettingResultTime_);
                  }

                  this.onChanged();
               }

               if (!other.schedulerDelay_.isEmpty()) {
                  if (this.schedulerDelay_.isEmpty()) {
                     this.schedulerDelay_ = other.schedulerDelay_;
                     this.schedulerDelay_.makeImmutable();
                     this.bitField0_ |= 1024;
                  } else {
                     this.ensureSchedulerDelayIsMutable();
                     this.schedulerDelay_.addAll(other.schedulerDelay_);
                  }

                  this.onChanged();
               }

               if (!other.peakExecutionMemory_.isEmpty()) {
                  if (this.peakExecutionMemory_.isEmpty()) {
                     this.peakExecutionMemory_ = other.peakExecutionMemory_;
                     this.peakExecutionMemory_.makeImmutable();
                     this.bitField0_ |= 2048;
                  } else {
                     this.ensurePeakExecutionMemoryIsMutable();
                     this.peakExecutionMemory_.addAll(other.peakExecutionMemory_);
                  }

                  this.onChanged();
               }

               if (!other.memoryBytesSpilled_.isEmpty()) {
                  if (this.memoryBytesSpilled_.isEmpty()) {
                     this.memoryBytesSpilled_ = other.memoryBytesSpilled_;
                     this.memoryBytesSpilled_.makeImmutable();
                     this.bitField0_ |= 4096;
                  } else {
                     this.ensureMemoryBytesSpilledIsMutable();
                     this.memoryBytesSpilled_.addAll(other.memoryBytesSpilled_);
                  }

                  this.onChanged();
               }

               if (!other.diskBytesSpilled_.isEmpty()) {
                  if (this.diskBytesSpilled_.isEmpty()) {
                     this.diskBytesSpilled_ = other.diskBytesSpilled_;
                     this.diskBytesSpilled_.makeImmutable();
                     this.bitField0_ |= 8192;
                  } else {
                     this.ensureDiskBytesSpilledIsMutable();
                     this.diskBytesSpilled_.addAll(other.diskBytesSpilled_);
                  }

                  this.onChanged();
               }

               if (other.hasInputMetrics()) {
                  this.mergeInputMetrics(other.getInputMetrics());
               }

               if (other.hasOutputMetrics()) {
                  this.mergeOutputMetrics(other.getOutputMetrics());
               }

               if (other.hasShuffleReadMetrics()) {
                  this.mergeShuffleReadMetrics(other.getShuffleReadMetrics());
               }

               if (other.hasShuffleWriteMetrics()) {
                  this.mergeShuffleWriteMetrics(other.getShuffleWriteMetrics());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 48:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 67:
                        case 68:
                        case 69:
                        case 70:
                        case 71:
                        case 72:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 79:
                        case 80:
                        case 83:
                        case 84:
                        case 85:
                        case 86:
                        case 87:
                        case 88:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 107:
                        case 108:
                        case 109:
                        case 110:
                        case 111:
                        case 112:
                        case 115:
                        case 116:
                        case 117:
                        case 118:
                        case 119:
                        case 120:
                        case 121:
                        case 123:
                        case 124:
                        case 125:
                        case 126:
                        case 127:
                        case 128:
                        case 129:
                        case 131:
                        case 132:
                        case 133:
                        case 134:
                        case 135:
                        case 136:
                        case 137:
                        case 139:
                        case 140:
                        case 141:
                        case 142:
                        case 143:
                        case 144:
                        case 145:
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                           break;
                        case 9:
                           double v = input.readDouble();
                           this.ensureQuantilesIsMutable();
                           this.quantiles_.addDouble(v);
                           break;
                        case 10:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureQuantilesIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.quantiles_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 17:
                           double v = input.readDouble();
                           this.ensureDurationIsMutable();
                           this.duration_.addDouble(v);
                           break;
                        case 18:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureDurationIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.duration_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 25:
                           double v = input.readDouble();
                           this.ensureExecutorDeserializeTimeIsMutable();
                           this.executorDeserializeTime_.addDouble(v);
                           break;
                        case 26:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureExecutorDeserializeTimeIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.executorDeserializeTime_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 33:
                           double v = input.readDouble();
                           this.ensureExecutorDeserializeCpuTimeIsMutable();
                           this.executorDeserializeCpuTime_.addDouble(v);
                           break;
                        case 34:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureExecutorDeserializeCpuTimeIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.executorDeserializeCpuTime_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 41:
                           double v = input.readDouble();
                           this.ensureExecutorRunTimeIsMutable();
                           this.executorRunTime_.addDouble(v);
                           break;
                        case 42:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureExecutorRunTimeIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.executorRunTime_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 49:
                           double v = input.readDouble();
                           this.ensureExecutorCpuTimeIsMutable();
                           this.executorCpuTime_.addDouble(v);
                           break;
                        case 50:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureExecutorCpuTimeIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.executorCpuTime_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 57:
                           double v = input.readDouble();
                           this.ensureResultSizeIsMutable();
                           this.resultSize_.addDouble(v);
                           break;
                        case 58:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureResultSizeIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.resultSize_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 65:
                           double v = input.readDouble();
                           this.ensureJvmGcTimeIsMutable();
                           this.jvmGcTime_.addDouble(v);
                           break;
                        case 66:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureJvmGcTimeIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.jvmGcTime_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 73:
                           double v = input.readDouble();
                           this.ensureResultSerializationTimeIsMutable();
                           this.resultSerializationTime_.addDouble(v);
                           break;
                        case 74:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureResultSerializationTimeIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.resultSerializationTime_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 81:
                           double v = input.readDouble();
                           this.ensureGettingResultTimeIsMutable();
                           this.gettingResultTime_.addDouble(v);
                           break;
                        case 82:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureGettingResultTimeIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.gettingResultTime_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 89:
                           double v = input.readDouble();
                           this.ensureSchedulerDelayIsMutable();
                           this.schedulerDelay_.addDouble(v);
                           break;
                        case 90:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureSchedulerDelayIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.schedulerDelay_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 97:
                           double v = input.readDouble();
                           this.ensurePeakExecutionMemoryIsMutable();
                           this.peakExecutionMemory_.addDouble(v);
                           break;
                        case 98:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensurePeakExecutionMemoryIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.peakExecutionMemory_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 105:
                           double v = input.readDouble();
                           this.ensureMemoryBytesSpilledIsMutable();
                           this.memoryBytesSpilled_.addDouble(v);
                           break;
                        case 106:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureMemoryBytesSpilledIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.memoryBytesSpilled_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 113:
                           double v = input.readDouble();
                           this.ensureDiskBytesSpilledIsMutable();
                           this.diskBytesSpilled_.addDouble(v);
                           break;
                        case 114:
                           int length = input.readRawVarint32();
                           int limit = input.pushLimit(length);
                           int alloc = length > 4096 ? 4096 : length;
                           this.ensureDiskBytesSpilledIsMutable(alloc / 8);

                           while(input.getBytesUntilLimit() > 0) {
                              this.diskBytesSpilled_.addDouble(input.readDouble());
                           }

                           input.popLimit(limit);
                           break;
                        case 122:
                           input.readMessage((MessageLite.Builder)this.getInputMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 16384;
                           break;
                        case 130:
                           input.readMessage((MessageLite.Builder)this.getOutputMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 32768;
                           break;
                        case 138:
                           input.readMessage((MessageLite.Builder)this.getShuffleReadMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 65536;
                           break;
                        case 146:
                           input.readMessage((MessageLite.Builder)this.getShuffleWriteMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 131072;
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         private void ensureQuantilesIsMutable() {
            if (!this.quantiles_.isModifiable()) {
               this.quantiles_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.quantiles_);
            }

            this.bitField0_ |= 1;
         }

         private void ensureQuantilesIsMutable(int capacity) {
            if (!this.quantiles_.isModifiable()) {
               this.quantiles_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.quantiles_, capacity);
            }

            this.bitField0_ |= 1;
         }

         public List getQuantilesList() {
            this.quantiles_.makeImmutable();
            return this.quantiles_;
         }

         public int getQuantilesCount() {
            return this.quantiles_.size();
         }

         public double getQuantiles(int index) {
            return this.quantiles_.getDouble(index);
         }

         public Builder setQuantiles(int index, double value) {
            this.ensureQuantilesIsMutable();
            this.quantiles_.setDouble(index, value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addQuantiles(double value) {
            this.ensureQuantilesIsMutable();
            this.quantiles_.addDouble(value);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder addAllQuantiles(Iterable values) {
            this.ensureQuantilesIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.quantiles_);
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearQuantiles() {
            this.quantiles_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -2;
            this.onChanged();
            return this;
         }

         private void ensureDurationIsMutable() {
            if (!this.duration_.isModifiable()) {
               this.duration_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.duration_);
            }

            this.bitField0_ |= 2;
         }

         private void ensureDurationIsMutable(int capacity) {
            if (!this.duration_.isModifiable()) {
               this.duration_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.duration_, capacity);
            }

            this.bitField0_ |= 2;
         }

         public List getDurationList() {
            this.duration_.makeImmutable();
            return this.duration_;
         }

         public int getDurationCount() {
            return this.duration_.size();
         }

         public double getDuration(int index) {
            return this.duration_.getDouble(index);
         }

         public Builder setDuration(int index, double value) {
            this.ensureDurationIsMutable();
            this.duration_.setDouble(index, value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addDuration(double value) {
            this.ensureDurationIsMutable();
            this.duration_.addDouble(value);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder addAllDuration(Iterable values) {
            this.ensureDurationIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.duration_);
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearDuration() {
            this.duration_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -3;
            this.onChanged();
            return this;
         }

         private void ensureExecutorDeserializeTimeIsMutable() {
            if (!this.executorDeserializeTime_.isModifiable()) {
               this.executorDeserializeTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.executorDeserializeTime_);
            }

            this.bitField0_ |= 4;
         }

         private void ensureExecutorDeserializeTimeIsMutable(int capacity) {
            if (!this.executorDeserializeTime_.isModifiable()) {
               this.executorDeserializeTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.executorDeserializeTime_, capacity);
            }

            this.bitField0_ |= 4;
         }

         public List getExecutorDeserializeTimeList() {
            this.executorDeserializeTime_.makeImmutable();
            return this.executorDeserializeTime_;
         }

         public int getExecutorDeserializeTimeCount() {
            return this.executorDeserializeTime_.size();
         }

         public double getExecutorDeserializeTime(int index) {
            return this.executorDeserializeTime_.getDouble(index);
         }

         public Builder setExecutorDeserializeTime(int index, double value) {
            this.ensureExecutorDeserializeTimeIsMutable();
            this.executorDeserializeTime_.setDouble(index, value);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder addExecutorDeserializeTime(double value) {
            this.ensureExecutorDeserializeTimeIsMutable();
            this.executorDeserializeTime_.addDouble(value);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder addAllExecutorDeserializeTime(Iterable values) {
            this.ensureExecutorDeserializeTimeIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.executorDeserializeTime_);
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorDeserializeTime() {
            this.executorDeserializeTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -5;
            this.onChanged();
            return this;
         }

         private void ensureExecutorDeserializeCpuTimeIsMutable() {
            if (!this.executorDeserializeCpuTime_.isModifiable()) {
               this.executorDeserializeCpuTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.executorDeserializeCpuTime_);
            }

            this.bitField0_ |= 8;
         }

         private void ensureExecutorDeserializeCpuTimeIsMutable(int capacity) {
            if (!this.executorDeserializeCpuTime_.isModifiable()) {
               this.executorDeserializeCpuTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.executorDeserializeCpuTime_, capacity);
            }

            this.bitField0_ |= 8;
         }

         public List getExecutorDeserializeCpuTimeList() {
            this.executorDeserializeCpuTime_.makeImmutable();
            return this.executorDeserializeCpuTime_;
         }

         public int getExecutorDeserializeCpuTimeCount() {
            return this.executorDeserializeCpuTime_.size();
         }

         public double getExecutorDeserializeCpuTime(int index) {
            return this.executorDeserializeCpuTime_.getDouble(index);
         }

         public Builder setExecutorDeserializeCpuTime(int index, double value) {
            this.ensureExecutorDeserializeCpuTimeIsMutable();
            this.executorDeserializeCpuTime_.setDouble(index, value);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder addExecutorDeserializeCpuTime(double value) {
            this.ensureExecutorDeserializeCpuTimeIsMutable();
            this.executorDeserializeCpuTime_.addDouble(value);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder addAllExecutorDeserializeCpuTime(Iterable values) {
            this.ensureExecutorDeserializeCpuTimeIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.executorDeserializeCpuTime_);
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorDeserializeCpuTime() {
            this.executorDeserializeCpuTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -9;
            this.onChanged();
            return this;
         }

         private void ensureExecutorRunTimeIsMutable() {
            if (!this.executorRunTime_.isModifiable()) {
               this.executorRunTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.executorRunTime_);
            }

            this.bitField0_ |= 16;
         }

         private void ensureExecutorRunTimeIsMutable(int capacity) {
            if (!this.executorRunTime_.isModifiable()) {
               this.executorRunTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.executorRunTime_, capacity);
            }

            this.bitField0_ |= 16;
         }

         public List getExecutorRunTimeList() {
            this.executorRunTime_.makeImmutable();
            return this.executorRunTime_;
         }

         public int getExecutorRunTimeCount() {
            return this.executorRunTime_.size();
         }

         public double getExecutorRunTime(int index) {
            return this.executorRunTime_.getDouble(index);
         }

         public Builder setExecutorRunTime(int index, double value) {
            this.ensureExecutorRunTimeIsMutable();
            this.executorRunTime_.setDouble(index, value);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder addExecutorRunTime(double value) {
            this.ensureExecutorRunTimeIsMutable();
            this.executorRunTime_.addDouble(value);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder addAllExecutorRunTime(Iterable values) {
            this.ensureExecutorRunTimeIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.executorRunTime_);
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorRunTime() {
            this.executorRunTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -17;
            this.onChanged();
            return this;
         }

         private void ensureExecutorCpuTimeIsMutable() {
            if (!this.executorCpuTime_.isModifiable()) {
               this.executorCpuTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.executorCpuTime_);
            }

            this.bitField0_ |= 32;
         }

         private void ensureExecutorCpuTimeIsMutable(int capacity) {
            if (!this.executorCpuTime_.isModifiable()) {
               this.executorCpuTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.executorCpuTime_, capacity);
            }

            this.bitField0_ |= 32;
         }

         public List getExecutorCpuTimeList() {
            this.executorCpuTime_.makeImmutable();
            return this.executorCpuTime_;
         }

         public int getExecutorCpuTimeCount() {
            return this.executorCpuTime_.size();
         }

         public double getExecutorCpuTime(int index) {
            return this.executorCpuTime_.getDouble(index);
         }

         public Builder setExecutorCpuTime(int index, double value) {
            this.ensureExecutorCpuTimeIsMutable();
            this.executorCpuTime_.setDouble(index, value);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder addExecutorCpuTime(double value) {
            this.ensureExecutorCpuTimeIsMutable();
            this.executorCpuTime_.addDouble(value);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder addAllExecutorCpuTime(Iterable values) {
            this.ensureExecutorCpuTimeIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.executorCpuTime_);
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorCpuTime() {
            this.executorCpuTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -33;
            this.onChanged();
            return this;
         }

         private void ensureResultSizeIsMutable() {
            if (!this.resultSize_.isModifiable()) {
               this.resultSize_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.resultSize_);
            }

            this.bitField0_ |= 64;
         }

         private void ensureResultSizeIsMutable(int capacity) {
            if (!this.resultSize_.isModifiable()) {
               this.resultSize_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.resultSize_, capacity);
            }

            this.bitField0_ |= 64;
         }

         public List getResultSizeList() {
            this.resultSize_.makeImmutable();
            return this.resultSize_;
         }

         public int getResultSizeCount() {
            return this.resultSize_.size();
         }

         public double getResultSize(int index) {
            return this.resultSize_.getDouble(index);
         }

         public Builder setResultSize(int index, double value) {
            this.ensureResultSizeIsMutable();
            this.resultSize_.setDouble(index, value);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder addResultSize(double value) {
            this.ensureResultSizeIsMutable();
            this.resultSize_.addDouble(value);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder addAllResultSize(Iterable values) {
            this.ensureResultSizeIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.resultSize_);
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearResultSize() {
            this.resultSize_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -65;
            this.onChanged();
            return this;
         }

         private void ensureJvmGcTimeIsMutable() {
            if (!this.jvmGcTime_.isModifiable()) {
               this.jvmGcTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.jvmGcTime_);
            }

            this.bitField0_ |= 128;
         }

         private void ensureJvmGcTimeIsMutable(int capacity) {
            if (!this.jvmGcTime_.isModifiable()) {
               this.jvmGcTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.jvmGcTime_, capacity);
            }

            this.bitField0_ |= 128;
         }

         public List getJvmGcTimeList() {
            this.jvmGcTime_.makeImmutable();
            return this.jvmGcTime_;
         }

         public int getJvmGcTimeCount() {
            return this.jvmGcTime_.size();
         }

         public double getJvmGcTime(int index) {
            return this.jvmGcTime_.getDouble(index);
         }

         public Builder setJvmGcTime(int index, double value) {
            this.ensureJvmGcTimeIsMutable();
            this.jvmGcTime_.setDouble(index, value);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder addJvmGcTime(double value) {
            this.ensureJvmGcTimeIsMutable();
            this.jvmGcTime_.addDouble(value);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder addAllJvmGcTime(Iterable values) {
            this.ensureJvmGcTimeIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.jvmGcTime_);
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearJvmGcTime() {
            this.jvmGcTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -129;
            this.onChanged();
            return this;
         }

         private void ensureResultSerializationTimeIsMutable() {
            if (!this.resultSerializationTime_.isModifiable()) {
               this.resultSerializationTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.resultSerializationTime_);
            }

            this.bitField0_ |= 256;
         }

         private void ensureResultSerializationTimeIsMutable(int capacity) {
            if (!this.resultSerializationTime_.isModifiable()) {
               this.resultSerializationTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.resultSerializationTime_, capacity);
            }

            this.bitField0_ |= 256;
         }

         public List getResultSerializationTimeList() {
            this.resultSerializationTime_.makeImmutable();
            return this.resultSerializationTime_;
         }

         public int getResultSerializationTimeCount() {
            return this.resultSerializationTime_.size();
         }

         public double getResultSerializationTime(int index) {
            return this.resultSerializationTime_.getDouble(index);
         }

         public Builder setResultSerializationTime(int index, double value) {
            this.ensureResultSerializationTimeIsMutable();
            this.resultSerializationTime_.setDouble(index, value);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder addResultSerializationTime(double value) {
            this.ensureResultSerializationTimeIsMutable();
            this.resultSerializationTime_.addDouble(value);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder addAllResultSerializationTime(Iterable values) {
            this.ensureResultSerializationTimeIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.resultSerializationTime_);
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearResultSerializationTime() {
            this.resultSerializationTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -257;
            this.onChanged();
            return this;
         }

         private void ensureGettingResultTimeIsMutable() {
            if (!this.gettingResultTime_.isModifiable()) {
               this.gettingResultTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.gettingResultTime_);
            }

            this.bitField0_ |= 512;
         }

         private void ensureGettingResultTimeIsMutable(int capacity) {
            if (!this.gettingResultTime_.isModifiable()) {
               this.gettingResultTime_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.gettingResultTime_, capacity);
            }

            this.bitField0_ |= 512;
         }

         public List getGettingResultTimeList() {
            this.gettingResultTime_.makeImmutable();
            return this.gettingResultTime_;
         }

         public int getGettingResultTimeCount() {
            return this.gettingResultTime_.size();
         }

         public double getGettingResultTime(int index) {
            return this.gettingResultTime_.getDouble(index);
         }

         public Builder setGettingResultTime(int index, double value) {
            this.ensureGettingResultTimeIsMutable();
            this.gettingResultTime_.setDouble(index, value);
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder addGettingResultTime(double value) {
            this.ensureGettingResultTimeIsMutable();
            this.gettingResultTime_.addDouble(value);
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder addAllGettingResultTime(Iterable values) {
            this.ensureGettingResultTimeIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.gettingResultTime_);
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder clearGettingResultTime() {
            this.gettingResultTime_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -513;
            this.onChanged();
            return this;
         }

         private void ensureSchedulerDelayIsMutable() {
            if (!this.schedulerDelay_.isModifiable()) {
               this.schedulerDelay_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.schedulerDelay_);
            }

            this.bitField0_ |= 1024;
         }

         private void ensureSchedulerDelayIsMutable(int capacity) {
            if (!this.schedulerDelay_.isModifiable()) {
               this.schedulerDelay_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.schedulerDelay_, capacity);
            }

            this.bitField0_ |= 1024;
         }

         public List getSchedulerDelayList() {
            this.schedulerDelay_.makeImmutable();
            return this.schedulerDelay_;
         }

         public int getSchedulerDelayCount() {
            return this.schedulerDelay_.size();
         }

         public double getSchedulerDelay(int index) {
            return this.schedulerDelay_.getDouble(index);
         }

         public Builder setSchedulerDelay(int index, double value) {
            this.ensureSchedulerDelayIsMutable();
            this.schedulerDelay_.setDouble(index, value);
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder addSchedulerDelay(double value) {
            this.ensureSchedulerDelayIsMutable();
            this.schedulerDelay_.addDouble(value);
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder addAllSchedulerDelay(Iterable values) {
            this.ensureSchedulerDelayIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.schedulerDelay_);
            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder clearSchedulerDelay() {
            this.schedulerDelay_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -1025;
            this.onChanged();
            return this;
         }

         private void ensurePeakExecutionMemoryIsMutable() {
            if (!this.peakExecutionMemory_.isModifiable()) {
               this.peakExecutionMemory_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.peakExecutionMemory_);
            }

            this.bitField0_ |= 2048;
         }

         private void ensurePeakExecutionMemoryIsMutable(int capacity) {
            if (!this.peakExecutionMemory_.isModifiable()) {
               this.peakExecutionMemory_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.peakExecutionMemory_, capacity);
            }

            this.bitField0_ |= 2048;
         }

         public List getPeakExecutionMemoryList() {
            this.peakExecutionMemory_.makeImmutable();
            return this.peakExecutionMemory_;
         }

         public int getPeakExecutionMemoryCount() {
            return this.peakExecutionMemory_.size();
         }

         public double getPeakExecutionMemory(int index) {
            return this.peakExecutionMemory_.getDouble(index);
         }

         public Builder setPeakExecutionMemory(int index, double value) {
            this.ensurePeakExecutionMemoryIsMutable();
            this.peakExecutionMemory_.setDouble(index, value);
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder addPeakExecutionMemory(double value) {
            this.ensurePeakExecutionMemoryIsMutable();
            this.peakExecutionMemory_.addDouble(value);
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder addAllPeakExecutionMemory(Iterable values) {
            this.ensurePeakExecutionMemoryIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.peakExecutionMemory_);
            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder clearPeakExecutionMemory() {
            this.peakExecutionMemory_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -2049;
            this.onChanged();
            return this;
         }

         private void ensureMemoryBytesSpilledIsMutable() {
            if (!this.memoryBytesSpilled_.isModifiable()) {
               this.memoryBytesSpilled_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.memoryBytesSpilled_);
            }

            this.bitField0_ |= 4096;
         }

         private void ensureMemoryBytesSpilledIsMutable(int capacity) {
            if (!this.memoryBytesSpilled_.isModifiable()) {
               this.memoryBytesSpilled_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.memoryBytesSpilled_, capacity);
            }

            this.bitField0_ |= 4096;
         }

         public List getMemoryBytesSpilledList() {
            this.memoryBytesSpilled_.makeImmutable();
            return this.memoryBytesSpilled_;
         }

         public int getMemoryBytesSpilledCount() {
            return this.memoryBytesSpilled_.size();
         }

         public double getMemoryBytesSpilled(int index) {
            return this.memoryBytesSpilled_.getDouble(index);
         }

         public Builder setMemoryBytesSpilled(int index, double value) {
            this.ensureMemoryBytesSpilledIsMutable();
            this.memoryBytesSpilled_.setDouble(index, value);
            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder addMemoryBytesSpilled(double value) {
            this.ensureMemoryBytesSpilledIsMutable();
            this.memoryBytesSpilled_.addDouble(value);
            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder addAllMemoryBytesSpilled(Iterable values) {
            this.ensureMemoryBytesSpilledIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.memoryBytesSpilled_);
            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryBytesSpilled() {
            this.memoryBytesSpilled_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -4097;
            this.onChanged();
            return this;
         }

         private void ensureDiskBytesSpilledIsMutable() {
            if (!this.diskBytesSpilled_.isModifiable()) {
               this.diskBytesSpilled_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.diskBytesSpilled_);
            }

            this.bitField0_ |= 8192;
         }

         private void ensureDiskBytesSpilledIsMutable(int capacity) {
            if (!this.diskBytesSpilled_.isModifiable()) {
               this.diskBytesSpilled_ = (Internal.DoubleList)StoreTypes.TaskMetricDistributions.makeMutableCopy(this.diskBytesSpilled_, capacity);
            }

            this.bitField0_ |= 8192;
         }

         public List getDiskBytesSpilledList() {
            this.diskBytesSpilled_.makeImmutable();
            return this.diskBytesSpilled_;
         }

         public int getDiskBytesSpilledCount() {
            return this.diskBytesSpilled_.size();
         }

         public double getDiskBytesSpilled(int index) {
            return this.diskBytesSpilled_.getDouble(index);
         }

         public Builder setDiskBytesSpilled(int index, double value) {
            this.ensureDiskBytesSpilledIsMutable();
            this.diskBytesSpilled_.setDouble(index, value);
            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder addDiskBytesSpilled(double value) {
            this.ensureDiskBytesSpilledIsMutable();
            this.diskBytesSpilled_.addDouble(value);
            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder addAllDiskBytesSpilled(Iterable values) {
            this.ensureDiskBytesSpilledIsMutable();
            AbstractMessageLite.Builder.addAll(values, (List)this.diskBytesSpilled_);
            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder clearDiskBytesSpilled() {
            this.diskBytesSpilled_ = StoreTypes.TaskMetricDistributions.emptyDoubleList();
            this.bitField0_ &= -8193;
            this.onChanged();
            return this;
         }

         public boolean hasInputMetrics() {
            return (this.bitField0_ & 16384) != 0;
         }

         public InputMetricDistributions getInputMetrics() {
            if (this.inputMetricsBuilder_ == null) {
               return this.inputMetrics_ == null ? StoreTypes.InputMetricDistributions.getDefaultInstance() : this.inputMetrics_;
            } else {
               return (InputMetricDistributions)this.inputMetricsBuilder_.getMessage();
            }
         }

         public Builder setInputMetrics(InputMetricDistributions value) {
            if (this.inputMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.inputMetrics_ = value;
            } else {
               this.inputMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder setInputMetrics(InputMetricDistributions.Builder builderForValue) {
            if (this.inputMetricsBuilder_ == null) {
               this.inputMetrics_ = builderForValue.build();
            } else {
               this.inputMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 16384;
            this.onChanged();
            return this;
         }

         public Builder mergeInputMetrics(InputMetricDistributions value) {
            if (this.inputMetricsBuilder_ == null) {
               if ((this.bitField0_ & 16384) != 0 && this.inputMetrics_ != null && this.inputMetrics_ != StoreTypes.InputMetricDistributions.getDefaultInstance()) {
                  this.getInputMetricsBuilder().mergeFrom(value);
               } else {
                  this.inputMetrics_ = value;
               }
            } else {
               this.inputMetricsBuilder_.mergeFrom(value);
            }

            if (this.inputMetrics_ != null) {
               this.bitField0_ |= 16384;
               this.onChanged();
            }

            return this;
         }

         public Builder clearInputMetrics() {
            this.bitField0_ &= -16385;
            this.inputMetrics_ = null;
            if (this.inputMetricsBuilder_ != null) {
               this.inputMetricsBuilder_.dispose();
               this.inputMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public InputMetricDistributions.Builder getInputMetricsBuilder() {
            this.bitField0_ |= 16384;
            this.onChanged();
            return (InputMetricDistributions.Builder)this.getInputMetricsFieldBuilder().getBuilder();
         }

         public InputMetricDistributionsOrBuilder getInputMetricsOrBuilder() {
            if (this.inputMetricsBuilder_ != null) {
               return (InputMetricDistributionsOrBuilder)this.inputMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.inputMetrics_ == null ? StoreTypes.InputMetricDistributions.getDefaultInstance() : this.inputMetrics_;
            }
         }

         private SingleFieldBuilder getInputMetricsFieldBuilder() {
            if (this.inputMetricsBuilder_ == null) {
               this.inputMetricsBuilder_ = new SingleFieldBuilder(this.getInputMetrics(), this.getParentForChildren(), this.isClean());
               this.inputMetrics_ = null;
            }

            return this.inputMetricsBuilder_;
         }

         public boolean hasOutputMetrics() {
            return (this.bitField0_ & '耀') != 0;
         }

         public OutputMetricDistributions getOutputMetrics() {
            if (this.outputMetricsBuilder_ == null) {
               return this.outputMetrics_ == null ? StoreTypes.OutputMetricDistributions.getDefaultInstance() : this.outputMetrics_;
            } else {
               return (OutputMetricDistributions)this.outputMetricsBuilder_.getMessage();
            }
         }

         public Builder setOutputMetrics(OutputMetricDistributions value) {
            if (this.outputMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.outputMetrics_ = value;
            } else {
               this.outputMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder setOutputMetrics(OutputMetricDistributions.Builder builderForValue) {
            if (this.outputMetricsBuilder_ == null) {
               this.outputMetrics_ = builderForValue.build();
            } else {
               this.outputMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 32768;
            this.onChanged();
            return this;
         }

         public Builder mergeOutputMetrics(OutputMetricDistributions value) {
            if (this.outputMetricsBuilder_ == null) {
               if ((this.bitField0_ & '耀') != 0 && this.outputMetrics_ != null && this.outputMetrics_ != StoreTypes.OutputMetricDistributions.getDefaultInstance()) {
                  this.getOutputMetricsBuilder().mergeFrom(value);
               } else {
                  this.outputMetrics_ = value;
               }
            } else {
               this.outputMetricsBuilder_.mergeFrom(value);
            }

            if (this.outputMetrics_ != null) {
               this.bitField0_ |= 32768;
               this.onChanged();
            }

            return this;
         }

         public Builder clearOutputMetrics() {
            this.bitField0_ &= -32769;
            this.outputMetrics_ = null;
            if (this.outputMetricsBuilder_ != null) {
               this.outputMetricsBuilder_.dispose();
               this.outputMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public OutputMetricDistributions.Builder getOutputMetricsBuilder() {
            this.bitField0_ |= 32768;
            this.onChanged();
            return (OutputMetricDistributions.Builder)this.getOutputMetricsFieldBuilder().getBuilder();
         }

         public OutputMetricDistributionsOrBuilder getOutputMetricsOrBuilder() {
            if (this.outputMetricsBuilder_ != null) {
               return (OutputMetricDistributionsOrBuilder)this.outputMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.outputMetrics_ == null ? StoreTypes.OutputMetricDistributions.getDefaultInstance() : this.outputMetrics_;
            }
         }

         private SingleFieldBuilder getOutputMetricsFieldBuilder() {
            if (this.outputMetricsBuilder_ == null) {
               this.outputMetricsBuilder_ = new SingleFieldBuilder(this.getOutputMetrics(), this.getParentForChildren(), this.isClean());
               this.outputMetrics_ = null;
            }

            return this.outputMetricsBuilder_;
         }

         public boolean hasShuffleReadMetrics() {
            return (this.bitField0_ & 65536) != 0;
         }

         public ShuffleReadMetricDistributions getShuffleReadMetrics() {
            if (this.shuffleReadMetricsBuilder_ == null) {
               return this.shuffleReadMetrics_ == null ? StoreTypes.ShuffleReadMetricDistributions.getDefaultInstance() : this.shuffleReadMetrics_;
            } else {
               return (ShuffleReadMetricDistributions)this.shuffleReadMetricsBuilder_.getMessage();
            }
         }

         public Builder setShuffleReadMetrics(ShuffleReadMetricDistributions value) {
            if (this.shuffleReadMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.shuffleReadMetrics_ = value;
            } else {
               this.shuffleReadMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 65536;
            this.onChanged();
            return this;
         }

         public Builder setShuffleReadMetrics(ShuffleReadMetricDistributions.Builder builderForValue) {
            if (this.shuffleReadMetricsBuilder_ == null) {
               this.shuffleReadMetrics_ = builderForValue.build();
            } else {
               this.shuffleReadMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 65536;
            this.onChanged();
            return this;
         }

         public Builder mergeShuffleReadMetrics(ShuffleReadMetricDistributions value) {
            if (this.shuffleReadMetricsBuilder_ == null) {
               if ((this.bitField0_ & 65536) != 0 && this.shuffleReadMetrics_ != null && this.shuffleReadMetrics_ != StoreTypes.ShuffleReadMetricDistributions.getDefaultInstance()) {
                  this.getShuffleReadMetricsBuilder().mergeFrom(value);
               } else {
                  this.shuffleReadMetrics_ = value;
               }
            } else {
               this.shuffleReadMetricsBuilder_.mergeFrom(value);
            }

            if (this.shuffleReadMetrics_ != null) {
               this.bitField0_ |= 65536;
               this.onChanged();
            }

            return this;
         }

         public Builder clearShuffleReadMetrics() {
            this.bitField0_ &= -65537;
            this.shuffleReadMetrics_ = null;
            if (this.shuffleReadMetricsBuilder_ != null) {
               this.shuffleReadMetricsBuilder_.dispose();
               this.shuffleReadMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ShuffleReadMetricDistributions.Builder getShuffleReadMetricsBuilder() {
            this.bitField0_ |= 65536;
            this.onChanged();
            return (ShuffleReadMetricDistributions.Builder)this.getShuffleReadMetricsFieldBuilder().getBuilder();
         }

         public ShuffleReadMetricDistributionsOrBuilder getShuffleReadMetricsOrBuilder() {
            if (this.shuffleReadMetricsBuilder_ != null) {
               return (ShuffleReadMetricDistributionsOrBuilder)this.shuffleReadMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.shuffleReadMetrics_ == null ? StoreTypes.ShuffleReadMetricDistributions.getDefaultInstance() : this.shuffleReadMetrics_;
            }
         }

         private SingleFieldBuilder getShuffleReadMetricsFieldBuilder() {
            if (this.shuffleReadMetricsBuilder_ == null) {
               this.shuffleReadMetricsBuilder_ = new SingleFieldBuilder(this.getShuffleReadMetrics(), this.getParentForChildren(), this.isClean());
               this.shuffleReadMetrics_ = null;
            }

            return this.shuffleReadMetricsBuilder_;
         }

         public boolean hasShuffleWriteMetrics() {
            return (this.bitField0_ & 131072) != 0;
         }

         public ShuffleWriteMetricDistributions getShuffleWriteMetrics() {
            if (this.shuffleWriteMetricsBuilder_ == null) {
               return this.shuffleWriteMetrics_ == null ? StoreTypes.ShuffleWriteMetricDistributions.getDefaultInstance() : this.shuffleWriteMetrics_;
            } else {
               return (ShuffleWriteMetricDistributions)this.shuffleWriteMetricsBuilder_.getMessage();
            }
         }

         public Builder setShuffleWriteMetrics(ShuffleWriteMetricDistributions value) {
            if (this.shuffleWriteMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.shuffleWriteMetrics_ = value;
            } else {
               this.shuffleWriteMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 131072;
            this.onChanged();
            return this;
         }

         public Builder setShuffleWriteMetrics(ShuffleWriteMetricDistributions.Builder builderForValue) {
            if (this.shuffleWriteMetricsBuilder_ == null) {
               this.shuffleWriteMetrics_ = builderForValue.build();
            } else {
               this.shuffleWriteMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 131072;
            this.onChanged();
            return this;
         }

         public Builder mergeShuffleWriteMetrics(ShuffleWriteMetricDistributions value) {
            if (this.shuffleWriteMetricsBuilder_ == null) {
               if ((this.bitField0_ & 131072) != 0 && this.shuffleWriteMetrics_ != null && this.shuffleWriteMetrics_ != StoreTypes.ShuffleWriteMetricDistributions.getDefaultInstance()) {
                  this.getShuffleWriteMetricsBuilder().mergeFrom(value);
               } else {
                  this.shuffleWriteMetrics_ = value;
               }
            } else {
               this.shuffleWriteMetricsBuilder_.mergeFrom(value);
            }

            if (this.shuffleWriteMetrics_ != null) {
               this.bitField0_ |= 131072;
               this.onChanged();
            }

            return this;
         }

         public Builder clearShuffleWriteMetrics() {
            this.bitField0_ &= -131073;
            this.shuffleWriteMetrics_ = null;
            if (this.shuffleWriteMetricsBuilder_ != null) {
               this.shuffleWriteMetricsBuilder_.dispose();
               this.shuffleWriteMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ShuffleWriteMetricDistributions.Builder getShuffleWriteMetricsBuilder() {
            this.bitField0_ |= 131072;
            this.onChanged();
            return (ShuffleWriteMetricDistributions.Builder)this.getShuffleWriteMetricsFieldBuilder().getBuilder();
         }

         public ShuffleWriteMetricDistributionsOrBuilder getShuffleWriteMetricsOrBuilder() {
            if (this.shuffleWriteMetricsBuilder_ != null) {
               return (ShuffleWriteMetricDistributionsOrBuilder)this.shuffleWriteMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.shuffleWriteMetrics_ == null ? StoreTypes.ShuffleWriteMetricDistributions.getDefaultInstance() : this.shuffleWriteMetrics_;
            }
         }

         private SingleFieldBuilder getShuffleWriteMetricsFieldBuilder() {
            if (this.shuffleWriteMetricsBuilder_ == null) {
               this.shuffleWriteMetricsBuilder_ = new SingleFieldBuilder(this.getShuffleWriteMetrics(), this.getParentForChildren(), this.isClean());
               this.shuffleWriteMetrics_ = null;
            }

            return this.shuffleWriteMetricsBuilder_;
         }
      }
   }

   public interface TaskMetricDistributionsOrBuilder extends MessageOrBuilder {
      List getQuantilesList();

      int getQuantilesCount();

      double getQuantiles(int var1);

      List getDurationList();

      int getDurationCount();

      double getDuration(int var1);

      List getExecutorDeserializeTimeList();

      int getExecutorDeserializeTimeCount();

      double getExecutorDeserializeTime(int var1);

      List getExecutorDeserializeCpuTimeList();

      int getExecutorDeserializeCpuTimeCount();

      double getExecutorDeserializeCpuTime(int var1);

      List getExecutorRunTimeList();

      int getExecutorRunTimeCount();

      double getExecutorRunTime(int var1);

      List getExecutorCpuTimeList();

      int getExecutorCpuTimeCount();

      double getExecutorCpuTime(int var1);

      List getResultSizeList();

      int getResultSizeCount();

      double getResultSize(int var1);

      List getJvmGcTimeList();

      int getJvmGcTimeCount();

      double getJvmGcTime(int var1);

      List getResultSerializationTimeList();

      int getResultSerializationTimeCount();

      double getResultSerializationTime(int var1);

      List getGettingResultTimeList();

      int getGettingResultTimeCount();

      double getGettingResultTime(int var1);

      List getSchedulerDelayList();

      int getSchedulerDelayCount();

      double getSchedulerDelay(int var1);

      List getPeakExecutionMemoryList();

      int getPeakExecutionMemoryCount();

      double getPeakExecutionMemory(int var1);

      List getMemoryBytesSpilledList();

      int getMemoryBytesSpilledCount();

      double getMemoryBytesSpilled(int var1);

      List getDiskBytesSpilledList();

      int getDiskBytesSpilledCount();

      double getDiskBytesSpilled(int var1);

      boolean hasInputMetrics();

      InputMetricDistributions getInputMetrics();

      InputMetricDistributionsOrBuilder getInputMetricsOrBuilder();

      boolean hasOutputMetrics();

      OutputMetricDistributions getOutputMetrics();

      OutputMetricDistributionsOrBuilder getOutputMetricsOrBuilder();

      boolean hasShuffleReadMetrics();

      ShuffleReadMetricDistributions getShuffleReadMetrics();

      ShuffleReadMetricDistributionsOrBuilder getShuffleReadMetricsOrBuilder();

      boolean hasShuffleWriteMetrics();

      ShuffleWriteMetricDistributions getShuffleWriteMetrics();

      ShuffleWriteMetricDistributionsOrBuilder getShuffleWriteMetricsOrBuilder();
   }

   public static final class TaskMetrics extends GeneratedMessage implements TaskMetricsOrBuilder {
      private static final long serialVersionUID = 0L;
      private int bitField0_;
      public static final int EXECUTOR_DESERIALIZE_TIME_FIELD_NUMBER = 1;
      private long executorDeserializeTime_ = 0L;
      public static final int EXECUTOR_DESERIALIZE_CPU_TIME_FIELD_NUMBER = 2;
      private long executorDeserializeCpuTime_ = 0L;
      public static final int EXECUTOR_RUN_TIME_FIELD_NUMBER = 3;
      private long executorRunTime_ = 0L;
      public static final int EXECUTOR_CPU_TIME_FIELD_NUMBER = 4;
      private long executorCpuTime_ = 0L;
      public static final int RESULT_SIZE_FIELD_NUMBER = 5;
      private long resultSize_ = 0L;
      public static final int JVM_GC_TIME_FIELD_NUMBER = 6;
      private long jvmGcTime_ = 0L;
      public static final int RESULT_SERIALIZATION_TIME_FIELD_NUMBER = 7;
      private long resultSerializationTime_ = 0L;
      public static final int MEMORY_BYTES_SPILLED_FIELD_NUMBER = 8;
      private long memoryBytesSpilled_ = 0L;
      public static final int DISK_BYTES_SPILLED_FIELD_NUMBER = 9;
      private long diskBytesSpilled_ = 0L;
      public static final int PEAK_EXECUTION_MEMORY_FIELD_NUMBER = 10;
      private long peakExecutionMemory_ = 0L;
      public static final int INPUT_METRICS_FIELD_NUMBER = 11;
      private InputMetrics inputMetrics_;
      public static final int OUTPUT_METRICS_FIELD_NUMBER = 12;
      private OutputMetrics outputMetrics_;
      public static final int SHUFFLE_READ_METRICS_FIELD_NUMBER = 13;
      private ShuffleReadMetrics shuffleReadMetrics_;
      public static final int SHUFFLE_WRITE_METRICS_FIELD_NUMBER = 14;
      private ShuffleWriteMetrics shuffleWriteMetrics_;
      private byte memoizedIsInitialized = -1;
      private static final TaskMetrics DEFAULT_INSTANCE;
      private static final Parser PARSER;

      private TaskMetrics(GeneratedMessage.Builder builder) {
         super(builder);
      }

      private TaskMetrics() {
      }

      public static final Descriptors.Descriptor getDescriptor() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskMetrics_descriptor;
      }

      protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
         return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(TaskMetrics.class, Builder.class);
      }

      public long getExecutorDeserializeTime() {
         return this.executorDeserializeTime_;
      }

      public long getExecutorDeserializeCpuTime() {
         return this.executorDeserializeCpuTime_;
      }

      public long getExecutorRunTime() {
         return this.executorRunTime_;
      }

      public long getExecutorCpuTime() {
         return this.executorCpuTime_;
      }

      public long getResultSize() {
         return this.resultSize_;
      }

      public long getJvmGcTime() {
         return this.jvmGcTime_;
      }

      public long getResultSerializationTime() {
         return this.resultSerializationTime_;
      }

      public long getMemoryBytesSpilled() {
         return this.memoryBytesSpilled_;
      }

      public long getDiskBytesSpilled() {
         return this.diskBytesSpilled_;
      }

      public long getPeakExecutionMemory() {
         return this.peakExecutionMemory_;
      }

      public boolean hasInputMetrics() {
         return (this.bitField0_ & 1) != 0;
      }

      public InputMetrics getInputMetrics() {
         return this.inputMetrics_ == null ? StoreTypes.InputMetrics.getDefaultInstance() : this.inputMetrics_;
      }

      public InputMetricsOrBuilder getInputMetricsOrBuilder() {
         return this.inputMetrics_ == null ? StoreTypes.InputMetrics.getDefaultInstance() : this.inputMetrics_;
      }

      public boolean hasOutputMetrics() {
         return (this.bitField0_ & 2) != 0;
      }

      public OutputMetrics getOutputMetrics() {
         return this.outputMetrics_ == null ? StoreTypes.OutputMetrics.getDefaultInstance() : this.outputMetrics_;
      }

      public OutputMetricsOrBuilder getOutputMetricsOrBuilder() {
         return this.outputMetrics_ == null ? StoreTypes.OutputMetrics.getDefaultInstance() : this.outputMetrics_;
      }

      public boolean hasShuffleReadMetrics() {
         return (this.bitField0_ & 4) != 0;
      }

      public ShuffleReadMetrics getShuffleReadMetrics() {
         return this.shuffleReadMetrics_ == null ? StoreTypes.ShuffleReadMetrics.getDefaultInstance() : this.shuffleReadMetrics_;
      }

      public ShuffleReadMetricsOrBuilder getShuffleReadMetricsOrBuilder() {
         return this.shuffleReadMetrics_ == null ? StoreTypes.ShuffleReadMetrics.getDefaultInstance() : this.shuffleReadMetrics_;
      }

      public boolean hasShuffleWriteMetrics() {
         return (this.bitField0_ & 8) != 0;
      }

      public ShuffleWriteMetrics getShuffleWriteMetrics() {
         return this.shuffleWriteMetrics_ == null ? StoreTypes.ShuffleWriteMetrics.getDefaultInstance() : this.shuffleWriteMetrics_;
      }

      public ShuffleWriteMetricsOrBuilder getShuffleWriteMetricsOrBuilder() {
         return this.shuffleWriteMetrics_ == null ? StoreTypes.ShuffleWriteMetrics.getDefaultInstance() : this.shuffleWriteMetrics_;
      }

      public final boolean isInitialized() {
         byte isInitialized = this.memoizedIsInitialized;
         if (isInitialized == 1) {
            return true;
         } else if (isInitialized == 0) {
            return false;
         } else {
            this.memoizedIsInitialized = 1;
            return true;
         }
      }

      public void writeTo(CodedOutputStream output) throws IOException {
         if (this.executorDeserializeTime_ != 0L) {
            output.writeInt64(1, this.executorDeserializeTime_);
         }

         if (this.executorDeserializeCpuTime_ != 0L) {
            output.writeInt64(2, this.executorDeserializeCpuTime_);
         }

         if (this.executorRunTime_ != 0L) {
            output.writeInt64(3, this.executorRunTime_);
         }

         if (this.executorCpuTime_ != 0L) {
            output.writeInt64(4, this.executorCpuTime_);
         }

         if (this.resultSize_ != 0L) {
            output.writeInt64(5, this.resultSize_);
         }

         if (this.jvmGcTime_ != 0L) {
            output.writeInt64(6, this.jvmGcTime_);
         }

         if (this.resultSerializationTime_ != 0L) {
            output.writeInt64(7, this.resultSerializationTime_);
         }

         if (this.memoryBytesSpilled_ != 0L) {
            output.writeInt64(8, this.memoryBytesSpilled_);
         }

         if (this.diskBytesSpilled_ != 0L) {
            output.writeInt64(9, this.diskBytesSpilled_);
         }

         if (this.peakExecutionMemory_ != 0L) {
            output.writeInt64(10, this.peakExecutionMemory_);
         }

         if ((this.bitField0_ & 1) != 0) {
            output.writeMessage(11, this.getInputMetrics());
         }

         if ((this.bitField0_ & 2) != 0) {
            output.writeMessage(12, this.getOutputMetrics());
         }

         if ((this.bitField0_ & 4) != 0) {
            output.writeMessage(13, this.getShuffleReadMetrics());
         }

         if ((this.bitField0_ & 8) != 0) {
            output.writeMessage(14, this.getShuffleWriteMetrics());
         }

         this.getUnknownFields().writeTo(output);
      }

      public int getSerializedSize() {
         int size = this.memoizedSize;
         if (size != -1) {
            return size;
         } else {
            size = 0;
            if (this.executorDeserializeTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(1, this.executorDeserializeTime_);
            }

            if (this.executorDeserializeCpuTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(2, this.executorDeserializeCpuTime_);
            }

            if (this.executorRunTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(3, this.executorRunTime_);
            }

            if (this.executorCpuTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(4, this.executorCpuTime_);
            }

            if (this.resultSize_ != 0L) {
               size += CodedOutputStream.computeInt64Size(5, this.resultSize_);
            }

            if (this.jvmGcTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(6, this.jvmGcTime_);
            }

            if (this.resultSerializationTime_ != 0L) {
               size += CodedOutputStream.computeInt64Size(7, this.resultSerializationTime_);
            }

            if (this.memoryBytesSpilled_ != 0L) {
               size += CodedOutputStream.computeInt64Size(8, this.memoryBytesSpilled_);
            }

            if (this.diskBytesSpilled_ != 0L) {
               size += CodedOutputStream.computeInt64Size(9, this.diskBytesSpilled_);
            }

            if (this.peakExecutionMemory_ != 0L) {
               size += CodedOutputStream.computeInt64Size(10, this.peakExecutionMemory_);
            }

            if ((this.bitField0_ & 1) != 0) {
               size += CodedOutputStream.computeMessageSize(11, this.getInputMetrics());
            }

            if ((this.bitField0_ & 2) != 0) {
               size += CodedOutputStream.computeMessageSize(12, this.getOutputMetrics());
            }

            if ((this.bitField0_ & 4) != 0) {
               size += CodedOutputStream.computeMessageSize(13, this.getShuffleReadMetrics());
            }

            if ((this.bitField0_ & 8) != 0) {
               size += CodedOutputStream.computeMessageSize(14, this.getShuffleWriteMetrics());
            }

            size += this.getUnknownFields().getSerializedSize();
            this.memoizedSize = size;
            return size;
         }
      }

      public boolean equals(Object obj) {
         if (obj == this) {
            return true;
         } else if (!(obj instanceof TaskMetrics)) {
            return super.equals(obj);
         } else {
            TaskMetrics other = (TaskMetrics)obj;
            if (this.getExecutorDeserializeTime() != other.getExecutorDeserializeTime()) {
               return false;
            } else if (this.getExecutorDeserializeCpuTime() != other.getExecutorDeserializeCpuTime()) {
               return false;
            } else if (this.getExecutorRunTime() != other.getExecutorRunTime()) {
               return false;
            } else if (this.getExecutorCpuTime() != other.getExecutorCpuTime()) {
               return false;
            } else if (this.getResultSize() != other.getResultSize()) {
               return false;
            } else if (this.getJvmGcTime() != other.getJvmGcTime()) {
               return false;
            } else if (this.getResultSerializationTime() != other.getResultSerializationTime()) {
               return false;
            } else if (this.getMemoryBytesSpilled() != other.getMemoryBytesSpilled()) {
               return false;
            } else if (this.getDiskBytesSpilled() != other.getDiskBytesSpilled()) {
               return false;
            } else if (this.getPeakExecutionMemory() != other.getPeakExecutionMemory()) {
               return false;
            } else if (this.hasInputMetrics() != other.hasInputMetrics()) {
               return false;
            } else if (this.hasInputMetrics() && !this.getInputMetrics().equals(other.getInputMetrics())) {
               return false;
            } else if (this.hasOutputMetrics() != other.hasOutputMetrics()) {
               return false;
            } else if (this.hasOutputMetrics() && !this.getOutputMetrics().equals(other.getOutputMetrics())) {
               return false;
            } else if (this.hasShuffleReadMetrics() != other.hasShuffleReadMetrics()) {
               return false;
            } else if (this.hasShuffleReadMetrics() && !this.getShuffleReadMetrics().equals(other.getShuffleReadMetrics())) {
               return false;
            } else if (this.hasShuffleWriteMetrics() != other.hasShuffleWriteMetrics()) {
               return false;
            } else if (this.hasShuffleWriteMetrics() && !this.getShuffleWriteMetrics().equals(other.getShuffleWriteMetrics())) {
               return false;
            } else {
               return this.getUnknownFields().equals(other.getUnknownFields());
            }
         }
      }

      public int hashCode() {
         if (this.memoizedHashCode != 0) {
            return this.memoizedHashCode;
         } else {
            int hash = 41;
            hash = 19 * hash + getDescriptor().hashCode();
            hash = 37 * hash + 1;
            hash = 53 * hash + Internal.hashLong(this.getExecutorDeserializeTime());
            hash = 37 * hash + 2;
            hash = 53 * hash + Internal.hashLong(this.getExecutorDeserializeCpuTime());
            hash = 37 * hash + 3;
            hash = 53 * hash + Internal.hashLong(this.getExecutorRunTime());
            hash = 37 * hash + 4;
            hash = 53 * hash + Internal.hashLong(this.getExecutorCpuTime());
            hash = 37 * hash + 5;
            hash = 53 * hash + Internal.hashLong(this.getResultSize());
            hash = 37 * hash + 6;
            hash = 53 * hash + Internal.hashLong(this.getJvmGcTime());
            hash = 37 * hash + 7;
            hash = 53 * hash + Internal.hashLong(this.getResultSerializationTime());
            hash = 37 * hash + 8;
            hash = 53 * hash + Internal.hashLong(this.getMemoryBytesSpilled());
            hash = 37 * hash + 9;
            hash = 53 * hash + Internal.hashLong(this.getDiskBytesSpilled());
            hash = 37 * hash + 10;
            hash = 53 * hash + Internal.hashLong(this.getPeakExecutionMemory());
            if (this.hasInputMetrics()) {
               hash = 37 * hash + 11;
               hash = 53 * hash + this.getInputMetrics().hashCode();
            }

            if (this.hasOutputMetrics()) {
               hash = 37 * hash + 12;
               hash = 53 * hash + this.getOutputMetrics().hashCode();
            }

            if (this.hasShuffleReadMetrics()) {
               hash = 37 * hash + 13;
               hash = 53 * hash + this.getShuffleReadMetrics().hashCode();
            }

            if (this.hasShuffleWriteMetrics()) {
               hash = 37 * hash + 14;
               hash = 53 * hash + this.getShuffleWriteMetrics().hashCode();
            }

            hash = 29 * hash + this.getUnknownFields().hashCode();
            this.memoizedHashCode = hash;
            return hash;
         }
      }

      public static TaskMetrics parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
         return (TaskMetrics)PARSER.parseFrom(data);
      }

      public static TaskMetrics parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskMetrics parseFrom(ByteString data) throws InvalidProtocolBufferException {
         return (TaskMetrics)PARSER.parseFrom(data);
      }

      public static TaskMetrics parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskMetrics parseFrom(byte[] data) throws InvalidProtocolBufferException {
         return (TaskMetrics)PARSER.parseFrom(data);
      }

      public static TaskMetrics parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
         return (TaskMetrics)PARSER.parseFrom(data, extensionRegistry);
      }

      public static TaskMetrics parseFrom(InputStream input) throws IOException {
         return (TaskMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static TaskMetrics parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static TaskMetrics parseDelimitedFrom(InputStream input) throws IOException {
         return (TaskMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input);
      }

      public static TaskMetrics parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskMetrics)GeneratedMessage.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }

      public static TaskMetrics parseFrom(CodedInputStream input) throws IOException {
         return (TaskMetrics)GeneratedMessage.parseWithIOException(PARSER, input);
      }

      public static TaskMetrics parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
         return (TaskMetrics)GeneratedMessage.parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() {
         return newBuilder();
      }

      public static Builder newBuilder() {
         return DEFAULT_INSTANCE.toBuilder();
      }

      public static Builder newBuilder(TaskMetrics prototype) {
         return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }

      public Builder toBuilder() {
         return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
      }

      protected Builder newBuilderForType(AbstractMessage.BuilderParent parent) {
         Builder builder = new Builder(parent);
         return builder;
      }

      public static TaskMetrics getDefaultInstance() {
         return DEFAULT_INSTANCE;
      }

      public static Parser parser() {
         return PARSER;
      }

      public Parser getParserForType() {
         return PARSER;
      }

      public TaskMetrics getDefaultInstanceForType() {
         return DEFAULT_INSTANCE;
      }

      static {
         RuntimeVersion.validateProtobufGencodeVersion(RuntimeVersion.RuntimeDomain.PUBLIC, 4, 29, 3, "", TaskMetrics.class.getName());
         DEFAULT_INSTANCE = new TaskMetrics();
         PARSER = new AbstractParser() {
            public TaskMetrics parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
               Builder builder = StoreTypes.TaskMetrics.newBuilder();

               try {
                  builder.mergeFrom(input, extensionRegistry);
               } catch (InvalidProtocolBufferException e) {
                  throw e.setUnfinishedMessage(builder.buildPartial());
               } catch (UninitializedMessageException e) {
                  throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
               } catch (IOException e) {
                  throw (new InvalidProtocolBufferException(e)).setUnfinishedMessage(builder.buildPartial());
               }

               return builder.buildPartial();
            }
         };
      }

      public static final class Builder extends GeneratedMessage.Builder implements TaskMetricsOrBuilder {
         private int bitField0_;
         private long executorDeserializeTime_;
         private long executorDeserializeCpuTime_;
         private long executorRunTime_;
         private long executorCpuTime_;
         private long resultSize_;
         private long jvmGcTime_;
         private long resultSerializationTime_;
         private long memoryBytesSpilled_;
         private long diskBytesSpilled_;
         private long peakExecutionMemory_;
         private InputMetrics inputMetrics_;
         private SingleFieldBuilder inputMetricsBuilder_;
         private OutputMetrics outputMetrics_;
         private SingleFieldBuilder outputMetricsBuilder_;
         private ShuffleReadMetrics shuffleReadMetrics_;
         private SingleFieldBuilder shuffleReadMetricsBuilder_;
         private ShuffleWriteMetrics shuffleWriteMetrics_;
         private SingleFieldBuilder shuffleWriteMetricsBuilder_;

         public static final Descriptors.Descriptor getDescriptor() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskMetrics_descriptor;
         }

         protected GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskMetrics_fieldAccessorTable.ensureFieldAccessorsInitialized(TaskMetrics.class, Builder.class);
         }

         private Builder() {
            this.maybeForceBuilderInitialization();
         }

         private Builder(AbstractMessage.BuilderParent parent) {
            super(parent);
            this.maybeForceBuilderInitialization();
         }

         private void maybeForceBuilderInitialization() {
            if (StoreTypes.TaskMetrics.alwaysUseFieldBuilders) {
               this.getInputMetricsFieldBuilder();
               this.getOutputMetricsFieldBuilder();
               this.getShuffleReadMetricsFieldBuilder();
               this.getShuffleWriteMetricsFieldBuilder();
            }

         }

         public Builder clear() {
            super.clear();
            this.bitField0_ = 0;
            this.executorDeserializeTime_ = 0L;
            this.executorDeserializeCpuTime_ = 0L;
            this.executorRunTime_ = 0L;
            this.executorCpuTime_ = 0L;
            this.resultSize_ = 0L;
            this.jvmGcTime_ = 0L;
            this.resultSerializationTime_ = 0L;
            this.memoryBytesSpilled_ = 0L;
            this.diskBytesSpilled_ = 0L;
            this.peakExecutionMemory_ = 0L;
            this.inputMetrics_ = null;
            if (this.inputMetricsBuilder_ != null) {
               this.inputMetricsBuilder_.dispose();
               this.inputMetricsBuilder_ = null;
            }

            this.outputMetrics_ = null;
            if (this.outputMetricsBuilder_ != null) {
               this.outputMetricsBuilder_.dispose();
               this.outputMetricsBuilder_ = null;
            }

            this.shuffleReadMetrics_ = null;
            if (this.shuffleReadMetricsBuilder_ != null) {
               this.shuffleReadMetricsBuilder_.dispose();
               this.shuffleReadMetricsBuilder_ = null;
            }

            this.shuffleWriteMetrics_ = null;
            if (this.shuffleWriteMetricsBuilder_ != null) {
               this.shuffleWriteMetricsBuilder_.dispose();
               this.shuffleWriteMetricsBuilder_ = null;
            }

            return this;
         }

         public Descriptors.Descriptor getDescriptorForType() {
            return StoreTypes.internal_static_org_apache_spark_status_protobuf_TaskMetrics_descriptor;
         }

         public TaskMetrics getDefaultInstanceForType() {
            return StoreTypes.TaskMetrics.getDefaultInstance();
         }

         public TaskMetrics build() {
            TaskMetrics result = this.buildPartial();
            if (!result.isInitialized()) {
               throw newUninitializedMessageException(result);
            } else {
               return result;
            }
         }

         public TaskMetrics buildPartial() {
            TaskMetrics result = new TaskMetrics(this);
            if (this.bitField0_ != 0) {
               this.buildPartial0(result);
            }

            this.onBuilt();
            return result;
         }

         private void buildPartial0(TaskMetrics result) {
            int from_bitField0_ = this.bitField0_;
            if ((from_bitField0_ & 1) != 0) {
               result.executorDeserializeTime_ = this.executorDeserializeTime_;
            }

            if ((from_bitField0_ & 2) != 0) {
               result.executorDeserializeCpuTime_ = this.executorDeserializeCpuTime_;
            }

            if ((from_bitField0_ & 4) != 0) {
               result.executorRunTime_ = this.executorRunTime_;
            }

            if ((from_bitField0_ & 8) != 0) {
               result.executorCpuTime_ = this.executorCpuTime_;
            }

            if ((from_bitField0_ & 16) != 0) {
               result.resultSize_ = this.resultSize_;
            }

            if ((from_bitField0_ & 32) != 0) {
               result.jvmGcTime_ = this.jvmGcTime_;
            }

            if ((from_bitField0_ & 64) != 0) {
               result.resultSerializationTime_ = this.resultSerializationTime_;
            }

            if ((from_bitField0_ & 128) != 0) {
               result.memoryBytesSpilled_ = this.memoryBytesSpilled_;
            }

            if ((from_bitField0_ & 256) != 0) {
               result.diskBytesSpilled_ = this.diskBytesSpilled_;
            }

            if ((from_bitField0_ & 512) != 0) {
               result.peakExecutionMemory_ = this.peakExecutionMemory_;
            }

            int to_bitField0_ = 0;
            if ((from_bitField0_ & 1024) != 0) {
               result.inputMetrics_ = this.inputMetricsBuilder_ == null ? this.inputMetrics_ : (InputMetrics)this.inputMetricsBuilder_.build();
               to_bitField0_ |= 1;
            }

            if ((from_bitField0_ & 2048) != 0) {
               result.outputMetrics_ = this.outputMetricsBuilder_ == null ? this.outputMetrics_ : (OutputMetrics)this.outputMetricsBuilder_.build();
               to_bitField0_ |= 2;
            }

            if ((from_bitField0_ & 4096) != 0) {
               result.shuffleReadMetrics_ = this.shuffleReadMetricsBuilder_ == null ? this.shuffleReadMetrics_ : (ShuffleReadMetrics)this.shuffleReadMetricsBuilder_.build();
               to_bitField0_ |= 4;
            }

            if ((from_bitField0_ & 8192) != 0) {
               result.shuffleWriteMetrics_ = this.shuffleWriteMetricsBuilder_ == null ? this.shuffleWriteMetrics_ : (ShuffleWriteMetrics)this.shuffleWriteMetricsBuilder_.build();
               to_bitField0_ |= 8;
            }

            result.bitField0_ |= to_bitField0_;
         }

         public Builder mergeFrom(Message other) {
            if (other instanceof TaskMetrics) {
               return this.mergeFrom((TaskMetrics)other);
            } else {
               super.mergeFrom(other);
               return this;
            }
         }

         public Builder mergeFrom(TaskMetrics other) {
            if (other == StoreTypes.TaskMetrics.getDefaultInstance()) {
               return this;
            } else {
               if (other.getExecutorDeserializeTime() != 0L) {
                  this.setExecutorDeserializeTime(other.getExecutorDeserializeTime());
               }

               if (other.getExecutorDeserializeCpuTime() != 0L) {
                  this.setExecutorDeserializeCpuTime(other.getExecutorDeserializeCpuTime());
               }

               if (other.getExecutorRunTime() != 0L) {
                  this.setExecutorRunTime(other.getExecutorRunTime());
               }

               if (other.getExecutorCpuTime() != 0L) {
                  this.setExecutorCpuTime(other.getExecutorCpuTime());
               }

               if (other.getResultSize() != 0L) {
                  this.setResultSize(other.getResultSize());
               }

               if (other.getJvmGcTime() != 0L) {
                  this.setJvmGcTime(other.getJvmGcTime());
               }

               if (other.getResultSerializationTime() != 0L) {
                  this.setResultSerializationTime(other.getResultSerializationTime());
               }

               if (other.getMemoryBytesSpilled() != 0L) {
                  this.setMemoryBytesSpilled(other.getMemoryBytesSpilled());
               }

               if (other.getDiskBytesSpilled() != 0L) {
                  this.setDiskBytesSpilled(other.getDiskBytesSpilled());
               }

               if (other.getPeakExecutionMemory() != 0L) {
                  this.setPeakExecutionMemory(other.getPeakExecutionMemory());
               }

               if (other.hasInputMetrics()) {
                  this.mergeInputMetrics(other.getInputMetrics());
               }

               if (other.hasOutputMetrics()) {
                  this.mergeOutputMetrics(other.getOutputMetrics());
               }

               if (other.hasShuffleReadMetrics()) {
                  this.mergeShuffleReadMetrics(other.getShuffleReadMetrics());
               }

               if (other.hasShuffleWriteMetrics()) {
                  this.mergeShuffleWriteMetrics(other.getShuffleWriteMetrics());
               }

               this.mergeUnknownFields(other.getUnknownFields());
               this.onChanged();
               return this;
            }
         }

         public final boolean isInitialized() {
            return true;
         }

         public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            if (extensionRegistry == null) {
               throw new NullPointerException();
            } else {
               try {
                  boolean done = false;

                  while(!done) {
                     int tag = input.readTag();
                     switch (tag) {
                        case 0:
                           done = true;
                           break;
                        case 8:
                           this.executorDeserializeTime_ = input.readInt64();
                           this.bitField0_ |= 1;
                           break;
                        case 16:
                           this.executorDeserializeCpuTime_ = input.readInt64();
                           this.bitField0_ |= 2;
                           break;
                        case 24:
                           this.executorRunTime_ = input.readInt64();
                           this.bitField0_ |= 4;
                           break;
                        case 32:
                           this.executorCpuTime_ = input.readInt64();
                           this.bitField0_ |= 8;
                           break;
                        case 40:
                           this.resultSize_ = input.readInt64();
                           this.bitField0_ |= 16;
                           break;
                        case 48:
                           this.jvmGcTime_ = input.readInt64();
                           this.bitField0_ |= 32;
                           break;
                        case 56:
                           this.resultSerializationTime_ = input.readInt64();
                           this.bitField0_ |= 64;
                           break;
                        case 64:
                           this.memoryBytesSpilled_ = input.readInt64();
                           this.bitField0_ |= 128;
                           break;
                        case 72:
                           this.diskBytesSpilled_ = input.readInt64();
                           this.bitField0_ |= 256;
                           break;
                        case 80:
                           this.peakExecutionMemory_ = input.readInt64();
                           this.bitField0_ |= 512;
                           break;
                        case 90:
                           input.readMessage((MessageLite.Builder)this.getInputMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 1024;
                           break;
                        case 98:
                           input.readMessage((MessageLite.Builder)this.getOutputMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 2048;
                           break;
                        case 106:
                           input.readMessage((MessageLite.Builder)this.getShuffleReadMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 4096;
                           break;
                        case 114:
                           input.readMessage((MessageLite.Builder)this.getShuffleWriteMetricsFieldBuilder().getBuilder(), extensionRegistry);
                           this.bitField0_ |= 8192;
                           break;
                        default:
                           if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                              done = true;
                           }
                     }
                  }
               } catch (InvalidProtocolBufferException e) {
                  throw e.unwrapIOException();
               } finally {
                  this.onChanged();
               }

               return this;
            }
         }

         public long getExecutorDeserializeTime() {
            return this.executorDeserializeTime_;
         }

         public Builder setExecutorDeserializeTime(long value) {
            this.executorDeserializeTime_ = value;
            this.bitField0_ |= 1;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorDeserializeTime() {
            this.bitField0_ &= -2;
            this.executorDeserializeTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getExecutorDeserializeCpuTime() {
            return this.executorDeserializeCpuTime_;
         }

         public Builder setExecutorDeserializeCpuTime(long value) {
            this.executorDeserializeCpuTime_ = value;
            this.bitField0_ |= 2;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorDeserializeCpuTime() {
            this.bitField0_ &= -3;
            this.executorDeserializeCpuTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getExecutorRunTime() {
            return this.executorRunTime_;
         }

         public Builder setExecutorRunTime(long value) {
            this.executorRunTime_ = value;
            this.bitField0_ |= 4;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorRunTime() {
            this.bitField0_ &= -5;
            this.executorRunTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getExecutorCpuTime() {
            return this.executorCpuTime_;
         }

         public Builder setExecutorCpuTime(long value) {
            this.executorCpuTime_ = value;
            this.bitField0_ |= 8;
            this.onChanged();
            return this;
         }

         public Builder clearExecutorCpuTime() {
            this.bitField0_ &= -9;
            this.executorCpuTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getResultSize() {
            return this.resultSize_;
         }

         public Builder setResultSize(long value) {
            this.resultSize_ = value;
            this.bitField0_ |= 16;
            this.onChanged();
            return this;
         }

         public Builder clearResultSize() {
            this.bitField0_ &= -17;
            this.resultSize_ = 0L;
            this.onChanged();
            return this;
         }

         public long getJvmGcTime() {
            return this.jvmGcTime_;
         }

         public Builder setJvmGcTime(long value) {
            this.jvmGcTime_ = value;
            this.bitField0_ |= 32;
            this.onChanged();
            return this;
         }

         public Builder clearJvmGcTime() {
            this.bitField0_ &= -33;
            this.jvmGcTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getResultSerializationTime() {
            return this.resultSerializationTime_;
         }

         public Builder setResultSerializationTime(long value) {
            this.resultSerializationTime_ = value;
            this.bitField0_ |= 64;
            this.onChanged();
            return this;
         }

         public Builder clearResultSerializationTime() {
            this.bitField0_ &= -65;
            this.resultSerializationTime_ = 0L;
            this.onChanged();
            return this;
         }

         public long getMemoryBytesSpilled() {
            return this.memoryBytesSpilled_;
         }

         public Builder setMemoryBytesSpilled(long value) {
            this.memoryBytesSpilled_ = value;
            this.bitField0_ |= 128;
            this.onChanged();
            return this;
         }

         public Builder clearMemoryBytesSpilled() {
            this.bitField0_ &= -129;
            this.memoryBytesSpilled_ = 0L;
            this.onChanged();
            return this;
         }

         public long getDiskBytesSpilled() {
            return this.diskBytesSpilled_;
         }

         public Builder setDiskBytesSpilled(long value) {
            this.diskBytesSpilled_ = value;
            this.bitField0_ |= 256;
            this.onChanged();
            return this;
         }

         public Builder clearDiskBytesSpilled() {
            this.bitField0_ &= -257;
            this.diskBytesSpilled_ = 0L;
            this.onChanged();
            return this;
         }

         public long getPeakExecutionMemory() {
            return this.peakExecutionMemory_;
         }

         public Builder setPeakExecutionMemory(long value) {
            this.peakExecutionMemory_ = value;
            this.bitField0_ |= 512;
            this.onChanged();
            return this;
         }

         public Builder clearPeakExecutionMemory() {
            this.bitField0_ &= -513;
            this.peakExecutionMemory_ = 0L;
            this.onChanged();
            return this;
         }

         public boolean hasInputMetrics() {
            return (this.bitField0_ & 1024) != 0;
         }

         public InputMetrics getInputMetrics() {
            if (this.inputMetricsBuilder_ == null) {
               return this.inputMetrics_ == null ? StoreTypes.InputMetrics.getDefaultInstance() : this.inputMetrics_;
            } else {
               return (InputMetrics)this.inputMetricsBuilder_.getMessage();
            }
         }

         public Builder setInputMetrics(InputMetrics value) {
            if (this.inputMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.inputMetrics_ = value;
            } else {
               this.inputMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder setInputMetrics(InputMetrics.Builder builderForValue) {
            if (this.inputMetricsBuilder_ == null) {
               this.inputMetrics_ = builderForValue.build();
            } else {
               this.inputMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 1024;
            this.onChanged();
            return this;
         }

         public Builder mergeInputMetrics(InputMetrics value) {
            if (this.inputMetricsBuilder_ == null) {
               if ((this.bitField0_ & 1024) != 0 && this.inputMetrics_ != null && this.inputMetrics_ != StoreTypes.InputMetrics.getDefaultInstance()) {
                  this.getInputMetricsBuilder().mergeFrom(value);
               } else {
                  this.inputMetrics_ = value;
               }
            } else {
               this.inputMetricsBuilder_.mergeFrom(value);
            }

            if (this.inputMetrics_ != null) {
               this.bitField0_ |= 1024;
               this.onChanged();
            }

            return this;
         }

         public Builder clearInputMetrics() {
            this.bitField0_ &= -1025;
            this.inputMetrics_ = null;
            if (this.inputMetricsBuilder_ != null) {
               this.inputMetricsBuilder_.dispose();
               this.inputMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public InputMetrics.Builder getInputMetricsBuilder() {
            this.bitField0_ |= 1024;
            this.onChanged();
            return (InputMetrics.Builder)this.getInputMetricsFieldBuilder().getBuilder();
         }

         public InputMetricsOrBuilder getInputMetricsOrBuilder() {
            if (this.inputMetricsBuilder_ != null) {
               return (InputMetricsOrBuilder)this.inputMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.inputMetrics_ == null ? StoreTypes.InputMetrics.getDefaultInstance() : this.inputMetrics_;
            }
         }

         private SingleFieldBuilder getInputMetricsFieldBuilder() {
            if (this.inputMetricsBuilder_ == null) {
               this.inputMetricsBuilder_ = new SingleFieldBuilder(this.getInputMetrics(), this.getParentForChildren(), this.isClean());
               this.inputMetrics_ = null;
            }

            return this.inputMetricsBuilder_;
         }

         public boolean hasOutputMetrics() {
            return (this.bitField0_ & 2048) != 0;
         }

         public OutputMetrics getOutputMetrics() {
            if (this.outputMetricsBuilder_ == null) {
               return this.outputMetrics_ == null ? StoreTypes.OutputMetrics.getDefaultInstance() : this.outputMetrics_;
            } else {
               return (OutputMetrics)this.outputMetricsBuilder_.getMessage();
            }
         }

         public Builder setOutputMetrics(OutputMetrics value) {
            if (this.outputMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.outputMetrics_ = value;
            } else {
               this.outputMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder setOutputMetrics(OutputMetrics.Builder builderForValue) {
            if (this.outputMetricsBuilder_ == null) {
               this.outputMetrics_ = builderForValue.build();
            } else {
               this.outputMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 2048;
            this.onChanged();
            return this;
         }

         public Builder mergeOutputMetrics(OutputMetrics value) {
            if (this.outputMetricsBuilder_ == null) {
               if ((this.bitField0_ & 2048) != 0 && this.outputMetrics_ != null && this.outputMetrics_ != StoreTypes.OutputMetrics.getDefaultInstance()) {
                  this.getOutputMetricsBuilder().mergeFrom(value);
               } else {
                  this.outputMetrics_ = value;
               }
            } else {
               this.outputMetricsBuilder_.mergeFrom(value);
            }

            if (this.outputMetrics_ != null) {
               this.bitField0_ |= 2048;
               this.onChanged();
            }

            return this;
         }

         public Builder clearOutputMetrics() {
            this.bitField0_ &= -2049;
            this.outputMetrics_ = null;
            if (this.outputMetricsBuilder_ != null) {
               this.outputMetricsBuilder_.dispose();
               this.outputMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public OutputMetrics.Builder getOutputMetricsBuilder() {
            this.bitField0_ |= 2048;
            this.onChanged();
            return (OutputMetrics.Builder)this.getOutputMetricsFieldBuilder().getBuilder();
         }

         public OutputMetricsOrBuilder getOutputMetricsOrBuilder() {
            if (this.outputMetricsBuilder_ != null) {
               return (OutputMetricsOrBuilder)this.outputMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.outputMetrics_ == null ? StoreTypes.OutputMetrics.getDefaultInstance() : this.outputMetrics_;
            }
         }

         private SingleFieldBuilder getOutputMetricsFieldBuilder() {
            if (this.outputMetricsBuilder_ == null) {
               this.outputMetricsBuilder_ = new SingleFieldBuilder(this.getOutputMetrics(), this.getParentForChildren(), this.isClean());
               this.outputMetrics_ = null;
            }

            return this.outputMetricsBuilder_;
         }

         public boolean hasShuffleReadMetrics() {
            return (this.bitField0_ & 4096) != 0;
         }

         public ShuffleReadMetrics getShuffleReadMetrics() {
            if (this.shuffleReadMetricsBuilder_ == null) {
               return this.shuffleReadMetrics_ == null ? StoreTypes.ShuffleReadMetrics.getDefaultInstance() : this.shuffleReadMetrics_;
            } else {
               return (ShuffleReadMetrics)this.shuffleReadMetricsBuilder_.getMessage();
            }
         }

         public Builder setShuffleReadMetrics(ShuffleReadMetrics value) {
            if (this.shuffleReadMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.shuffleReadMetrics_ = value;
            } else {
               this.shuffleReadMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder setShuffleReadMetrics(ShuffleReadMetrics.Builder builderForValue) {
            if (this.shuffleReadMetricsBuilder_ == null) {
               this.shuffleReadMetrics_ = builderForValue.build();
            } else {
               this.shuffleReadMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 4096;
            this.onChanged();
            return this;
         }

         public Builder mergeShuffleReadMetrics(ShuffleReadMetrics value) {
            if (this.shuffleReadMetricsBuilder_ == null) {
               if ((this.bitField0_ & 4096) != 0 && this.shuffleReadMetrics_ != null && this.shuffleReadMetrics_ != StoreTypes.ShuffleReadMetrics.getDefaultInstance()) {
                  this.getShuffleReadMetricsBuilder().mergeFrom(value);
               } else {
                  this.shuffleReadMetrics_ = value;
               }
            } else {
               this.shuffleReadMetricsBuilder_.mergeFrom(value);
            }

            if (this.shuffleReadMetrics_ != null) {
               this.bitField0_ |= 4096;
               this.onChanged();
            }

            return this;
         }

         public Builder clearShuffleReadMetrics() {
            this.bitField0_ &= -4097;
            this.shuffleReadMetrics_ = null;
            if (this.shuffleReadMetricsBuilder_ != null) {
               this.shuffleReadMetricsBuilder_.dispose();
               this.shuffleReadMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ShuffleReadMetrics.Builder getShuffleReadMetricsBuilder() {
            this.bitField0_ |= 4096;
            this.onChanged();
            return (ShuffleReadMetrics.Builder)this.getShuffleReadMetricsFieldBuilder().getBuilder();
         }

         public ShuffleReadMetricsOrBuilder getShuffleReadMetricsOrBuilder() {
            if (this.shuffleReadMetricsBuilder_ != null) {
               return (ShuffleReadMetricsOrBuilder)this.shuffleReadMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.shuffleReadMetrics_ == null ? StoreTypes.ShuffleReadMetrics.getDefaultInstance() : this.shuffleReadMetrics_;
            }
         }

         private SingleFieldBuilder getShuffleReadMetricsFieldBuilder() {
            if (this.shuffleReadMetricsBuilder_ == null) {
               this.shuffleReadMetricsBuilder_ = new SingleFieldBuilder(this.getShuffleReadMetrics(), this.getParentForChildren(), this.isClean());
               this.shuffleReadMetrics_ = null;
            }

            return this.shuffleReadMetricsBuilder_;
         }

         public boolean hasShuffleWriteMetrics() {
            return (this.bitField0_ & 8192) != 0;
         }

         public ShuffleWriteMetrics getShuffleWriteMetrics() {
            if (this.shuffleWriteMetricsBuilder_ == null) {
               return this.shuffleWriteMetrics_ == null ? StoreTypes.ShuffleWriteMetrics.getDefaultInstance() : this.shuffleWriteMetrics_;
            } else {
               return (ShuffleWriteMetrics)this.shuffleWriteMetricsBuilder_.getMessage();
            }
         }

         public Builder setShuffleWriteMetrics(ShuffleWriteMetrics value) {
            if (this.shuffleWriteMetricsBuilder_ == null) {
               if (value == null) {
                  throw new NullPointerException();
               }

               this.shuffleWriteMetrics_ = value;
            } else {
               this.shuffleWriteMetricsBuilder_.setMessage(value);
            }

            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder setShuffleWriteMetrics(ShuffleWriteMetrics.Builder builderForValue) {
            if (this.shuffleWriteMetricsBuilder_ == null) {
               this.shuffleWriteMetrics_ = builderForValue.build();
            } else {
               this.shuffleWriteMetricsBuilder_.setMessage(builderForValue.build());
            }

            this.bitField0_ |= 8192;
            this.onChanged();
            return this;
         }

         public Builder mergeShuffleWriteMetrics(ShuffleWriteMetrics value) {
            if (this.shuffleWriteMetricsBuilder_ == null) {
               if ((this.bitField0_ & 8192) != 0 && this.shuffleWriteMetrics_ != null && this.shuffleWriteMetrics_ != StoreTypes.ShuffleWriteMetrics.getDefaultInstance()) {
                  this.getShuffleWriteMetricsBuilder().mergeFrom(value);
               } else {
                  this.shuffleWriteMetrics_ = value;
               }
            } else {
               this.shuffleWriteMetricsBuilder_.mergeFrom(value);
            }

            if (this.shuffleWriteMetrics_ != null) {
               this.bitField0_ |= 8192;
               this.onChanged();
            }

            return this;
         }

         public Builder clearShuffleWriteMetrics() {
            this.bitField0_ &= -8193;
            this.shuffleWriteMetrics_ = null;
            if (this.shuffleWriteMetricsBuilder_ != null) {
               this.shuffleWriteMetricsBuilder_.dispose();
               this.shuffleWriteMetricsBuilder_ = null;
            }

            this.onChanged();
            return this;
         }

         public ShuffleWriteMetrics.Builder getShuffleWriteMetricsBuilder() {
            this.bitField0_ |= 8192;
            this.onChanged();
            return (ShuffleWriteMetrics.Builder)this.getShuffleWriteMetricsFieldBuilder().getBuilder();
         }

         public ShuffleWriteMetricsOrBuilder getShuffleWriteMetricsOrBuilder() {
            if (this.shuffleWriteMetricsBuilder_ != null) {
               return (ShuffleWriteMetricsOrBuilder)this.shuffleWriteMetricsBuilder_.getMessageOrBuilder();
            } else {
               return this.shuffleWriteMetrics_ == null ? StoreTypes.ShuffleWriteMetrics.getDefaultInstance() : this.shuffleWriteMetrics_;
            }
         }

         private SingleFieldBuilder getShuffleWriteMetricsFieldBuilder() {
            if (this.shuffleWriteMetricsBuilder_ == null) {
               this.shuffleWriteMetricsBuilder_ = new SingleFieldBuilder(this.getShuffleWriteMetrics(), this.getParentForChildren(), this.isClean());
               this.shuffleWriteMetrics_ = null;
            }

            return this.shuffleWriteMetricsBuilder_;
         }
      }
   }

   public interface TaskMetricsOrBuilder extends MessageOrBuilder {
      long getExecutorDeserializeTime();

      long getExecutorDeserializeCpuTime();

      long getExecutorRunTime();

      long getExecutorCpuTime();

      long getResultSize();

      long getJvmGcTime();

      long getResultSerializationTime();

      long getMemoryBytesSpilled();

      long getDiskBytesSpilled();

      long getPeakExecutionMemory();

      boolean hasInputMetrics();

      InputMetrics getInputMetrics();

      InputMetricsOrBuilder getInputMetricsOrBuilder();

      boolean hasOutputMetrics();

      OutputMetrics getOutputMetrics();

      OutputMetricsOrBuilder getOutputMetricsOrBuilder();

      boolean hasShuffleReadMetrics();

      ShuffleReadMetrics getShuffleReadMetrics();

      ShuffleReadMetricsOrBuilder getShuffleReadMetricsOrBuilder();

      boolean hasShuffleWriteMetrics();

      ShuffleWriteMetrics getShuffleWriteMetrics();

      ShuffleWriteMetricsOrBuilder getShuffleWriteMetricsOrBuilder();
   }

   public interface TaskResourceRequestOrBuilder extends MessageOrBuilder {
      boolean hasResourceName();

      String getResourceName();

      ByteString getResourceNameBytes();

      double getAmount();
   }
}
