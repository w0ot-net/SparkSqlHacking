package org.apache.spark.status;

import org.apache.spark.status.api.v1.TaskMetrics;
import scala.collection.Iterable;
import scala.collection.immutable.Seq;
import scala.reflect.ScalaSignature;

@ScalaSignature(
   bytes = "\u0006\u0005\u0005-tAB\u0006\r\u0011\u0003qAC\u0002\u0004\u0017\u0019!\u0005ab\u0006\u0005\u0006=\u0005!\t\u0001\t\u0005\u0006C\u0005!IA\t\u0005\u0006g\u0005!\t\u0001\u000e\u0005\u0006!\u0006!\t!\u0015\u0005\u0007!\u0006!\t!!\u000f\t\u000f\u0005}\u0012\u0001\"\u0001\u0002B!9\u00111J\u0001\u0005\u0002\u00055\u0003bBA*\u0003\u0011\u0005\u0011Q\u000b\u0005\b\u0003\u007f\tA\u0011BA.\u0003Ea\u0015N^3F]RLG/\u001f%fYB,'o\u001d\u0006\u0003\u001b9\taa\u001d;biV\u001c(BA\b\u0011\u0003\u0015\u0019\b/\u0019:l\u0015\t\t\"#\u0001\u0004ba\u0006\u001c\u0007.\u001a\u0006\u0002'\u0005\u0019qN]4\u0011\u0005U\tQ\"\u0001\u0007\u0003#1Kg/Z#oi&$\u0018\u0010S3ma\u0016\u00148o\u0005\u0002\u00021A\u0011\u0011\u0004H\u0007\u00025)\t1$A\u0003tG\u0006d\u0017-\u0003\u0002\u001e5\t1\u0011I\\=SK\u001a\fa\u0001P5oSRt4\u0001\u0001\u000b\u0002)\u0005\t\u0012mY2v-\u0006dW/\u001a;p'R\u0014\u0018N\\4\u0015\u0005\rr\u0003C\u0001\u0013,\u001d\t)\u0013\u0006\u0005\u0002'55\tqE\u0003\u0002)?\u00051AH]8pizJ!A\u000b\u000e\u0002\rA\u0013X\rZ3g\u0013\taSF\u0001\u0004TiJLgn\u001a\u0006\u0003UiAQaL\u0002A\u0002A\nQA^1mk\u0016\u0004\"!G\u0019\n\u0005IR\"aA!os\u0006\u0019b.Z<BG\u000e,X.\u001e7bi>\u0014\u0018J\u001c4pgR\u0011QG\u0012\t\u0004mmrdBA\u001c:\u001d\t1\u0003(C\u0001\u001c\u0013\tQ$$A\u0004qC\u000e\\\u0017mZ3\n\u0005qj$aA*fc*\u0011!H\u0007\t\u0003\u007f\u0011k\u0011\u0001\u0011\u0006\u0003\u0003\n\u000b!A^\u0019\u000b\u0005\rc\u0011aA1qS&\u0011Q\t\u0011\u0002\u0010\u0003\u000e\u001cW/\\;mC\ndW-\u00138g_\")q\t\u0002a\u0001\u0011\u00061\u0011mY2v[N\u00042AN%L\u0013\tQUH\u0001\u0005Ji\u0016\u0014\u0018M\u00197f!\tau*D\u0001N\u0015\tqe\"A\u0005tG\",G-\u001e7fe&\u0011Q)T\u0001\u000eGJ,\u0017\r^3NKR\u0014\u0018nY:\u0015cI+&\f\u00180aE\u00124\u0007N\u001b7oaJ$h\u000f\u001f>}}\u0006\u0005\u0011QAA\u0005\u0003\u001b\t\t\"!\u0006\u0002\u001a\u0005u\u0011\u0011EA\u0013\u0003S\ti#!\r\u00026A\u0011qhU\u0005\u0003)\u0002\u00131\u0002V1tW6+GO]5dg\")a+\u0002a\u0001/\u00069R\r_3dkR|'\u000fR3tKJL\u0017\r\\5{KRKW.\u001a\t\u00033aK!!\u0017\u000e\u0003\t1{gn\u001a\u0005\u00067\u0016\u0001\raV\u0001\u001bKb,7-\u001e;pe\u0012+7/\u001a:jC2L'0Z\"qkRKW.\u001a\u0005\u0006;\u0016\u0001\raV\u0001\u0010Kb,7-\u001e;peJ+h\u000eV5nK\")q,\u0002a\u0001/\u0006yQ\r_3dkR|'o\u00119v)&lW\rC\u0003b\u000b\u0001\u0007q+\u0001\u0006sKN,H\u000e^*ju\u0016DQaY\u0003A\u0002]\u000b\u0011B\u001b<n\u000f\u000e$\u0016.\\3\t\u000b\u0015,\u0001\u0019A,\u0002/I,7/\u001e7u'\u0016\u0014\u0018.\u00197ju\u0006$\u0018n\u001c8US6,\u0007\"B4\u0006\u0001\u00049\u0016AE7f[>\u0014\u0018PQ=uKN\u001c\u0006/\u001b7mK\u0012DQ![\u0003A\u0002]\u000b\u0001\u0003Z5tW\nKH/Z:Ta&dG.\u001a3\t\u000b-,\u0001\u0019A,\u0002'A,\u0017m[#yK\u000e,H/[8o\u001b\u0016lwN]=\t\u000b5,\u0001\u0019A,\u0002\u001d%t\u0007/\u001e;CsR,7OU3bI\")q.\u0002a\u0001/\u0006\u0001\u0012N\u001c9viJ+7m\u001c:egJ+\u0017\r\u001a\u0005\u0006c\u0016\u0001\raV\u0001\u0013_V$\b/\u001e;CsR,7o\u0016:jiR,g\u000eC\u0003t\u000b\u0001\u0007q+\u0001\u000bpkR\u0004X\u000f\u001e*fG>\u0014Hm],sSR$XM\u001c\u0005\u0006k\u0016\u0001\raV\u0001\u001bg\",hM\u001a7f%\u0016lw\u000e^3CY>\u001c7n\u001d$fi\u000eDW\r\u001a\u0005\u0006o\u0016\u0001\raV\u0001\u001ag\",hM\u001a7f\u0019>\u001c\u0017\r\u001c\"m_\u000e\\7OR3uG\",G\rC\u0003z\u000b\u0001\u0007q+\u0001\u000btQV4g\r\\3GKR\u001c\u0007nV1jiRKW.\u001a\u0005\u0006w\u0016\u0001\raV\u0001\u0017g\",hM\u001a7f%\u0016lw\u000e^3CsR,7OU3bI\")Q0\u0002a\u0001/\u0006a2\u000f[;gM2,'+Z7pi\u0016\u0014\u0015\u0010^3t%\u0016\fG\rV8ESN\\\u0007\"B@\u0006\u0001\u00049\u0016!F:ik\u001a4G.\u001a'pG\u0006d')\u001f;fgJ+\u0017\r\u001a\u0005\u0007\u0003\u0007)\u0001\u0019A,\u0002%MDWO\u001a4mKJ+7m\u001c:egJ+\u0017\r\u001a\u0005\u0007\u0003\u000f)\u0001\u0019A,\u0002?MDWO\u001a4mK\u000e{'O];qi6+'oZ3e\u00052|7m[\"ik:\\7\u000f\u0003\u0004\u0002\f\u0015\u0001\raV\u0001 g\",hM\u001a7f\u001b\u0016\u0014x-\u001a3GKR\u001c\u0007NR1mY\n\f7m[\"pk:$\bBBA\b\u000b\u0001\u0007q+\u0001\u0011tQV4g\r\\3NKJ<W\r\u001a*f[>$XM\u00117pG.\u001ch)\u001a;dQ\u0016$\u0007BBA\n\u000b\u0001\u0007q+A\u0010tQV4g\r\\3NKJ<W\r\u001a'pG\u0006d'\t\\8dWN4U\r^2iK\u0012Da!a\u0006\u0006\u0001\u00049\u0016\u0001I:ik\u001a4G.Z'fe\u001e,GMU3n_R,7\t[;oWN4U\r^2iK\u0012Da!a\u0007\u0006\u0001\u00049\u0016aH:ik\u001a4G.Z'fe\u001e,G\rT8dC2\u001c\u0005.\u001e8lg\u001a+Go\u00195fI\"1\u0011qD\u0003A\u0002]\u000bAd\u001d5vM\u001adW-T3sO\u0016$'+Z7pi\u0016\u0014\u0015\u0010^3t%\u0016\fG\r\u0003\u0004\u0002$\u0015\u0001\raV\u0001\u001cg\",hM\u001a7f\u001b\u0016\u0014x-\u001a3M_\u000e\fGNQ=uKN\u0014V-\u00193\t\r\u0005\u001dR\u00011\u0001X\u0003e\u0019\b.\u001e4gY\u0016\u0014V-\\8uKJ+\u0017o\u001d#ve\u0006$\u0018n\u001c8\t\r\u0005-R\u00011\u0001X\u0003}\u0019\b.\u001e4gY\u0016lUM]4fIJ+Wn\u001c;f%\u0016\f8\u000fR;sCRLwN\u001c\u0005\u0007\u0003_)\u0001\u0019A,\u0002'MDWO\u001a4mK\nKH/Z:Xe&$H/\u001a8\t\r\u0005MR\u00011\u0001X\u0003A\u0019\b.\u001e4gY\u0016<&/\u001b;f)&lW\r\u0003\u0004\u00028\u0015\u0001\raV\u0001\u0016g\",hM\u001a7f%\u0016\u001cwN\u001d3t/JLG\u000f^3o)\r\u0011\u00161\b\u0005\u0007\u0003{1\u0001\u0019A,\u0002\u000f\u0011,g-Y;mi\u0006Q\u0011\r\u001a3NKR\u0014\u0018nY:\u0015\u000bI\u000b\u0019%a\u0012\t\r\u0005\u0015s\u00011\u0001S\u0003\ti\u0017\u0007\u0003\u0004\u0002J\u001d\u0001\rAU\u0001\u0003[J\nqb];ciJ\f7\r^'fiJL7m\u001d\u000b\u0006%\u0006=\u0013\u0011\u000b\u0005\u0007\u0003\u000bB\u0001\u0019\u0001*\t\r\u0005%\u0003\u00021\u0001S\u00031i\u0017m[3OK\u001e\fG/\u001b<f)\r\u0011\u0016q\u000b\u0005\u0007\u00033J\u0001\u0019\u0001*\u0002\u00035$rAUA/\u0003?\n\t\u0007\u0003\u0004\u0002F)\u0001\rA\u0015\u0005\u0007\u0003\u0013R\u0001\u0019\u0001*\t\u000f\u0005\r$\u00021\u0001\u0002f\u0005!Q.\u001e7u!\rI\u0012qM\u0005\u0004\u0003SR\"aA%oi\u0002"
)
public final class LiveEntityHelpers {
   public static TaskMetrics makeNegative(final TaskMetrics m) {
      return LiveEntityHelpers$.MODULE$.makeNegative(m);
   }

   public static TaskMetrics subtractMetrics(final TaskMetrics m1, final TaskMetrics m2) {
      return LiveEntityHelpers$.MODULE$.subtractMetrics(m1, m2);
   }

   public static TaskMetrics addMetrics(final TaskMetrics m1, final TaskMetrics m2) {
      return LiveEntityHelpers$.MODULE$.addMetrics(m1, m2);
   }

   public static TaskMetrics createMetrics(final long default) {
      return LiveEntityHelpers$.MODULE$.createMetrics(default);
   }

   public static TaskMetrics createMetrics(final long executorDeserializeTime, final long executorDeserializeCpuTime, final long executorRunTime, final long executorCpuTime, final long resultSize, final long jvmGcTime, final long resultSerializationTime, final long memoryBytesSpilled, final long diskBytesSpilled, final long peakExecutionMemory, final long inputBytesRead, final long inputRecordsRead, final long outputBytesWritten, final long outputRecordsWritten, final long shuffleRemoteBlocksFetched, final long shuffleLocalBlocksFetched, final long shuffleFetchWaitTime, final long shuffleRemoteBytesRead, final long shuffleRemoteBytesReadToDisk, final long shuffleLocalBytesRead, final long shuffleRecordsRead, final long shuffleCorruptMergedBlockChunks, final long shuffleMergedFetchFallbackCount, final long shuffleMergedRemoteBlocksFetched, final long shuffleMergedLocalBlocksFetched, final long shuffleMergedRemoteChunksFetched, final long shuffleMergedLocalChunksFetched, final long shuffleMergedRemoteBytesRead, final long shuffleMergedLocalBytesRead, final long shuffleRemoteReqsDuration, final long shuffleMergedRemoteReqsDuration, final long shuffleBytesWritten, final long shuffleWriteTime, final long shuffleRecordsWritten) {
      return LiveEntityHelpers$.MODULE$.createMetrics(executorDeserializeTime, executorDeserializeCpuTime, executorRunTime, executorCpuTime, resultSize, jvmGcTime, resultSerializationTime, memoryBytesSpilled, diskBytesSpilled, peakExecutionMemory, inputBytesRead, inputRecordsRead, outputBytesWritten, outputRecordsWritten, shuffleRemoteBlocksFetched, shuffleLocalBlocksFetched, shuffleFetchWaitTime, shuffleRemoteBytesRead, shuffleRemoteBytesReadToDisk, shuffleLocalBytesRead, shuffleRecordsRead, shuffleCorruptMergedBlockChunks, shuffleMergedFetchFallbackCount, shuffleMergedRemoteBlocksFetched, shuffleMergedLocalBlocksFetched, shuffleMergedRemoteChunksFetched, shuffleMergedLocalChunksFetched, shuffleMergedRemoteBytesRead, shuffleMergedLocalBytesRead, shuffleRemoteReqsDuration, shuffleMergedRemoteReqsDuration, shuffleBytesWritten, shuffleWriteTime, shuffleRecordsWritten);
   }

   public static Seq newAccumulatorInfos(final Iterable accums) {
      return LiveEntityHelpers$.MODULE$.newAccumulatorInfos(accums);
   }
}
