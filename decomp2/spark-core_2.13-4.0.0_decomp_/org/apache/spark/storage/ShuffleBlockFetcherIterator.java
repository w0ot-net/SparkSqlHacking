package org.apache.spark.storage;

import io.netty.util.internal.OutOfDirectMemoryError;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.lang.invoke.SerializedLambda;
import java.nio.channels.ClosedByInterruptException;
import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.zip.CheckedInputStream;
import java.util.zip.Checksum;
import javax.annotation.concurrent.GuardedBy;
import org.apache.spark.MapOutputTracker;
import org.apache.spark.MapOutputTracker$;
import org.apache.spark.TaskContext;
import org.apache.spark.errors.SparkCoreErrors$;
import org.apache.spark.internal.LogEntry;
import org.apache.spark.internal.Logging;
import org.apache.spark.internal.MDC;
import org.apache.spark.internal.MessageWithContext;
import org.apache.spark.network.buffer.FileSegmentManagedBuffer;
import org.apache.spark.network.buffer.ManagedBuffer;
import org.apache.spark.network.shuffle.BlockFetchingListener;
import org.apache.spark.network.shuffle.BlockStoreClient;
import org.apache.spark.network.shuffle.DownloadFile;
import org.apache.spark.network.shuffle.DownloadFileManager;
import org.apache.spark.network.shuffle.SimpleDownloadFile;
import org.apache.spark.network.shuffle.checksum.Cause;
import org.apache.spark.network.shuffle.checksum.ShuffleChecksumHelper;
import org.apache.spark.network.util.TransportConf;
import org.apache.spark.shuffle.ShuffleReadMetricsReporter;
import org.apache.spark.util.Clock;
import org.apache.spark.util.CompletionIterator$;
import org.apache.spark.util.TaskCompletionListener;
import org.apache.spark.util.Utils$;
import org.roaringbitmap.RoaringBitmap;
import org.slf4j.Logger;
import scala.;
import scala.Function0;
import scala.Function1;
import scala.Function2;
import scala.MatchError;
import scala.Option;
import scala.PartialFunction;
import scala.Product;
import scala.Some;
import scala.StringContext;
import scala.Tuple2;
import scala.Tuple3;
import scala.Tuple4;
import scala.Tuple5;
import scala.Tuple6;
import scala.collection.BufferedIterator;
import scala.collection.Factory;
import scala.collection.Iterable;
import scala.collection.IterableOnce;
import scala.collection.IterableOnceOps;
import scala.collection.Iterator;
import scala.collection.Seq;
import scala.collection.Stepper;
import scala.collection.StepperShape;
import scala.collection.immutable.IndexedSeq;
import scala.collection.immutable.List;
import scala.collection.immutable.Set;
import scala.collection.immutable.Stream;
import scala.collection.immutable.Vector;
import scala.collection.mutable.ArrayBuffer;
import scala.collection.mutable.Buffer;
import scala.collection.mutable.HashMap;
import scala.collection.mutable.HashSet;
import scala.collection.mutable.LinkedHashMap;
import scala.collection.mutable.LinkedHashSet;
import scala.collection.mutable.Queue;
import scala.collection.mutable.StringBuilder;
import scala.math.Numeric;
import scala.math.Ordering;
import scala.reflect.ClassTag;
import scala.reflect.ScalaSignature;
import scala.runtime.AbstractFunction1;
import scala.runtime.AbstractFunction3;
import scala.runtime.AbstractFunction4;
import scala.runtime.AbstractFunction5;
import scala.runtime.AbstractFunction6;
import scala.runtime.BoxedUnit;
import scala.runtime.BoxesRunTime;
import scala.runtime.IntRef;
import scala.runtime.LazyRef;
import scala.runtime.LongRef;
import scala.runtime.ModuleSerializationProxy;
import scala.runtime.Nothing;
import scala.runtime.Statics;
import scala.runtime.java8.JFunction0;
import scala.util.Failure;
import scala.util.Success;
import scala.util.Try;

@ScalaSignature(
   bytes = "\u0006\u0005%uh!\u0003Bm\u00057\u0014!q\u001cBv\u0011)\u0019i\u0005\u0001B\u0001B\u0003%1q\n\u0005\u000b\u0007/\u0002!\u0011!Q\u0001\n\re\u0003BCB0\u0001\t\u0005\t\u0015!\u0003\u0004b!Q1q\r\u0001\u0003\u0002\u0003\u0006Ia!\u001b\t\u0015\r=\u0004A!A!\u0002\u0013\u0019\t\b\u0003\u0006\u0004\u001a\u0002\u0011\t\u0011)A\u0005\u00077C!b!)\u0001\u0005\u0003\u0005\u000b\u0011BBG\u0011)\u0019\u0019\u000b\u0001B\u0001B\u0003%11\u0013\u0005\u000b\u0007K\u0003!\u0011!Q\u0001\n\rM\u0005BCBT\u0001\t\u0015\r\u0011\"\u0001\u0004*\"Q11\u0016\u0001\u0003\u0002\u0003\u0006Ia!$\t\u0015\r5\u0006A!A!\u0002\u0013\u0019\u0019\n\u0003\u0006\u00040\u0002\u0011\t\u0011)A\u0005\u0007cC!ba.\u0001\u0005\u0003\u0005\u000b\u0011BBY\u0011)\u0019I\f\u0001B\u0001B\u0003%1\u0011\u0017\u0005\u000b\u0007w\u0003!\u0011!Q\u0001\n\ru\u0006BDBg\u0001\u0011\u0005\tQ!B\u0001B\u0003%1q\u001a\u0005\u000b\u00073\u0004!\u0011!Q\u0001\n\rE\u0006BDBn\u0001\u0011\u0005\tQ!B\u0001B\u0003%1Q\u001c\u0005\b\u0007S\u0004A\u0011ABv\u0011%!9\u0002\u0001b\u0001\n\u0013\u0019I\u000b\u0003\u0005\u0005\u001a\u0001\u0001\u000b\u0011BBG\u0011!!Y\u0002\u0001Q!\n\rM\u0005\u0002\u0003C\u000f\u0001\u0001\u0006Kaa%\t\u0011\u0011}\u0001\u0001)A\u0005\u0007\u001bC\u0001\u0002\"\t\u0001A\u0003%A1\u0005\u0005\u000f\tc\u0001A\u0011!A\u0003\u0002\u0003\u0005\u000b\u0011\u0002C\u001a\u0011!Ai\u0004\u0001Q!\n!}\u0002\u0002\u0003E%\u0001\u0001\u0006I\u0001c\u0013\t\u0011!M\u0003\u0001)A\u0005\u0011+B\u0001\u0002c\u0017\u0001A\u0003&1Q\u0012\u0005\t\u0011;\u0002\u0001\u0015)\u0003\u0004\u0014\"A\u0001r\f\u0001!\u0002\u0013A\t\u0007\u0003\u0005\td\u0001\u0001\u000b\u0011\u0002E3\u0011!A9\u0007\u0001Q\u0001\n!%\u0004\u0002\u0003E8\u0001\u0001\u0006Ka!-\t\u0011!%\u0005\u0001)A\u0005\u0011\u0017C\u0001\u0002#&\u0001A\u0003%\u0001r\u0013\u0005\t\u0011;\u0003\u0001\u0015!\u0003\t \"I\u0001R\u0015\u0001\u0005\u0002\tm\u0007r\u0015\u0005\b\u0011S\u0003A\u0011\tEV\u0011\u001dAY\f\u0001C!\u0011{C\u0011\u0002c1\u0001\t\u0003\u0011Y\u000ec*\t\u0011!\u0015\u0007\u0001)C\u0005\u0011\u000fD\u0001\u0002#4\u0001A\u0013%\u0001r\u001a\u0005\b\u0011[\u0004A\u0011\u0002Ex\u0011\u001dAY\u0010\u0001C\u0005\u0011{D\u0011\"#\u0006\u0001#\u0003%I!b\u001f\t\u000f%]\u0001\u0001\"\u0003\n\u001a!9\u00112\u0005\u0001\u0005\n%\u0015\u0002bBE\u0016\u0001\u0011%\u0011R\u0006\u0005\t\u0013c\u0001\u0001\u0015\"\u0003\n4!A\u0011r\u0007\u0001!\n\u0013II\u0004\u0003\u0005\nF\u0001\u0001K\u0011BE$\u0011\u001dI)\u0006\u0001C\u0005\u0013/B\u0001\"#\u001c\u0001A\u0013%\u0001r\u0015\u0005\b\u0013_\u0002A\u0011BE9\u0011\u001dI)\b\u0001C\u0005\u0013oBq!#!\u0001\t\u0013I\u0019\tC\u0004\n\n\u0002!I!c#\t\u000f%E\u0005\u0001\"\u0011\u0006^!9\u00112\u0013\u0001\u0005B%U\u0005\"CEL\u0001\u0011\u0005!1\\EM\u0011\u001dIy\u000b\u0001C\u0001\u0013cCq!c-\u0001\t\u0013A9\u000bC\u0005\n6\u0002!\tAa7\n8\"Y\u0011R\u001a\u0001\u0012\u0002\u0013\u0005!1\\Eh\u0011%I\u0019\u000e\u0001C\u0001\u00057L)\u000eC\u0005\n\\\u0002!\tAa7\n^\"I\u00112\u001d\u0001\u0005\u0002\tm\u0017R\u001d\u0005\n\u0013W\u0004A\u0011\u0001Bn\u0013[<!\u0002\"\u0012\u0003\\\"\u0005!1\u001cC$\r)\u0011INa7\t\u0002\tmG\u0011\n\u0005\b\u0007SLE\u0011\u0001C&\u0011%!i%\u0013b\u0001\n\u0003!y\u0005\u0003\u0005\u0005^%\u0003\u000b\u0011\u0002C)\u0011\u001d!y&\u0013C\u0001\tCBq\u0001\"\u001cJ\t\u0003!yG\u0002\u0005\u0005x%\u0003%1\u001cC=\u0011)!9i\u0014BK\u0002\u0013\u0005A\u0011\u0012\u0005\u000b\t\u0017{%\u0011#Q\u0001\n\re\u0001B\u0003CG\u001f\nU\r\u0011\"\u0001\u0004*\"QAqR(\u0003\u0012\u0003\u0006Ia!$\t\u0015\u0011EuJ!f\u0001\n\u0003!\u0019\n\u0003\u0006\u0005\u0016>\u0013\t\u0012)A\u0005\u0007'Cqa!;P\t\u0003!9\nC\u0005\u0005 >\u000b\t\u0011\"\u0001\u0005\"\"IA\u0011V(\u0012\u0002\u0013\u0005A1\u0016\u0005\n\t\u0003|\u0015\u0013!C\u0001\t\u0007D\u0011\u0002b2P#\u0003%\t\u0001\"3\t\u0013\u00115w*!A\u0005B\u0011=\u0007\"\u0003Cn\u001f\u0006\u0005I\u0011\u0001CJ\u0011%!inTA\u0001\n\u0003!y\u000eC\u0005\u0005l>\u000b\t\u0011\"\u0011\u0005n\"IA1_(\u0002\u0002\u0013\u0005AQ\u001f\u0005\n\ts|\u0015\u0011!C!\twD\u0011\u0002b@P\u0003\u0003%\t%\"\u0001\t\u0013\u0015\rq*!A\u0005B\u0015\u0015\u0001\"CC\u0004\u001f\u0006\u0005I\u0011IC\u0005\u000f-)\u0019\"SA\u0001\u0012\u0003\u0011Y.\"\u0006\u0007\u0017\u0011]\u0014*!A\t\u0002\tmWq\u0003\u0005\b\u0007S,G\u0011AC\u0015\u0011%)\u0019!ZA\u0001\n\u000b*)\u0001C\u0005\u0006,\u0015\f\t\u0011\"!\u0006.!IQQG3\u0002\u0002\u0013\u0005Uq\u0007\u0005\n\u000b\u0007*\u0017\u0011!C\u0005\u000b\u000b2a!\"\u0014J\u0001\u0016=\u0003BCC)W\nU\r\u0011\"\u0001\u0006T!QQQK6\u0003\u0012\u0003\u0006Ia!\u001e\t\u0015\u0015=1N!f\u0001\n\u0003)9\u0006\u0003\u0006\u0006Z-\u0014\t\u0012)A\u0005\tcB!\"b\u0017l\u0005+\u0007I\u0011AC/\u0011))yf\u001bB\tB\u0003%1\u0011\u0017\u0005\b\u0007S\\G\u0011AC1\u0011%!ii\u001bb\u0001\n\u0003\u0019I\u000b\u0003\u0005\u0005\u0010.\u0004\u000b\u0011BBG\u0011%!yj[A\u0001\n\u0003)Y\u0007C\u0005\u0005*.\f\n\u0011\"\u0001\u0006t!IA\u0011Y6\u0012\u0002\u0013\u0005Qq\u000f\u0005\n\t\u000f\\\u0017\u0013!C\u0001\u000bwB\u0011\u0002\"4l\u0003\u0003%\t\u0005b4\t\u0013\u0011m7.!A\u0005\u0002\u0011M\u0005\"\u0003CoW\u0006\u0005I\u0011AC@\u0011%!Yo[A\u0001\n\u0003\"i\u000fC\u0005\u0005t.\f\t\u0011\"\u0001\u0006\u0004\"IA\u0011`6\u0002\u0002\u0013\u0005Sq\u0011\u0005\n\t\u007f\\\u0017\u0011!C!\u000b\u0003A\u0011\"b\u0001l\u0003\u0003%\t%\"\u0002\t\u0013\u0015\u001d1.!A\u0005B\u0015-u!CCH\u0013\u0006\u0005\t\u0012ACI\r%)i%SA\u0001\u0012\u0003)\u0019\n\u0003\u0005\u0004j\u0006\u001dA\u0011ACL\u0011))\u0019!a\u0002\u0002\u0002\u0013\u0015SQ\u0001\u0005\u000b\u000bW\t9!!A\u0005\u0002\u0016e\u0005BCCQ\u0003\u000f\t\n\u0011\"\u0001\u0006|!QQQGA\u0004\u0003\u0003%\t)b)\t\u0015\u0015-\u0016qAI\u0001\n\u0003)Y\b\u0003\u0006\u0006D\u0005\u001d\u0011\u0011!C\u0005\u000b\u000b21\"\",J!\u0003\r\nCa7\u00060\u001aAqQB%A\u00057<y\u0001C\u0006\u0005\b\u0006e!Q3A\u0005\u0002\u0011%\u0005b\u0003CF\u00033\u0011\t\u0012)A\u0005\u00073A1\u0002\"%\u0002\u001a\tU\r\u0011\"\u0001\u0005\u0014\"YAQSA\r\u0005#\u0005\u000b\u0011BBJ\u0011-)\t&!\u0007\u0003\u0016\u0004%\t!b\u0015\t\u0017\u0015U\u0013\u0011\u0004B\tB\u0003%1Q\u000f\u0005\f\t\u001b\u000bIB!f\u0001\n\u0003\u0019I\u000bC\u0006\u0005\u0010\u0006e!\u0011#Q\u0001\n\r5\u0005bCD\t\u00033\u0011)\u001a!C\u0001\u000f'A1b\"\t\u0002\u001a\tE\t\u0015!\u0003\b\u0016!YaQDA\r\u0005+\u0007I\u0011AC/\u0011-1y\"!\u0007\u0003\u0012\u0003\u0006Ia!-\t\u0011\r%\u0018\u0011\u0004C\u0001\u000fGA!\u0002b(\u0002\u001a\u0005\u0005I\u0011AD\u001a\u0011)!I+!\u0007\u0012\u0002\u0013\u0005A1\u0016\u0005\u000b\t\u0003\fI\"%A\u0005\u0002\u0011%\u0007B\u0003Cd\u00033\t\n\u0011\"\u0001\u0006t!Qa1AA\r#\u0003%\t\u0001b1\t\u0015\u0019U\u0015\u0011DI\u0001\n\u00039\t\u0005\u0003\u0006\u0007|\u0006e\u0011\u0013!C\u0001\u000bwB!\u0002\"4\u0002\u001a\u0005\u0005I\u0011\tCh\u0011)!Y.!\u0007\u0002\u0002\u0013\u0005A1\u0013\u0005\u000b\t;\fI\"!A\u0005\u0002\u001d\u0015\u0003B\u0003Cv\u00033\t\t\u0011\"\u0011\u0005n\"QA1_A\r\u0003\u0003%\ta\"\u0013\t\u0015\u0011e\u0018\u0011DA\u0001\n\u0003:i\u0005\u0003\u0006\u0005\u0000\u0006e\u0011\u0011!C!\u000b\u0003A!\"b\u0001\u0002\u001a\u0005\u0005I\u0011IC\u0003\u0011))9!!\u0007\u0002\u0002\u0013\u0005s\u0011K\u0004\f\u000f+J\u0015\u0011!E\u0001\u00057<9FB\u0006\b\u000e%\u000b\t\u0011#\u0001\u0003\\\u001ee\u0003\u0002CBu\u0003/\"\ta\"\u0019\t\u0015\u0015\r\u0011qKA\u0001\n\u000b*)\u0001\u0003\u0006\u0006,\u0005]\u0013\u0011!CA\u000fGB!\"\"\u000e\u0002X\u0005\u0005I\u0011QD9\u0011))\u0019%a\u0016\u0002\u0002\u0013%QQ\t\u0004\t\u000b;L\u0005Ia7\u0006`\"YAqQA2\u0005+\u0007I\u0011\u0001CE\u0011-!Y)a\u0019\u0003\u0012\u0003\u0006Ia!\u0007\t\u0017\u0011E\u00151\rBK\u0002\u0013\u0005A1\u0013\u0005\f\t+\u000b\u0019G!E!\u0002\u0013\u0019\u0019\nC\u0006\u0006R\u0005\r$Q3A\u0005\u0002\u0015M\u0003bCC+\u0003G\u0012\t\u0012)A\u0005\u0007kB1\"\"9\u0002d\tU\r\u0011\"\u0001\u0006d\"YQ1^A2\u0005#\u0005\u000b\u0011BCs\u0011!\u0019I/a\u0019\u0005\u0002\u00155\bB\u0003CP\u0003G\n\t\u0011\"\u0001\u0006z\"QA\u0011VA2#\u0003%\t\u0001b+\t\u0015\u0011\u0005\u00171MI\u0001\n\u0003!I\r\u0003\u0006\u0005H\u0006\r\u0014\u0013!C\u0001\u000bgB!Bb\u0001\u0002dE\u0005I\u0011\u0001D\u0003\u0011)!i-a\u0019\u0002\u0002\u0013\u0005Cq\u001a\u0005\u000b\t7\f\u0019'!A\u0005\u0002\u0011M\u0005B\u0003Co\u0003G\n\t\u0011\"\u0001\u0007\n!QA1^A2\u0003\u0003%\t\u0005\"<\t\u0015\u0011M\u00181MA\u0001\n\u00031i\u0001\u0003\u0006\u0005z\u0006\r\u0014\u0011!C!\r#A!\u0002b@\u0002d\u0005\u0005I\u0011IC\u0001\u0011))\u0019!a\u0019\u0002\u0002\u0013\u0005SQ\u0001\u0005\u000b\u000b\u000f\t\u0019'!A\u0005B\u0019UqaCD?\u0013\u0006\u0005\t\u0012\u0001Bn\u000f\u007f21\"\"8J\u0003\u0003E\tAa7\b\u0002\"A1\u0011^AK\t\u00039I\t\u0003\u0006\u0006\u0004\u0005U\u0015\u0011!C#\u000b\u000bA!\"b\u000b\u0002\u0016\u0006\u0005I\u0011QDF\u0011)))$!&\u0002\u0002\u0013\u0005uQ\u0013\u0005\u000b\u000b\u0007\n)*!A\u0005\n\u0015\u0015c\u0001CCZ\u0013\u0002\u0013Y.\".\t\u0017\u0015e\u0016\u0011\u0015BK\u0002\u0013\u0005Q1\u0018\u0005\f\u000b{\u000b\tK!E!\u0002\u0013)\u0019\u0007\u0003\u0005\u0004j\u0006\u0005F\u0011AC`\u0011)!y*!)\u0002\u0002\u0013\u0005QQ\u0019\u0005\u000b\tS\u000b\t+%A\u0005\u0002\u0015%\u0007B\u0003Cg\u0003C\u000b\t\u0011\"\u0011\u0005P\"QA1\\AQ\u0003\u0003%\t\u0001b%\t\u0015\u0011u\u0017\u0011UA\u0001\n\u0003)i\r\u0003\u0006\u0005l\u0006\u0005\u0016\u0011!C!\t[D!\u0002b=\u0002\"\u0006\u0005I\u0011ACi\u0011)!I0!)\u0002\u0002\u0013\u0005SQ\u001b\u0005\u000b\t\u007f\f\t+!A\u0005B\u0015\u0005\u0001BCC\u0002\u0003C\u000b\t\u0011\"\u0011\u0006\u0006!QQqAAQ\u0003\u0003%\t%\"7\b\u0017\u001d\u0005\u0016*!A\t\u0002\tmw1\u0015\u0004\f\u000bgK\u0015\u0011!E\u0001\u00057<)\u000b\u0003\u0005\u0004j\u0006\u0005G\u0011ADW\u0011))\u0019!!1\u0002\u0002\u0013\u0015SQ\u0001\u0005\u000b\u000bW\t\t-!A\u0005\u0002\u001e=\u0006BCC\u001b\u0003\u0003\f\t\u0011\"!\b4\"QQ1IAa\u0003\u0003%I!\"\u0012\u0007\u0011\u0019e\u0011\n\u0011Bn\r7A1\u0002b\"\u0002N\nU\r\u0011\"\u0001\u0005\n\"YA1RAg\u0005#\u0005\u000b\u0011BB\r\u0011-)\t&!4\u0003\u0016\u0004%\t!b\u0015\t\u0017\u0015U\u0013Q\u001aB\tB\u0003%1Q\u000f\u0005\f\t\u001b\u000biM!f\u0001\n\u0003\u0019I\u000bC\u0006\u0005\u0010\u00065'\u0011#Q\u0001\n\r5\u0005b\u0003D\u000f\u0003\u001b\u0014)\u001a!C\u0001\u000b;B1Bb\b\u0002N\nE\t\u0015!\u0003\u00042\"A1\u0011^Ag\t\u00031\t\u0003\u0003\u0006\u0005 \u00065\u0017\u0011!C\u0001\r[A!\u0002\"+\u0002NF\u0005I\u0011\u0001CV\u0011)!\t-!4\u0012\u0002\u0013\u0005Q1\u000f\u0005\u000b\t\u000f\fi-%A\u0005\u0002\u0011\r\u0007B\u0003D\u0002\u0003\u001b\f\n\u0011\"\u0001\u0006|!QAQZAg\u0003\u0003%\t\u0005b4\t\u0015\u0011m\u0017QZA\u0001\n\u0003!\u0019\n\u0003\u0006\u0005^\u00065\u0017\u0011!C\u0001\roA!\u0002b;\u0002N\u0006\u0005I\u0011\tCw\u0011)!\u00190!4\u0002\u0002\u0013\u0005a1\b\u0005\u000b\ts\fi-!A\u0005B\u0019}\u0002B\u0003C\u0000\u0003\u001b\f\t\u0011\"\u0011\u0006\u0002!QQ1AAg\u0003\u0003%\t%\"\u0002\t\u0015\u0015\u001d\u0011QZA\u0001\n\u00032\u0019eB\u0006\b:&\u000b\t\u0011#\u0001\u0003\\\u001emfa\u0003D\r\u0013\u0006\u0005\t\u0012\u0001Bn\u000f{C\u0001b!;\u0002\u0000\u0012\u0005q\u0011\u0019\u0005\u000b\u000b\u0007\ty0!A\u0005F\u0015\u0015\u0001BCC\u0016\u0003\u007f\f\t\u0011\"!\bD\"QQQGA\u0000\u0003\u0003%\ti\"4\t\u0015\u0015\r\u0013q`A\u0001\n\u0013))E\u0002\u0005\u0007V&\u0003%1\u001cDl\u0011-1YEa\u0003\u0003\u0016\u0004%\t\u0001b%\t\u0017\u00195#1\u0002B\tB\u0003%11\u0013\u0005\f\r\u001f\u0012YA!f\u0001\n\u0003!\u0019\nC\u0006\u0007R\t-!\u0011#Q\u0001\n\rM\u0005b\u0003D*\u0005\u0017\u0011)\u001a!C\u0001\t'C1B\"\u0016\u0003\f\tE\t\u0015!\u0003\u0004\u0014\"Ya\u0011\u001cB\u0006\u0005+\u0007I\u0011ABU\u0011-1YNa\u0003\u0003\u0012\u0003\u0006Ia!$\t\u0017\u0019]#1\u0002BK\u0002\u0013\u0005a\u0011\f\u0005\f\r[\u0012YA!E!\u0002\u00131Y\u0006C\u0006\u0006R\t-!Q3A\u0005\u0002\u0015M\u0003bCC+\u0005\u0017\u0011\t\u0012)A\u0005\u0007kB\u0001b!;\u0003\f\u0011\u0005aQ\u001c\u0005\u000b\t?\u0013Y!!A\u0005\u0002\u00195\bB\u0003CU\u0005\u0017\t\n\u0011\"\u0001\u0005J\"QA\u0011\u0019B\u0006#\u0003%\t\u0001\"3\t\u0015\u0011\u001d'1BI\u0001\n\u0003!I\r\u0003\u0006\u0007\u0004\t-\u0011\u0013!C\u0001\t\u0007D!B\"&\u0003\fE\u0005I\u0011\u0001DI\u0011)1YPa\u0003\u0012\u0002\u0013\u0005Q1\u000f\u0005\u000b\t\u001b\u0014Y!!A\u0005B\u0011=\u0007B\u0003Cn\u0005\u0017\t\t\u0011\"\u0001\u0005\u0014\"QAQ\u001cB\u0006\u0003\u0003%\tA\"@\t\u0015\u0011-(1BA\u0001\n\u0003\"i\u000f\u0003\u0006\u0005t\n-\u0011\u0011!C\u0001\u000f\u0003A!\u0002\"?\u0003\f\u0005\u0005I\u0011ID\u0003\u0011)!yPa\u0003\u0002\u0002\u0013\u0005S\u0011\u0001\u0005\u000b\u000b\u0007\u0011Y!!A\u0005B\u0015\u0015\u0001BCC\u0004\u0005\u0017\t\t\u0011\"\u0011\b\n\u001dYqQ[%\u0002\u0002#\u0005!1\\Dl\r-1).SA\u0001\u0012\u0003\u0011Yn\"7\t\u0011\r%(\u0011\nC\u0001\u000f;D!\"b\u0001\u0003J\u0005\u0005IQIC\u0003\u0011))YC!\u0013\u0002\u0002\u0013\u0005uq\u001c\u0005\u000b\u000bk\u0011I%!A\u0005\u0002\u001e5\bBCC\"\u0005\u0013\n\t\u0011\"\u0003\u0006F\u0019Aa1V%A\u000574i\u000bC\u0006\u0007L\tU#Q3A\u0005\u0002\u0011M\u0005b\u0003D'\u0005+\u0012\t\u0012)A\u0005\u0007'C1Bb\u0014\u0003V\tU\r\u0011\"\u0001\u0005\u0014\"Ya\u0011\u000bB+\u0005#\u0005\u000b\u0011BBJ\u0011-1\u0019F!\u0016\u0003\u0016\u0004%\t\u0001b%\t\u0017\u0019U#Q\u000bB\tB\u0003%11\u0013\u0005\f\u000b#\u0012)F!f\u0001\n\u0003)\u0019\u0006C\u0006\u0006V\tU#\u0011#Q\u0001\n\rU\u0004\u0002CBu\u0005+\"\tAb,\t\u0015\u0011}%QKA\u0001\n\u00031Y\f\u0003\u0006\u0005*\nU\u0013\u0013!C\u0001\t\u0013D!\u0002\"1\u0003VE\u0005I\u0011\u0001Ce\u0011)!9M!\u0016\u0012\u0002\u0013\u0005A\u0011\u001a\u0005\u000b\r\u0007\u0011)&%A\u0005\u0002\u0015M\u0004B\u0003Cg\u0005+\n\t\u0011\"\u0011\u0005P\"QA1\u001cB+\u0003\u0003%\t\u0001b%\t\u0015\u0011u'QKA\u0001\n\u00031)\r\u0003\u0006\u0005l\nU\u0013\u0011!C!\t[D!\u0002b=\u0003V\u0005\u0005I\u0011\u0001De\u0011)!IP!\u0016\u0002\u0002\u0013\u0005cQ\u001a\u0005\u000b\t\u007f\u0014)&!A\u0005B\u0015\u0005\u0001BCC\u0002\u0005+\n\t\u0011\"\u0011\u0006\u0006!QQq\u0001B+\u0003\u0003%\tE\"5\b\u0017\u001dU\u0018*!A\t\u0002\tmwq\u001f\u0004\f\rWK\u0015\u0011!E\u0001\u00057<I\u0010\u0003\u0005\u0004j\n\u001dE\u0011AD\u007f\u0011))\u0019Aa\"\u0002\u0002\u0013\u0015SQ\u0001\u0005\u000b\u000bW\u00119)!A\u0005\u0002\u001e}\bBCC\u001b\u0005\u000f\u000b\t\u0011\"!\t\n!QQ1\tBD\u0003\u0003%I!\"\u0012\u0007\u0011\u0019\u001d\u0013\n\u0011Bn\r\u0013B1Bb\u0013\u0003\u0014\nU\r\u0011\"\u0001\u0005\u0014\"YaQ\nBJ\u0005#\u0005\u000b\u0011BBJ\u0011-1yEa%\u0003\u0016\u0004%\t\u0001b%\t\u0017\u0019E#1\u0013B\tB\u0003%11\u0013\u0005\f\r'\u0012\u0019J!f\u0001\n\u0003!\u0019\nC\u0006\u0007V\tM%\u0011#Q\u0001\n\rM\u0005b\u0003D,\u0005'\u0013)\u001a!C\u0001\r3B1B\"\u001c\u0003\u0014\nE\t\u0015!\u0003\u0007\\!Yaq\u000eBJ\u0005+\u0007I\u0011\u0001D9\u0011-1)Ha%\u0003\u0012\u0003\u0006IAb\u001d\t\u0011\r%(1\u0013C\u0001\roB!\u0002b(\u0003\u0014\u0006\u0005I\u0011\u0001DC\u0011)!IKa%\u0012\u0002\u0013\u0005A\u0011\u001a\u0005\u000b\t\u0003\u0014\u0019*%A\u0005\u0002\u0011%\u0007B\u0003Cd\u0005'\u000b\n\u0011\"\u0001\u0005J\"Qa1\u0001BJ#\u0003%\tA\"%\t\u0015\u0019U%1SI\u0001\n\u000319\n\u0003\u0006\u0005N\nM\u0015\u0011!C!\t\u001fD!\u0002b7\u0003\u0014\u0006\u0005I\u0011\u0001CJ\u0011)!iNa%\u0002\u0002\u0013\u0005a1\u0014\u0005\u000b\tW\u0014\u0019*!A\u0005B\u00115\bB\u0003Cz\u0005'\u000b\t\u0011\"\u0001\u0007 \"QA\u0011 BJ\u0003\u0003%\tEb)\t\u0015\u0011}(1SA\u0001\n\u0003*\t\u0001\u0003\u0006\u0006\u0004\tM\u0015\u0011!C!\u000b\u000bA!\"b\u0002\u0003\u0014\u0006\u0005I\u0011\tDT\u000f-A\t\"SA\u0001\u0012\u0003\u0011Y\u000ec\u0005\u0007\u0017\u0019\u001d\u0013*!A\t\u0002\tm\u0007R\u0003\u0005\t\u0007S\u0014Y\r\"\u0001\t\u001e!QQ1\u0001Bf\u0003\u0003%)%\"\u0002\t\u0015\u0015-\"1ZA\u0001\n\u0003Cy\u0002\u0003\u0006\u00066\t-\u0017\u0011!CA\u0011WA!\"b\u0011\u0003L\u0006\u0005I\u0011BC#\u0011%A9$SI\u0001\n\u0003AIDA\u000eTQV4g\r\\3CY>\u001c7NR3uG\",'/\u0013;fe\u0006$xN\u001d\u0006\u0005\u0005;\u0014y.A\u0004ti>\u0014\u0018mZ3\u000b\t\t\u0005(1]\u0001\u0006gB\f'o\u001b\u0006\u0005\u0005K\u00149/\u0001\u0004ba\u0006\u001c\u0007.\u001a\u0006\u0003\u0005S\f1a\u001c:h'%\u0001!Q\u001eB}\u0007c\u0019\t\u0005\u0005\u0003\u0003p\nUXB\u0001By\u0015\t\u0011\u00190A\u0003tG\u0006d\u0017-\u0003\u0003\u0003x\nE(AB!osJ+g\r\u0005\u0004\u0003|\u000e511\u0003\b\u0005\u0005{\u001cIA\u0004\u0003\u0003\u0000\u000e\u001dQBAB\u0001\u0015\u0011\u0019\u0019a!\u0002\u0002\rq\u0012xn\u001c;?\u0007\u0001I!Aa=\n\t\r-!\u0011_\u0001\ba\u0006\u001c7.Y4f\u0013\u0011\u0019ya!\u0005\u0003\u0011%#XM]1u_JTAaa\u0003\u0003rBA!q^B\u000b\u00073\u0019\t#\u0003\u0003\u0004\u0018\tE(A\u0002+va2,'\u0007\u0005\u0003\u0004\u001c\ruQB\u0001Bn\u0013\u0011\u0019yBa7\u0003\u000f\tcwnY6JIB!11EB\u0017\u001b\t\u0019)C\u0003\u0003\u0004(\r%\u0012AA5p\u0015\t\u0019Y#\u0001\u0003kCZ\f\u0017\u0002BB\u0018\u0007K\u00111\"\u00138qkR\u001cFO]3b[B!11GB\u001f\u001b\t\u0019)D\u0003\u0003\u00048\re\u0012aB:ik\u001a4G.\u001a\u0006\u0005\u0007w\u0011y.A\u0004oKR<xN]6\n\t\r}2Q\u0007\u0002\u0014\t><h\u000e\\8bI\u001aKG.Z'b]\u0006<WM\u001d\t\u0005\u0007\u0007\u001aI%\u0004\u0002\u0004F)!1q\tBp\u0003!Ig\u000e^3s]\u0006d\u0017\u0002BB&\u0007\u000b\u0012q\u0001T8hO&tw-A\u0004d_:$X\r\u001f;\u0011\t\rE31K\u0007\u0003\u0005?LAa!\u0016\u0003`\nYA+Y:l\u0007>tG/\u001a=u\u00035\u0019\b.\u001e4gY\u0016\u001cE.[3oiB!11GB.\u0013\u0011\u0019if!\u000e\u0003!\tcwnY6Ti>\u0014Xm\u00117jK:$\u0018\u0001\u00042m_\u000e\\W*\u00198bO\u0016\u0014\b\u0003BB\u000e\u0007GJAa!\u001a\u0003\\\na!\t\\8dW6\u000bg.Y4fe\u0006\u0001R.\u00199PkR\u0004X\u000f\u001e+sC\u000e\\WM\u001d\t\u0005\u0007#\u001aY'\u0003\u0003\u0004n\t}'\u0001E'ba>+H\u000f];u)J\f7m[3s\u0003=\u0011Gn\\2lg\nK\u0018\t\u001a3sKN\u001c\bC\u0002B~\u0007\u001b\u0019\u0019\b\u0005\u0005\u0003p\u000eU1QOB>!\u0011\u0019Yba\u001e\n\t\re$1\u001c\u0002\u000f\u00052|7m['b]\u0006<WM]%e!\u0019\u0019iha!\u0004\b6\u00111q\u0010\u0006\u0005\u0007\u0003\u0013\t0\u0001\u0006d_2dWm\u0019;j_:LAa!\"\u0004\u0000\t\u00191+Z9\u0011\u0015\t=8\u0011RB\r\u0007\u001b\u001b\u0019*\u0003\u0003\u0004\f\nE(A\u0002+va2,7\u0007\u0005\u0003\u0003p\u000e=\u0015\u0002BBI\u0005c\u0014A\u0001T8oOB!!q^BK\u0013\u0011\u00199J!=\u0003\u0007%sG/A\u0007tiJ,\u0017-\\,sCB\u0004XM\u001d\t\u000b\u0005_\u001cij!\u0007\u0004\"\r\u0005\u0012\u0002BBP\u0005c\u0014\u0011BR;oGRLwN\u001c\u001a\u0002!5\f\u0007PQ=uKNLeN\u00127jO\"$\u0018aD7bqJ+\u0017o]%o\r2Lw\r\u001b;\u000275\f\u0007P\u00117pG.\u001c\u0018J\u001c$mS\u001eDG\u000fU3s\u0003\u0012$'/Z:t\u0003Yi\u0017\r\u001f*fcNK'0Z*ik\u001a4G.\u001a+p\u001b\u0016lWCABG\u0003]i\u0017\r\u001f*fcNK'0Z*ik\u001a4G.\u001a+p\u001b\u0016l\u0007%A\u000bnCb\fE\u000f^3naR\u001cxJ\u001c(fiRLxjT'\u0002\u001b\u0011,G/Z2u\u0007>\u0014(/\u001e9u!\u0011\u0011yoa-\n\t\rU&\u0011\u001f\u0002\b\u0005>|G.Z1o\u0003m!W\r^3di\u000e{'O];qiV\u001bX-\u0012=ue\u0006lU-\\8ss\u0006y1\r[3dWN,X.\u00128bE2,G-A\tdQ\u0016\u001c7n];n\u00032<wN]5uQ6\u0004Baa0\u0004H:!1\u0011YBb!\u0011\u0011yP!=\n\t\r\u0015'\u0011_\u0001\u0007!J,G-\u001a4\n\t\r%71\u001a\u0002\u0007'R\u0014\u0018N\\4\u000b\t\r\u0015'\u0011_\u0001E_J<G%\u00199bG\",Ge\u001d9be.$3\u000f^8sC\u001e,Ge\u00155vM\u001adWM\u00117pG.4U\r^2iKJLE/\u001a:bi>\u0014H\u0005J:ik\u001a4G.Z'fiJL7m\u001d\t\u0005\u0007#\u001c).\u0004\u0002\u0004T*!1q\u0007Bp\u0013\u0011\u00199na5\u00035MCWO\u001a4mKJ+\u0017\rZ'fiJL7m\u001d*fa>\u0014H/\u001a:\u0002\u0019\u0011|')\u0019;dQ\u001a+Go\u00195\u0002w=\u0014x\rJ1qC\u000eDW\rJ:qCJ\\Ge\u001d;pe\u0006<W\rJ*ik\u001a4G.\u001a\"m_\u000e\\g)\u001a;dQ\u0016\u0014\u0018\n^3sCR|'\u000f\n\u0013dY>\u001c7\u000e\u0005\u0003\u0004`\u000e\u0015XBABq\u0015\u0011\u0019\u0019Oa8\u0002\tU$\u0018\u000e\\\u0005\u0005\u0007O\u001c\tOA\u0003DY>\u001c7.\u0001\u0004=S:LGO\u0010\u000b'\u0007[\u001cyo!=\u0004t\u000eU8q_B}\u0007w\u001cipa@\u0005\u0002\u0011\rAQ\u0001C\u0004\t\u0013!Y\u0001\"\u0004\u0005\u0012\u0011M\u0001cAB\u000e\u0001!91Q\n\u000bA\u0002\r=\u0003bBB,)\u0001\u00071\u0011\f\u0005\b\u0007?\"\u0002\u0019AB1\u0011\u001d\u00199\u0007\u0006a\u0001\u0007SBqaa\u001c\u0015\u0001\u0004\u0019\t\bC\u0004\u0004\u001aR\u0001\raa'\t\u000f\r\u0005F\u00031\u0001\u0004\u000e\"911\u0015\u000bA\u0002\rM\u0005bBBS)\u0001\u000711\u0013\u0005\b\u0007O#\u0002\u0019ABG\u0011\u001d\u0019i\u000b\u0006a\u0001\u0007'Cqaa,\u0015\u0001\u0004\u0019\t\fC\u0004\u00048R\u0001\ra!-\t\u000f\reF\u00031\u0001\u00042\"911\u0018\u000bA\u0002\ru\u0006b\u0002C\b)\u0001\u00071qZ\u0001\u000fg\",hM\u001a7f\u001b\u0016$(/[2t\u0011\u001d\u0019I\u000e\u0006a\u0001\u0007cC\u0011\u0002\"\u0006\u0015!\u0003\u0005\ra!8\u0002\u000b\rdwnY6\u0002/Q\f'oZ3u%\u0016lw\u000e^3SKF,Xm\u001d;TSj,\u0017\u0001\u0007;be\u001e,GOU3n_R,'+Z9vKN$8+\u001b>fA\u0005\u0001b.^7CY>\u001c7n\u001d+p\r\u0016$8\r[\u0001\u0013]Vl'\t\\8dWN\u0004&o\\2fgN,G-A\u0006ti\u0006\u0014H\u000fV5nK:\u001b\u0018a\u00045pgRdunY1m\u00052|7m[:\u0011\r\u0011\u0015B1\u0006C\u0018\u001b\t!9C\u0003\u0003\u0005*\r}\u0014aB7vi\u0006\u0014G.Z\u0005\u0005\t[!9CA\u0007MS:\\W\r\u001a%bg\"\u001cV\r\u001e\t\t\u0005_\u001c)b!\u0007\u0004\u0014\u0006itN]4%CB\f7\r[3%gB\f'o\u001b\u0013ti>\u0014\u0018mZ3%'\",hM\u001a7f\u00052|7m\u001b$fi\u000eDWM]%uKJ\fGo\u001c:%II,7/\u001e7ugB1AQ\u0007C\u001f\t\u0003j!\u0001b\u000e\u000b\t\u0011eB1H\u0001\u000bG>t7-\u001e:sK:$(\u0002BBr\u0007SIA\u0001b\u0010\u00058\t\u0019B*\u001b8lK\u0012\u0014En\\2lS:<\u0017+^3vKB!A1IA\f\u001d\r\u0019Y\u0002S\u0001\u001c'\",hM\u001a7f\u00052|7m\u001b$fi\u000eDWM]%uKJ\fGo\u001c:\u0011\u0007\rm\u0011jE\u0002J\u0005[$\"\u0001b\u0012\u0002'%\u001ch*\u001a;us>{Uj\u00148TQV4g\r\\3\u0016\u0005\u0011E\u0003\u0003\u0002C*\t3j!\u0001\"\u0016\u000b\t\u0011]CqG\u0001\u0007CR|W.[2\n\t\u0011mCQ\u000b\u0002\u000e\u0003R|W.[2C_>dW-\u00198\u0002)%\u001ch*\u001a;us>{Uj\u00148TQV4g\r\\3!\u0003m\u0011Xm]3u\u001d\u0016$H/_(P\u001b\u001ac\u0017mZ%g!>\u001c8/\u001b2mKR!A1\rC5!\u0011\u0011y\u000f\"\u001a\n\t\u0011\u001d$\u0011\u001f\u0002\u0005+:LG\u000fC\u0004\u0005l5\u0003\ra!$\u0002)\u0019\u0014X-Z'f[>\u0014\u0018\u0010T8xKJ\u0014u.\u001e8e\u0003\u0019jWM]4f\u0007>tG/\u001b8v_V\u001c8\u000b[;gM2,'\t\\8dW&#7/\u00134OK\u0016$W\r\u001a\u000b\u0007\tc*i!\"\u0005\u0011\r\ru41\u0011C:!\r!)hT\u0007\u0002\u0013\nqa)\u001a;dQ\ncwnY6J]\u001a|7cB(\u0003n\u0012mD\u0011\u0011\t\u0005\u0005_$i(\u0003\u0003\u0005\u0000\tE(a\u0002)s_\u0012,8\r\u001e\t\u0005\u0005w$\u0019)\u0003\u0003\u0005\u0006\u000eE!\u0001D*fe&\fG.\u001b>bE2,\u0017a\u00022m_\u000e\\\u0017\nZ\u000b\u0003\u00073\t\u0001B\u00197pG.LE\rI\u0001\u0005g&TX-A\u0003tSj,\u0007%\u0001\u0005nCBLe\u000eZ3y+\t\u0019\u0019*A\u0005nCBLe\u000eZ3yAQAA1\u000fCM\t7#i\nC\u0004\u0005\bZ\u0003\ra!\u0007\t\u000f\u00115e\u000b1\u0001\u0004\u000e\"9A\u0011\u0013,A\u0002\rM\u0015\u0001B2paf$\u0002\u0002b\u001d\u0005$\u0012\u0015Fq\u0015\u0005\n\t\u000f;\u0006\u0013!a\u0001\u00073A\u0011\u0002\"$X!\u0003\u0005\ra!$\t\u0013\u0011Eu\u000b%AA\u0002\rM\u0015AD2paf$C-\u001a4bk2$H%M\u000b\u0003\t[SCa!\u0007\u00050.\u0012A\u0011\u0017\t\u0005\tg#i,\u0004\u0002\u00056*!Aq\u0017C]\u0003%)hn\u00195fG.,GM\u0003\u0003\u0005<\nE\u0018AC1o]>$\u0018\r^5p]&!Aq\u0018C[\u0005E)hn\u00195fG.,GMV1sS\u0006t7-Z\u0001\u000fG>\u0004\u0018\u0010\n3fM\u0006,H\u000e\u001e\u00133+\t!)M\u000b\u0003\u0004\u000e\u0012=\u0016AD2paf$C-\u001a4bk2$HeM\u000b\u0003\t\u0017TCaa%\u00050\u0006i\u0001O]8ek\u000e$\bK]3gSb,\"\u0001\"5\u0011\t\u0011MG\u0011\\\u0007\u0003\t+TA\u0001b6\u0004*\u0005!A.\u00198h\u0013\u0011\u0019I\r\"6\u0002\u0019A\u0014x\u000eZ;di\u0006\u0013\u0018\u000e^=\u0002\u001dA\u0014x\u000eZ;di\u0016cW-\\3oiR!A\u0011\u001dCt!\u0011\u0011y\u000fb9\n\t\u0011\u0015(\u0011\u001f\u0002\u0004\u0003:L\b\"\u0003Cu;\u0006\u0005\t\u0019ABJ\u0003\rAH%M\u0001\u0010aJ|G-^2u\u0013R,'/\u0019;peV\u0011Aq\u001e\t\u0007\u0007{\"\t\u0010\"9\n\t\r=1qP\u0001\tG\u0006tW)];bYR!1\u0011\u0017C|\u0011%!IoXA\u0001\u0002\u0004!\t/\u0001\nqe>$Wo\u0019;FY\u0016lWM\u001c;OC6,G\u0003\u0002Ci\t{D\u0011\u0002\";a\u0003\u0003\u0005\raa%\u0002\u0011!\f7\u000f[\"pI\u0016$\"aa%\u0002\u0011Q|7\u000b\u001e:j]\u001e$\"\u0001\"5\u0002\r\u0015\fX/\u00197t)\u0011\u0019\t,b\u0003\t\u0013\u0011%8-!AA\u0002\u0011\u0005\bbBC\b\u001d\u0002\u0007A\u0011O\u0001\u0007E2|7m[:\t\u000f\reg\n1\u0001\u00042\u0006qa)\u001a;dQ\ncwnY6J]\u001a|\u0007c\u0001C;KN)Q-\"\u0007\u0006&AaQ1DC\u0011\u00073\u0019iia%\u0005t5\u0011QQ\u0004\u0006\u0005\u000b?\u0011\t0A\u0004sk:$\u0018.\\3\n\t\u0015\rRQ\u0004\u0002\u0012\u0003\n\u001cHO]1di\u001a+hn\u0019;j_:\u001c\u0004\u0003BB\u0012\u000bOIA\u0001\"\"\u0004&Q\u0011QQC\u0001\u0006CB\u0004H.\u001f\u000b\t\tg*y#\"\r\u00064!9Aq\u00115A\u0002\re\u0001b\u0002CGQ\u0002\u00071Q\u0012\u0005\b\t#C\u0007\u0019ABJ\u0003\u001d)h.\u00199qYf$B!\"\u000f\u0006@A1!q^C\u001e\u0007\u000fKA!\"\u0010\u0003r\n1q\n\u001d;j_:D\u0011\"\"\u0011j\u0003\u0003\u0005\r\u0001b\u001d\u0002\u0007a$\u0003'\u0001\u0007xe&$XMU3qY\u0006\u001cW\r\u0006\u0002\u0006HA!A1[C%\u0013\u0011)Y\u0005\"6\u0003\r=\u0013'.Z2u\u000511U\r^2i%\u0016\fX/Z:u'\u001dY'Q\u001eC>\t\u0003\u000bq!\u00193ee\u0016\u001c8/\u0006\u0002\u0004v\u0005A\u0011\r\u001a3sKN\u001c\b%\u0006\u0002\u0005r\u00059!\r\\8dWN\u0004\u0013A\u00044pe6+'oZ3e\u001b\u0016$\u0018m]\u000b\u0003\u0007c\u000bqBZ8s\u001b\u0016\u0014x-\u001a3NKR\f7\u000f\t\u000b\t\u000bG*)'b\u001a\u0006jA\u0019AQO6\t\u000f\u0015E#\u000f1\u0001\u0004v!9Qq\u0002:A\u0002\u0011E\u0004\"CC.eB\u0005\t\u0019ABY)!)\u0019'\"\u001c\u0006p\u0015E\u0004\"CC)kB\u0005\t\u0019AB;\u0011%)y!\u001eI\u0001\u0002\u0004!\t\bC\u0005\u0006\\U\u0004\n\u00111\u0001\u00042V\u0011QQ\u000f\u0016\u0005\u0007k\"y+\u0006\u0002\u0006z)\"A\u0011\u000fCX+\t)iH\u000b\u0003\u00042\u0012=F\u0003\u0002Cq\u000b\u0003C\u0011\u0002\";|\u0003\u0003\u0005\raa%\u0015\t\rEVQ\u0011\u0005\n\tSl\u0018\u0011!a\u0001\tC$B\u0001\"5\u0006\n\"IA\u0011\u001e@\u0002\u0002\u0003\u000711\u0013\u000b\u0005\u0007c+i\t\u0003\u0006\u0005j\u0006\r\u0011\u0011!a\u0001\tC\fABR3uG\"\u0014V-];fgR\u0004B\u0001\"\u001e\u0002\bM1\u0011qACK\u000bK\u0001B\"b\u0007\u0006\"\rUD\u0011OBY\u000bG\"\"!\"%\u0015\u0011\u0015\rT1TCO\u000b?C\u0001\"\"\u0015\u0002\u000e\u0001\u00071Q\u000f\u0005\t\u000b\u001f\ti\u00011\u0001\u0005r!QQ1LA\u0007!\u0003\u0005\ra!-\u0002\u001f\u0005\u0004\b\u000f\\=%I\u00164\u0017-\u001e7uIM\"B!\"*\u0006*B1!q^C\u001e\u000bO\u0003\"Ba<\u0004\n\u000eUD\u0011OBY\u0011))\t%!\u0005\u0002\u0002\u0003\u0007Q1M\u0001\u001cI1,7o]5oSR$sM]3bi\u0016\u0014H\u0005Z3gCVdG\u000fJ\u001a\u0003\u0017\u0019+Go\u00195SKN,H\u000e^\n\u0005\u0003/\u0011i/\u000b\t\u0002\u0018\u0005\u0005\u00161MAg\u0005'\u0013)Fa\u0003\u0002\u001a\t9B)\u001a4fe\u001a+Go\u00195SKF,Xm\u001d;SKN,H\u000e^\n\u000b\u0003C\u0013i/b.\u0005|\u0011\u0005\u0005\u0003\u0002C;\u0003/\tABZ3uG\"\u0014V-];fgR,\"!b\u0019\u0002\u001b\u0019,Go\u00195SKF,Xm\u001d;!)\u0011)\t-b1\u0011\t\u0011U\u0014\u0011\u0015\u0005\t\u000bs\u000b9\u000b1\u0001\u0006dQ!Q\u0011YCd\u0011))I,!+\u0011\u0002\u0003\u0007Q1M\u000b\u0003\u000b\u0017TC!b\u0019\u00050R!A\u0011]Ch\u0011)!I/!-\u0002\u0002\u0003\u000711\u0013\u000b\u0005\u0007c+\u0019\u000e\u0003\u0006\u0005j\u0006U\u0016\u0011!a\u0001\tC$B\u0001\"5\u0006X\"QA\u0011^A\\\u0003\u0003\u0005\raa%\u0015\t\rEV1\u001c\u0005\u000b\tS\fi,!AA\u0002\u0011\u0005(A\u0005$bS2,(/\u001a$fi\u000eD'+Z:vYR\u001c\"\"a\u0019\u0003n\u0016]F1\u0010CA\u0003\u0005)WCACs!\u0011\u0011Y0b:\n\t\u0015%8\u0011\u0003\u0002\n)\"\u0014xn^1cY\u0016\f!!\u001a\u0011\u0015\u0015\u0015=X\u0011_Cz\u000bk,9\u0010\u0005\u0003\u0005v\u0005\r\u0004\u0002\u0003CD\u0003k\u0002\ra!\u0007\t\u0011\u0011E\u0015Q\u000fa\u0001\u0007'C\u0001\"\"\u0015\u0002v\u0001\u00071Q\u000f\u0005\t\u000bC\f)\b1\u0001\u0006fRQQq^C~\u000b{,yP\"\u0001\t\u0015\u0011\u001d\u0015q\u000fI\u0001\u0002\u0004\u0019I\u0002\u0003\u0006\u0005\u0012\u0006]\u0004\u0013!a\u0001\u0007'C!\"\"\u0015\u0002xA\u0005\t\u0019AB;\u0011))\t/a\u001e\u0011\u0002\u0003\u0007QQ]\u0001\u000fG>\u0004\u0018\u0010\n3fM\u0006,H\u000e\u001e\u00135+\t19A\u000b\u0003\u0006f\u0012=F\u0003\u0002Cq\r\u0017A!\u0002\";\u0002\u0006\u0006\u0005\t\u0019ABJ)\u0011\u0019\tLb\u0004\t\u0015\u0011%\u0018\u0011RA\u0001\u0002\u0004!\t\u000f\u0006\u0003\u0005R\u001aM\u0001B\u0003Cu\u0003\u0017\u000b\t\u00111\u0001\u0004\u0014R!1\u0011\u0017D\f\u0011)!I/!%\u0002\u0002\u0003\u0007A\u0011\u001d\u0002\"\r\u0006dGNY1dW>s\u0007+^:i\u001b\u0016\u0014x-\u001a3GC&dWO]3SKN,H\u000e^\n\u000b\u0003\u001b\u0014i/b.\u0005|\u0011\u0005\u0015\u0001E5t\u001d\u0016$xo\u001c:l%\u0016\fHi\u001c8f\u0003EI7OT3uo>\u00148NU3r\t>tW\r\t\u000b\u000b\rG1)Cb\n\u0007*\u0019-\u0002\u0003\u0002C;\u0003\u001bD\u0001\u0002b\"\u0002`\u0002\u00071\u0011\u0004\u0005\t\u000b#\ny\u000e1\u0001\u0004v!AAQRAp\u0001\u0004\u0019i\t\u0003\u0005\u0007\u001e\u0005}\u0007\u0019ABY))1\u0019Cb\f\u00072\u0019MbQ\u0007\u0005\u000b\t\u000f\u000b\t\u000f%AA\u0002\re\u0001BCC)\u0003C\u0004\n\u00111\u0001\u0004v!QAQRAq!\u0003\u0005\ra!$\t\u0015\u0019u\u0011\u0011\u001dI\u0001\u0002\u0004\u0019\t\f\u0006\u0003\u0005b\u001ae\u0002B\u0003Cu\u0003_\f\t\u00111\u0001\u0004\u0014R!1\u0011\u0017D\u001f\u0011)!I/a=\u0002\u0002\u0003\u0007A\u0011\u001d\u000b\u0005\t#4\t\u0005\u0003\u0006\u0005j\u0006U\u0018\u0011!a\u0001\u0007'#Ba!-\u0007F!QA\u0011^A~\u0003\u0003\u0005\r\u0001\"9\u0003=A+8\u000f['fe\u001e,G\rT8dC2lU\r^1GKR\u001c\u0007NU3tk2$8C\u0003BJ\u0005[,9\fb\u001f\u0005\u0002\u0006I1\u000f[;gM2,\u0017\nZ\u0001\u000bg\",hM\u001a7f\u0013\u0012\u0004\u0013AD:ik\u001a4G.Z'fe\u001e,\u0017\nZ\u0001\u0010g\",hM\u001a7f\u001b\u0016\u0014x-Z%eA\u0005A!/\u001a3vG\u0016LE-A\u0005sK\u0012,8-Z%eA\u00059!-\u001b;nCB\u001cXC\u0001D.!\u0019\u0011yO\"\u0018\u0007b%!aq\fBy\u0005\u0015\t%O]1z!\u00111\u0019G\"\u001b\u000e\u0005\u0019\u0015$\u0002\u0002D4\u0005O\fQB]8be&twMY5u[\u0006\u0004\u0018\u0002\u0002D6\rK\u0012QBU8be&twMQ5u[\u0006\u0004\u0018\u0001\u00032ji6\f\u0007o\u001d\u0011\u0002\u00131|7-\u00197ESJ\u001cXC\u0001D:!\u0019\u0011yO\"\u0018\u0004>\u0006QAn\\2bY\u0012K'o\u001d\u0011\u0015\u0019\u0019ed1\u0010D?\r\u007f2\tIb!\u0011\t\u0011U$1\u0013\u0005\t\r\u0017\u0012I\u000b1\u0001\u0004\u0014\"Aaq\nBU\u0001\u0004\u0019\u0019\n\u0003\u0005\u0007T\t%\u0006\u0019ABJ\u0011!19F!+A\u0002\u0019m\u0003\u0002\u0003D8\u0005S\u0003\rAb\u001d\u0015\u0019\u0019edq\u0011DE\r\u00173iIb$\t\u0015\u0019-#1\u0016I\u0001\u0002\u0004\u0019\u0019\n\u0003\u0006\u0007P\t-\u0006\u0013!a\u0001\u0007'C!Bb\u0015\u0003,B\u0005\t\u0019ABJ\u0011)19Fa+\u0011\u0002\u0003\u0007a1\f\u0005\u000b\r_\u0012Y\u000b%AA\u0002\u0019MTC\u0001DJU\u00111Y\u0006b,\u0002\u001d\r|\u0007/\u001f\u0013eK\u001a\fW\u000f\u001c;%kU\u0011a\u0011\u0014\u0016\u0005\rg\"y\u000b\u0006\u0003\u0005b\u001au\u0005B\u0003Cu\u0005w\u000b\t\u00111\u0001\u0004\u0014R!1\u0011\u0017DQ\u0011)!IOa0\u0002\u0002\u0003\u0007A\u0011\u001d\u000b\u0005\t#4)\u000b\u0003\u0006\u0005j\n\u0005\u0017\u0011!a\u0001\u0007'#Ba!-\u0007*\"QA\u0011\u001eBd\u0003\u0003\u0005\r\u0001\"9\u0003KA+8\u000f['fe\u001e,GMU3n_R,W*\u001a;b\r\u0006LG.\u001a3GKR\u001c\u0007NU3tk2$8C\u0003B+\u0005[,9\fb\u001f\u0005\u0002RQa\u0011\u0017DZ\rk39L\"/\u0011\t\u0011U$Q\u000b\u0005\t\r\u0017\u00129\u00071\u0001\u0004\u0014\"Aaq\nB4\u0001\u0004\u0019\u0019\n\u0003\u0005\u0007T\t\u001d\u0004\u0019ABJ\u0011!)\tFa\u001aA\u0002\rUDC\u0003DY\r{3yL\"1\u0007D\"Qa1\nB5!\u0003\u0005\raa%\t\u0015\u0019=#\u0011\u000eI\u0001\u0002\u0004\u0019\u0019\n\u0003\u0006\u0007T\t%\u0004\u0013!a\u0001\u0007'C!\"\"\u0015\u0003jA\u0005\t\u0019AB;)\u0011!\tOb2\t\u0015\u0011%(qOA\u0001\u0002\u0004\u0019\u0019\n\u0006\u0003\u00042\u001a-\u0007B\u0003Cu\u0005w\n\t\u00111\u0001\u0005bR!A\u0011\u001bDh\u0011)!IO! \u0002\u0002\u0003\u000711\u0013\u000b\u0005\u0007c3\u0019\u000e\u0003\u0006\u0005j\n\r\u0015\u0011!a\u0001\tC\u0014q\u0004U;tQ6+'oZ3e%\u0016lw\u000e^3NKR\fg)\u001a;dQJ+7/\u001e7u')\u0011YA!<\u00068\u0012mD\u0011Q\u0001\nE2|7m[*ju\u0016\f!B\u00197pG.\u001c\u0016N_3!)91yN\"9\u0007d\u001a\u0015hq\u001dDu\rW\u0004B\u0001\"\u001e\u0003\f!Aa1\nB\u0013\u0001\u0004\u0019\u0019\n\u0003\u0005\u0007P\t\u0015\u0002\u0019ABJ\u0011!1\u0019F!\nA\u0002\rM\u0005\u0002\u0003Dm\u0005K\u0001\ra!$\t\u0011\u0019]#Q\u0005a\u0001\r7B\u0001\"\"\u0015\u0003&\u0001\u00071Q\u000f\u000b\u000f\r?4yO\"=\u0007t\u001aUhq\u001fD}\u0011)1YEa\n\u0011\u0002\u0003\u000711\u0013\u0005\u000b\r\u001f\u00129\u0003%AA\u0002\rM\u0005B\u0003D*\u0005O\u0001\n\u00111\u0001\u0004\u0014\"Qa\u0011\u001cB\u0014!\u0003\u0005\ra!$\t\u0015\u0019]#q\u0005I\u0001\u0002\u00041Y\u0006\u0003\u0006\u0006R\t\u001d\u0002\u0013!a\u0001\u0007k\nabY8qs\u0012\"WMZ1vYR$c\u0007\u0006\u0003\u0005b\u001a}\bB\u0003Cu\u0005s\t\t\u00111\u0001\u0004\u0014R!1\u0011WD\u0002\u0011)!IO!\u0010\u0002\u0002\u0003\u0007A\u0011\u001d\u000b\u0005\t#<9\u0001\u0003\u0006\u0005j\n}\u0012\u0011!a\u0001\u0007'#Ba!-\b\f!QA\u0011\u001eB#\u0003\u0003\u0005\r\u0001\"9\u0003%M+8mY3tg\u001a+Go\u00195SKN,H\u000e^\n\u000b\u00033\u0011i/b.\u0005|\u0011\u0005\u0015a\u00012vMV\u0011qQ\u0003\t\u0005\u000f/9i\"\u0004\u0002\b\u001a)!q1DB\u001d\u0003\u0019\u0011WO\u001a4fe&!qqDD\r\u00055i\u0015M\\1hK\u0012\u0014UO\u001a4fe\u0006!!-\u001e4!)99)cb\n\b*\u001d-rQFD\u0018\u000fc\u0001B\u0001\"\u001e\u0002\u001a!AAqQA\u001a\u0001\u0004\u0019I\u0002\u0003\u0005\u0005\u0012\u0006M\u0002\u0019ABJ\u0011!)\t&a\rA\u0002\rU\u0004\u0002\u0003CG\u0003g\u0001\ra!$\t\u0011\u001dE\u00111\u0007a\u0001\u000f+A\u0001B\"\b\u00024\u0001\u00071\u0011\u0017\u000b\u000f\u000fK9)db\u000e\b:\u001dmrQHD \u0011)!9)!\u000e\u0011\u0002\u0003\u00071\u0011\u0004\u0005\u000b\t#\u000b)\u0004%AA\u0002\rM\u0005BCC)\u0003k\u0001\n\u00111\u0001\u0004v!QAQRA\u001b!\u0003\u0005\ra!$\t\u0015\u001dE\u0011Q\u0007I\u0001\u0002\u00049)\u0002\u0003\u0006\u0007\u001e\u0005U\u0002\u0013!a\u0001\u0007c+\"ab\u0011+\t\u001dUAq\u0016\u000b\u0005\tC<9\u0005\u0003\u0006\u0005j\u0006\u001d\u0013\u0011!a\u0001\u0007'#Ba!-\bL!QA\u0011^A&\u0003\u0003\u0005\r\u0001\"9\u0015\t\u0011Ewq\n\u0005\u000b\tS\fi%!AA\u0002\rME\u0003BBY\u000f'B!\u0002\";\u0002T\u0005\u0005\t\u0019\u0001Cq\u0003I\u0019VoY2fgN4U\r^2i%\u0016\u001cX\u000f\u001c;\u0011\t\u0011U\u0014qK\n\u0007\u0003/:Y&\"\n\u0011%\u0015mqQLB\r\u0007'\u001b)h!$\b\u0016\rEvQE\u0005\u0005\u000f?*iBA\tBEN$(/Y2u\rVt7\r^5p]Z\"\"ab\u0016\u0015\u001d\u001d\u0015rQMD4\u000fS:Yg\"\u001c\bp!AAqQA/\u0001\u0004\u0019I\u0002\u0003\u0005\u0005\u0012\u0006u\u0003\u0019ABJ\u0011!)\t&!\u0018A\u0002\rU\u0004\u0002\u0003CG\u0003;\u0002\ra!$\t\u0011\u001dE\u0011Q\fa\u0001\u000f+A\u0001B\"\b\u0002^\u0001\u00071\u0011\u0017\u000b\u0005\u000fg:Y\b\u0005\u0004\u0003p\u0016mrQ\u000f\t\u0011\u0005_<9h!\u0007\u0004\u0014\u000eU4QRD\u000b\u0007cKAa\"\u001f\u0003r\n1A+\u001e9mKZB!\"\"\u0011\u0002`\u0005\u0005\t\u0019AD\u0013\u0003I1\u0015-\u001b7ve\u00164U\r^2i%\u0016\u001cX\u000f\u001c;\u0011\t\u0011U\u0014QS\n\u0007\u0003+;\u0019)\"\n\u0011\u001d\u0015mqQQB\r\u0007'\u001b)(\":\u0006p&!qqQC\u000f\u0005E\t%m\u001d;sC\u000e$h)\u001e8di&|g\u000e\u000e\u000b\u0003\u000f\u007f\"\"\"b<\b\u000e\u001e=u\u0011SDJ\u0011!!9)a'A\u0002\re\u0001\u0002\u0003CI\u00037\u0003\raa%\t\u0011\u0015E\u00131\u0014a\u0001\u0007kB\u0001\"\"9\u0002\u001c\u0002\u0007QQ\u001d\u000b\u0005\u000f/;y\n\u0005\u0004\u0003p\u0016mr\u0011\u0014\t\r\u0005_<Yj!\u0007\u0004\u0014\u000eUTQ]\u0005\u0005\u000f;\u0013\tP\u0001\u0004UkBdW\r\u000e\u0005\u000b\u000b\u0003\ni*!AA\u0002\u0015=\u0018a\u0006#fM\u0016\u0014h)\u001a;dQJ+\u0017/^3tiJ+7/\u001e7u!\u0011!)(!1\u0014\r\u0005\u0005wqUC\u0013!!)Yb\"+\u0006d\u0015\u0005\u0017\u0002BDV\u000b;\u0011\u0011#\u00112tiJ\f7\r\u001e$v]\u000e$\u0018n\u001c82)\t9\u0019\u000b\u0006\u0003\u0006B\u001eE\u0006\u0002CC]\u0003\u000f\u0004\r!b\u0019\u0015\t\u001dUvq\u0017\t\u0007\u0005_,Y$b\u0019\t\u0015\u0015\u0005\u0013\u0011ZA\u0001\u0002\u0004)\t-A\u0011GC2d'-Y2l\u001f:\u0004Vo\u001d5NKJ<W\r\u001a$bS2,(/\u001a*fgVdG\u000f\u0005\u0003\u0005v\u0005}8CBA\u0000\u000f\u007f+)\u0003\u0005\b\u0006\u001c\u001d\u00155\u0011DB;\u0007\u001b\u001b\tLb\t\u0015\u0005\u001dmFC\u0003D\u0012\u000f\u000b<9m\"3\bL\"AAq\u0011B\u0003\u0001\u0004\u0019I\u0002\u0003\u0005\u0006R\t\u0015\u0001\u0019AB;\u0011!!iI!\u0002A\u0002\r5\u0005\u0002\u0003D\u000f\u0005\u000b\u0001\ra!-\u0015\t\u001d=w1\u001b\t\u0007\u0005_,Yd\"5\u0011\u0019\t=x1TB\r\u0007k\u001aii!-\t\u0015\u0015\u0005#qAA\u0001\u0002\u00041\u0019#A\u0010QkNDW*\u001a:hK\u0012\u0014V-\\8uK6+G/\u0019$fi\u000eD'+Z:vYR\u0004B\u0001\"\u001e\u0003JM1!\u0011JDn\u000bK\u0001\"#b\u0007\b^\rM51SBJ\u0007\u001b3Yf!\u001e\u0007`R\u0011qq\u001b\u000b\u000f\r?<\tob9\bf\u001e\u001dx\u0011^Dv\u0011!1YEa\u0014A\u0002\rM\u0005\u0002\u0003D(\u0005\u001f\u0002\raa%\t\u0011\u0019M#q\na\u0001\u0007'C\u0001B\"7\u0003P\u0001\u00071Q\u0012\u0005\t\r/\u0012y\u00051\u0001\u0007\\!AQ\u0011\u000bB(\u0001\u0004\u0019)\b\u0006\u0003\bp\u001eM\bC\u0002Bx\u000bw9\t\u0010\u0005\t\u0003p\u001e]41SBJ\u0007'\u001biIb\u0017\u0004v!QQ\u0011\tB)\u0003\u0003\u0005\rAb8\u0002KA+8\u000f['fe\u001e,GMU3n_R,W*\u001a;b\r\u0006LG.\u001a3GKR\u001c\u0007NU3tk2$\b\u0003\u0002C;\u0005\u000f\u001bbAa\"\b|\u0016\u0015\u0002CDC\u000e\u000f\u000b\u001b\u0019ja%\u0004\u0014\u000eUd\u0011\u0017\u000b\u0003\u000fo$\"B\"-\t\u0002!\r\u0001R\u0001E\u0004\u0011!1YE!$A\u0002\rM\u0005\u0002\u0003D(\u0005\u001b\u0003\raa%\t\u0011\u0019M#Q\u0012a\u0001\u0007'C\u0001\"\"\u0015\u0003\u000e\u0002\u00071Q\u000f\u000b\u0005\u0011\u0017Ay\u0001\u0005\u0004\u0003p\u0016m\u0002R\u0002\t\r\u0005_<Yja%\u0004\u0014\u000eM5Q\u000f\u0005\u000b\u000b\u0003\u0012y)!AA\u0002\u0019E\u0016A\b)vg\"lUM]4fI2{7-\u00197NKR\fg)\u001a;dQJ+7/\u001e7u!\u0011!)Ha3\u0014\r\t-\u0007rCC\u0013!A)Y\u0002#\u0007\u0004\u0014\u000eM51\u0013D.\rg2I(\u0003\u0003\t\u001c\u0015u!!E!cgR\u0014\u0018m\u0019;Gk:\u001cG/[8okQ\u0011\u00012\u0003\u000b\r\rsB\t\u0003c\t\t&!\u001d\u0002\u0012\u0006\u0005\t\r\u0017\u0012\t\u000e1\u0001\u0004\u0014\"Aaq\nBi\u0001\u0004\u0019\u0019\n\u0003\u0005\u0007T\tE\u0007\u0019ABJ\u0011!19F!5A\u0002\u0019m\u0003\u0002\u0003D8\u0005#\u0004\rAb\u001d\u0015\t!5\u0002R\u0007\t\u0007\u0005_,Y\u0004c\f\u0011\u001d\t=\b\u0012GBJ\u0007'\u001b\u0019Jb\u0017\u0007t%!\u00012\u0007By\u0005\u0019!V\u000f\u001d7fk!QQ\u0011\tBj\u0003\u0003\u0005\rA\"\u001f\u00029\u0011bWm]:j]&$He\u001a:fCR,'\u000f\n3fM\u0006,H\u000e\u001e\u00132qU\u0011\u00012\b\u0016\u0005\u0007;$y+A\u0007dkJ\u0014XM\u001c;SKN,H\u000e\u001e\t\u0005\t\u0007\nI\u0002K\u0002\u001d\u0011\u0007\u0002BAa<\tF%!\u0001r\tBy\u0005!1x\u000e\\1uS2,\u0017!\u00044fi\u000eD'+Z9vKN$8\u000f\u0005\u0004\u0005&!5\u0003\u0012K\u0005\u0005\u0011\u001f\"9CA\u0003Rk\u0016,X\rE\u0002\u0005D-\fQ\u0003Z3gKJ\u0014X\r\u001a$fi\u000eD'+Z9vKN$8\u000f\u0005\u0005\u0005&!]3Q\u000fE&\u0013\u0011AI\u0006b\n\u0003\u000f!\u000b7\u000f['ba\u0006i!-\u001f;fg&sg\t\\5hQR\fAB]3rg&sg\t\\5hQR\f1D\\;n\u00052|7m[:J]\u001ac\u0017n\u001a5u!\u0016\u0014\u0018\t\u001a3sKN\u001c\b\u0003\u0003C\u0013\u0011/\u001a)ha%\u0002'\tdwnY6P\u001f6\u0013V\r\u001e:z\u0007>,h\u000e^:\u0011\u0011\u0011\u0015\u0002rKB_\u0007'\u000bqbY8seV\u0004H/\u001a3CY>\u001c7n\u001d\t\u0007\tKAYg!\u0007\n\t!5Dq\u0005\u0002\b\u0011\u0006\u001c\bnU3u\u0003!I7OW8nE&,\u0007f\u0002\u0013\tt!\r\u0005R\u0011\t\u0005\u0011kBy(\u0004\u0002\tx)!A\u0011\bE=\u0015\u0011!Y\fc\u001f\u000b\u0005!u\u0014!\u00026bm\u0006D\u0018\u0002\u0002EA\u0011o\u0012\u0011bR;be\u0012,GMQ=\u0002\u000bY\fG.^3\"\u0005!\u001d\u0015\u0001\u0002;iSN\fqb\u001d5vM\u001adWMR5mKN\u001cV\r\u001e\t\u0007\tKAY\u0007#$\u0011\t\rM\u0002rR\u0005\u0005\u0011#\u001b)D\u0001\u0007E_^tGn\\1e\r&dW\rK\u0004&\u0011gB\u0019\t#\"\u0002%=t7i\\7qY\u0016$XmQ1mY\n\f7m\u001b\t\u0005\u00077AI*\u0003\u0003\t\u001c\nm'AH*ik\u001a4G.\u001a$fi\u000eD7i\\7qY\u0016$\u0018n\u001c8MSN$XM\\3s\u0003Q\u0001Xo\u001d5CCN,GMR3uG\"DU\r\u001c9feB!11\u0004EQ\u0013\u0011A\u0019Ka7\u0003)A+8\u000f\u001b\"bg\u0016$g)\u001a;dQ\"+G\u000e]3s\u0003i\u0011X\r\\3bg\u0016\u001cUO\u001d:f]R\u0014Vm];mi\n+hMZ3s)\t!\u0019'\u0001\bde\u0016\fG/\u001a+f[B4\u0015\u000e\\3\u0015\t!5\u0005R\u0016\u0005\b\u0011_K\u0003\u0019\u0001EY\u00035!(/\u00198ta>\u0014HoQ8oMB!\u00012\u0017E\\\u001b\tA)L\u0003\u0003\u0004d\u000ee\u0012\u0002\u0002E]\u0011k\u0013Q\u0002\u0016:b]N\u0004xN\u001d;D_:4\u0017a\u0006:fO&\u001cH/\u001a:UK6\u0004h)\u001b7f)>\u001cE.Z1o)\u0011\u0019\t\fc0\t\u000f!\u0005'\u00061\u0001\t\u000e\u0006!a-\u001b7f\u0003\u001d\u0019G.Z1okB\f1b]3oIJ+\u0017/^3tiR!A1\rEe\u0011\u001dAY\r\fa\u0001\u0011#\n1A]3r\u0003i\u0001\u0018M\u001d;ji&|gN\u00117pG.\u001c()\u001f$fi\u000eDWj\u001c3f))A\t\u000ec6\tZ\"u\u0007r\u001d\t\u0007\tKA\u0019\u000e#\u0015\n\t!UGq\u0005\u0002\f\u0003J\u0014\u0018-\u001f\"vM\u001a,'\u000fC\u0004\u0004p5\u0002\ra!\u001d\t\u000f!mW\u00061\u0001\u0005$\u0005YAn\\2bY\ncwnY6t\u0011\u001dAy.\fa\u0001\u0011C\f\u0011\u0004[8ti2{7-\u00197CY>\u001c7n\u001d\"z\u000bb,7-\u001e;peBAAQ\u0005Er\u0007k\u001aY(\u0003\u0003\tf\u0012\u001d\"!\u0004'j].,G\rS1tQ6\u000b\u0007\u000fC\u0004\tj6\u0002\r\u0001c;\u0002+A,8\u000f['fe\u001e,G\rT8dC2\u0014En\\2lgB1AQ\u0005C\u0016\u00073\t!c\u0019:fCR,g)\u001a;dQJ+\u0017/^3tiRA\u0001\u0012\u000bEy\u0011oDI\u0010C\u0004\u0006\u00109\u0002\r\u0001c=\u0011\r\ru41\u0011E{!\r!\u0019e\u0014\u0005\b\u000b#r\u0003\u0019AB;\u0011\u001d)YF\fa\u0001\u0007c\u000b1c\u0019:fCR,g)\u001a;dQJ+\u0017/^3tiN$b\u0002c@\n\u0002%\u0015\u0011rAE\u0006\u0013\u001fI\u0019\u0002\u0005\u0004\u0005&!M\u0007R\u001f\u0005\b\u0013\u0007y\u0003\u0019\u0001Ez\u0003%\u0019WO\u001d\"m_\u000e\\7\u000fC\u0004\u0006R=\u0002\ra!\u001e\t\u000f%%q\u00061\u0001\u00042\u00061\u0011n\u001d'bgRDq!#\u00040\u0001\u0004A\t.A\fd_2dWm\u0019;fIJ+Wn\u001c;f%\u0016\fX/Z:ug\"9\u0011\u0012C\u0018A\u0002\rE\u0016\u0001E3oC\ndWMQ1uG\"4U\r^2i\u0011%)Yf\fI\u0001\u0002\u0004\u0019\t,A\u000fde\u0016\fG/\u001a$fi\u000eD'+Z9vKN$8\u000f\n3fM\u0006,H\u000e\u001e\u00137\u0003Q\u0019w\u000e\u001c7fGR4U\r^2i%\u0016\fX/Z:ugRAA1ME\u000e\u0013;I\t\u0003C\u0004\u0006RE\u0002\ra!\u001e\t\u000f%}\u0011\u00071\u0001\u0004|\u0005Q!\r\\8dW&sgm\\:\t\u000f%5\u0011\u00071\u0001\tR\u00069\u0012m]:feR\u0004vn]5uSZ,'\t\\8dWNK'0\u001a\u000b\u0007\tGJ9##\u000b\t\u000f\u0011\u001d%\u00071\u0001\u0004\u001a!9a\u0011\u001c\u001aA\u0002\r5\u0015aD2iK\u000e\\'\t\\8dWNK'0Z:\u0015\t\u0011\r\u0014r\u0006\u0005\b\u0013?\u0019\u0004\u0019AB>\u0003A1W\r^2i\u0019>\u001c\u0017\r\u001c\"m_\u000e\\7\u000f\u0006\u0003\u0005d%U\u0002b\u0002Eni\u0001\u0007A1E\u0001\u0014M\u0016$8\r\u001b%pgRdunY1m\u00052|7m\u001b\u000b\u000b\u0007cKY$#\u0010\n@%\u0005\u0003b\u0002CDk\u0001\u00071\u0011\u0004\u0005\b\t#+\u0004\u0019ABJ\u0011\u001d1y'\u000ea\u0001\rgBq!c\u00116\u0001\u0004\u0019)(\u0001\bcY>\u001c7.T1oC\u001e,'/\u00133\u0002)\u0019,Go\u00195I_N$Hj\\2bY\ncwnY6t)\u0019!\u0019'#\u0013\nT!9\u00112\n\u001cA\u0002%5\u0013a\u00055pgRdunY1m\t&\u0014X*\u00198bO\u0016\u0014\b\u0003BB\u000e\u0013\u001fJA!#\u0015\u0003\\\n\u0019\u0002j\\:u\u0019>\u001c\u0017\r\u001c#je6\u000bg.Y4fe\"9\u0001r\u001c\u001cA\u0002!\u0005\u0018\u0001\b4fi\u000eDW*\u001e7uSBdW\rS8ti2{7-\u00197CY>\u001c7n\u001d\u000b\t\tGJI&c\u0019\nj!9\u00112L\u001cA\u0002%u\u0013\u0001\u00042n\u0013\u0012$vN\u00117pG.\u001c\b\u0003CB`\u0013?\u001a)ha\u001f\n\t%\u000541\u001a\u0002\u0004\u001b\u0006\u0004\bbBE3o\u0001\u0007\u0011rM\u0001\u0012Y>\u001c\u0017\r\u001c#jeN\u0014\u00150\u0012=fG&#\u0007\u0003CB`\u0013?\u001aiLb\u001d\t\u000f%-t\u00071\u0001\u00042\u000611-Y2iK\u0012\f!\"\u001b8ji&\fG.\u001b>f\u0003]1W\r^2i\u00032d\u0007j\\:u\u0019>\u001c\u0017\r\u001c\"m_\u000e\\7\u000f\u0006\u0003\u0005d%M\u0004b\u0002Eps\u0001\u0007\u0001\u0012]\u0001\u0015g\",hM\u001a7f\u001b\u0016$(/[2t+B$\u0017\r^3\u0015\u0011\u0011\r\u0014\u0012PE>\u0013{Bq\u0001b\";\u0001\u0004\u0019I\u0002C\u0004\b\u0012i\u0002\ra\"\u0006\t\u000f%}$\b1\u0001\u00042\u0006)An\\2bY\u0006I2\u000f[;gM2,Gj\\2bY6+GO]5dgV\u0003H-\u0019;f)\u0019!\u0019'#\"\n\b\"9AqQ\u001eA\u0002\re\u0001bBD\tw\u0001\u0007qQC\u0001\u001bg\",hM\u001a7f%\u0016lw\u000e^3NKR\u0014\u0018nY:Va\u0012\fG/\u001a\u000b\u0007\tGJi)c$\t\u000f\u0011\u001dE\b1\u0001\u0004\u001a!9q\u0011\u0003\u001fA\u0002\u001dU\u0011a\u00025bg:+\u0007\u0010^\u0001\u0005]\u0016DH\u000f\u0006\u0002\u0004\u0014\u0005\u0011B-[1h]>\u001cXmQ8seV\u0004H/[8o)!\u0019i,c'\n,&5\u0006bBEO\u007f\u0001\u0007\u0011rT\u0001\nG\",7m[3e\u0013:\u0004B!#)\n(6\u0011\u00112\u0015\u0006\u0005\u0013K#Y$A\u0002{SBLA!#+\n$\n\u00112\t[3dW\u0016$\u0017J\u001c9viN#(/Z1n\u0011\u001d)\tf\u0010a\u0001\u0007kBq\u0001b\"@\u0001\u0004\u0019I\"\u0001\u000bu_\u000e{W\u000e\u001d7fi&|g.\u0013;fe\u0006$xN]\u000b\u0003\u0005s\f\u0011CZ3uG\",\u0006\u000fV8NCb\u0014\u0015\u0010^3t\u0003e!\bN]8x\r\u0016$8\r\u001b$bS2,G-\u0012=dKB$\u0018n\u001c8\u0015\u0019%e\u0016rXEa\u0013\u0007L)-c2\u0011\t\t=\u00182X\u0005\u0005\u0013{\u0013\tPA\u0004O_RD\u0017N\\4\t\u000f\u0011\u001d%\t1\u0001\u0004\u001a!9A\u0011\u0013\"A\u0002\rM\u0005bBC)\u0005\u0002\u00071Q\u000f\u0005\b\u000bC\u0014\u0005\u0019ACs\u0011%IIM\u0011I\u0001\u0002\u0004IY-A\u0004nKN\u001c\u0018mZ3\u0011\r\t=X1HB_\u0003\r\"\bN]8x\r\u0016$8\r\u001b$bS2,G-\u0012=dKB$\u0018n\u001c8%I\u00164\u0017-\u001e7uIU*\"!#5+\t%-GqV\u0001\u0012C\u0012$Gk\u001c*fgVdGo])vKV,G\u0003\u0002C2\u0013/Dq!#7E\u0001\u0004!\t%\u0001\u0004sKN,H\u000e^\u0001\u0019I\u0016\u001c'/Z1tK:+XN\u00117pG.\u001cHk\u001c$fi\u000eDG\u0003\u0002C2\u0013?Dq!#9F\u0001\u0004\u0019\u0019*A\u0007cY>\u001c7n\u001d$fi\u000eDW\rZ\u0001\u000eM\u0006dGNY1dW\u001a+Go\u00195\u0015\t\u0011\r\u0014r\u001d\u0005\b\u0013S4\u0005\u0019AB9\u0003Qy'/[4j]\u0006d'\t\\8dWN\u0014\u00150\u00113ee\u0006\u0019\"/Z7pm\u0016\u0004VM\u001c3j]\u001e\u001c\u0005.\u001e8lgR1\u0011r^E|\u0013w\u0004b\u0001\"\n\tl%E\b\u0003BB\u000e\u0013gLA!#>\u0003\\\n\u00192\u000b[;gM2,'\t\\8dW\u000eCWO\\6JI\"9\u0011\u0012`$A\u0002%E\u0018!\u00044bS2,GM\u00117pG.LE\rC\u0004\u0006R\u001d\u0003\ra!\u001e"
)
public final class ShuffleBlockFetcherIterator implements Iterator, DownloadFileManager, Logging {
   private final TaskContext context;
   private final BlockStoreClient shuffleClient;
   private final BlockManager blockManager;
   private final Iterator blocksByAddress;
   private final Function2 streamWrapper;
   private final long maxBytesInFlight;
   private final int maxReqsInFlight;
   private final int maxBlocksInFlightPerAddress;
   private final long maxReqSizeShuffleToMem;
   public final int org$apache$spark$storage$ShuffleBlockFetcherIterator$$maxAttemptsOnNettyOOM;
   private final boolean detectCorrupt;
   private final boolean detectCorruptUseExtraMemory;
   private final boolean checksumEnabled;
   private final String checksumAlgorithm;
   public final ShuffleReadMetricsReporter org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics;
   private final boolean doBatchFetch;
   public final Clock org$apache$spark$storage$ShuffleBlockFetcherIterator$$clock;
   private final long targetRemoteRequestSize;
   private int numBlocksToFetch;
   private int numBlocksProcessed;
   public final long org$apache$spark$storage$ShuffleBlockFetcherIterator$$startTimeNs;
   private final LinkedHashSet hostLocalBlocks;
   public final LinkedBlockingQueue org$apache$spark$storage$ShuffleBlockFetcherIterator$$results;
   private volatile SuccessFetchResult currentResult;
   private final Queue fetchRequests;
   private final HashMap deferredFetchRequests;
   private long bytesInFlight;
   private int reqsInFlight;
   private final HashMap numBlocksInFlightPerAddress;
   public final HashMap org$apache$spark$storage$ShuffleBlockFetcherIterator$$blockOOMRetryCounts;
   private final HashSet corruptedBlocks;
   @GuardedBy("this")
   public boolean org$apache$spark$storage$ShuffleBlockFetcherIterator$$isZombie;
   @GuardedBy("this")
   private final HashSet shuffleFilesSet;
   private final ShuffleFetchCompletionListener onCompleteCallback;
   private final PushBasedFetchHelper pushBasedFetchHelper;
   private transient Logger org$apache$spark$internal$Logging$$log_;

   public static Clock $lessinit$greater$default$18() {
      return ShuffleBlockFetcherIterator$.MODULE$.$lessinit$greater$default$18();
   }

   public static Seq mergeContinuousShuffleBlockIdsIfNeeded(final Seq blocks, final boolean doBatchFetch) {
      return ShuffleBlockFetcherIterator$.MODULE$.mergeContinuousShuffleBlockIdsIfNeeded(blocks, doBatchFetch);
   }

   public static void resetNettyOOMFlagIfPossible(final long freeMemoryLowerBound) {
      ShuffleBlockFetcherIterator$.MODULE$.resetNettyOOMFlagIfPossible(freeMemoryLowerBound);
   }

   public static AtomicBoolean isNettyOOMOnShuffle() {
      return ShuffleBlockFetcherIterator$.MODULE$.isNettyOOMOnShuffle();
   }

   public String logName() {
      return Logging.logName$(this);
   }

   public Logger log() {
      return Logging.log$(this);
   }

   public Logging.LogStringContext LogStringContext(final StringContext sc) {
      return Logging.LogStringContext$(this, sc);
   }

   public void withLogContext(final Map context, final Function0 body) {
      Logging.withLogContext$(this, context, body);
   }

   public void logInfo(final Function0 msg) {
      Logging.logInfo$(this, msg);
   }

   public void logInfo(final LogEntry entry) {
      Logging.logInfo$(this, entry);
   }

   public void logInfo(final LogEntry entry, final Throwable throwable) {
      Logging.logInfo$(this, entry, throwable);
   }

   public void logDebug(final Function0 msg) {
      Logging.logDebug$(this, msg);
   }

   public void logDebug(final LogEntry entry) {
      Logging.logDebug$(this, entry);
   }

   public void logDebug(final LogEntry entry, final Throwable throwable) {
      Logging.logDebug$(this, entry, throwable);
   }

   public void logTrace(final Function0 msg) {
      Logging.logTrace$(this, msg);
   }

   public void logTrace(final LogEntry entry) {
      Logging.logTrace$(this, entry);
   }

   public void logTrace(final LogEntry entry, final Throwable throwable) {
      Logging.logTrace$(this, entry, throwable);
   }

   public void logWarning(final Function0 msg) {
      Logging.logWarning$(this, msg);
   }

   public void logWarning(final LogEntry entry) {
      Logging.logWarning$(this, entry);
   }

   public void logWarning(final LogEntry entry, final Throwable throwable) {
      Logging.logWarning$(this, entry, throwable);
   }

   public void logError(final Function0 msg) {
      Logging.logError$(this, msg);
   }

   public void logError(final LogEntry entry) {
      Logging.logError$(this, entry);
   }

   public void logError(final LogEntry entry, final Throwable throwable) {
      Logging.logError$(this, entry, throwable);
   }

   public void logInfo(final Function0 msg, final Throwable throwable) {
      Logging.logInfo$(this, msg, throwable);
   }

   public void logDebug(final Function0 msg, final Throwable throwable) {
      Logging.logDebug$(this, msg, throwable);
   }

   public void logTrace(final Function0 msg, final Throwable throwable) {
      Logging.logTrace$(this, msg, throwable);
   }

   public void logWarning(final Function0 msg, final Throwable throwable) {
      Logging.logWarning$(this, msg, throwable);
   }

   public void logError(final Function0 msg, final Throwable throwable) {
      Logging.logError$(this, msg, throwable);
   }

   public boolean isTraceEnabled() {
      return Logging.isTraceEnabled$(this);
   }

   public void initializeLogIfNecessary(final boolean isInterpreter) {
      Logging.initializeLogIfNecessary$(this, isInterpreter);
   }

   public boolean initializeLogIfNecessary(final boolean isInterpreter, final boolean silent) {
      return Logging.initializeLogIfNecessary$(this, isInterpreter, silent);
   }

   public boolean initializeLogIfNecessary$default$2() {
      return Logging.initializeLogIfNecessary$default$2$(this);
   }

   public void initializeForcefully(final boolean isInterpreter, final boolean silent) {
      Logging.initializeForcefully$(this, isInterpreter, silent);
   }

   /** @deprecated */
   public final boolean hasDefiniteSize() {
      return Iterator.hasDefiniteSize$(this);
   }

   public final Iterator iterator() {
      return Iterator.iterator$(this);
   }

   public Option nextOption() {
      return Iterator.nextOption$(this);
   }

   public boolean contains(final Object elem) {
      return Iterator.contains$(this, elem);
   }

   public BufferedIterator buffered() {
      return Iterator.buffered$(this);
   }

   public Iterator padTo(final int len, final Object elem) {
      return Iterator.padTo$(this, len, elem);
   }

   public Tuple2 partition(final Function1 p) {
      return Iterator.partition$(this, p);
   }

   public Iterator.GroupedIterator grouped(final int size) {
      return Iterator.grouped$(this, size);
   }

   public Iterator.GroupedIterator sliding(final int size, final int step) {
      return Iterator.sliding$(this, size, step);
   }

   public int sliding$default$2() {
      return Iterator.sliding$default$2$(this);
   }

   public Iterator scanLeft(final Object z, final Function2 op) {
      return Iterator.scanLeft$(this, z, op);
   }

   /** @deprecated */
   public Iterator scanRight(final Object z, final Function2 op) {
      return Iterator.scanRight$(this, z, op);
   }

   public int indexWhere(final Function1 p, final int from) {
      return Iterator.indexWhere$(this, p, from);
   }

   public int indexWhere$default$2() {
      return Iterator.indexWhere$default$2$(this);
   }

   public int indexOf(final Object elem) {
      return Iterator.indexOf$(this, elem);
   }

   public int indexOf(final Object elem, final int from) {
      return Iterator.indexOf$(this, elem, from);
   }

   public final int length() {
      return Iterator.length$(this);
   }

   public boolean isEmpty() {
      return Iterator.isEmpty$(this);
   }

   public Iterator filter(final Function1 p) {
      return Iterator.filter$(this, p);
   }

   public Iterator filterNot(final Function1 p) {
      return Iterator.filterNot$(this, p);
   }

   public Iterator filterImpl(final Function1 p, final boolean isFlipped) {
      return Iterator.filterImpl$(this, p, isFlipped);
   }

   public Iterator withFilter(final Function1 p) {
      return Iterator.withFilter$(this, p);
   }

   public Iterator collect(final PartialFunction pf) {
      return Iterator.collect$(this, pf);
   }

   public Iterator distinct() {
      return Iterator.distinct$(this);
   }

   public Iterator distinctBy(final Function1 f) {
      return Iterator.distinctBy$(this, f);
   }

   public Iterator map(final Function1 f) {
      return Iterator.map$(this, f);
   }

   public Iterator flatMap(final Function1 f) {
      return Iterator.flatMap$(this, f);
   }

   public Iterator flatten(final Function1 ev) {
      return Iterator.flatten$(this, ev);
   }

   public Iterator concat(final Function0 xs) {
      return Iterator.concat$(this, xs);
   }

   public final Iterator $plus$plus(final Function0 xs) {
      return Iterator.$plus$plus$(this, xs);
   }

   public Iterator take(final int n) {
      return Iterator.take$(this, n);
   }

   public Iterator takeWhile(final Function1 p) {
      return Iterator.takeWhile$(this, p);
   }

   public Iterator drop(final int n) {
      return Iterator.drop$(this, n);
   }

   public Iterator dropWhile(final Function1 p) {
      return Iterator.dropWhile$(this, p);
   }

   public Tuple2 span(final Function1 p) {
      return Iterator.span$(this, p);
   }

   public Iterator slice(final int from, final int until) {
      return Iterator.slice$(this, from, until);
   }

   public Iterator sliceIterator(final int from, final int until) {
      return Iterator.sliceIterator$(this, from, until);
   }

   public Iterator zip(final IterableOnce that) {
      return Iterator.zip$(this, that);
   }

   public Iterator zipAll(final IterableOnce that, final Object thisElem, final Object thatElem) {
      return Iterator.zipAll$(this, that, thisElem, thatElem);
   }

   public Iterator zipWithIndex() {
      return Iterator.zipWithIndex$(this);
   }

   public boolean sameElements(final IterableOnce that) {
      return Iterator.sameElements$(this, that);
   }

   public Tuple2 duplicate() {
      return Iterator.duplicate$(this);
   }

   public Iterator patch(final int from, final Iterator patchElems, final int replaced) {
      return Iterator.patch$(this, from, patchElems, replaced);
   }

   public Iterator tapEach(final Function1 f) {
      return Iterator.tapEach$(this, f);
   }

   public String toString() {
      return Iterator.toString$(this);
   }

   /** @deprecated */
   public Iterator seq() {
      return Iterator.seq$(this);
   }

   public Tuple2 splitAt(final int n) {
      return IterableOnceOps.splitAt$(this, n);
   }

   public boolean isTraversableAgain() {
      return IterableOnceOps.isTraversableAgain$(this);
   }

   public void foreach(final Function1 f) {
      IterableOnceOps.foreach$(this, f);
   }

   public boolean forall(final Function1 p) {
      return IterableOnceOps.forall$(this, p);
   }

   public boolean exists(final Function1 p) {
      return IterableOnceOps.exists$(this, p);
   }

   public int count(final Function1 p) {
      return IterableOnceOps.count$(this, p);
   }

   public Option find(final Function1 p) {
      return IterableOnceOps.find$(this, p);
   }

   public Object foldLeft(final Object z, final Function2 op) {
      return IterableOnceOps.foldLeft$(this, z, op);
   }

   public Object foldRight(final Object z, final Function2 op) {
      return IterableOnceOps.foldRight$(this, z, op);
   }

   /** @deprecated */
   public final Object $div$colon(final Object z, final Function2 op) {
      return IterableOnceOps.$div$colon$(this, z, op);
   }

   /** @deprecated */
   public final Object $colon$bslash(final Object z, final Function2 op) {
      return IterableOnceOps.$colon$bslash$(this, z, op);
   }

   public Object fold(final Object z, final Function2 op) {
      return IterableOnceOps.fold$(this, z, op);
   }

   public Object reduce(final Function2 op) {
      return IterableOnceOps.reduce$(this, op);
   }

   public Option reduceOption(final Function2 op) {
      return IterableOnceOps.reduceOption$(this, op);
   }

   public Object reduceLeft(final Function2 op) {
      return IterableOnceOps.reduceLeft$(this, op);
   }

   public Object reduceRight(final Function2 op) {
      return IterableOnceOps.reduceRight$(this, op);
   }

   public Option reduceLeftOption(final Function2 op) {
      return IterableOnceOps.reduceLeftOption$(this, op);
   }

   public Option reduceRightOption(final Function2 op) {
      return IterableOnceOps.reduceRightOption$(this, op);
   }

   public boolean nonEmpty() {
      return IterableOnceOps.nonEmpty$(this);
   }

   public int size() {
      return IterableOnceOps.size$(this);
   }

   /** @deprecated */
   public final void copyToBuffer(final Buffer dest) {
      IterableOnceOps.copyToBuffer$(this, dest);
   }

   public int copyToArray(final Object xs) {
      return IterableOnceOps.copyToArray$(this, xs);
   }

   public int copyToArray(final Object xs, final int start) {
      return IterableOnceOps.copyToArray$(this, xs, start);
   }

   public int copyToArray(final Object xs, final int start, final int len) {
      return IterableOnceOps.copyToArray$(this, xs, start, len);
   }

   public Object sum(final Numeric num) {
      return IterableOnceOps.sum$(this, num);
   }

   public Object product(final Numeric num) {
      return IterableOnceOps.product$(this, num);
   }

   public Object min(final Ordering ord) {
      return IterableOnceOps.min$(this, ord);
   }

   public Option minOption(final Ordering ord) {
      return IterableOnceOps.minOption$(this, ord);
   }

   public Object max(final Ordering ord) {
      return IterableOnceOps.max$(this, ord);
   }

   public Option maxOption(final Ordering ord) {
      return IterableOnceOps.maxOption$(this, ord);
   }

   public Object maxBy(final Function1 f, final Ordering ord) {
      return IterableOnceOps.maxBy$(this, f, ord);
   }

   public Option maxByOption(final Function1 f, final Ordering ord) {
      return IterableOnceOps.maxByOption$(this, f, ord);
   }

   public Object minBy(final Function1 f, final Ordering ord) {
      return IterableOnceOps.minBy$(this, f, ord);
   }

   public Option minByOption(final Function1 f, final Ordering ord) {
      return IterableOnceOps.minByOption$(this, f, ord);
   }

   public Option collectFirst(final PartialFunction pf) {
      return IterableOnceOps.collectFirst$(this, pf);
   }

   /** @deprecated */
   public Object aggregate(final Function0 z, final Function2 seqop, final Function2 combop) {
      return IterableOnceOps.aggregate$(this, z, seqop, combop);
   }

   public boolean corresponds(final IterableOnce that, final Function2 p) {
      return IterableOnceOps.corresponds$(this, that, p);
   }

   public final String mkString(final String start, final String sep, final String end) {
      return IterableOnceOps.mkString$(this, start, sep, end);
   }

   public final String mkString(final String sep) {
      return IterableOnceOps.mkString$(this, sep);
   }

   public final String mkString() {
      return IterableOnceOps.mkString$(this);
   }

   public StringBuilder addString(final StringBuilder b, final String start, final String sep, final String end) {
      return IterableOnceOps.addString$(this, b, start, sep, end);
   }

   public final StringBuilder addString(final StringBuilder b, final String sep) {
      return IterableOnceOps.addString$(this, b, sep);
   }

   public final StringBuilder addString(final StringBuilder b) {
      return IterableOnceOps.addString$(this, b);
   }

   public Object to(final Factory factory) {
      return IterableOnceOps.to$(this, factory);
   }

   /** @deprecated */
   public final Iterator toIterator() {
      return IterableOnceOps.toIterator$(this);
   }

   public List toList() {
      return IterableOnceOps.toList$(this);
   }

   public Vector toVector() {
      return IterableOnceOps.toVector$(this);
   }

   public scala.collection.immutable.Map toMap(final .less.colon.less ev) {
      return IterableOnceOps.toMap$(this, ev);
   }

   public Set toSet() {
      return IterableOnceOps.toSet$(this);
   }

   public scala.collection.immutable.Seq toSeq() {
      return IterableOnceOps.toSeq$(this);
   }

   public IndexedSeq toIndexedSeq() {
      return IterableOnceOps.toIndexedSeq$(this);
   }

   /** @deprecated */
   public final Stream toStream() {
      return IterableOnceOps.toStream$(this);
   }

   public final Buffer toBuffer() {
      return IterableOnceOps.toBuffer$(this);
   }

   public Object toArray(final ClassTag evidence$2) {
      return IterableOnceOps.toArray$(this, evidence$2);
   }

   public Iterable reversed() {
      return IterableOnceOps.reversed$(this);
   }

   public Stepper stepper(final StepperShape shape) {
      return IterableOnce.stepper$(this, shape);
   }

   public int knownSize() {
      return IterableOnce.knownSize$(this);
   }

   public Logger org$apache$spark$internal$Logging$$log_() {
      return this.org$apache$spark$internal$Logging$$log_;
   }

   public void org$apache$spark$internal$Logging$$log__$eq(final Logger x$1) {
      this.org$apache$spark$internal$Logging$$log_ = x$1;
   }

   public long maxReqSizeShuffleToMem() {
      return this.maxReqSizeShuffleToMem;
   }

   private long targetRemoteRequestSize() {
      return this.targetRemoteRequestSize;
   }

   public void releaseCurrentResultBuffer() {
      if (this.currentResult != null) {
         this.currentResult.buf().release();
      } else {
         BoxedUnit var10000 = BoxedUnit.UNIT;
      }

      this.currentResult = null;
   }

   public DownloadFile createTempFile(final TransportConf transportConf) {
      return new SimpleDownloadFile((File)this.blockManager.diskBlockManager().createTempLocalBlock()._2(), transportConf);
   }

   public synchronized boolean registerTempFileToClean(final DownloadFile file) {
      if (this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$isZombie) {
         return false;
      } else {
         this.shuffleFilesSet.$plus$eq(file);
         return true;
      }
   }

   public void cleanup() {
      synchronized(this){}

      try {
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$isZombie = true;
      } catch (Throwable var13) {
         throw var13;
      }

      this.releaseCurrentResultBuffer();

      for(FetchResult result : this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results) {
         if (result instanceof SuccessFetchResult var6) {
            ManagedBuffer buf;
            label86: {
               BlockId blockId = var6.blockId();
               int mapIndex = var6.mapIndex();
               BlockManagerId address = var6.address();
               buf = var6.buf();
               BlockManagerId var11 = this.blockManager.blockManagerId();
               if (address == null) {
                  if (var11 == null) {
                     break label86;
                  }
               } else if (address.equals(var11)) {
                  break label86;
               }

               if (!this.pushBasedFetchHelper.isLocalPushMergedBlockAddress(address) && !this.hostLocalBlocks.contains(scala.Predef.ArrowAssoc..MODULE$.$minus$greater$extension(scala.Predef..MODULE$.ArrowAssoc(blockId), BoxesRunTime.boxToInteger(mapIndex)))) {
                  this.shuffleMetricsUpdate(blockId, buf, false);
               } else {
                  this.shuffleMetricsUpdate(blockId, buf, true);
               }
            }

            buf.release();
         } else {
            BoxedUnit var10000 = BoxedUnit.UNIT;
         }
      }

      this.shuffleFilesSet.foreach((file) -> {
         $anonfun$cleanup$1(this, file);
         return BoxedUnit.UNIT;
      });
   }

   private void sendRequest(final FetchRequest req) {
      this.logDebug((Function0)(() -> scala.collection.StringOps..MODULE$.format$extension(scala.Predef..MODULE$.augmentString("Sending request for %d blocks (%s) from %s"), scala.runtime.ScalaRunTime..MODULE$.genericWrapArray(new Object[]{BoxesRunTime.boxToInteger(req.blocks().size()), Utils$.MODULE$.bytesToString(req.size()), req.address().hostPort()}))));
      this.bytesInFlight += req.size();
      ++this.reqsInFlight;
      scala.collection.immutable.Map infoMap = ((IterableOnceOps)req.blocks().map((x0$1) -> {
         if (x0$1 != null) {
            BlockId blockId = x0$1.blockId();
            long size = x0$1.size();
            int mapIndex = x0$1.mapIndex();
            return new Tuple2(blockId.toString(), new Tuple2.mcJI.sp(size, mapIndex));
         } else {
            throw new MatchError(x0$1);
         }
      })).toMap(scala..less.colon.less..MODULE$.refl());
      HashSet remainingBlocks = (HashSet)(new HashSet()).$plus$plus$eq(infoMap.keys());
      ArrayBuffer deferredBlocks = new ArrayBuffer();
      Seq blockIds = (Seq)req.blocks().map((x$1) -> x$1.blockId().toString());
      BlockManagerId address = req.address();
      long requestStartTime = this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$clock.nanoTime();
      BlockFetchingListener blockFetchingListener = new BlockFetchingListener(remainingBlocks, infoMap, address, req, deferredBlocks, requestStartTime) {
         // $FF: synthetic field
         private final ShuffleBlockFetcherIterator $outer;
         private final HashSet remainingBlocks$1;
         private final scala.collection.immutable.Map infoMap$1;
         private final BlockManagerId address$1;
         private final FetchRequest req$1;
         private final ArrayBuffer deferredBlocks$1;
         private final long requestStartTime$1;

         public void onBlockTransferSuccess(final String x$1, final ManagedBuffer x$2) {
            super.onBlockTransferSuccess(x$1, x$2);
         }

         public void onBlockTransferFailure(final String x$1, final Throwable x$2) {
            super.onBlockTransferFailure(x$1, x$2);
         }

         public String getTransferType() {
            return super.getTransferType();
         }

         public void onBlockFetchSuccess(final String blockId, final ManagedBuffer buf) {
            synchronized(this.$outer){}

            try {
               if (!this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$isZombie) {
                  buf.retain();
                  this.remainingBlocks$1.$minus$eq(blockId);
                  this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$blockOOMRetryCounts.remove(blockId);
                  this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$updateMergedReqsDuration$1(BlockId$.MODULE$.apply(blockId).isShuffleChunk(), this.remainingBlocks$1, this.requestStartTime$1);
                  this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.put(new SuccessFetchResult(BlockId$.MODULE$.apply(blockId), ((Tuple2)this.infoMap$1.apply(blockId))._2$mcI$sp(), this.address$1, ((Tuple2)this.infoMap$1.apply(blockId))._1$mcJ$sp(), buf, this.remainingBlocks$1.isEmpty()));
                  this.$outer.logDebug((Function0)(() -> "remainingBlocks: " + this.remainingBlocks$1));
                  this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$enqueueDeferredFetchRequestIfNecessary$1(this.remainingBlocks$1, this.deferredBlocks$1, this.infoMap$1, this.address$1);
               }
            } catch (Throwable var5) {
               throw var5;
            }

            this.$outer.logTrace((Function0)(() -> "Got remote block " + blockId + " after " + Utils$.MODULE$.getUsedTimeNs(this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$startTimeNs)));
         }

         public void onBlockFetchFailure(final String blockId, final Throwable e) {
            synchronized(this.$outer){}

            try {
               this.$outer.logError(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.$outer.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Failed to get block(s) from "})))).log(scala.collection.immutable.Nil..MODULE$).$plus(this.$outer.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"", ":", ""})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.HOST..MODULE$, this.req$1.address().host()), new MDC(org.apache.spark.internal.LogKeys.PORT..MODULE$, BoxesRunTime.boxToInteger(this.req$1.address().port()))}))))), e);
               if (e instanceof OutOfDirectMemoryError && BoxesRunTime.unboxToInt(this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$blockOOMRetryCounts.getOrElseUpdate(blockId, (JFunction0.mcI.sp)() -> 0)) < this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$maxAttemptsOnNettyOOM) {
                  if (!this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$isZombie) {
                     int failureTimes = BoxesRunTime.unboxToInt(this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$blockOOMRetryCounts.apply(blockId));
                     this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$blockOOMRetryCounts.update(blockId, BoxesRunTime.boxToInteger(BoxesRunTime.unboxToInt(this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$blockOOMRetryCounts.apply(blockId)) + 1));
                     if (ShuffleBlockFetcherIterator$.MODULE$.isNettyOOMOnShuffle().compareAndSet(false, true)) {
                        this.$outer.logInfo(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.$outer.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Block ", " has failed "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.BLOCK_ID..MODULE$, blockId)}))).$plus(this.$outer.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"", " times due to Netty OOM, will retry"})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.FAILURES..MODULE$, BoxesRunTime.boxToInteger(failureTimes))}))))));
                     }

                     this.remainingBlocks$1.$minus$eq(blockId);
                     this.deferredBlocks$1.$plus$eq(blockId);
                     this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$enqueueDeferredFetchRequestIfNecessary$1(this.remainingBlocks$1, this.deferredBlocks$1, this.infoMap$1, this.address$1);
                     BoxedUnit var11 = BoxedUnit.UNIT;
                  } else {
                     BoxedUnit var12 = BoxedUnit.UNIT;
                  }
               } else {
                  BlockId block = BlockId$.MODULE$.apply(blockId);
                  if (block.isShuffleChunk()) {
                     this.remainingBlocks$1.$minus$eq(blockId);
                     this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$updateMergedReqsDuration$1(true, this.remainingBlocks$1, this.requestStartTime$1);
                     this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.put(new FallbackOnPushMergedFailureResult(block, this.address$1, ((Tuple2)this.infoMap$1.apply(blockId))._1$mcJ$sp(), this.remainingBlocks$1.isEmpty()));
                     BoxedUnit var10000 = BoxedUnit.UNIT;
                  } else {
                     this.$outer.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.put(new FailureFetchResult(block, ((Tuple2)this.infoMap$1.apply(blockId))._2$mcI$sp(), this.address$1, e));
                     BoxedUnit var10 = BoxedUnit.UNIT;
                  }
               }
            } catch (Throwable var9) {
               throw var9;
            }

         }

         public {
            if (ShuffleBlockFetcherIterator.this == null) {
               throw null;
            } else {
               this.$outer = ShuffleBlockFetcherIterator.this;
               this.remainingBlocks$1 = remainingBlocks$1;
               this.infoMap$1 = infoMap$1;
               this.address$1 = address$1;
               this.req$1 = req$1;
               this.deferredBlocks$1 = deferredBlocks$1;
               this.requestStartTime$1 = requestStartTime$1;
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      };
      if (req.size() > this.maxReqSizeShuffleToMem()) {
         this.shuffleClient.fetchBlocks(address.host(), address.port(), address.executorId(), (String[])blockIds.toArray(scala.reflect.ClassTag..MODULE$.apply(String.class)), blockFetchingListener, this);
      } else {
         this.shuffleClient.fetchBlocks(address.host(), address.port(), address.executorId(), (String[])blockIds.toArray(scala.reflect.ClassTag..MODULE$.apply(String.class)), blockFetchingListener, (DownloadFileManager)null);
      }
   }

   private ArrayBuffer partitionBlocksByFetchMode(final Iterator blocksByAddress, final LinkedHashSet localBlocks, final LinkedHashMap hostLocalBlocksByExecutor, final LinkedHashSet pushMergedLocalBlocks) {
      this.logDebug((Function0)(() -> {
         long var10000 = this.maxBytesInFlight;
         return "maxBytesInFlight: " + var10000 + ", targetRemoteRequestSize: " + this.targetRemoteRequestSize() + ", maxBlocksInFlightPerAddress: " + this.maxBlocksInFlightPerAddress;
      }));
      ArrayBuffer collectedRemoteRequests = new ArrayBuffer();
      LongRef localBlockBytes = LongRef.create(0L);
      LongRef hostLocalBlockBytes = LongRef.create(0L);
      IntRef numHostLocalBlocks = IntRef.create(0);
      LongRef pushMergedLocalBlockBytes = LongRef.create(0L);
      int prevNumBlocksToFetch = this.numBlocksToFetch;
      String fallback = FallbackStorage$.MODULE$.FALLBACK_BLOCK_MANAGER_ID().executorId();
      Set localExecIds = (Set)scala.Predef..MODULE$.Set().apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{this.blockManager.blockManagerId().executorId(), fallback})));
      blocksByAddress.withFilter((check$ifrefutable$1) -> BoxesRunTime.boxToBoolean($anonfun$partitionBlocksByFetchMode$2(check$ifrefutable$1))).foreach((x$7) -> {
         $anonfun$partitionBlocksByFetchMode$3(this, pushMergedLocalBlocks, pushMergedLocalBlockBytes, collectedRemoteRequests, localExecIds, localBlocks, localBlockBytes, hostLocalBlocksByExecutor, numHostLocalBlocks, hostLocalBlockBytes, x$7);
         return BoxedUnit.UNIT;
      });
      Tuple2 var15 = (Tuple2)collectedRemoteRequests.foldLeft(new Tuple2.mcJI.sp(0L, 0), (x, y) -> new Tuple2.mcJI.sp(x._1$mcJ$sp() + y.size(), x._2$mcI$sp() + y.blocks().size()));
      if (var15 != null) {
         long remoteBlockBytes = var15._1$mcJ$sp();
         int numRemoteBlocks = var15._2$mcI$sp();
         Tuple2.mcJI.sp var14 = new Tuple2.mcJI.sp(remoteBlockBytes, numRemoteBlocks);
         long remoteBlockBytes = ((Tuple2)var14)._1$mcJ$sp();
         int numRemoteBlocks = ((Tuple2)var14)._2$mcI$sp();
         long totalBytes = localBlockBytes.elem + remoteBlockBytes + hostLocalBlockBytes.elem + pushMergedLocalBlockBytes.elem;
         int blocksToFetchCurrentIteration = this.numBlocksToFetch - prevNumBlocksToFetch;
         scala.Predef..MODULE$.assert(blocksToFetchCurrentIteration == localBlocks.size() + numHostLocalBlocks.elem + numRemoteBlocks + pushMergedLocalBlocks.size(), () -> "The number of non-empty blocks " + blocksToFetchCurrentIteration + " doesn't equal to the sum of the number of local blocks " + localBlocks.size() + " + the number of host-local blocks " + numHostLocalBlocks.elem + " the number of push-merged-local blocks " + pushMergedLocalBlocks.size() + " + the number of remote blocks " + numRemoteBlocks + " ");
         this.logInfo(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Getting ", " "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.NUM_BLOCKS..MODULE$, BoxesRunTime.boxToInteger(blocksToFetchCurrentIteration))}))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"(", ") non-empty blocks including "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.TOTAL_SIZE..MODULE$, Utils$.MODULE$.bytesToString(totalBytes))})))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"", " "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.NUM_LOCAL_BLOCKS..MODULE$, BoxesRunTime.boxToInteger(localBlocks.size()))})))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"(", ") local and "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.LOCAL_BLOCKS_SIZE..MODULE$, Utils$.MODULE$.bytesToString(localBlockBytes.elem))})))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"", " "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.NUM_HOST_LOCAL_BLOCKS..MODULE$, BoxesRunTime.boxToInteger(numHostLocalBlocks.elem))})))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"(", ") "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.HOST_LOCAL_BLOCKS_SIZE..MODULE$, Utils$.MODULE$.bytesToString(hostLocalBlockBytes.elem))})))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"host-local and ", " "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.NUM_PUSH_MERGED_LOCAL_BLOCKS..MODULE$, BoxesRunTime.boxToInteger(pushMergedLocalBlocks.size()))})))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"(", ")"})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.PUSH_MERGED_LOCAL_BLOCKS_SIZE..MODULE$, Utils$.MODULE$.bytesToString(pushMergedLocalBlockBytes.elem))})))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{" push-merged-local and ", " "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.NUM_REMOTE_BLOCKS..MODULE$, BoxesRunTime.boxToInteger(numRemoteBlocks))})))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"(", ") remote blocks"})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.REMOTE_BLOCKS_SIZE..MODULE$, Utils$.MODULE$.bytesToString(remoteBlockBytes))}))))));
         this.hostLocalBlocks.$plus$plus$eq((IterableOnce)hostLocalBlocksByExecutor.values().flatMap((infos) -> (Seq)infos.map((info) -> new Tuple2(info._1(), info._3()))));
         return collectedRemoteRequests;
      } else {
         throw new MatchError(var15);
      }
   }

   private FetchRequest createFetchRequest(final Seq blocks, final BlockManagerId address, final boolean forMergedMetas) {
      this.logDebug((Function0)(() -> "Creating fetch request of " + ((IterableOnceOps)blocks.map((x$9) -> BoxesRunTime.boxToLong($anonfun$createFetchRequest$2(x$9)))).sum(scala.math.Numeric.LongIsIntegral..MODULE$) + " at " + address + " with " + blocks.size() + " blocks"));
      return new FetchRequest(address, blocks, forMergedMetas);
   }

   private ArrayBuffer createFetchRequests(final Seq curBlocks, final BlockManagerId address, final boolean isLast, final ArrayBuffer collectedRemoteRequests, final boolean enableBatchFetch, final boolean forMergedMetas) {
      Seq mergedBlocks = ShuffleBlockFetcherIterator$.MODULE$.mergeContinuousShuffleBlockIdsIfNeeded(curBlocks, enableBatchFetch);
      this.numBlocksToFetch += mergedBlocks.size();
      ArrayBuffer retBlocks = new ArrayBuffer();
      if (mergedBlocks.length() <= this.maxBlocksInFlightPerAddress) {
         collectedRemoteRequests.$plus$eq(this.createFetchRequest(mergedBlocks, address, forMergedMetas));
      } else {
         mergedBlocks.grouped(this.maxBlocksInFlightPerAddress).foreach((blocks) -> {
            if (blocks.length() != this.maxBlocksInFlightPerAddress && !isLast) {
               retBlocks.$plus$plus$eq(blocks);
               this.numBlocksToFetch -= blocks.size();
               return BoxedUnit.UNIT;
            } else {
               return collectedRemoteRequests.$plus$eq(this.createFetchRequest(blocks, address, forMergedMetas));
            }
         });
         BoxedUnit var10000 = BoxedUnit.UNIT;
      }

      return retBlocks;
   }

   private boolean createFetchRequests$default$6() {
      return false;
   }

   private void collectFetchRequests(final BlockManagerId address, final Seq blockInfos, final ArrayBuffer collectedRemoteRequests) {
      Iterator iterator = blockInfos.iterator();
      long curRequestSize = 0L;
      ArrayBuffer curBlocks = new ArrayBuffer();

      while(iterator.hasNext()) {
         Tuple3 var13 = (Tuple3)iterator.next();
         if (var13 == null) {
            throw new MatchError(var13);
         }

         BlockId blockId = (BlockId)var13._1();
         long size = BoxesRunTime.unboxToLong(var13._2());
         int mapIndex = BoxesRunTime.unboxToInt(var13._3());
         Tuple3 var12 = new Tuple3(blockId, BoxesRunTime.boxToLong(size), BoxesRunTime.boxToInteger(mapIndex));
         BlockId blockId = (BlockId)var12._1();
         long size = BoxesRunTime.unboxToLong(var12._2());
         int mapIndex = BoxesRunTime.unboxToInt(var12._3());
         curBlocks.$plus$eq(new FetchBlockInfo(blockId, size, mapIndex));
         curRequestSize += size;
         if (blockId instanceof ShuffleBlockChunkId) {
            if (curRequestSize < this.targetRemoteRequestSize() && curBlocks.size() < this.maxBlocksInFlightPerAddress) {
               BoxedUnit var35 = BoxedUnit.UNIT;
            } else {
               curBlocks = this.createFetchRequests(curBlocks, address, false, collectedRemoteRequests, false, this.createFetchRequests$default$6());
               curRequestSize = BoxesRunTime.unboxToLong(((IterableOnceOps)curBlocks.map((x$11) -> BoxesRunTime.boxToLong($anonfun$collectFetchRequests$1(x$11)))).sum(scala.math.Numeric.LongIsIntegral..MODULE$));
               BoxedUnit var34 = BoxedUnit.UNIT;
            }
         } else if (blockId instanceof ShuffleMergedBlockId) {
            if (curBlocks.size() >= this.maxBlocksInFlightPerAddress) {
               curBlocks = this.createFetchRequests(curBlocks, address, false, collectedRemoteRequests, false, true);
               BoxedUnit var32 = BoxedUnit.UNIT;
            } else {
               BoxedUnit var33 = BoxedUnit.UNIT;
            }
         } else {
            boolean mayExceedsMaxBlocks = !this.doBatchFetch && curBlocks.size() >= this.maxBlocksInFlightPerAddress;
            if (curRequestSize < this.targetRemoteRequestSize() && !mayExceedsMaxBlocks) {
               BoxedUnit var31 = BoxedUnit.UNIT;
            } else {
               curBlocks = this.createFetchRequests(curBlocks, address, false, collectedRemoteRequests, this.doBatchFetch, this.createFetchRequests$default$6());
               curRequestSize = BoxesRunTime.unboxToLong(((IterableOnceOps)curBlocks.map((x$12) -> BoxesRunTime.boxToLong($anonfun$collectFetchRequests$2(x$12)))).sum(scala.math.Numeric.LongIsIntegral..MODULE$));
               BoxedUnit var10000 = BoxedUnit.UNIT;
            }
         }
      }

      if (curBlocks.nonEmpty()) {
         BlockId var26 = ((FetchBlockInfo)curBlocks.head()).blockId();
         Tuple2.mcZZ.sp var25 = var26 instanceof ShuffleBlockChunkId ? new Tuple2.mcZZ.sp(false, false) : (var26 instanceof ShuffleMergedBlockId ? new Tuple2.mcZZ.sp(false, true) : new Tuple2.mcZZ.sp(this.doBatchFetch, false));
         if (var25 != null) {
            boolean enableBatchFetch = ((Tuple2)var25)._1$mcZ$sp();
            boolean forMergedMetas = ((Tuple2)var25)._2$mcZ$sp();
            Tuple2.mcZZ.sp var24 = new Tuple2.mcZZ.sp(enableBatchFetch, forMergedMetas);
            boolean enableBatchFetch = ((Tuple2)var24)._1$mcZ$sp();
            boolean forMergedMetas = ((Tuple2)var24)._2$mcZ$sp();
            this.createFetchRequests(curBlocks, address, true, collectedRemoteRequests, enableBatchFetch, forMergedMetas);
         } else {
            throw new MatchError(var25);
         }
      }
   }

   private void assertPositiveBlockSize(final BlockId blockId, final long blockSize) {
      if (blockSize < 0L) {
         throw new BlockException(blockId, "Negative block size " + this.size());
      } else if (blockSize == 0L) {
         throw new BlockException(blockId, "Zero-sized blocks should be excluded.");
      }
   }

   private void checkBlockSizes(final Seq blockInfos) {
      blockInfos.foreach((x0$1) -> {
         $anonfun$checkBlockSizes$1(this, x0$1);
         return BoxedUnit.UNIT;
      });
   }

   private void fetchLocalBlocks(final LinkedHashSet localBlocks) {
      this.logDebug((Function0)(() -> "Start fetching local blocks: " + localBlocks.mkString(", ")));
      Iterator iter = localBlocks.iterator();

      while(iter.hasNext()) {
         Tuple2 var6 = (Tuple2)iter.next();
         if (var6 == null) {
            throw new MatchError(var6);
         }

         BlockId blockId = (BlockId)var6._1();
         int mapIndex = var6._2$mcI$sp();
         Tuple2 var5 = new Tuple2(blockId, BoxesRunTime.boxToInteger(mapIndex));
         BlockId blockId = (BlockId)var5._1();
         int mapIndex = var5._2$mcI$sp();

         try {
            ManagedBuffer buf = this.blockManager.getLocalBlockData(blockId);
            this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incLocalBlocksFetched(1L);
            this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incLocalBytesRead(buf.size());
            buf.retain();
            this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.put(new SuccessFetchResult(blockId, mapIndex, this.blockManager.blockManagerId(), buf.size(), buf, false));
         } catch (Exception var16) {
            if (var16 instanceof ClosedByInterruptException var14) {
               this.logError(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Error occurred while fetching local blocks, ", ""})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.ERROR..MODULE$, var14.getMessage())})))));
               BoxedUnit var17 = BoxedUnit.UNIT;
            } else {
               if (var16 == null) {
                  throw new MatchError(var16);
               }

               this.logError((Function0)(() -> "Error occurred while fetching local blocks"), var16);
               BoxedUnit var10000 = BoxedUnit.UNIT;
            }

            this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.put(new FailureFetchResult(blockId, mapIndex, this.blockManager.blockManagerId(), var16));
            return;
         }
      }

   }

   private boolean fetchHostLocalBlock(final BlockId blockId, final int mapIndex, final String[] localDirs, final BlockManagerId blockManagerId) {
      boolean var10000;
      try {
         ManagedBuffer buf = this.blockManager.getHostLocalShuffleData(blockId, localDirs);
         buf.retain();
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.put(new SuccessFetchResult(blockId, mapIndex, blockManagerId, buf.size(), buf, false));
         var10000 = true;
      } catch (Exception var7) {
         this.logError((Function0)(() -> "Error occurred while fetching local blocks"), var7);
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.put(new FailureFetchResult(blockId, mapIndex, blockManagerId, var7));
         var10000 = false;
      }

      return var10000;
   }

   private void fetchHostLocalBlocks(final HostLocalDirManager hostLocalDirManager, final LinkedHashMap hostLocalBlocksByExecutor) {
      scala.collection.immutable.Map cachedDirsByExec = hostLocalDirManager.getCachedHostLocalDirs();
      Tuple2 var9 = hostLocalBlocksByExecutor.partition((x0$1) -> BoxesRunTime.boxToBoolean($anonfun$fetchHostLocalBlocks$1(cachedDirsByExec, x0$1)));
      if (var9 != null) {
         LinkedHashMap hasCache = (LinkedHashMap)var9._1();
         LinkedHashMap noCache = (LinkedHashMap)var9._2();
         Tuple2 var8 = new Tuple2(hasCache, noCache);
         LinkedHashMap hasCache = (LinkedHashMap)var8._1();
         LinkedHashMap noCache = (LinkedHashMap)var8._2();
         Tuple2 var7 = new Tuple2(hasCache.toMap(scala..less.colon.less..MODULE$.refl()), noCache.toMap(scala..less.colon.less..MODULE$.refl()));
         if (var7 != null) {
            scala.collection.immutable.Map hostLocalBlocksWithCachedDirs = (scala.collection.immutable.Map)var7._1();
            scala.collection.immutable.Map hostLocalBlocksWithMissingDirs = (scala.collection.immutable.Map)var7._2();
            Tuple2 var6 = new Tuple2(hostLocalBlocksWithCachedDirs, hostLocalBlocksWithMissingDirs);
            scala.collection.immutable.Map hostLocalBlocksWithCachedDirs = (scala.collection.immutable.Map)var6._1();
            scala.collection.immutable.Map hostLocalBlocksWithMissingDirs = (scala.collection.immutable.Map)var6._2();
            if (hostLocalBlocksWithMissingDirs.nonEmpty()) {
               this.logDebug((Function0)(() -> "Asynchronous fetching host-local blocks without cached executors' dir: " + hostLocalBlocksWithMissingDirs.mkString(", ")));
               Object var10000;
               if (this.blockManager.externalShuffleServiceEnabled()) {
                  String host = this.blockManager.blockManagerId().host();
                  int port = this.blockManager.externalShuffleServicePort();
                  var10000 = new scala.collection.immutable..colon.colon(new Tuple3(host, BoxesRunTime.boxToInteger(port), hostLocalBlocksWithMissingDirs.keys().toArray(scala.reflect.ClassTag..MODULE$.apply(BlockManagerId.class))), scala.collection.immutable.Nil..MODULE$);
               } else {
                  var10000 = ((IterableOnceOps)hostLocalBlocksWithMissingDirs.keys().map((bmId) -> new Tuple3(bmId.host(), BoxesRunTime.boxToInteger(bmId.port()), new BlockManagerId[]{bmId}))).toSeq();
               }

               scala.collection.immutable.Seq dirFetchRequests = (scala.collection.immutable.Seq)var10000;
               dirFetchRequests.foreach((x0$2) -> {
                  $anonfun$fetchHostLocalBlocks$4(this, hostLocalDirManager, hostLocalBlocksWithMissingDirs, x0$2);
                  return BoxedUnit.UNIT;
               });
            }

            if (hostLocalBlocksWithCachedDirs.nonEmpty()) {
               this.logDebug((Function0)(() -> "Synchronous fetching host-local blocks with cached executors' dir: " + hostLocalBlocksWithCachedDirs.mkString(", ")));
               this.fetchMultipleHostLocalBlocks(hostLocalBlocksWithCachedDirs, cachedDirsByExec, true);
            }
         } else {
            throw new MatchError(var7);
         }
      } else {
         throw new MatchError(var9);
      }
   }

   private void fetchMultipleHostLocalBlocks(final scala.collection.immutable.Map bmIdToBlocks, final scala.collection.immutable.Map localDirsByExecId, final boolean cached) {
      boolean allFetchSucceeded = bmIdToBlocks.forall((x0$1) -> BoxesRunTime.boxToBoolean($anonfun$fetchMultipleHostLocalBlocks$1(this, localDirsByExecId, x0$1)));
      if (allFetchSucceeded) {
         this.logDebug((Function0)(() -> {
            String var10000 = bmIdToBlocks.keys().mkString(", ");
            return "Got host-local blocks from " + var10000 + " (" + (cached ? "with" : "without") + " cached executors' dir) in " + Utils$.MODULE$.getUsedTimeNs(this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$startTimeNs);
         }));
      }
   }

   private void initialize() {
      this.context.addTaskCompletionListener((TaskCompletionListener)this.onCompleteCallback);
      LinkedHashSet localBlocks = (LinkedHashSet)scala.collection.mutable.LinkedHashSet..MODULE$.apply(scala.collection.immutable.Nil..MODULE$);
      LinkedHashMap hostLocalBlocksByExecutor = (LinkedHashMap)scala.collection.mutable.LinkedHashMap..MODULE$.apply(scala.collection.immutable.Nil..MODULE$);
      LinkedHashSet pushMergedLocalBlocks = (LinkedHashSet)scala.collection.mutable.LinkedHashSet..MODULE$.apply(scala.collection.immutable.Nil..MODULE$);
      ArrayBuffer remoteRequests = this.partitionBlocksByFetchMode(this.blocksByAddress, localBlocks, hostLocalBlocksByExecutor, pushMergedLocalBlocks);
      this.fetchRequests.$plus$plus$eq(Utils$.MODULE$.randomize(remoteRequests, scala.reflect.ClassTag..MODULE$.apply(FetchRequest.class)));
      scala.Predef..MODULE$.assert(0 == this.reqsInFlight == (0L == this.bytesInFlight), () -> "expected reqsInFlight = 0 but found reqsInFlight = " + this.reqsInFlight + ", expected bytesInFlight = 0 but found bytesInFlight = " + this.bytesInFlight);
      this.fetchUpToMaxBytes();
      int numDeferredRequest = BoxesRunTime.unboxToInt(((IterableOnceOps)this.deferredFetchRequests.values().map((x$19) -> BoxesRunTime.boxToInteger($anonfun$initialize$2(x$19)))).sum(scala.math.Numeric.IntIsIntegral..MODULE$));
      int numFetches = remoteRequests.size() - this.fetchRequests.size() - numDeferredRequest;
      this.logInfo(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Started ", " remote fetches in "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.COUNT..MODULE$, BoxesRunTime.boxToInteger(numFetches))}))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"", ""})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.DURATION..MODULE$, Utils$.MODULE$.getUsedTimeNs(this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$startTimeNs))})))).$plus(numDeferredRequest > 0 ? this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{", deferred ", " requests"})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.NUM_REQUESTS..MODULE$, BoxesRunTime.boxToInteger(numDeferredRequest))}))) : this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{""})))).log(scala.collection.immutable.Nil..MODULE$))));
      this.fetchLocalBlocks(localBlocks);
      this.logDebug((Function0)(() -> "Got local blocks in " + Utils$.MODULE$.getUsedTimeNs(this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$startTimeNs)));
      this.fetchAllHostLocalBlocks(hostLocalBlocksByExecutor);
      this.pushBasedFetchHelper.fetchAllPushMergedLocalBlocks(pushMergedLocalBlocks);
   }

   private void fetchAllHostLocalBlocks(final LinkedHashMap hostLocalBlocksByExecutor) {
      if (hostLocalBlocksByExecutor.nonEmpty()) {
         this.blockManager.hostLocalDirManager().foreach((x$20) -> {
            $anonfun$fetchAllHostLocalBlocks$1(this, hostLocalBlocksByExecutor, x$20);
            return BoxedUnit.UNIT;
         });
      }
   }

   private void shuffleMetricsUpdate(final BlockId blockId, final ManagedBuffer buf, final boolean local) {
      if (local) {
         this.shuffleLocalMetricsUpdate(blockId, buf);
      } else {
         this.shuffleRemoteMetricsUpdate(blockId, buf);
      }
   }

   private void shuffleLocalMetricsUpdate(final BlockId blockId, final ManagedBuffer buf) {
      if (blockId instanceof ShuffleBlockChunkId var5) {
         int chunkCardinality = this.pushBasedFetchHelper.getShuffleChunkCardinality(var5);
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incLocalMergedChunksFetched(1L);
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incLocalMergedBlocksFetched((long)chunkCardinality);
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incLocalMergedBytesRead(buf.size());
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incLocalBlocksFetched((long)chunkCardinality);
         BoxedUnit var10000 = BoxedUnit.UNIT;
      } else {
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incLocalBlocksFetched(1L);
         BoxedUnit var7 = BoxedUnit.UNIT;
      }

      this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incLocalBytesRead(buf.size());
   }

   private void shuffleRemoteMetricsUpdate(final BlockId blockId, final ManagedBuffer buf) {
      if (blockId instanceof ShuffleBlockChunkId var5) {
         int chunkCardinality = this.pushBasedFetchHelper.getShuffleChunkCardinality(var5);
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incRemoteMergedChunksFetched(1L);
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incRemoteMergedBlocksFetched((long)chunkCardinality);
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incRemoteMergedBytesRead(buf.size());
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incRemoteBlocksFetched((long)chunkCardinality);
         BoxedUnit var10000 = BoxedUnit.UNIT;
      } else {
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incRemoteBlocksFetched(1L);
         BoxedUnit var7 = BoxedUnit.UNIT;
      }

      this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incRemoteBytesRead(buf.size());
      if (buf instanceof FileSegmentManagedBuffer) {
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incRemoteBytesReadToDisk(buf.size());
      }
   }

   public boolean hasNext() {
      return this.numBlocksProcessed < this.numBlocksToFetch;
   }

   public Tuple2 next() {
      if (!this.hasNext()) {
         throw SparkCoreErrors$.MODULE$.noSuchElementError();
      } else {
         ++this.numBlocksProcessed;
         FetchResult result = null;
         InputStream input = null;
         CheckedInputStream checkedIn = null;

         boolean streamCompressedOrEncrypted;
         for(streamCompressedOrEncrypted = false; result == null; this.fetchUpToMaxBytes()) {
            long startFetchWait = System.nanoTime();
            result = (FetchResult)this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.take();
            long fetchWaitTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startFetchWait);
            this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incFetchWaitTime(fetchWaitTime);
            if (!(result instanceof SuccessFetchResult)) {
               if (result instanceof FailureFetchResult) {
                  FailureFetchResult var33 = (FailureFetchResult)result;
                  BlockId blockId = var33.blockId();
                  int mapIndex = var33.mapIndex();
                  BlockManagerId address = var33.address();
                  Throwable e = var33.e();
                  String errorMsg = null;
                  if (e instanceof OutOfDirectMemoryError) {
                     MessageWithContext logMessage = this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Block ", " fetch failed after "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.BLOCK_ID..MODULE$, blockId)}))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"", " retries due to Netty OOM"})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.MAX_ATTEMPTS..MODULE$, BoxesRunTime.boxToInteger(this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$maxAttemptsOnNettyOOM))}))));
                     this.logError(org.apache.spark.internal.LogEntry..MODULE$.from(() -> logMessage));
                     errorMsg = logMessage.message();
                  }

                  throw this.throwFetchFailedException(blockId, mapIndex, address, e, new Some(errorMsg));
               }

               if (result instanceof DeferFetchRequestResult) {
                  DeferFetchRequestResult var40 = (DeferFetchRequestResult)result;
                  FetchRequest request = var40.fetchRequest();
                  BlockManagerId address = request.address();
                  this.numBlocksInFlightPerAddress.update(address, BoxesRunTime.boxToInteger(BoxesRunTime.unboxToInt(this.numBlocksInFlightPerAddress.apply(address)) - request.blocks().size()));
                  this.bytesInFlight -= request.size();
                  --this.reqsInFlight;
                  this.logDebug((Function0)(() -> "Number of requests in flight " + this.reqsInFlight));
                  Queue defReqQueue = (Queue)this.deferredFetchRequests.getOrElseUpdate(address, () -> new Queue(scala.collection.mutable.Queue..MODULE$.$lessinit$greater$default$1()));
                  defReqQueue.enqueue(request);
                  result = null;
                  BoxedUnit var90 = BoxedUnit.UNIT;
               } else if (result instanceof FallbackOnPushMergedFailureResult) {
                  FallbackOnPushMergedFailureResult var44 = (FallbackOnPushMergedFailureResult)result;
                  BlockId blockId = var44.blockId();
                  BlockManagerId address = var44.address();
                  long size = var44.size();
                  boolean isNetworkReqDone = var44.isNetworkReqDone();
                  if (this.pushBasedFetchHelper.isRemotePushMergedBlockAddress(address)) {
                     this.numBlocksInFlightPerAddress.update(address, BoxesRunTime.boxToInteger(BoxesRunTime.unboxToInt(this.numBlocksInFlightPerAddress.apply(address)) - 1));
                     this.bytesInFlight -= size;
                  }

                  if (isNetworkReqDone) {
                     --this.reqsInFlight;
                     this.logDebug((Function0)(() -> "Number of requests in flight " + this.reqsInFlight));
                  }

                  this.pushBasedFetchHelper.initiateFallbackFetchForPushMergedBlock(blockId, address);
                  result = null;
                  BoxedUnit var91 = BoxedUnit.UNIT;
               } else if (result instanceof PushMergedLocalMetaFetchResult) {
                  PushMergedLocalMetaFetchResult var50 = (PushMergedLocalMetaFetchResult)result;
                  int shuffleId = var50.shuffleId();
                  int shuffleMergeId = var50.shuffleMergeId();
                  int reduceId = var50.reduceId();
                  RoaringBitmap[] bitmaps = var50.bitmaps();
                  String[] localDirs = var50.localDirs();
                  ShuffleMergedBlockId shuffleBlockId = new ShuffleMergedBlockId(shuffleId, shuffleMergeId, reduceId);

                  try {
                     scala.collection.immutable.Seq bufs = this.blockManager.getLocalMergedBlockData(shuffleBlockId, localDirs);
                     --this.numBlocksToFetch;
                     this.numBlocksToFetch += bufs.size();
                     ((IterableOnceOps)bufs.zipWithIndex()).foreach((x0$1) -> {
                        $anonfun$next$11(this, shuffleId, shuffleMergeId, reduceId, bitmaps, x0$1);
                        return BoxedUnit.UNIT;
                     });
                  } catch (Exception var78) {
                     this.logWarning((Function0)(() -> "Error occurred while reading push-merged-local index, prepare to fetch the original blocks"), var78);
                     this.pushBasedFetchHelper.initiateFallbackFetchForPushMergedBlock(shuffleBlockId, this.pushBasedFetchHelper.localShuffleMergerBlockMgrId());
                  }

                  result = null;
                  BoxedUnit var92 = BoxedUnit.UNIT;
               } else if (result instanceof PushMergedRemoteMetaFetchResult) {
                  PushMergedRemoteMetaFetchResult var59 = (PushMergedRemoteMetaFetchResult)result;
                  int shuffleId = var59.shuffleId();
                  int shuffleMergeId = var59.shuffleMergeId();
                  int reduceId = var59.reduceId();
                  long blockSize = var59.blockSize();
                  RoaringBitmap[] bitmaps = var59.bitmaps();
                  BlockManagerId address = var59.address();
                  this.numBlocksInFlightPerAddress.update(address, BoxesRunTime.boxToInteger(BoxesRunTime.unboxToInt(this.numBlocksInFlightPerAddress.apply(address)) - 1));
                  --this.numBlocksToFetch;
                  ArrayBuffer blocksToFetch = this.pushBasedFetchHelper.createChunkBlockInfosFromMetaResponse(shuffleId, shuffleMergeId, reduceId, blockSize, bitmaps);
                  ArrayBuffer additionalRemoteReqs = new ArrayBuffer();
                  this.collectFetchRequests(address, blocksToFetch.toSeq(), additionalRemoteReqs);
                  this.fetchRequests.$plus$plus$eq(additionalRemoteReqs);
                  result = null;
                  BoxedUnit var93 = BoxedUnit.UNIT;
               } else {
                  if (!(result instanceof PushMergedRemoteMetaFailedFetchResult)) {
                     throw new MatchError(result);
                  }

                  PushMergedRemoteMetaFailedFetchResult var69 = (PushMergedRemoteMetaFailedFetchResult)result;
                  int shuffleId = var69.shuffleId();
                  int shuffleMergeId = var69.shuffleMergeId();
                  int reduceId = var69.reduceId();
                  BlockManagerId address = var69.address();
                  this.numBlocksInFlightPerAddress.update(address, BoxesRunTime.boxToInteger(BoxesRunTime.unboxToInt(this.numBlocksInFlightPerAddress.apply(address)) - 1));
                  this.pushBasedFetchHelper.initiateFallbackFetchForPushMergedBlock(new ShuffleMergedBlockId(shuffleId, shuffleMergeId, reduceId), address);
                  result = null;
                  BoxedUnit var94 = BoxedUnit.UNIT;
               }
            } else {
               BlockId blockId;
               int mapIndex;
               BlockManagerId address;
               long size;
               ManagedBuffer buf;
               boolean isNetworkReqDone;
               label394: {
                  SuccessFetchResult var12 = (SuccessFetchResult)result;
                  blockId = var12.blockId();
                  mapIndex = var12.mapIndex();
                  address = var12.address();
                  size = var12.size();
                  buf = var12.buf();
                  isNetworkReqDone = var12.isNetworkReqDone();
                  BlockManagerId var20 = this.blockManager.blockManagerId();
                  if (address == null) {
                     if (var20 == null) {
                        break label394;
                     }
                  } else if (address.equals(var20)) {
                     break label394;
                  }

                  if (!this.hostLocalBlocks.contains(scala.Predef.ArrowAssoc..MODULE$.$minus$greater$extension(scala.Predef..MODULE$.ArrowAssoc(blockId), BoxesRunTime.boxToInteger(mapIndex))) && !this.pushBasedFetchHelper.isLocalPushMergedBlockAddress(address)) {
                     this.numBlocksInFlightPerAddress.update(address, BoxesRunTime.boxToInteger(BoxesRunTime.unboxToInt(this.numBlocksInFlightPerAddress.apply(address)) - 1));
                     this.shuffleMetricsUpdate(blockId, buf, false);
                     this.bytesInFlight -= size;
                  } else {
                     this.shuffleMetricsUpdate(blockId, buf, true);
                  }
               }

               if (isNetworkReqDone) {
                  --this.reqsInFlight;
                  ShuffleBlockFetcherIterator$.MODULE$.resetNettyOOMFlagIfPossible(this.maxReqSizeShuffleToMem());
                  this.logDebug((Function0)(() -> "Number of requests in flight " + this.reqsInFlight));
               }

               Object var10000;
               if (buf.size() == 0L) {
                  MessageWithContext msg = this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Received a zero-size buffer for block ", " "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.BLOCK_ID..MODULE$, blockId)}))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"from ", " "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.URI..MODULE$, address)})))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"(expectedApproxSize = ", ", "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.NUM_BYTES..MODULE$, BoxesRunTime.boxToLong(size))})))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"isNetworkReqDone=", ")"})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.IS_NETWORK_REQUEST_DONE..MODULE$, BoxesRunTime.boxToBoolean(isNetworkReqDone))}))));
                  if (!blockId.isShuffleChunk()) {
                     throw this.throwFetchFailedException(blockId, mapIndex, address, new IOException(msg.message()), this.throwFetchFailedException$default$5());
                  }

                  this.logWarning(org.apache.spark.internal.LogEntry..MODULE$.from(() -> msg));
                  this.pushBasedFetchHelper.initiateFallbackFetchForPushMergedBlock(blockId, address);
                  this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incCorruptMergedBlockChunks(1L);
                  result = null;
                  var10000 = null;
               } else {
                  try {
                     InputStream bufIn = buf.createInputStream();
                     if (this.checksumEnabled) {
                        Checksum checksum = ShuffleChecksumHelper.getChecksumByAlgorithm(this.checksumAlgorithm);
                        checkedIn = new CheckedInputStream(bufIn, checksum);
                        var10000 = checkedIn;
                     } else {
                        var10000 = bufIn;
                     }
                  } catch (IOException var81) {
                     scala.Predef..MODULE$.assert(buf instanceof FileSegmentManagedBuffer);
                     if (var81 instanceof ClosedByInterruptException) {
                        ClosedByInterruptException var27 = (ClosedByInterruptException)var81;
                        LazyRef error$lzy = new LazyRef();
                        this.logError(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Failed to create input stream from local block, ", ""})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{error$1(error$lzy, var27)})))));
                        BoxedUnit var83 = BoxedUnit.UNIT;
                     } else {
                        if (var81 == null) {
                           throw new MatchError(var81);
                        }

                        this.logError((Function0)(() -> "Failed to create input stream from local block"), var81);
                        BoxedUnit var82 = BoxedUnit.UNIT;
                     }

                     buf.release();
                     if (!blockId.isShuffleChunk()) {
                        throw this.throwFetchFailedException(blockId, mapIndex, address, var81, this.throwFetchFailedException$default$5());
                     }

                     this.pushBasedFetchHelper.initiateFallbackFetchForPushMergedBlock(blockId, address);
                     result = null;
                     var10000 = null;
                  }
               }

               InputStream in = (InputStream)var10000;
               if (in != null) {
                  try {
                     input = (InputStream)this.streamWrapper.apply(blockId, in);
                     streamCompressedOrEncrypted = input != in;
                     if (streamCompressedOrEncrypted && this.detectCorruptUseExtraMemory) {
                        input = Utils$.MODULE$.copyStreamUpTo(input, this.maxBytesInFlight / 3L);
                        BoxedUnit var89 = BoxedUnit.UNIT;
                     } else {
                        BoxedUnit var88 = BoxedUnit.UNIT;
                     }
                  } catch (IOException var79) {
                     if (this.checksumEnabled && this.corruptedBlocks.contains(blockId)) {
                        BoxedUnit var85 = BoxedUnit.UNIT;
                     } else {
                        buf.release();
                     }

                     if (blockId.isShuffleChunk()) {
                        this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incCorruptMergedBlockChunks(1L);
                        this.pushBasedFetchHelper.initiateFallbackFetchForPushMergedBlock(blockId, address);
                        result = null;
                        BoxedUnit var86 = BoxedUnit.UNIT;
                     } else {
                        if (buf instanceof FileSegmentManagedBuffer) {
                           throw this.throwFetchFailedException(blockId, mapIndex, address, var79, this.throwFetchFailedException$default$5());
                        }

                        if (this.corruptedBlocks.contains(blockId)) {
                           if (this.checksumEnabled) {
                              String diagnosisResponse = this.diagnoseCorruption(checkedIn, address, blockId);
                              buf.release();
                              this.logError((Function0)(() -> diagnosisResponse));
                              throw this.throwFetchFailedException(blockId, mapIndex, address, var79, new Some(diagnosisResponse));
                           }

                           throw this.throwFetchFailedException(blockId, mapIndex, address, var79, this.throwFetchFailedException$default$5());
                        }

                        this.logWarning((LogEntry)org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"got an corrupted block ", " "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.BLOCK_ID..MODULE$, blockId)}))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"from ", ", fetch again"})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.URI..MODULE$, address)}))))), var79);
                        this.corruptedBlocks.$plus$eq(blockId);
                        this.fetchRequests.$plus$eq(new FetchRequest(address, scala.Predef..MODULE$.wrapRefArray(new FetchBlockInfo[]{new FetchBlockInfo(blockId, size, mapIndex)}), ShuffleBlockFetcherIterator.FetchRequest$.MODULE$.apply$default$3()));
                        result = null;
                        BoxedUnit var87 = BoxedUnit.UNIT;
                     }
                  } finally {
                     if (blockId.isShuffleChunk()) {
                        this.pushBasedFetchHelper.removeChunk((ShuffleBlockChunkId)blockId);
                     }

                     if (input == null) {
                        in.close();
                     }

                  }
               } else {
                  BoxedUnit var84 = BoxedUnit.UNIT;
               }
            }
         }

         this.currentResult = (SuccessFetchResult)result;
         return new Tuple2(this.currentResult.blockId(), new BufferReleasingInputStream(input, this, this.currentResult.blockId(), this.currentResult.mapIndex(), this.currentResult.address(), this.detectCorrupt && streamCompressedOrEncrypted, this.currentResult.isNetworkReqDone(), scala.Option..MODULE$.apply(checkedIn)));
      }
   }

   public String diagnoseCorruption(final CheckedInputStream checkedIn, final BlockManagerId address, final BlockId blockId) {
      this.logInfo((Function0)(() -> "Start corruption diagnosis."));
      if (!(blockId instanceof ShuffleBlockId var7)) {
         if (blockId instanceof ShuffleBlockChunkId var19) {
            this.logWarning(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"BlockChunk ", " "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.SHUFFLE_BLOCK_INFO..MODULE$, var19)}))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"is corrupted but corruption diagnosis is skipped due to lack of shuffle "})))).log(scala.collection.immutable.Nil..MODULE$)).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"checksum support for push-based shuffle."})))).log(scala.collection.immutable.Nil..MODULE$))));
            return "BlockChunk " + var19 + " is corrupted but corruption diagnosis is skipped due to lack of shuffle checksum support for push-based shuffle.";
         } else if (blockId instanceof ShuffleBlockBatchId var20) {
            this.logWarning(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"BlockBatch ", " is corrupted "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.SHUFFLE_BLOCK_INFO..MODULE$, var20)}))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"but corruption diagnosis is skipped due to lack of shuffle checksum support for "})))).log(scala.collection.immutable.Nil..MODULE$)).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"ShuffleBlockBatchId"})))).log(scala.collection.immutable.Nil..MODULE$))));
            return "BlockBatch " + var20 + " is corrupted but corruption diagnosis is skipped due to lack of shuffle checksum support for ShuffleBlockBatchId";
         } else if (blockId != null) {
            throw org.apache.spark.SparkException..MODULE$.internalError("Unexpected type of BlockId, " + blockId, "STORAGE");
         } else {
            throw new MatchError(blockId);
         }
      } else {
         long startTimeNs = System.nanoTime();
         byte[] buffer = new byte[8192];
         Cause cause = null;

         try {
            while(checkedIn.read(buffer) != -1) {
            }

            long checksum = checkedIn.getChecksum().getValue();
            cause = this.shuffleClient.diagnoseCorruption(address.host(), address.port(), address.executorId(), var7.shuffleId(), var7.mapId(), var7.reduceId(), checksum, this.checksumAlgorithm);
         } catch (Exception var22) {
            this.logWarning((Function0)(() -> "Unable to diagnose the corruption cause of the corrupted block"), var22);
            cause = Cause.UNKNOWN_ISSUE;
         }

         long duration = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTimeNs);
         String diagnosisResponse = Cause.UNSUPPORTED_CHECKSUM_ALGORITHM.equals(cause) ? "Block " + blockId + " is corrupted but corruption diagnosis failed due to unsupported checksum algorithm: " + this.checksumAlgorithm : (Cause.CHECKSUM_VERIFY_PASS.equals(cause) ? "Block " + blockId + " is corrupted but checksum verification passed" : (Cause.UNKNOWN_ISSUE.equals(cause) ? "Block " + blockId + " is corrupted but the cause is unknown" : "Block " + blockId + " is corrupted due to " + cause));
         this.logInfo(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Finished corruption diagnosis in ", " ms. "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.DURATION..MODULE$, BoxesRunTime.boxToLong(duration))}))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"", ""})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.STATUS..MODULE$, diagnosisResponse)}))))));
         return diagnosisResponse;
      }
   }

   public Iterator toCompletionIterator() {
      return CompletionIterator$.MODULE$.apply(this, (JFunction0.mcV.sp)() -> this.onCompleteCallback.onComplete(this.context));
   }

   private void fetchUpToMaxBytes() {
      if (ShuffleBlockFetcherIterator$.MODULE$.isNettyOOMOnShuffle().get()) {
         if (this.reqsInFlight > 0) {
            return;
         }

         ShuffleBlockFetcherIterator$.MODULE$.resetNettyOOMFlagIfPossible(0L);
      }

      if (this.deferredFetchRequests.nonEmpty()) {
         this.deferredFetchRequests.withFilter((check$ifrefutable$2) -> BoxesRunTime.boxToBoolean($anonfun$fetchUpToMaxBytes$1(check$ifrefutable$2))).foreach((x$21) -> {
            $anonfun$fetchUpToMaxBytes$2(this, x$21);
            return BoxedUnit.UNIT;
         });
      }

      while(this.isRemoteBlockFetchable$1(this.fetchRequests)) {
         FetchRequest request = (FetchRequest)this.fetchRequests.dequeue();
         BlockManagerId remoteAddress = request.address();
         if (this.isRemoteAddressMaxedOut$1(remoteAddress, request)) {
            this.logDebug((Function0)(() -> "Deferring fetch request for " + remoteAddress + " with " + request.blocks().size() + " blocks"));
            Queue defReqQueue = (Queue)this.deferredFetchRequests.getOrElse(remoteAddress, () -> new Queue(scala.collection.mutable.Queue..MODULE$.$lessinit$greater$default$1()));
            defReqQueue.enqueue(request);
            this.deferredFetchRequests.update(remoteAddress, defReqQueue);
         } else {
            this.send$1(remoteAddress, request);
         }
      }

   }

   public Nothing throwFetchFailedException(final BlockId blockId, final int mapIndex, final BlockManagerId address, final Throwable e, final Option message) {
      String msg = (String)message.getOrElse(() -> e.getMessage());
      if (blockId instanceof ShuffleBlockId var9) {
         int shufId = var9.shuffleId();
         long mapId = var9.mapId();
         int reduceId = var9.reduceId();
         throw SparkCoreErrors$.MODULE$.fetchFailedError(address, shufId, mapId, mapIndex, reduceId, msg, e);
      } else if (blockId instanceof ShuffleBlockBatchId var14) {
         int shuffleId = var14.shuffleId();
         long mapId = var14.mapId();
         int startReduceId = var14.startReduceId();
         throw SparkCoreErrors$.MODULE$.fetchFailedError(address, shuffleId, mapId, mapIndex, startReduceId, msg, e);
      } else if (blockId instanceof ShuffleBlockChunkId var19) {
         int shuffleId = var19.shuffleId();
         int reduceId = var19.reduceId();
         throw SparkCoreErrors$.MODULE$.fetchFailedError(address, shuffleId, (long)MapOutputTracker$.MODULE$.SHUFFLE_PUSH_MAP_ID(), MapOutputTracker$.MODULE$.SHUFFLE_PUSH_MAP_ID(), reduceId, msg, e);
      } else {
         throw SparkCoreErrors$.MODULE$.failToGetNonShuffleBlockError(blockId, e);
      }
   }

   public Option throwFetchFailedException$default$5() {
      return scala.None..MODULE$;
   }

   public void addToResultsQueue(final FetchResult result) {
      this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.put(result);
   }

   public void decreaseNumBlocksToFetch(final int blocksFetched) {
      this.numBlocksToFetch -= blocksFetched;
   }

   public void fallbackFetch(final Iterator originalBlocksByAddr) {
      LinkedHashSet originalLocalBlocks = (LinkedHashSet)scala.collection.mutable.LinkedHashSet..MODULE$.apply(scala.collection.immutable.Nil..MODULE$);
      LinkedHashMap originalHostLocalBlocksByExecutor = (LinkedHashMap)scala.collection.mutable.LinkedHashMap..MODULE$.apply(scala.collection.immutable.Nil..MODULE$);
      LinkedHashSet originalMergedLocalBlocks = (LinkedHashSet)scala.collection.mutable.LinkedHashSet..MODULE$.apply(scala.collection.immutable.Nil..MODULE$);
      ArrayBuffer originalRemoteReqs = this.partitionBlocksByFetchMode(originalBlocksByAddr, originalLocalBlocks, originalHostLocalBlocksByExecutor, originalMergedLocalBlocks);
      this.fetchRequests.$plus$plus$eq(Utils$.MODULE$.randomize(originalRemoteReqs, scala.reflect.ClassTag..MODULE$.apply(FetchRequest.class)));
      this.logInfo(org.apache.spark.internal.LogEntry..MODULE$.from(() -> this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Created ", " fallback remote requests "})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.NUM_REQUESTS..MODULE$, BoxesRunTime.boxToInteger(originalRemoteReqs.size()))}))).$plus(this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"for push-merged"})))).log(scala.collection.immutable.Nil..MODULE$))));
      this.fetchLocalBlocks(originalLocalBlocks);
      scala.Predef..MODULE$.assert(originalMergedLocalBlocks.isEmpty(), () -> "There should be zero push-merged blocks during fallback");
      this.fetchAllHostLocalBlocks(originalHostLocalBlocksByExecutor);
   }

   public HashSet removePendingChunks(final ShuffleBlockChunkId failedBlockId, final BlockManagerId address) {
      HashSet removedChunkIds = new HashSet();
      filterRequests$1(this.fetchRequests, address, removedChunkIds, failedBlockId);
      this.deferredFetchRequests.get(address).foreach((defRequests) -> {
         filterRequests$1(defRequests, address, removedChunkIds, failedBlockId);
         return defRequests.isEmpty() ? this.deferredFetchRequests.remove(address) : BoxedUnit.UNIT;
      });
      return removedChunkIds;
   }

   // $FF: synthetic method
   public static final void $anonfun$cleanup$1(final ShuffleBlockFetcherIterator $this, final DownloadFile file) {
      if (!file.delete()) {
         $this.logWarning(org.apache.spark.internal.LogEntry..MODULE$.from(() -> $this.LogStringContext(new StringContext(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new String[]{"Failed to cleanup shuffle fetch temp file ", ""})))).log(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new MDC[]{new MDC(org.apache.spark.internal.LogKeys.PATH..MODULE$, file.path())})))));
      }
   }

   public final void org$apache$spark$storage$ShuffleBlockFetcherIterator$$enqueueDeferredFetchRequestIfNecessary$1(final HashSet remainingBlocks$1, final ArrayBuffer deferredBlocks$1, final scala.collection.immutable.Map infoMap$1, final BlockManagerId address$1) {
      if (remainingBlocks$1.isEmpty() && deferredBlocks$1.nonEmpty()) {
         ArrayBuffer blocks = (ArrayBuffer)deferredBlocks$1.map((blockId) -> {
            Tuple2 var4 = (Tuple2)infoMap$1.apply(blockId);
            if (var4 != null) {
               long size = var4._1$mcJ$sp();
               int mapIndex = var4._2$mcI$sp();
               Tuple2.mcJI.sp var3 = new Tuple2.mcJI.sp(size, mapIndex);
               long size = ((Tuple2)var3)._1$mcJ$sp();
               int mapIndexx = ((Tuple2)var3)._2$mcI$sp();
               return new FetchBlockInfo(BlockId$.MODULE$.apply(blockId), size, mapIndexx);
            } else {
               throw new MatchError(var4);
            }
         });
         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.put(new DeferFetchRequestResult(new FetchRequest(address$1, blocks, ShuffleBlockFetcherIterator.FetchRequest$.MODULE$.apply$default$3())));
         deferredBlocks$1.clear();
      }
   }

   public final void org$apache$spark$storage$ShuffleBlockFetcherIterator$$updateMergedReqsDuration$1(final boolean wasReqForMergedChunks, final HashSet remainingBlocks$1, final long requestStartTime$1) {
      if (remainingBlocks$1.isEmpty()) {
         long durationMs = TimeUnit.NANOSECONDS.toMillis(this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$clock.nanoTime() - requestStartTime$1);
         if (wasReqForMergedChunks) {
            this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incRemoteMergedReqsDuration(durationMs);
         }

         this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics.incRemoteReqsDuration(durationMs);
      }
   }

   private static final boolean updateMergedReqsDuration$default$1$1() {
      return false;
   }

   // $FF: synthetic method
   public static final boolean $anonfun$partitionBlocksByFetchMode$2(final Tuple2 check$ifrefutable$1) {
      return check$ifrefutable$1 != null;
   }

   // $FF: synthetic method
   public static final long $anonfun$partitionBlocksByFetchMode$5(final Tuple3 x$4) {
      return BoxesRunTime.unboxToLong(x$4._2());
   }

   // $FF: synthetic method
   public static final long $anonfun$partitionBlocksByFetchMode$8(final FetchBlockInfo x$5) {
      return x$5.size();
   }

   // $FF: synthetic method
   public static final long $anonfun$partitionBlocksByFetchMode$11(final FetchBlockInfo x$6) {
      return x$6.size();
   }

   // $FF: synthetic method
   public static final void $anonfun$partitionBlocksByFetchMode$3(final ShuffleBlockFetcherIterator $this, final LinkedHashSet pushMergedLocalBlocks$1, final LongRef pushMergedLocalBlockBytes$1, final ArrayBuffer collectedRemoteRequests$1, final Set localExecIds$1, final LinkedHashSet localBlocks$1, final LongRef localBlockBytes$1, final LinkedHashMap hostLocalBlocksByExecutor$1, final IntRef numHostLocalBlocks$1, final LongRef hostLocalBlockBytes$1, final Tuple2 x$7) {
      if (x$7 == null) {
         throw new MatchError(x$7);
      } else {
         BlockManagerId address = (BlockManagerId)x$7._1();
         Seq blockInfos = (Seq)x$7._2();
         $this.checkBlockSizes(blockInfos);
         if ($this.pushBasedFetchHelper.isPushMergedShuffleBlockAddress(address)) {
            label36: {
               String var30 = address.host();
               String var17 = $this.blockManager.blockManagerId().host();
               if (var30 == null) {
                  if (var17 == null) {
                     break label36;
                  }
               } else if (var30.equals(var17)) {
                  break label36;
               }

               $this.collectFetchRequests(address, blockInfos, collectedRemoteRequests$1);
               BoxedUnit var31 = BoxedUnit.UNIT;
               return;
            }

            $this.numBlocksToFetch += blockInfos.size();
            pushMergedLocalBlocks$1.$plus$plus$eq((IterableOnce)blockInfos.map((x$3) -> (BlockId)x$3._1()));
            pushMergedLocalBlockBytes$1.elem += BoxesRunTime.unboxToLong(((IterableOnceOps)blockInfos.map((x$4) -> BoxesRunTime.boxToLong($anonfun$partitionBlocksByFetchMode$5(x$4)))).sum(scala.math.Numeric.LongIsIntegral..MODULE$));
            BoxedUnit var32 = BoxedUnit.UNIT;
         } else if (localExecIds$1.contains(address.executorId())) {
            Seq mergedBlockInfos = ShuffleBlockFetcherIterator$.MODULE$.mergeContinuousShuffleBlockIdsIfNeeded((Seq)blockInfos.map((info) -> new FetchBlockInfo((BlockId)info._1(), BoxesRunTime.unboxToLong(info._2()), BoxesRunTime.unboxToInt(info._3()))), $this.doBatchFetch);
            $this.numBlocksToFetch += mergedBlockInfos.size();
            localBlocks$1.$plus$plus$eq((IterableOnce)mergedBlockInfos.map((info) -> new Tuple2(info.blockId(), BoxesRunTime.boxToInteger(info.mapIndex()))));
            localBlockBytes$1.elem += BoxesRunTime.unboxToLong(((IterableOnceOps)mergedBlockInfos.map((x$5) -> BoxesRunTime.boxToLong($anonfun$partitionBlocksByFetchMode$8(x$5)))).sum(scala.math.Numeric.LongIsIntegral..MODULE$));
            BoxedUnit var29 = BoxedUnit.UNIT;
         } else {
            label51: {
               if ($this.blockManager.hostLocalDirManager().isDefined()) {
                  String var10000 = address.host();
                  String var19 = $this.blockManager.blockManagerId().host();
                  if (var10000 == null) {
                     if (var19 == null) {
                        break label51;
                     }
                  } else if (var10000.equals(var19)) {
                     break label51;
                  }
               }

               Tuple2 var24 = Utils$.MODULE$.timeTakenMs((JFunction0.mcV.sp)() -> $this.collectFetchRequests(address, blockInfos, collectedRemoteRequests$1));
               if (var24 != null) {
                  long timeCost = var24._2$mcJ$sp();
                  $this.logDebug((Function0)(() -> "Collected remote fetch requests for " + address + " in " + timeCost + " ms"));
                  BoxedUnit var27 = BoxedUnit.UNIT;
                  return;
               }

               throw new MatchError(var24);
            }

            Seq mergedBlockInfos = ShuffleBlockFetcherIterator$.MODULE$.mergeContinuousShuffleBlockIdsIfNeeded((Seq)blockInfos.map((info) -> new FetchBlockInfo((BlockId)info._1(), BoxesRunTime.unboxToLong(info._2()), BoxesRunTime.unboxToInt(info._3()))), $this.doBatchFetch);
            $this.numBlocksToFetch += mergedBlockInfos.size();
            Seq blocksForAddress = (Seq)mergedBlockInfos.map((info) -> new Tuple3(info.blockId(), BoxesRunTime.boxToLong(info.size()), BoxesRunTime.boxToInteger(info.mapIndex())));
            hostLocalBlocksByExecutor$1.$plus$eq(scala.Predef.ArrowAssoc..MODULE$.$minus$greater$extension(scala.Predef..MODULE$.ArrowAssoc(address), blocksForAddress));
            numHostLocalBlocks$1.elem += blocksForAddress.size();
            hostLocalBlockBytes$1.elem += BoxesRunTime.unboxToLong(((IterableOnceOps)mergedBlockInfos.map((x$6) -> BoxesRunTime.boxToLong($anonfun$partitionBlocksByFetchMode$11(x$6)))).sum(scala.math.Numeric.LongIsIntegral..MODULE$));
            BoxedUnit var28 = BoxedUnit.UNIT;
         }
      }
   }

   // $FF: synthetic method
   public static final long $anonfun$createFetchRequest$2(final FetchBlockInfo x$9) {
      return x$9.size();
   }

   // $FF: synthetic method
   public static final long $anonfun$collectFetchRequests$1(final FetchBlockInfo x$11) {
      return x$11.size();
   }

   // $FF: synthetic method
   public static final long $anonfun$collectFetchRequests$2(final FetchBlockInfo x$12) {
      return x$12.size();
   }

   // $FF: synthetic method
   public static final void $anonfun$checkBlockSizes$1(final ShuffleBlockFetcherIterator $this, final Tuple3 x0$1) {
      if (x0$1 != null) {
         BlockId blockId = (BlockId)x0$1._1();
         long size = BoxesRunTime.unboxToLong(x0$1._2());
         $this.assertPositiveBlockSize(blockId, size);
         BoxedUnit var10000 = BoxedUnit.UNIT;
      } else {
         throw new MatchError(x0$1);
      }
   }

   // $FF: synthetic method
   public static final boolean $anonfun$fetchHostLocalBlocks$1(final scala.collection.immutable.Map cachedDirsByExec$1, final Tuple2 x0$1) {
      if (x0$1 != null) {
         BlockManagerId hostLocalBmId = (BlockManagerId)x0$1._1();
         return cachedDirsByExec$1.contains(hostLocalBmId.executorId());
      } else {
         throw new MatchError(x0$1);
      }
   }

   // $FF: synthetic method
   public static final boolean $anonfun$fetchHostLocalBlocks$7(final BlockManagerId[] bmIds$1, final Tuple2 x0$4) {
      if (x0$4 != null) {
         BlockManagerId k = (BlockManagerId)x0$4._1();
         return scala.collection.ArrayOps..MODULE$.contains$extension(scala.Predef..MODULE$.refArrayOps(bmIds$1), k);
      } else {
         throw new MatchError(x0$4);
      }
   }

   // $FF: synthetic method
   public static final void $anonfun$fetchHostLocalBlocks$6(final ShuffleBlockFetcherIterator $this, final scala.collection.immutable.Map hostLocalBlocksWithMissingDirs$1, final BlockManagerId[] bmIds$1, final Try x0$3) {
      if (x0$3 instanceof Success var7) {
         scala.collection.immutable.Map dirsByExecId = (scala.collection.immutable.Map)var7.value();
         $this.fetchMultipleHostLocalBlocks((scala.collection.immutable.Map)hostLocalBlocksWithMissingDirs$1.filter((x0$4) -> BoxesRunTime.boxToBoolean($anonfun$fetchHostLocalBlocks$7(bmIds$1, x0$4))), dirsByExecId, false);
         BoxedUnit var19 = BoxedUnit.UNIT;
      } else if (x0$3 instanceof Failure var9) {
         Throwable throwable = var9.exception();
         $this.logError((Function0)(() -> "Error occurred while fetching host local blocks"), throwable);
         BlockManagerId bmId = (BlockManagerId)scala.collection.ArrayOps..MODULE$.head$extension(scala.Predef..MODULE$.refArrayOps(bmIds$1));
         Seq blockInfoSeq = (Seq)hostLocalBlocksWithMissingDirs$1.apply(bmId);
         Tuple3 var14 = (Tuple3)blockInfoSeq.head();
         if (var14 != null) {
            BlockId blockId = (BlockId)var14._1();
            int mapIndex = BoxesRunTime.unboxToInt(var14._3());
            Tuple2 var13 = new Tuple2(blockId, BoxesRunTime.boxToInteger(mapIndex));
            BlockId blockId = (BlockId)var13._1();
            int mapIndex = var13._2$mcI$sp();
            $this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.put(new FailureFetchResult(blockId, mapIndex, bmId, throwable));
            BoxedUnit var10000 = BoxedUnit.UNIT;
         } else {
            throw new MatchError(var14);
         }
      } else {
         throw new MatchError(x0$3);
      }
   }

   // $FF: synthetic method
   public static final void $anonfun$fetchHostLocalBlocks$4(final ShuffleBlockFetcherIterator $this, final HostLocalDirManager hostLocalDirManager$1, final scala.collection.immutable.Map hostLocalBlocksWithMissingDirs$1, final Tuple3 x0$2) {
      if (x0$2 != null) {
         String host = (String)x0$2._1();
         int port = BoxesRunTime.unboxToInt(x0$2._2());
         BlockManagerId[] bmIds = (BlockManagerId[])x0$2._3();
         hostLocalDirManager$1.getHostLocalDirs(host, port, (String[])scala.collection.ArrayOps..MODULE$.map$extension(scala.Predef..MODULE$.refArrayOps(bmIds), (x$17) -> x$17.executorId(), scala.reflect.ClassTag..MODULE$.apply(String.class)), (x0$3) -> {
            $anonfun$fetchHostLocalBlocks$6($this, hostLocalBlocksWithMissingDirs$1, bmIds, x0$3);
            return BoxedUnit.UNIT;
         });
         BoxedUnit var10000 = BoxedUnit.UNIT;
      } else {
         throw new MatchError(x0$2);
      }
   }

   // $FF: synthetic method
   public static final boolean $anonfun$fetchMultipleHostLocalBlocks$2(final ShuffleBlockFetcherIterator $this, final scala.collection.immutable.Map localDirsByExecId$1, final BlockManagerId bmId$1, final Tuple3 x0$2) {
      if (x0$2 != null) {
         BlockId blockId = (BlockId)x0$2._1();
         int mapIndex = BoxesRunTime.unboxToInt(x0$2._3());
         return $this.fetchHostLocalBlock(blockId, mapIndex, (String[])localDirsByExecId$1.apply(bmId$1.executorId()), bmId$1);
      } else {
         throw new MatchError(x0$2);
      }
   }

   // $FF: synthetic method
   public static final boolean $anonfun$fetchMultipleHostLocalBlocks$1(final ShuffleBlockFetcherIterator $this, final scala.collection.immutable.Map localDirsByExecId$1, final Tuple2 x0$1) {
      if (x0$1 != null) {
         BlockManagerId bmId = (BlockManagerId)x0$1._1();
         Seq blockInfos = (Seq)x0$1._2();
         return blockInfos.forall((x0$2) -> BoxesRunTime.boxToBoolean($anonfun$fetchMultipleHostLocalBlocks$2($this, localDirsByExecId$1, bmId, x0$2)));
      } else {
         throw new MatchError(x0$1);
      }
   }

   // $FF: synthetic method
   public static final int $anonfun$initialize$2(final Queue x$19) {
      return x$19.size();
   }

   // $FF: synthetic method
   public static final void $anonfun$fetchAllHostLocalBlocks$1(final ShuffleBlockFetcherIterator $this, final LinkedHashMap hostLocalBlocksByExecutor$2, final HostLocalDirManager x$20) {
      $this.fetchHostLocalBlocks(x$20, hostLocalBlocksByExecutor$2);
   }

   // $FF: synthetic method
   private static final MDC error$lzycompute$1(final LazyRef error$lzy$1, final ClosedByInterruptException x2$2) {
      synchronized(error$lzy$1){}

      MDC var3;
      try {
         var3 = error$lzy$1.initialized() ? (MDC)error$lzy$1.value() : (MDC)error$lzy$1.initialize(new MDC(org.apache.spark.internal.LogKeys.ERROR..MODULE$, x2$2.getMessage()));
      } catch (Throwable var5) {
         throw var5;
      }

      return var3;
   }

   private static final MDC error$1(final LazyRef error$lzy$1, final ClosedByInterruptException x2$2) {
      return error$lzy$1.initialized() ? (MDC)error$lzy$1.value() : error$lzycompute$1(error$lzy$1, x2$2);
   }

   // $FF: synthetic method
   public static final void $anonfun$next$11(final ShuffleBlockFetcherIterator $this, final int shuffleId$1, final int shuffleMergeId$1, final int reduceId$1, final RoaringBitmap[] bitmaps$1, final Tuple2 x0$1) {
      if (x0$1 != null) {
         ManagedBuffer buf = (ManagedBuffer)x0$1._1();
         int chunkId = x0$1._2$mcI$sp();
         buf.retain();
         ShuffleBlockChunkId shuffleChunkId = new ShuffleBlockChunkId(shuffleId$1, shuffleMergeId$1, reduceId$1, chunkId);
         $this.pushBasedFetchHelper.addChunk(shuffleChunkId, bitmaps$1[chunkId]);
         $this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results.put(new SuccessFetchResult(shuffleChunkId, MapOutputTracker$.MODULE$.SHUFFLE_PUSH_MAP_ID(), $this.pushBasedFetchHelper.localShuffleMergerBlockMgrId(), buf.size(), buf, false));
         BoxedUnit var10000 = BoxedUnit.UNIT;
      } else {
         throw new MatchError(x0$1);
      }
   }

   // $FF: synthetic method
   public static final boolean $anonfun$fetchUpToMaxBytes$1(final Tuple2 check$ifrefutable$2) {
      return check$ifrefutable$2 != null;
   }

   // $FF: synthetic method
   public static final void $anonfun$fetchUpToMaxBytes$2(final ShuffleBlockFetcherIterator $this, final Tuple2 x$21) {
      if (x$21 == null) {
         throw new MatchError(x$21);
      } else {
         BlockManagerId remoteAddress = (BlockManagerId)x$21._1();
         Queue defReqQueue = (Queue)x$21._2();

         while($this.isRemoteBlockFetchable$1(defReqQueue) && !$this.isRemoteAddressMaxedOut$1(remoteAddress, (FetchRequest)defReqQueue.front())) {
            FetchRequest request = (FetchRequest)defReqQueue.dequeue();
            $this.logDebug((Function0)(() -> "Processing deferred fetch request for " + remoteAddress + " with " + request.blocks().length() + " blocks"));
            $this.send$1(remoteAddress, request);
            if (defReqQueue.isEmpty()) {
               $this.deferredFetchRequests.$minus$eq(remoteAddress);
            } else {
               BoxedUnit var10000 = BoxedUnit.UNIT;
            }
         }

         BoxedUnit var7 = BoxedUnit.UNIT;
      }
   }

   private final void send$1(final BlockManagerId remoteAddress, final FetchRequest request) {
      if (request.forMergedMetas()) {
         this.pushBasedFetchHelper.sendFetchMergedStatusRequest(request);
      } else {
         this.sendRequest(request);
      }

      this.numBlocksInFlightPerAddress.update(remoteAddress, BoxesRunTime.boxToInteger(BoxesRunTime.unboxToInt(this.numBlocksInFlightPerAddress.getOrElse(remoteAddress, (JFunction0.mcI.sp)() -> 0)) + request.blocks().size()));
   }

   private final boolean isRemoteBlockFetchable$1(final Queue fetchReqQueue) {
      return fetchReqQueue.nonEmpty() && (this.bytesInFlight == 0L || this.reqsInFlight + 1 <= this.maxReqsInFlight && this.bytesInFlight + ((FetchRequest)fetchReqQueue.front()).size() <= this.maxBytesInFlight);
   }

   private final boolean isRemoteAddressMaxedOut$1(final BlockManagerId remoteAddress, final FetchRequest request) {
      return BoxesRunTime.unboxToInt(this.numBlocksInFlightPerAddress.getOrElse(remoteAddress, (JFunction0.mcI.sp)() -> 0)) + request.blocks().size() > this.maxBlocksInFlightPerAddress;
   }

   private static final boolean sameShuffleReducePartition$1(final BlockId block, final ShuffleBlockChunkId failedBlockId$1) {
      ShuffleBlockChunkId chunkId = (ShuffleBlockChunkId)block;
      return chunkId.shuffleId() == failedBlockId$1.shuffleId() && chunkId.reduceId() == failedBlockId$1.reduceId();
   }

   // $FF: synthetic method
   public static final boolean $anonfun$removePendingChunks$1(final BlockManagerId address$6, final ShuffleBlockChunkId failedBlockId$1, final FetchRequest req) {
      FetchBlockInfo firstBlock = (FetchBlockInfo)req.blocks().head();
      return firstBlock.blockId().isShuffleChunk() && req.address().equals(address$6) && sameShuffleReducePartition$1(firstBlock.blockId(), failedBlockId$1);
   }

   private static final void filterRequests$1(final Queue queue, final BlockManagerId address$6, final HashSet removedChunkIds$1, final ShuffleBlockChunkId failedBlockId$1) {
      Queue fetchRequestsToRemove = new Queue(scala.collection.mutable.Queue..MODULE$.$lessinit$greater$default$1());
      fetchRequestsToRemove.$plus$plus$eq(queue.dequeueAll((req) -> BoxesRunTime.boxToBoolean($anonfun$removePendingChunks$1(address$6, failedBlockId$1, req))));
      fetchRequestsToRemove.foreach((x$22) -> (HashSet)removedChunkIds$1.$plus$plus$eq((IterableOnce)fetchRequestsToRemove.flatMap((x$23) -> (Seq)x$23.blocks().map((x$24) -> (ShuffleBlockChunkId)x$24.blockId()))));
   }

   public ShuffleBlockFetcherIterator(final TaskContext context, final BlockStoreClient shuffleClient, final BlockManager blockManager, final MapOutputTracker mapOutputTracker, final Iterator blocksByAddress, final Function2 streamWrapper, final long maxBytesInFlight, final int maxReqsInFlight, final int maxBlocksInFlightPerAddress, final long maxReqSizeShuffleToMem, final int maxAttemptsOnNettyOOM, final boolean detectCorrupt, final boolean detectCorruptUseExtraMemory, final boolean checksumEnabled, final String checksumAlgorithm, final ShuffleReadMetricsReporter shuffleMetrics, final boolean doBatchFetch, final Clock clock) {
      this.context = context;
      this.shuffleClient = shuffleClient;
      this.blockManager = blockManager;
      this.blocksByAddress = blocksByAddress;
      this.streamWrapper = streamWrapper;
      this.maxBytesInFlight = maxBytesInFlight;
      this.maxReqsInFlight = maxReqsInFlight;
      this.maxBlocksInFlightPerAddress = maxBlocksInFlightPerAddress;
      this.maxReqSizeShuffleToMem = maxReqSizeShuffleToMem;
      this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$maxAttemptsOnNettyOOM = maxAttemptsOnNettyOOM;
      this.detectCorrupt = detectCorrupt;
      this.detectCorruptUseExtraMemory = detectCorruptUseExtraMemory;
      this.checksumEnabled = checksumEnabled;
      this.checksumAlgorithm = checksumAlgorithm;
      this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$shuffleMetrics = shuffleMetrics;
      this.doBatchFetch = doBatchFetch;
      this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$clock = clock;
      IterableOnce.$init$(this);
      IterableOnceOps.$init$(this);
      Iterator.$init$(this);
      Logging.$init$(this);
      this.targetRemoteRequestSize = scala.math.package..MODULE$.max(maxBytesInFlight / 5L, 1L);
      this.numBlocksToFetch = 0;
      this.numBlocksProcessed = 0;
      this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$startTimeNs = System.nanoTime();
      this.hostLocalBlocks = (LinkedHashSet)scala.collection.mutable.LinkedHashSet..MODULE$.apply(scala.collection.immutable.Nil..MODULE$);
      this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$results = new LinkedBlockingQueue();
      this.currentResult = null;
      this.fetchRequests = new Queue(scala.collection.mutable.Queue..MODULE$.$lessinit$greater$default$1());
      this.deferredFetchRequests = new HashMap();
      this.bytesInFlight = 0L;
      this.reqsInFlight = 0;
      this.numBlocksInFlightPerAddress = new HashMap();
      this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$blockOOMRetryCounts = new HashMap();
      this.corruptedBlocks = (HashSet)scala.collection.mutable.HashSet..MODULE$.apply(scala.collection.immutable.Nil..MODULE$);
      this.org$apache$spark$storage$ShuffleBlockFetcherIterator$$isZombie = false;
      this.shuffleFilesSet = (HashSet)scala.collection.mutable.HashSet..MODULE$.apply(scala.collection.immutable.Nil..MODULE$);
      this.onCompleteCallback = new ShuffleFetchCompletionListener(this);
      this.pushBasedFetchHelper = new PushBasedFetchHelper(this, shuffleClient, blockManager, mapOutputTracker, shuffleMetrics);
      this.initialize();
   }

   // $FF: synthetic method
   private static Object $deserializeLambda$(SerializedLambda var0) {
      return Class.lambdaDeserialize<invokedynamic>(var0);
   }

   public static class FetchBlockInfo implements Product, Serializable {
      private final BlockId blockId;
      private final long size;
      private final int mapIndex;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public BlockId blockId() {
         return this.blockId;
      }

      public long size() {
         return this.size;
      }

      public int mapIndex() {
         return this.mapIndex;
      }

      public FetchBlockInfo copy(final BlockId blockId, final long size, final int mapIndex) {
         return new FetchBlockInfo(blockId, size, mapIndex);
      }

      public BlockId copy$default$1() {
         return this.blockId();
      }

      public long copy$default$2() {
         return this.size();
      }

      public int copy$default$3() {
         return this.mapIndex();
      }

      public String productPrefix() {
         return "FetchBlockInfo";
      }

      public int productArity() {
         return 3;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return this.blockId();
            }
            case 1 -> {
               return BoxesRunTime.boxToLong(this.size());
            }
            case 2 -> {
               return BoxesRunTime.boxToInteger(this.mapIndex());
            }
            default -> {
               return Statics.ioobe(x$1);
            }
         }
      }

      public Iterator productIterator() {
         return scala.runtime.ScalaRunTime..MODULE$.typedProductIterator(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof FetchBlockInfo;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return "blockId";
            }
            case 1 -> {
               return "size";
            }
            case 2 -> {
               return "mapIndex";
            }
            default -> {
               return (String)Statics.ioobe(x$1);
            }
         }
      }

      public int hashCode() {
         int var1 = -889275714;
         var1 = Statics.mix(var1, this.productPrefix().hashCode());
         var1 = Statics.mix(var1, Statics.anyHash(this.blockId()));
         var1 = Statics.mix(var1, Statics.longHash(this.size()));
         var1 = Statics.mix(var1, this.mapIndex());
         return Statics.finalizeHash(var1, 3);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         boolean var6;
         if (this != x$1) {
            label55: {
               if (x$1 instanceof FetchBlockInfo) {
                  FetchBlockInfo var4 = (FetchBlockInfo)x$1;
                  if (this.size() == var4.size() && this.mapIndex() == var4.mapIndex()) {
                     label48: {
                        BlockId var10000 = this.blockId();
                        BlockId var5 = var4.blockId();
                        if (var10000 == null) {
                           if (var5 != null) {
                              break label48;
                           }
                        } else if (!var10000.equals(var5)) {
                           break label48;
                        }

                        if (var4.canEqual(this)) {
                           break label55;
                        }
                     }
                  }
               }

               var6 = false;
               return var6;
            }
         }

         var6 = true;
         return var6;
      }

      public FetchBlockInfo(final BlockId blockId, final long size, final int mapIndex) {
         this.blockId = blockId;
         this.size = size;
         this.mapIndex = mapIndex;
         Product.$init$(this);
      }
   }

   public static class FetchBlockInfo$ extends AbstractFunction3 implements Serializable {
      public static final FetchBlockInfo$ MODULE$ = new FetchBlockInfo$();

      public final String toString() {
         return "FetchBlockInfo";
      }

      public FetchBlockInfo apply(final BlockId blockId, final long size, final int mapIndex) {
         return new FetchBlockInfo(blockId, size, mapIndex);
      }

      public Option unapply(final FetchBlockInfo x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple3(x$0.blockId(), BoxesRunTime.boxToLong(x$0.size()), BoxesRunTime.boxToInteger(x$0.mapIndex()))));
      }

      private Object writeReplace() {
         return new ModuleSerializationProxy(FetchBlockInfo$.class);
      }
   }

   public static class FetchRequest implements Product, Serializable {
      private final BlockManagerId address;
      private final Seq blocks;
      private final boolean forMergedMetas;
      private final long size;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public BlockManagerId address() {
         return this.address;
      }

      public Seq blocks() {
         return this.blocks;
      }

      public boolean forMergedMetas() {
         return this.forMergedMetas;
      }

      public long size() {
         return this.size;
      }

      public FetchRequest copy(final BlockManagerId address, final Seq blocks, final boolean forMergedMetas) {
         return new FetchRequest(address, blocks, forMergedMetas);
      }

      public BlockManagerId copy$default$1() {
         return this.address();
      }

      public Seq copy$default$2() {
         return this.blocks();
      }

      public boolean copy$default$3() {
         return this.forMergedMetas();
      }

      public String productPrefix() {
         return "FetchRequest";
      }

      public int productArity() {
         return 3;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return this.address();
            }
            case 1 -> {
               return this.blocks();
            }
            case 2 -> {
               return BoxesRunTime.boxToBoolean(this.forMergedMetas());
            }
            default -> {
               return Statics.ioobe(x$1);
            }
         }
      }

      public Iterator productIterator() {
         return scala.runtime.ScalaRunTime..MODULE$.typedProductIterator(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof FetchRequest;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return "address";
            }
            case 1 -> {
               return "blocks";
            }
            case 2 -> {
               return "forMergedMetas";
            }
            default -> {
               return (String)Statics.ioobe(x$1);
            }
         }
      }

      public int hashCode() {
         int var1 = -889275714;
         var1 = Statics.mix(var1, this.productPrefix().hashCode());
         var1 = Statics.mix(var1, Statics.anyHash(this.address()));
         var1 = Statics.mix(var1, Statics.anyHash(this.blocks()));
         var1 = Statics.mix(var1, this.forMergedMetas() ? 1231 : 1237);
         return Statics.finalizeHash(var1, 3);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         boolean var8;
         if (this != x$1) {
            label59: {
               if (x$1 instanceof FetchRequest) {
                  FetchRequest var4 = (FetchRequest)x$1;
                  if (this.forMergedMetas() == var4.forMergedMetas()) {
                     label52: {
                        BlockManagerId var10000 = this.address();
                        BlockManagerId var5 = var4.address();
                        if (var10000 == null) {
                           if (var5 != null) {
                              break label52;
                           }
                        } else if (!var10000.equals(var5)) {
                           break label52;
                        }

                        Seq var7 = this.blocks();
                        Seq var6 = var4.blocks();
                        if (var7 == null) {
                           if (var6 != null) {
                              break label52;
                           }
                        } else if (!var7.equals(var6)) {
                           break label52;
                        }

                        if (var4.canEqual(this)) {
                           break label59;
                        }
                     }
                  }
               }

               var8 = false;
               return var8;
            }
         }

         var8 = true;
         return var8;
      }

      // $FF: synthetic method
      public static final long $anonfun$size$1(final FetchBlockInfo x$28) {
         return x$28.size();
      }

      public FetchRequest(final BlockManagerId address, final Seq blocks, final boolean forMergedMetas) {
         this.address = address;
         this.blocks = blocks;
         this.forMergedMetas = forMergedMetas;
         Product.$init$(this);
         this.size = BoxesRunTime.unboxToLong(((IterableOnceOps)blocks.map((x$28) -> BoxesRunTime.boxToLong($anonfun$size$1(x$28)))).sum(scala.math.Numeric.LongIsIntegral..MODULE$));
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return var0.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public static class FetchRequest$ extends AbstractFunction3 implements Serializable {
      public static final FetchRequest$ MODULE$ = new FetchRequest$();

      public boolean $lessinit$greater$default$3() {
         return false;
      }

      public final String toString() {
         return "FetchRequest";
      }

      public FetchRequest apply(final BlockManagerId address, final Seq blocks, final boolean forMergedMetas) {
         return new FetchRequest(address, blocks, forMergedMetas);
      }

      public boolean apply$default$3() {
         return false;
      }

      public Option unapply(final FetchRequest x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple3(x$0.address(), x$0.blocks(), BoxesRunTime.boxToBoolean(x$0.forMergedMetas()))));
      }

      private Object writeReplace() {
         return new ModuleSerializationProxy(FetchRequest$.class);
      }
   }

   public static class SuccessFetchResult implements FetchResult, Product, Serializable {
      private final BlockId blockId;
      private final int mapIndex;
      private final BlockManagerId address;
      private final long size;
      private final ManagedBuffer buf;
      private final boolean isNetworkReqDone;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public BlockId blockId() {
         return this.blockId;
      }

      public int mapIndex() {
         return this.mapIndex;
      }

      public BlockManagerId address() {
         return this.address;
      }

      public long size() {
         return this.size;
      }

      public ManagedBuffer buf() {
         return this.buf;
      }

      public boolean isNetworkReqDone() {
         return this.isNetworkReqDone;
      }

      public SuccessFetchResult copy(final BlockId blockId, final int mapIndex, final BlockManagerId address, final long size, final ManagedBuffer buf, final boolean isNetworkReqDone) {
         return new SuccessFetchResult(blockId, mapIndex, address, size, buf, isNetworkReqDone);
      }

      public BlockId copy$default$1() {
         return this.blockId();
      }

      public int copy$default$2() {
         return this.mapIndex();
      }

      public BlockManagerId copy$default$3() {
         return this.address();
      }

      public long copy$default$4() {
         return this.size();
      }

      public ManagedBuffer copy$default$5() {
         return this.buf();
      }

      public boolean copy$default$6() {
         return this.isNetworkReqDone();
      }

      public String productPrefix() {
         return "SuccessFetchResult";
      }

      public int productArity() {
         return 6;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return this.blockId();
            }
            case 1 -> {
               return BoxesRunTime.boxToInteger(this.mapIndex());
            }
            case 2 -> {
               return this.address();
            }
            case 3 -> {
               return BoxesRunTime.boxToLong(this.size());
            }
            case 4 -> {
               return this.buf();
            }
            case 5 -> {
               return BoxesRunTime.boxToBoolean(this.isNetworkReqDone());
            }
            default -> {
               return Statics.ioobe(x$1);
            }
         }
      }

      public Iterator productIterator() {
         return scala.runtime.ScalaRunTime..MODULE$.typedProductIterator(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof SuccessFetchResult;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return "blockId";
            }
            case 1 -> {
               return "mapIndex";
            }
            case 2 -> {
               return "address";
            }
            case 3 -> {
               return "size";
            }
            case 4 -> {
               return "buf";
            }
            case 5 -> {
               return "isNetworkReqDone";
            }
            default -> {
               return (String)Statics.ioobe(x$1);
            }
         }
      }

      public int hashCode() {
         int var1 = -889275714;
         var1 = Statics.mix(var1, this.productPrefix().hashCode());
         var1 = Statics.mix(var1, Statics.anyHash(this.blockId()));
         var1 = Statics.mix(var1, this.mapIndex());
         var1 = Statics.mix(var1, Statics.anyHash(this.address()));
         var1 = Statics.mix(var1, Statics.longHash(this.size()));
         var1 = Statics.mix(var1, Statics.anyHash(this.buf()));
         var1 = Statics.mix(var1, this.isNetworkReqDone() ? 1231 : 1237);
         return Statics.finalizeHash(var1, 6);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         boolean var10;
         if (this != x$1) {
            label75: {
               if (x$1 instanceof SuccessFetchResult) {
                  SuccessFetchResult var4 = (SuccessFetchResult)x$1;
                  if (this.mapIndex() == var4.mapIndex() && this.size() == var4.size() && this.isNetworkReqDone() == var4.isNetworkReqDone()) {
                     label68: {
                        BlockId var10000 = this.blockId();
                        BlockId var5 = var4.blockId();
                        if (var10000 == null) {
                           if (var5 != null) {
                              break label68;
                           }
                        } else if (!var10000.equals(var5)) {
                           break label68;
                        }

                        BlockManagerId var8 = this.address();
                        BlockManagerId var6 = var4.address();
                        if (var8 == null) {
                           if (var6 != null) {
                              break label68;
                           }
                        } else if (!var8.equals(var6)) {
                           break label68;
                        }

                        ManagedBuffer var9 = this.buf();
                        ManagedBuffer var7 = var4.buf();
                        if (var9 == null) {
                           if (var7 != null) {
                              break label68;
                           }
                        } else if (!var9.equals(var7)) {
                           break label68;
                        }

                        if (var4.canEqual(this)) {
                           break label75;
                        }
                     }
                  }
               }

               var10 = false;
               return var10;
            }
         }

         var10 = true;
         return var10;
      }

      public SuccessFetchResult(final BlockId blockId, final int mapIndex, final BlockManagerId address, final long size, final ManagedBuffer buf, final boolean isNetworkReqDone) {
         this.blockId = blockId;
         this.mapIndex = mapIndex;
         this.address = address;
         this.size = size;
         this.buf = buf;
         this.isNetworkReqDone = isNetworkReqDone;
         Product.$init$(this);
         scala.Predef..MODULE$.require(buf != null);
         scala.Predef..MODULE$.require(size >= 0L);
      }
   }

   public static class SuccessFetchResult$ extends AbstractFunction6 implements Serializable {
      public static final SuccessFetchResult$ MODULE$ = new SuccessFetchResult$();

      public final String toString() {
         return "SuccessFetchResult";
      }

      public SuccessFetchResult apply(final BlockId blockId, final int mapIndex, final BlockManagerId address, final long size, final ManagedBuffer buf, final boolean isNetworkReqDone) {
         return new SuccessFetchResult(blockId, mapIndex, address, size, buf, isNetworkReqDone);
      }

      public Option unapply(final SuccessFetchResult x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple6(x$0.blockId(), BoxesRunTime.boxToInteger(x$0.mapIndex()), x$0.address(), BoxesRunTime.boxToLong(x$0.size()), x$0.buf(), BoxesRunTime.boxToBoolean(x$0.isNetworkReqDone()))));
      }

      private Object writeReplace() {
         return new ModuleSerializationProxy(SuccessFetchResult$.class);
      }
   }

   public static class FailureFetchResult implements FetchResult, Product, Serializable {
      private final BlockId blockId;
      private final int mapIndex;
      private final BlockManagerId address;
      private final Throwable e;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public BlockId blockId() {
         return this.blockId;
      }

      public int mapIndex() {
         return this.mapIndex;
      }

      public BlockManagerId address() {
         return this.address;
      }

      public Throwable e() {
         return this.e;
      }

      public FailureFetchResult copy(final BlockId blockId, final int mapIndex, final BlockManagerId address, final Throwable e) {
         return new FailureFetchResult(blockId, mapIndex, address, e);
      }

      public BlockId copy$default$1() {
         return this.blockId();
      }

      public int copy$default$2() {
         return this.mapIndex();
      }

      public BlockManagerId copy$default$3() {
         return this.address();
      }

      public Throwable copy$default$4() {
         return this.e();
      }

      public String productPrefix() {
         return "FailureFetchResult";
      }

      public int productArity() {
         return 4;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return this.blockId();
            }
            case 1 -> {
               return BoxesRunTime.boxToInteger(this.mapIndex());
            }
            case 2 -> {
               return this.address();
            }
            case 3 -> {
               return this.e();
            }
            default -> {
               return Statics.ioobe(x$1);
            }
         }
      }

      public Iterator productIterator() {
         return scala.runtime.ScalaRunTime..MODULE$.typedProductIterator(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof FailureFetchResult;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return "blockId";
            }
            case 1 -> {
               return "mapIndex";
            }
            case 2 -> {
               return "address";
            }
            case 3 -> {
               return "e";
            }
            default -> {
               return (String)Statics.ioobe(x$1);
            }
         }
      }

      public int hashCode() {
         int var1 = -889275714;
         var1 = Statics.mix(var1, this.productPrefix().hashCode());
         var1 = Statics.mix(var1, Statics.anyHash(this.blockId()));
         var1 = Statics.mix(var1, this.mapIndex());
         var1 = Statics.mix(var1, Statics.anyHash(this.address()));
         var1 = Statics.mix(var1, Statics.anyHash(this.e()));
         return Statics.finalizeHash(var1, 4);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         boolean var10;
         if (this != x$1) {
            label67: {
               if (x$1 instanceof FailureFetchResult) {
                  FailureFetchResult var4 = (FailureFetchResult)x$1;
                  if (this.mapIndex() == var4.mapIndex()) {
                     label60: {
                        BlockId var10000 = this.blockId();
                        BlockId var5 = var4.blockId();
                        if (var10000 == null) {
                           if (var5 != null) {
                              break label60;
                           }
                        } else if (!var10000.equals(var5)) {
                           break label60;
                        }

                        BlockManagerId var8 = this.address();
                        BlockManagerId var6 = var4.address();
                        if (var8 == null) {
                           if (var6 != null) {
                              break label60;
                           }
                        } else if (!var8.equals(var6)) {
                           break label60;
                        }

                        Throwable var9 = this.e();
                        Throwable var7 = var4.e();
                        if (var9 == null) {
                           if (var7 != null) {
                              break label60;
                           }
                        } else if (!var9.equals(var7)) {
                           break label60;
                        }

                        if (var4.canEqual(this)) {
                           break label67;
                        }
                     }
                  }
               }

               var10 = false;
               return var10;
            }
         }

         var10 = true;
         return var10;
      }

      public FailureFetchResult(final BlockId blockId, final int mapIndex, final BlockManagerId address, final Throwable e) {
         this.blockId = blockId;
         this.mapIndex = mapIndex;
         this.address = address;
         this.e = e;
         Product.$init$(this);
      }
   }

   public static class FailureFetchResult$ extends AbstractFunction4 implements Serializable {
      public static final FailureFetchResult$ MODULE$ = new FailureFetchResult$();

      public final String toString() {
         return "FailureFetchResult";
      }

      public FailureFetchResult apply(final BlockId blockId, final int mapIndex, final BlockManagerId address, final Throwable e) {
         return new FailureFetchResult(blockId, mapIndex, address, e);
      }

      public Option unapply(final FailureFetchResult x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple4(x$0.blockId(), BoxesRunTime.boxToInteger(x$0.mapIndex()), x$0.address(), x$0.e())));
      }

      private Object writeReplace() {
         return new ModuleSerializationProxy(FailureFetchResult$.class);
      }
   }

   public static class DeferFetchRequestResult implements FetchResult, Product, Serializable {
      private final FetchRequest fetchRequest;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public FetchRequest fetchRequest() {
         return this.fetchRequest;
      }

      public DeferFetchRequestResult copy(final FetchRequest fetchRequest) {
         return new DeferFetchRequestResult(fetchRequest);
      }

      public FetchRequest copy$default$1() {
         return this.fetchRequest();
      }

      public String productPrefix() {
         return "DeferFetchRequestResult";
      }

      public int productArity() {
         return 1;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return this.fetchRequest();
            }
            default -> {
               return Statics.ioobe(x$1);
            }
         }
      }

      public Iterator productIterator() {
         return scala.runtime.ScalaRunTime..MODULE$.typedProductIterator(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof DeferFetchRequestResult;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return "fetchRequest";
            }
            default -> {
               return (String)Statics.ioobe(x$1);
            }
         }
      }

      public int hashCode() {
         return scala.runtime.ScalaRunTime..MODULE$._hashCode(this);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         boolean var6;
         if (this != x$1) {
            label47: {
               if (x$1 instanceof DeferFetchRequestResult) {
                  label40: {
                     DeferFetchRequestResult var4 = (DeferFetchRequestResult)x$1;
                     FetchRequest var10000 = this.fetchRequest();
                     FetchRequest var5 = var4.fetchRequest();
                     if (var10000 == null) {
                        if (var5 != null) {
                           break label40;
                        }
                     } else if (!var10000.equals(var5)) {
                        break label40;
                     }

                     if (var4.canEqual(this)) {
                        break label47;
                     }
                  }
               }

               var6 = false;
               return var6;
            }
         }

         var6 = true;
         return var6;
      }

      public DeferFetchRequestResult(final FetchRequest fetchRequest) {
         this.fetchRequest = fetchRequest;
         Product.$init$(this);
      }
   }

   public static class DeferFetchRequestResult$ extends AbstractFunction1 implements Serializable {
      public static final DeferFetchRequestResult$ MODULE$ = new DeferFetchRequestResult$();

      public final String toString() {
         return "DeferFetchRequestResult";
      }

      public DeferFetchRequestResult apply(final FetchRequest fetchRequest) {
         return new DeferFetchRequestResult(fetchRequest);
      }

      public Option unapply(final DeferFetchRequestResult x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(x$0.fetchRequest()));
      }

      private Object writeReplace() {
         return new ModuleSerializationProxy(DeferFetchRequestResult$.class);
      }
   }

   public static class FallbackOnPushMergedFailureResult implements FetchResult, Product, Serializable {
      private final BlockId blockId;
      private final BlockManagerId address;
      private final long size;
      private final boolean isNetworkReqDone;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public BlockId blockId() {
         return this.blockId;
      }

      public BlockManagerId address() {
         return this.address;
      }

      public long size() {
         return this.size;
      }

      public boolean isNetworkReqDone() {
         return this.isNetworkReqDone;
      }

      public FallbackOnPushMergedFailureResult copy(final BlockId blockId, final BlockManagerId address, final long size, final boolean isNetworkReqDone) {
         return new FallbackOnPushMergedFailureResult(blockId, address, size, isNetworkReqDone);
      }

      public BlockId copy$default$1() {
         return this.blockId();
      }

      public BlockManagerId copy$default$2() {
         return this.address();
      }

      public long copy$default$3() {
         return this.size();
      }

      public boolean copy$default$4() {
         return this.isNetworkReqDone();
      }

      public String productPrefix() {
         return "FallbackOnPushMergedFailureResult";
      }

      public int productArity() {
         return 4;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return this.blockId();
            }
            case 1 -> {
               return this.address();
            }
            case 2 -> {
               return BoxesRunTime.boxToLong(this.size());
            }
            case 3 -> {
               return BoxesRunTime.boxToBoolean(this.isNetworkReqDone());
            }
            default -> {
               return Statics.ioobe(x$1);
            }
         }
      }

      public Iterator productIterator() {
         return scala.runtime.ScalaRunTime..MODULE$.typedProductIterator(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof FallbackOnPushMergedFailureResult;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return "blockId";
            }
            case 1 -> {
               return "address";
            }
            case 2 -> {
               return "size";
            }
            case 3 -> {
               return "isNetworkReqDone";
            }
            default -> {
               return (String)Statics.ioobe(x$1);
            }
         }
      }

      public int hashCode() {
         int var1 = -889275714;
         var1 = Statics.mix(var1, this.productPrefix().hashCode());
         var1 = Statics.mix(var1, Statics.anyHash(this.blockId()));
         var1 = Statics.mix(var1, Statics.anyHash(this.address()));
         var1 = Statics.mix(var1, Statics.longHash(this.size()));
         var1 = Statics.mix(var1, this.isNetworkReqDone() ? 1231 : 1237);
         return Statics.finalizeHash(var1, 4);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         boolean var8;
         if (this != x$1) {
            label63: {
               if (x$1 instanceof FallbackOnPushMergedFailureResult) {
                  FallbackOnPushMergedFailureResult var4 = (FallbackOnPushMergedFailureResult)x$1;
                  if (this.size() == var4.size() && this.isNetworkReqDone() == var4.isNetworkReqDone()) {
                     label56: {
                        BlockId var10000 = this.blockId();
                        BlockId var5 = var4.blockId();
                        if (var10000 == null) {
                           if (var5 != null) {
                              break label56;
                           }
                        } else if (!var10000.equals(var5)) {
                           break label56;
                        }

                        BlockManagerId var7 = this.address();
                        BlockManagerId var6 = var4.address();
                        if (var7 == null) {
                           if (var6 != null) {
                              break label56;
                           }
                        } else if (!var7.equals(var6)) {
                           break label56;
                        }

                        if (var4.canEqual(this)) {
                           break label63;
                        }
                     }
                  }
               }

               var8 = false;
               return var8;
            }
         }

         var8 = true;
         return var8;
      }

      public FallbackOnPushMergedFailureResult(final BlockId blockId, final BlockManagerId address, final long size, final boolean isNetworkReqDone) {
         this.blockId = blockId;
         this.address = address;
         this.size = size;
         this.isNetworkReqDone = isNetworkReqDone;
         Product.$init$(this);
      }
   }

   public static class FallbackOnPushMergedFailureResult$ extends AbstractFunction4 implements Serializable {
      public static final FallbackOnPushMergedFailureResult$ MODULE$ = new FallbackOnPushMergedFailureResult$();

      public final String toString() {
         return "FallbackOnPushMergedFailureResult";
      }

      public FallbackOnPushMergedFailureResult apply(final BlockId blockId, final BlockManagerId address, final long size, final boolean isNetworkReqDone) {
         return new FallbackOnPushMergedFailureResult(blockId, address, size, isNetworkReqDone);
      }

      public Option unapply(final FallbackOnPushMergedFailureResult x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple4(x$0.blockId(), x$0.address(), BoxesRunTime.boxToLong(x$0.size()), BoxesRunTime.boxToBoolean(x$0.isNetworkReqDone()))));
      }

      private Object writeReplace() {
         return new ModuleSerializationProxy(FallbackOnPushMergedFailureResult$.class);
      }
   }

   public static class PushMergedRemoteMetaFetchResult implements FetchResult, Product, Serializable {
      private final int shuffleId;
      private final int shuffleMergeId;
      private final int reduceId;
      private final long blockSize;
      private final RoaringBitmap[] bitmaps;
      private final BlockManagerId address;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public int shuffleId() {
         return this.shuffleId;
      }

      public int shuffleMergeId() {
         return this.shuffleMergeId;
      }

      public int reduceId() {
         return this.reduceId;
      }

      public long blockSize() {
         return this.blockSize;
      }

      public RoaringBitmap[] bitmaps() {
         return this.bitmaps;
      }

      public BlockManagerId address() {
         return this.address;
      }

      public PushMergedRemoteMetaFetchResult copy(final int shuffleId, final int shuffleMergeId, final int reduceId, final long blockSize, final RoaringBitmap[] bitmaps, final BlockManagerId address) {
         return new PushMergedRemoteMetaFetchResult(shuffleId, shuffleMergeId, reduceId, blockSize, bitmaps, address);
      }

      public int copy$default$1() {
         return this.shuffleId();
      }

      public int copy$default$2() {
         return this.shuffleMergeId();
      }

      public int copy$default$3() {
         return this.reduceId();
      }

      public long copy$default$4() {
         return this.blockSize();
      }

      public RoaringBitmap[] copy$default$5() {
         return this.bitmaps();
      }

      public BlockManagerId copy$default$6() {
         return this.address();
      }

      public String productPrefix() {
         return "PushMergedRemoteMetaFetchResult";
      }

      public int productArity() {
         return 6;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return BoxesRunTime.boxToInteger(this.shuffleId());
            }
            case 1 -> {
               return BoxesRunTime.boxToInteger(this.shuffleMergeId());
            }
            case 2 -> {
               return BoxesRunTime.boxToInteger(this.reduceId());
            }
            case 3 -> {
               return BoxesRunTime.boxToLong(this.blockSize());
            }
            case 4 -> {
               return this.bitmaps();
            }
            case 5 -> {
               return this.address();
            }
            default -> {
               return Statics.ioobe(x$1);
            }
         }
      }

      public Iterator productIterator() {
         return scala.runtime.ScalaRunTime..MODULE$.typedProductIterator(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof PushMergedRemoteMetaFetchResult;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return "shuffleId";
            }
            case 1 -> {
               return "shuffleMergeId";
            }
            case 2 -> {
               return "reduceId";
            }
            case 3 -> {
               return "blockSize";
            }
            case 4 -> {
               return "bitmaps";
            }
            case 5 -> {
               return "address";
            }
            default -> {
               return (String)Statics.ioobe(x$1);
            }
         }
      }

      public int hashCode() {
         int var1 = -889275714;
         var1 = Statics.mix(var1, this.productPrefix().hashCode());
         var1 = Statics.mix(var1, this.shuffleId());
         var1 = Statics.mix(var1, this.shuffleMergeId());
         var1 = Statics.mix(var1, this.reduceId());
         var1 = Statics.mix(var1, Statics.longHash(this.blockSize()));
         var1 = Statics.mix(var1, Statics.anyHash(this.bitmaps()));
         var1 = Statics.mix(var1, Statics.anyHash(this.address()));
         return Statics.finalizeHash(var1, 6);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         boolean var6;
         if (this != x$1) {
            label67: {
               if (x$1 instanceof PushMergedRemoteMetaFetchResult) {
                  PushMergedRemoteMetaFetchResult var4 = (PushMergedRemoteMetaFetchResult)x$1;
                  if (this.shuffleId() == var4.shuffleId() && this.shuffleMergeId() == var4.shuffleMergeId() && this.reduceId() == var4.reduceId() && this.blockSize() == var4.blockSize() && this.bitmaps() == var4.bitmaps()) {
                     label60: {
                        BlockManagerId var10000 = this.address();
                        BlockManagerId var5 = var4.address();
                        if (var10000 == null) {
                           if (var5 != null) {
                              break label60;
                           }
                        } else if (!var10000.equals(var5)) {
                           break label60;
                        }

                        if (var4.canEqual(this)) {
                           break label67;
                        }
                     }
                  }
               }

               var6 = false;
               return var6;
            }
         }

         var6 = true;
         return var6;
      }

      public PushMergedRemoteMetaFetchResult(final int shuffleId, final int shuffleMergeId, final int reduceId, final long blockSize, final RoaringBitmap[] bitmaps, final BlockManagerId address) {
         this.shuffleId = shuffleId;
         this.shuffleMergeId = shuffleMergeId;
         this.reduceId = reduceId;
         this.blockSize = blockSize;
         this.bitmaps = bitmaps;
         this.address = address;
         Product.$init$(this);
      }
   }

   public static class PushMergedRemoteMetaFetchResult$ extends AbstractFunction6 implements Serializable {
      public static final PushMergedRemoteMetaFetchResult$ MODULE$ = new PushMergedRemoteMetaFetchResult$();

      public final String toString() {
         return "PushMergedRemoteMetaFetchResult";
      }

      public PushMergedRemoteMetaFetchResult apply(final int shuffleId, final int shuffleMergeId, final int reduceId, final long blockSize, final RoaringBitmap[] bitmaps, final BlockManagerId address) {
         return new PushMergedRemoteMetaFetchResult(shuffleId, shuffleMergeId, reduceId, blockSize, bitmaps, address);
      }

      public Option unapply(final PushMergedRemoteMetaFetchResult x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple6(BoxesRunTime.boxToInteger(x$0.shuffleId()), BoxesRunTime.boxToInteger(x$0.shuffleMergeId()), BoxesRunTime.boxToInteger(x$0.reduceId()), BoxesRunTime.boxToLong(x$0.blockSize()), x$0.bitmaps(), x$0.address())));
      }

      private Object writeReplace() {
         return new ModuleSerializationProxy(PushMergedRemoteMetaFetchResult$.class);
      }
   }

   public static class PushMergedRemoteMetaFailedFetchResult implements FetchResult, Product, Serializable {
      private final int shuffleId;
      private final int shuffleMergeId;
      private final int reduceId;
      private final BlockManagerId address;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public int shuffleId() {
         return this.shuffleId;
      }

      public int shuffleMergeId() {
         return this.shuffleMergeId;
      }

      public int reduceId() {
         return this.reduceId;
      }

      public BlockManagerId address() {
         return this.address;
      }

      public PushMergedRemoteMetaFailedFetchResult copy(final int shuffleId, final int shuffleMergeId, final int reduceId, final BlockManagerId address) {
         return new PushMergedRemoteMetaFailedFetchResult(shuffleId, shuffleMergeId, reduceId, address);
      }

      public int copy$default$1() {
         return this.shuffleId();
      }

      public int copy$default$2() {
         return this.shuffleMergeId();
      }

      public int copy$default$3() {
         return this.reduceId();
      }

      public BlockManagerId copy$default$4() {
         return this.address();
      }

      public String productPrefix() {
         return "PushMergedRemoteMetaFailedFetchResult";
      }

      public int productArity() {
         return 4;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return BoxesRunTime.boxToInteger(this.shuffleId());
            }
            case 1 -> {
               return BoxesRunTime.boxToInteger(this.shuffleMergeId());
            }
            case 2 -> {
               return BoxesRunTime.boxToInteger(this.reduceId());
            }
            case 3 -> {
               return this.address();
            }
            default -> {
               return Statics.ioobe(x$1);
            }
         }
      }

      public Iterator productIterator() {
         return scala.runtime.ScalaRunTime..MODULE$.typedProductIterator(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof PushMergedRemoteMetaFailedFetchResult;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return "shuffleId";
            }
            case 1 -> {
               return "shuffleMergeId";
            }
            case 2 -> {
               return "reduceId";
            }
            case 3 -> {
               return "address";
            }
            default -> {
               return (String)Statics.ioobe(x$1);
            }
         }
      }

      public int hashCode() {
         int var1 = -889275714;
         var1 = Statics.mix(var1, this.productPrefix().hashCode());
         var1 = Statics.mix(var1, this.shuffleId());
         var1 = Statics.mix(var1, this.shuffleMergeId());
         var1 = Statics.mix(var1, this.reduceId());
         var1 = Statics.mix(var1, Statics.anyHash(this.address()));
         return Statics.finalizeHash(var1, 4);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         boolean var6;
         if (this != x$1) {
            label59: {
               if (x$1 instanceof PushMergedRemoteMetaFailedFetchResult) {
                  PushMergedRemoteMetaFailedFetchResult var4 = (PushMergedRemoteMetaFailedFetchResult)x$1;
                  if (this.shuffleId() == var4.shuffleId() && this.shuffleMergeId() == var4.shuffleMergeId() && this.reduceId() == var4.reduceId()) {
                     label52: {
                        BlockManagerId var10000 = this.address();
                        BlockManagerId var5 = var4.address();
                        if (var10000 == null) {
                           if (var5 != null) {
                              break label52;
                           }
                        } else if (!var10000.equals(var5)) {
                           break label52;
                        }

                        if (var4.canEqual(this)) {
                           break label59;
                        }
                     }
                  }
               }

               var6 = false;
               return var6;
            }
         }

         var6 = true;
         return var6;
      }

      public PushMergedRemoteMetaFailedFetchResult(final int shuffleId, final int shuffleMergeId, final int reduceId, final BlockManagerId address) {
         this.shuffleId = shuffleId;
         this.shuffleMergeId = shuffleMergeId;
         this.reduceId = reduceId;
         this.address = address;
         Product.$init$(this);
      }
   }

   public static class PushMergedRemoteMetaFailedFetchResult$ extends AbstractFunction4 implements Serializable {
      public static final PushMergedRemoteMetaFailedFetchResult$ MODULE$ = new PushMergedRemoteMetaFailedFetchResult$();

      public final String toString() {
         return "PushMergedRemoteMetaFailedFetchResult";
      }

      public PushMergedRemoteMetaFailedFetchResult apply(final int shuffleId, final int shuffleMergeId, final int reduceId, final BlockManagerId address) {
         return new PushMergedRemoteMetaFailedFetchResult(shuffleId, shuffleMergeId, reduceId, address);
      }

      public Option unapply(final PushMergedRemoteMetaFailedFetchResult x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple4(BoxesRunTime.boxToInteger(x$0.shuffleId()), BoxesRunTime.boxToInteger(x$0.shuffleMergeId()), BoxesRunTime.boxToInteger(x$0.reduceId()), x$0.address())));
      }

      private Object writeReplace() {
         return new ModuleSerializationProxy(PushMergedRemoteMetaFailedFetchResult$.class);
      }
   }

   public static class PushMergedLocalMetaFetchResult implements FetchResult, Product, Serializable {
      private final int shuffleId;
      private final int shuffleMergeId;
      private final int reduceId;
      private final RoaringBitmap[] bitmaps;
      private final String[] localDirs;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public int shuffleId() {
         return this.shuffleId;
      }

      public int shuffleMergeId() {
         return this.shuffleMergeId;
      }

      public int reduceId() {
         return this.reduceId;
      }

      public RoaringBitmap[] bitmaps() {
         return this.bitmaps;
      }

      public String[] localDirs() {
         return this.localDirs;
      }

      public PushMergedLocalMetaFetchResult copy(final int shuffleId, final int shuffleMergeId, final int reduceId, final RoaringBitmap[] bitmaps, final String[] localDirs) {
         return new PushMergedLocalMetaFetchResult(shuffleId, shuffleMergeId, reduceId, bitmaps, localDirs);
      }

      public int copy$default$1() {
         return this.shuffleId();
      }

      public int copy$default$2() {
         return this.shuffleMergeId();
      }

      public int copy$default$3() {
         return this.reduceId();
      }

      public RoaringBitmap[] copy$default$4() {
         return this.bitmaps();
      }

      public String[] copy$default$5() {
         return this.localDirs();
      }

      public String productPrefix() {
         return "PushMergedLocalMetaFetchResult";
      }

      public int productArity() {
         return 5;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return BoxesRunTime.boxToInteger(this.shuffleId());
            }
            case 1 -> {
               return BoxesRunTime.boxToInteger(this.shuffleMergeId());
            }
            case 2 -> {
               return BoxesRunTime.boxToInteger(this.reduceId());
            }
            case 3 -> {
               return this.bitmaps();
            }
            case 4 -> {
               return this.localDirs();
            }
            default -> {
               return Statics.ioobe(x$1);
            }
         }
      }

      public Iterator productIterator() {
         return scala.runtime.ScalaRunTime..MODULE$.typedProductIterator(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof PushMergedLocalMetaFetchResult;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0 -> {
               return "shuffleId";
            }
            case 1 -> {
               return "shuffleMergeId";
            }
            case 2 -> {
               return "reduceId";
            }
            case 3 -> {
               return "bitmaps";
            }
            case 4 -> {
               return "localDirs";
            }
            default -> {
               return (String)Statics.ioobe(x$1);
            }
         }
      }

      public int hashCode() {
         int var1 = -889275714;
         var1 = Statics.mix(var1, this.productPrefix().hashCode());
         var1 = Statics.mix(var1, this.shuffleId());
         var1 = Statics.mix(var1, this.shuffleMergeId());
         var1 = Statics.mix(var1, this.reduceId());
         var1 = Statics.mix(var1, Statics.anyHash(this.bitmaps()));
         var1 = Statics.mix(var1, Statics.anyHash(this.localDirs()));
         return Statics.finalizeHash(var1, 5);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         boolean var10000;
         if (this != x$1) {
            label44: {
               if (x$1 instanceof PushMergedLocalMetaFetchResult) {
                  PushMergedLocalMetaFetchResult var4 = (PushMergedLocalMetaFetchResult)x$1;
                  if (this.shuffleId() == var4.shuffleId() && this.shuffleMergeId() == var4.shuffleMergeId() && this.reduceId() == var4.reduceId() && this.bitmaps() == var4.bitmaps() && this.localDirs() == var4.localDirs() && var4.canEqual(this)) {
                     break label44;
                  }
               }

               var10000 = false;
               return var10000;
            }
         }

         var10000 = true;
         return var10000;
      }

      public PushMergedLocalMetaFetchResult(final int shuffleId, final int shuffleMergeId, final int reduceId, final RoaringBitmap[] bitmaps, final String[] localDirs) {
         this.shuffleId = shuffleId;
         this.shuffleMergeId = shuffleMergeId;
         this.reduceId = reduceId;
         this.bitmaps = bitmaps;
         this.localDirs = localDirs;
         Product.$init$(this);
      }
   }

   public static class PushMergedLocalMetaFetchResult$ extends AbstractFunction5 implements Serializable {
      public static final PushMergedLocalMetaFetchResult$ MODULE$ = new PushMergedLocalMetaFetchResult$();

      public final String toString() {
         return "PushMergedLocalMetaFetchResult";
      }

      public PushMergedLocalMetaFetchResult apply(final int shuffleId, final int shuffleMergeId, final int reduceId, final RoaringBitmap[] bitmaps, final String[] localDirs) {
         return new PushMergedLocalMetaFetchResult(shuffleId, shuffleMergeId, reduceId, bitmaps, localDirs);
      }

      public Option unapply(final PushMergedLocalMetaFetchResult x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple5(BoxesRunTime.boxToInteger(x$0.shuffleId()), BoxesRunTime.boxToInteger(x$0.shuffleMergeId()), BoxesRunTime.boxToInteger(x$0.reduceId()), x$0.bitmaps(), x$0.localDirs())));
      }

      private Object writeReplace() {
         return new ModuleSerializationProxy(PushMergedLocalMetaFetchResult$.class);
      }
   }

   public interface FetchResult {
   }
}
