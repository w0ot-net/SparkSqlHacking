package algebra.instances;

import algebra.ring.AdditiveCommutativeGroup;
import algebra.ring.AdditiveCommutativeMonoid;
import algebra.ring.AdditiveCommutativeSemigroup;
import algebra.ring.AdditiveGroup;
import algebra.ring.AdditiveMonoid;
import algebra.ring.AdditiveSemigroup;
import algebra.ring.MultiplicativeMonoid;
import algebra.ring.MultiplicativeSemigroup;
import algebra.ring.Rig;
import algebra.ring.Ring;
import algebra.ring.Rng;
import algebra.ring.Semiring;
import cats.kernel.CommutativeGroup;
import cats.kernel.CommutativeMonoid;
import cats.kernel.Eq;
import cats.kernel.Monoid;
import cats.kernel.Semigroup;
import scala.Option;
import scala.Tuple1;
import scala.Tuple10;
import scala.Tuple11;
import scala.Tuple12;
import scala.Tuple13;
import scala.Tuple14;
import scala.Tuple15;
import scala.Tuple16;
import scala.Tuple17;
import scala.Tuple18;
import scala.Tuple19;
import scala.Tuple2;
import scala.Tuple20;
import scala.Tuple21;
import scala.Tuple22;
import scala.Tuple3;
import scala.Tuple4;
import scala.Tuple5;
import scala.Tuple6;
import scala.Tuple7;
import scala.Tuple8;
import scala.Tuple9;
import scala.collection.IterableOnce;
import scala.math.BigInt;
import scala.reflect.ScalaSignature;

@ScalaSignature(
   bytes = "\u0006\u0005\u0011>ga\u0002.\\!\u0003\r\t\u0001\u0019\u0005\u0006_\u0002!\t\u0001\u001d\u0005\u0006i\u0002!\u0019!\u001e\u0005\b\u0003;\u0001A1AA\u0010\u0011\u001d\t\u0019\u0004\u0001C\u0002\u0003kAq!!\u0013\u0001\t\u0007\tY\u0005C\u0004\u0002`\u0001!\u0019!!\u0019\t\u000f\u0005\u0005\u0005\u0001b\u0001\u0002\u0004\"9\u00111\u0014\u0001\u0005\u0004\u0005u\u0005bBA[\u0001\u0011\r\u0011q\u0017\u0005\b\u0003\u001f\u0004A1AAi\u0011\u001d\tI\u0010\u0001C\u0002\u0003wDqAa\u0007\u0001\t\u0007\u0011i\u0002C\u0004\u0003>\u0001!\u0019Aa\u0010\t\u000f\t}\u0003\u0001b\u0001\u0003b!9!\u0011\u0013\u0001\u0005\u0004\tM\u0005b\u0002B^\u0001\u0011\r!Q\u0018\u0005\b\u0005K\u0004A1\u0001Bt\u0011\u001d\u0019y\u0001\u0001C\u0002\u0007#Aqa!\u0013\u0001\t\u0007\u0019Y\u0005C\u0004\u0004|\u0001!\u0019a! \t\u000f\r5\u0006\u0001b\u0001\u00040\"91q\u001c\u0001\u0005\u0004\r\u0005\bb\u0002C\u0011\u0001\u0011\rA1\u0005\u0005\b\t7\u0002A1\u0001C/\u0011\u001d!)\n\u0001C\u0002\t/Cq\u0001b4\u0001\t\u0007!\t\u000eC\u0004\u0006\u001a\u0001!\u0019!b\u0007\t\u000f\u0015m\u0003\u0001b\u0001\u0006^!9QQ\u0014\u0001\u0005\u0004\u0015}\u0005bBCp\u0001\u0011\rQ\u0011\u001d\u0005\b\rc\u0001A1\u0001D\u001a\u0011\u001d1Y\b\u0001C\u0002\r{BqA\"2\u0001\t\u000719\rC\u0004\b\u0010\u0001!\u0019a\"\u0005\t\u000f\u001d%\u0004\u0001b\u0001\bl!9q1\u0018\u0001\u0005\u0004\u001du\u0006b\u0002E\u0007\u0001\u0011\r\u0001r\u0002\u0005\b\u0011?\u0002A1\u0001E1\u0011\u001dA\t\r\u0001C\u0002\u0011\u0007Dq!c\u0007\u0001\t\u0007Ii\u0002C\u0004\nv\u0001!\u0019!c\u001e\t\u000f%=\u0007\u0001b\u0001\nR\"9!\u0012\b\u0001\u0005\u0004)m\u0002b\u0002FN\u0001\u0011\r!R\u0014\u0005\b\u0015{\u0004A1\u0001F\u0000\u0011\u001dYy\u0006\u0001C\u0002\u0017CBqa#5\u0001\t\u0007Y\u0019\u000eC\u0004\r<\u0001!\u0019\u0001$\u0010\t\u000f1\u0015\u0006\u0001b\u0001\r(\"9Qr\u0002\u0001\u0005\u00045E\u0001bBGE\u0001\u0011\rQ2\u0012\u0005\b\u001bw\u0004A1AG\u007f\u0011\u001dqi\u0007\u0001C\u0002\u001d_BqAd8\u0001\t\u0007q\t\u000fC\u0004\u0010b\u0001!\u0019ad\u0019\t\u000f=m\u0007\u0001b\u0001\u0010^\"9\u0001S\u000b\u0001\u0005\u0004A]\u0003b\u0002Ih\u0001\u0011\r\u0001\u0013\u001b\u0005\b#3\u0002A1AI.\u0011\u001d\tZ\u000e\u0001C\u0002#;DqA%\u0018\u0001\t\u0007\u0011z\u0006C\u0004\u0013`\u0002!\u0019A%9\t\u000fME\u0004\u0001b\u0001\u0014t!913 \u0001\u0005\u0004Mu\bb\u0002KC\u0001\u0011\rAs\u0011\u0005\b+\u001f\u0001A1AK\t\u0011\u001d)J\u000b\u0001C\u0002+WCqAf\u000f\u0001\t\u00071j\u0004C\u0004\u0017N\u0002!\u0019Af4\t\u000f]}\u0003\u0001b\u0001\u0018b!9\u0001\u0014\u0001\u0001\u0005\u0004a\r\u0001b\u0002MN\u0001\u0011\r\u0001T\u0014\u0005\b3k\u0001A1AM\u001c\u0011\u001dIz\r\u0001C\u00023#DqA'\u001f\u0001\t\u0007QZ\bC\u0004\u001c\u001c\u0001!\u0019a'\b\t\u000fmu\u0006\u0001b\u0001\u001c@\"9At\f\u0001\u0005\u0004q\u0005\u0004bBO\t\u0001\u0011\rQ4\u0003\u0005\b;w\u0003A1AO_\u0011\u001dq*\u0007\u0001C\u0002=OBqah\u0004\u0001\t\u0007y\n\u0002C\u0004 J\u0002!\u0019ah3\t\u000f\u0001n\u0004\u0001b\u0001!~!9\u0011U\u0006\u0001\u0005\u0004\u0005>\u0002bBQp\u0001\u0011\r\u0011\u0015\u001d\u0005\bEC\u0003A1\u0001RR\u0011\u001d\u0019[\u0006\u0001C\u0002G;Bq\u0001*\u0006\u0001\t\u0007!;B\u0001\bUkBdW-\u00138ti\u0006t7-Z:\u000b\u0005qk\u0016!C5ogR\fgnY3t\u0015\u0005q\u0016aB1mO\u0016\u0014'/Y\u0002\u0001'\r\u0001\u0011m\u001a\t\u0003E\u0016l\u0011a\u0019\u0006\u0002I\u0006)1oY1mC&\u0011am\u0019\u0002\u0007\u0003:L(+\u001a4\u0011\u0005!tW\"A5\u000b\u0005qS'BA6m\u0003\u0019YWM\u001d8fY*\tQ.\u0001\u0003dCR\u001c\u0018B\u0001.j\u0003\u0019!\u0013N\\5uIQ\t\u0011\u000f\u0005\u0002ce&\u00111o\u0019\u0002\u0005+:LG/A\u0005ukBdW-\r*jOV\u0019a/!\u0002\u0015\u0007]\f9\u0002E\u0002ywvl\u0011!\u001f\u0006\u0003uv\u000bAA]5oO&\u0011A0\u001f\u0002\u0004%&<\u0007\u0003\u00022\u007f\u0003\u0003I!a`2\u0003\rQ+\b\u000f\\32!\u0011\t\u0019!!\u0002\r\u0001\u00119\u0011q\u0001\u0002C\u0002\u0005%!AA!1#\u0011\tY!!\u0005\u0011\u0007\t\fi!C\u0002\u0002\u0010\r\u0014qAT8uQ&tw\rE\u0002c\u0003'I1!!\u0006d\u0005\r\te.\u001f\u0005\b\u00033\u0011\u00019AA\u000e\u0003\t\t\u0005\u0007\u0005\u0003yw\u0006\u0005\u0011A\u0003;va2,\u0017GU5oOV!\u0011\u0011EA\u0017)\u0011\t\u0019#a\f\u0011\u000ba\f)#!\u000b\n\u0007\u0005\u001d\u0012P\u0001\u0003SS:<\u0007\u0003\u00022\u007f\u0003W\u0001B!a\u0001\u0002.\u00119\u0011qA\u0002C\u0002\u0005%\u0001bBA\r\u0007\u0001\u000f\u0011\u0011\u0007\t\u0006q\u0006\u0015\u00121F\u0001\niV\u0004H.Z\u0019S]\u001e,B!a\u000e\u0002DQ!\u0011\u0011HA#!\u0015A\u00181HA \u0013\r\ti$\u001f\u0002\u0004%:<\u0007\u0003\u00022\u007f\u0003\u0003\u0002B!a\u0001\u0002D\u00119\u0011q\u0001\u0003C\u0002\u0005%\u0001bBA\r\t\u0001\u000f\u0011q\t\t\u0006q\u0006m\u0012\u0011I\u0001\u000fiV\u0004H.Z\u0019TK6L'/\u001b8h+\u0011\ti%!\u0017\u0015\t\u0005=\u00131\f\t\u0006q\u0006E\u0013QK\u0005\u0004\u0003'J(\u0001C*f[&\u0014\u0018N\\4\u0011\t\tt\u0018q\u000b\t\u0005\u0003\u0007\tI\u0006B\u0004\u0002\b\u0015\u0011\r!!\u0003\t\u000f\u0005eQ\u0001q\u0001\u0002^A)\u00010!\u0015\u0002X\u0005IA/\u001e9mKJ\u0012\u0016nZ\u000b\u0007\u0003G\ny'a\u001d\u0015\r\u0005\u0015\u0014qOA>!\u0011A80a\u001a\u0011\u000f\t\fI'!\u001c\u0002r%\u0019\u00111N2\u0003\rQ+\b\u000f\\33!\u0011\t\u0019!a\u001c\u0005\u000f\u0005\u001daA1\u0001\u0002\nA!\u00111AA:\t\u001d\t)H\u0002b\u0001\u0003\u0013\u0011!!Q\u0019\t\u000f\u0005ea\u0001q\u0001\u0002zA!\u0001p_A7\u0011\u001d\tiH\u0002a\u0002\u0003\u007f\n!!Q\u0019\u0011\ta\\\u0018\u0011O\u0001\u000biV\u0004H.\u001a\u001aSS:<WCBAC\u0003\u001b\u000b\t\n\u0006\u0004\u0002\b\u0006M\u0015q\u0013\t\u0006q\u0006\u0015\u0012\u0011\u0012\t\bE\u0006%\u00141RAH!\u0011\t\u0019!!$\u0005\u000f\u0005\u001dqA1\u0001\u0002\nA!\u00111AAI\t\u001d\t)h\u0002b\u0001\u0003\u0013Aq!!\u0007\b\u0001\b\t)\nE\u0003y\u0003K\tY\tC\u0004\u0002~\u001d\u0001\u001d!!'\u0011\u000ba\f)#a$\u0002\u0013Q,\b\u000f\\33%:<WCBAP\u0003O\u000bY\u000b\u0006\u0004\u0002\"\u00065\u0016\u0011\u0017\t\u0006q\u0006m\u00121\u0015\t\bE\u0006%\u0014QUAU!\u0011\t\u0019!a*\u0005\u000f\u0005\u001d\u0001B1\u0001\u0002\nA!\u00111AAV\t\u001d\t)\b\u0003b\u0001\u0003\u0013Aq!!\u0007\t\u0001\b\ty\u000bE\u0003y\u0003w\t)\u000bC\u0004\u0002~!\u0001\u001d!a-\u0011\u000ba\fY$!+\u0002\u001dQ,\b\u000f\\33'\u0016l\u0017N]5oOV1\u0011\u0011XAa\u0003\u000b$b!a/\u0002H\u0006-\u0007#\u0002=\u0002R\u0005u\u0006c\u00022\u0002j\u0005}\u00161\u0019\t\u0005\u0003\u0007\t\t\rB\u0004\u0002\b%\u0011\r!!\u0003\u0011\t\u0005\r\u0011Q\u0019\u0003\b\u0003kJ!\u0019AA\u0005\u0011\u001d\tI\"\u0003a\u0002\u0003\u0013\u0004R\u0001_A)\u0003\u007fCq!! \n\u0001\b\ti\rE\u0003y\u0003#\n\u0019-A\u0005ukBdWm\r*jOVA\u00111[Ap\u0003G\f9\u000f\u0006\u0005\u0002V\u0006-\u0018q^Az!\u0011A80a6\u0011\u0013\t\fI.!8\u0002b\u0006\u0015\u0018bAAnG\n1A+\u001e9mKN\u0002B!a\u0001\u0002`\u00129\u0011q\u0001\u0006C\u0002\u0005%\u0001\u0003BA\u0002\u0003G$q!!\u001e\u000b\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0005\u001dHaBAu\u0015\t\u0007\u0011\u0011\u0002\u0002\u0003\u0003JBq!!\u0007\u000b\u0001\b\ti\u000f\u0005\u0003yw\u0006u\u0007bBA?\u0015\u0001\u000f\u0011\u0011\u001f\t\u0005qn\f\t\u000fC\u0004\u0002v*\u0001\u001d!a>\u0002\u0005\u0005\u0013\u0004\u0003\u0002=|\u0003K\f!\u0002^;qY\u0016\u001c$+\u001b8h+!\tiP!\u0002\u0003\n\t5A\u0003CA\u0000\u0005\u001f\u0011\u0019Ba\u0006\u0011\u000ba\f)C!\u0001\u0011\u0013\t\fINa\u0001\u0003\b\t-\u0001\u0003BA\u0002\u0005\u000b!q!a\u0002\f\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\t%AaBA;\u0017\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011i\u0001B\u0004\u0002j.\u0011\r!!\u0003\t\u000f\u0005e1\u0002q\u0001\u0003\u0012A)\u00010!\n\u0003\u0004!9\u0011QP\u0006A\u0004\tU\u0001#\u0002=\u0002&\t\u001d\u0001bBA{\u0017\u0001\u000f!\u0011\u0004\t\u0006q\u0006\u0015\"1B\u0001\niV\u0004H.Z\u001aS]\u001e,\u0002Ba\b\u0003(\t-\"q\u0006\u000b\t\u0005C\u0011\tD!\u000e\u0003:A)\u00010a\u000f\u0003$AI!-!7\u0003&\t%\"Q\u0006\t\u0005\u0003\u0007\u00119\u0003B\u0004\u0002\b1\u0011\r!!\u0003\u0011\t\u0005\r!1\u0006\u0003\b\u0003kb!\u0019AA\u0005!\u0011\t\u0019Aa\f\u0005\u000f\u0005%HB1\u0001\u0002\n!9\u0011\u0011\u0004\u0007A\u0004\tM\u0002#\u0002=\u0002<\t\u0015\u0002bBA?\u0019\u0001\u000f!q\u0007\t\u0006q\u0006m\"\u0011\u0006\u0005\b\u0003kd\u00019\u0001B\u001e!\u0015A\u00181\bB\u0017\u00039!X\u000f\u001d7fgM+W.\u001b:j]\u001e,\u0002B!\u0011\u0003J\t5#\u0011\u000b\u000b\t\u0005\u0007\u0012\u0019Fa\u0016\u0003\\A)\u00010!\u0015\u0003FAI!-!7\u0003H\t-#q\n\t\u0005\u0003\u0007\u0011I\u0005B\u0004\u0002\b5\u0011\r!!\u0003\u0011\t\u0005\r!Q\n\u0003\b\u0003kj!\u0019AA\u0005!\u0011\t\u0019A!\u0015\u0005\u000f\u0005%XB1\u0001\u0002\n!9\u0011\u0011D\u0007A\u0004\tU\u0003#\u0002=\u0002R\t\u001d\u0003bBA?\u001b\u0001\u000f!\u0011\f\t\u0006q\u0006E#1\n\u0005\b\u0003kl\u00019\u0001B/!\u0015A\u0018\u0011\u000bB(\u0003%!X\u000f\u001d7fiIKw-\u0006\u0006\u0003d\t=$1\u000fB<\u0005w\"\"B!\u001a\u0003\u0000\t\r%q\u0011BF!\u0011A8Pa\u001a\u0011\u0017\t\u0014IG!\u001c\u0003r\tU$\u0011P\u0005\u0004\u0005W\u001a'A\u0002+va2,G\u0007\u0005\u0003\u0002\u0004\t=DaBA\u0004\u001d\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011\u0019\bB\u0004\u0002v9\u0011\r!!\u0003\u0011\t\u0005\r!q\u000f\u0003\b\u0003St!\u0019AA\u0005!\u0011\t\u0019Aa\u001f\u0005\u000f\tudB1\u0001\u0002\n\t\u0011\u0011i\r\u0005\b\u00033q\u00019\u0001BA!\u0011A8P!\u001c\t\u000f\u0005ud\u0002q\u0001\u0003\u0006B!\u0001p\u001fB9\u0011\u001d\t)P\u0004a\u0002\u0005\u0013\u0003B\u0001_>\u0003v!9!Q\u0012\bA\u0004\t=\u0015AA!4!\u0011A8P!\u001f\u0002\u0015Q,\b\u000f\\35%&tw-\u0006\u0006\u0003\u0016\nu%\u0011\u0015BS\u0005S#\"Ba&\u0003,\n=&1\u0017B\\!\u0015A\u0018Q\u0005BM!-\u0011'\u0011\u000eBN\u0005?\u0013\u0019Ka*\u0011\t\u0005\r!Q\u0014\u0003\b\u0003\u000fy!\u0019AA\u0005!\u0011\t\u0019A!)\u0005\u000f\u0005UtB1\u0001\u0002\nA!\u00111\u0001BS\t\u001d\tIo\u0004b\u0001\u0003\u0013\u0001B!a\u0001\u0003*\u00129!QP\bC\u0002\u0005%\u0001bBA\r\u001f\u0001\u000f!Q\u0016\t\u0006q\u0006\u0015\"1\u0014\u0005\b\u0003{z\u00019\u0001BY!\u0015A\u0018Q\u0005BP\u0011\u001d\t)p\u0004a\u0002\u0005k\u0003R\u0001_A\u0013\u0005GCqA!$\u0010\u0001\b\u0011I\fE\u0003y\u0003K\u00119+A\u0005ukBdW\r\u000e*oOVQ!q\u0018Bd\u0005\u0017\u0014yMa5\u0015\u0015\t\u0005'Q\u001bBm\u0005;\u0014\t\u000fE\u0003y\u0003w\u0011\u0019\rE\u0006c\u0005S\u0012)M!3\u0003N\nE\u0007\u0003BA\u0002\u0005\u000f$q!a\u0002\u0011\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\t-GaBA;!\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011y\rB\u0004\u0002jB\u0011\r!!\u0003\u0011\t\u0005\r!1\u001b\u0003\b\u0005{\u0002\"\u0019AA\u0005\u0011\u001d\tI\u0002\u0005a\u0002\u0005/\u0004R\u0001_A\u001e\u0005\u000bDq!! \u0011\u0001\b\u0011Y\u000eE\u0003y\u0003w\u0011I\rC\u0004\u0002vB\u0001\u001dAa8\u0011\u000ba\fYD!4\t\u000f\t5\u0005\u0003q\u0001\u0003dB)\u00010a\u000f\u0003R\u0006qA/\u001e9mKR\u001aV-\\5sS:<WC\u0003Bu\u0005c\u0014)P!?\u0003~RQ!1\u001eB\u0000\u0007\u0007\u00199aa\u0003\u0011\u000ba\f\tF!<\u0011\u0017\t\u0014IGa<\u0003t\n](1 \t\u0005\u0003\u0007\u0011\t\u0010B\u0004\u0002\bE\u0011\r!!\u0003\u0011\t\u0005\r!Q\u001f\u0003\b\u0003k\n\"\u0019AA\u0005!\u0011\t\u0019A!?\u0005\u000f\u0005%\u0018C1\u0001\u0002\nA!\u00111\u0001B\u007f\t\u001d\u0011i(\u0005b\u0001\u0003\u0013Aq!!\u0007\u0012\u0001\b\u0019\t\u0001E\u0003y\u0003#\u0012y\u000fC\u0004\u0002~E\u0001\u001da!\u0002\u0011\u000ba\f\tFa=\t\u000f\u0005U\u0018\u0003q\u0001\u0004\nA)\u00010!\u0015\u0003x\"9!QR\tA\u0004\r5\u0001#\u0002=\u0002R\tm\u0018!\u0003;va2,WGU5h+1\u0019\u0019ba\b\u0004$\r\u001d21FB\u0018)1\u0019)ba\r\u00048\rm2qHB\"!\u0011A8pa\u0006\u0011\u001b\t\u001cIb!\b\u0004\"\r\u00152\u0011FB\u0017\u0013\r\u0019Yb\u0019\u0002\u0007)V\u0004H.Z\u001b\u0011\t\u0005\r1q\u0004\u0003\b\u0003\u000f\u0011\"\u0019AA\u0005!\u0011\t\u0019aa\t\u0005\u000f\u0005U$C1\u0001\u0002\nA!\u00111AB\u0014\t\u001d\tIO\u0005b\u0001\u0003\u0013\u0001B!a\u0001\u0004,\u00119!Q\u0010\nC\u0002\u0005%\u0001\u0003BA\u0002\u0007_!qa!\r\u0013\u0005\u0004\tIA\u0001\u0002Bi!9\u0011\u0011\u0004\nA\u0004\rU\u0002\u0003\u0002=|\u0007;Aq!! \u0013\u0001\b\u0019I\u0004\u0005\u0003yw\u000e\u0005\u0002bBA{%\u0001\u000f1Q\b\t\u0005qn\u001c)\u0003C\u0004\u0003\u000eJ\u0001\u001da!\u0011\u0011\ta\\8\u0011\u0006\u0005\b\u0007\u000b\u0012\u00029AB$\u0003\t\tE\u0007\u0005\u0003yw\u000e5\u0012A\u0003;va2,WGU5oOVa1QJB+\u00073\u001aif!\u0019\u0004fQa1qJB4\u0007W\u001ayga\u001d\u0004xA)\u00010!\n\u0004RAi!m!\u0007\u0004T\r]31LB0\u0007G\u0002B!a\u0001\u0004V\u00119\u0011qA\nC\u0002\u0005%\u0001\u0003BA\u0002\u00073\"q!!\u001e\u0014\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\ruCaBAu'\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0019\t\u0007B\u0004\u0003~M\u0011\r!!\u0003\u0011\t\u0005\r1Q\r\u0003\b\u0007c\u0019\"\u0019AA\u0005\u0011\u001d\tIb\u0005a\u0002\u0007S\u0002R\u0001_A\u0013\u0007'Bq!! \u0014\u0001\b\u0019i\u0007E\u0003y\u0003K\u00199\u0006C\u0004\u0002vN\u0001\u001da!\u001d\u0011\u000ba\f)ca\u0017\t\u000f\t55\u0003q\u0001\u0004vA)\u00010!\n\u0004`!91QI\nA\u0004\re\u0004#\u0002=\u0002&\r\r\u0014!\u0003;va2,WG\u00158h+1\u0019yha\"\u0004\f\u000e=51SBL)1\u0019\ti!'\u0004\u001e\u000e\u00056QUBU!\u0015A\u00181HBB!5\u00117\u0011DBC\u0007\u0013\u001bii!%\u0004\u0016B!\u00111ABD\t\u001d\t9\u0001\u0006b\u0001\u0003\u0013\u0001B!a\u0001\u0004\f\u00129\u0011Q\u000f\u000bC\u0002\u0005%\u0001\u0003BA\u0002\u0007\u001f#q!!;\u0015\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\rMEa\u0002B?)\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u00199\nB\u0004\u00042Q\u0011\r!!\u0003\t\u000f\u0005eA\u0003q\u0001\u0004\u001cB)\u00010a\u000f\u0004\u0006\"9\u0011Q\u0010\u000bA\u0004\r}\u0005#\u0002=\u0002<\r%\u0005bBA{)\u0001\u000f11\u0015\t\u0006q\u0006m2Q\u0012\u0005\b\u0005\u001b#\u00029ABT!\u0015A\u00181HBI\u0011\u001d\u0019)\u0005\u0006a\u0002\u0007W\u0003R\u0001_A\u001e\u0007+\u000ba\u0002^;qY\u0016,4+Z7je&tw-\u0006\u0007\u00042\u000ee6QXBa\u0007\u000b\u001cI\r\u0006\u0007\u00044\u000e-7qZBj\u0007/\u001cY\u000eE\u0003y\u0003#\u001a)\fE\u0007c\u00073\u00199la/\u0004@\u000e\r7q\u0019\t\u0005\u0003\u0007\u0019I\fB\u0004\u0002\bU\u0011\r!!\u0003\u0011\t\u0005\r1Q\u0018\u0003\b\u0003k*\"\u0019AA\u0005!\u0011\t\u0019a!1\u0005\u000f\u0005%XC1\u0001\u0002\nA!\u00111ABc\t\u001d\u0011i(\u0006b\u0001\u0003\u0013\u0001B!a\u0001\u0004J\u001291\u0011G\u000bC\u0002\u0005%\u0001bBA\r+\u0001\u000f1Q\u001a\t\u0006q\u0006E3q\u0017\u0005\b\u0003{*\u00029ABi!\u0015A\u0018\u0011KB^\u0011\u001d\t)0\u0006a\u0002\u0007+\u0004R\u0001_A)\u0007\u007fCqA!$\u0016\u0001\b\u0019I\u000eE\u0003y\u0003#\u001a\u0019\rC\u0004\u0004FU\u0001\u001da!8\u0011\u000ba\f\tfa2\u0002\u0013Q,\b\u000f\\37%&<WCDBr\u0007_\u001c\u0019pa>\u0004|\u000e}H1\u0001\u000b\u000f\u0007K$9\u0001b\u0003\u0005\u0010\u0011MAq\u0003C\u000e!\u0011A8pa:\u0011\u001f\t\u001cIo!<\u0004r\u000eU8\u0011`B\u007f\t\u0003I1aa;d\u0005\u0019!V\u000f\u001d7fmA!\u00111ABx\t\u001d\t9A\u0006b\u0001\u0003\u0013\u0001B!a\u0001\u0004t\u00129\u0011Q\u000f\fC\u0002\u0005%\u0001\u0003BA\u0002\u0007o$q!!;\u0017\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\rmHa\u0002B?-\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0019y\u0010B\u0004\u00042Y\u0011\r!!\u0003\u0011\t\u0005\rA1\u0001\u0003\b\t\u000b1\"\u0019AA\u0005\u0005\t\tU\u0007C\u0004\u0002\u001aY\u0001\u001d\u0001\"\u0003\u0011\ta\\8Q\u001e\u0005\b\u0003{2\u00029\u0001C\u0007!\u0011A8p!=\t\u000f\u0005Uh\u0003q\u0001\u0005\u0012A!\u0001p_B{\u0011\u001d\u0011iI\u0006a\u0002\t+\u0001B\u0001_>\u0004z\"91Q\t\fA\u0004\u0011e\u0001\u0003\u0002=|\u0007{Dq\u0001\"\b\u0017\u0001\b!y\"\u0001\u0002BkA!\u0001p\u001fC\u0001\u0003)!X\u000f\u001d7fmIKgnZ\u000b\u000f\tK!i\u0003\"\r\u00056\u0011eBQ\bC!)9!9\u0003b\u0011\u0005H\u0011-Cq\nC*\t/\u0002R\u0001_A\u0013\tS\u0001rBYBu\tW!y\u0003b\r\u00058\u0011mBq\b\t\u0005\u0003\u0007!i\u0003B\u0004\u0002\b]\u0011\r!!\u0003\u0011\t\u0005\rA\u0011\u0007\u0003\b\u0003k:\"\u0019AA\u0005!\u0011\t\u0019\u0001\"\u000e\u0005\u000f\u0005%xC1\u0001\u0002\nA!\u00111\u0001C\u001d\t\u001d\u0011ih\u0006b\u0001\u0003\u0013\u0001B!a\u0001\u0005>\u001191\u0011G\fC\u0002\u0005%\u0001\u0003BA\u0002\t\u0003\"q\u0001\"\u0002\u0018\u0005\u0004\tI\u0001C\u0004\u0002\u001a]\u0001\u001d\u0001\"\u0012\u0011\u000ba\f)\u0003b\u000b\t\u000f\u0005ut\u0003q\u0001\u0005JA)\u00010!\n\u00050!9\u0011Q_\fA\u0004\u00115\u0003#\u0002=\u0002&\u0011M\u0002b\u0002BG/\u0001\u000fA\u0011\u000b\t\u0006q\u0006\u0015Bq\u0007\u0005\b\u0007\u000b:\u00029\u0001C+!\u0015A\u0018Q\u0005C\u001e\u0011\u001d!ib\u0006a\u0002\t3\u0002R\u0001_A\u0013\t\u007f\t\u0011\u0002^;qY\u00164$K\\4\u0016\u001d\u0011}Cq\rC6\t_\"\u0019\bb\u001e\u0005|QqA\u0011\rC?\t\u0003#)\t\"#\u0005\u000e\u0012E\u0005#\u0002=\u0002<\u0011\r\u0004c\u00042\u0004j\u0012\u0015D\u0011\u000eC7\tc\")\b\"\u001f\u0011\t\u0005\rAq\r\u0003\b\u0003\u000fA\"\u0019AA\u0005!\u0011\t\u0019\u0001b\u001b\u0005\u000f\u0005U\u0004D1\u0001\u0002\nA!\u00111\u0001C8\t\u001d\tI\u000f\u0007b\u0001\u0003\u0013\u0001B!a\u0001\u0005t\u00119!Q\u0010\rC\u0002\u0005%\u0001\u0003BA\u0002\to\"qa!\r\u0019\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0011mDa\u0002C\u00031\t\u0007\u0011\u0011\u0002\u0005\b\u00033A\u00029\u0001C@!\u0015A\u00181\bC3\u0011\u001d\ti\b\u0007a\u0002\t\u0007\u0003R\u0001_A\u001e\tSBq!!>\u0019\u0001\b!9\tE\u0003y\u0003w!i\u0007C\u0004\u0003\u000eb\u0001\u001d\u0001b#\u0011\u000ba\fY\u0004\"\u001d\t\u000f\r\u0015\u0003\u0004q\u0001\u0005\u0010B)\u00010a\u000f\u0005v!9AQ\u0004\rA\u0004\u0011M\u0005#\u0002=\u0002<\u0011e\u0014A\u0004;va2,ggU3nSJLgnZ\u000b\u000f\t3#\t\u000b\"*\u0005*\u00125F\u0011\u0017C[)9!Y\nb.\u0005<\u0012}F1\u0019Cd\t\u0017\u0004R\u0001_A)\t;\u0003rBYBu\t?#\u0019\u000bb*\u0005,\u0012=F1\u0017\t\u0005\u0003\u0007!\t\u000bB\u0004\u0002\be\u0011\r!!\u0003\u0011\t\u0005\rAQ\u0015\u0003\b\u0003kJ\"\u0019AA\u0005!\u0011\t\u0019\u0001\"+\u0005\u000f\u0005%\u0018D1\u0001\u0002\nA!\u00111\u0001CW\t\u001d\u0011i(\u0007b\u0001\u0003\u0013\u0001B!a\u0001\u00052\u001291\u0011G\rC\u0002\u0005%\u0001\u0003BA\u0002\tk#q\u0001\"\u0002\u001a\u0005\u0004\tI\u0001C\u0004\u0002\u001ae\u0001\u001d\u0001\"/\u0011\u000ba\f\t\u0006b(\t\u000f\u0005u\u0014\u0004q\u0001\u0005>B)\u00010!\u0015\u0005$\"9\u0011Q_\rA\u0004\u0011\u0005\u0007#\u0002=\u0002R\u0011\u001d\u0006b\u0002BG3\u0001\u000fAQ\u0019\t\u0006q\u0006EC1\u0016\u0005\b\u0007\u000bJ\u00029\u0001Ce!\u0015A\u0018\u0011\u000bCX\u0011\u001d!i\"\u0007a\u0002\t\u001b\u0004R\u0001_A)\tg\u000b\u0011\u0002^;qY\u0016<$+[4\u0016!\u0011MGq\u001cCr\tO$Y\u000fb<\u0005t\u0012]H\u0003\u0005Ck\tw$y0b\u0001\u0006\b\u0015-QqBC\n!\u0011A8\u0010b6\u0011#\t$I\u000e\"8\u0005b\u0012\u0015H\u0011\u001eCw\tc$)0C\u0002\u0005\\\u000e\u0014a\u0001V;qY\u0016<\u0004\u0003BA\u0002\t?$q!a\u0002\u001b\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0011\rHaBA;5\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007!9\u000fB\u0004\u0002jj\u0011\r!!\u0003\u0011\t\u0005\rA1\u001e\u0003\b\u0005{R\"\u0019AA\u0005!\u0011\t\u0019\u0001b<\u0005\u000f\rE\"D1\u0001\u0002\nA!\u00111\u0001Cz\t\u001d!)A\u0007b\u0001\u0003\u0013\u0001B!a\u0001\u0005x\u00129A\u0011 \u000eC\u0002\u0005%!AA!7\u0011\u001d\tIB\u0007a\u0002\t{\u0004B\u0001_>\u0005^\"9\u0011Q\u0010\u000eA\u0004\u0015\u0005\u0001\u0003\u0002=|\tCDq!!>\u001b\u0001\b))\u0001\u0005\u0003yw\u0012\u0015\bb\u0002BG5\u0001\u000fQ\u0011\u0002\t\u0005qn$I\u000fC\u0004\u0004Fi\u0001\u001d!\"\u0004\u0011\ta\\HQ\u001e\u0005\b\t;Q\u00029AC\t!\u0011A8\u0010\"=\t\u000f\u0015U!\u0004q\u0001\u0006\u0018\u0005\u0011\u0011I\u000e\t\u0005qn$)0\u0001\u0006ukBdWm\u000e*j]\u001e,\u0002#\"\b\u0006&\u0015%RQFC\u0019\u000bk)I$\"\u0010\u0015!\u0015}QqHC\"\u000b\u000f*Y%b\u0014\u0006T\u0015]\u0003#\u0002=\u0002&\u0015\u0005\u0002#\u00052\u0005Z\u0016\rRqEC\u0016\u000b_)\u0019$b\u000e\u0006<A!\u00111AC\u0013\t\u001d\t9a\u0007b\u0001\u0003\u0013\u0001B!a\u0001\u0006*\u00119\u0011QO\u000eC\u0002\u0005%\u0001\u0003BA\u0002\u000b[!q!!;\u001c\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0015EBa\u0002B?7\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007))\u0004B\u0004\u00042m\u0011\r!!\u0003\u0011\t\u0005\rQ\u0011\b\u0003\b\t\u000bY\"\u0019AA\u0005!\u0011\t\u0019!\"\u0010\u0005\u000f\u0011e8D1\u0001\u0002\n!9\u0011\u0011D\u000eA\u0004\u0015\u0005\u0003#\u0002=\u0002&\u0015\r\u0002bBA?7\u0001\u000fQQ\t\t\u0006q\u0006\u0015Rq\u0005\u0005\b\u0003k\\\u00029AC%!\u0015A\u0018QEC\u0016\u0011\u001d\u0011ii\u0007a\u0002\u000b\u001b\u0002R\u0001_A\u0013\u000b_Aqa!\u0012\u001c\u0001\b)\t\u0006E\u0003y\u0003K)\u0019\u0004C\u0004\u0005\u001em\u0001\u001d!\"\u0016\u0011\u000ba\f)#b\u000e\t\u000f\u0015U1\u0004q\u0001\u0006ZA)\u00010!\n\u0006<\u0005IA/\u001e9mK^\u0012fnZ\u000b\u0011\u000b?*9'b\u001b\u0006p\u0015MTqOC>\u000b\u007f\"\u0002#\"\u0019\u0006\u0002\u0016\u0015U\u0011RCG\u000b#+)*\"'\u0011\u000ba\fY$b\u0019\u0011#\t$I.\"\u001a\u0006j\u00155T\u0011OC;\u000bs*i\b\u0005\u0003\u0002\u0004\u0015\u001dDaBA\u00049\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007)Y\u0007B\u0004\u0002vq\u0011\r!!\u0003\u0011\t\u0005\rQq\u000e\u0003\b\u0003Sd\"\u0019AA\u0005!\u0011\t\u0019!b\u001d\u0005\u000f\tuDD1\u0001\u0002\nA!\u00111AC<\t\u001d\u0019\t\u0004\bb\u0001\u0003\u0013\u0001B!a\u0001\u0006|\u00119AQ\u0001\u000fC\u0002\u0005%\u0001\u0003BA\u0002\u000b\u007f\"q\u0001\"?\u001d\u0005\u0004\tI\u0001C\u0004\u0002\u001aq\u0001\u001d!b!\u0011\u000ba\fY$\"\u001a\t\u000f\u0005uD\u0004q\u0001\u0006\bB)\u00010a\u000f\u0006j!9\u0011Q\u001f\u000fA\u0004\u0015-\u0005#\u0002=\u0002<\u00155\u0004b\u0002BG9\u0001\u000fQq\u0012\t\u0006q\u0006mR\u0011\u000f\u0005\b\u0007\u000bb\u00029ACJ!\u0015A\u00181HC;\u0011\u001d!i\u0002\ba\u0002\u000b/\u0003R\u0001_A\u001e\u000bsBq!\"\u0006\u001d\u0001\b)Y\nE\u0003y\u0003w)i(\u0001\bukBdWmN*f[&\u0014\u0018N\\4\u0016!\u0015\u0005V\u0011VCW\u000bc+),\"/\u0006>\u0016\u0005G\u0003ECR\u000b\u0007,9-b3\u0006P\u0016MWq[Cn!\u0015A\u0018\u0011KCS!E\u0011G\u0011\\CT\u000bW+y+b-\u00068\u0016mVq\u0018\t\u0005\u0003\u0007)I\u000bB\u0004\u0002\bu\u0011\r!!\u0003\u0011\t\u0005\rQQ\u0016\u0003\b\u0003kj\"\u0019AA\u0005!\u0011\t\u0019!\"-\u0005\u000f\u0005%XD1\u0001\u0002\nA!\u00111AC[\t\u001d\u0011i(\bb\u0001\u0003\u0013\u0001B!a\u0001\u0006:\u001291\u0011G\u000fC\u0002\u0005%\u0001\u0003BA\u0002\u000b{#q\u0001\"\u0002\u001e\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0015\u0005Ga\u0002C};\t\u0007\u0011\u0011\u0002\u0005\b\u00033i\u00029ACc!\u0015A\u0018\u0011KCT\u0011\u001d\ti(\ba\u0002\u000b\u0013\u0004R\u0001_A)\u000bWCq!!>\u001e\u0001\b)i\rE\u0003y\u0003#*y\u000bC\u0004\u0003\u000ev\u0001\u001d!\"5\u0011\u000ba\f\t&b-\t\u000f\r\u0015S\u0004q\u0001\u0006VB)\u00010!\u0015\u00068\"9AQD\u000fA\u0004\u0015e\u0007#\u0002=\u0002R\u0015m\u0006bBC\u000b;\u0001\u000fQQ\u001c\t\u0006q\u0006ESqX\u0001\niV\u0004H.\u001a\u001dSS\u001e,\"#b9\u0006p\u0016MXq_C~\u000b\u007f4\u0019Ab\u0002\u0007\fQ\u0011RQ\u001dD\b\r'19Bb\u0007\u0007 \u0019\rbq\u0005D\u0016!\u0011A80b:\u0011'\t,I/\"<\u0006r\u0016UX\u0011`C\u007f\r\u00031)A\"\u0003\n\u0007\u0015-8M\u0001\u0004UkBdW\r\u000f\t\u0005\u0003\u0007)y\u000fB\u0004\u0002\by\u0011\r!!\u0003\u0011\t\u0005\rQ1\u001f\u0003\b\u0003kr\"\u0019AA\u0005!\u0011\t\u0019!b>\u0005\u000f\u0005%hD1\u0001\u0002\nA!\u00111AC~\t\u001d\u0011iH\bb\u0001\u0003\u0013\u0001B!a\u0001\u0006\u0000\u001291\u0011\u0007\u0010C\u0002\u0005%\u0001\u0003BA\u0002\r\u0007!q\u0001\"\u0002\u001f\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0019\u001dAa\u0002C}=\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u00071Y\u0001B\u0004\u0007\u000ey\u0011\r!!\u0003\u0003\u0005\u0005;\u0004bBA\r=\u0001\u000fa\u0011\u0003\t\u0005qn,i\u000fC\u0004\u0002~y\u0001\u001dA\"\u0006\u0011\ta\\X\u0011\u001f\u0005\b\u0003kt\u00029\u0001D\r!\u0011A80\">\t\u000f\t5e\u0004q\u0001\u0007\u001eA!\u0001p_C}\u0011\u001d\u0019)E\ba\u0002\rC\u0001B\u0001_>\u0006~\"9AQ\u0004\u0010A\u0004\u0019\u0015\u0002\u0003\u0002=|\r\u0003Aq!\"\u0006\u001f\u0001\b1I\u0003\u0005\u0003yw\u001a\u0015\u0001b\u0002D\u0017=\u0001\u000faqF\u0001\u0003\u0003^\u0002B\u0001_>\u0007\n\u0005QA/\u001e9mKb\u0012\u0016N\\4\u0016%\u0019UbQ\bD!\r\u000b2IE\"\u0014\u0007R\u0019Uc\u0011\f\u000b\u0013\ro1YFb\u0018\u0007d\u0019\u001dd1\u000eD8\rg29\bE\u0003y\u0003K1I\u0004E\nc\u000bS4YDb\u0010\u0007D\u0019\u001dc1\nD(\r'29\u0006\u0005\u0003\u0002\u0004\u0019uBaBA\u0004?\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u00071\t\u0005B\u0004\u0002v}\u0011\r!!\u0003\u0011\t\u0005\raQ\t\u0003\b\u0003S|\"\u0019AA\u0005!\u0011\t\u0019A\"\u0013\u0005\u000f\tutD1\u0001\u0002\nA!\u00111\u0001D'\t\u001d\u0019\td\bb\u0001\u0003\u0013\u0001B!a\u0001\u0007R\u00119AQA\u0010C\u0002\u0005%\u0001\u0003BA\u0002\r+\"q\u0001\"? \u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0019eCa\u0002D\u0007?\t\u0007\u0011\u0011\u0002\u0005\b\u00033y\u00029\u0001D/!\u0015A\u0018Q\u0005D\u001e\u0011\u001d\tih\ba\u0002\rC\u0002R\u0001_A\u0013\r\u007fAq!!> \u0001\b1)\u0007E\u0003y\u0003K1\u0019\u0005C\u0004\u0003\u000e~\u0001\u001dA\"\u001b\u0011\u000ba\f)Cb\u0012\t\u000f\r\u0015s\u0004q\u0001\u0007nA)\u00010!\n\u0007L!9AQD\u0010A\u0004\u0019E\u0004#\u0002=\u0002&\u0019=\u0003bBC\u000b?\u0001\u000faQ\u000f\t\u0006q\u0006\u0015b1\u000b\u0005\b\r[y\u00029\u0001D=!\u0015A\u0018Q\u0005D,\u0003%!X\u000f\u001d7fqIsw-\u0006\n\u0007\u0000\u0019\u001de1\u0012DH\r'39Jb'\u0007 \u001a\rFC\u0005DA\rK3IK\",\u00072\u001aUf\u0011\u0018D_\r\u0003\u0004R\u0001_A\u001e\r\u0007\u00032CYCu\r\u000b3II\"$\u0007\u0012\u001aUe\u0011\u0014DO\rC\u0003B!a\u0001\u0007\b\u00129\u0011q\u0001\u0011C\u0002\u0005%\u0001\u0003BA\u0002\r\u0017#q!!\u001e!\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0019=EaBAuA\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u00071\u0019\nB\u0004\u0003~\u0001\u0012\r!!\u0003\u0011\t\u0005\raq\u0013\u0003\b\u0007c\u0001#\u0019AA\u0005!\u0011\t\u0019Ab'\u0005\u000f\u0011\u0015\u0001E1\u0001\u0002\nA!\u00111\u0001DP\t\u001d!I\u0010\tb\u0001\u0003\u0013\u0001B!a\u0001\u0007$\u00129aQ\u0002\u0011C\u0002\u0005%\u0001bBA\rA\u0001\u000faq\u0015\t\u0006q\u0006mbQ\u0011\u0005\b\u0003{\u0002\u00039\u0001DV!\u0015A\u00181\bDE\u0011\u001d\t)\u0010\ta\u0002\r_\u0003R\u0001_A\u001e\r\u001bCqA!$!\u0001\b1\u0019\fE\u0003y\u0003w1\t\nC\u0004\u0004F\u0001\u0002\u001dAb.\u0011\u000ba\fYD\"&\t\u000f\u0011u\u0001\u0005q\u0001\u0007<B)\u00010a\u000f\u0007\u001a\"9QQ\u0003\u0011A\u0004\u0019}\u0006#\u0002=\u0002<\u0019u\u0005b\u0002D\u0017A\u0001\u000fa1\u0019\t\u0006q\u0006mb\u0011U\u0001\u000fiV\u0004H.\u001a\u001dTK6L'/\u001b8h+I1IM\"5\u0007V\u001aegQ\u001cDq\rK4IO\"<\u0015%\u0019-gq\u001eDz\ro4YPb@\b\u0004\u001d\u001dq1\u0002\t\u0006q\u0006EcQ\u001a\t\u0014E\u0016%hq\u001aDj\r/4YNb8\u0007d\u001a\u001dh1\u001e\t\u0005\u0003\u00071\t\u000eB\u0004\u0002\b\u0005\u0012\r!!\u0003\u0011\t\u0005\raQ\u001b\u0003\b\u0003k\n#\u0019AA\u0005!\u0011\t\u0019A\"7\u0005\u000f\u0005%\u0018E1\u0001\u0002\nA!\u00111\u0001Do\t\u001d\u0011i(\tb\u0001\u0003\u0013\u0001B!a\u0001\u0007b\u001291\u0011G\u0011C\u0002\u0005%\u0001\u0003BA\u0002\rK$q\u0001\"\u0002\"\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0019%Ha\u0002C}C\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u00071i\u000fB\u0004\u0007\u000e\u0005\u0012\r!!\u0003\t\u000f\u0005e\u0011\u0005q\u0001\u0007rB)\u00010!\u0015\u0007P\"9\u0011QP\u0011A\u0004\u0019U\b#\u0002=\u0002R\u0019M\u0007bBA{C\u0001\u000fa\u0011 \t\u0006q\u0006Ecq\u001b\u0005\b\u0005\u001b\u000b\u00039\u0001D\u007f!\u0015A\u0018\u0011\u000bDn\u0011\u001d\u0019)%\ta\u0002\u000f\u0003\u0001R\u0001_A)\r?Dq\u0001\"\b\"\u0001\b9)\u0001E\u0003y\u0003#2\u0019\u000fC\u0004\u0006\u0016\u0005\u0002\u001da\"\u0003\u0011\u000ba\f\tFb:\t\u000f\u00195\u0012\u0005q\u0001\b\u000eA)\u00010!\u0015\u0007l\u0006IA/\u001e9mKf\u0012\u0016nZ\u000b\u0015\u000f'9ybb\t\b(\u001d-rqFD\u001a\u000fo9Ydb\u0010\u0015)\u001dUq1ID$\u000f\u0017:yeb\u0015\bX\u001dmsqLD2!\u0011A8pb\u0006\u0011+\t<Ib\"\b\b\"\u001d\u0015r\u0011FD\u0017\u000fc9)d\"\u000f\b>%\u0019q1D2\u0003\rQ+\b\u000f\\3:!\u0011\t\u0019ab\b\u0005\u000f\u0005\u001d!E1\u0001\u0002\nA!\u00111AD\u0012\t\u001d\t)H\tb\u0001\u0003\u0013\u0001B!a\u0001\b(\u00119\u0011\u0011\u001e\u0012C\u0002\u0005%\u0001\u0003BA\u0002\u000fW!qA! #\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u001d=BaBB\u0019E\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u00079\u0019\u0004B\u0004\u0005\u0006\t\u0012\r!!\u0003\u0011\t\u0005\rqq\u0007\u0003\b\ts\u0014#\u0019AA\u0005!\u0011\t\u0019ab\u000f\u0005\u000f\u00195!E1\u0001\u0002\nA!\u00111AD \t\u001d9\tE\tb\u0001\u0003\u0013\u0011!!\u0011\u001d\t\u000f\u0005e!\u0005q\u0001\bFA!\u0001p_D\u000f\u0011\u001d\tiH\ta\u0002\u000f\u0013\u0002B\u0001_>\b\"!9\u0011Q\u001f\u0012A\u0004\u001d5\u0003\u0003\u0002=|\u000fKAqA!$#\u0001\b9\t\u0006\u0005\u0003yw\u001e%\u0002bBB#E\u0001\u000fqQ\u000b\t\u0005qn<i\u0003C\u0004\u0005\u001e\t\u0002\u001da\"\u0017\u0011\ta\\x\u0011\u0007\u0005\b\u000b+\u0011\u00039AD/!\u0011A8p\"\u000e\t\u000f\u00195\"\u0005q\u0001\bbA!\u0001p_D\u001d\u0011\u001d9)G\ta\u0002\u000fO\n!!\u0011\u001d\u0011\ta\\xQH\u0001\u000biV\u0004H.Z\u001dSS:<W\u0003FD7\u000fk:Ih\" \b\u0002\u001e\u0015u\u0011RDG\u000f#;)\n\u0006\u000b\bp\u001d]u1TDP\u000fG;9kb+\b0\u001eMvq\u0017\t\u0006q\u0006\u0015r\u0011\u000f\t\u0016E\u001eeq1OD<\u000fw:yhb!\b\b\u001e-uqRDJ!\u0011\t\u0019a\"\u001e\u0005\u000f\u0005\u001d1E1\u0001\u0002\nA!\u00111AD=\t\u001d\t)h\tb\u0001\u0003\u0013\u0001B!a\u0001\b~\u00119\u0011\u0011^\u0012C\u0002\u0005%\u0001\u0003BA\u0002\u000f\u0003#qA! $\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u001d\u0015EaBB\u0019G\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u00079I\tB\u0004\u0005\u0006\r\u0012\r!!\u0003\u0011\t\u0005\rqQ\u0012\u0003\b\ts\u001c#\u0019AA\u0005!\u0011\t\u0019a\"%\u0005\u000f\u001951E1\u0001\u0002\nA!\u00111ADK\t\u001d9\te\tb\u0001\u0003\u0013Aq!!\u0007$\u0001\b9I\nE\u0003y\u0003K9\u0019\bC\u0004\u0002~\r\u0002\u001da\"(\u0011\u000ba\f)cb\u001e\t\u000f\u0005U8\u0005q\u0001\b\"B)\u00010!\n\b|!9!QR\u0012A\u0004\u001d\u0015\u0006#\u0002=\u0002&\u001d}\u0004bBB#G\u0001\u000fq\u0011\u0016\t\u0006q\u0006\u0015r1\u0011\u0005\b\t;\u0019\u00039ADW!\u0015A\u0018QEDD\u0011\u001d))b\ta\u0002\u000fc\u0003R\u0001_A\u0013\u000f\u0017CqA\"\f$\u0001\b9)\fE\u0003y\u0003K9y\tC\u0004\bf\r\u0002\u001da\"/\u0011\u000ba\f)cb%\u0002\u0013Q,\b\u000f\\3:%:<W\u0003FD`\u000f\u000f<Ymb4\bT\u001e]w1\\Dp\u000fG<9\u000f\u0006\u000b\bB\u001e%xQ^Dy\u000fk<Ip\"@\t\u0002!\u0015\u0001\u0012\u0002\t\u0006q\u0006mr1\u0019\t\u0016E\u001eeqQYDe\u000f\u001b<\tn\"6\bZ\u001euw\u0011]Ds!\u0011\t\u0019ab2\u0005\u000f\u0005\u001dAE1\u0001\u0002\nA!\u00111ADf\t\u001d\t)\b\nb\u0001\u0003\u0013\u0001B!a\u0001\bP\u00129\u0011\u0011\u001e\u0013C\u0002\u0005%\u0001\u0003BA\u0002\u000f'$qA! %\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u001d]GaBB\u0019I\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u00079Y\u000eB\u0004\u0005\u0006\u0011\u0012\r!!\u0003\u0011\t\u0005\rqq\u001c\u0003\b\ts$#\u0019AA\u0005!\u0011\t\u0019ab9\u0005\u000f\u00195AE1\u0001\u0002\nA!\u00111ADt\t\u001d9\t\u0005\nb\u0001\u0003\u0013Aq!!\u0007%\u0001\b9Y\u000fE\u0003y\u0003w9)\rC\u0004\u0002~\u0011\u0002\u001dab<\u0011\u000ba\fYd\"3\t\u000f\u0005UH\u0005q\u0001\btB)\u00010a\u000f\bN\"9!Q\u0012\u0013A\u0004\u001d]\b#\u0002=\u0002<\u001dE\u0007bBB#I\u0001\u000fq1 \t\u0006q\u0006mrQ\u001b\u0005\b\t;!\u00039AD\u0000!\u0015A\u00181HDm\u0011\u001d))\u0002\na\u0002\u0011\u0007\u0001R\u0001_A\u001e\u000f;DqA\"\f%\u0001\bA9\u0001E\u0003y\u0003w9\t\u000fC\u0004\bf\u0011\u0002\u001d\u0001c\u0003\u0011\u000ba\fYd\":\u0002\u001dQ,\b\u000f\\3:'\u0016l\u0017N]5oOV!\u0002\u0012\u0003E\r\u0011;A\t\u0003#\n\t*!5\u0002\u0012\u0007E\u001b\u0011s!B\u0003c\u0005\t<!}\u00022\tE$\u0011\u0017By\u0005c\u0015\tX!m\u0003#\u0002=\u0002R!U\u0001#\u00062\b\u001a!]\u00012\u0004E\u0010\u0011GA9\u0003c\u000b\t0!M\u0002r\u0007\t\u0005\u0003\u0007AI\u0002B\u0004\u0002\b\u0015\u0012\r!!\u0003\u0011\t\u0005\r\u0001R\u0004\u0003\b\u0003k*#\u0019AA\u0005!\u0011\t\u0019\u0001#\t\u0005\u000f\u0005%XE1\u0001\u0002\nA!\u00111\u0001E\u0013\t\u001d\u0011i(\nb\u0001\u0003\u0013\u0001B!a\u0001\t*\u001191\u0011G\u0013C\u0002\u0005%\u0001\u0003BA\u0002\u0011[!q\u0001\"\u0002&\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004!EBa\u0002C}K\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007A)\u0004B\u0004\u0007\u000e\u0015\u0012\r!!\u0003\u0011\t\u0005\r\u0001\u0012\b\u0003\b\u000f\u0003*#\u0019AA\u0005\u0011\u001d\tI\"\na\u0002\u0011{\u0001R\u0001_A)\u0011/Aq!! &\u0001\bA\t\u0005E\u0003y\u0003#BY\u0002C\u0004\u0002v\u0016\u0002\u001d\u0001#\u0012\u0011\u000ba\f\t\u0006c\b\t\u000f\t5U\u0005q\u0001\tJA)\u00010!\u0015\t$!91QI\u0013A\u0004!5\u0003#\u0002=\u0002R!\u001d\u0002b\u0002C\u000fK\u0001\u000f\u0001\u0012\u000b\t\u0006q\u0006E\u00032\u0006\u0005\b\u000b+)\u00039\u0001E+!\u0015A\u0018\u0011\u000bE\u0018\u0011\u001d1i#\na\u0002\u00113\u0002R\u0001_A)\u0011gAqa\"\u001a&\u0001\bAi\u0006E\u0003y\u0003#B9$\u0001\u0006ukBdW-\r\u0019SS\u001e,b\u0003c\u0019\tp!M\u0004r\u000fE>\u0011\u007fB\u0019\tc\"\t\f\"=\u00052\u0013\u000b\u0017\u0011KB9\nc'\t \"\r\u0006r\u0015EV\u0011_C\u0019\fc.\t<B!\u0001p\u001fE4!]\u0011\u0007\u0012\u000eE7\u0011cB)\b#\u001f\t~!\u0005\u0005R\u0011EE\u0011\u001bC\t*C\u0002\tl\r\u0014q\u0001V;qY\u0016\f\u0004\u0007\u0005\u0003\u0002\u0004!=DaBA\u0004M\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007A\u0019\bB\u0004\u0002v\u0019\u0012\r!!\u0003\u0011\t\u0005\r\u0001r\u000f\u0003\b\u0003S4#\u0019AA\u0005!\u0011\t\u0019\u0001c\u001f\u0005\u000f\tudE1\u0001\u0002\nA!\u00111\u0001E@\t\u001d\u0019\tD\nb\u0001\u0003\u0013\u0001B!a\u0001\t\u0004\u00129AQ\u0001\u0014C\u0002\u0005%\u0001\u0003BA\u0002\u0011\u000f#q\u0001\"?'\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004!-Ea\u0002D\u0007M\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Ay\tB\u0004\bB\u0019\u0012\r!!\u0003\u0011\t\u0005\r\u00012\u0013\u0003\b\u0011+3#\u0019AA\u0005\u0005\t\t\u0015\bC\u0004\u0002\u001a\u0019\u0002\u001d\u0001#'\u0011\ta\\\bR\u000e\u0005\b\u0003{2\u00039\u0001EO!\u0011A8\u0010#\u001d\t\u000f\u0005Uh\u0005q\u0001\t\"B!\u0001p\u001fE;\u0011\u001d\u0011iI\na\u0002\u0011K\u0003B\u0001_>\tz!91Q\t\u0014A\u0004!%\u0006\u0003\u0002=|\u0011{Bq\u0001\"\b'\u0001\bAi\u000b\u0005\u0003yw\"\u0005\u0005bBC\u000bM\u0001\u000f\u0001\u0012\u0017\t\u0005qnD)\tC\u0004\u0007.\u0019\u0002\u001d\u0001#.\u0011\ta\\\b\u0012\u0012\u0005\b\u000fK2\u00039\u0001E]!\u0011A8\u0010#$\t\u000f!uf\u0005q\u0001\t@\u0006\u0011\u0011)\u000f\t\u0005qnD\t*A\u0006ukBdW-\r\u0019SS:<WC\u0006Ec\u0011\u001bD\t\u000e#6\tZ\"u\u0007\u0012\u001dEs\u0011SDi\u000f#=\u0015-!\u001d\u00072\u001fE|\u0011wDy0c\u0001\n\b%-\u0011rBE\n\u0013/\u0001R\u0001_A\u0013\u0011\u0013\u0004rC\u0019E5\u0011\u0017Dy\rc5\tX\"m\u0007r\u001cEr\u0011ODY\u000fc<\u0011\t\u0005\r\u0001R\u001a\u0003\b\u0003\u000f9#\u0019AA\u0005!\u0011\t\u0019\u0001#5\u0005\u000f\u0005UtE1\u0001\u0002\nA!\u00111\u0001Ek\t\u001d\tIo\nb\u0001\u0003\u0013\u0001B!a\u0001\tZ\u00129!QP\u0014C\u0002\u0005%\u0001\u0003BA\u0002\u0011;$qa!\r(\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004!\u0005Ha\u0002C\u0003O\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007A)\u000fB\u0004\u0005z\u001e\u0012\r!!\u0003\u0011\t\u0005\r\u0001\u0012\u001e\u0003\b\r\u001b9#\u0019AA\u0005!\u0011\t\u0019\u0001#<\u0005\u000f\u001d\u0005sE1\u0001\u0002\nA!\u00111\u0001Ey\t\u001dA)j\nb\u0001\u0003\u0013Aq!!\u0007(\u0001\bA)\u0010E\u0003y\u0003KAY\rC\u0004\u0002~\u001d\u0002\u001d\u0001#?\u0011\u000ba\f)\u0003c4\t\u000f\u0005Ux\u0005q\u0001\t~B)\u00010!\n\tT\"9!QR\u0014A\u0004%\u0005\u0001#\u0002=\u0002&!]\u0007bBB#O\u0001\u000f\u0011R\u0001\t\u0006q\u0006\u0015\u00022\u001c\u0005\b\t;9\u00039AE\u0005!\u0015A\u0018Q\u0005Ep\u0011\u001d))b\na\u0002\u0013\u001b\u0001R\u0001_A\u0013\u0011GDqA\"\f(\u0001\bI\t\u0002E\u0003y\u0003KA9\u000fC\u0004\bf\u001d\u0002\u001d!#\u0006\u0011\u000ba\f)\u0003c;\t\u000f!uv\u0005q\u0001\n\u001aA)\u00010!\n\tp\u0006QA/\u001e9mKF\u0002$K\\4\u0016-%}\u0011rEE\u0016\u0013_I\u0019$c\u000e\n<%}\u00122IE$\u0013\u0017\"b##\t\nN%E\u0013RKE-\u0013;J\t'#\u001a\nj%5\u0014\u0012\u000f\t\u0006q\u0006m\u00122\u0005\t\u0018E\"%\u0014REE\u0015\u0013[I\t$#\u000e\n:%u\u0012\u0012IE#\u0013\u0013\u0002B!a\u0001\n(\u00119\u0011q\u0001\u0015C\u0002\u0005%\u0001\u0003BA\u0002\u0013W!q!!\u001e)\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004%=BaBAuQ\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007I\u0019\u0004B\u0004\u0003~!\u0012\r!!\u0003\u0011\t\u0005\r\u0011r\u0007\u0003\b\u0007cA#\u0019AA\u0005!\u0011\t\u0019!c\u000f\u0005\u000f\u0011\u0015\u0001F1\u0001\u0002\nA!\u00111AE \t\u001d!I\u0010\u000bb\u0001\u0003\u0013\u0001B!a\u0001\nD\u00119aQ\u0002\u0015C\u0002\u0005%\u0001\u0003BA\u0002\u0013\u000f\"qa\"\u0011)\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004%-Ca\u0002EKQ\t\u0007\u0011\u0011\u0002\u0005\b\u00033A\u00039AE(!\u0015A\u00181HE\u0013\u0011\u001d\ti\b\u000ba\u0002\u0013'\u0002R\u0001_A\u001e\u0013SAq!!>)\u0001\bI9\u0006E\u0003y\u0003wIi\u0003C\u0004\u0003\u000e\"\u0002\u001d!c\u0017\u0011\u000ba\fY$#\r\t\u000f\r\u0015\u0003\u0006q\u0001\n`A)\u00010a\u000f\n6!9AQ\u0004\u0015A\u0004%\r\u0004#\u0002=\u0002<%e\u0002bBC\u000bQ\u0001\u000f\u0011r\r\t\u0006q\u0006m\u0012R\b\u0005\b\r[A\u00039AE6!\u0015A\u00181HE!\u0011\u001d9)\u0007\u000ba\u0002\u0013_\u0002R\u0001_A\u001e\u0013\u000bBq\u0001#0)\u0001\bI\u0019\bE\u0003y\u0003wII%A\bukBdW-\r\u0019TK6L'/\u001b8h+YII(#!\n\u0006&%\u0015RREI\u0013+KI*#(\n\"&\u0015FCFE>\u0013OKY+c,\n4&]\u00162XE`\u0013\u0007L9-c3\u0011\u000ba\f\t&# \u0011/\tDI'c \n\u0004&\u001d\u00152REH\u0013'K9*c'\n &\r\u0006\u0003BA\u0002\u0013\u0003#q!a\u0002*\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004%\u0015EaBA;S\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007II\tB\u0004\u0002j&\u0012\r!!\u0003\u0011\t\u0005\r\u0011R\u0012\u0003\b\u0005{J#\u0019AA\u0005!\u0011\t\u0019!#%\u0005\u000f\rE\u0012F1\u0001\u0002\nA!\u00111AEK\t\u001d!)!\u000bb\u0001\u0003\u0013\u0001B!a\u0001\n\u001a\u00129A\u0011`\u0015C\u0002\u0005%\u0001\u0003BA\u0002\u0013;#qA\"\u0004*\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004%\u0005FaBD!S\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007I)\u000bB\u0004\t\u0016&\u0012\r!!\u0003\t\u000f\u0005e\u0011\u0006q\u0001\n*B)\u00010!\u0015\n\u0000!9\u0011QP\u0015A\u0004%5\u0006#\u0002=\u0002R%\r\u0005bBA{S\u0001\u000f\u0011\u0012\u0017\t\u0006q\u0006E\u0013r\u0011\u0005\b\u0005\u001bK\u00039AE[!\u0015A\u0018\u0011KEF\u0011\u001d\u0019)%\u000ba\u0002\u0013s\u0003R\u0001_A)\u0013\u001fCq\u0001\"\b*\u0001\bIi\fE\u0003y\u0003#J\u0019\nC\u0004\u0006\u0016%\u0002\u001d!#1\u0011\u000ba\f\t&c&\t\u000f\u00195\u0012\u0006q\u0001\nFB)\u00010!\u0015\n\u001c\"9qQM\u0015A\u0004%%\u0007#\u0002=\u0002R%}\u0005b\u0002E_S\u0001\u000f\u0011R\u001a\t\u0006q\u0006E\u00132U\u0001\u000biV\u0004H.Z\u00192%&<W\u0003GEj\u0013?L\u0019/c:\nl&=\u00182_E|\u0013wLyPc\u0001\u000b\bQA\u0012R\u001bF\u0006\u0015\u001fQ\u0019Bc\u0006\u000b\u001c)}!2\u0005F\u0014\u0015WQyCc\r\u0011\ta\\\u0018r\u001b\t\u001aE&e\u0017R\\Eq\u0013KLI/#<\nr&U\u0018\u0012`E\u007f\u0015\u0003Q)!C\u0002\n\\\u000e\u0014q\u0001V;qY\u0016\f\u0014\u0007\u0005\u0003\u0002\u0004%}GaBA\u0004U\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007I\u0019\u000fB\u0004\u0002v)\u0012\r!!\u0003\u0011\t\u0005\r\u0011r\u001d\u0003\b\u0003ST#\u0019AA\u0005!\u0011\t\u0019!c;\u0005\u000f\tu$F1\u0001\u0002\nA!\u00111AEx\t\u001d\u0019\tD\u000bb\u0001\u0003\u0013\u0001B!a\u0001\nt\u00129AQ\u0001\u0016C\u0002\u0005%\u0001\u0003BA\u0002\u0013o$q\u0001\"?+\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004%mHa\u0002D\u0007U\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Iy\u0010B\u0004\bB)\u0012\r!!\u0003\u0011\t\u0005\r!2\u0001\u0003\b\u0011+S#\u0019AA\u0005!\u0011\t\u0019Ac\u0002\u0005\u000f)%!F1\u0001\u0002\n\t\u0019\u0011)\r\u0019\t\u000f\u0005e!\u0006q\u0001\u000b\u000eA!\u0001p_Eo\u0011\u001d\tiH\u000ba\u0002\u0015#\u0001B\u0001_>\nb\"9\u0011Q\u001f\u0016A\u0004)U\u0001\u0003\u0002=|\u0013KDqA!$+\u0001\bQI\u0002\u0005\u0003yw&%\bbBB#U\u0001\u000f!R\u0004\t\u0005qnLi\u000fC\u0004\u0005\u001e)\u0002\u001dA#\t\u0011\ta\\\u0018\u0012\u001f\u0005\b\u000b+Q\u00039\u0001F\u0013!\u0011A80#>\t\u000f\u00195\"\u0006q\u0001\u000b*A!\u0001p_E}\u0011\u001d9)G\u000ba\u0002\u0015[\u0001B\u0001_>\n~\"9\u0001R\u0018\u0016A\u0004)E\u0002\u0003\u0002=|\u0015\u0003AqA#\u000e+\u0001\bQ9$A\u0002BcA\u0002B\u0001_>\u000b\u0006\u0005YA/\u001e9mKF\n$+\u001b8h+aQiD#\u0012\u000bJ)5#\u0012\u000bF+\u00153RiF#\u0019\u000bf)%$R\u000e\u000b\u0019\u0015\u007fQyGc\u001d\u000bx)m$r\u0010FB\u0015\u000fSYIc$\u000b\u0014*]\u0005#\u0002=\u0002&)\u0005\u0003#\u00072\nZ*\r#r\tF&\u0015\u001fR\u0019Fc\u0016\u000b\\)}#2\rF4\u0015W\u0002B!a\u0001\u000bF\u00119\u0011qA\u0016C\u0002\u0005%\u0001\u0003BA\u0002\u0015\u0013\"q!!\u001e,\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004)5CaBAuW\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Q\t\u0006B\u0004\u0003~-\u0012\r!!\u0003\u0011\t\u0005\r!R\u000b\u0003\b\u0007cY#\u0019AA\u0005!\u0011\t\u0019A#\u0017\u0005\u000f\u0011\u00151F1\u0001\u0002\nA!\u00111\u0001F/\t\u001d!Ip\u000bb\u0001\u0003\u0013\u0001B!a\u0001\u000bb\u00119aQB\u0016C\u0002\u0005%\u0001\u0003BA\u0002\u0015K\"qa\"\u0011,\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004)%Da\u0002EKW\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Qi\u0007B\u0004\u000b\n-\u0012\r!!\u0003\t\u000f\u0005e1\u0006q\u0001\u000brA)\u00010!\n\u000bD!9\u0011QP\u0016A\u0004)U\u0004#\u0002=\u0002&)\u001d\u0003bBA{W\u0001\u000f!\u0012\u0010\t\u0006q\u0006\u0015\"2\n\u0005\b\u0005\u001b[\u00039\u0001F?!\u0015A\u0018Q\u0005F(\u0011\u001d\u0019)e\u000ba\u0002\u0015\u0003\u0003R\u0001_A\u0013\u0015'Bq\u0001\"\b,\u0001\bQ)\tE\u0003y\u0003KQ9\u0006C\u0004\u0006\u0016-\u0002\u001dA##\u0011\u000ba\f)Cc\u0017\t\u000f\u001952\u0006q\u0001\u000b\u000eB)\u00010!\n\u000b`!9qQM\u0016A\u0004)E\u0005#\u0002=\u0002&)\r\u0004b\u0002E_W\u0001\u000f!R\u0013\t\u0006q\u0006\u0015\"r\r\u0005\b\u0015kY\u00039\u0001FM!\u0015A\u0018Q\u0005F6\u0003)!X\u000f\u001d7fcE\u0012fnZ\u000b\u0019\u0015?S9Kc+\u000b0*M&r\u0017F^\u0015\u007fS\u0019Mc2\u000bL*=G\u0003\u0007FQ\u0015#T)N#7\u000b^*\u0005(R\u001dFu\u0015[T\tP#>\u000bzB)\u00010a\u000f\u000b$BI\"-#7\u000b&*%&R\u0016FY\u0015kSIL#0\u000bB*\u0015'\u0012\u001aFg!\u0011\t\u0019Ac*\u0005\u000f\u0005\u001dAF1\u0001\u0002\nA!\u00111\u0001FV\t\u001d\t)\b\fb\u0001\u0003\u0013\u0001B!a\u0001\u000b0\u00129\u0011\u0011\u001e\u0017C\u0002\u0005%\u0001\u0003BA\u0002\u0015g#qA! -\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004)]FaBB\u0019Y\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007QY\fB\u0004\u0005\u00061\u0012\r!!\u0003\u0011\t\u0005\r!r\u0018\u0003\b\tsd#\u0019AA\u0005!\u0011\t\u0019Ac1\u0005\u000f\u00195AF1\u0001\u0002\nA!\u00111\u0001Fd\t\u001d9\t\u0005\fb\u0001\u0003\u0013\u0001B!a\u0001\u000bL\u00129\u0001R\u0013\u0017C\u0002\u0005%\u0001\u0003BA\u0002\u0015\u001f$qA#\u0003-\u0005\u0004\tI\u0001C\u0004\u0002\u001a1\u0002\u001dAc5\u0011\u000ba\fYD#*\t\u000f\u0005uD\u0006q\u0001\u000bXB)\u00010a\u000f\u000b*\"9\u0011Q\u001f\u0017A\u0004)m\u0007#\u0002=\u0002<)5\u0006b\u0002BGY\u0001\u000f!r\u001c\t\u0006q\u0006m\"\u0012\u0017\u0005\b\u0007\u000bb\u00039\u0001Fr!\u0015A\u00181\bF[\u0011\u001d!i\u0002\fa\u0002\u0015O\u0004R\u0001_A\u001e\u0015sCq!\"\u0006-\u0001\bQY\u000fE\u0003y\u0003wQi\fC\u0004\u0007.1\u0002\u001dAc<\u0011\u000ba\fYD#1\t\u000f\u001d\u0015D\u0006q\u0001\u000btB)\u00010a\u000f\u000bF\"9\u0001R\u0018\u0017A\u0004)]\b#\u0002=\u0002<)%\u0007b\u0002F\u001bY\u0001\u000f!2 \t\u0006q\u0006m\"RZ\u0001\u0010iV\u0004H.Z\u00192'\u0016l\u0017N]5oOVA2\u0012AF\u0005\u0017\u001bY\tb#\u0006\f\u001a-u1\u0012EF\u0013\u0017SYic#\r\u00151-\r12GF\u001c\u0017wYydc\u0011\fH--3rJF*\u0017/ZY\u0006E\u0003y\u0003#Z)\u0001E\rc\u00133\\9ac\u0003\f\u0010-M1rCF\u000e\u0017?Y\u0019cc\n\f,-=\u0002\u0003BA\u0002\u0017\u0013!q!a\u0002.\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004-5AaBA;[\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Y\t\u0002B\u0004\u0002j6\u0012\r!!\u0003\u0011\t\u0005\r1R\u0003\u0003\b\u0005{j#\u0019AA\u0005!\u0011\t\u0019a#\u0007\u0005\u000f\rERF1\u0001\u0002\nA!\u00111AF\u000f\t\u001d!)!\fb\u0001\u0003\u0013\u0001B!a\u0001\f\"\u00119A\u0011`\u0017C\u0002\u0005%\u0001\u0003BA\u0002\u0017K!qA\"\u0004.\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004-%BaBD![\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Yi\u0003B\u0004\t\u00166\u0012\r!!\u0003\u0011\t\u0005\r1\u0012\u0007\u0003\b\u0015\u0013i#\u0019AA\u0005\u0011\u001d\tI\"\fa\u0002\u0017k\u0001R\u0001_A)\u0017\u000fAq!! .\u0001\bYI\u0004E\u0003y\u0003#ZY\u0001C\u0004\u0002v6\u0002\u001da#\u0010\u0011\u000ba\f\tfc\u0004\t\u000f\t5U\u0006q\u0001\fBA)\u00010!\u0015\f\u0014!91QI\u0017A\u0004-\u0015\u0003#\u0002=\u0002R-]\u0001b\u0002C\u000f[\u0001\u000f1\u0012\n\t\u0006q\u0006E32\u0004\u0005\b\u000b+i\u00039AF'!\u0015A\u0018\u0011KF\u0010\u0011\u001d1i#\fa\u0002\u0017#\u0002R\u0001_A)\u0017GAqa\"\u001a.\u0001\bY)\u0006E\u0003y\u0003#Z9\u0003C\u0004\t>6\u0002\u001da#\u0017\u0011\u000ba\f\tfc\u000b\t\u000f)UR\u0006q\u0001\f^A)\u00010!\u0015\f0\u0005QA/\u001e9mKF\u0012$+[4\u00165-\r4rNF:\u0017oZYhc \f\u0004.\u001d52RFH\u0017'[9jc'\u00155-\u00154rTFR\u0017O[Ykc,\f4.]62XF`\u0017\u0007\\9mc3\u0011\ta\\8r\r\t\u001cE.%4RNF9\u0017kZIh# \f\u0002.\u00155\u0012RFG\u0017#[)j#'\n\u0007--4MA\u0004UkBdW-\r\u001a\u0011\t\u0005\r1r\u000e\u0003\b\u0003\u000fq#\u0019AA\u0005!\u0011\t\u0019ac\u001d\u0005\u000f\u0005UdF1\u0001\u0002\nA!\u00111AF<\t\u001d\tIO\fb\u0001\u0003\u0013\u0001B!a\u0001\f|\u00119!Q\u0010\u0018C\u0002\u0005%\u0001\u0003BA\u0002\u0017\u007f\"qa!\r/\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004-\rEa\u0002C\u0003]\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Y9\tB\u0004\u0005z:\u0012\r!!\u0003\u0011\t\u0005\r12\u0012\u0003\b\r\u001bq#\u0019AA\u0005!\u0011\t\u0019ac$\u0005\u000f\u001d\u0005cF1\u0001\u0002\nA!\u00111AFJ\t\u001dA)J\fb\u0001\u0003\u0013\u0001B!a\u0001\f\u0018\u00129!\u0012\u0002\u0018C\u0002\u0005%\u0001\u0003BA\u0002\u00177#qa#(/\u0005\u0004\tIAA\u0002BcEBq!!\u0007/\u0001\bY\t\u000b\u0005\u0003yw.5\u0004bBA?]\u0001\u000f1R\u0015\t\u0005qn\\\t\bC\u0004\u0002v:\u0002\u001da#+\u0011\ta\\8R\u000f\u0005\b\u0005\u001bs\u00039AFW!\u0011A8p#\u001f\t\u000f\r\u0015c\u0006q\u0001\f2B!\u0001p_F?\u0011\u001d!iB\fa\u0002\u0017k\u0003B\u0001_>\f\u0002\"9QQ\u0003\u0018A\u0004-e\u0006\u0003\u0002=|\u0017\u000bCqA\"\f/\u0001\bYi\f\u0005\u0003yw.%\u0005bBD3]\u0001\u000f1\u0012\u0019\t\u0005qn\\i\tC\u0004\t>:\u0002\u001da#2\u0011\ta\\8\u0012\u0013\u0005\b\u0015kq\u00039AFe!\u0011A8p#&\t\u000f-5g\u0006q\u0001\fP\u0006\u0019\u0011)M\u0019\u0011\ta\\8\u0012T\u0001\fiV\u0004H.Z\u00193%&tw-\u0006\u000e\fV.u7\u0012]Fs\u0017S\\io#=\fv.e8R G\u0001\u0019\u000baI\u0001\u0006\u000e\fX2-Ar\u0002G\n\u0019/aY\u0002d\b\r$1\u001dB2\u0006G\u0018\u0019ga9\u0004E\u0003y\u0003KYI\u000eE\u000ec\u0017SZYnc8\fd.\u001d82^Fx\u0017g\\9pc?\f\u00002\rAr\u0001\t\u0005\u0003\u0007Yi\u000eB\u0004\u0002\b=\u0012\r!!\u0003\u0011\t\u0005\r1\u0012\u001d\u0003\b\u0003kz#\u0019AA\u0005!\u0011\t\u0019a#:\u0005\u000f\u0005%xF1\u0001\u0002\nA!\u00111AFu\t\u001d\u0011ih\fb\u0001\u0003\u0013\u0001B!a\u0001\fn\u001291\u0011G\u0018C\u0002\u0005%\u0001\u0003BA\u0002\u0017c$q\u0001\"\u00020\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004-UHa\u0002C}_\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007YI\u0010B\u0004\u0007\u000e=\u0012\r!!\u0003\u0011\t\u0005\r1R \u0003\b\u000f\u0003z#\u0019AA\u0005!\u0011\t\u0019\u0001$\u0001\u0005\u000f!UuF1\u0001\u0002\nA!\u00111\u0001G\u0003\t\u001dQIa\fb\u0001\u0003\u0013\u0001B!a\u0001\r\n\u001191RT\u0018C\u0002\u0005%\u0001bBA\r_\u0001\u000fAR\u0002\t\u0006q\u0006\u001522\u001c\u0005\b\u0003{z\u00039\u0001G\t!\u0015A\u0018QEFp\u0011\u001d\t)p\fa\u0002\u0019+\u0001R\u0001_A\u0013\u0017GDqA!$0\u0001\baI\u0002E\u0003y\u0003KY9\u000fC\u0004\u0004F=\u0002\u001d\u0001$\b\u0011\u000ba\f)cc;\t\u000f\u0011uq\u0006q\u0001\r\"A)\u00010!\n\fp\"9QQC\u0018A\u00041\u0015\u0002#\u0002=\u0002&-M\bb\u0002D\u0017_\u0001\u000fA\u0012\u0006\t\u0006q\u0006\u00152r\u001f\u0005\b\u000fKz\u00039\u0001G\u0017!\u0015A\u0018QEF~\u0011\u001dAil\fa\u0002\u0019c\u0001R\u0001_A\u0013\u0017\u007fDqA#\u000e0\u0001\ba)\u0004E\u0003y\u0003Ka\u0019\u0001C\u0004\fN>\u0002\u001d\u0001$\u000f\u0011\u000ba\f)\u0003d\u0002\u0002\u0015Q,\b\u000f\\32eIsw-\u0006\u000e\r@1\u001dC2\nG(\u0019'b9\u0006d\u0017\r`1\rDr\rG6\u0019_b\u0019\b\u0006\u000e\rB1UD\u0012\u0010G?\u0019\u0003c)\t$#\r\u000e2EER\u0013GM\u0019;c\t\u000bE\u0003y\u0003wa\u0019\u0005E\u000ec\u0017Sb)\u0005$\u0013\rN1ECR\u000bG-\u0019;b\t\u0007$\u001a\rj15D\u0012\u000f\t\u0005\u0003\u0007a9\u0005B\u0004\u0002\bA\u0012\r!!\u0003\u0011\t\u0005\rA2\n\u0003\b\u0003k\u0002$\u0019AA\u0005!\u0011\t\u0019\u0001d\u0014\u0005\u000f\u0005%\bG1\u0001\u0002\nA!\u00111\u0001G*\t\u001d\u0011i\b\rb\u0001\u0003\u0013\u0001B!a\u0001\rX\u001191\u0011\u0007\u0019C\u0002\u0005%\u0001\u0003BA\u0002\u00197\"q\u0001\"\u00021\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00041}Ca\u0002C}a\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007a\u0019\u0007B\u0004\u0007\u000eA\u0012\r!!\u0003\u0011\t\u0005\rAr\r\u0003\b\u000f\u0003\u0002$\u0019AA\u0005!\u0011\t\u0019\u0001d\u001b\u0005\u000f!U\u0005G1\u0001\u0002\nA!\u00111\u0001G8\t\u001dQI\u0001\rb\u0001\u0003\u0013\u0001B!a\u0001\rt\u001191R\u0014\u0019C\u0002\u0005%\u0001bBA\ra\u0001\u000fAr\u000f\t\u0006q\u0006mBR\t\u0005\b\u0003{\u0002\u00049\u0001G>!\u0015A\u00181\bG%\u0011\u001d\t)\u0010\ra\u0002\u0019\u007f\u0002R\u0001_A\u001e\u0019\u001bBqA!$1\u0001\ba\u0019\tE\u0003y\u0003wa\t\u0006C\u0004\u0004FA\u0002\u001d\u0001d\"\u0011\u000ba\fY\u0004$\u0016\t\u000f\u0011u\u0001\u0007q\u0001\r\fB)\u00010a\u000f\rZ!9QQ\u0003\u0019A\u00041=\u0005#\u0002=\u0002<1u\u0003b\u0002D\u0017a\u0001\u000fA2\u0013\t\u0006q\u0006mB\u0012\r\u0005\b\u000fK\u0002\u00049\u0001GL!\u0015A\u00181\bG3\u0011\u001dAi\f\ra\u0002\u00197\u0003R\u0001_A\u001e\u0019SBqA#\u000e1\u0001\bay\nE\u0003y\u0003wai\u0007C\u0004\fNB\u0002\u001d\u0001d)\u0011\u000ba\fY\u0004$\u001d\u0002\u001fQ,\b\u000f\\32eM+W.\u001b:j]\u001e,\"\u0004$+\r22UF\u0012\u0018G_\u0019\u0003d)\r$3\rN2EGR\u001bGm\u0019;$\"\u0004d+\r`2\rHr\u001dGv\u0019_d\u0019\u0010d>\r|2}X2AG\u0004\u001b\u0017\u0001R\u0001_A)\u0019[\u00032DYF5\u0019_c\u0019\fd.\r<2}F2\u0019Gd\u0019\u0017dy\rd5\rX2m\u0007\u0003BA\u0002\u0019c#q!a\u00022\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00041UFaBA;c\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007aI\fB\u0004\u0002jF\u0012\r!!\u0003\u0011\t\u0005\rAR\u0018\u0003\b\u0005{\n$\u0019AA\u0005!\u0011\t\u0019\u0001$1\u0005\u000f\rE\u0012G1\u0001\u0002\nA!\u00111\u0001Gc\t\u001d!)!\rb\u0001\u0003\u0013\u0001B!a\u0001\rJ\u00129A\u0011`\u0019C\u0002\u0005%\u0001\u0003BA\u0002\u0019\u001b$qA\"\u00042\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00041EGaBD!c\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007a)\u000eB\u0004\t\u0016F\u0012\r!!\u0003\u0011\t\u0005\rA\u0012\u001c\u0003\b\u0015\u0013\t$\u0019AA\u0005!\u0011\t\u0019\u0001$8\u0005\u000f-u\u0015G1\u0001\u0002\n!9\u0011\u0011D\u0019A\u00041\u0005\b#\u0002=\u0002R1=\u0006bBA?c\u0001\u000fAR\u001d\t\u0006q\u0006EC2\u0017\u0005\b\u0003k\f\u00049\u0001Gu!\u0015A\u0018\u0011\u000bG\\\u0011\u001d\u0011i)\ra\u0002\u0019[\u0004R\u0001_A)\u0019wCqa!\u00122\u0001\ba\t\u0010E\u0003y\u0003#by\fC\u0004\u0005\u001eE\u0002\u001d\u0001$>\u0011\u000ba\f\t\u0006d1\t\u000f\u0015U\u0011\u0007q\u0001\rzB)\u00010!\u0015\rH\"9aQF\u0019A\u00041u\b#\u0002=\u0002R1-\u0007bBD3c\u0001\u000fQ\u0012\u0001\t\u0006q\u0006ECr\u001a\u0005\b\u0011{\u000b\u00049AG\u0003!\u0015A\u0018\u0011\u000bGj\u0011\u001dQ)$\ra\u0002\u001b\u0013\u0001R\u0001_A)\u0019/Dqa#42\u0001\bii\u0001E\u0003y\u0003#bY.\u0001\u0006ukBdW-M\u001aSS\u001e,B$d\u0005\u000e 5\rRrEG\u0016\u001b_i\u0019$d\u000e\u000e<5}R2IG$\u001b\u0017jy\u0005\u0006\u000f\u000e\u00165MSrKG.\u001b?j\u0019'd\u001a\u000el5=T2OG<\u001bwjy(d!\u0011\ta\\Xr\u0003\t\u001eE6eQRDG\u0011\u001bKiI#$\f\u000e25UR\u0012HG\u001f\u001b\u0003j)%$\u0013\u000eN%\u0019Q2D2\u0003\u000fQ+\b\u000f\\32gA!\u00111AG\u0010\t\u001d\t9A\rb\u0001\u0003\u0013\u0001B!a\u0001\u000e$\u00119\u0011Q\u000f\u001aC\u0002\u0005%\u0001\u0003BA\u0002\u001bO!q!!;3\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00045-Ba\u0002B?e\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007iy\u0003B\u0004\u00042I\u0012\r!!\u0003\u0011\t\u0005\rQ2\u0007\u0003\b\t\u000b\u0011$\u0019AA\u0005!\u0011\t\u0019!d\u000e\u0005\u000f\u0011e(G1\u0001\u0002\nA!\u00111AG\u001e\t\u001d1iA\rb\u0001\u0003\u0013\u0001B!a\u0001\u000e@\u00119q\u0011\t\u001aC\u0002\u0005%\u0001\u0003BA\u0002\u001b\u0007\"q\u0001#&3\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00045\u001dCa\u0002F\u0005e\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007iY\u0005B\u0004\f\u001eJ\u0012\r!!\u0003\u0011\t\u0005\rQr\n\u0003\b\u001b#\u0012$\u0019AA\u0005\u0005\r\t\u0015G\r\u0005\b\u00033\u0011\u00049AG+!\u0011A80$\b\t\u000f\u0005u$\u0007q\u0001\u000eZA!\u0001p_G\u0011\u0011\u001d\t)P\ra\u0002\u001b;\u0002B\u0001_>\u000e&!9!Q\u0012\u001aA\u00045\u0005\u0004\u0003\u0002=|\u001bSAqa!\u00123\u0001\bi)\u0007\u0005\u0003yw65\u0002b\u0002C\u000fe\u0001\u000fQ\u0012\u000e\t\u0005qnl\t\u0004C\u0004\u0006\u0016I\u0002\u001d!$\u001c\u0011\ta\\XR\u0007\u0005\b\r[\u0011\u00049AG9!\u0011A80$\u000f\t\u000f\u001d\u0015$\u0007q\u0001\u000evA!\u0001p_G\u001f\u0011\u001dAiL\ra\u0002\u001bs\u0002B\u0001_>\u000eB!9!R\u0007\u001aA\u00045u\u0004\u0003\u0002=|\u001b\u000bBqa#43\u0001\bi\t\t\u0005\u0003yw6%\u0003bBGCe\u0001\u000fQrQ\u0001\u0004\u0003F\u0012\u0004\u0003\u0002=|\u001b\u001b\n1\u0002^;qY\u0016\f4GU5oOVaRRRGK\u001b3ki*$)\u000e&6%VRVGY\u001bkkI,$0\u000eB6\u0015G\u0003HGH\u001b\u000flY-d4\u000eT6]W2\\Gp\u001bGl9/d;\u000ep6MXr\u001f\t\u0006q\u0006\u0015R\u0012\u0013\t\u001eE6eQ2SGL\u001b7ky*d)\u000e(6-VrVGZ\u001bokY,d0\u000eDB!\u00111AGK\t\u001d\t9a\rb\u0001\u0003\u0013\u0001B!a\u0001\u000e\u001a\u00129\u0011QO\u001aC\u0002\u0005%\u0001\u0003BA\u0002\u001b;#q!!;4\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00045\u0005Fa\u0002B?g\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007i)\u000bB\u0004\u00042M\u0012\r!!\u0003\u0011\t\u0005\rQ\u0012\u0016\u0003\b\t\u000b\u0019$\u0019AA\u0005!\u0011\t\u0019!$,\u0005\u000f\u0011e8G1\u0001\u0002\nA!\u00111AGY\t\u001d1ia\rb\u0001\u0003\u0013\u0001B!a\u0001\u000e6\u00129q\u0011I\u001aC\u0002\u0005%\u0001\u0003BA\u0002\u001bs#q\u0001#&4\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00045uFa\u0002F\u0005g\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007i\t\rB\u0004\f\u001eN\u0012\r!!\u0003\u0011\t\u0005\rQR\u0019\u0003\b\u001b#\u001a$\u0019AA\u0005\u0011\u001d\tIb\ra\u0002\u001b\u0013\u0004R\u0001_A\u0013\u001b'Cq!! 4\u0001\bii\rE\u0003y\u0003Ki9\nC\u0004\u0002vN\u0002\u001d!$5\u0011\u000ba\f)#d'\t\u000f\t55\u0007q\u0001\u000eVB)\u00010!\n\u000e \"91QI\u001aA\u00045e\u0007#\u0002=\u0002&5\r\u0006b\u0002C\u000fg\u0001\u000fQR\u001c\t\u0006q\u0006\u0015Rr\u0015\u0005\b\u000b+\u0019\u00049AGq!\u0015A\u0018QEGV\u0011\u001d1ic\ra\u0002\u001bK\u0004R\u0001_A\u0013\u001b_Cqa\"\u001a4\u0001\biI\u000fE\u0003y\u0003Ki\u0019\fC\u0004\t>N\u0002\u001d!$<\u0011\u000ba\f)#d.\t\u000f)U2\u0007q\u0001\u000erB)\u00010!\n\u000e<\"91RZ\u001aA\u00045U\b#\u0002=\u0002&5}\u0006bBGCg\u0001\u000fQ\u0012 \t\u0006q\u0006\u0015R2Y\u0001\u000biV\u0004H.Z\u00194%:<W\u0003HG\u0000\u001d\u000fqYAd\u0004\u000f\u00149]a2\u0004H\u0010\u001dGq9Cd\u000b\u000f09Mbr\u0007\u000b\u001d\u001d\u0003qID$\u0010\u000fB9\u0015c\u0012\nH'\u001d#r)F$\u0017\u000f^9\u0005dR\rH5!\u0015A\u00181\bH\u0002!u\u0011W\u0012\u0004H\u0003\u001d\u0013qiA$\u0005\u000f\u00169eaR\u0004H\u0011\u001dKqIC$\f\u000f29U\u0002\u0003BA\u0002\u001d\u000f!q!a\u00025\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00049-AaBA;i\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007qy\u0001B\u0004\u0002jR\u0012\r!!\u0003\u0011\t\u0005\ra2\u0003\u0003\b\u0005{\"$\u0019AA\u0005!\u0011\t\u0019Ad\u0006\u0005\u000f\rEBG1\u0001\u0002\nA!\u00111\u0001H\u000e\t\u001d!)\u0001\u000eb\u0001\u0003\u0013\u0001B!a\u0001\u000f \u00119A\u0011 \u001bC\u0002\u0005%\u0001\u0003BA\u0002\u001dG!qA\"\u00045\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00049\u001dBaBD!i\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007qY\u0003B\u0004\t\u0016R\u0012\r!!\u0003\u0011\t\u0005\rar\u0006\u0003\b\u0015\u0013!$\u0019AA\u0005!\u0011\t\u0019Ad\r\u0005\u000f-uEG1\u0001\u0002\nA!\u00111\u0001H\u001c\t\u001di\t\u0006\u000eb\u0001\u0003\u0013Aq!!\u00075\u0001\bqY\u0004E\u0003y\u0003wq)\u0001C\u0004\u0002~Q\u0002\u001dAd\u0010\u0011\u000ba\fYD$\u0003\t\u000f\u0005UH\u0007q\u0001\u000fDA)\u00010a\u000f\u000f\u000e!9!Q\u0012\u001bA\u00049\u001d\u0003#\u0002=\u0002<9E\u0001bBB#i\u0001\u000fa2\n\t\u0006q\u0006mbR\u0003\u0005\b\t;!\u00049\u0001H(!\u0015A\u00181\bH\r\u0011\u001d))\u0002\u000ea\u0002\u001d'\u0002R\u0001_A\u001e\u001d;AqA\"\f5\u0001\bq9\u0006E\u0003y\u0003wq\t\u0003C\u0004\bfQ\u0002\u001dAd\u0017\u0011\u000ba\fYD$\n\t\u000f!uF\u0007q\u0001\u000f`A)\u00010a\u000f\u000f*!9!R\u0007\u001bA\u00049\r\u0004#\u0002=\u0002<95\u0002bBFgi\u0001\u000far\r\t\u0006q\u0006mb\u0012\u0007\u0005\b\u001b\u000b#\u00049\u0001H6!\u0015A\u00181\bH\u001b\u0003=!X\u000f\u001d7fcM\u001aV-\\5sS:<W\u0003\bH9\u001dsriH$!\u000f\u0006:%eR\u0012HI\u001d+sIJ$(\u000f\":\u0015f\u0012\u0016\u000b\u001d\u001dgrYKd,\u000f4:]f2\u0018H`\u001d\u0007t9Md3\u000fP:Mgr\u001bHn!\u0015A\u0018\u0011\u000bH;!u\u0011W\u0012\u0004H<\u001dwryHd!\u000f\b:-er\u0012HJ\u001d/sYJd(\u000f$:\u001d\u0006\u0003BA\u0002\u001ds\"q!a\u00026\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00049uDaBA;k\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007q\t\tB\u0004\u0002jV\u0012\r!!\u0003\u0011\t\u0005\raR\u0011\u0003\b\u0005{*$\u0019AA\u0005!\u0011\t\u0019A$#\u0005\u000f\rERG1\u0001\u0002\nA!\u00111\u0001HG\t\u001d!)!\u000eb\u0001\u0003\u0013\u0001B!a\u0001\u000f\u0012\u00129A\u0011`\u001bC\u0002\u0005%\u0001\u0003BA\u0002\u001d+#qA\"\u00046\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00049eEaBD!k\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007qi\nB\u0004\t\u0016V\u0012\r!!\u0003\u0011\t\u0005\ra\u0012\u0015\u0003\b\u0015\u0013)$\u0019AA\u0005!\u0011\t\u0019A$*\u0005\u000f-uUG1\u0001\u0002\nA!\u00111\u0001HU\t\u001di\t&\u000eb\u0001\u0003\u0013Aq!!\u00076\u0001\bqi\u000bE\u0003y\u0003#r9\bC\u0004\u0002~U\u0002\u001dA$-\u0011\u000ba\f\tFd\u001f\t\u000f\u0005UX\u0007q\u0001\u000f6B)\u00010!\u0015\u000f\u0000!9!QR\u001bA\u00049e\u0006#\u0002=\u0002R9\r\u0005bBB#k\u0001\u000faR\u0018\t\u0006q\u0006Ecr\u0011\u0005\b\t;)\u00049\u0001Ha!\u0015A\u0018\u0011\u000bHF\u0011\u001d))\"\u000ea\u0002\u001d\u000b\u0004R\u0001_A)\u001d\u001fCqA\"\f6\u0001\bqI\rE\u0003y\u0003#r\u0019\nC\u0004\bfU\u0002\u001dA$4\u0011\u000ba\f\tFd&\t\u000f!uV\u0007q\u0001\u000fRB)\u00010!\u0015\u000f\u001c\"9!RG\u001bA\u00049U\u0007#\u0002=\u0002R9}\u0005bBFgk\u0001\u000fa\u0012\u001c\t\u0006q\u0006Ec2\u0015\u0005\b\u001b\u000b+\u00049\u0001Ho!\u0015A\u0018\u0011\u000bHT\u0003)!X\u000f\u001d7fcQ\u0012\u0016nZ\u000b\u001f\u001dGtyOd=\u000fx:mhr`H\u0002\u001f\u000fyYad\u0004\u0010\u0014=]q2DH\u0010\u001fG!bD$:\u0010(=-rrFH\u001a\u001foyYdd\u0010\u0010D=\u001ds2JH(\u001f'z9fd\u0017\u0011\ta\\hr\u001d\t E:%hR\u001eHy\u001dktIP$@\u0010\u0002=\u0015q\u0012BH\u0007\u001f#y)b$\u0007\u0010\u001e=\u0005\u0012b\u0001HvG\n9A+\u001e9mKF\"\u0004\u0003BA\u0002\u001d_$q!a\u00027\u0005\u0004\tI\u0001\u0005\u0003\u0002\u00049MHaBA;m\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007q9\u0010B\u0004\u0002jZ\u0012\r!!\u0003\u0011\t\u0005\ra2 \u0003\b\u0005{2$\u0019AA\u0005!\u0011\t\u0019Ad@\u0005\u000f\rEbG1\u0001\u0002\nA!\u00111AH\u0002\t\u001d!)A\u000eb\u0001\u0003\u0013\u0001B!a\u0001\u0010\b\u00119A\u0011 \u001cC\u0002\u0005%\u0001\u0003BA\u0002\u001f\u0017!qA\"\u00047\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004==AaBD!m\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007y\u0019\u0002B\u0004\t\u0016Z\u0012\r!!\u0003\u0011\t\u0005\rqr\u0003\u0003\b\u0015\u00131$\u0019AA\u0005!\u0011\t\u0019ad\u0007\u0005\u000f-ueG1\u0001\u0002\nA!\u00111AH\u0010\t\u001di\tF\u000eb\u0001\u0003\u0013\u0001B!a\u0001\u0010$\u00119qR\u0005\u001cC\u0002\u0005%!aA!2g!9\u0011\u0011\u0004\u001cA\u0004=%\u0002\u0003\u0002=|\u001d[Dq!! 7\u0001\byi\u0003\u0005\u0003yw:E\bbBA{m\u0001\u000fq\u0012\u0007\t\u0005qnt)\u0010C\u0004\u0003\u000eZ\u0002\u001da$\u000e\u0011\ta\\h\u0012 \u0005\b\u0007\u000b2\u00049AH\u001d!\u0011A8P$@\t\u000f\u0011ua\u0007q\u0001\u0010>A!\u0001p_H\u0001\u0011\u001d))B\u000ea\u0002\u001f\u0003\u0002B\u0001_>\u0010\u0006!9aQ\u0006\u001cA\u0004=\u0015\u0003\u0003\u0002=|\u001f\u0013Aqa\"\u001a7\u0001\byI\u0005\u0005\u0003yw>5\u0001b\u0002E_m\u0001\u000fqR\n\t\u0005qn|\t\u0002C\u0004\u000b6Y\u0002\u001da$\u0015\u0011\ta\\xR\u0003\u0005\b\u0017\u001b4\u00049AH+!\u0011A8p$\u0007\t\u000f5\u0015e\u0007q\u0001\u0010ZA!\u0001p_H\u000f\u0011\u001dyiF\u000ea\u0002\u001f?\n1!Q\u00194!\u0011A8p$\t\u0002\u0017Q,\b\u000f\\32iIKgnZ\u000b\u001f\u001fKzig$\u001d\u0010v=etRPHA\u001f\u000b{Ii$$\u0010\u0012>Uu\u0012THO\u001fC#bdd\u001a\u0010$>\u001dv2VHX\u001fg{9ld/\u0010@>\rwrYHf\u001f\u001f|\u0019nd6\u0011\u000ba\f)c$\u001b\u0011?\ttIod\u001b\u0010p=MtrOH>\u001f\u007fz\u0019id\"\u0010\f>=u2SHL\u001f7{y\n\u0005\u0003\u0002\u0004=5DaBA\u0004o\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007y\t\bB\u0004\u0002v]\u0012\r!!\u0003\u0011\t\u0005\rqR\u000f\u0003\b\u0003S<$\u0019AA\u0005!\u0011\t\u0019a$\u001f\u0005\u000f\tutG1\u0001\u0002\nA!\u00111AH?\t\u001d\u0019\td\u000eb\u0001\u0003\u0013\u0001B!a\u0001\u0010\u0002\u00129AQA\u001cC\u0002\u0005%\u0001\u0003BA\u0002\u001f\u000b#q\u0001\"?8\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004=%Ea\u0002D\u0007o\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007yi\tB\u0004\bB]\u0012\r!!\u0003\u0011\t\u0005\rq\u0012\u0013\u0003\b\u0011+;$\u0019AA\u0005!\u0011\t\u0019a$&\u0005\u000f)%qG1\u0001\u0002\nA!\u00111AHM\t\u001dYij\u000eb\u0001\u0003\u0013\u0001B!a\u0001\u0010\u001e\u00129Q\u0012K\u001cC\u0002\u0005%\u0001\u0003BA\u0002\u001fC#qa$\n8\u0005\u0004\tI\u0001C\u0004\u0002\u001a]\u0002\u001da$*\u0011\u000ba\f)cd\u001b\t\u000f\u0005ut\u0007q\u0001\u0010*B)\u00010!\n\u0010p!9\u0011Q_\u001cA\u0004=5\u0006#\u0002=\u0002&=M\u0004b\u0002BGo\u0001\u000fq\u0012\u0017\t\u0006q\u0006\u0015rr\u000f\u0005\b\u0007\u000b:\u00049AH[!\u0015A\u0018QEH>\u0011\u001d!ib\u000ea\u0002\u001fs\u0003R\u0001_A\u0013\u001f\u007fBq!\"\u00068\u0001\byi\fE\u0003y\u0003Ky\u0019\tC\u0004\u0007.]\u0002\u001da$1\u0011\u000ba\f)cd\"\t\u000f\u001d\u0015t\u0007q\u0001\u0010FB)\u00010!\n\u0010\f\"9\u0001RX\u001cA\u0004=%\u0007#\u0002=\u0002&==\u0005b\u0002F\u001bo\u0001\u000fqR\u001a\t\u0006q\u0006\u0015r2\u0013\u0005\b\u0017\u001b<\u00049AHi!\u0015A\u0018QEHL\u0011\u001di)i\u000ea\u0002\u001f+\u0004R\u0001_A\u0013\u001f7Cqa$\u00188\u0001\byI\u000eE\u0003y\u0003Kyy*\u0001\u0006ukBdW-\r\u001bS]\u001e,bdd8\u0010h>-xr^Hz\u001fo|Ypd@\u0011\u0004A\u001d\u00013\u0002I\b!'\u0001:\u0002e\u0007\u0015==\u0005\bS\u0004I\u0011!K\u0001J\u0003%\f\u00112AU\u0002\u0013\bI\u001f!\u0003\u0002*\u0005%\u0013\u0011NAE\u0003#\u0002=\u0002<=\r\bc\b2\u000fj>\u0015x\u0012^Hw\u001fc|)p$?\u0010~B\u0005\u0001S\u0001I\u0005!\u001b\u0001\n\u0002%\u0006\u0011\u001aA!\u00111AHt\t\u001d\t9\u0001\u000fb\u0001\u0003\u0013\u0001B!a\u0001\u0010l\u00129\u0011Q\u000f\u001dC\u0002\u0005%\u0001\u0003BA\u0002\u001f_$q!!;9\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004=MHa\u0002B?q\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007y9\u0010B\u0004\u00042a\u0012\r!!\u0003\u0011\t\u0005\rq2 \u0003\b\t\u000bA$\u0019AA\u0005!\u0011\t\u0019ad@\u0005\u000f\u0011e\bH1\u0001\u0002\nA!\u00111\u0001I\u0002\t\u001d1i\u0001\u000fb\u0001\u0003\u0013\u0001B!a\u0001\u0011\b\u00119q\u0011\t\u001dC\u0002\u0005%\u0001\u0003BA\u0002!\u0017!q\u0001#&9\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004A=Aa\u0002F\u0005q\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0001\u001a\u0002B\u0004\f\u001eb\u0012\r!!\u0003\u0011\t\u0005\r\u0001s\u0003\u0003\b\u001b#B$\u0019AA\u0005!\u0011\t\u0019\u0001e\u0007\u0005\u000f=\u0015\u0002H1\u0001\u0002\n!9\u0011\u0011\u0004\u001dA\u0004A}\u0001#\u0002=\u0002<=\u0015\bbBA?q\u0001\u000f\u00013\u0005\t\u0006q\u0006mr\u0012\u001e\u0005\b\u0003kD\u00049\u0001I\u0014!\u0015A\u00181HHw\u0011\u001d\u0011i\t\u000fa\u0002!W\u0001R\u0001_A\u001e\u001fcDqa!\u00129\u0001\b\u0001z\u0003E\u0003y\u0003wy)\u0010C\u0004\u0005\u001ea\u0002\u001d\u0001e\r\u0011\u000ba\fYd$?\t\u000f\u0015U\u0001\bq\u0001\u00118A)\u00010a\u000f\u0010~\"9aQ\u0006\u001dA\u0004Am\u0002#\u0002=\u0002<A\u0005\u0001bBD3q\u0001\u000f\u0001s\b\t\u0006q\u0006m\u0002S\u0001\u0005\b\u0011{C\u00049\u0001I\"!\u0015A\u00181\bI\u0005\u0011\u001dQ)\u0004\u000fa\u0002!\u000f\u0002R\u0001_A\u001e!\u001bAqa#49\u0001\b\u0001Z\u0005E\u0003y\u0003w\u0001\n\u0002C\u0004\u000e\u0006b\u0002\u001d\u0001e\u0014\u0011\u000ba\fY\u0004%\u0006\t\u000f=u\u0003\bq\u0001\u0011TA)\u00010a\u000f\u0011\u001a\u0005yA/\u001e9mKF\"4+Z7je&tw-\u0006\u0010\u0011ZA\u0005\u0004S\rI5![\u0002\n\b%\u001e\u0011zAu\u0004\u0013\u0011IC!\u0013\u0003j\t%%\u0011\u0016Rq\u00023\fIL!7\u0003z\ne)\u0011(B-\u0006s\u0016IZ!o\u0003Z\fe0\u0011DB\u001d\u00073\u001a\t\u0006q\u0006E\u0003S\f\t E:%\bs\fI2!O\u0002Z\u0007e\u001c\u0011tA]\u00043\u0010I@!\u0007\u0003:\te#\u0011\u0010BM\u0005\u0003BA\u0002!C\"q!a\u0002:\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004A\u0015DaBA;s\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0001J\u0007B\u0004\u0002jf\u0012\r!!\u0003\u0011\t\u0005\r\u0001S\u000e\u0003\b\u0005{J$\u0019AA\u0005!\u0011\t\u0019\u0001%\u001d\u0005\u000f\rE\u0012H1\u0001\u0002\nA!\u00111\u0001I;\t\u001d!)!\u000fb\u0001\u0003\u0013\u0001B!a\u0001\u0011z\u00119A\u0011`\u001dC\u0002\u0005%\u0001\u0003BA\u0002!{\"qA\"\u0004:\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004A\u0005EaBD!s\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0001*\tB\u0004\t\u0016f\u0012\r!!\u0003\u0011\t\u0005\r\u0001\u0013\u0012\u0003\b\u0015\u0013I$\u0019AA\u0005!\u0011\t\u0019\u0001%$\u0005\u000f-u\u0015H1\u0001\u0002\nA!\u00111\u0001II\t\u001di\t&\u000fb\u0001\u0003\u0013\u0001B!a\u0001\u0011\u0016\u00129qRE\u001dC\u0002\u0005%\u0001bBA\rs\u0001\u000f\u0001\u0013\u0014\t\u0006q\u0006E\u0003s\f\u0005\b\u0003{J\u00049\u0001IO!\u0015A\u0018\u0011\u000bI2\u0011\u001d\t)0\u000fa\u0002!C\u0003R\u0001_A)!OBqA!$:\u0001\b\u0001*\u000bE\u0003y\u0003#\u0002Z\u0007C\u0004\u0004Fe\u0002\u001d\u0001%+\u0011\u000ba\f\t\u0006e\u001c\t\u000f\u0011u\u0011\bq\u0001\u0011.B)\u00010!\u0015\u0011t!9QQC\u001dA\u0004AE\u0006#\u0002=\u0002RA]\u0004b\u0002D\u0017s\u0001\u000f\u0001S\u0017\t\u0006q\u0006E\u00033\u0010\u0005\b\u000fKJ\u00049\u0001I]!\u0015A\u0018\u0011\u000bI@\u0011\u001dAi,\u000fa\u0002!{\u0003R\u0001_A)!\u0007CqA#\u000e:\u0001\b\u0001\n\rE\u0003y\u0003#\u0002:\tC\u0004\fNf\u0002\u001d\u0001%2\u0011\u000ba\f\t\u0006e#\t\u000f5\u0015\u0015\bq\u0001\u0011JB)\u00010!\u0015\u0011\u0010\"9qRL\u001dA\u0004A5\u0007#\u0002=\u0002RAM\u0015A\u0003;va2,\u0017'\u000e*jOV\u0001\u00033\u001bIp!G\u0004:\u000fe;\u0011pBM\bs\u001fI~!\u007f\f\u001a!e\u0002\u0012\fE=\u00113CI\f)\u0001\u0002*.e\u0007\u0012 E\r\u0012sEI\u0016#_\t\u001a$e\u000e\u0012<E}\u00123II$#\u0017\nz%e\u0015\u0011\ta\\\bs\u001b\t\"EBe\u0007S\u001cIq!K\u0004J\u000f%<\u0011rBU\b\u0013 I\u007f#\u0003\t*!%\u0003\u0012\u000eEE\u0011SC\u0005\u0004!7\u001c'a\u0002+va2,\u0017'\u000e\t\u0005\u0003\u0007\u0001z\u000eB\u0004\u0002\bi\u0012\r!!\u0003\u0011\t\u0005\r\u00013\u001d\u0003\b\u0003kR$\u0019AA\u0005!\u0011\t\u0019\u0001e:\u0005\u000f\u0005%(H1\u0001\u0002\nA!\u00111\u0001Iv\t\u001d\u0011iH\u000fb\u0001\u0003\u0013\u0001B!a\u0001\u0011p\u001291\u0011\u0007\u001eC\u0002\u0005%\u0001\u0003BA\u0002!g$q\u0001\"\u0002;\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004A]Ha\u0002C}u\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0001Z\u0010B\u0004\u0007\u000ei\u0012\r!!\u0003\u0011\t\u0005\r\u0001s \u0003\b\u000f\u0003R$\u0019AA\u0005!\u0011\t\u0019!e\u0001\u0005\u000f!U%H1\u0001\u0002\nA!\u00111AI\u0004\t\u001dQIA\u000fb\u0001\u0003\u0013\u0001B!a\u0001\u0012\f\u001191R\u0014\u001eC\u0002\u0005%\u0001\u0003BA\u0002#\u001f!q!$\u0015;\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004EMAaBH\u0013u\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\t:\u0002B\u0004\u0012\u001ai\u0012\r!!\u0003\u0003\u0007\u0005\u000bD\u0007C\u0004\u0002\u001ai\u0002\u001d!%\b\u0011\ta\\\bS\u001c\u0005\b\u0003{R\u00049AI\u0011!\u0011A8\u0010%9\t\u000f\u0005U(\bq\u0001\u0012&A!\u0001p\u001fIs\u0011\u001d\u0011iI\u000fa\u0002#S\u0001B\u0001_>\u0011j\"91Q\t\u001eA\u0004E5\u0002\u0003\u0002=|![Dq\u0001\"\b;\u0001\b\t\n\u0004\u0005\u0003ywBE\bbBC\u000bu\u0001\u000f\u0011S\u0007\t\u0005qn\u0004*\u0010C\u0004\u0007.i\u0002\u001d!%\u000f\u0011\ta\\\b\u0013 \u0005\b\u000fKR\u00049AI\u001f!\u0011A8\u0010%@\t\u000f!u&\bq\u0001\u0012BA!\u0001p_I\u0001\u0011\u001dQ)D\u000fa\u0002#\u000b\u0002B\u0001_>\u0012\u0006!91R\u001a\u001eA\u0004E%\u0003\u0003\u0002=|#\u0013Aq!$\";\u0001\b\tj\u0005\u0005\u0003ywF5\u0001bBH/u\u0001\u000f\u0011\u0013\u000b\t\u0005qn\f\n\u0002C\u0004\u0012Vi\u0002\u001d!e\u0016\u0002\u0007\u0005\u000bD\u0007\u0005\u0003ywFU\u0011a\u0003;va2,\u0017'\u000e*j]\u001e,\u0002%%\u0018\u0012fE%\u0014SNI9#k\nJ(% \u0012\u0002F\u0015\u0015\u0013RIG##\u000b**%'\u0012\u001eR\u0001\u0013sLIP#G\u000b:+e+\u00120FM\u0016sWI^#\u007f\u000b\u001a-e2\u0012LF=\u00173[Il!\u0015A\u0018QEI1!\u0005\u0012\u0007\u0013\\I2#O\nZ'e\u001c\u0012tE]\u00143PI@#\u0007\u000b:)e#\u0012\u0010FM\u0015sSIN!\u0011\t\u0019!%\u001a\u0005\u000f\u0005\u001d1H1\u0001\u0002\nA!\u00111AI5\t\u001d\t)h\u000fb\u0001\u0003\u0013\u0001B!a\u0001\u0012n\u00119\u0011\u0011^\u001eC\u0002\u0005%\u0001\u0003BA\u0002#c\"qA! <\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004EUDaBB\u0019w\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\tJ\bB\u0004\u0005\u0006m\u0012\r!!\u0003\u0011\t\u0005\r\u0011S\u0010\u0003\b\ts\\$\u0019AA\u0005!\u0011\t\u0019!%!\u0005\u000f\u001951H1\u0001\u0002\nA!\u00111AIC\t\u001d9\te\u000fb\u0001\u0003\u0013\u0001B!a\u0001\u0012\n\u00129\u0001RS\u001eC\u0002\u0005%\u0001\u0003BA\u0002#\u001b#qA#\u0003<\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004EEEaBFOw\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\t*\nB\u0004\u000eRm\u0012\r!!\u0003\u0011\t\u0005\r\u0011\u0013\u0014\u0003\b\u001fKY$\u0019AA\u0005!\u0011\t\u0019!%(\u0005\u000fEe1H1\u0001\u0002\n!9\u0011\u0011D\u001eA\u0004E\u0005\u0006#\u0002=\u0002&E\r\u0004bBA?w\u0001\u000f\u0011S\u0015\t\u0006q\u0006\u0015\u0012s\r\u0005\b\u0003k\\\u00049AIU!\u0015A\u0018QEI6\u0011\u001d\u0011ii\u000fa\u0002#[\u0003R\u0001_A\u0013#_Bqa!\u0012<\u0001\b\t\n\fE\u0003y\u0003K\t\u001a\bC\u0004\u0005\u001em\u0002\u001d!%.\u0011\u000ba\f)#e\u001e\t\u000f\u0015U1\bq\u0001\u0012:B)\u00010!\n\u0012|!9aQF\u001eA\u0004Eu\u0006#\u0002=\u0002&E}\u0004bBD3w\u0001\u000f\u0011\u0013\u0019\t\u0006q\u0006\u0015\u00123\u0011\u0005\b\u0011{[\u00049AIc!\u0015A\u0018QEID\u0011\u001dQ)d\u000fa\u0002#\u0013\u0004R\u0001_A\u0013#\u0017Cqa#4<\u0001\b\tj\rE\u0003y\u0003K\tz\tC\u0004\u000e\u0006n\u0002\u001d!%5\u0011\u000ba\f)#e%\t\u000f=u3\bq\u0001\u0012VB)\u00010!\n\u0012\u0018\"9\u0011SK\u001eA\u0004Ee\u0007#\u0002=\u0002&Em\u0015A\u0003;va2,\u0017'\u000e*oOV\u0001\u0013s\\It#W\fz/e=\u0012xFm\u0018s J\u0002%\u000f\u0011ZAe\u0004\u0013\u0014I]!3\u0004J\u0010)\u0001\n\nO%\t\u0013&I%\"S\u0006J\u0019%k\u0011JD%\u0010\u0013BI\u0015#\u0013\nJ'%#\u0012*F%\u0017\u0011\u000ba\fY$e9\u0011C\t\u0004J.%:\u0012jF5\u0018\u0013_I{#s\fjP%\u0001\u0013\u0006I%!S\u0002J\t%+\u0011JB%\b\u0011\t\u0005\r\u0011s\u001d\u0003\b\u0003\u000fa$\u0019AA\u0005!\u0011\t\u0019!e;\u0005\u000f\u0005UDH1\u0001\u0002\nA!\u00111AIx\t\u001d\tI\u000f\u0010b\u0001\u0003\u0013\u0001B!a\u0001\u0012t\u00129!Q\u0010\u001fC\u0002\u0005%\u0001\u0003BA\u0002#o$qa!\r=\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004EmHa\u0002C\u0003y\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\tz\u0010B\u0004\u0005zr\u0012\r!!\u0003\u0011\t\u0005\r!3\u0001\u0003\b\r\u001ba$\u0019AA\u0005!\u0011\t\u0019Ae\u0002\u0005\u000f\u001d\u0005CH1\u0001\u0002\nA!\u00111\u0001J\u0006\t\u001dA)\n\u0010b\u0001\u0003\u0013\u0001B!a\u0001\u0013\u0010\u00119!\u0012\u0002\u001fC\u0002\u0005%\u0001\u0003BA\u0002%'!qa#(=\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004I]AaBG)y\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011Z\u0002B\u0004\u0010&q\u0012\r!!\u0003\u0011\t\u0005\r!s\u0004\u0003\b#3a$\u0019AA\u0005\u0011\u001d\tI\u0002\u0010a\u0002%G\u0001R\u0001_A\u001e#KDq!! =\u0001\b\u0011:\u0003E\u0003y\u0003w\tJ\u000fC\u0004\u0002vr\u0002\u001dAe\u000b\u0011\u000ba\fY$%<\t\u000f\t5E\bq\u0001\u00130A)\u00010a\u000f\u0012r\"91Q\t\u001fA\u0004IM\u0002#\u0002=\u0002<EU\bb\u0002C\u000fy\u0001\u000f!s\u0007\t\u0006q\u0006m\u0012\u0013 \u0005\b\u000b+a\u00049\u0001J\u001e!\u0015A\u00181HI\u007f\u0011\u001d1i\u0003\u0010a\u0002%\u007f\u0001R\u0001_A\u001e%\u0003Aqa\"\u001a=\u0001\b\u0011\u001a\u0005E\u0003y\u0003w\u0011*\u0001C\u0004\t>r\u0002\u001dAe\u0012\u0011\u000ba\fYD%\u0003\t\u000f)UB\bq\u0001\u0013LA)\u00010a\u000f\u0013\u000e!91R\u001a\u001fA\u0004I=\u0003#\u0002=\u0002<IE\u0001bBGCy\u0001\u000f!3\u000b\t\u0006q\u0006m\"S\u0003\u0005\b\u001f;b\u00049\u0001J,!\u0015A\u00181\bJ\r\u0011\u001d\t*\u0006\u0010a\u0002%7\u0002R\u0001_A\u001e%;\tq\u0002^;qY\u0016\fTgU3nSJLgnZ\u000b!%C\u0012JG%\u001c\u0013rIU$\u0013\u0010J?%\u0003\u0013*I%#\u0013\u000eJE%S\u0013JM%;\u0013\n\u000b\u0006\u0011\u0013dI\r&s\u0015JV%_\u0013\u001aLe.\u0013<J}&3\u0019Jd%\u0017\u0014zMe5\u0013XJm\u0007#\u0002=\u0002RI\u0015\u0004#\t2\u0011ZJ\u001d$3\u000eJ8%g\u0012:He\u001f\u0013\u0000I\r%s\u0011JF%\u001f\u0013\u001aJe&\u0013\u001cJ}\u0005\u0003BA\u0002%S\"q!a\u0002>\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004I5DaBA;{\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011\n\bB\u0004\u0002jv\u0012\r!!\u0003\u0011\t\u0005\r!S\u000f\u0003\b\u0005{j$\u0019AA\u0005!\u0011\t\u0019A%\u001f\u0005\u000f\rERH1\u0001\u0002\nA!\u00111\u0001J?\t\u001d!)!\u0010b\u0001\u0003\u0013\u0001B!a\u0001\u0013\u0002\u00129A\u0011`\u001fC\u0002\u0005%\u0001\u0003BA\u0002%\u000b#qA\"\u0004>\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004I%EaBD!{\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011j\tB\u0004\t\u0016v\u0012\r!!\u0003\u0011\t\u0005\r!\u0013\u0013\u0003\b\u0015\u0013i$\u0019AA\u0005!\u0011\t\u0019A%&\u0005\u000f-uUH1\u0001\u0002\nA!\u00111\u0001JM\t\u001di\t&\u0010b\u0001\u0003\u0013\u0001B!a\u0001\u0013\u001e\u00129qRE\u001fC\u0002\u0005%\u0001\u0003BA\u0002%C#q!%\u0007>\u0005\u0004\tI\u0001C\u0004\u0002\u001au\u0002\u001dA%*\u0011\u000ba\f\tFe\u001a\t\u000f\u0005uT\bq\u0001\u0013*B)\u00010!\u0015\u0013l!9\u0011Q_\u001fA\u0004I5\u0006#\u0002=\u0002RI=\u0004b\u0002BG{\u0001\u000f!\u0013\u0017\t\u0006q\u0006E#3\u000f\u0005\b\u0007\u000bj\u00049\u0001J[!\u0015A\u0018\u0011\u000bJ<\u0011\u001d!i\"\u0010a\u0002%s\u0003R\u0001_A)%wBq!\"\u0006>\u0001\b\u0011j\fE\u0003y\u0003#\u0012z\bC\u0004\u0007.u\u0002\u001dA%1\u0011\u000ba\f\tFe!\t\u000f\u001d\u0015T\bq\u0001\u0013FB)\u00010!\u0015\u0013\b\"9\u0001RX\u001fA\u0004I%\u0007#\u0002=\u0002RI-\u0005b\u0002F\u001b{\u0001\u000f!S\u001a\t\u0006q\u0006E#s\u0012\u0005\b\u0017\u001bl\u00049\u0001Ji!\u0015A\u0018\u0011\u000bJJ\u0011\u001di))\u0010a\u0002%+\u0004R\u0001_A)%/Cqa$\u0018>\u0001\b\u0011J\u000eE\u0003y\u0003#\u0012Z\nC\u0004\u0012Vu\u0002\u001dA%8\u0011\u000ba\f\tFe(\u0002\u0015Q,\b\u000f\\32mIKw-\u0006\u0012\u0013dJ=(3\u001fJ|%w\u0014zpe\u0001\u0014\bM-1sBJ\n'/\u0019Zbe\b\u0014$M\u001d23\u0006\u000b#%K\u001czce\r\u00148Mm2sHJ\"'\u000f\u001aZee\u0014\u0014TM]33LJ0'G\u001a:ge\u001b\u0011\ta\\(s\u001d\t$EJ%(S\u001eJy%k\u0014JP%@\u0014\u0002M\u00151\u0013BJ\u0007'#\u0019*b%\u0007\u0014\u001eM\u00052SEJ\u0015\u0013\r\u0011Zo\u0019\u0002\b)V\u0004H.Z\u00197!\u0011\t\u0019Ae<\u0005\u000f\u0005\u001daH1\u0001\u0002\nA!\u00111\u0001Jz\t\u001d\t)H\u0010b\u0001\u0003\u0013\u0001B!a\u0001\u0013x\u00129\u0011\u0011\u001e C\u0002\u0005%\u0001\u0003BA\u0002%w$qA! ?\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004I}HaBB\u0019}\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0019\u001a\u0001B\u0004\u0005\u0006y\u0012\r!!\u0003\u0011\t\u0005\r1s\u0001\u0003\b\tst$\u0019AA\u0005!\u0011\t\u0019ae\u0003\u0005\u000f\u00195aH1\u0001\u0002\nA!\u00111AJ\b\t\u001d9\tE\u0010b\u0001\u0003\u0013\u0001B!a\u0001\u0014\u0014\u00119\u0001R\u0013 C\u0002\u0005%\u0001\u0003BA\u0002'/!qA#\u0003?\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004MmAaBFO}\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0019z\u0002B\u0004\u000eRy\u0012\r!!\u0003\u0011\t\u0005\r13\u0005\u0003\b\u001fKq$\u0019AA\u0005!\u0011\t\u0019ae\n\u0005\u000fEeaH1\u0001\u0002\nA!\u00111AJ\u0016\t\u001d\u0019jC\u0010b\u0001\u0003\u0013\u00111!Q\u00196\u0011\u001d\tIB\u0010a\u0002'c\u0001B\u0001_>\u0013n\"9\u0011Q\u0010 A\u0004MU\u0002\u0003\u0002=|%cDq!!>?\u0001\b\u0019J\u0004\u0005\u0003ywJU\bb\u0002BG}\u0001\u000f1S\b\t\u0005qn\u0014J\u0010C\u0004\u0004Fy\u0002\u001da%\u0011\u0011\ta\\(S \u0005\b\t;q\u00049AJ#!\u0011A8p%\u0001\t\u000f\u0015Ua\bq\u0001\u0014JA!\u0001p_J\u0003\u0011\u001d1iC\u0010a\u0002'\u001b\u0002B\u0001_>\u0014\n!9qQ\r A\u0004ME\u0003\u0003\u0002=|'\u001bAq\u0001#0?\u0001\b\u0019*\u0006\u0005\u0003ywNE\u0001b\u0002F\u001b}\u0001\u000f1\u0013\f\t\u0005qn\u001c*\u0002C\u0004\fNz\u0002\u001da%\u0018\u0011\ta\\8\u0013\u0004\u0005\b\u001b\u000bs\u00049AJ1!\u0011A8p%\b\t\u000f=uc\bq\u0001\u0014fA!\u0001p_J\u0011\u0011\u001d\t*F\u0010a\u0002'S\u0002B\u0001_>\u0014&!91S\u000e A\u0004M=\u0014aA!2kA!\u0001p_J\u0015\u0003-!X\u000f\u001d7fcY\u0012\u0016N\\4\u0016EMU4SPJA'\u000b\u001bJi%$\u0014\u0012NU5\u0013TJO'C\u001b*k%+\u0014.NE6SWJ])\t\u001a:he/\u0014@N\r7sYJf'\u001f\u001c\u001ane6\u0014\\N}73]Jt'W\u001czoe=\u0014xB)\u00010!\n\u0014zA\u0019#M%;\u0014|M}43QJD'\u0017\u001bzie%\u0014\u0018Nm5sTJR'O\u001bZke,\u00144N]\u0006\u0003BA\u0002'{\"q!a\u0002@\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004M\u0005EaBA;\u007f\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0019*\tB\u0004\u0002j~\u0012\r!!\u0003\u0011\t\u0005\r1\u0013\u0012\u0003\b\u0005{z$\u0019AA\u0005!\u0011\t\u0019a%$\u0005\u000f\rErH1\u0001\u0002\nA!\u00111AJI\t\u001d!)a\u0010b\u0001\u0003\u0013\u0001B!a\u0001\u0014\u0016\u00129A\u0011` C\u0002\u0005%\u0001\u0003BA\u0002'3#qA\"\u0004@\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004MuEaBD!\u007f\t\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0019\n\u000bB\u0004\t\u0016~\u0012\r!!\u0003\u0011\t\u0005\r1S\u0015\u0003\b\u0015\u0013y$\u0019AA\u0005!\u0011\t\u0019a%+\u0005\u000f-uuH1\u0001\u0002\nA!\u00111AJW\t\u001di\tf\u0010b\u0001\u0003\u0013\u0001B!a\u0001\u00142\u00129qRE C\u0002\u0005%\u0001\u0003BA\u0002'k#q!%\u0007@\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004MeFaBJ\u0017\u007f\t\u0007\u0011\u0011\u0002\u0005\b\u00033y\u00049AJ_!\u0015A\u0018QEJ>\u0011\u001d\tih\u0010a\u0002'\u0003\u0004R\u0001_A\u0013'\u007fBq!!>@\u0001\b\u0019*\rE\u0003y\u0003K\u0019\u001a\tC\u0004\u0003\u000e~\u0002\u001da%3\u0011\u000ba\f)ce\"\t\u000f\r\u0015s\bq\u0001\u0014NB)\u00010!\n\u0014\f\"9AQD A\u0004ME\u0007#\u0002=\u0002&M=\u0005bBC\u000b\u007f\u0001\u000f1S\u001b\t\u0006q\u0006\u001523\u0013\u0005\b\r[y\u00049AJm!\u0015A\u0018QEJL\u0011\u001d9)g\u0010a\u0002';\u0004R\u0001_A\u0013'7Cq\u0001#0@\u0001\b\u0019\n\u000fE\u0003y\u0003K\u0019z\nC\u0004\u000b6}\u0002\u001da%:\u0011\u000ba\f)ce)\t\u000f-5w\bq\u0001\u0014jB)\u00010!\n\u0014(\"9QRQ A\u0004M5\b#\u0002=\u0002&M-\u0006bBH/\u007f\u0001\u000f1\u0013\u001f\t\u0006q\u0006\u00152s\u0016\u0005\b#+z\u00049AJ{!\u0015A\u0018QEJZ\u0011\u001d\u0019jg\u0010a\u0002's\u0004R\u0001_A\u0013'o\u000b!\u0002^;qY\u0016\fdG\u00158h+\t\u001az\u0010f\u0002\u0015\fQ=A3\u0003K\f)7!z\u0002f\t\u0015(Q-Bs\u0006K\u001a)o!Z\u0004f\u0010\u0015DQ\u0011C\u0013\u0001K#)\u0013\"j\u0005&\u0015\u0015VQeCS\fK1)K\"J\u0007&\u001c\u0015rQUD\u0013\u0010K?)\u0003\u0003R\u0001_A\u001e)\u0007\u00012E\u0019Ju)\u000b!J\u0001&\u0004\u0015\u0012QUA\u0013\u0004K\u000f)C!*\u0003&\u000b\u0015.QEBS\u0007K\u001d){!\n\u0005\u0005\u0003\u0002\u0004Q\u001dAaBA\u0004\u0001\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007!Z\u0001B\u0004\u0002v\u0001\u0013\r!!\u0003\u0011\t\u0005\rAs\u0002\u0003\b\u0003S\u0004%\u0019AA\u0005!\u0011\t\u0019\u0001f\u0005\u0005\u000f\tu\u0004I1\u0001\u0002\nA!\u00111\u0001K\f\t\u001d\u0019\t\u0004\u0011b\u0001\u0003\u0013\u0001B!a\u0001\u0015\u001c\u00119AQ\u0001!C\u0002\u0005%\u0001\u0003BA\u0002)?!q\u0001\"?A\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004Q\rBa\u0002D\u0007\u0001\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007!:\u0003B\u0004\bB\u0001\u0013\r!!\u0003\u0011\t\u0005\rA3\u0006\u0003\b\u0011+\u0003%\u0019AA\u0005!\u0011\t\u0019\u0001f\f\u0005\u000f)%\u0001I1\u0001\u0002\nA!\u00111\u0001K\u001a\t\u001dYi\n\u0011b\u0001\u0003\u0013\u0001B!a\u0001\u00158\u00119Q\u0012\u000b!C\u0002\u0005%\u0001\u0003BA\u0002)w!qa$\nA\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004Q}BaBI\r\u0001\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007!\u001a\u0005B\u0004\u0014.\u0001\u0013\r!!\u0003\t\u000f\u0005e\u0001\tq\u0001\u0015HA)\u00010a\u000f\u0015\u0006!9\u0011Q\u0010!A\u0004Q-\u0003#\u0002=\u0002<Q%\u0001bBA{\u0001\u0002\u000fAs\n\t\u0006q\u0006mBS\u0002\u0005\b\u0005\u001b\u0003\u00059\u0001K*!\u0015A\u00181\bK\t\u0011\u001d\u0019)\u0005\u0011a\u0002)/\u0002R\u0001_A\u001e)+Aq\u0001\"\bA\u0001\b!Z\u0006E\u0003y\u0003w!J\u0002C\u0004\u0006\u0016\u0001\u0003\u001d\u0001f\u0018\u0011\u000ba\fY\u0004&\b\t\u000f\u00195\u0002\tq\u0001\u0015dA)\u00010a\u000f\u0015\"!9qQ\r!A\u0004Q\u001d\u0004#\u0002=\u0002<Q\u0015\u0002b\u0002E_\u0001\u0002\u000fA3\u000e\t\u0006q\u0006mB\u0013\u0006\u0005\b\u0015k\u0001\u00059\u0001K8!\u0015A\u00181\bK\u0017\u0011\u001dYi\r\u0011a\u0002)g\u0002R\u0001_A\u001e)cAq!$\"A\u0001\b!:\bE\u0003y\u0003w!*\u0004C\u0004\u0010^\u0001\u0003\u001d\u0001f\u001f\u0011\u000ba\fY\u0004&\u000f\t\u000fEU\u0003\tq\u0001\u0015\u0000A)\u00010a\u000f\u0015>!91S\u000e!A\u0004Q\r\u0005#\u0002=\u0002<Q\u0005\u0013a\u0004;va2,\u0017GN*f[&\u0014\u0018N\\4\u0016EQ%E\u0013\u0013KK)3#j\n&)\u0015&R%FS\u0016KY)k#J\f&0\u0015BR\u0015G\u0013\u001aKg)\t\"Z\tf4\u0015TR]G3\u001cKp)G$:\u000ff;\u0015pRMHs\u001fK~)\u007f,\u001a!f\u0002\u0016\fA)\u00010!\u0015\u0015\u000eB\u0019#M%;\u0015\u0010RMEs\u0013KN)?#\u001a\u000bf*\u0015,R=F3\u0017K\\)w#z\ff1\u0015HR-\u0007\u0003BA\u0002)##q!a\u0002B\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004QUEaBA;\u0003\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007!J\nB\u0004\u0002j\u0006\u0013\r!!\u0003\u0011\t\u0005\rAS\u0014\u0003\b\u0005{\n%\u0019AA\u0005!\u0011\t\u0019\u0001&)\u0005\u000f\rE\u0012I1\u0001\u0002\nA!\u00111\u0001KS\t\u001d!)!\u0011b\u0001\u0003\u0013\u0001B!a\u0001\u0015*\u00129A\u0011`!C\u0002\u0005%\u0001\u0003BA\u0002)[#qA\"\u0004B\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004QEFaBD!\u0003\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007!*\fB\u0004\t\u0016\u0006\u0013\r!!\u0003\u0011\t\u0005\rA\u0013\u0018\u0003\b\u0015\u0013\t%\u0019AA\u0005!\u0011\t\u0019\u0001&0\u0005\u000f-u\u0015I1\u0001\u0002\nA!\u00111\u0001Ka\t\u001di\t&\u0011b\u0001\u0003\u0013\u0001B!a\u0001\u0015F\u00129qRE!C\u0002\u0005%\u0001\u0003BA\u0002)\u0013$q!%\u0007B\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004Q5GaBJ\u0017\u0003\n\u0007\u0011\u0011\u0002\u0005\b\u00033\t\u00059\u0001Ki!\u0015A\u0018\u0011\u000bKH\u0011\u001d\ti(\u0011a\u0002)+\u0004R\u0001_A))'Cq!!>B\u0001\b!J\u000eE\u0003y\u0003#\":\nC\u0004\u0003\u000e\u0006\u0003\u001d\u0001&8\u0011\u000ba\f\t\u0006f'\t\u000f\r\u0015\u0013\tq\u0001\u0015bB)\u00010!\u0015\u0015 \"9AQD!A\u0004Q\u0015\b#\u0002=\u0002RQ\r\u0006bBC\u000b\u0003\u0002\u000fA\u0013\u001e\t\u0006q\u0006ECs\u0015\u0005\b\r[\t\u00059\u0001Kw!\u0015A\u0018\u0011\u000bKV\u0011\u001d9)'\u0011a\u0002)c\u0004R\u0001_A))_Cq\u0001#0B\u0001\b!*\u0010E\u0003y\u0003#\"\u001a\fC\u0004\u000b6\u0005\u0003\u001d\u0001&?\u0011\u000ba\f\t\u0006f.\t\u000f-5\u0017\tq\u0001\u0015~B)\u00010!\u0015\u0015<\"9QRQ!A\u0004U\u0005\u0001#\u0002=\u0002RQ}\u0006bBH/\u0003\u0002\u000fQS\u0001\t\u0006q\u0006EC3\u0019\u0005\b#+\n\u00059AK\u0005!\u0015A\u0018\u0011\u000bKd\u0011\u001d\u0019j'\u0011a\u0002+\u001b\u0001R\u0001_A))\u0017\f!\u0002^;qY\u0016\ftGU5h+\u0011*\u001a\"f\b\u0016$U\u001dR3FK\u0018+g):$f\u000f\u0016@U\rSsIK&+\u001f*\u001a&f\u0016\u0016\\U}C\u0003JK\u000b+G*:'f\u001b\u0016pUMTsOK>+\u007f*\u001a)f\"\u0016\fV=U3SKL+7+z*f)\u0011\ta\\Xs\u0003\t&EVeQSDK\u0011+K)J#&\f\u00162UUR\u0013HK\u001f+\u0003**%&\u0013\u0016NUESSKK-+;J1!f\u0007d\u0005\u001d!V\u000f\u001d7fc]\u0002B!a\u0001\u0016 \u00119\u0011q\u0001\"C\u0002\u0005%\u0001\u0003BA\u0002+G!q!!\u001eC\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004U\u001dBaBAu\u0005\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007)Z\u0003B\u0004\u0003~\t\u0013\r!!\u0003\u0011\t\u0005\rQs\u0006\u0003\b\u0007c\u0011%\u0019AA\u0005!\u0011\t\u0019!f\r\u0005\u000f\u0011\u0015!I1\u0001\u0002\nA!\u00111AK\u001c\t\u001d!IP\u0011b\u0001\u0003\u0013\u0001B!a\u0001\u0016<\u00119aQ\u0002\"C\u0002\u0005%\u0001\u0003BA\u0002+\u007f!qa\"\u0011C\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004U\rCa\u0002EK\u0005\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007):\u0005B\u0004\u000b\n\t\u0013\r!!\u0003\u0011\t\u0005\rQ3\n\u0003\b\u0017;\u0013%\u0019AA\u0005!\u0011\t\u0019!f\u0014\u0005\u000f5E#I1\u0001\u0002\nA!\u00111AK*\t\u001dy)C\u0011b\u0001\u0003\u0013\u0001B!a\u0001\u0016X\u00119\u0011\u0013\u0004\"C\u0002\u0005%\u0001\u0003BA\u0002+7\"qa%\fC\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004U}CaBK1\u0005\n\u0007\u0011\u0011\u0002\u0002\u0004\u0003F2\u0004bBA\r\u0005\u0002\u000fQS\r\t\u0005qn,j\u0002C\u0004\u0002~\t\u0003\u001d!&\u001b\u0011\ta\\X\u0013\u0005\u0005\b\u0003k\u0014\u00059AK7!\u0011A80&\n\t\u000f\t5%\tq\u0001\u0016rA!\u0001p_K\u0015\u0011\u001d\u0019)E\u0011a\u0002+k\u0002B\u0001_>\u0016.!9AQ\u0004\"A\u0004Ue\u0004\u0003\u0002=|+cAq!\"\u0006C\u0001\b)j\b\u0005\u0003ywVU\u0002b\u0002D\u0017\u0005\u0002\u000fQ\u0013\u0011\t\u0005qn,J\u0004C\u0004\bf\t\u0003\u001d!&\"\u0011\ta\\XS\b\u0005\b\u0011{\u0013\u00059AKE!\u0011A80&\u0011\t\u000f)U\"\tq\u0001\u0016\u000eB!\u0001p_K#\u0011\u001dYiM\u0011a\u0002+#\u0003B\u0001_>\u0016J!9QR\u0011\"A\u0004UU\u0005\u0003\u0002=|+\u001bBqa$\u0018C\u0001\b)J\n\u0005\u0003ywVE\u0003bBI+\u0005\u0002\u000fQS\u0014\t\u0005qn,*\u0006C\u0004\u0014n\t\u0003\u001d!&)\u0011\ta\\X\u0013\f\u0005\b+K\u0013\u00059AKT\u0003\r\t\u0015G\u000e\t\u0005qn,j&A\u0006ukBdW-M\u001cSS:<W\u0003JKW+k+J,&0\u0016BV\u0015W\u0013ZKg+#,*.&7\u0016^V\u0005XS]Ku+[,\n0&>\u0015IU=Vs_K~+\u007f4\u001aAf\u0002\u0017\fY=a3\u0003L\f-71zBf\t\u0017(Y-bs\u0006L\u001a-o\u0001R\u0001_A\u0013+c\u0003REYK\r+g+:,f/\u0016@V\rWsYKf+\u001f,\u001a.f6\u0016\\V}W3]Kt+W,z/f=\u0011\t\u0005\rQS\u0017\u0003\b\u0003\u000f\u0019%\u0019AA\u0005!\u0011\t\u0019!&/\u0005\u000f\u0005U4I1\u0001\u0002\nA!\u00111AK_\t\u001d\tIo\u0011b\u0001\u0003\u0013\u0001B!a\u0001\u0016B\u00129!QP\"C\u0002\u0005%\u0001\u0003BA\u0002+\u000b$qa!\rD\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004U%Ga\u0002C\u0003\u0007\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007)j\rB\u0004\u0005z\u000e\u0013\r!!\u0003\u0011\t\u0005\rQ\u0013\u001b\u0003\b\r\u001b\u0019%\u0019AA\u0005!\u0011\t\u0019!&6\u0005\u000f\u001d\u00053I1\u0001\u0002\nA!\u00111AKm\t\u001dA)j\u0011b\u0001\u0003\u0013\u0001B!a\u0001\u0016^\u00129!\u0012B\"C\u0002\u0005%\u0001\u0003BA\u0002+C$qa#(D\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004U\u0015HaBG)\u0007\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007)J\u000fB\u0004\u0010&\r\u0013\r!!\u0003\u0011\t\u0005\rQS\u001e\u0003\b#3\u0019%\u0019AA\u0005!\u0011\t\u0019!&=\u0005\u000fM52I1\u0001\u0002\nA!\u00111AK{\t\u001d)\ng\u0011b\u0001\u0003\u0013Aq!!\u0007D\u0001\b)J\u0010E\u0003y\u0003K)\u001a\fC\u0004\u0002~\r\u0003\u001d!&@\u0011\u000ba\f)#f.\t\u000f\u0005U8\tq\u0001\u0017\u0002A)\u00010!\n\u0016<\"9!QR\"A\u0004Y\u0015\u0001#\u0002=\u0002&U}\u0006bBB#\u0007\u0002\u000fa\u0013\u0002\t\u0006q\u0006\u0015R3\u0019\u0005\b\t;\u0019\u00059\u0001L\u0007!\u0015A\u0018QEKd\u0011\u001d))b\u0011a\u0002-#\u0001R\u0001_A\u0013+\u0017DqA\"\fD\u0001\b1*\u0002E\u0003y\u0003K)z\rC\u0004\bf\r\u0003\u001dA&\u0007\u0011\u000ba\f)#f5\t\u000f!u6\tq\u0001\u0017\u001eA)\u00010!\n\u0016X\"9!RG\"A\u0004Y\u0005\u0002#\u0002=\u0002&Um\u0007bBFg\u0007\u0002\u000faS\u0005\t\u0006q\u0006\u0015Rs\u001c\u0005\b\u001b\u000b\u001b\u00059\u0001L\u0015!\u0015A\u0018QEKr\u0011\u001dyif\u0011a\u0002-[\u0001R\u0001_A\u0013+ODq!%\u0016D\u0001\b1\n\u0004E\u0003y\u0003K)Z\u000fC\u0004\u0014n\r\u0003\u001dA&\u000e\u0011\u000ba\f)#f<\t\u000fU\u00156\tq\u0001\u0017:A)\u00010!\n\u0016t\u0006QA/\u001e9mKF:$K\\4\u0016IY}bs\tL&-\u001f2\u001aFf\u0016\u0017\\Y}c3\rL4-W2zGf\u001d\u0017xYmds\u0010LB-\u000f#BE&\u0011\u0017\nZ5e\u0013\u0013LK-33jJ&)\u0017&Z%fS\u0016LY-k3JL&0\u0017BZ\u0015g\u0013\u001a\t\u0006q\u0006mb3\t\t&EVeaS\tL%-\u001b2\nF&\u0016\u0017ZYuc\u0013\rL3-S2jG&\u001d\u0017vYedS\u0010LA-\u000b\u0003B!a\u0001\u0017H\u00119\u0011q\u0001#C\u0002\u0005%\u0001\u0003BA\u0002-\u0017\"q!!\u001eE\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004Y=CaBAu\t\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u00071\u001a\u0006B\u0004\u0003~\u0011\u0013\r!!\u0003\u0011\t\u0005\ras\u000b\u0003\b\u0007c!%\u0019AA\u0005!\u0011\t\u0019Af\u0017\u0005\u000f\u0011\u0015AI1\u0001\u0002\nA!\u00111\u0001L0\t\u001d!I\u0010\u0012b\u0001\u0003\u0013\u0001B!a\u0001\u0017d\u00119aQ\u0002#C\u0002\u0005%\u0001\u0003BA\u0002-O\"qa\"\u0011E\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004Y-Da\u0002EK\t\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u00071z\u0007B\u0004\u000b\n\u0011\u0013\r!!\u0003\u0011\t\u0005\ra3\u000f\u0003\b\u0017;#%\u0019AA\u0005!\u0011\t\u0019Af\u001e\u0005\u000f5ECI1\u0001\u0002\nA!\u00111\u0001L>\t\u001dy)\u0003\u0012b\u0001\u0003\u0013\u0001B!a\u0001\u0017\u0000\u00119\u0011\u0013\u0004#C\u0002\u0005%\u0001\u0003BA\u0002-\u0007#qa%\fE\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004Y\u001dEaBK1\t\n\u0007\u0011\u0011\u0002\u0005\b\u00033!\u00059\u0001LF!\u0015A\u00181\bL#\u0011\u001d\ti\b\u0012a\u0002-\u001f\u0003R\u0001_A\u001e-\u0013Bq!!>E\u0001\b1\u001a\nE\u0003y\u0003w1j\u0005C\u0004\u0003\u000e\u0012\u0003\u001dAf&\u0011\u000ba\fYD&\u0015\t\u000f\r\u0015C\tq\u0001\u0017\u001cB)\u00010a\u000f\u0017V!9AQ\u0004#A\u0004Y}\u0005#\u0002=\u0002<Ye\u0003bBC\u000b\t\u0002\u000fa3\u0015\t\u0006q\u0006mbS\f\u0005\b\r[!\u00059\u0001LT!\u0015A\u00181\bL1\u0011\u001d9)\u0007\u0012a\u0002-W\u0003R\u0001_A\u001e-KBq\u0001#0E\u0001\b1z\u000bE\u0003y\u0003w1J\u0007C\u0004\u000b6\u0011\u0003\u001dAf-\u0011\u000ba\fYD&\u001c\t\u000f-5G\tq\u0001\u00178B)\u00010a\u000f\u0017r!9QR\u0011#A\u0004Ym\u0006#\u0002=\u0002<YU\u0004bBH/\t\u0002\u000fas\u0018\t\u0006q\u0006mb\u0013\u0010\u0005\b#+\"\u00059\u0001Lb!\u0015A\u00181\bL?\u0011\u001d\u0019j\u0007\u0012a\u0002-\u000f\u0004R\u0001_A\u001e-\u0003Cq!&*E\u0001\b1Z\rE\u0003y\u0003w1*)A\bukBdW-M\u001cTK6L'/\u001b8h+\u00112\nN&7\u0017^Z\u0005hS\u001dLu-[4\nP&>\u0017zZux\u0013AL\u0003/\u00139ja&\u0005\u0018\u0016]eA\u0003\nLj/79zbf\t\u0018(]-rsFL\u001a/o9Zdf\u0010\u0018D]\u001ds3JL(/'::ff\u0017\u0011\u000ba\f\tF&6\u0011K\t,JBf6\u0017\\Z}g3\u001dLt-W4zOf=\u0017xZmhs`L\u0002/\u000f9Zaf\u0004\u0018\u0014]]\u0001\u0003BA\u0002-3$q!a\u0002F\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004YuGaBA;\u000b\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u00071\n\u000fB\u0004\u0002j\u0016\u0013\r!!\u0003\u0011\t\u0005\raS\u001d\u0003\b\u0005{*%\u0019AA\u0005!\u0011\t\u0019A&;\u0005\u000f\rERI1\u0001\u0002\nA!\u00111\u0001Lw\t\u001d!)!\u0012b\u0001\u0003\u0013\u0001B!a\u0001\u0017r\u00129A\u0011`#C\u0002\u0005%\u0001\u0003BA\u0002-k$qA\"\u0004F\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004YeHaBD!\u000b\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u00071j\u0010B\u0004\t\u0016\u0016\u0013\r!!\u0003\u0011\t\u0005\rq\u0013\u0001\u0003\b\u0015\u0013)%\u0019AA\u0005!\u0011\t\u0019a&\u0002\u0005\u000f-uUI1\u0001\u0002\nA!\u00111AL\u0005\t\u001di\t&\u0012b\u0001\u0003\u0013\u0001B!a\u0001\u0018\u000e\u00119qRE#C\u0002\u0005%\u0001\u0003BA\u0002/#!q!%\u0007F\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004]UAaBJ\u0017\u000b\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u00079J\u0002B\u0004\u0016b\u0015\u0013\r!!\u0003\t\u000f\u0005eQ\tq\u0001\u0018\u001eA)\u00010!\u0015\u0017X\"9\u0011QP#A\u0004]\u0005\u0002#\u0002=\u0002RYm\u0007bBA{\u000b\u0002\u000fqS\u0005\t\u0006q\u0006Ecs\u001c\u0005\b\u0005\u001b+\u00059AL\u0015!\u0015A\u0018\u0011\u000bLr\u0011\u001d\u0019)%\u0012a\u0002/[\u0001R\u0001_A)-ODq\u0001\"\bF\u0001\b9\n\u0004E\u0003y\u0003#2Z\u000fC\u0004\u0006\u0016\u0015\u0003\u001da&\u000e\u0011\u000ba\f\tFf<\t\u000f\u00195R\tq\u0001\u0018:A)\u00010!\u0015\u0017t\"9qQM#A\u0004]u\u0002#\u0002=\u0002RY]\bb\u0002E_\u000b\u0002\u000fq\u0013\t\t\u0006q\u0006Ec3 \u0005\b\u0015k)\u00059AL#!\u0015A\u0018\u0011\u000bL\u0000\u0011\u001dYi-\u0012a\u0002/\u0013\u0002R\u0001_A)/\u0007Aq!$\"F\u0001\b9j\u0005E\u0003y\u0003#::\u0001C\u0004\u0010^\u0015\u0003\u001da&\u0015\u0011\u000ba\f\tff\u0003\t\u000fEUS\tq\u0001\u0018VA)\u00010!\u0015\u0018\u0010!91SN#A\u0004]e\u0003#\u0002=\u0002R]M\u0001bBKS\u000b\u0002\u000fqS\f\t\u0006q\u0006EssC\u0001\u000biV\u0004H.Z\u00199%&<WCJL2/_:\u001ahf\u001e\u0018|]}t3QLD/\u0017;zif%\u0018\u0018^musTLR/O;Zkf,\u00184R1sSML\\/w;zlf1\u0018H^-wsZLj//<Znf8\u0018d^\u001dx3^Lx/g<:pf?\u0011\ta\\xs\r\t(E^%tSNL9/k:Jh& \u0018\u0002^\u0015u\u0013RLG/#;*j&'\u0018\u001e^\u0005vSULU/[;\n,C\u0002\u0018l\r\u0014q\u0001V;qY\u0016\f\u0004\b\u0005\u0003\u0002\u0004]=DaBA\u0004\r\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u00079\u001a\bB\u0004\u0002v\u0019\u0013\r!!\u0003\u0011\t\u0005\rqs\u000f\u0003\b\u0003S4%\u0019AA\u0005!\u0011\t\u0019af\u001f\u0005\u000f\tudI1\u0001\u0002\nA!\u00111AL@\t\u001d\u0019\tD\u0012b\u0001\u0003\u0013\u0001B!a\u0001\u0018\u0004\u00129AQ\u0001$C\u0002\u0005%\u0001\u0003BA\u0002/\u000f#q\u0001\"?G\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004]-Ea\u0002D\u0007\r\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u00079z\tB\u0004\bB\u0019\u0013\r!!\u0003\u0011\t\u0005\rq3\u0013\u0003\b\u0011+3%\u0019AA\u0005!\u0011\t\u0019af&\u0005\u000f)%aI1\u0001\u0002\nA!\u00111ALN\t\u001dYiJ\u0012b\u0001\u0003\u0013\u0001B!a\u0001\u0018 \u00129Q\u0012\u000b$C\u0002\u0005%\u0001\u0003BA\u0002/G#qa$\nG\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004]\u001dFaBI\r\r\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u00079Z\u000bB\u0004\u0014.\u0019\u0013\r!!\u0003\u0011\t\u0005\rqs\u0016\u0003\b+C2%\u0019AA\u0005!\u0011\t\u0019af-\u0005\u000f]UfI1\u0001\u0002\n\t\u0019\u0011)M\u001c\t\u000f\u0005ea\tq\u0001\u0018:B!\u0001p_L7\u0011\u001d\tiH\u0012a\u0002/{\u0003B\u0001_>\u0018r!9\u0011Q\u001f$A\u0004]\u0005\u0007\u0003\u0002=|/kBqA!$G\u0001\b9*\r\u0005\u0003yw^e\u0004bBB#\r\u0002\u000fq\u0013\u001a\t\u0005qn<j\bC\u0004\u0005\u001e\u0019\u0003\u001da&4\u0011\ta\\x\u0013\u0011\u0005\b\u000b+1\u00059ALi!\u0011A8p&\"\t\u000f\u00195b\tq\u0001\u0018VB!\u0001p_LE\u0011\u001d9)G\u0012a\u0002/3\u0004B\u0001_>\u0018\u000e\"9\u0001R\u0018$A\u0004]u\u0007\u0003\u0002=|/#CqA#\u000eG\u0001\b9\n\u000f\u0005\u0003yw^U\u0005bBFg\r\u0002\u000fqS\u001d\t\u0005qn<J\nC\u0004\u000e\u0006\u001a\u0003\u001da&;\u0011\ta\\xS\u0014\u0005\b\u001f;2\u00059ALw!\u0011A8p&)\t\u000fEUc\tq\u0001\u0018rB!\u0001p_LS\u0011\u001d\u0019jG\u0012a\u0002/k\u0004B\u0001_>\u0018*\"9QS\u0015$A\u0004]e\b\u0003\u0002=|/[Cqa&@G\u0001\b9z0A\u0002Bc]\u0002B\u0001_>\u00182\u0006YA/\u001e9mKFB$+\u001b8h+\u0019B*\u0001'\u0004\u0019\u0012aU\u0001\u0014\u0004M\u000f1CA*\u0003'\u000b\u0019.aE\u0002T\u0007M\u001d1{A\n\u0005'\u0012\u0019Ja5\u0003\u0014\u000b\u000b'1\u000fA\u001a\u0006g\u0016\u0019\\a}\u00034\rM41WBz\u0007g\u001d\u0019xam\u0004t\u0010MB1\u000fCZ\tg$\u0019\u0014b]\u0005#\u0002=\u0002&a%\u0001c\n2\u0018ja-\u0001t\u0002M\n1/AZ\u0002g\b\u0019$a\u001d\u00024\u0006M\u00181gA:\u0004g\u000f\u0019@a\r\u0003t\tM&1\u001f\u0002B!a\u0001\u0019\u000e\u00119\u0011qA$C\u0002\u0005%\u0001\u0003BA\u00021#!q!!\u001eH\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004aUAaBAu\u000f\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007AJ\u0002B\u0004\u0003~\u001d\u0013\r!!\u0003\u0011\t\u0005\r\u0001T\u0004\u0003\b\u0007c9%\u0019AA\u0005!\u0011\t\u0019\u0001'\t\u0005\u000f\u0011\u0015qI1\u0001\u0002\nA!\u00111\u0001M\u0013\t\u001d!Ip\u0012b\u0001\u0003\u0013\u0001B!a\u0001\u0019*\u00119aQB$C\u0002\u0005%\u0001\u0003BA\u00021[!qa\"\u0011H\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004aEBa\u0002EK\u000f\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007A*\u0004B\u0004\u000b\n\u001d\u0013\r!!\u0003\u0011\t\u0005\r\u0001\u0014\b\u0003\b\u0017;;%\u0019AA\u0005!\u0011\t\u0019\u0001'\u0010\u0005\u000f5EsI1\u0001\u0002\nA!\u00111\u0001M!\t\u001dy)c\u0012b\u0001\u0003\u0013\u0001B!a\u0001\u0019F\u00119\u0011\u0013D$C\u0002\u0005%\u0001\u0003BA\u00021\u0013\"qa%\fH\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004a5CaBK1\u000f\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007A\n\u0006B\u0004\u00186\u001e\u0013\r!!\u0003\t\u000f\u0005eq\tq\u0001\u0019VA)\u00010!\n\u0019\f!9\u0011QP$A\u0004ae\u0003#\u0002=\u0002&a=\u0001bBA{\u000f\u0002\u000f\u0001T\f\t\u0006q\u0006\u0015\u00024\u0003\u0005\b\u0005\u001b;\u00059\u0001M1!\u0015A\u0018Q\u0005M\f\u0011\u001d\u0019)e\u0012a\u00021K\u0002R\u0001_A\u001317Aq\u0001\"\bH\u0001\bAJ\u0007E\u0003y\u0003KAz\u0002C\u0004\u0006\u0016\u001d\u0003\u001d\u0001'\u001c\u0011\u000ba\f)\u0003g\t\t\u000f\u00195r\tq\u0001\u0019rA)\u00010!\n\u0019(!9qQM$A\u0004aU\u0004#\u0002=\u0002&a-\u0002b\u0002E_\u000f\u0002\u000f\u0001\u0014\u0010\t\u0006q\u0006\u0015\u0002t\u0006\u0005\b\u0015k9\u00059\u0001M?!\u0015A\u0018Q\u0005M\u001a\u0011\u001dYim\u0012a\u00021\u0003\u0003R\u0001_A\u00131oAq!$\"H\u0001\bA*\tE\u0003y\u0003KAZ\u0004C\u0004\u0010^\u001d\u0003\u001d\u0001'#\u0011\u000ba\f)\u0003g\u0010\t\u000fEUs\tq\u0001\u0019\u000eB)\u00010!\n\u0019D!91SN$A\u0004aE\u0005#\u0002=\u0002&a\u001d\u0003bBKS\u000f\u0002\u000f\u0001T\u0013\t\u0006q\u0006\u0015\u00024\n\u0005\b/{<\u00059\u0001MM!\u0015A\u0018Q\u0005M(\u0003)!X\u000f\u001d7fca\u0012fnZ\u000b'1?C:\u000bg+\u00190bM\u0006t\u0017M^1\u007fC\u001a\rg2\u0019Lb=\u00074\u001bMl17Dz\u000eg9\u0019hb-HC\nMQ1[D\n\u0010'>\u0019zbu\u0018\u0014AM\u00033\u0013Ij!'\u0005\u001a\u0016ee\u0011TDM\u00113KIJ#'\f\u001a2A)\u00010a\u000f\u0019$B9#m&\u001b\u0019&b%\u0006T\u0016MY1kCJ\f'0\u0019Bb\u0015\u0007\u0014\u001aMg1#D*\u000e'7\u0019^b\u0005\bT\u001dMu!\u0011\t\u0019\u0001g*\u0005\u000f\u0005\u001d\u0001J1\u0001\u0002\nA!\u00111\u0001MV\t\u001d\t)\b\u0013b\u0001\u0003\u0013\u0001B!a\u0001\u00190\u00129\u0011\u0011\u001e%C\u0002\u0005%\u0001\u0003BA\u00021g#qA! I\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004a]FaBB\u0019\u0011\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007AZ\fB\u0004\u0005\u0006!\u0013\r!!\u0003\u0011\t\u0005\r\u0001t\u0018\u0003\b\tsD%\u0019AA\u0005!\u0011\t\u0019\u0001g1\u0005\u000f\u00195\u0001J1\u0001\u0002\nA!\u00111\u0001Md\t\u001d9\t\u0005\u0013b\u0001\u0003\u0013\u0001B!a\u0001\u0019L\u00129\u0001R\u0013%C\u0002\u0005%\u0001\u0003BA\u00021\u001f$qA#\u0003I\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004aMGaBFO\u0011\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007A:\u000eB\u0004\u000eR!\u0013\r!!\u0003\u0011\t\u0005\r\u00014\u001c\u0003\b\u001fKA%\u0019AA\u0005!\u0011\t\u0019\u0001g8\u0005\u000fEe\u0001J1\u0001\u0002\nA!\u00111\u0001Mr\t\u001d\u0019j\u0003\u0013b\u0001\u0003\u0013\u0001B!a\u0001\u0019h\u00129Q\u0013\r%C\u0002\u0005%\u0001\u0003BA\u00021W$qa&.I\u0005\u0004\tI\u0001C\u0004\u0002\u001a!\u0003\u001d\u0001g<\u0011\u000ba\fY\u0004'*\t\u000f\u0005u\u0004\nq\u0001\u0019tB)\u00010a\u000f\u0019*\"9\u0011Q\u001f%A\u0004a]\b#\u0002=\u0002<a5\u0006b\u0002BG\u0011\u0002\u000f\u00014 \t\u0006q\u0006m\u0002\u0014\u0017\u0005\b\u0007\u000bB\u00059\u0001M\u0000!\u0015A\u00181\bM[\u0011\u001d!i\u0002\u0013a\u00023\u0007\u0001R\u0001_A\u001e1sCq!\"\u0006I\u0001\bI:\u0001E\u0003y\u0003wAj\fC\u0004\u0007.!\u0003\u001d!g\u0003\u0011\u000ba\fY\u0004'1\t\u000f\u001d\u0015\u0004\nq\u0001\u001a\u0010A)\u00010a\u000f\u0019F\"9\u0001R\u0018%A\u0004eM\u0001#\u0002=\u0002<a%\u0007b\u0002F\u001b\u0011\u0002\u000f\u0011t\u0003\t\u0006q\u0006m\u0002T\u001a\u0005\b\u0017\u001bD\u00059AM\u000e!\u0015A\u00181\bMi\u0011\u001di)\t\u0013a\u00023?\u0001R\u0001_A\u001e1+Dqa$\u0018I\u0001\bI\u001a\u0003E\u0003y\u0003wAJ\u000eC\u0004\u0012V!\u0003\u001d!g\n\u0011\u000ba\fY\u0004'8\t\u000fM5\u0004\nq\u0001\u001a,A)\u00010a\u000f\u0019b\"9QS\u0015%A\u0004e=\u0002#\u0002=\u0002<a\u0015\bbBL\u007f\u0011\u0002\u000f\u00114\u0007\t\u0006q\u0006m\u0002\u0014^\u0001\u0010iV\u0004H.Z\u00199'\u0016l\u0017N]5oOV1\u0013\u0014HM!3\u000bJJ%'\u0014\u001aReU\u0013\u0014LM/3CJ*''\u001b\u001aneE\u0014TOM=3{J\n)'\"\u0015Mem\u0012tQMF3\u001fK\u001a*g&\u001a\u001cf}\u00154UMT3WKz+g-\u001a8fm\u0016tXMb3\u000fLZ\rE\u0003y\u0003#Jj\u0004E\u0014c/SJz$g\u0011\u001aHe-\u0013tJM*3/JZ&g\u0018\u001ade\u001d\u00144NM83gJ:(g\u001f\u001a\u0000e\r\u0005\u0003BA\u00023\u0003\"q!a\u0002J\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004e\u0015CaBA;\u0013\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007IJ\u0005B\u0004\u0002j&\u0013\r!!\u0003\u0011\t\u0005\r\u0011T\n\u0003\b\u0005{J%\u0019AA\u0005!\u0011\t\u0019!'\u0015\u0005\u000f\rE\u0012J1\u0001\u0002\nA!\u00111AM+\t\u001d!)!\u0013b\u0001\u0003\u0013\u0001B!a\u0001\u001aZ\u00119A\u0011`%C\u0002\u0005%\u0001\u0003BA\u00023;\"qA\"\u0004J\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004e\u0005DaBD!\u0013\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007I*\u0007B\u0004\t\u0016&\u0013\r!!\u0003\u0011\t\u0005\r\u0011\u0014\u000e\u0003\b\u0015\u0013I%\u0019AA\u0005!\u0011\t\u0019!'\u001c\u0005\u000f-u\u0015J1\u0001\u0002\nA!\u00111AM9\t\u001di\t&\u0013b\u0001\u0003\u0013\u0001B!a\u0001\u001av\u00119qRE%C\u0002\u0005%\u0001\u0003BA\u00023s\"q!%\u0007J\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004euDaBJ\u0017\u0013\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007I\n\tB\u0004\u0016b%\u0013\r!!\u0003\u0011\t\u0005\r\u0011T\u0011\u0003\b/kK%\u0019AA\u0005\u0011\u001d\tI\"\u0013a\u00023\u0013\u0003R\u0001_A)3\u007fAq!! J\u0001\bIj\tE\u0003y\u0003#J\u001a\u0005C\u0004\u0002v&\u0003\u001d!'%\u0011\u000ba\f\t&g\u0012\t\u000f\t5\u0015\nq\u0001\u001a\u0016B)\u00010!\u0015\u001aL!91QI%A\u0004ee\u0005#\u0002=\u0002Re=\u0003b\u0002C\u000f\u0013\u0002\u000f\u0011T\u0014\t\u0006q\u0006E\u00134\u000b\u0005\b\u000b+I\u00059AMQ!\u0015A\u0018\u0011KM,\u0011\u001d1i#\u0013a\u00023K\u0003R\u0001_A)37Bqa\"\u001aJ\u0001\bIJ\u000bE\u0003y\u0003#Jz\u0006C\u0004\t>&\u0003\u001d!',\u0011\u000ba\f\t&g\u0019\t\u000f)U\u0012\nq\u0001\u001a2B)\u00010!\u0015\u001ah!91RZ%A\u0004eU\u0006#\u0002=\u0002Re-\u0004bBGC\u0013\u0002\u000f\u0011\u0014\u0018\t\u0006q\u0006E\u0013t\u000e\u0005\b\u001f;J\u00059AM_!\u0015A\u0018\u0011KM:\u0011\u001d\t*&\u0013a\u00023\u0003\u0004R\u0001_A)3oBqa%\u001cJ\u0001\bI*\rE\u0003y\u0003#JZ\bC\u0004\u0016&&\u0003\u001d!'3\u0011\u000ba\f\t&g \t\u000f]u\u0018\nq\u0001\u001aNB)\u00010!\u0015\u001a\u0004\u0006QA/\u001e9mKFJ$+[4\u0016QeM\u0017t\\Mr3OLZ/g<\u001atf]\u00184`M\u00005\u0007Q:Ag\u0003\u001b\u0010iM!t\u0003N\u000e5?Q\u001aCg\n\u0015QeU'4\u0006N\u00185gQ:Dg\u000f\u001b@i\r#t\tN&5\u001fR\u001aFg\u0016\u001b\\i}#4\rN45WRzGg\u001d\u0011\ta\\\u0018t\u001b\t*Efe\u0017T\\Mq3KLJ/'<\u001arfU\u0018\u0014`M\u007f5\u0003Q*A'\u0003\u001b\u000eiE!T\u0003N\r5;Q\nC'\n\n\u0007em7MA\u0004UkBdW-M\u001d\u0011\t\u0005\r\u0011t\u001c\u0003\b\u0003\u000fQ%\u0019AA\u0005!\u0011\t\u0019!g9\u0005\u000f\u0005U$J1\u0001\u0002\nA!\u00111AMt\t\u001d\tIO\u0013b\u0001\u0003\u0013\u0001B!a\u0001\u001al\u00129!Q\u0010&C\u0002\u0005%\u0001\u0003BA\u00023_$qa!\rK\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004eMHa\u0002C\u0003\u0015\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007I:\u0010B\u0004\u0005z*\u0013\r!!\u0003\u0011\t\u0005\r\u00114 \u0003\b\r\u001bQ%\u0019AA\u0005!\u0011\t\u0019!g@\u0005\u000f\u001d\u0005#J1\u0001\u0002\nA!\u00111\u0001N\u0002\t\u001dA)J\u0013b\u0001\u0003\u0013\u0001B!a\u0001\u001b\b\u00119!\u0012\u0002&C\u0002\u0005%\u0001\u0003BA\u00025\u0017!qa#(K\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004i=AaBG)\u0015\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Q\u001a\u0002B\u0004\u0010&)\u0013\r!!\u0003\u0011\t\u0005\r!t\u0003\u0003\b#3Q%\u0019AA\u0005!\u0011\t\u0019Ag\u0007\u0005\u000fM5\"J1\u0001\u0002\nA!\u00111\u0001N\u0010\t\u001d)\nG\u0013b\u0001\u0003\u0013\u0001B!a\u0001\u001b$\u00119qS\u0017&C\u0002\u0005%\u0001\u0003BA\u00025O!qA'\u000bK\u0005\u0004\tIAA\u0002BcaBq!!\u0007K\u0001\bQj\u0003\u0005\u0003ywfu\u0007bBA?\u0015\u0002\u000f!\u0014\u0007\t\u0005qnL\n\u000fC\u0004\u0002v*\u0003\u001dA'\u000e\u0011\ta\\\u0018T\u001d\u0005\b\u0005\u001bS\u00059\u0001N\u001d!\u0011A80';\t\u000f\r\u0015#\nq\u0001\u001b>A!\u0001p_Mw\u0011\u001d!iB\u0013a\u00025\u0003\u0002B\u0001_>\u001ar\"9QQ\u0003&A\u0004i\u0015\u0003\u0003\u0002=|3kDqA\"\fK\u0001\bQJ\u0005\u0005\u0003ywfe\bbBD3\u0015\u0002\u000f!T\n\t\u0005qnLj\u0010C\u0004\t>*\u0003\u001dA'\u0015\u0011\ta\\(\u0014\u0001\u0005\b\u0015kQ\u00059\u0001N+!\u0011A8P'\u0002\t\u000f-5'\nq\u0001\u001bZA!\u0001p\u001fN\u0005\u0011\u001di)I\u0013a\u00025;\u0002B\u0001_>\u001b\u000e!9qR\f&A\u0004i\u0005\u0004\u0003\u0002=|5#Aq!%\u0016K\u0001\bQ*\u0007\u0005\u0003ywjU\u0001bBJ7\u0015\u0002\u000f!\u0014\u000e\t\u0005qnTJ\u0002C\u0004\u0016&*\u0003\u001dA'\u001c\u0011\ta\\(T\u0004\u0005\b/{T\u00059\u0001N9!\u0011A8P'\t\t\u000fiU$\nq\u0001\u001bx\u0005\u0019\u0011)\r\u001d\u0011\ta\\(TE\u0001\fiV\u0004H.Z\u0019:%&tw-\u0006\u0015\u001b~i\u0015%\u0014\u0012NG5#S*J''\u001b\u001ej\u0005&T\u0015NU5[S\nL'.\u001b:ju&\u0014\u0019Nc5\u0013Tj\r\u0006\u0015\u001b\u0000i='4\u001bNl57TzNg9\u001bhj-(t\u001eNz5oTZPg@\u001c\u0004m\u001d14BN\b7'Y:\u0002E\u0003y\u0003KQ\n\tE\u0015c33T\u001aIg\"\u001b\fj=%4\u0013NL57SzJg)\u001b(j-&t\u0016NZ5oSZLg0\u001bDj\u001d'4\u001a\t\u0005\u0003\u0007Q*\tB\u0004\u0002\b-\u0013\r!!\u0003\u0011\t\u0005\r!\u0014\u0012\u0003\b\u0003kZ%\u0019AA\u0005!\u0011\t\u0019A'$\u0005\u000f\u0005%8J1\u0001\u0002\nA!\u00111\u0001NI\t\u001d\u0011ih\u0013b\u0001\u0003\u0013\u0001B!a\u0001\u001b\u0016\u001291\u0011G&C\u0002\u0005%\u0001\u0003BA\u000253#q\u0001\"\u0002L\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004iuEa\u0002C}\u0017\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Q\n\u000bB\u0004\u0007\u000e-\u0013\r!!\u0003\u0011\t\u0005\r!T\u0015\u0003\b\u000f\u0003Z%\u0019AA\u0005!\u0011\t\u0019A'+\u0005\u000f!U5J1\u0001\u0002\nA!\u00111\u0001NW\t\u001dQIa\u0013b\u0001\u0003\u0013\u0001B!a\u0001\u001b2\u001291RT&C\u0002\u0005%\u0001\u0003BA\u00025k#q!$\u0015L\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004ieFaBH\u0013\u0017\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Qj\fB\u0004\u0012\u001a-\u0013\r!!\u0003\u0011\t\u0005\r!\u0014\u0019\u0003\b'[Y%\u0019AA\u0005!\u0011\t\u0019A'2\u0005\u000fU\u00054J1\u0001\u0002\nA!\u00111\u0001Ne\t\u001d9*l\u0013b\u0001\u0003\u0013\u0001B!a\u0001\u001bN\u00129!\u0014F&C\u0002\u0005%\u0001bBA\r\u0017\u0002\u000f!\u0014\u001b\t\u0006q\u0006\u0015\"4\u0011\u0005\b\u0003{Z\u00059\u0001Nk!\u0015A\u0018Q\u0005ND\u0011\u001d\t)p\u0013a\u000253\u0004R\u0001_A\u00135\u0017CqA!$L\u0001\bQj\u000eE\u0003y\u0003KQz\tC\u0004\u0004F-\u0003\u001dA'9\u0011\u000ba\f)Cg%\t\u000f\u0011u1\nq\u0001\u001bfB)\u00010!\n\u001b\u0018\"9QQC&A\u0004i%\b#\u0002=\u0002&im\u0005b\u0002D\u0017\u0017\u0002\u000f!T\u001e\t\u0006q\u0006\u0015\"t\u0014\u0005\b\u000fKZ\u00059\u0001Ny!\u0015A\u0018Q\u0005NR\u0011\u001dAil\u0013a\u00025k\u0004R\u0001_A\u00135OCqA#\u000eL\u0001\bQJ\u0010E\u0003y\u0003KQZ\u000bC\u0004\fN.\u0003\u001dA'@\u0011\u000ba\f)Cg,\t\u000f5\u00155\nq\u0001\u001c\u0002A)\u00010!\n\u001b4\"9qRL&A\u0004m\u0015\u0001#\u0002=\u0002&i]\u0006bBI+\u0017\u0002\u000f1\u0014\u0002\t\u0006q\u0006\u0015\"4\u0018\u0005\b'[Z\u00059AN\u0007!\u0015A\u0018Q\u0005N`\u0011\u001d)*k\u0013a\u00027#\u0001R\u0001_A\u00135\u0007Dqa&@L\u0001\bY*\u0002E\u0003y\u0003KQ:\rC\u0004\u001bv-\u0003\u001da'\u0007\u0011\u000ba\f)Cg3\u0002\u0015Q,\b\u000f\\32sIsw-\u0006\u0015\u001c m\u001d24FN\u00187gY:dg\u000f\u001c@m\r3tIN&7\u001fZ\u001afg\u0016\u001c\\m}34MN47WZz\u0007\u0006\u0015\u001c\"mE4TON=7{Z\ni'\"\u001c\nn55\u0014SNK73[jj')\u001c&n%6TVNY7k[J\fE\u0003y\u0003wY\u001a\u0003E\u0015c33\\*c'\u000b\u001c.mE2TGN\u001d7{Y\ne'\u0012\u001cJm53\u0014KN+73Zjf'\u0019\u001cfm%4T\u000e\t\u0005\u0003\u0007Y:\u0003B\u0004\u0002\b1\u0013\r!!\u0003\u0011\t\u0005\r14\u0006\u0003\b\u0003kb%\u0019AA\u0005!\u0011\t\u0019ag\f\u0005\u000f\u0005%HJ1\u0001\u0002\nA!\u00111AN\u001a\t\u001d\u0011i\b\u0014b\u0001\u0003\u0013\u0001B!a\u0001\u001c8\u001191\u0011\u0007'C\u0002\u0005%\u0001\u0003BA\u00027w!q\u0001\"\u0002M\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004m}Ba\u0002C}\u0019\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Y\u001a\u0005B\u0004\u0007\u000e1\u0013\r!!\u0003\u0011\t\u0005\r1t\t\u0003\b\u000f\u0003b%\u0019AA\u0005!\u0011\t\u0019ag\u0013\u0005\u000f!UEJ1\u0001\u0002\nA!\u00111AN(\t\u001dQI\u0001\u0014b\u0001\u0003\u0013\u0001B!a\u0001\u001cT\u001191R\u0014'C\u0002\u0005%\u0001\u0003BA\u00027/\"q!$\u0015M\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004mmCaBH\u0013\u0019\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Yz\u0006B\u0004\u0012\u001a1\u0013\r!!\u0003\u0011\t\u0005\r14\r\u0003\b'[a%\u0019AA\u0005!\u0011\t\u0019ag\u001a\u0005\u000fU\u0005DJ1\u0001\u0002\nA!\u00111AN6\t\u001d9*\f\u0014b\u0001\u0003\u0013\u0001B!a\u0001\u001cp\u00119!\u0014\u0006'C\u0002\u0005%\u0001bBA\r\u0019\u0002\u000f14\u000f\t\u0006q\u0006m2T\u0005\u0005\b\u0003{b\u00059AN<!\u0015A\u00181HN\u0015\u0011\u001d\t)\u0010\u0014a\u00027w\u0002R\u0001_A\u001e7[AqA!$M\u0001\bYz\bE\u0003y\u0003wY\n\u0004C\u0004\u0004F1\u0003\u001dag!\u0011\u000ba\fYd'\u000e\t\u000f\u0011uA\nq\u0001\u001c\bB)\u00010a\u000f\u001c:!9QQ\u0003'A\u0004m-\u0005#\u0002=\u0002<mu\u0002b\u0002D\u0017\u0019\u0002\u000f1t\u0012\t\u0006q\u0006m2\u0014\t\u0005\b\u000fKb\u00059ANJ!\u0015A\u00181HN#\u0011\u001dAi\f\u0014a\u00027/\u0003R\u0001_A\u001e7\u0013BqA#\u000eM\u0001\bYZ\nE\u0003y\u0003wYj\u0005C\u0004\fN2\u0003\u001dag(\u0011\u000ba\fYd'\u0015\t\u000f5\u0015E\nq\u0001\u001c$B)\u00010a\u000f\u001cV!9qR\f'A\u0004m\u001d\u0006#\u0002=\u0002<me\u0003bBI+\u0019\u0002\u000f14\u0016\t\u0006q\u0006m2T\f\u0005\b'[b\u00059ANX!\u0015A\u00181HN1\u0011\u001d)*\u000b\u0014a\u00027g\u0003R\u0001_A\u001e7KBqa&@M\u0001\bY:\fE\u0003y\u0003wYJ\u0007C\u0004\u001bv1\u0003\u001dag/\u0011\u000ba\fYd'\u001c\u0002\u001fQ,\b\u000f\\32sM+W.\u001b:j]\u001e,\u0002f'1\u001cJn57\u0014[Nk73\\jn'9\u001cfn%8T^Ny7k\\Jp'@\u001d\u0002q\u0015A\u0014\u0002O\u00079#!\u0002fg1\u001d\u0014q]A4\u0004O\u00109Ga:\u0003h\u000b\u001d0qMBt\u0007O\u001e9\u007fa\u001a\u0005h\u0012\u001dLq=C4\u000bO,97\u0002R\u0001_A)7\u000b\u0004\u0012FYMm7\u000f\\Zmg4\u001cTn]74\\Np7G\\:og;\u001cpnM8t_N~7\u007fd\u001a\u0001h\u0002\u001d\fq=\u0001\u0003BA\u00027\u0013$q!a\u0002N\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004m5GaBA;\u001b\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Y\n\u000eB\u0004\u0002j6\u0013\r!!\u0003\u0011\t\u0005\r1T\u001b\u0003\b\u0005{j%\u0019AA\u0005!\u0011\t\u0019a'7\u0005\u000f\rERJ1\u0001\u0002\nA!\u00111ANo\t\u001d!)!\u0014b\u0001\u0003\u0013\u0001B!a\u0001\u001cb\u00129A\u0011`'C\u0002\u0005%\u0001\u0003BA\u00027K$qA\"\u0004N\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004m%HaBD!\u001b\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007Yj\u000fB\u0004\t\u00166\u0013\r!!\u0003\u0011\t\u0005\r1\u0014\u001f\u0003\b\u0015\u0013i%\u0019AA\u0005!\u0011\t\u0019a'>\u0005\u000f-uUJ1\u0001\u0002\nA!\u00111AN}\t\u001di\t&\u0014b\u0001\u0003\u0013\u0001B!a\u0001\u001c~\u00129qRE'C\u0002\u0005%\u0001\u0003BA\u00029\u0003!q!%\u0007N\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004q\u0015AaBJ\u0017\u001b\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007aJ\u0001B\u0004\u0016b5\u0013\r!!\u0003\u0011\t\u0005\rAT\u0002\u0003\b/kk%\u0019AA\u0005!\u0011\t\u0019\u0001(\u0005\u0005\u000fi%RJ1\u0001\u0002\n!9\u0011\u0011D'A\u0004qU\u0001#\u0002=\u0002Rm\u001d\u0007bBA?\u001b\u0002\u000fA\u0014\u0004\t\u0006q\u0006E34\u001a\u0005\b\u0003kl\u00059\u0001O\u000f!\u0015A\u0018\u0011KNh\u0011\u001d\u0011i)\u0014a\u00029C\u0001R\u0001_A)7'Dqa!\u0012N\u0001\ba*\u0003E\u0003y\u0003#Z:\u000eC\u0004\u0005\u001e5\u0003\u001d\u0001(\u000b\u0011\u000ba\f\tfg7\t\u000f\u0015UQ\nq\u0001\u001d.A)\u00010!\u0015\u001c`\"9aQF'A\u0004qE\u0002#\u0002=\u0002Rm\r\bbBD3\u001b\u0002\u000fAT\u0007\t\u0006q\u0006E3t\u001d\u0005\b\u0011{k\u00059\u0001O\u001d!\u0015A\u0018\u0011KNv\u0011\u001dQ)$\u0014a\u00029{\u0001R\u0001_A)7_Dqa#4N\u0001\ba\n\u0005E\u0003y\u0003#Z\u001a\u0010C\u0004\u000e\u00066\u0003\u001d\u0001(\u0012\u0011\u000ba\f\tfg>\t\u000f=uS\nq\u0001\u001dJA)\u00010!\u0015\u001c|\"9\u0011SK'A\u0004q5\u0003#\u0002=\u0002Rm}\bbBJ7\u001b\u0002\u000fA\u0014\u000b\t\u0006q\u0006EC4\u0001\u0005\b+Kk\u00059\u0001O+!\u0015A\u0018\u0011\u000bO\u0004\u0011\u001d9j0\u0014a\u000293\u0002R\u0001_A)9\u0017AqA'\u001eN\u0001\baj\u0006E\u0003y\u0003#bz!\u0001\u0006ukBdWM\r\u0019SS\u001e,\"\u0006h\u0019\u001dpqMDt\u000fO>9\u007fb\u001a\th\"\u001d\fr=E4\u0013OL97cz\nh)\u001d(r-Ft\u0016OZ9ocZ\f\u0006\u0016\u001dfq}F4\u0019Od9\u0017dz\rh5\u001dXrmGt\u001cOr9OdZ\u000fh<\u001dtr]H4 O\u0000;\u0007i:!h\u0003\u0011\ta\\Ht\r\t,Er%DT\u000eO99kbJ\b( \u001d\u0002r\u0015E\u0014\u0012OG9#c*\n('\u001d\u001er\u0005FT\u0015OU9[c\n\f(.\u001d:&\u0019A4N2\u0003\u000fQ+\b\u000f\\33aA!\u00111\u0001O8\t\u001d\t9A\u0014b\u0001\u0003\u0013\u0001B!a\u0001\u001dt\u00119\u0011Q\u000f(C\u0002\u0005%\u0001\u0003BA\u00029o\"q!!;O\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004qmDa\u0002B?\u001d\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007az\bB\u0004\u000429\u0013\r!!\u0003\u0011\t\u0005\rA4\u0011\u0003\b\t\u000bq%\u0019AA\u0005!\u0011\t\u0019\u0001h\"\u0005\u000f\u0011ehJ1\u0001\u0002\nA!\u00111\u0001OF\t\u001d1iA\u0014b\u0001\u0003\u0013\u0001B!a\u0001\u001d\u0010\u00129q\u0011\t(C\u0002\u0005%\u0001\u0003BA\u00029'#q\u0001#&O\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004q]Ea\u0002F\u0005\u001d\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007aZ\nB\u0004\f\u001e:\u0013\r!!\u0003\u0011\t\u0005\rAt\u0014\u0003\b\u001b#r%\u0019AA\u0005!\u0011\t\u0019\u0001h)\u0005\u000f=\u0015bJ1\u0001\u0002\nA!\u00111\u0001OT\t\u001d\tJB\u0014b\u0001\u0003\u0013\u0001B!a\u0001\u001d,\u001291S\u0006(C\u0002\u0005%\u0001\u0003BA\u00029_#q!&\u0019O\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004qMFaBL[\u001d\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007a:\fB\u0004\u001b*9\u0013\r!!\u0003\u0011\t\u0005\rA4\u0018\u0003\b9{s%\u0019AA\u0005\u0005\r\t\u0015'\u000f\u0005\b\u00033q\u00059\u0001Oa!\u0011A8\u0010(\u001c\t\u000f\u0005ud\nq\u0001\u001dFB!\u0001p\u001fO9\u0011\u001d\t)P\u0014a\u00029\u0013\u0004B\u0001_>\u001dv!9!Q\u0012(A\u0004q5\u0007\u0003\u0002=|9sBqa!\u0012O\u0001\ba\n\u000e\u0005\u0003ywru\u0004b\u0002C\u000f\u001d\u0002\u000fAT\u001b\t\u0005qnd\n\tC\u0004\u0006\u00169\u0003\u001d\u0001(7\u0011\ta\\HT\u0011\u0005\b\r[q\u00059\u0001Oo!\u0011A8\u0010(#\t\u000f\u001d\u0015d\nq\u0001\u001dbB!\u0001p\u001fOG\u0011\u001dAiL\u0014a\u00029K\u0004B\u0001_>\u001d\u0012\"9!R\u0007(A\u0004q%\b\u0003\u0002=|9+Cqa#4O\u0001\baj\u000f\u0005\u0003ywre\u0005bBGC\u001d\u0002\u000fA\u0014\u001f\t\u0005qndj\nC\u0004\u0010^9\u0003\u001d\u0001(>\u0011\ta\\H\u0014\u0015\u0005\b#+r\u00059\u0001O}!\u0011A8\u0010(*\t\u000fM5d\nq\u0001\u001d~B!\u0001p\u001fOU\u0011\u001d)*K\u0014a\u0002;\u0003\u0001B\u0001_>\u001d.\"9qS (A\u0004u\u0015\u0001\u0003\u0002=|9cCqA'\u001eO\u0001\biJ\u0001\u0005\u0003ywrU\u0006bBO\u0007\u001d\u0002\u000fQtB\u0001\u0004\u0003FJ\u0004\u0003\u0002=|9s\u000b1\u0002^;qY\u0016\u0014\u0004GU5oOVQSTCO\u000f;Ci*#(\u000b\u001e.uERTGO\u001d;{i\n%(\u0012\u001eJu5S\u0014KO+;3jj&(\u0019\u001efu%DCKO\f;Wjz'h\u001d\u001exumTtPOB;\u000fkZ)h$\u001e\u0014v]U4TOP;Gk:+h+\u001e0vMVt\u0017\t\u0006q\u0006\u0015R\u0014\u0004\t,Er%T4DO\u0010;Gi:#h\u000b\u001e0uMRtGO\u001e;\u007fi\u001a%h\u0012\u001eLu=S4KO,;7jz&h\u0019\u001ehA!\u00111AO\u000f\t\u001d\t9a\u0014b\u0001\u0003\u0013\u0001B!a\u0001\u001e\"\u00119\u0011QO(C\u0002\u0005%\u0001\u0003BA\u0002;K!q!!;P\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004u%Ba\u0002B?\u001f\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007ij\u0003B\u0004\u00042=\u0013\r!!\u0003\u0011\t\u0005\rQ\u0014\u0007\u0003\b\t\u000by%\u0019AA\u0005!\u0011\t\u0019!(\u000e\u0005\u000f\u0011exJ1\u0001\u0002\nA!\u00111AO\u001d\t\u001d1ia\u0014b\u0001\u0003\u0013\u0001B!a\u0001\u001e>\u00119q\u0011I(C\u0002\u0005%\u0001\u0003BA\u0002;\u0003\"q\u0001#&P\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004u\u0015Ca\u0002F\u0005\u001f\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007iJ\u0005B\u0004\f\u001e>\u0013\r!!\u0003\u0011\t\u0005\rQT\n\u0003\b\u001b#z%\u0019AA\u0005!\u0011\t\u0019!(\u0015\u0005\u000f=\u0015rJ1\u0001\u0002\nA!\u00111AO+\t\u001d\tJb\u0014b\u0001\u0003\u0013\u0001B!a\u0001\u001eZ\u001191SF(C\u0002\u0005%\u0001\u0003BA\u0002;;\"q!&\u0019P\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004u\u0005DaBL[\u001f\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007i*\u0007B\u0004\u001b*=\u0013\r!!\u0003\u0011\t\u0005\rQ\u0014\u000e\u0003\b9{{%\u0019AA\u0005\u0011\u001d\tIb\u0014a\u0002;[\u0002R\u0001_A\u0013;7Aq!! P\u0001\bi\n\bE\u0003y\u0003Kiz\u0002C\u0004\u0002v>\u0003\u001d!(\u001e\u0011\u000ba\f)#h\t\t\u000f\t5u\nq\u0001\u001ezA)\u00010!\n\u001e(!91QI(A\u0004uu\u0004#\u0002=\u0002&u-\u0002b\u0002C\u000f\u001f\u0002\u000fQ\u0014\u0011\t\u0006q\u0006\u0015Rt\u0006\u0005\b\u000b+y\u00059AOC!\u0015A\u0018QEO\u001a\u0011\u001d1ic\u0014a\u0002;\u0013\u0003R\u0001_A\u0013;oAqa\"\u001aP\u0001\bij\tE\u0003y\u0003KiZ\u0004C\u0004\t>>\u0003\u001d!(%\u0011\u000ba\f)#h\u0010\t\u000f)Ur\nq\u0001\u001e\u0016B)\u00010!\n\u001eD!91RZ(A\u0004ue\u0005#\u0002=\u0002&u\u001d\u0003bBGC\u001f\u0002\u000fQT\u0014\t\u0006q\u0006\u0015R4\n\u0005\b\u001f;z\u00059AOQ!\u0015A\u0018QEO(\u0011\u001d\t*f\u0014a\u0002;K\u0003R\u0001_A\u0013;'Bqa%\u001cP\u0001\biJ\u000bE\u0003y\u0003Ki:\u0006C\u0004\u0016&>\u0003\u001d!(,\u0011\u000ba\f)#h\u0017\t\u000f]ux\nq\u0001\u001e2B)\u00010!\n\u001e`!9!TO(A\u0004uU\u0006#\u0002=\u0002&u\r\u0004bBO\u0007\u001f\u0002\u000fQ\u0014\u0018\t\u0006q\u0006\u0015RtM\u0001\u000biV\u0004H.\u001a\u001a1%:<WCKO`;\u000flZ-h4\u001eTv]W4\\Op;Gl:/h;\u001epvMXt_O~;\u007ft\u001aAh\u0002\u001f\fy=a4\u0003\u000b+;\u0003t*B(\u0007\u001f\u001ey\u0005bT\u0005P\u0015=[q\nD(\u000e\u001f:yub\u0014\tP#=\u0013rjE(\u0015\u001fVyecT\fP1!\u0015A\u00181HOb!-\u0012G\u0014NOc;\u0013lj-(5\u001eVveWT\\Oq;KlJ/(<\u001ervUX\u0014`O\u007f=\u0003q*A(\u0003\u001f\u000eyE\u0001\u0003BA\u0002;\u000f$q!a\u0002Q\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004u-GaBA;!\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007iz\rB\u0004\u0002jB\u0013\r!!\u0003\u0011\t\u0005\rQ4\u001b\u0003\b\u0005{\u0002&\u0019AA\u0005!\u0011\t\u0019!h6\u0005\u000f\rE\u0002K1\u0001\u0002\nA!\u00111AOn\t\u001d!)\u0001\u0015b\u0001\u0003\u0013\u0001B!a\u0001\u001e`\u00129A\u0011 )C\u0002\u0005%\u0001\u0003BA\u0002;G$qA\"\u0004Q\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004u\u001dHaBD!!\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007iZ\u000fB\u0004\t\u0016B\u0013\r!!\u0003\u0011\t\u0005\rQt\u001e\u0003\b\u0015\u0013\u0001&\u0019AA\u0005!\u0011\t\u0019!h=\u0005\u000f-u\u0005K1\u0001\u0002\nA!\u00111AO|\t\u001di\t\u0006\u0015b\u0001\u0003\u0013\u0001B!a\u0001\u001e|\u00129qR\u0005)C\u0002\u0005%\u0001\u0003BA\u0002;\u007f$q!%\u0007Q\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004y\rAaBJ\u0017!\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007q:\u0001B\u0004\u0016bA\u0013\r!!\u0003\u0011\t\u0005\ra4\u0002\u0003\b/k\u0003&\u0019AA\u0005!\u0011\t\u0019Ah\u0004\u0005\u000fi%\u0002K1\u0001\u0002\nA!\u00111\u0001P\n\t\u001daj\f\u0015b\u0001\u0003\u0013Aq!!\u0007Q\u0001\bq:\u0002E\u0003y\u0003wi*\rC\u0004\u0002~A\u0003\u001dAh\u0007\u0011\u000ba\fY$(3\t\u000f\u0005U\b\u000bq\u0001\u001f A)\u00010a\u000f\u001eN\"9!Q\u0012)A\u0004y\r\u0002#\u0002=\u0002<uE\u0007bBB#!\u0002\u000fat\u0005\t\u0006q\u0006mRT\u001b\u0005\b\t;\u0001\u00069\u0001P\u0016!\u0015A\u00181HOm\u0011\u001d))\u0002\u0015a\u0002=_\u0001R\u0001_A\u001e;;DqA\"\fQ\u0001\bq\u001a\u0004E\u0003y\u0003wi\n\u000fC\u0004\bfA\u0003\u001dAh\u000e\u0011\u000ba\fY$(:\t\u000f!u\u0006\u000bq\u0001\u001f<A)\u00010a\u000f\u001ej\"9!R\u0007)A\u0004y}\u0002#\u0002=\u0002<u5\bbBFg!\u0002\u000fa4\t\t\u0006q\u0006mR\u0014\u001f\u0005\b\u001b\u000b\u0003\u00069\u0001P$!\u0015A\u00181HO{\u0011\u001dyi\u0006\u0015a\u0002=\u0017\u0002R\u0001_A\u001e;sDq!%\u0016Q\u0001\bqz\u0005E\u0003y\u0003wij\u0010C\u0004\u0014nA\u0003\u001dAh\u0015\u0011\u000ba\fYD(\u0001\t\u000fU\u0015\u0006\u000bq\u0001\u001fXA)\u00010a\u000f\u001f\u0006!9qS )A\u0004ym\u0003#\u0002=\u0002<y%\u0001b\u0002N;!\u0002\u000fat\f\t\u0006q\u0006mbT\u0002\u0005\b;\u001b\u0001\u00069\u0001P2!\u0015A\u00181\bP\t\u0003=!X\u000f\u001d7feA\u001aV-\\5sS:<WC\u000bP5=cr*H(\u001f\u001f~y\u0005eT\u0011PE=\u001bs\nJ(&\u001f\u001azue\u0014\u0015PS=SsjK(-\u001f6zefT\u0018\u000b+=WrzLh1\u001fHz-gt\u001aPj=/tZNh8\u001fdz\u001dh4\u001ePx=gt:Ph?\u001f\u0000~\rqtAP\u0006!\u0015A\u0018\u0011\u000bP7!-\u0012G\u0014\u000eP8=gr:Hh\u001f\u001f\u0000y\ret\u0011PF=\u001fs\u001aJh&\u001f\u001cz}e4\u0015PT=WszKh-\u001f8zm\u0006\u0003BA\u0002=c\"q!a\u0002R\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004yUDaBA;#\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007qJ\bB\u0004\u0002jF\u0013\r!!\u0003\u0011\t\u0005\raT\u0010\u0003\b\u0005{\n&\u0019AA\u0005!\u0011\t\u0019A(!\u0005\u000f\rE\u0012K1\u0001\u0002\nA!\u00111\u0001PC\t\u001d!)!\u0015b\u0001\u0003\u0013\u0001B!a\u0001\u001f\n\u00129A\u0011`)C\u0002\u0005%\u0001\u0003BA\u0002=\u001b#qA\"\u0004R\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004yEEaBD!#\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007q*\nB\u0004\t\u0016F\u0013\r!!\u0003\u0011\t\u0005\ra\u0014\u0014\u0003\b\u0015\u0013\t&\u0019AA\u0005!\u0011\t\u0019A((\u0005\u000f-u\u0015K1\u0001\u0002\nA!\u00111\u0001PQ\t\u001di\t&\u0015b\u0001\u0003\u0013\u0001B!a\u0001\u001f&\u00129qRE)C\u0002\u0005%\u0001\u0003BA\u0002=S#q!%\u0007R\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004y5FaBJ\u0017#\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007q\n\fB\u0004\u0016bE\u0013\r!!\u0003\u0011\t\u0005\raT\u0017\u0003\b/k\u000b&\u0019AA\u0005!\u0011\t\u0019A(/\u0005\u000fi%\u0012K1\u0001\u0002\nA!\u00111\u0001P_\t\u001daj,\u0015b\u0001\u0003\u0013Aq!!\u0007R\u0001\bq\n\rE\u0003y\u0003#rz\u0007C\u0004\u0002~E\u0003\u001dA(2\u0011\u000ba\f\tFh\u001d\t\u000f\u0005U\u0018\u000bq\u0001\u001fJB)\u00010!\u0015\u001fx!9!QR)A\u0004y5\u0007#\u0002=\u0002Rym\u0004bBB##\u0002\u000fa\u0014\u001b\t\u0006q\u0006Ect\u0010\u0005\b\t;\t\u00069\u0001Pk!\u0015A\u0018\u0011\u000bPB\u0011\u001d))\"\u0015a\u0002=3\u0004R\u0001_A)=\u000fCqA\"\fR\u0001\bqj\u000eE\u0003y\u0003#rZ\tC\u0004\bfE\u0003\u001dA(9\u0011\u000ba\f\tFh$\t\u000f!u\u0016\u000bq\u0001\u001ffB)\u00010!\u0015\u001f\u0014\"9!RG)A\u0004y%\b#\u0002=\u0002Ry]\u0005bBFg#\u0002\u000faT\u001e\t\u0006q\u0006Ec4\u0014\u0005\b\u001b\u000b\u000b\u00069\u0001Py!\u0015A\u0018\u0011\u000bPP\u0011\u001dyi&\u0015a\u0002=k\u0004R\u0001_A)=GCq!%\u0016R\u0001\bqJ\u0010E\u0003y\u0003#r:\u000bC\u0004\u0014nE\u0003\u001dA(@\u0011\u000ba\f\tFh+\t\u000fU\u0015\u0016\u000bq\u0001 \u0002A)\u00010!\u0015\u001f0\"9qS`)A\u0004}\u0015\u0001#\u0002=\u0002RyM\u0006b\u0002N;#\u0002\u000fq\u0014\u0002\t\u0006q\u0006Ect\u0017\u0005\b;\u001b\t\u00069AP\u0007!\u0015A\u0018\u0011\u000bP^\u0003)!X\u000f\u001d7feE\u0012\u0016nZ\u000b-?'yzbh\t (}-rtFP\u001a?oyZdh\u0010 D}\u001ds4JP(?'z:fh\u0017 `}\rttMP6?_\"Bf(\u0006 t}]t4PP@?\u0007{:ih# \u0010~MutSPN??{\u001akh* ,~=v4WP\\?w{zlh1\u0011\ta\\xt\u0003\t.E~eqTDP\u0011?KyJc(\f 2}Ur\u0014HP\u001f?\u0003z*e(\u0013 N}EsTKP-?;z\ng(\u001a j}5\u0014bAP\u000eG\n9A+\u001e9mKJ\n\u0004\u0003BA\u0002??!q!a\u0002S\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004}\rBaBA;%\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007y:\u0003B\u0004\u0002jJ\u0013\r!!\u0003\u0011\t\u0005\rq4\u0006\u0003\b\u0005{\u0012&\u0019AA\u0005!\u0011\t\u0019ah\f\u0005\u000f\rE\"K1\u0001\u0002\nA!\u00111AP\u001a\t\u001d!)A\u0015b\u0001\u0003\u0013\u0001B!a\u0001 8\u00119A\u0011 *C\u0002\u0005%\u0001\u0003BA\u0002?w!qA\"\u0004S\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004}}BaBD!%\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007y\u001a\u0005B\u0004\t\u0016J\u0013\r!!\u0003\u0011\t\u0005\rqt\t\u0003\b\u0015\u0013\u0011&\u0019AA\u0005!\u0011\t\u0019ah\u0013\u0005\u000f-u%K1\u0001\u0002\nA!\u00111AP(\t\u001di\tF\u0015b\u0001\u0003\u0013\u0001B!a\u0001 T\u00119qR\u0005*C\u0002\u0005%\u0001\u0003BA\u0002?/\"q!%\u0007S\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004}mCaBJ\u0017%\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007yz\u0006B\u0004\u0016bI\u0013\r!!\u0003\u0011\t\u0005\rq4\r\u0003\b/k\u0013&\u0019AA\u0005!\u0011\t\u0019ah\u001a\u0005\u000fi%\"K1\u0001\u0002\nA!\u00111AP6\t\u001dajL\u0015b\u0001\u0003\u0013\u0001B!a\u0001 p\u00119q\u0014\u000f*C\u0002\u0005%!aA!3a!9\u0011\u0011\u0004*A\u0004}U\u0004\u0003\u0002=|?;Aq!! S\u0001\byJ\b\u0005\u0003yw~\u0005\u0002bBA{%\u0002\u000fqT\u0010\t\u0005qn|*\u0003C\u0004\u0003\u000eJ\u0003\u001da(!\u0011\ta\\x\u0014\u0006\u0005\b\u0007\u000b\u0012\u00069APC!\u0011A8p(\f\t\u000f\u0011u!\u000bq\u0001 \nB!\u0001p_P\u0019\u0011\u001d))B\u0015a\u0002?\u001b\u0003B\u0001_> 6!9aQ\u0006*A\u0004}E\u0005\u0003\u0002=|?sAqa\"\u001aS\u0001\by*\n\u0005\u0003yw~u\u0002b\u0002E_%\u0002\u000fq\u0014\u0014\t\u0005qn|\n\u0005C\u0004\u000b6I\u0003\u001da((\u0011\ta\\xT\t\u0005\b\u0017\u001b\u0014\u00069APQ!\u0011A8p(\u0013\t\u000f5\u0015%\u000bq\u0001 &B!\u0001p_P'\u0011\u001dyiF\u0015a\u0002?S\u0003B\u0001_> R!9\u0011S\u000b*A\u0004}5\u0006\u0003\u0002=|?+Bqa%\u001cS\u0001\by\n\f\u0005\u0003yw~e\u0003bBKS%\u0002\u000fqT\u0017\t\u0005qn|j\u0006C\u0004\u0018~J\u0003\u001da(/\u0011\ta\\x\u0014\r\u0005\b5k\u0012\u00069AP_!\u0011A8p(\u001a\t\u000fu5!\u000bq\u0001 BB!\u0001p_P5\u0011\u001dy*M\u0015a\u0002?\u000f\f1!\u0011\u001a1!\u0011A8p(\u001c\u0002\u0017Q,\b\u000f\\33cIKgnZ\u000b-?\u001b|*n(7 ^~\u0005xT]Pu?[|\np(> z~u\b\u0015\u0001Q\u0003A\u0013\u0001k\u0001)\u0005!\u0016\u0001f\u0001U\u0004Q\u0011AK!Bfh4!(\u0001.\u0002u\u0006Q\u001aAo\u0001[\u0004i\u0010!D\u0001\u001e\u00035\nQ(A'\u0002;\u0006i\u0017!`\u0001\u000e\u0004u\rQ6A_\u0002\u001b\bi\u001e\u0011\u000ba\f)c(5\u0011[\t|Jbh5 X~mwt\\Pr?O|Zoh< t~]x4`P\u0000A\u0007\u0001;\u0001i\u0003!\u0010\u0001N\u0001u\u0003Q\u000eA?\u0001\u001b\u0003\u0005\u0003\u0002\u0004}UGaBA\u0004'\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007yJ\u000eB\u0004\u0002vM\u0013\r!!\u0003\u0011\t\u0005\rqT\u001c\u0003\b\u0003S\u001c&\u0019AA\u0005!\u0011\t\u0019a(9\u0005\u000f\tu4K1\u0001\u0002\nA!\u00111APs\t\u001d\u0019\td\u0015b\u0001\u0003\u0013\u0001B!a\u0001 j\u00129AQA*C\u0002\u0005%\u0001\u0003BA\u0002?[$q\u0001\"?T\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004}EHa\u0002D\u0007'\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007y*\u0010B\u0004\bBM\u0013\r!!\u0003\u0011\t\u0005\rq\u0014 \u0003\b\u0011+\u001b&\u0019AA\u0005!\u0011\t\u0019a(@\u0005\u000f)%1K1\u0001\u0002\nA!\u00111\u0001Q\u0001\t\u001dYij\u0015b\u0001\u0003\u0013\u0001B!a\u0001!\u0006\u00119Q\u0012K*C\u0002\u0005%\u0001\u0003BA\u0002A\u0013!qa$\nT\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u00016AaBI\r'\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0001\u000b\u0002B\u0004\u0014.M\u0013\r!!\u0003\u0011\t\u0005\r\u0001U\u0003\u0003\b+C\u001a&\u0019AA\u0005!\u0011\t\u0019\u0001)\u0007\u0005\u000f]U6K1\u0001\u0002\nA!\u00111\u0001Q\u000f\t\u001dQJc\u0015b\u0001\u0003\u0013\u0001B!a\u0001!\"\u00119ATX*C\u0002\u0005%\u0001\u0003BA\u0002AK!qa(\u001dT\u0005\u0004\tI\u0001C\u0004\u0002\u001aM\u0003\u001d\u0001)\u000b\u0011\u000ba\f)ch5\t\u000f\u0005u4\u000bq\u0001!.A)\u00010!\n X\"9\u0011Q_*A\u0004\u0001F\u0002#\u0002=\u0002&}m\u0007b\u0002BG'\u0002\u000f\u0001U\u0007\t\u0006q\u0006\u0015rt\u001c\u0005\b\u0007\u000b\u001a\u00069\u0001Q\u001d!\u0015A\u0018QEPr\u0011\u001d!ib\u0015a\u0002A{\u0001R\u0001_A\u0013?ODq!\"\u0006T\u0001\b\u0001\u000b\u0005E\u0003y\u0003KyZ\u000fC\u0004\u0007.M\u0003\u001d\u0001)\u0012\u0011\u000ba\f)ch<\t\u000f\u001d\u00154\u000bq\u0001!JA)\u00010!\n t\"9\u0001RX*A\u0004\u00016\u0003#\u0002=\u0002&}]\bb\u0002F\u001b'\u0002\u000f\u0001\u0015\u000b\t\u0006q\u0006\u0015r4 \u0005\b\u0017\u001b\u001c\u00069\u0001Q+!\u0015A\u0018QEP\u0000\u0011\u001di)i\u0015a\u0002A3\u0002R\u0001_A\u0013A\u0007Aqa$\u0018T\u0001\b\u0001k\u0006E\u0003y\u0003K\u0001;\u0001C\u0004\u0012VM\u0003\u001d\u0001)\u0019\u0011\u000ba\f)\u0003i\u0003\t\u000fM54\u000bq\u0001!fA)\u00010!\n!\u0010!9QSU*A\u0004\u0001&\u0004#\u0002=\u0002&\u0001N\u0001bBL\u007f'\u0002\u000f\u0001U\u000e\t\u0006q\u0006\u0015\u0002u\u0003\u0005\b5k\u001a\u00069\u0001Q9!\u0015A\u0018Q\u0005Q\u000e\u0011\u001dija\u0015a\u0002Ak\u0002R\u0001_A\u0013A?Aqa(2T\u0001\b\u0001K\bE\u0003y\u0003K\u0001\u001b#\u0001\u0006ukBdWMM\u0019S]\u001e,B\u0006i !\b\u0002.\u0005u\u0012QJA/\u0003[\ni(!$\u0002\u001e\u00065\u0016QXAg\u0003;\fi/!@\u0002\u000e\u0007u\u0019QfA\u001f\u0004\u001b\u000ei6\u0015Y\u0001\u0006\u0005\u0015\u001cQoAC\u0004+\u000f);!n\u0002F\bU\u001fQ}A{\f\u000b!)\u0002\"\n\u00056\u0011\u0015CQ\u000bC3\tk\")\t\"&\u0005&\u0002#\u0002=\u0002<\u0001\u000e\u0005#\f2 \u001a\u0001\u0016\u0005\u0015\u0012QGA#\u0003+\n)'!\u001e\u0002\u0006\u0006U\u0015QUA[\u0003\u000b\f).!:\u0002v\u0006\u0015\u0019QcA\u0013\u0004k\r)5!VB!\u00111\u0001QD\t\u001d\t9\u0001\u0016b\u0001\u0003\u0013\u0001B!a\u0001!\f\u00129\u0011Q\u000f+C\u0002\u0005%\u0001\u0003BA\u0002A\u001f#q!!;U\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0001NEa\u0002B?)\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0001;\nB\u0004\u00042Q\u0013\r!!\u0003\u0011\t\u0005\r\u00015\u0014\u0003\b\t\u000b!&\u0019AA\u0005!\u0011\t\u0019\u0001i(\u0005\u000f\u0011eHK1\u0001\u0002\nA!\u00111\u0001QR\t\u001d1i\u0001\u0016b\u0001\u0003\u0013\u0001B!a\u0001!(\u00129q\u0011\t+C\u0002\u0005%\u0001\u0003BA\u0002AW#q\u0001#&U\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0001>Fa\u0002F\u0005)\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0001\u001b\fB\u0004\f\u001eR\u0013\r!!\u0003\u0011\t\u0005\r\u0001u\u0017\u0003\b\u001b#\"&\u0019AA\u0005!\u0011\t\u0019\u0001i/\u0005\u000f=\u0015BK1\u0001\u0002\nA!\u00111\u0001Q`\t\u001d\tJ\u0002\u0016b\u0001\u0003\u0013\u0001B!a\u0001!D\u001291S\u0006+C\u0002\u0005%\u0001\u0003BA\u0002A\u000f$q!&\u0019U\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0001.GaBL[)\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0001{\rB\u0004\u001b*Q\u0013\r!!\u0003\u0011\t\u0005\r\u00015\u001b\u0003\b9{#&\u0019AA\u0005!\u0011\t\u0019\u0001i6\u0005\u000f}EDK1\u0001\u0002\n!9\u0011\u0011\u0004+A\u0004\u0001n\u0007#\u0002=\u0002<\u0001\u0016\u0005bBA?)\u0002\u000f\u0001u\u001c\t\u0006q\u0006m\u0002\u0015\u0012\u0005\b\u0003k$\u00069\u0001Qr!\u0015A\u00181\bQG\u0011\u001d\u0011i\t\u0016a\u0002AO\u0004R\u0001_A\u001eA#Cqa!\u0012U\u0001\b\u0001[\u000fE\u0003y\u0003w\u0001+\nC\u0004\u0005\u001eQ\u0003\u001d\u0001i<\u0011\u000ba\fY\u0004)'\t\u000f\u0015UA\u000bq\u0001!tB)\u00010a\u000f!\u001e\"9aQ\u0006+A\u0004\u0001^\b#\u0002=\u0002<\u0001\u0006\u0006bBD3)\u0002\u000f\u00015 \t\u0006q\u0006m\u0002U\u0015\u0005\b\u0011{#\u00069\u0001Q\u0000!\u0015A\u00181\bQU\u0011\u001dQ)\u0004\u0016a\u0002C\u0007\u0001R\u0001_A\u001eA[Cqa#4U\u0001\b\t;\u0001E\u0003y\u0003w\u0001\u000b\fC\u0004\u000e\u0006R\u0003\u001d!i\u0003\u0011\u000ba\fY\u0004).\t\u000f=uC\u000bq\u0001\"\u0010A)\u00010a\u000f!:\"9\u0011S\u000b+A\u0004\u0005N\u0001#\u0002=\u0002<\u0001v\u0006bBJ7)\u0002\u000f\u0011u\u0003\t\u0006q\u0006m\u0002\u0015\u0019\u0005\b+K#\u00069AQ\u000e!\u0015A\u00181\bQc\u0011\u001d9j\u0010\u0016a\u0002C?\u0001R\u0001_A\u001eA\u0013DqA'\u001eU\u0001\b\t\u001b\u0003E\u0003y\u0003w\u0001k\rC\u0004\u001e\u000eQ\u0003\u001d!i\n\u0011\u000ba\fY\u0004)5\t\u000f}\u0015G\u000bq\u0001\",A)\u00010a\u000f!V\u0006yA/\u001e9mKJ\n4+Z7je&tw-\u0006\u0017\"2\u0005f\u0012UHQ!C\u000b\nK%)\u0014\"R\u0005V\u0013\u0015LQ/CC\n+')\u001b\"n\u0005F\u0014UOQ=C{\n\u000b))\"\"\nRa\u00135GQFC\u001f\u000b\u001b*i&\"\u001c\u0006~\u00155UQTCW\u000b{+i-\"8\u0006n\u0016uXQbC\u000f\f[-i4\"T\u0006^\u00175\u001c\t\u0006q\u0006E\u0013U\u0007\t.E~e\u0011uGQ\u001eC\u007f\t\u001b%i\u0012\"L\u0005>\u00135KQ,C7\n{&i\u0019\"h\u0005.\u0014uNQ:Co\n[(i \"\u0004\u0006\u001e\u0005\u0003BA\u0002Cs!q!a\u0002V\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0005vBaBA;+\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\t\u000b\u0005B\u0004\u0002jV\u0013\r!!\u0003\u0011\t\u0005\r\u0011U\t\u0003\b\u0005{*&\u0019AA\u0005!\u0011\t\u0019!)\u0013\u0005\u000f\rERK1\u0001\u0002\nA!\u00111AQ'\t\u001d!)!\u0016b\u0001\u0003\u0013\u0001B!a\u0001\"R\u00119A\u0011`+C\u0002\u0005%\u0001\u0003BA\u0002C+\"qA\"\u0004V\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0005fCaBD!+\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\tk\u0006B\u0004\t\u0016V\u0013\r!!\u0003\u0011\t\u0005\r\u0011\u0015\r\u0003\b\u0015\u0013)&\u0019AA\u0005!\u0011\t\u0019!)\u001a\u0005\u000f-uUK1\u0001\u0002\nA!\u00111AQ5\t\u001di\t&\u0016b\u0001\u0003\u0013\u0001B!a\u0001\"n\u00119qRE+C\u0002\u0005%\u0001\u0003BA\u0002Cc\"q!%\u0007V\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0005VDaBJ\u0017+\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\tK\bB\u0004\u0016bU\u0013\r!!\u0003\u0011\t\u0005\r\u0011U\u0010\u0003\b/k+&\u0019AA\u0005!\u0011\t\u0019!)!\u0005\u000fi%RK1\u0001\u0002\nA!\u00111AQC\t\u001daj,\u0016b\u0001\u0003\u0013\u0001B!a\u0001\"\n\u00129q\u0014O+C\u0002\u0005%\u0001bBA\r+\u0002\u000f\u0011U\u0012\t\u0006q\u0006E\u0013u\u0007\u0005\b\u0003{*\u00069AQI!\u0015A\u0018\u0011KQ\u001e\u0011\u001d\t)0\u0016a\u0002C+\u0003R\u0001_A)C\u007fAqA!$V\u0001\b\tK\nE\u0003y\u0003#\n\u001b\u0005C\u0004\u0004FU\u0003\u001d!)(\u0011\u000ba\f\t&i\u0012\t\u000f\u0011uQ\u000bq\u0001\"\"B)\u00010!\u0015\"L!9QQC+A\u0004\u0005\u0016\u0006#\u0002=\u0002R\u0005>\u0003b\u0002D\u0017+\u0002\u000f\u0011\u0015\u0016\t\u0006q\u0006E\u00135\u000b\u0005\b\u000fK*\u00069AQW!\u0015A\u0018\u0011KQ,\u0011\u001dAi,\u0016a\u0002Cc\u0003R\u0001_A)C7BqA#\u000eV\u0001\b\t+\fE\u0003y\u0003#\n{\u0006C\u0004\fNV\u0003\u001d!)/\u0011\u000ba\f\t&i\u0019\t\u000f5\u0015U\u000bq\u0001\">B)\u00010!\u0015\"h!9qRL+A\u0004\u0005\u0006\u0007#\u0002=\u0002R\u0005.\u0004bBI++\u0002\u000f\u0011U\u0019\t\u0006q\u0006E\u0013u\u000e\u0005\b'[*\u00069AQe!\u0015A\u0018\u0011KQ:\u0011\u001d)*+\u0016a\u0002C\u001b\u0004R\u0001_A)CoBqa&@V\u0001\b\t\u000b\u000eE\u0003y\u0003#\n[\bC\u0004\u001bvU\u0003\u001d!)6\u0011\u000ba\f\t&i \t\u000fu5Q\u000bq\u0001\"ZB)\u00010!\u0015\"\u0004\"9qTY+A\u0004\u0005v\u0007#\u0002=\u0002R\u0005\u001e\u0015A\u0003;va2,'G\r*jOVq\u00135]QxCg\f;0i?\"\u0000\n\u000e!u\u0001R\u0006E\u001f\u0011\u001bBi\u0006#\u001c\t~!5\u0005R\u0014EW\u0011{Ci\r#8\tn\"u\bR\")9\n+Oi\u0012#L\t>#5\u000bR,E7\u0012{Fi\u0019#h\t.$u\u000eR:Eo\u0012[Hi #\u0004\n\u001e%5\u0012RHE'\u0013;Ji'\u0011\ta\\\u0018u\u001d\t0E\u0006&\u0018U^QyCk\fK0)@#\u0002\t\u0016!\u0015\u0002R\u0007E#\u0011+B)\u0007#\u001e\t\u0006\"U\u0005R\u0015E[\u0011\u000bD)\u000e#:\tv\"\u0015I\u0005\u0004CW\u001c'a\u0002+va2,'G\r\t\u0005\u0003\u0007\t{\u000fB\u0004\u0002\bY\u0013\r!!\u0003\u0011\t\u0005\r\u00115\u001f\u0003\b\u0003k2&\u0019AA\u0005!\u0011\t\u0019!i>\u0005\u000f\u0005%hK1\u0001\u0002\nA!\u00111AQ~\t\u001d\u0011iH\u0016b\u0001\u0003\u0013\u0001B!a\u0001\"\u0000\u001291\u0011\u0007,C\u0002\u0005%\u0001\u0003BA\u0002E\u0007!q\u0001\"\u0002W\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\t\u001eAa\u0002C}-\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011[\u0001B\u0004\u0007\u000eY\u0013\r!!\u0003\u0011\t\u0005\r!u\u0002\u0003\b\u000f\u00032&\u0019AA\u0005!\u0011\t\u0019Ai\u0005\u0005\u000f!UeK1\u0001\u0002\nA!\u00111\u0001R\f\t\u001dQIA\u0016b\u0001\u0003\u0013\u0001B!a\u0001#\u001c\u001191R\u0014,C\u0002\u0005%\u0001\u0003BA\u0002E?!q!$\u0015W\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\t\u000eBaBH\u0013-\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011;\u0003B\u0004\u0012\u001aY\u0013\r!!\u0003\u0011\t\u0005\r!5\u0006\u0003\b'[1&\u0019AA\u0005!\u0011\t\u0019Ai\f\u0005\u000fU\u0005dK1\u0001\u0002\nA!\u00111\u0001R\u001a\t\u001d9*L\u0016b\u0001\u0003\u0013\u0001B!a\u0001#8\u00119!\u0014\u0006,C\u0002\u0005%\u0001\u0003BA\u0002Ew!q\u0001(0W\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\t~BaBP9-\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011\u001b\u0005B\u0004#FY\u0013\r!!\u0003\u0003\u0007\u0005\u0013\u0014\u0007C\u0004\u0002\u001aY\u0003\u001dA)\u0013\u0011\ta\\\u0018U\u001e\u0005\b\u0003{2\u00069\u0001R'!\u0011A80)=\t\u000f\u0005Uh\u000bq\u0001#RA!\u0001p_Q{\u0011\u001d\u0011iI\u0016a\u0002E+\u0002B\u0001_>\"z\"91Q\t,A\u0004\tf\u0003\u0003\u0002=|C{Dq\u0001\"\bW\u0001\b\u0011k\u0006\u0005\u0003yw\n\u0006\u0001bBC\u000b-\u0002\u000f!\u0015\r\t\u0005qn\u0014+\u0001C\u0004\u0007.Y\u0003\u001dA)\u001a\u0011\ta\\(\u0015\u0002\u0005\b\u000fK2\u00069\u0001R5!\u0011A8P)\u0004\t\u000f!uf\u000bq\u0001#nA!\u0001p\u001fR\t\u0011\u001dQ)D\u0016a\u0002Ec\u0002B\u0001_>#\u0016!91R\u001a,A\u0004\tV\u0004\u0003\u0002=|E3Aq!$\"W\u0001\b\u0011K\b\u0005\u0003yw\nv\u0001bBH/-\u0002\u000f!U\u0010\t\u0005qn\u0014\u000b\u0003C\u0004\u0012VY\u0003\u001dA)!\u0011\ta\\(U\u0005\u0005\b'[2\u00069\u0001RC!\u0011A8P)\u000b\t\u000fU\u0015f\u000bq\u0001#\nB!\u0001p\u001fR\u0017\u0011\u001d9jP\u0016a\u0002E\u001b\u0003B\u0001_>#2!9!T\u000f,A\u0004\tF\u0005\u0003\u0002=|EkAq!(\u0004W\u0001\b\u0011+\n\u0005\u0003yw\nf\u0002bBPc-\u0002\u000f!\u0015\u0014\t\u0005qn\u0014k\u0004C\u0004#\u001eZ\u0003\u001dAi(\u0002\u0007\u0005\u0013\u0014\u0007\u0005\u0003yw\n\u0006\u0013a\u0003;va2,'G\r*j]\u001e,bF)*#.\nF&U\u0017R]E{\u0013\u000bM)2#J\n6'\u0015\u001bRkE3\u0014kN)9#f\n&(U\u001eRyEk\u0014KP)@$\u0002Qq#uUR\u0002G\u000f\u0019[ai\u0004$\u0014\r^15DR\u0010GG\u0019;ci\u000b$0\rN2uGR\u001eG\u007f\u0019\u001bei\u0012$L\r>35KR,!\u0015A\u0018Q\u0005RU!=\u0012\u0017\u0015\u001eRVE_\u0013\u001bLi.#<\n~&5\u0019RdE\u0017\u0014{Mi5#X\nn'u\u001cRrEO\u0014[Oi<#t\n^(5 R\u0000!\u0011\t\u0019A),\u0005\u000f\u0005\u001dqK1\u0001\u0002\nA!\u00111\u0001RY\t\u001d\t)h\u0016b\u0001\u0003\u0013\u0001B!a\u0001#6\u00129\u0011\u0011^,C\u0002\u0005%\u0001\u0003BA\u0002Es#qA! X\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\tvFaBB\u0019/\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011\u000b\rB\u0004\u0005\u0006]\u0013\r!!\u0003\u0011\t\u0005\r!U\u0019\u0003\b\ts<&\u0019AA\u0005!\u0011\t\u0019A)3\u0005\u000f\u00195qK1\u0001\u0002\nA!\u00111\u0001Rg\t\u001d9\te\u0016b\u0001\u0003\u0013\u0001B!a\u0001#R\u00129\u0001RS,C\u0002\u0005%\u0001\u0003BA\u0002E+$qA#\u0003X\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\tfGaBFO/\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011k\u000eB\u0004\u000eR]\u0013\r!!\u0003\u0011\t\u0005\r!\u0015\u001d\u0003\b\u001fK9&\u0019AA\u0005!\u0011\t\u0019A):\u0005\u000fEeqK1\u0001\u0002\nA!\u00111\u0001Ru\t\u001d\u0019jc\u0016b\u0001\u0003\u0013\u0001B!a\u0001#n\u00129Q\u0013M,C\u0002\u0005%\u0001\u0003BA\u0002Ec$qa&.X\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\tVHa\u0002N\u0015/\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0011K\u0010B\u0004\u001d>^\u0013\r!!\u0003\u0011\t\u0005\r!U \u0003\b?c:&\u0019AA\u0005!\u0011\t\u0019a)\u0001\u0005\u000f\t\u0016sK1\u0001\u0002\n!9\u0011\u0011D,A\u0004\r\u0016\u0001#\u0002=\u0002&\t.\u0006bBA?/\u0002\u000f1\u0015\u0002\t\u0006q\u0006\u0015\"u\u0016\u0005\b\u0003k<\u00069AR\u0007!\u0015A\u0018Q\u0005RZ\u0011\u001d\u0011ii\u0016a\u0002G#\u0001R\u0001_A\u0013EoCqa!\u0012X\u0001\b\u0019+\u0002E\u0003y\u0003K\u0011[\fC\u0004\u0005\u001e]\u0003\u001da)\u0007\u0011\u000ba\f)Ci0\t\u000f\u0015Uq\u000bq\u0001$\u001eA)\u00010!\n#D\"9aQF,A\u0004\r\u0006\u0002#\u0002=\u0002&\t\u001e\u0007bBD3/\u0002\u000f1U\u0005\t\u0006q\u0006\u0015\"5\u001a\u0005\b\u0011{;\u00069AR\u0015!\u0015A\u0018Q\u0005Rh\u0011\u001dQ)d\u0016a\u0002G[\u0001R\u0001_A\u0013E'Dqa#4X\u0001\b\u0019\u000b\u0004E\u0003y\u0003K\u0011;\u000eC\u0004\u000e\u0006^\u0003\u001da)\u000e\u0011\u000ba\f)Ci7\t\u000f=us\u000bq\u0001$:A)\u00010!\n#`\"9\u0011SK,A\u0004\rv\u0002#\u0002=\u0002&\t\u000e\bbBJ7/\u0002\u000f1\u0015\t\t\u0006q\u0006\u0015\"u\u001d\u0005\b+K;\u00069AR#!\u0015A\u0018Q\u0005Rv\u0011\u001d9jp\u0016a\u0002G\u0013\u0002R\u0001_A\u0013E_DqA'\u001eX\u0001\b\u0019k\u0005E\u0003y\u0003K\u0011\u001b\u0010C\u0004\u001e\u000e]\u0003\u001da)\u0015\u0011\u000ba\f)Ci>\t\u000f}\u0015w\u000bq\u0001$VA)\u00010!\n#|\"9!UT,A\u0004\rf\u0003#\u0002=\u0002&\t~\u0018A\u0003;va2,'G\r*oOVq3uLR4GW\u001a{gi\u001d$x\rn4uPRBG\u000f\u001b[ii$$\u0014\u000e^55TRPGG\u001b;ki+$0\u000eN6uWR^)9\u001a\u000bg)0$B\u000e\u00167\u0015ZRgG#\u001c+n)7$^\u000e\u00068U]RuG[\u001c\u000bp)>$z\u000evH\u0015\u0001S\u0003I\u0013!k\u0001*\u0005\u0011\u000ba\fYdi\u0019\u0011_\t\fKo)\u001a$j\r64\u0015OR;Gs\u001akh)!$\u0006\u000e&5URRIG+\u001bKj)($\"\u000e\u00166\u0015VRWGc\u001b+l)/\u0011\t\u0005\r1u\r\u0003\b\u0003\u000fA&\u0019AA\u0005!\u0011\t\u0019ai\u001b\u0005\u000f\u0005U\u0004L1\u0001\u0002\nA!\u00111AR8\t\u001d\tI\u000f\u0017b\u0001\u0003\u0013\u0001B!a\u0001$t\u00119!Q\u0010-C\u0002\u0005%\u0001\u0003BA\u0002Go\"qa!\rY\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\rnDa\u0002C\u00031\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0019{\bB\u0004\u0005zb\u0013\r!!\u0003\u0011\t\u0005\r15\u0011\u0003\b\r\u001bA&\u0019AA\u0005!\u0011\t\u0019ai\"\u0005\u000f\u001d\u0005\u0003L1\u0001\u0002\nA!\u00111ARF\t\u001dA)\n\u0017b\u0001\u0003\u0013\u0001B!a\u0001$\u0010\u00129!\u0012\u0002-C\u0002\u0005%\u0001\u0003BA\u0002G'#qa#(Y\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\r^EaBG)1\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0019[\nB\u0004\u0010&a\u0013\r!!\u0003\u0011\t\u0005\r1u\u0014\u0003\b#3A&\u0019AA\u0005!\u0011\t\u0019ai)\u0005\u000fM5\u0002L1\u0001\u0002\nA!\u00111ART\t\u001d)\n\u0007\u0017b\u0001\u0003\u0013\u0001B!a\u0001$,\u00129qS\u0017-C\u0002\u0005%\u0001\u0003BA\u0002G_#qA'\u000bY\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\rNFa\u0002O_1\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007\u0019;\fB\u0004 ra\u0013\r!!\u0003\u0011\t\u0005\r15\u0018\u0003\bE\u000bB&\u0019AA\u0005\u0011\u001d\tI\u0002\u0017a\u0002G\u007f\u0003R\u0001_A\u001eGKBq!! Y\u0001\b\u0019\u001b\rE\u0003y\u0003w\u0019K\u0007C\u0004\u0002vb\u0003\u001dai2\u0011\u000ba\fYd)\u001c\t\u000f\t5\u0005\fq\u0001$LB)\u00010a\u000f$r!91Q\t-A\u0004\r>\u0007#\u0002=\u0002<\rV\u0004b\u0002C\u000f1\u0002\u000f15\u001b\t\u0006q\u0006m2\u0015\u0010\u0005\b\u000b+A\u00069ARl!\u0015A\u00181HR?\u0011\u001d1i\u0003\u0017a\u0002G7\u0004R\u0001_A\u001eG\u0003Cqa\"\u001aY\u0001\b\u0019{\u000eE\u0003y\u0003w\u0019+\tC\u0004\t>b\u0003\u001dai9\u0011\u000ba\fYd)#\t\u000f)U\u0002\fq\u0001$hB)\u00010a\u000f$\u000e\"91R\u001a-A\u0004\r.\b#\u0002=\u0002<\rF\u0005bBGC1\u0002\u000f1u\u001e\t\u0006q\u0006m2U\u0013\u0005\b\u001f;B\u00069ARz!\u0015A\u00181HRM\u0011\u001d\t*\u0006\u0017a\u0002Go\u0004R\u0001_A\u001eG;Cqa%\u001cY\u0001\b\u0019[\u0010E\u0003y\u0003w\u0019\u000b\u000bC\u0004\u0016&b\u0003\u001dai@\u0011\u000ba\fYd)*\t\u000f]u\b\fq\u0001%\u0004A)\u00010a\u000f$*\"9!T\u000f-A\u0004\u0011\u001e\u0001#\u0002=\u0002<\r6\u0006bBO\u00071\u0002\u000fA5\u0002\t\u0006q\u0006m2\u0015\u0017\u0005\b?\u000bD\u00069\u0001S\b!\u0015A\u00181HR[\u0011\u001d\u0011k\n\u0017a\u0002I'\u0001R\u0001_A\u001eGs\u000bq\u0002^;qY\u0016\u0014$gU3nSJLgnZ\u000b/I3!\u000b\u0003*\n%*\u00116B\u0015\u0007S\u001bIs!k\u0004*\u0011%F\u0011&CU\nS)I+\"K\u0006*\u0018%b\u0011\u0016D\u0015\u000eS7Ic\"+\b\u0006\u0018%\u001c\u0011^D5\u0010S@I\u0007#;\tj#%\u0010\u0012NEu\u0013SNI?#\u001b\u000bj*%,\u0012>F5\u0017S\\Iw#{\fj1%H\u0012.\u0007#\u0002=\u0002R\u0011v\u0001c\f2\"j\u0012~A5\u0005S\u0014IW!{\u0003j\r%8\u0011nBu\bS\"I\u000f\"[\u0005j\u0014%T\u0011^C5\fS0IG\";\u0007j\u001b%p\u0011N\u0004\u0003BA\u0002IC!q!a\u0002Z\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0011\u0016BaBA;3\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007!K\u0003B\u0004\u0002jf\u0013\r!!\u0003\u0011\t\u0005\rAU\u0006\u0003\b\u0005{J&\u0019AA\u0005!\u0011\t\u0019\u0001*\r\u0005\u000f\rE\u0012L1\u0001\u0002\nA!\u00111\u0001S\u001b\t\u001d!)!\u0017b\u0001\u0003\u0013\u0001B!a\u0001%:\u00119A\u0011`-C\u0002\u0005%\u0001\u0003BA\u0002I{!qA\"\u0004Z\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0011\u0006CaBD!3\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007!+\u0005B\u0004\t\u0016f\u0013\r!!\u0003\u0011\t\u0005\rA\u0015\n\u0003\b\u0015\u0013I&\u0019AA\u0005!\u0011\t\u0019\u0001*\u0014\u0005\u000f-u\u0015L1\u0001\u0002\nA!\u00111\u0001S)\t\u001di\t&\u0017b\u0001\u0003\u0013\u0001B!a\u0001%V\u00119qRE-C\u0002\u0005%\u0001\u0003BA\u0002I3\"q!%\u0007Z\u0005\u0004\tI\u0001\u0005\u0003\u0002\u0004\u0011vCaBJ\u00173\n\u0007\u0011\u0011\u0002\t\u0005\u0003\u0007!\u000b\u0007B\u0004\u0016be\u0013\r!!\u0003\u0011\t\u0005\rAU\r\u0003\b/kK&\u0019AA\u0005!\u0011\t\u0019\u0001*\u001b\u0005\u000fi%\u0012L1\u0001\u0002\nA!\u00111\u0001S7\t\u001daj,\u0017b\u0001\u0003\u0013\u0001B!a\u0001%r\u00119q\u0014O-C\u0002\u0005%\u0001\u0003BA\u0002Ik\"qA)\u0012Z\u0005\u0004\tI\u0001C\u0004\u0002\u001ae\u0003\u001d\u0001*\u001f\u0011\u000ba\f\t\u0006j\b\t\u000f\u0005u\u0014\fq\u0001%~A)\u00010!\u0015%$!9\u0011Q_-A\u0004\u0011\u0006\u0005#\u0002=\u0002R\u0011\u001e\u0002b\u0002BG3\u0002\u000fAU\u0011\t\u0006q\u0006EC5\u0006\u0005\b\u0007\u000bJ\u00069\u0001SE!\u0015A\u0018\u0011\u000bS\u0018\u0011\u001d!i\"\u0017a\u0002I\u001b\u0003R\u0001_A)IgAq!\"\u0006Z\u0001\b!\u000b\nE\u0003y\u0003#\";\u0004C\u0004\u0007.e\u0003\u001d\u0001*&\u0011\u000ba\f\t\u0006j\u000f\t\u000f\u001d\u0015\u0014\fq\u0001%\u001aB)\u00010!\u0015%@!9\u0001RX-A\u0004\u0011v\u0005#\u0002=\u0002R\u0011\u000e\u0003b\u0002F\u001b3\u0002\u000fA\u0015\u0015\t\u0006q\u0006ECu\t\u0005\b\u0017\u001bL\u00069\u0001SS!\u0015A\u0018\u0011\u000bS&\u0011\u001di))\u0017a\u0002IS\u0003R\u0001_A)I\u001fBqa$\u0018Z\u0001\b!k\u000bE\u0003y\u0003#\"\u001b\u0006C\u0004\u0012Ve\u0003\u001d\u0001*-\u0011\u000ba\f\t\u0006j\u0016\t\u000fM5\u0014\fq\u0001%6B)\u00010!\u0015%\\!9QSU-A\u0004\u0011f\u0006#\u0002=\u0002R\u0011~\u0003bBL\u007f3\u0002\u000fAU\u0018\t\u0006q\u0006EC5\r\u0005\b5kJ\u00069\u0001Sa!\u0015A\u0018\u0011\u000bS4\u0011\u001dij!\u0017a\u0002I\u000b\u0004R\u0001_A)IWBqa(2Z\u0001\b!K\rE\u0003y\u0003#\"{\u0007C\u0004#\u001ef\u0003\u001d\u0001*4\u0011\u000ba\f\t\u0006j\u001d"
)
public interface TupleInstances extends cats.kernel.instances.TupleInstances {
   // $FF: synthetic method
   static Rig tuple1Rig$(final TupleInstances $this, final Rig A0) {
      return $this.tuple1Rig(A0);
   }

   default Rig tuple1Rig(final Rig A0) {
      return new Rig(A0) {
         private final Rig A0$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple1 one() {
            return new Tuple1(this.A0$1.one());
         }

         public Tuple1 plus(final Tuple1 x, final Tuple1 y) {
            return new Tuple1(this.A0$1.plus(x._1(), y._1()));
         }

         public Tuple1 times(final Tuple1 x, final Tuple1 y) {
            return new Tuple1(this.A0$1.times(x._1(), y._1()));
         }

         public Tuple1 zero() {
            return new Tuple1(this.A0$1.zero());
         }

         public {
            this.A0$1 = A0$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple1Ring$(final TupleInstances $this, final Ring A0) {
      return $this.tuple1Ring(A0);
   }

   default Ring tuple1Ring(final Ring A0) {
      return new Ring(A0) {
         private final Ring A0$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple1 one() {
            return new Tuple1(this.A0$2.one());
         }

         public Tuple1 plus(final Tuple1 x, final Tuple1 y) {
            return new Tuple1(this.A0$2.plus(x._1(), y._1()));
         }

         public Tuple1 times(final Tuple1 x, final Tuple1 y) {
            return new Tuple1(this.A0$2.times(x._1(), y._1()));
         }

         public Tuple1 zero() {
            return new Tuple1(this.A0$2.zero());
         }

         public Tuple1 negate(final Tuple1 x) {
            return new Tuple1(this.A0$2.negate(x._1()));
         }

         public {
            this.A0$2 = A0$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple1Rng$(final TupleInstances $this, final Rng A0) {
      return $this.tuple1Rng(A0);
   }

   default Rng tuple1Rng(final Rng A0) {
      return new Rng(A0) {
         private final Rng A0$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple1 plus(final Tuple1 x, final Tuple1 y) {
            return new Tuple1(this.A0$3.plus(x._1(), y._1()));
         }

         public Tuple1 times(final Tuple1 x, final Tuple1 y) {
            return new Tuple1(this.A0$3.times(x._1(), y._1()));
         }

         public Tuple1 zero() {
            return new Tuple1(this.A0$3.zero());
         }

         public Tuple1 negate(final Tuple1 x) {
            return new Tuple1(this.A0$3.negate(x._1()));
         }

         public {
            this.A0$3 = A0$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple1Semiring$(final TupleInstances $this, final Semiring A0) {
      return $this.tuple1Semiring(A0);
   }

   default Semiring tuple1Semiring(final Semiring A0) {
      return new Semiring(A0) {
         private final Semiring A0$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple1 plus(final Tuple1 x, final Tuple1 y) {
            return new Tuple1(this.A0$4.plus(x._1(), y._1()));
         }

         public Tuple1 times(final Tuple1 x, final Tuple1 y) {
            return new Tuple1(this.A0$4.times(x._1(), y._1()));
         }

         public Tuple1 zero() {
            return new Tuple1(this.A0$4.zero());
         }

         public {
            this.A0$4 = A0$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple2Rig$(final TupleInstances $this, final Rig A0, final Rig A1) {
      return $this.tuple2Rig(A0, A1);
   }

   default Rig tuple2Rig(final Rig A0, final Rig A1) {
      return new Rig(A0, A1) {
         private final Rig A0$5;
         private final Rig A1$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple2 one() {
            return new Tuple2(this.A0$5.one(), this.A1$1.one());
         }

         public Tuple2 plus(final Tuple2 x, final Tuple2 y) {
            return new Tuple2(this.A0$5.plus(x._1(), y._1()), this.A1$1.plus(x._2(), y._2()));
         }

         public Tuple2 times(final Tuple2 x, final Tuple2 y) {
            return new Tuple2(this.A0$5.times(x._1(), y._1()), this.A1$1.times(x._2(), y._2()));
         }

         public Tuple2 zero() {
            return new Tuple2(this.A0$5.zero(), this.A1$1.zero());
         }

         public {
            this.A0$5 = A0$5;
            this.A1$1 = A1$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple2Ring$(final TupleInstances $this, final Ring A0, final Ring A1) {
      return $this.tuple2Ring(A0, A1);
   }

   default Ring tuple2Ring(final Ring A0, final Ring A1) {
      return new Ring(A0, A1) {
         private final Ring A0$6;
         private final Ring A1$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple2 one() {
            return new Tuple2(this.A0$6.one(), this.A1$2.one());
         }

         public Tuple2 plus(final Tuple2 x, final Tuple2 y) {
            return new Tuple2(this.A0$6.plus(x._1(), y._1()), this.A1$2.plus(x._2(), y._2()));
         }

         public Tuple2 times(final Tuple2 x, final Tuple2 y) {
            return new Tuple2(this.A0$6.times(x._1(), y._1()), this.A1$2.times(x._2(), y._2()));
         }

         public Tuple2 zero() {
            return new Tuple2(this.A0$6.zero(), this.A1$2.zero());
         }

         public Tuple2 negate(final Tuple2 x) {
            return new Tuple2(this.A0$6.negate(x._1()), this.A1$2.negate(x._2()));
         }

         public {
            this.A0$6 = A0$6;
            this.A1$2 = A1$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple2Rng$(final TupleInstances $this, final Rng A0, final Rng A1) {
      return $this.tuple2Rng(A0, A1);
   }

   default Rng tuple2Rng(final Rng A0, final Rng A1) {
      return new Rng(A0, A1) {
         private final Rng A0$7;
         private final Rng A1$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple2 plus(final Tuple2 x, final Tuple2 y) {
            return new Tuple2(this.A0$7.plus(x._1(), y._1()), this.A1$3.plus(x._2(), y._2()));
         }

         public Tuple2 times(final Tuple2 x, final Tuple2 y) {
            return new Tuple2(this.A0$7.times(x._1(), y._1()), this.A1$3.times(x._2(), y._2()));
         }

         public Tuple2 zero() {
            return new Tuple2(this.A0$7.zero(), this.A1$3.zero());
         }

         public Tuple2 negate(final Tuple2 x) {
            return new Tuple2(this.A0$7.negate(x._1()), this.A1$3.negate(x._2()));
         }

         public {
            this.A0$7 = A0$7;
            this.A1$3 = A1$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple2Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1) {
      return $this.tuple2Semiring(A0, A1);
   }

   default Semiring tuple2Semiring(final Semiring A0, final Semiring A1) {
      return new Semiring(A0, A1) {
         private final Semiring A0$8;
         private final Semiring A1$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple2 plus(final Tuple2 x, final Tuple2 y) {
            return new Tuple2(this.A0$8.plus(x._1(), y._1()), this.A1$4.plus(x._2(), y._2()));
         }

         public Tuple2 times(final Tuple2 x, final Tuple2 y) {
            return new Tuple2(this.A0$8.times(x._1(), y._1()), this.A1$4.times(x._2(), y._2()));
         }

         public Tuple2 zero() {
            return new Tuple2(this.A0$8.zero(), this.A1$4.zero());
         }

         public {
            this.A0$8 = A0$8;
            this.A1$4 = A1$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple3Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2) {
      return $this.tuple3Rig(A0, A1, A2);
   }

   default Rig tuple3Rig(final Rig A0, final Rig A1, final Rig A2) {
      return new Rig(A0, A1, A2) {
         private final Rig A0$9;
         private final Rig A1$5;
         private final Rig A2$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple3 one() {
            return new Tuple3(this.A0$9.one(), this.A1$5.one(), this.A2$1.one());
         }

         public Tuple3 plus(final Tuple3 x, final Tuple3 y) {
            return new Tuple3(this.A0$9.plus(x._1(), y._1()), this.A1$5.plus(x._2(), y._2()), this.A2$1.plus(x._3(), y._3()));
         }

         public Tuple3 times(final Tuple3 x, final Tuple3 y) {
            return new Tuple3(this.A0$9.times(x._1(), y._1()), this.A1$5.times(x._2(), y._2()), this.A2$1.times(x._3(), y._3()));
         }

         public Tuple3 zero() {
            return new Tuple3(this.A0$9.zero(), this.A1$5.zero(), this.A2$1.zero());
         }

         public {
            this.A0$9 = A0$9;
            this.A1$5 = A1$5;
            this.A2$1 = A2$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple3Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2) {
      return $this.tuple3Ring(A0, A1, A2);
   }

   default Ring tuple3Ring(final Ring A0, final Ring A1, final Ring A2) {
      return new Ring(A0, A1, A2) {
         private final Ring A0$10;
         private final Ring A1$6;
         private final Ring A2$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple3 one() {
            return new Tuple3(this.A0$10.one(), this.A1$6.one(), this.A2$2.one());
         }

         public Tuple3 plus(final Tuple3 x, final Tuple3 y) {
            return new Tuple3(this.A0$10.plus(x._1(), y._1()), this.A1$6.plus(x._2(), y._2()), this.A2$2.plus(x._3(), y._3()));
         }

         public Tuple3 times(final Tuple3 x, final Tuple3 y) {
            return new Tuple3(this.A0$10.times(x._1(), y._1()), this.A1$6.times(x._2(), y._2()), this.A2$2.times(x._3(), y._3()));
         }

         public Tuple3 zero() {
            return new Tuple3(this.A0$10.zero(), this.A1$6.zero(), this.A2$2.zero());
         }

         public Tuple3 negate(final Tuple3 x) {
            return new Tuple3(this.A0$10.negate(x._1()), this.A1$6.negate(x._2()), this.A2$2.negate(x._3()));
         }

         public {
            this.A0$10 = A0$10;
            this.A1$6 = A1$6;
            this.A2$2 = A2$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple3Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2) {
      return $this.tuple3Rng(A0, A1, A2);
   }

   default Rng tuple3Rng(final Rng A0, final Rng A1, final Rng A2) {
      return new Rng(A0, A1, A2) {
         private final Rng A0$11;
         private final Rng A1$7;
         private final Rng A2$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple3 plus(final Tuple3 x, final Tuple3 y) {
            return new Tuple3(this.A0$11.plus(x._1(), y._1()), this.A1$7.plus(x._2(), y._2()), this.A2$3.plus(x._3(), y._3()));
         }

         public Tuple3 times(final Tuple3 x, final Tuple3 y) {
            return new Tuple3(this.A0$11.times(x._1(), y._1()), this.A1$7.times(x._2(), y._2()), this.A2$3.times(x._3(), y._3()));
         }

         public Tuple3 zero() {
            return new Tuple3(this.A0$11.zero(), this.A1$7.zero(), this.A2$3.zero());
         }

         public Tuple3 negate(final Tuple3 x) {
            return new Tuple3(this.A0$11.negate(x._1()), this.A1$7.negate(x._2()), this.A2$3.negate(x._3()));
         }

         public {
            this.A0$11 = A0$11;
            this.A1$7 = A1$7;
            this.A2$3 = A2$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple3Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2) {
      return $this.tuple3Semiring(A0, A1, A2);
   }

   default Semiring tuple3Semiring(final Semiring A0, final Semiring A1, final Semiring A2) {
      return new Semiring(A0, A1, A2) {
         private final Semiring A0$12;
         private final Semiring A1$8;
         private final Semiring A2$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple3 plus(final Tuple3 x, final Tuple3 y) {
            return new Tuple3(this.A0$12.plus(x._1(), y._1()), this.A1$8.plus(x._2(), y._2()), this.A2$4.plus(x._3(), y._3()));
         }

         public Tuple3 times(final Tuple3 x, final Tuple3 y) {
            return new Tuple3(this.A0$12.times(x._1(), y._1()), this.A1$8.times(x._2(), y._2()), this.A2$4.times(x._3(), y._3()));
         }

         public Tuple3 zero() {
            return new Tuple3(this.A0$12.zero(), this.A1$8.zero(), this.A2$4.zero());
         }

         public {
            this.A0$12 = A0$12;
            this.A1$8 = A1$8;
            this.A2$4 = A2$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple4Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3) {
      return $this.tuple4Rig(A0, A1, A2, A3);
   }

   default Rig tuple4Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3) {
      return new Rig(A0, A1, A2, A3) {
         private final Rig A0$13;
         private final Rig A1$9;
         private final Rig A2$5;
         private final Rig A3$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple4 one() {
            return new Tuple4(this.A0$13.one(), this.A1$9.one(), this.A2$5.one(), this.A3$1.one());
         }

         public Tuple4 plus(final Tuple4 x, final Tuple4 y) {
            return new Tuple4(this.A0$13.plus(x._1(), y._1()), this.A1$9.plus(x._2(), y._2()), this.A2$5.plus(x._3(), y._3()), this.A3$1.plus(x._4(), y._4()));
         }

         public Tuple4 times(final Tuple4 x, final Tuple4 y) {
            return new Tuple4(this.A0$13.times(x._1(), y._1()), this.A1$9.times(x._2(), y._2()), this.A2$5.times(x._3(), y._3()), this.A3$1.times(x._4(), y._4()));
         }

         public Tuple4 zero() {
            return new Tuple4(this.A0$13.zero(), this.A1$9.zero(), this.A2$5.zero(), this.A3$1.zero());
         }

         public {
            this.A0$13 = A0$13;
            this.A1$9 = A1$9;
            this.A2$5 = A2$5;
            this.A3$1 = A3$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple4Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3) {
      return $this.tuple4Ring(A0, A1, A2, A3);
   }

   default Ring tuple4Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3) {
      return new Ring(A0, A1, A2, A3) {
         private final Ring A0$14;
         private final Ring A1$10;
         private final Ring A2$6;
         private final Ring A3$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple4 one() {
            return new Tuple4(this.A0$14.one(), this.A1$10.one(), this.A2$6.one(), this.A3$2.one());
         }

         public Tuple4 plus(final Tuple4 x, final Tuple4 y) {
            return new Tuple4(this.A0$14.plus(x._1(), y._1()), this.A1$10.plus(x._2(), y._2()), this.A2$6.plus(x._3(), y._3()), this.A3$2.plus(x._4(), y._4()));
         }

         public Tuple4 times(final Tuple4 x, final Tuple4 y) {
            return new Tuple4(this.A0$14.times(x._1(), y._1()), this.A1$10.times(x._2(), y._2()), this.A2$6.times(x._3(), y._3()), this.A3$2.times(x._4(), y._4()));
         }

         public Tuple4 zero() {
            return new Tuple4(this.A0$14.zero(), this.A1$10.zero(), this.A2$6.zero(), this.A3$2.zero());
         }

         public Tuple4 negate(final Tuple4 x) {
            return new Tuple4(this.A0$14.negate(x._1()), this.A1$10.negate(x._2()), this.A2$6.negate(x._3()), this.A3$2.negate(x._4()));
         }

         public {
            this.A0$14 = A0$14;
            this.A1$10 = A1$10;
            this.A2$6 = A2$6;
            this.A3$2 = A3$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple4Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3) {
      return $this.tuple4Rng(A0, A1, A2, A3);
   }

   default Rng tuple4Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3) {
      return new Rng(A0, A1, A2, A3) {
         private final Rng A0$15;
         private final Rng A1$11;
         private final Rng A2$7;
         private final Rng A3$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple4 plus(final Tuple4 x, final Tuple4 y) {
            return new Tuple4(this.A0$15.plus(x._1(), y._1()), this.A1$11.plus(x._2(), y._2()), this.A2$7.plus(x._3(), y._3()), this.A3$3.plus(x._4(), y._4()));
         }

         public Tuple4 times(final Tuple4 x, final Tuple4 y) {
            return new Tuple4(this.A0$15.times(x._1(), y._1()), this.A1$11.times(x._2(), y._2()), this.A2$7.times(x._3(), y._3()), this.A3$3.times(x._4(), y._4()));
         }

         public Tuple4 zero() {
            return new Tuple4(this.A0$15.zero(), this.A1$11.zero(), this.A2$7.zero(), this.A3$3.zero());
         }

         public Tuple4 negate(final Tuple4 x) {
            return new Tuple4(this.A0$15.negate(x._1()), this.A1$11.negate(x._2()), this.A2$7.negate(x._3()), this.A3$3.negate(x._4()));
         }

         public {
            this.A0$15 = A0$15;
            this.A1$11 = A1$11;
            this.A2$7 = A2$7;
            this.A3$3 = A3$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple4Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3) {
      return $this.tuple4Semiring(A0, A1, A2, A3);
   }

   default Semiring tuple4Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3) {
      return new Semiring(A0, A1, A2, A3) {
         private final Semiring A0$16;
         private final Semiring A1$12;
         private final Semiring A2$8;
         private final Semiring A3$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple4 plus(final Tuple4 x, final Tuple4 y) {
            return new Tuple4(this.A0$16.plus(x._1(), y._1()), this.A1$12.plus(x._2(), y._2()), this.A2$8.plus(x._3(), y._3()), this.A3$4.plus(x._4(), y._4()));
         }

         public Tuple4 times(final Tuple4 x, final Tuple4 y) {
            return new Tuple4(this.A0$16.times(x._1(), y._1()), this.A1$12.times(x._2(), y._2()), this.A2$8.times(x._3(), y._3()), this.A3$4.times(x._4(), y._4()));
         }

         public Tuple4 zero() {
            return new Tuple4(this.A0$16.zero(), this.A1$12.zero(), this.A2$8.zero(), this.A3$4.zero());
         }

         public {
            this.A0$16 = A0$16;
            this.A1$12 = A1$12;
            this.A2$8 = A2$8;
            this.A3$4 = A3$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple5Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4) {
      return $this.tuple5Rig(A0, A1, A2, A3, A4);
   }

   default Rig tuple5Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4) {
      return new Rig(A0, A1, A2, A3, A4) {
         private final Rig A0$17;
         private final Rig A1$13;
         private final Rig A2$9;
         private final Rig A3$5;
         private final Rig A4$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple5 one() {
            return new Tuple5(this.A0$17.one(), this.A1$13.one(), this.A2$9.one(), this.A3$5.one(), this.A4$1.one());
         }

         public Tuple5 plus(final Tuple5 x, final Tuple5 y) {
            return new Tuple5(this.A0$17.plus(x._1(), y._1()), this.A1$13.plus(x._2(), y._2()), this.A2$9.plus(x._3(), y._3()), this.A3$5.plus(x._4(), y._4()), this.A4$1.plus(x._5(), y._5()));
         }

         public Tuple5 times(final Tuple5 x, final Tuple5 y) {
            return new Tuple5(this.A0$17.times(x._1(), y._1()), this.A1$13.times(x._2(), y._2()), this.A2$9.times(x._3(), y._3()), this.A3$5.times(x._4(), y._4()), this.A4$1.times(x._5(), y._5()));
         }

         public Tuple5 zero() {
            return new Tuple5(this.A0$17.zero(), this.A1$13.zero(), this.A2$9.zero(), this.A3$5.zero(), this.A4$1.zero());
         }

         public {
            this.A0$17 = A0$17;
            this.A1$13 = A1$13;
            this.A2$9 = A2$9;
            this.A3$5 = A3$5;
            this.A4$1 = A4$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple5Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4) {
      return $this.tuple5Ring(A0, A1, A2, A3, A4);
   }

   default Ring tuple5Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4) {
      return new Ring(A0, A1, A2, A3, A4) {
         private final Ring A0$18;
         private final Ring A1$14;
         private final Ring A2$10;
         private final Ring A3$6;
         private final Ring A4$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple5 one() {
            return new Tuple5(this.A0$18.one(), this.A1$14.one(), this.A2$10.one(), this.A3$6.one(), this.A4$2.one());
         }

         public Tuple5 plus(final Tuple5 x, final Tuple5 y) {
            return new Tuple5(this.A0$18.plus(x._1(), y._1()), this.A1$14.plus(x._2(), y._2()), this.A2$10.plus(x._3(), y._3()), this.A3$6.plus(x._4(), y._4()), this.A4$2.plus(x._5(), y._5()));
         }

         public Tuple5 times(final Tuple5 x, final Tuple5 y) {
            return new Tuple5(this.A0$18.times(x._1(), y._1()), this.A1$14.times(x._2(), y._2()), this.A2$10.times(x._3(), y._3()), this.A3$6.times(x._4(), y._4()), this.A4$2.times(x._5(), y._5()));
         }

         public Tuple5 zero() {
            return new Tuple5(this.A0$18.zero(), this.A1$14.zero(), this.A2$10.zero(), this.A3$6.zero(), this.A4$2.zero());
         }

         public Tuple5 negate(final Tuple5 x) {
            return new Tuple5(this.A0$18.negate(x._1()), this.A1$14.negate(x._2()), this.A2$10.negate(x._3()), this.A3$6.negate(x._4()), this.A4$2.negate(x._5()));
         }

         public {
            this.A0$18 = A0$18;
            this.A1$14 = A1$14;
            this.A2$10 = A2$10;
            this.A3$6 = A3$6;
            this.A4$2 = A4$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple5Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4) {
      return $this.tuple5Rng(A0, A1, A2, A3, A4);
   }

   default Rng tuple5Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4) {
      return new Rng(A0, A1, A2, A3, A4) {
         private final Rng A0$19;
         private final Rng A1$15;
         private final Rng A2$11;
         private final Rng A3$7;
         private final Rng A4$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple5 plus(final Tuple5 x, final Tuple5 y) {
            return new Tuple5(this.A0$19.plus(x._1(), y._1()), this.A1$15.plus(x._2(), y._2()), this.A2$11.plus(x._3(), y._3()), this.A3$7.plus(x._4(), y._4()), this.A4$3.plus(x._5(), y._5()));
         }

         public Tuple5 times(final Tuple5 x, final Tuple5 y) {
            return new Tuple5(this.A0$19.times(x._1(), y._1()), this.A1$15.times(x._2(), y._2()), this.A2$11.times(x._3(), y._3()), this.A3$7.times(x._4(), y._4()), this.A4$3.times(x._5(), y._5()));
         }

         public Tuple5 zero() {
            return new Tuple5(this.A0$19.zero(), this.A1$15.zero(), this.A2$11.zero(), this.A3$7.zero(), this.A4$3.zero());
         }

         public Tuple5 negate(final Tuple5 x) {
            return new Tuple5(this.A0$19.negate(x._1()), this.A1$15.negate(x._2()), this.A2$11.negate(x._3()), this.A3$7.negate(x._4()), this.A4$3.negate(x._5()));
         }

         public {
            this.A0$19 = A0$19;
            this.A1$15 = A1$15;
            this.A2$11 = A2$11;
            this.A3$7 = A3$7;
            this.A4$3 = A4$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple5Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4) {
      return $this.tuple5Semiring(A0, A1, A2, A3, A4);
   }

   default Semiring tuple5Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4) {
      return new Semiring(A0, A1, A2, A3, A4) {
         private final Semiring A0$20;
         private final Semiring A1$16;
         private final Semiring A2$12;
         private final Semiring A3$8;
         private final Semiring A4$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple5 plus(final Tuple5 x, final Tuple5 y) {
            return new Tuple5(this.A0$20.plus(x._1(), y._1()), this.A1$16.plus(x._2(), y._2()), this.A2$12.plus(x._3(), y._3()), this.A3$8.plus(x._4(), y._4()), this.A4$4.plus(x._5(), y._5()));
         }

         public Tuple5 times(final Tuple5 x, final Tuple5 y) {
            return new Tuple5(this.A0$20.times(x._1(), y._1()), this.A1$16.times(x._2(), y._2()), this.A2$12.times(x._3(), y._3()), this.A3$8.times(x._4(), y._4()), this.A4$4.times(x._5(), y._5()));
         }

         public Tuple5 zero() {
            return new Tuple5(this.A0$20.zero(), this.A1$16.zero(), this.A2$12.zero(), this.A3$8.zero(), this.A4$4.zero());
         }

         public {
            this.A0$20 = A0$20;
            this.A1$16 = A1$16;
            this.A2$12 = A2$12;
            this.A3$8 = A3$8;
            this.A4$4 = A4$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple6Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5) {
      return $this.tuple6Rig(A0, A1, A2, A3, A4, A5);
   }

   default Rig tuple6Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5) {
      return new Rig(A0, A1, A2, A3, A4, A5) {
         private final Rig A0$21;
         private final Rig A1$17;
         private final Rig A2$13;
         private final Rig A3$9;
         private final Rig A4$5;
         private final Rig A5$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple6 one() {
            return new Tuple6(this.A0$21.one(), this.A1$17.one(), this.A2$13.one(), this.A3$9.one(), this.A4$5.one(), this.A5$1.one());
         }

         public Tuple6 plus(final Tuple6 x, final Tuple6 y) {
            return new Tuple6(this.A0$21.plus(x._1(), y._1()), this.A1$17.plus(x._2(), y._2()), this.A2$13.plus(x._3(), y._3()), this.A3$9.plus(x._4(), y._4()), this.A4$5.plus(x._5(), y._5()), this.A5$1.plus(x._6(), y._6()));
         }

         public Tuple6 times(final Tuple6 x, final Tuple6 y) {
            return new Tuple6(this.A0$21.times(x._1(), y._1()), this.A1$17.times(x._2(), y._2()), this.A2$13.times(x._3(), y._3()), this.A3$9.times(x._4(), y._4()), this.A4$5.times(x._5(), y._5()), this.A5$1.times(x._6(), y._6()));
         }

         public Tuple6 zero() {
            return new Tuple6(this.A0$21.zero(), this.A1$17.zero(), this.A2$13.zero(), this.A3$9.zero(), this.A4$5.zero(), this.A5$1.zero());
         }

         public {
            this.A0$21 = A0$21;
            this.A1$17 = A1$17;
            this.A2$13 = A2$13;
            this.A3$9 = A3$9;
            this.A4$5 = A4$5;
            this.A5$1 = A5$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple6Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5) {
      return $this.tuple6Ring(A0, A1, A2, A3, A4, A5);
   }

   default Ring tuple6Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5) {
      return new Ring(A0, A1, A2, A3, A4, A5) {
         private final Ring A0$22;
         private final Ring A1$18;
         private final Ring A2$14;
         private final Ring A3$10;
         private final Ring A4$6;
         private final Ring A5$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple6 one() {
            return new Tuple6(this.A0$22.one(), this.A1$18.one(), this.A2$14.one(), this.A3$10.one(), this.A4$6.one(), this.A5$2.one());
         }

         public Tuple6 plus(final Tuple6 x, final Tuple6 y) {
            return new Tuple6(this.A0$22.plus(x._1(), y._1()), this.A1$18.plus(x._2(), y._2()), this.A2$14.plus(x._3(), y._3()), this.A3$10.plus(x._4(), y._4()), this.A4$6.plus(x._5(), y._5()), this.A5$2.plus(x._6(), y._6()));
         }

         public Tuple6 times(final Tuple6 x, final Tuple6 y) {
            return new Tuple6(this.A0$22.times(x._1(), y._1()), this.A1$18.times(x._2(), y._2()), this.A2$14.times(x._3(), y._3()), this.A3$10.times(x._4(), y._4()), this.A4$6.times(x._5(), y._5()), this.A5$2.times(x._6(), y._6()));
         }

         public Tuple6 zero() {
            return new Tuple6(this.A0$22.zero(), this.A1$18.zero(), this.A2$14.zero(), this.A3$10.zero(), this.A4$6.zero(), this.A5$2.zero());
         }

         public Tuple6 negate(final Tuple6 x) {
            return new Tuple6(this.A0$22.negate(x._1()), this.A1$18.negate(x._2()), this.A2$14.negate(x._3()), this.A3$10.negate(x._4()), this.A4$6.negate(x._5()), this.A5$2.negate(x._6()));
         }

         public {
            this.A0$22 = A0$22;
            this.A1$18 = A1$18;
            this.A2$14 = A2$14;
            this.A3$10 = A3$10;
            this.A4$6 = A4$6;
            this.A5$2 = A5$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple6Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5) {
      return $this.tuple6Rng(A0, A1, A2, A3, A4, A5);
   }

   default Rng tuple6Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5) {
      return new Rng(A0, A1, A2, A3, A4, A5) {
         private final Rng A0$23;
         private final Rng A1$19;
         private final Rng A2$15;
         private final Rng A3$11;
         private final Rng A4$7;
         private final Rng A5$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple6 plus(final Tuple6 x, final Tuple6 y) {
            return new Tuple6(this.A0$23.plus(x._1(), y._1()), this.A1$19.plus(x._2(), y._2()), this.A2$15.plus(x._3(), y._3()), this.A3$11.plus(x._4(), y._4()), this.A4$7.plus(x._5(), y._5()), this.A5$3.plus(x._6(), y._6()));
         }

         public Tuple6 times(final Tuple6 x, final Tuple6 y) {
            return new Tuple6(this.A0$23.times(x._1(), y._1()), this.A1$19.times(x._2(), y._2()), this.A2$15.times(x._3(), y._3()), this.A3$11.times(x._4(), y._4()), this.A4$7.times(x._5(), y._5()), this.A5$3.times(x._6(), y._6()));
         }

         public Tuple6 zero() {
            return new Tuple6(this.A0$23.zero(), this.A1$19.zero(), this.A2$15.zero(), this.A3$11.zero(), this.A4$7.zero(), this.A5$3.zero());
         }

         public Tuple6 negate(final Tuple6 x) {
            return new Tuple6(this.A0$23.negate(x._1()), this.A1$19.negate(x._2()), this.A2$15.negate(x._3()), this.A3$11.negate(x._4()), this.A4$7.negate(x._5()), this.A5$3.negate(x._6()));
         }

         public {
            this.A0$23 = A0$23;
            this.A1$19 = A1$19;
            this.A2$15 = A2$15;
            this.A3$11 = A3$11;
            this.A4$7 = A4$7;
            this.A5$3 = A5$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple6Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5) {
      return $this.tuple6Semiring(A0, A1, A2, A3, A4, A5);
   }

   default Semiring tuple6Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5) {
      return new Semiring(A0, A1, A2, A3, A4, A5) {
         private final Semiring A0$24;
         private final Semiring A1$20;
         private final Semiring A2$16;
         private final Semiring A3$12;
         private final Semiring A4$8;
         private final Semiring A5$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple6 plus(final Tuple6 x, final Tuple6 y) {
            return new Tuple6(this.A0$24.plus(x._1(), y._1()), this.A1$20.plus(x._2(), y._2()), this.A2$16.plus(x._3(), y._3()), this.A3$12.plus(x._4(), y._4()), this.A4$8.plus(x._5(), y._5()), this.A5$4.plus(x._6(), y._6()));
         }

         public Tuple6 times(final Tuple6 x, final Tuple6 y) {
            return new Tuple6(this.A0$24.times(x._1(), y._1()), this.A1$20.times(x._2(), y._2()), this.A2$16.times(x._3(), y._3()), this.A3$12.times(x._4(), y._4()), this.A4$8.times(x._5(), y._5()), this.A5$4.times(x._6(), y._6()));
         }

         public Tuple6 zero() {
            return new Tuple6(this.A0$24.zero(), this.A1$20.zero(), this.A2$16.zero(), this.A3$12.zero(), this.A4$8.zero(), this.A5$4.zero());
         }

         public {
            this.A0$24 = A0$24;
            this.A1$20 = A1$20;
            this.A2$16 = A2$16;
            this.A3$12 = A3$12;
            this.A4$8 = A4$8;
            this.A5$4 = A5$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple7Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6) {
      return $this.tuple7Rig(A0, A1, A2, A3, A4, A5, A6);
   }

   default Rig tuple7Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6) {
         private final Rig A0$25;
         private final Rig A1$21;
         private final Rig A2$17;
         private final Rig A3$13;
         private final Rig A4$9;
         private final Rig A5$5;
         private final Rig A6$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple7 one() {
            return new Tuple7(this.A0$25.one(), this.A1$21.one(), this.A2$17.one(), this.A3$13.one(), this.A4$9.one(), this.A5$5.one(), this.A6$1.one());
         }

         public Tuple7 plus(final Tuple7 x, final Tuple7 y) {
            return new Tuple7(this.A0$25.plus(x._1(), y._1()), this.A1$21.plus(x._2(), y._2()), this.A2$17.plus(x._3(), y._3()), this.A3$13.plus(x._4(), y._4()), this.A4$9.plus(x._5(), y._5()), this.A5$5.plus(x._6(), y._6()), this.A6$1.plus(x._7(), y._7()));
         }

         public Tuple7 times(final Tuple7 x, final Tuple7 y) {
            return new Tuple7(this.A0$25.times(x._1(), y._1()), this.A1$21.times(x._2(), y._2()), this.A2$17.times(x._3(), y._3()), this.A3$13.times(x._4(), y._4()), this.A4$9.times(x._5(), y._5()), this.A5$5.times(x._6(), y._6()), this.A6$1.times(x._7(), y._7()));
         }

         public Tuple7 zero() {
            return new Tuple7(this.A0$25.zero(), this.A1$21.zero(), this.A2$17.zero(), this.A3$13.zero(), this.A4$9.zero(), this.A5$5.zero(), this.A6$1.zero());
         }

         public {
            this.A0$25 = A0$25;
            this.A1$21 = A1$21;
            this.A2$17 = A2$17;
            this.A3$13 = A3$13;
            this.A4$9 = A4$9;
            this.A5$5 = A5$5;
            this.A6$1 = A6$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple7Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6) {
      return $this.tuple7Ring(A0, A1, A2, A3, A4, A5, A6);
   }

   default Ring tuple7Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6) {
         private final Ring A0$26;
         private final Ring A1$22;
         private final Ring A2$18;
         private final Ring A3$14;
         private final Ring A4$10;
         private final Ring A5$6;
         private final Ring A6$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple7 one() {
            return new Tuple7(this.A0$26.one(), this.A1$22.one(), this.A2$18.one(), this.A3$14.one(), this.A4$10.one(), this.A5$6.one(), this.A6$2.one());
         }

         public Tuple7 plus(final Tuple7 x, final Tuple7 y) {
            return new Tuple7(this.A0$26.plus(x._1(), y._1()), this.A1$22.plus(x._2(), y._2()), this.A2$18.plus(x._3(), y._3()), this.A3$14.plus(x._4(), y._4()), this.A4$10.plus(x._5(), y._5()), this.A5$6.plus(x._6(), y._6()), this.A6$2.plus(x._7(), y._7()));
         }

         public Tuple7 times(final Tuple7 x, final Tuple7 y) {
            return new Tuple7(this.A0$26.times(x._1(), y._1()), this.A1$22.times(x._2(), y._2()), this.A2$18.times(x._3(), y._3()), this.A3$14.times(x._4(), y._4()), this.A4$10.times(x._5(), y._5()), this.A5$6.times(x._6(), y._6()), this.A6$2.times(x._7(), y._7()));
         }

         public Tuple7 zero() {
            return new Tuple7(this.A0$26.zero(), this.A1$22.zero(), this.A2$18.zero(), this.A3$14.zero(), this.A4$10.zero(), this.A5$6.zero(), this.A6$2.zero());
         }

         public Tuple7 negate(final Tuple7 x) {
            return new Tuple7(this.A0$26.negate(x._1()), this.A1$22.negate(x._2()), this.A2$18.negate(x._3()), this.A3$14.negate(x._4()), this.A4$10.negate(x._5()), this.A5$6.negate(x._6()), this.A6$2.negate(x._7()));
         }

         public {
            this.A0$26 = A0$26;
            this.A1$22 = A1$22;
            this.A2$18 = A2$18;
            this.A3$14 = A3$14;
            this.A4$10 = A4$10;
            this.A5$6 = A5$6;
            this.A6$2 = A6$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple7Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6) {
      return $this.tuple7Rng(A0, A1, A2, A3, A4, A5, A6);
   }

   default Rng tuple7Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6) {
         private final Rng A0$27;
         private final Rng A1$23;
         private final Rng A2$19;
         private final Rng A3$15;
         private final Rng A4$11;
         private final Rng A5$7;
         private final Rng A6$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple7 plus(final Tuple7 x, final Tuple7 y) {
            return new Tuple7(this.A0$27.plus(x._1(), y._1()), this.A1$23.plus(x._2(), y._2()), this.A2$19.plus(x._3(), y._3()), this.A3$15.plus(x._4(), y._4()), this.A4$11.plus(x._5(), y._5()), this.A5$7.plus(x._6(), y._6()), this.A6$3.plus(x._7(), y._7()));
         }

         public Tuple7 times(final Tuple7 x, final Tuple7 y) {
            return new Tuple7(this.A0$27.times(x._1(), y._1()), this.A1$23.times(x._2(), y._2()), this.A2$19.times(x._3(), y._3()), this.A3$15.times(x._4(), y._4()), this.A4$11.times(x._5(), y._5()), this.A5$7.times(x._6(), y._6()), this.A6$3.times(x._7(), y._7()));
         }

         public Tuple7 zero() {
            return new Tuple7(this.A0$27.zero(), this.A1$23.zero(), this.A2$19.zero(), this.A3$15.zero(), this.A4$11.zero(), this.A5$7.zero(), this.A6$3.zero());
         }

         public Tuple7 negate(final Tuple7 x) {
            return new Tuple7(this.A0$27.negate(x._1()), this.A1$23.negate(x._2()), this.A2$19.negate(x._3()), this.A3$15.negate(x._4()), this.A4$11.negate(x._5()), this.A5$7.negate(x._6()), this.A6$3.negate(x._7()));
         }

         public {
            this.A0$27 = A0$27;
            this.A1$23 = A1$23;
            this.A2$19 = A2$19;
            this.A3$15 = A3$15;
            this.A4$11 = A4$11;
            this.A5$7 = A5$7;
            this.A6$3 = A6$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple7Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6) {
      return $this.tuple7Semiring(A0, A1, A2, A3, A4, A5, A6);
   }

   default Semiring tuple7Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6) {
         private final Semiring A0$28;
         private final Semiring A1$24;
         private final Semiring A2$20;
         private final Semiring A3$16;
         private final Semiring A4$12;
         private final Semiring A5$8;
         private final Semiring A6$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple7 plus(final Tuple7 x, final Tuple7 y) {
            return new Tuple7(this.A0$28.plus(x._1(), y._1()), this.A1$24.plus(x._2(), y._2()), this.A2$20.plus(x._3(), y._3()), this.A3$16.plus(x._4(), y._4()), this.A4$12.plus(x._5(), y._5()), this.A5$8.plus(x._6(), y._6()), this.A6$4.plus(x._7(), y._7()));
         }

         public Tuple7 times(final Tuple7 x, final Tuple7 y) {
            return new Tuple7(this.A0$28.times(x._1(), y._1()), this.A1$24.times(x._2(), y._2()), this.A2$20.times(x._3(), y._3()), this.A3$16.times(x._4(), y._4()), this.A4$12.times(x._5(), y._5()), this.A5$8.times(x._6(), y._6()), this.A6$4.times(x._7(), y._7()));
         }

         public Tuple7 zero() {
            return new Tuple7(this.A0$28.zero(), this.A1$24.zero(), this.A2$20.zero(), this.A3$16.zero(), this.A4$12.zero(), this.A5$8.zero(), this.A6$4.zero());
         }

         public {
            this.A0$28 = A0$28;
            this.A1$24 = A1$24;
            this.A2$20 = A2$20;
            this.A3$16 = A3$16;
            this.A4$12 = A4$12;
            this.A5$8 = A5$8;
            this.A6$4 = A6$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple8Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7) {
      return $this.tuple8Rig(A0, A1, A2, A3, A4, A5, A6, A7);
   }

   default Rig tuple8Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7) {
         private final Rig A0$29;
         private final Rig A1$25;
         private final Rig A2$21;
         private final Rig A3$17;
         private final Rig A4$13;
         private final Rig A5$9;
         private final Rig A6$5;
         private final Rig A7$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple8 one() {
            return new Tuple8(this.A0$29.one(), this.A1$25.one(), this.A2$21.one(), this.A3$17.one(), this.A4$13.one(), this.A5$9.one(), this.A6$5.one(), this.A7$1.one());
         }

         public Tuple8 plus(final Tuple8 x, final Tuple8 y) {
            return new Tuple8(this.A0$29.plus(x._1(), y._1()), this.A1$25.plus(x._2(), y._2()), this.A2$21.plus(x._3(), y._3()), this.A3$17.plus(x._4(), y._4()), this.A4$13.plus(x._5(), y._5()), this.A5$9.plus(x._6(), y._6()), this.A6$5.plus(x._7(), y._7()), this.A7$1.plus(x._8(), y._8()));
         }

         public Tuple8 times(final Tuple8 x, final Tuple8 y) {
            return new Tuple8(this.A0$29.times(x._1(), y._1()), this.A1$25.times(x._2(), y._2()), this.A2$21.times(x._3(), y._3()), this.A3$17.times(x._4(), y._4()), this.A4$13.times(x._5(), y._5()), this.A5$9.times(x._6(), y._6()), this.A6$5.times(x._7(), y._7()), this.A7$1.times(x._8(), y._8()));
         }

         public Tuple8 zero() {
            return new Tuple8(this.A0$29.zero(), this.A1$25.zero(), this.A2$21.zero(), this.A3$17.zero(), this.A4$13.zero(), this.A5$9.zero(), this.A6$5.zero(), this.A7$1.zero());
         }

         public {
            this.A0$29 = A0$29;
            this.A1$25 = A1$25;
            this.A2$21 = A2$21;
            this.A3$17 = A3$17;
            this.A4$13 = A4$13;
            this.A5$9 = A5$9;
            this.A6$5 = A6$5;
            this.A7$1 = A7$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple8Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7) {
      return $this.tuple8Ring(A0, A1, A2, A3, A4, A5, A6, A7);
   }

   default Ring tuple8Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7) {
         private final Ring A0$30;
         private final Ring A1$26;
         private final Ring A2$22;
         private final Ring A3$18;
         private final Ring A4$14;
         private final Ring A5$10;
         private final Ring A6$6;
         private final Ring A7$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple8 one() {
            return new Tuple8(this.A0$30.one(), this.A1$26.one(), this.A2$22.one(), this.A3$18.one(), this.A4$14.one(), this.A5$10.one(), this.A6$6.one(), this.A7$2.one());
         }

         public Tuple8 plus(final Tuple8 x, final Tuple8 y) {
            return new Tuple8(this.A0$30.plus(x._1(), y._1()), this.A1$26.plus(x._2(), y._2()), this.A2$22.plus(x._3(), y._3()), this.A3$18.plus(x._4(), y._4()), this.A4$14.plus(x._5(), y._5()), this.A5$10.plus(x._6(), y._6()), this.A6$6.plus(x._7(), y._7()), this.A7$2.plus(x._8(), y._8()));
         }

         public Tuple8 times(final Tuple8 x, final Tuple8 y) {
            return new Tuple8(this.A0$30.times(x._1(), y._1()), this.A1$26.times(x._2(), y._2()), this.A2$22.times(x._3(), y._3()), this.A3$18.times(x._4(), y._4()), this.A4$14.times(x._5(), y._5()), this.A5$10.times(x._6(), y._6()), this.A6$6.times(x._7(), y._7()), this.A7$2.times(x._8(), y._8()));
         }

         public Tuple8 zero() {
            return new Tuple8(this.A0$30.zero(), this.A1$26.zero(), this.A2$22.zero(), this.A3$18.zero(), this.A4$14.zero(), this.A5$10.zero(), this.A6$6.zero(), this.A7$2.zero());
         }

         public Tuple8 negate(final Tuple8 x) {
            return new Tuple8(this.A0$30.negate(x._1()), this.A1$26.negate(x._2()), this.A2$22.negate(x._3()), this.A3$18.negate(x._4()), this.A4$14.negate(x._5()), this.A5$10.negate(x._6()), this.A6$6.negate(x._7()), this.A7$2.negate(x._8()));
         }

         public {
            this.A0$30 = A0$30;
            this.A1$26 = A1$26;
            this.A2$22 = A2$22;
            this.A3$18 = A3$18;
            this.A4$14 = A4$14;
            this.A5$10 = A5$10;
            this.A6$6 = A6$6;
            this.A7$2 = A7$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple8Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7) {
      return $this.tuple8Rng(A0, A1, A2, A3, A4, A5, A6, A7);
   }

   default Rng tuple8Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7) {
         private final Rng A0$31;
         private final Rng A1$27;
         private final Rng A2$23;
         private final Rng A3$19;
         private final Rng A4$15;
         private final Rng A5$11;
         private final Rng A6$7;
         private final Rng A7$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple8 plus(final Tuple8 x, final Tuple8 y) {
            return new Tuple8(this.A0$31.plus(x._1(), y._1()), this.A1$27.plus(x._2(), y._2()), this.A2$23.plus(x._3(), y._3()), this.A3$19.plus(x._4(), y._4()), this.A4$15.plus(x._5(), y._5()), this.A5$11.plus(x._6(), y._6()), this.A6$7.plus(x._7(), y._7()), this.A7$3.plus(x._8(), y._8()));
         }

         public Tuple8 times(final Tuple8 x, final Tuple8 y) {
            return new Tuple8(this.A0$31.times(x._1(), y._1()), this.A1$27.times(x._2(), y._2()), this.A2$23.times(x._3(), y._3()), this.A3$19.times(x._4(), y._4()), this.A4$15.times(x._5(), y._5()), this.A5$11.times(x._6(), y._6()), this.A6$7.times(x._7(), y._7()), this.A7$3.times(x._8(), y._8()));
         }

         public Tuple8 zero() {
            return new Tuple8(this.A0$31.zero(), this.A1$27.zero(), this.A2$23.zero(), this.A3$19.zero(), this.A4$15.zero(), this.A5$11.zero(), this.A6$7.zero(), this.A7$3.zero());
         }

         public Tuple8 negate(final Tuple8 x) {
            return new Tuple8(this.A0$31.negate(x._1()), this.A1$27.negate(x._2()), this.A2$23.negate(x._3()), this.A3$19.negate(x._4()), this.A4$15.negate(x._5()), this.A5$11.negate(x._6()), this.A6$7.negate(x._7()), this.A7$3.negate(x._8()));
         }

         public {
            this.A0$31 = A0$31;
            this.A1$27 = A1$27;
            this.A2$23 = A2$23;
            this.A3$19 = A3$19;
            this.A4$15 = A4$15;
            this.A5$11 = A5$11;
            this.A6$7 = A6$7;
            this.A7$3 = A7$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple8Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7) {
      return $this.tuple8Semiring(A0, A1, A2, A3, A4, A5, A6, A7);
   }

   default Semiring tuple8Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7) {
         private final Semiring A0$32;
         private final Semiring A1$28;
         private final Semiring A2$24;
         private final Semiring A3$20;
         private final Semiring A4$16;
         private final Semiring A5$12;
         private final Semiring A6$8;
         private final Semiring A7$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple8 plus(final Tuple8 x, final Tuple8 y) {
            return new Tuple8(this.A0$32.plus(x._1(), y._1()), this.A1$28.plus(x._2(), y._2()), this.A2$24.plus(x._3(), y._3()), this.A3$20.plus(x._4(), y._4()), this.A4$16.plus(x._5(), y._5()), this.A5$12.plus(x._6(), y._6()), this.A6$8.plus(x._7(), y._7()), this.A7$4.plus(x._8(), y._8()));
         }

         public Tuple8 times(final Tuple8 x, final Tuple8 y) {
            return new Tuple8(this.A0$32.times(x._1(), y._1()), this.A1$28.times(x._2(), y._2()), this.A2$24.times(x._3(), y._3()), this.A3$20.times(x._4(), y._4()), this.A4$16.times(x._5(), y._5()), this.A5$12.times(x._6(), y._6()), this.A6$8.times(x._7(), y._7()), this.A7$4.times(x._8(), y._8()));
         }

         public Tuple8 zero() {
            return new Tuple8(this.A0$32.zero(), this.A1$28.zero(), this.A2$24.zero(), this.A3$20.zero(), this.A4$16.zero(), this.A5$12.zero(), this.A6$8.zero(), this.A7$4.zero());
         }

         public {
            this.A0$32 = A0$32;
            this.A1$28 = A1$28;
            this.A2$24 = A2$24;
            this.A3$20 = A3$20;
            this.A4$16 = A4$16;
            this.A5$12 = A5$12;
            this.A6$8 = A6$8;
            this.A7$4 = A7$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple9Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8) {
      return $this.tuple9Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8);
   }

   default Rig tuple9Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8) {
         private final Rig A0$33;
         private final Rig A1$29;
         private final Rig A2$25;
         private final Rig A3$21;
         private final Rig A4$17;
         private final Rig A5$13;
         private final Rig A6$9;
         private final Rig A7$5;
         private final Rig A8$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple9 one() {
            return new Tuple9(this.A0$33.one(), this.A1$29.one(), this.A2$25.one(), this.A3$21.one(), this.A4$17.one(), this.A5$13.one(), this.A6$9.one(), this.A7$5.one(), this.A8$1.one());
         }

         public Tuple9 plus(final Tuple9 x, final Tuple9 y) {
            return new Tuple9(this.A0$33.plus(x._1(), y._1()), this.A1$29.plus(x._2(), y._2()), this.A2$25.plus(x._3(), y._3()), this.A3$21.plus(x._4(), y._4()), this.A4$17.plus(x._5(), y._5()), this.A5$13.plus(x._6(), y._6()), this.A6$9.plus(x._7(), y._7()), this.A7$5.plus(x._8(), y._8()), this.A8$1.plus(x._9(), y._9()));
         }

         public Tuple9 times(final Tuple9 x, final Tuple9 y) {
            return new Tuple9(this.A0$33.times(x._1(), y._1()), this.A1$29.times(x._2(), y._2()), this.A2$25.times(x._3(), y._3()), this.A3$21.times(x._4(), y._4()), this.A4$17.times(x._5(), y._5()), this.A5$13.times(x._6(), y._6()), this.A6$9.times(x._7(), y._7()), this.A7$5.times(x._8(), y._8()), this.A8$1.times(x._9(), y._9()));
         }

         public Tuple9 zero() {
            return new Tuple9(this.A0$33.zero(), this.A1$29.zero(), this.A2$25.zero(), this.A3$21.zero(), this.A4$17.zero(), this.A5$13.zero(), this.A6$9.zero(), this.A7$5.zero(), this.A8$1.zero());
         }

         public {
            this.A0$33 = A0$33;
            this.A1$29 = A1$29;
            this.A2$25 = A2$25;
            this.A3$21 = A3$21;
            this.A4$17 = A4$17;
            this.A5$13 = A5$13;
            this.A6$9 = A6$9;
            this.A7$5 = A7$5;
            this.A8$1 = A8$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple9Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8) {
      return $this.tuple9Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8);
   }

   default Ring tuple9Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8) {
         private final Ring A0$34;
         private final Ring A1$30;
         private final Ring A2$26;
         private final Ring A3$22;
         private final Ring A4$18;
         private final Ring A5$14;
         private final Ring A6$10;
         private final Ring A7$6;
         private final Ring A8$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple9 one() {
            return new Tuple9(this.A0$34.one(), this.A1$30.one(), this.A2$26.one(), this.A3$22.one(), this.A4$18.one(), this.A5$14.one(), this.A6$10.one(), this.A7$6.one(), this.A8$2.one());
         }

         public Tuple9 plus(final Tuple9 x, final Tuple9 y) {
            return new Tuple9(this.A0$34.plus(x._1(), y._1()), this.A1$30.plus(x._2(), y._2()), this.A2$26.plus(x._3(), y._3()), this.A3$22.plus(x._4(), y._4()), this.A4$18.plus(x._5(), y._5()), this.A5$14.plus(x._6(), y._6()), this.A6$10.plus(x._7(), y._7()), this.A7$6.plus(x._8(), y._8()), this.A8$2.plus(x._9(), y._9()));
         }

         public Tuple9 times(final Tuple9 x, final Tuple9 y) {
            return new Tuple9(this.A0$34.times(x._1(), y._1()), this.A1$30.times(x._2(), y._2()), this.A2$26.times(x._3(), y._3()), this.A3$22.times(x._4(), y._4()), this.A4$18.times(x._5(), y._5()), this.A5$14.times(x._6(), y._6()), this.A6$10.times(x._7(), y._7()), this.A7$6.times(x._8(), y._8()), this.A8$2.times(x._9(), y._9()));
         }

         public Tuple9 zero() {
            return new Tuple9(this.A0$34.zero(), this.A1$30.zero(), this.A2$26.zero(), this.A3$22.zero(), this.A4$18.zero(), this.A5$14.zero(), this.A6$10.zero(), this.A7$6.zero(), this.A8$2.zero());
         }

         public Tuple9 negate(final Tuple9 x) {
            return new Tuple9(this.A0$34.negate(x._1()), this.A1$30.negate(x._2()), this.A2$26.negate(x._3()), this.A3$22.negate(x._4()), this.A4$18.negate(x._5()), this.A5$14.negate(x._6()), this.A6$10.negate(x._7()), this.A7$6.negate(x._8()), this.A8$2.negate(x._9()));
         }

         public {
            this.A0$34 = A0$34;
            this.A1$30 = A1$30;
            this.A2$26 = A2$26;
            this.A3$22 = A3$22;
            this.A4$18 = A4$18;
            this.A5$14 = A5$14;
            this.A6$10 = A6$10;
            this.A7$6 = A7$6;
            this.A8$2 = A8$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple9Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8) {
      return $this.tuple9Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8);
   }

   default Rng tuple9Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8) {
         private final Rng A0$35;
         private final Rng A1$31;
         private final Rng A2$27;
         private final Rng A3$23;
         private final Rng A4$19;
         private final Rng A5$15;
         private final Rng A6$11;
         private final Rng A7$7;
         private final Rng A8$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple9 plus(final Tuple9 x, final Tuple9 y) {
            return new Tuple9(this.A0$35.plus(x._1(), y._1()), this.A1$31.plus(x._2(), y._2()), this.A2$27.plus(x._3(), y._3()), this.A3$23.plus(x._4(), y._4()), this.A4$19.plus(x._5(), y._5()), this.A5$15.plus(x._6(), y._6()), this.A6$11.plus(x._7(), y._7()), this.A7$7.plus(x._8(), y._8()), this.A8$3.plus(x._9(), y._9()));
         }

         public Tuple9 times(final Tuple9 x, final Tuple9 y) {
            return new Tuple9(this.A0$35.times(x._1(), y._1()), this.A1$31.times(x._2(), y._2()), this.A2$27.times(x._3(), y._3()), this.A3$23.times(x._4(), y._4()), this.A4$19.times(x._5(), y._5()), this.A5$15.times(x._6(), y._6()), this.A6$11.times(x._7(), y._7()), this.A7$7.times(x._8(), y._8()), this.A8$3.times(x._9(), y._9()));
         }

         public Tuple9 zero() {
            return new Tuple9(this.A0$35.zero(), this.A1$31.zero(), this.A2$27.zero(), this.A3$23.zero(), this.A4$19.zero(), this.A5$15.zero(), this.A6$11.zero(), this.A7$7.zero(), this.A8$3.zero());
         }

         public Tuple9 negate(final Tuple9 x) {
            return new Tuple9(this.A0$35.negate(x._1()), this.A1$31.negate(x._2()), this.A2$27.negate(x._3()), this.A3$23.negate(x._4()), this.A4$19.negate(x._5()), this.A5$15.negate(x._6()), this.A6$11.negate(x._7()), this.A7$7.negate(x._8()), this.A8$3.negate(x._9()));
         }

         public {
            this.A0$35 = A0$35;
            this.A1$31 = A1$31;
            this.A2$27 = A2$27;
            this.A3$23 = A3$23;
            this.A4$19 = A4$19;
            this.A5$15 = A5$15;
            this.A6$11 = A6$11;
            this.A7$7 = A7$7;
            this.A8$3 = A8$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple9Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8) {
      return $this.tuple9Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8);
   }

   default Semiring tuple9Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8) {
         private final Semiring A0$36;
         private final Semiring A1$32;
         private final Semiring A2$28;
         private final Semiring A3$24;
         private final Semiring A4$20;
         private final Semiring A5$16;
         private final Semiring A6$12;
         private final Semiring A7$8;
         private final Semiring A8$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple9 plus(final Tuple9 x, final Tuple9 y) {
            return new Tuple9(this.A0$36.plus(x._1(), y._1()), this.A1$32.plus(x._2(), y._2()), this.A2$28.plus(x._3(), y._3()), this.A3$24.plus(x._4(), y._4()), this.A4$20.plus(x._5(), y._5()), this.A5$16.plus(x._6(), y._6()), this.A6$12.plus(x._7(), y._7()), this.A7$8.plus(x._8(), y._8()), this.A8$4.plus(x._9(), y._9()));
         }

         public Tuple9 times(final Tuple9 x, final Tuple9 y) {
            return new Tuple9(this.A0$36.times(x._1(), y._1()), this.A1$32.times(x._2(), y._2()), this.A2$28.times(x._3(), y._3()), this.A3$24.times(x._4(), y._4()), this.A4$20.times(x._5(), y._5()), this.A5$16.times(x._6(), y._6()), this.A6$12.times(x._7(), y._7()), this.A7$8.times(x._8(), y._8()), this.A8$4.times(x._9(), y._9()));
         }

         public Tuple9 zero() {
            return new Tuple9(this.A0$36.zero(), this.A1$32.zero(), this.A2$28.zero(), this.A3$24.zero(), this.A4$20.zero(), this.A5$16.zero(), this.A6$12.zero(), this.A7$8.zero(), this.A8$4.zero());
         }

         public {
            this.A0$36 = A0$36;
            this.A1$32 = A1$32;
            this.A2$28 = A2$28;
            this.A3$24 = A3$24;
            this.A4$20 = A4$20;
            this.A5$16 = A5$16;
            this.A6$12 = A6$12;
            this.A7$8 = A7$8;
            this.A8$4 = A8$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple10Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9) {
      return $this.tuple10Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9);
   }

   default Rig tuple10Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) {
         private final Rig A0$37;
         private final Rig A1$33;
         private final Rig A2$29;
         private final Rig A3$25;
         private final Rig A4$21;
         private final Rig A5$17;
         private final Rig A6$13;
         private final Rig A7$9;
         private final Rig A8$5;
         private final Rig A9$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple10 one() {
            return new Tuple10(this.A0$37.one(), this.A1$33.one(), this.A2$29.one(), this.A3$25.one(), this.A4$21.one(), this.A5$17.one(), this.A6$13.one(), this.A7$9.one(), this.A8$5.one(), this.A9$1.one());
         }

         public Tuple10 plus(final Tuple10 x, final Tuple10 y) {
            return new Tuple10(this.A0$37.plus(x._1(), y._1()), this.A1$33.plus(x._2(), y._2()), this.A2$29.plus(x._3(), y._3()), this.A3$25.plus(x._4(), y._4()), this.A4$21.plus(x._5(), y._5()), this.A5$17.plus(x._6(), y._6()), this.A6$13.plus(x._7(), y._7()), this.A7$9.plus(x._8(), y._8()), this.A8$5.plus(x._9(), y._9()), this.A9$1.plus(x._10(), y._10()));
         }

         public Tuple10 times(final Tuple10 x, final Tuple10 y) {
            return new Tuple10(this.A0$37.times(x._1(), y._1()), this.A1$33.times(x._2(), y._2()), this.A2$29.times(x._3(), y._3()), this.A3$25.times(x._4(), y._4()), this.A4$21.times(x._5(), y._5()), this.A5$17.times(x._6(), y._6()), this.A6$13.times(x._7(), y._7()), this.A7$9.times(x._8(), y._8()), this.A8$5.times(x._9(), y._9()), this.A9$1.times(x._10(), y._10()));
         }

         public Tuple10 zero() {
            return new Tuple10(this.A0$37.zero(), this.A1$33.zero(), this.A2$29.zero(), this.A3$25.zero(), this.A4$21.zero(), this.A5$17.zero(), this.A6$13.zero(), this.A7$9.zero(), this.A8$5.zero(), this.A9$1.zero());
         }

         public {
            this.A0$37 = A0$37;
            this.A1$33 = A1$33;
            this.A2$29 = A2$29;
            this.A3$25 = A3$25;
            this.A4$21 = A4$21;
            this.A5$17 = A5$17;
            this.A6$13 = A6$13;
            this.A7$9 = A7$9;
            this.A8$5 = A8$5;
            this.A9$1 = A9$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple10Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9) {
      return $this.tuple10Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9);
   }

   default Ring tuple10Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) {
         private final Ring A0$38;
         private final Ring A1$34;
         private final Ring A2$30;
         private final Ring A3$26;
         private final Ring A4$22;
         private final Ring A5$18;
         private final Ring A6$14;
         private final Ring A7$10;
         private final Ring A8$6;
         private final Ring A9$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple10 one() {
            return new Tuple10(this.A0$38.one(), this.A1$34.one(), this.A2$30.one(), this.A3$26.one(), this.A4$22.one(), this.A5$18.one(), this.A6$14.one(), this.A7$10.one(), this.A8$6.one(), this.A9$2.one());
         }

         public Tuple10 plus(final Tuple10 x, final Tuple10 y) {
            return new Tuple10(this.A0$38.plus(x._1(), y._1()), this.A1$34.plus(x._2(), y._2()), this.A2$30.plus(x._3(), y._3()), this.A3$26.plus(x._4(), y._4()), this.A4$22.plus(x._5(), y._5()), this.A5$18.plus(x._6(), y._6()), this.A6$14.plus(x._7(), y._7()), this.A7$10.plus(x._8(), y._8()), this.A8$6.plus(x._9(), y._9()), this.A9$2.plus(x._10(), y._10()));
         }

         public Tuple10 times(final Tuple10 x, final Tuple10 y) {
            return new Tuple10(this.A0$38.times(x._1(), y._1()), this.A1$34.times(x._2(), y._2()), this.A2$30.times(x._3(), y._3()), this.A3$26.times(x._4(), y._4()), this.A4$22.times(x._5(), y._5()), this.A5$18.times(x._6(), y._6()), this.A6$14.times(x._7(), y._7()), this.A7$10.times(x._8(), y._8()), this.A8$6.times(x._9(), y._9()), this.A9$2.times(x._10(), y._10()));
         }

         public Tuple10 zero() {
            return new Tuple10(this.A0$38.zero(), this.A1$34.zero(), this.A2$30.zero(), this.A3$26.zero(), this.A4$22.zero(), this.A5$18.zero(), this.A6$14.zero(), this.A7$10.zero(), this.A8$6.zero(), this.A9$2.zero());
         }

         public Tuple10 negate(final Tuple10 x) {
            return new Tuple10(this.A0$38.negate(x._1()), this.A1$34.negate(x._2()), this.A2$30.negate(x._3()), this.A3$26.negate(x._4()), this.A4$22.negate(x._5()), this.A5$18.negate(x._6()), this.A6$14.negate(x._7()), this.A7$10.negate(x._8()), this.A8$6.negate(x._9()), this.A9$2.negate(x._10()));
         }

         public {
            this.A0$38 = A0$38;
            this.A1$34 = A1$34;
            this.A2$30 = A2$30;
            this.A3$26 = A3$26;
            this.A4$22 = A4$22;
            this.A5$18 = A5$18;
            this.A6$14 = A6$14;
            this.A7$10 = A7$10;
            this.A8$6 = A8$6;
            this.A9$2 = A9$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple10Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9) {
      return $this.tuple10Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9);
   }

   default Rng tuple10Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) {
         private final Rng A0$39;
         private final Rng A1$35;
         private final Rng A2$31;
         private final Rng A3$27;
         private final Rng A4$23;
         private final Rng A5$19;
         private final Rng A6$15;
         private final Rng A7$11;
         private final Rng A8$7;
         private final Rng A9$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple10 plus(final Tuple10 x, final Tuple10 y) {
            return new Tuple10(this.A0$39.plus(x._1(), y._1()), this.A1$35.plus(x._2(), y._2()), this.A2$31.plus(x._3(), y._3()), this.A3$27.plus(x._4(), y._4()), this.A4$23.plus(x._5(), y._5()), this.A5$19.plus(x._6(), y._6()), this.A6$15.plus(x._7(), y._7()), this.A7$11.plus(x._8(), y._8()), this.A8$7.plus(x._9(), y._9()), this.A9$3.plus(x._10(), y._10()));
         }

         public Tuple10 times(final Tuple10 x, final Tuple10 y) {
            return new Tuple10(this.A0$39.times(x._1(), y._1()), this.A1$35.times(x._2(), y._2()), this.A2$31.times(x._3(), y._3()), this.A3$27.times(x._4(), y._4()), this.A4$23.times(x._5(), y._5()), this.A5$19.times(x._6(), y._6()), this.A6$15.times(x._7(), y._7()), this.A7$11.times(x._8(), y._8()), this.A8$7.times(x._9(), y._9()), this.A9$3.times(x._10(), y._10()));
         }

         public Tuple10 zero() {
            return new Tuple10(this.A0$39.zero(), this.A1$35.zero(), this.A2$31.zero(), this.A3$27.zero(), this.A4$23.zero(), this.A5$19.zero(), this.A6$15.zero(), this.A7$11.zero(), this.A8$7.zero(), this.A9$3.zero());
         }

         public Tuple10 negate(final Tuple10 x) {
            return new Tuple10(this.A0$39.negate(x._1()), this.A1$35.negate(x._2()), this.A2$31.negate(x._3()), this.A3$27.negate(x._4()), this.A4$23.negate(x._5()), this.A5$19.negate(x._6()), this.A6$15.negate(x._7()), this.A7$11.negate(x._8()), this.A8$7.negate(x._9()), this.A9$3.negate(x._10()));
         }

         public {
            this.A0$39 = A0$39;
            this.A1$35 = A1$35;
            this.A2$31 = A2$31;
            this.A3$27 = A3$27;
            this.A4$23 = A4$23;
            this.A5$19 = A5$19;
            this.A6$15 = A6$15;
            this.A7$11 = A7$11;
            this.A8$7 = A8$7;
            this.A9$3 = A9$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple10Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9) {
      return $this.tuple10Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9);
   }

   default Semiring tuple10Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) {
         private final Semiring A0$40;
         private final Semiring A1$36;
         private final Semiring A2$32;
         private final Semiring A3$28;
         private final Semiring A4$24;
         private final Semiring A5$20;
         private final Semiring A6$16;
         private final Semiring A7$12;
         private final Semiring A8$8;
         private final Semiring A9$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple10 plus(final Tuple10 x, final Tuple10 y) {
            return new Tuple10(this.A0$40.plus(x._1(), y._1()), this.A1$36.plus(x._2(), y._2()), this.A2$32.plus(x._3(), y._3()), this.A3$28.plus(x._4(), y._4()), this.A4$24.plus(x._5(), y._5()), this.A5$20.plus(x._6(), y._6()), this.A6$16.plus(x._7(), y._7()), this.A7$12.plus(x._8(), y._8()), this.A8$8.plus(x._9(), y._9()), this.A9$4.plus(x._10(), y._10()));
         }

         public Tuple10 times(final Tuple10 x, final Tuple10 y) {
            return new Tuple10(this.A0$40.times(x._1(), y._1()), this.A1$36.times(x._2(), y._2()), this.A2$32.times(x._3(), y._3()), this.A3$28.times(x._4(), y._4()), this.A4$24.times(x._5(), y._5()), this.A5$20.times(x._6(), y._6()), this.A6$16.times(x._7(), y._7()), this.A7$12.times(x._8(), y._8()), this.A8$8.times(x._9(), y._9()), this.A9$4.times(x._10(), y._10()));
         }

         public Tuple10 zero() {
            return new Tuple10(this.A0$40.zero(), this.A1$36.zero(), this.A2$32.zero(), this.A3$28.zero(), this.A4$24.zero(), this.A5$20.zero(), this.A6$16.zero(), this.A7$12.zero(), this.A8$8.zero(), this.A9$4.zero());
         }

         public {
            this.A0$40 = A0$40;
            this.A1$36 = A1$36;
            this.A2$32 = A2$32;
            this.A3$28 = A3$28;
            this.A4$24 = A4$24;
            this.A5$20 = A5$20;
            this.A6$16 = A6$16;
            this.A7$12 = A7$12;
            this.A8$8 = A8$8;
            this.A9$4 = A9$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple11Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10) {
      return $this.tuple11Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);
   }

   default Rig tuple11Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) {
         private final Rig A0$41;
         private final Rig A1$37;
         private final Rig A2$33;
         private final Rig A3$29;
         private final Rig A4$25;
         private final Rig A5$21;
         private final Rig A6$17;
         private final Rig A7$13;
         private final Rig A8$9;
         private final Rig A9$5;
         private final Rig A10$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple11 one() {
            return new Tuple11(this.A0$41.one(), this.A1$37.one(), this.A2$33.one(), this.A3$29.one(), this.A4$25.one(), this.A5$21.one(), this.A6$17.one(), this.A7$13.one(), this.A8$9.one(), this.A9$5.one(), this.A10$1.one());
         }

         public Tuple11 plus(final Tuple11 x, final Tuple11 y) {
            return new Tuple11(this.A0$41.plus(x._1(), y._1()), this.A1$37.plus(x._2(), y._2()), this.A2$33.plus(x._3(), y._3()), this.A3$29.plus(x._4(), y._4()), this.A4$25.plus(x._5(), y._5()), this.A5$21.plus(x._6(), y._6()), this.A6$17.plus(x._7(), y._7()), this.A7$13.plus(x._8(), y._8()), this.A8$9.plus(x._9(), y._9()), this.A9$5.plus(x._10(), y._10()), this.A10$1.plus(x._11(), y._11()));
         }

         public Tuple11 times(final Tuple11 x, final Tuple11 y) {
            return new Tuple11(this.A0$41.times(x._1(), y._1()), this.A1$37.times(x._2(), y._2()), this.A2$33.times(x._3(), y._3()), this.A3$29.times(x._4(), y._4()), this.A4$25.times(x._5(), y._5()), this.A5$21.times(x._6(), y._6()), this.A6$17.times(x._7(), y._7()), this.A7$13.times(x._8(), y._8()), this.A8$9.times(x._9(), y._9()), this.A9$5.times(x._10(), y._10()), this.A10$1.times(x._11(), y._11()));
         }

         public Tuple11 zero() {
            return new Tuple11(this.A0$41.zero(), this.A1$37.zero(), this.A2$33.zero(), this.A3$29.zero(), this.A4$25.zero(), this.A5$21.zero(), this.A6$17.zero(), this.A7$13.zero(), this.A8$9.zero(), this.A9$5.zero(), this.A10$1.zero());
         }

         public {
            this.A0$41 = A0$41;
            this.A1$37 = A1$37;
            this.A2$33 = A2$33;
            this.A3$29 = A3$29;
            this.A4$25 = A4$25;
            this.A5$21 = A5$21;
            this.A6$17 = A6$17;
            this.A7$13 = A7$13;
            this.A8$9 = A8$9;
            this.A9$5 = A9$5;
            this.A10$1 = A10$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple11Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10) {
      return $this.tuple11Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);
   }

   default Ring tuple11Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) {
         private final Ring A0$42;
         private final Ring A1$38;
         private final Ring A2$34;
         private final Ring A3$30;
         private final Ring A4$26;
         private final Ring A5$22;
         private final Ring A6$18;
         private final Ring A7$14;
         private final Ring A8$10;
         private final Ring A9$6;
         private final Ring A10$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple11 one() {
            return new Tuple11(this.A0$42.one(), this.A1$38.one(), this.A2$34.one(), this.A3$30.one(), this.A4$26.one(), this.A5$22.one(), this.A6$18.one(), this.A7$14.one(), this.A8$10.one(), this.A9$6.one(), this.A10$2.one());
         }

         public Tuple11 plus(final Tuple11 x, final Tuple11 y) {
            return new Tuple11(this.A0$42.plus(x._1(), y._1()), this.A1$38.plus(x._2(), y._2()), this.A2$34.plus(x._3(), y._3()), this.A3$30.plus(x._4(), y._4()), this.A4$26.plus(x._5(), y._5()), this.A5$22.plus(x._6(), y._6()), this.A6$18.plus(x._7(), y._7()), this.A7$14.plus(x._8(), y._8()), this.A8$10.plus(x._9(), y._9()), this.A9$6.plus(x._10(), y._10()), this.A10$2.plus(x._11(), y._11()));
         }

         public Tuple11 times(final Tuple11 x, final Tuple11 y) {
            return new Tuple11(this.A0$42.times(x._1(), y._1()), this.A1$38.times(x._2(), y._2()), this.A2$34.times(x._3(), y._3()), this.A3$30.times(x._4(), y._4()), this.A4$26.times(x._5(), y._5()), this.A5$22.times(x._6(), y._6()), this.A6$18.times(x._7(), y._7()), this.A7$14.times(x._8(), y._8()), this.A8$10.times(x._9(), y._9()), this.A9$6.times(x._10(), y._10()), this.A10$2.times(x._11(), y._11()));
         }

         public Tuple11 zero() {
            return new Tuple11(this.A0$42.zero(), this.A1$38.zero(), this.A2$34.zero(), this.A3$30.zero(), this.A4$26.zero(), this.A5$22.zero(), this.A6$18.zero(), this.A7$14.zero(), this.A8$10.zero(), this.A9$6.zero(), this.A10$2.zero());
         }

         public Tuple11 negate(final Tuple11 x) {
            return new Tuple11(this.A0$42.negate(x._1()), this.A1$38.negate(x._2()), this.A2$34.negate(x._3()), this.A3$30.negate(x._4()), this.A4$26.negate(x._5()), this.A5$22.negate(x._6()), this.A6$18.negate(x._7()), this.A7$14.negate(x._8()), this.A8$10.negate(x._9()), this.A9$6.negate(x._10()), this.A10$2.negate(x._11()));
         }

         public {
            this.A0$42 = A0$42;
            this.A1$38 = A1$38;
            this.A2$34 = A2$34;
            this.A3$30 = A3$30;
            this.A4$26 = A4$26;
            this.A5$22 = A5$22;
            this.A6$18 = A6$18;
            this.A7$14 = A7$14;
            this.A8$10 = A8$10;
            this.A9$6 = A9$6;
            this.A10$2 = A10$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple11Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10) {
      return $this.tuple11Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);
   }

   default Rng tuple11Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) {
         private final Rng A0$43;
         private final Rng A1$39;
         private final Rng A2$35;
         private final Rng A3$31;
         private final Rng A4$27;
         private final Rng A5$23;
         private final Rng A6$19;
         private final Rng A7$15;
         private final Rng A8$11;
         private final Rng A9$7;
         private final Rng A10$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple11 plus(final Tuple11 x, final Tuple11 y) {
            return new Tuple11(this.A0$43.plus(x._1(), y._1()), this.A1$39.plus(x._2(), y._2()), this.A2$35.plus(x._3(), y._3()), this.A3$31.plus(x._4(), y._4()), this.A4$27.plus(x._5(), y._5()), this.A5$23.plus(x._6(), y._6()), this.A6$19.plus(x._7(), y._7()), this.A7$15.plus(x._8(), y._8()), this.A8$11.plus(x._9(), y._9()), this.A9$7.plus(x._10(), y._10()), this.A10$3.plus(x._11(), y._11()));
         }

         public Tuple11 times(final Tuple11 x, final Tuple11 y) {
            return new Tuple11(this.A0$43.times(x._1(), y._1()), this.A1$39.times(x._2(), y._2()), this.A2$35.times(x._3(), y._3()), this.A3$31.times(x._4(), y._4()), this.A4$27.times(x._5(), y._5()), this.A5$23.times(x._6(), y._6()), this.A6$19.times(x._7(), y._7()), this.A7$15.times(x._8(), y._8()), this.A8$11.times(x._9(), y._9()), this.A9$7.times(x._10(), y._10()), this.A10$3.times(x._11(), y._11()));
         }

         public Tuple11 zero() {
            return new Tuple11(this.A0$43.zero(), this.A1$39.zero(), this.A2$35.zero(), this.A3$31.zero(), this.A4$27.zero(), this.A5$23.zero(), this.A6$19.zero(), this.A7$15.zero(), this.A8$11.zero(), this.A9$7.zero(), this.A10$3.zero());
         }

         public Tuple11 negate(final Tuple11 x) {
            return new Tuple11(this.A0$43.negate(x._1()), this.A1$39.negate(x._2()), this.A2$35.negate(x._3()), this.A3$31.negate(x._4()), this.A4$27.negate(x._5()), this.A5$23.negate(x._6()), this.A6$19.negate(x._7()), this.A7$15.negate(x._8()), this.A8$11.negate(x._9()), this.A9$7.negate(x._10()), this.A10$3.negate(x._11()));
         }

         public {
            this.A0$43 = A0$43;
            this.A1$39 = A1$39;
            this.A2$35 = A2$35;
            this.A3$31 = A3$31;
            this.A4$27 = A4$27;
            this.A5$23 = A5$23;
            this.A6$19 = A6$19;
            this.A7$15 = A7$15;
            this.A8$11 = A8$11;
            this.A9$7 = A9$7;
            this.A10$3 = A10$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple11Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10) {
      return $this.tuple11Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);
   }

   default Semiring tuple11Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) {
         private final Semiring A0$44;
         private final Semiring A1$40;
         private final Semiring A2$36;
         private final Semiring A3$32;
         private final Semiring A4$28;
         private final Semiring A5$24;
         private final Semiring A6$20;
         private final Semiring A7$16;
         private final Semiring A8$12;
         private final Semiring A9$8;
         private final Semiring A10$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple11 plus(final Tuple11 x, final Tuple11 y) {
            return new Tuple11(this.A0$44.plus(x._1(), y._1()), this.A1$40.plus(x._2(), y._2()), this.A2$36.plus(x._3(), y._3()), this.A3$32.plus(x._4(), y._4()), this.A4$28.plus(x._5(), y._5()), this.A5$24.plus(x._6(), y._6()), this.A6$20.plus(x._7(), y._7()), this.A7$16.plus(x._8(), y._8()), this.A8$12.plus(x._9(), y._9()), this.A9$8.plus(x._10(), y._10()), this.A10$4.plus(x._11(), y._11()));
         }

         public Tuple11 times(final Tuple11 x, final Tuple11 y) {
            return new Tuple11(this.A0$44.times(x._1(), y._1()), this.A1$40.times(x._2(), y._2()), this.A2$36.times(x._3(), y._3()), this.A3$32.times(x._4(), y._4()), this.A4$28.times(x._5(), y._5()), this.A5$24.times(x._6(), y._6()), this.A6$20.times(x._7(), y._7()), this.A7$16.times(x._8(), y._8()), this.A8$12.times(x._9(), y._9()), this.A9$8.times(x._10(), y._10()), this.A10$4.times(x._11(), y._11()));
         }

         public Tuple11 zero() {
            return new Tuple11(this.A0$44.zero(), this.A1$40.zero(), this.A2$36.zero(), this.A3$32.zero(), this.A4$28.zero(), this.A5$24.zero(), this.A6$20.zero(), this.A7$16.zero(), this.A8$12.zero(), this.A9$8.zero(), this.A10$4.zero());
         }

         public {
            this.A0$44 = A0$44;
            this.A1$40 = A1$40;
            this.A2$36 = A2$36;
            this.A3$32 = A3$32;
            this.A4$28 = A4$28;
            this.A5$24 = A5$24;
            this.A6$20 = A6$20;
            this.A7$16 = A7$16;
            this.A8$12 = A8$12;
            this.A9$8 = A9$8;
            this.A10$4 = A10$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple12Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11) {
      return $this.tuple12Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11);
   }

   default Rig tuple12Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) {
         private final Rig A0$45;
         private final Rig A1$41;
         private final Rig A2$37;
         private final Rig A3$33;
         private final Rig A4$29;
         private final Rig A5$25;
         private final Rig A6$21;
         private final Rig A7$17;
         private final Rig A8$13;
         private final Rig A9$9;
         private final Rig A10$5;
         private final Rig A11$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple12 one() {
            return new Tuple12(this.A0$45.one(), this.A1$41.one(), this.A2$37.one(), this.A3$33.one(), this.A4$29.one(), this.A5$25.one(), this.A6$21.one(), this.A7$17.one(), this.A8$13.one(), this.A9$9.one(), this.A10$5.one(), this.A11$1.one());
         }

         public Tuple12 plus(final Tuple12 x, final Tuple12 y) {
            return new Tuple12(this.A0$45.plus(x._1(), y._1()), this.A1$41.plus(x._2(), y._2()), this.A2$37.plus(x._3(), y._3()), this.A3$33.plus(x._4(), y._4()), this.A4$29.plus(x._5(), y._5()), this.A5$25.plus(x._6(), y._6()), this.A6$21.plus(x._7(), y._7()), this.A7$17.plus(x._8(), y._8()), this.A8$13.plus(x._9(), y._9()), this.A9$9.plus(x._10(), y._10()), this.A10$5.plus(x._11(), y._11()), this.A11$1.plus(x._12(), y._12()));
         }

         public Tuple12 times(final Tuple12 x, final Tuple12 y) {
            return new Tuple12(this.A0$45.times(x._1(), y._1()), this.A1$41.times(x._2(), y._2()), this.A2$37.times(x._3(), y._3()), this.A3$33.times(x._4(), y._4()), this.A4$29.times(x._5(), y._5()), this.A5$25.times(x._6(), y._6()), this.A6$21.times(x._7(), y._7()), this.A7$17.times(x._8(), y._8()), this.A8$13.times(x._9(), y._9()), this.A9$9.times(x._10(), y._10()), this.A10$5.times(x._11(), y._11()), this.A11$1.times(x._12(), y._12()));
         }

         public Tuple12 zero() {
            return new Tuple12(this.A0$45.zero(), this.A1$41.zero(), this.A2$37.zero(), this.A3$33.zero(), this.A4$29.zero(), this.A5$25.zero(), this.A6$21.zero(), this.A7$17.zero(), this.A8$13.zero(), this.A9$9.zero(), this.A10$5.zero(), this.A11$1.zero());
         }

         public {
            this.A0$45 = A0$45;
            this.A1$41 = A1$41;
            this.A2$37 = A2$37;
            this.A3$33 = A3$33;
            this.A4$29 = A4$29;
            this.A5$25 = A5$25;
            this.A6$21 = A6$21;
            this.A7$17 = A7$17;
            this.A8$13 = A8$13;
            this.A9$9 = A9$9;
            this.A10$5 = A10$5;
            this.A11$1 = A11$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple12Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11) {
      return $this.tuple12Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11);
   }

   default Ring tuple12Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) {
         private final Ring A0$46;
         private final Ring A1$42;
         private final Ring A2$38;
         private final Ring A3$34;
         private final Ring A4$30;
         private final Ring A5$26;
         private final Ring A6$22;
         private final Ring A7$18;
         private final Ring A8$14;
         private final Ring A9$10;
         private final Ring A10$6;
         private final Ring A11$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple12 one() {
            return new Tuple12(this.A0$46.one(), this.A1$42.one(), this.A2$38.one(), this.A3$34.one(), this.A4$30.one(), this.A5$26.one(), this.A6$22.one(), this.A7$18.one(), this.A8$14.one(), this.A9$10.one(), this.A10$6.one(), this.A11$2.one());
         }

         public Tuple12 plus(final Tuple12 x, final Tuple12 y) {
            return new Tuple12(this.A0$46.plus(x._1(), y._1()), this.A1$42.plus(x._2(), y._2()), this.A2$38.plus(x._3(), y._3()), this.A3$34.plus(x._4(), y._4()), this.A4$30.plus(x._5(), y._5()), this.A5$26.plus(x._6(), y._6()), this.A6$22.plus(x._7(), y._7()), this.A7$18.plus(x._8(), y._8()), this.A8$14.plus(x._9(), y._9()), this.A9$10.plus(x._10(), y._10()), this.A10$6.plus(x._11(), y._11()), this.A11$2.plus(x._12(), y._12()));
         }

         public Tuple12 times(final Tuple12 x, final Tuple12 y) {
            return new Tuple12(this.A0$46.times(x._1(), y._1()), this.A1$42.times(x._2(), y._2()), this.A2$38.times(x._3(), y._3()), this.A3$34.times(x._4(), y._4()), this.A4$30.times(x._5(), y._5()), this.A5$26.times(x._6(), y._6()), this.A6$22.times(x._7(), y._7()), this.A7$18.times(x._8(), y._8()), this.A8$14.times(x._9(), y._9()), this.A9$10.times(x._10(), y._10()), this.A10$6.times(x._11(), y._11()), this.A11$2.times(x._12(), y._12()));
         }

         public Tuple12 zero() {
            return new Tuple12(this.A0$46.zero(), this.A1$42.zero(), this.A2$38.zero(), this.A3$34.zero(), this.A4$30.zero(), this.A5$26.zero(), this.A6$22.zero(), this.A7$18.zero(), this.A8$14.zero(), this.A9$10.zero(), this.A10$6.zero(), this.A11$2.zero());
         }

         public Tuple12 negate(final Tuple12 x) {
            return new Tuple12(this.A0$46.negate(x._1()), this.A1$42.negate(x._2()), this.A2$38.negate(x._3()), this.A3$34.negate(x._4()), this.A4$30.negate(x._5()), this.A5$26.negate(x._6()), this.A6$22.negate(x._7()), this.A7$18.negate(x._8()), this.A8$14.negate(x._9()), this.A9$10.negate(x._10()), this.A10$6.negate(x._11()), this.A11$2.negate(x._12()));
         }

         public {
            this.A0$46 = A0$46;
            this.A1$42 = A1$42;
            this.A2$38 = A2$38;
            this.A3$34 = A3$34;
            this.A4$30 = A4$30;
            this.A5$26 = A5$26;
            this.A6$22 = A6$22;
            this.A7$18 = A7$18;
            this.A8$14 = A8$14;
            this.A9$10 = A9$10;
            this.A10$6 = A10$6;
            this.A11$2 = A11$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple12Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11) {
      return $this.tuple12Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11);
   }

   default Rng tuple12Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) {
         private final Rng A0$47;
         private final Rng A1$43;
         private final Rng A2$39;
         private final Rng A3$35;
         private final Rng A4$31;
         private final Rng A5$27;
         private final Rng A6$23;
         private final Rng A7$19;
         private final Rng A8$15;
         private final Rng A9$11;
         private final Rng A10$7;
         private final Rng A11$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple12 plus(final Tuple12 x, final Tuple12 y) {
            return new Tuple12(this.A0$47.plus(x._1(), y._1()), this.A1$43.plus(x._2(), y._2()), this.A2$39.plus(x._3(), y._3()), this.A3$35.plus(x._4(), y._4()), this.A4$31.plus(x._5(), y._5()), this.A5$27.plus(x._6(), y._6()), this.A6$23.plus(x._7(), y._7()), this.A7$19.plus(x._8(), y._8()), this.A8$15.plus(x._9(), y._9()), this.A9$11.plus(x._10(), y._10()), this.A10$7.plus(x._11(), y._11()), this.A11$3.plus(x._12(), y._12()));
         }

         public Tuple12 times(final Tuple12 x, final Tuple12 y) {
            return new Tuple12(this.A0$47.times(x._1(), y._1()), this.A1$43.times(x._2(), y._2()), this.A2$39.times(x._3(), y._3()), this.A3$35.times(x._4(), y._4()), this.A4$31.times(x._5(), y._5()), this.A5$27.times(x._6(), y._6()), this.A6$23.times(x._7(), y._7()), this.A7$19.times(x._8(), y._8()), this.A8$15.times(x._9(), y._9()), this.A9$11.times(x._10(), y._10()), this.A10$7.times(x._11(), y._11()), this.A11$3.times(x._12(), y._12()));
         }

         public Tuple12 zero() {
            return new Tuple12(this.A0$47.zero(), this.A1$43.zero(), this.A2$39.zero(), this.A3$35.zero(), this.A4$31.zero(), this.A5$27.zero(), this.A6$23.zero(), this.A7$19.zero(), this.A8$15.zero(), this.A9$11.zero(), this.A10$7.zero(), this.A11$3.zero());
         }

         public Tuple12 negate(final Tuple12 x) {
            return new Tuple12(this.A0$47.negate(x._1()), this.A1$43.negate(x._2()), this.A2$39.negate(x._3()), this.A3$35.negate(x._4()), this.A4$31.negate(x._5()), this.A5$27.negate(x._6()), this.A6$23.negate(x._7()), this.A7$19.negate(x._8()), this.A8$15.negate(x._9()), this.A9$11.negate(x._10()), this.A10$7.negate(x._11()), this.A11$3.negate(x._12()));
         }

         public {
            this.A0$47 = A0$47;
            this.A1$43 = A1$43;
            this.A2$39 = A2$39;
            this.A3$35 = A3$35;
            this.A4$31 = A4$31;
            this.A5$27 = A5$27;
            this.A6$23 = A6$23;
            this.A7$19 = A7$19;
            this.A8$15 = A8$15;
            this.A9$11 = A9$11;
            this.A10$7 = A10$7;
            this.A11$3 = A11$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple12Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11) {
      return $this.tuple12Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11);
   }

   default Semiring tuple12Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) {
         private final Semiring A0$48;
         private final Semiring A1$44;
         private final Semiring A2$40;
         private final Semiring A3$36;
         private final Semiring A4$32;
         private final Semiring A5$28;
         private final Semiring A6$24;
         private final Semiring A7$20;
         private final Semiring A8$16;
         private final Semiring A9$12;
         private final Semiring A10$8;
         private final Semiring A11$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple12 plus(final Tuple12 x, final Tuple12 y) {
            return new Tuple12(this.A0$48.plus(x._1(), y._1()), this.A1$44.plus(x._2(), y._2()), this.A2$40.plus(x._3(), y._3()), this.A3$36.plus(x._4(), y._4()), this.A4$32.plus(x._5(), y._5()), this.A5$28.plus(x._6(), y._6()), this.A6$24.plus(x._7(), y._7()), this.A7$20.plus(x._8(), y._8()), this.A8$16.plus(x._9(), y._9()), this.A9$12.plus(x._10(), y._10()), this.A10$8.plus(x._11(), y._11()), this.A11$4.plus(x._12(), y._12()));
         }

         public Tuple12 times(final Tuple12 x, final Tuple12 y) {
            return new Tuple12(this.A0$48.times(x._1(), y._1()), this.A1$44.times(x._2(), y._2()), this.A2$40.times(x._3(), y._3()), this.A3$36.times(x._4(), y._4()), this.A4$32.times(x._5(), y._5()), this.A5$28.times(x._6(), y._6()), this.A6$24.times(x._7(), y._7()), this.A7$20.times(x._8(), y._8()), this.A8$16.times(x._9(), y._9()), this.A9$12.times(x._10(), y._10()), this.A10$8.times(x._11(), y._11()), this.A11$4.times(x._12(), y._12()));
         }

         public Tuple12 zero() {
            return new Tuple12(this.A0$48.zero(), this.A1$44.zero(), this.A2$40.zero(), this.A3$36.zero(), this.A4$32.zero(), this.A5$28.zero(), this.A6$24.zero(), this.A7$20.zero(), this.A8$16.zero(), this.A9$12.zero(), this.A10$8.zero(), this.A11$4.zero());
         }

         public {
            this.A0$48 = A0$48;
            this.A1$44 = A1$44;
            this.A2$40 = A2$40;
            this.A3$36 = A3$36;
            this.A4$32 = A4$32;
            this.A5$28 = A5$28;
            this.A6$24 = A6$24;
            this.A7$20 = A7$20;
            this.A8$16 = A8$16;
            this.A9$12 = A9$12;
            this.A10$8 = A10$8;
            this.A11$4 = A11$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple13Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12) {
      return $this.tuple13Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12);
   }

   default Rig tuple13Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) {
         private final Rig A0$49;
         private final Rig A1$45;
         private final Rig A2$41;
         private final Rig A3$37;
         private final Rig A4$33;
         private final Rig A5$29;
         private final Rig A6$25;
         private final Rig A7$21;
         private final Rig A8$17;
         private final Rig A9$13;
         private final Rig A10$9;
         private final Rig A11$5;
         private final Rig A12$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple13 one() {
            return new Tuple13(this.A0$49.one(), this.A1$45.one(), this.A2$41.one(), this.A3$37.one(), this.A4$33.one(), this.A5$29.one(), this.A6$25.one(), this.A7$21.one(), this.A8$17.one(), this.A9$13.one(), this.A10$9.one(), this.A11$5.one(), this.A12$1.one());
         }

         public Tuple13 plus(final Tuple13 x, final Tuple13 y) {
            return new Tuple13(this.A0$49.plus(x._1(), y._1()), this.A1$45.plus(x._2(), y._2()), this.A2$41.plus(x._3(), y._3()), this.A3$37.plus(x._4(), y._4()), this.A4$33.plus(x._5(), y._5()), this.A5$29.plus(x._6(), y._6()), this.A6$25.plus(x._7(), y._7()), this.A7$21.plus(x._8(), y._8()), this.A8$17.plus(x._9(), y._9()), this.A9$13.plus(x._10(), y._10()), this.A10$9.plus(x._11(), y._11()), this.A11$5.plus(x._12(), y._12()), this.A12$1.plus(x._13(), y._13()));
         }

         public Tuple13 times(final Tuple13 x, final Tuple13 y) {
            return new Tuple13(this.A0$49.times(x._1(), y._1()), this.A1$45.times(x._2(), y._2()), this.A2$41.times(x._3(), y._3()), this.A3$37.times(x._4(), y._4()), this.A4$33.times(x._5(), y._5()), this.A5$29.times(x._6(), y._6()), this.A6$25.times(x._7(), y._7()), this.A7$21.times(x._8(), y._8()), this.A8$17.times(x._9(), y._9()), this.A9$13.times(x._10(), y._10()), this.A10$9.times(x._11(), y._11()), this.A11$5.times(x._12(), y._12()), this.A12$1.times(x._13(), y._13()));
         }

         public Tuple13 zero() {
            return new Tuple13(this.A0$49.zero(), this.A1$45.zero(), this.A2$41.zero(), this.A3$37.zero(), this.A4$33.zero(), this.A5$29.zero(), this.A6$25.zero(), this.A7$21.zero(), this.A8$17.zero(), this.A9$13.zero(), this.A10$9.zero(), this.A11$5.zero(), this.A12$1.zero());
         }

         public {
            this.A0$49 = A0$49;
            this.A1$45 = A1$45;
            this.A2$41 = A2$41;
            this.A3$37 = A3$37;
            this.A4$33 = A4$33;
            this.A5$29 = A5$29;
            this.A6$25 = A6$25;
            this.A7$21 = A7$21;
            this.A8$17 = A8$17;
            this.A9$13 = A9$13;
            this.A10$9 = A10$9;
            this.A11$5 = A11$5;
            this.A12$1 = A12$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple13Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12) {
      return $this.tuple13Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12);
   }

   default Ring tuple13Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) {
         private final Ring A0$50;
         private final Ring A1$46;
         private final Ring A2$42;
         private final Ring A3$38;
         private final Ring A4$34;
         private final Ring A5$30;
         private final Ring A6$26;
         private final Ring A7$22;
         private final Ring A8$18;
         private final Ring A9$14;
         private final Ring A10$10;
         private final Ring A11$6;
         private final Ring A12$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple13 one() {
            return new Tuple13(this.A0$50.one(), this.A1$46.one(), this.A2$42.one(), this.A3$38.one(), this.A4$34.one(), this.A5$30.one(), this.A6$26.one(), this.A7$22.one(), this.A8$18.one(), this.A9$14.one(), this.A10$10.one(), this.A11$6.one(), this.A12$2.one());
         }

         public Tuple13 plus(final Tuple13 x, final Tuple13 y) {
            return new Tuple13(this.A0$50.plus(x._1(), y._1()), this.A1$46.plus(x._2(), y._2()), this.A2$42.plus(x._3(), y._3()), this.A3$38.plus(x._4(), y._4()), this.A4$34.plus(x._5(), y._5()), this.A5$30.plus(x._6(), y._6()), this.A6$26.plus(x._7(), y._7()), this.A7$22.plus(x._8(), y._8()), this.A8$18.plus(x._9(), y._9()), this.A9$14.plus(x._10(), y._10()), this.A10$10.plus(x._11(), y._11()), this.A11$6.plus(x._12(), y._12()), this.A12$2.plus(x._13(), y._13()));
         }

         public Tuple13 times(final Tuple13 x, final Tuple13 y) {
            return new Tuple13(this.A0$50.times(x._1(), y._1()), this.A1$46.times(x._2(), y._2()), this.A2$42.times(x._3(), y._3()), this.A3$38.times(x._4(), y._4()), this.A4$34.times(x._5(), y._5()), this.A5$30.times(x._6(), y._6()), this.A6$26.times(x._7(), y._7()), this.A7$22.times(x._8(), y._8()), this.A8$18.times(x._9(), y._9()), this.A9$14.times(x._10(), y._10()), this.A10$10.times(x._11(), y._11()), this.A11$6.times(x._12(), y._12()), this.A12$2.times(x._13(), y._13()));
         }

         public Tuple13 zero() {
            return new Tuple13(this.A0$50.zero(), this.A1$46.zero(), this.A2$42.zero(), this.A3$38.zero(), this.A4$34.zero(), this.A5$30.zero(), this.A6$26.zero(), this.A7$22.zero(), this.A8$18.zero(), this.A9$14.zero(), this.A10$10.zero(), this.A11$6.zero(), this.A12$2.zero());
         }

         public Tuple13 negate(final Tuple13 x) {
            return new Tuple13(this.A0$50.negate(x._1()), this.A1$46.negate(x._2()), this.A2$42.negate(x._3()), this.A3$38.negate(x._4()), this.A4$34.negate(x._5()), this.A5$30.negate(x._6()), this.A6$26.negate(x._7()), this.A7$22.negate(x._8()), this.A8$18.negate(x._9()), this.A9$14.negate(x._10()), this.A10$10.negate(x._11()), this.A11$6.negate(x._12()), this.A12$2.negate(x._13()));
         }

         public {
            this.A0$50 = A0$50;
            this.A1$46 = A1$46;
            this.A2$42 = A2$42;
            this.A3$38 = A3$38;
            this.A4$34 = A4$34;
            this.A5$30 = A5$30;
            this.A6$26 = A6$26;
            this.A7$22 = A7$22;
            this.A8$18 = A8$18;
            this.A9$14 = A9$14;
            this.A10$10 = A10$10;
            this.A11$6 = A11$6;
            this.A12$2 = A12$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple13Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12) {
      return $this.tuple13Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12);
   }

   default Rng tuple13Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) {
         private final Rng A0$51;
         private final Rng A1$47;
         private final Rng A2$43;
         private final Rng A3$39;
         private final Rng A4$35;
         private final Rng A5$31;
         private final Rng A6$27;
         private final Rng A7$23;
         private final Rng A8$19;
         private final Rng A9$15;
         private final Rng A10$11;
         private final Rng A11$7;
         private final Rng A12$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple13 plus(final Tuple13 x, final Tuple13 y) {
            return new Tuple13(this.A0$51.plus(x._1(), y._1()), this.A1$47.plus(x._2(), y._2()), this.A2$43.plus(x._3(), y._3()), this.A3$39.plus(x._4(), y._4()), this.A4$35.plus(x._5(), y._5()), this.A5$31.plus(x._6(), y._6()), this.A6$27.plus(x._7(), y._7()), this.A7$23.plus(x._8(), y._8()), this.A8$19.plus(x._9(), y._9()), this.A9$15.plus(x._10(), y._10()), this.A10$11.plus(x._11(), y._11()), this.A11$7.plus(x._12(), y._12()), this.A12$3.plus(x._13(), y._13()));
         }

         public Tuple13 times(final Tuple13 x, final Tuple13 y) {
            return new Tuple13(this.A0$51.times(x._1(), y._1()), this.A1$47.times(x._2(), y._2()), this.A2$43.times(x._3(), y._3()), this.A3$39.times(x._4(), y._4()), this.A4$35.times(x._5(), y._5()), this.A5$31.times(x._6(), y._6()), this.A6$27.times(x._7(), y._7()), this.A7$23.times(x._8(), y._8()), this.A8$19.times(x._9(), y._9()), this.A9$15.times(x._10(), y._10()), this.A10$11.times(x._11(), y._11()), this.A11$7.times(x._12(), y._12()), this.A12$3.times(x._13(), y._13()));
         }

         public Tuple13 zero() {
            return new Tuple13(this.A0$51.zero(), this.A1$47.zero(), this.A2$43.zero(), this.A3$39.zero(), this.A4$35.zero(), this.A5$31.zero(), this.A6$27.zero(), this.A7$23.zero(), this.A8$19.zero(), this.A9$15.zero(), this.A10$11.zero(), this.A11$7.zero(), this.A12$3.zero());
         }

         public Tuple13 negate(final Tuple13 x) {
            return new Tuple13(this.A0$51.negate(x._1()), this.A1$47.negate(x._2()), this.A2$43.negate(x._3()), this.A3$39.negate(x._4()), this.A4$35.negate(x._5()), this.A5$31.negate(x._6()), this.A6$27.negate(x._7()), this.A7$23.negate(x._8()), this.A8$19.negate(x._9()), this.A9$15.negate(x._10()), this.A10$11.negate(x._11()), this.A11$7.negate(x._12()), this.A12$3.negate(x._13()));
         }

         public {
            this.A0$51 = A0$51;
            this.A1$47 = A1$47;
            this.A2$43 = A2$43;
            this.A3$39 = A3$39;
            this.A4$35 = A4$35;
            this.A5$31 = A5$31;
            this.A6$27 = A6$27;
            this.A7$23 = A7$23;
            this.A8$19 = A8$19;
            this.A9$15 = A9$15;
            this.A10$11 = A10$11;
            this.A11$7 = A11$7;
            this.A12$3 = A12$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple13Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12) {
      return $this.tuple13Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12);
   }

   default Semiring tuple13Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) {
         private final Semiring A0$52;
         private final Semiring A1$48;
         private final Semiring A2$44;
         private final Semiring A3$40;
         private final Semiring A4$36;
         private final Semiring A5$32;
         private final Semiring A6$28;
         private final Semiring A7$24;
         private final Semiring A8$20;
         private final Semiring A9$16;
         private final Semiring A10$12;
         private final Semiring A11$8;
         private final Semiring A12$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple13 plus(final Tuple13 x, final Tuple13 y) {
            return new Tuple13(this.A0$52.plus(x._1(), y._1()), this.A1$48.plus(x._2(), y._2()), this.A2$44.plus(x._3(), y._3()), this.A3$40.plus(x._4(), y._4()), this.A4$36.plus(x._5(), y._5()), this.A5$32.plus(x._6(), y._6()), this.A6$28.plus(x._7(), y._7()), this.A7$24.plus(x._8(), y._8()), this.A8$20.plus(x._9(), y._9()), this.A9$16.plus(x._10(), y._10()), this.A10$12.plus(x._11(), y._11()), this.A11$8.plus(x._12(), y._12()), this.A12$4.plus(x._13(), y._13()));
         }

         public Tuple13 times(final Tuple13 x, final Tuple13 y) {
            return new Tuple13(this.A0$52.times(x._1(), y._1()), this.A1$48.times(x._2(), y._2()), this.A2$44.times(x._3(), y._3()), this.A3$40.times(x._4(), y._4()), this.A4$36.times(x._5(), y._5()), this.A5$32.times(x._6(), y._6()), this.A6$28.times(x._7(), y._7()), this.A7$24.times(x._8(), y._8()), this.A8$20.times(x._9(), y._9()), this.A9$16.times(x._10(), y._10()), this.A10$12.times(x._11(), y._11()), this.A11$8.times(x._12(), y._12()), this.A12$4.times(x._13(), y._13()));
         }

         public Tuple13 zero() {
            return new Tuple13(this.A0$52.zero(), this.A1$48.zero(), this.A2$44.zero(), this.A3$40.zero(), this.A4$36.zero(), this.A5$32.zero(), this.A6$28.zero(), this.A7$24.zero(), this.A8$20.zero(), this.A9$16.zero(), this.A10$12.zero(), this.A11$8.zero(), this.A12$4.zero());
         }

         public {
            this.A0$52 = A0$52;
            this.A1$48 = A1$48;
            this.A2$44 = A2$44;
            this.A3$40 = A3$40;
            this.A4$36 = A4$36;
            this.A5$32 = A5$32;
            this.A6$28 = A6$28;
            this.A7$24 = A7$24;
            this.A8$20 = A8$20;
            this.A9$16 = A9$16;
            this.A10$12 = A10$12;
            this.A11$8 = A11$8;
            this.A12$4 = A12$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple14Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13) {
      return $this.tuple14Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13);
   }

   default Rig tuple14Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) {
         private final Rig A0$53;
         private final Rig A1$49;
         private final Rig A2$45;
         private final Rig A3$41;
         private final Rig A4$37;
         private final Rig A5$33;
         private final Rig A6$29;
         private final Rig A7$25;
         private final Rig A8$21;
         private final Rig A9$17;
         private final Rig A10$13;
         private final Rig A11$9;
         private final Rig A12$5;
         private final Rig A13$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple14 one() {
            return new Tuple14(this.A0$53.one(), this.A1$49.one(), this.A2$45.one(), this.A3$41.one(), this.A4$37.one(), this.A5$33.one(), this.A6$29.one(), this.A7$25.one(), this.A8$21.one(), this.A9$17.one(), this.A10$13.one(), this.A11$9.one(), this.A12$5.one(), this.A13$1.one());
         }

         public Tuple14 plus(final Tuple14 x, final Tuple14 y) {
            return new Tuple14(this.A0$53.plus(x._1(), y._1()), this.A1$49.plus(x._2(), y._2()), this.A2$45.plus(x._3(), y._3()), this.A3$41.plus(x._4(), y._4()), this.A4$37.plus(x._5(), y._5()), this.A5$33.plus(x._6(), y._6()), this.A6$29.plus(x._7(), y._7()), this.A7$25.plus(x._8(), y._8()), this.A8$21.plus(x._9(), y._9()), this.A9$17.plus(x._10(), y._10()), this.A10$13.plus(x._11(), y._11()), this.A11$9.plus(x._12(), y._12()), this.A12$5.plus(x._13(), y._13()), this.A13$1.plus(x._14(), y._14()));
         }

         public Tuple14 times(final Tuple14 x, final Tuple14 y) {
            return new Tuple14(this.A0$53.times(x._1(), y._1()), this.A1$49.times(x._2(), y._2()), this.A2$45.times(x._3(), y._3()), this.A3$41.times(x._4(), y._4()), this.A4$37.times(x._5(), y._5()), this.A5$33.times(x._6(), y._6()), this.A6$29.times(x._7(), y._7()), this.A7$25.times(x._8(), y._8()), this.A8$21.times(x._9(), y._9()), this.A9$17.times(x._10(), y._10()), this.A10$13.times(x._11(), y._11()), this.A11$9.times(x._12(), y._12()), this.A12$5.times(x._13(), y._13()), this.A13$1.times(x._14(), y._14()));
         }

         public Tuple14 zero() {
            return new Tuple14(this.A0$53.zero(), this.A1$49.zero(), this.A2$45.zero(), this.A3$41.zero(), this.A4$37.zero(), this.A5$33.zero(), this.A6$29.zero(), this.A7$25.zero(), this.A8$21.zero(), this.A9$17.zero(), this.A10$13.zero(), this.A11$9.zero(), this.A12$5.zero(), this.A13$1.zero());
         }

         public {
            this.A0$53 = A0$53;
            this.A1$49 = A1$49;
            this.A2$45 = A2$45;
            this.A3$41 = A3$41;
            this.A4$37 = A4$37;
            this.A5$33 = A5$33;
            this.A6$29 = A6$29;
            this.A7$25 = A7$25;
            this.A8$21 = A8$21;
            this.A9$17 = A9$17;
            this.A10$13 = A10$13;
            this.A11$9 = A11$9;
            this.A12$5 = A12$5;
            this.A13$1 = A13$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple14Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13) {
      return $this.tuple14Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13);
   }

   default Ring tuple14Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) {
         private final Ring A0$54;
         private final Ring A1$50;
         private final Ring A2$46;
         private final Ring A3$42;
         private final Ring A4$38;
         private final Ring A5$34;
         private final Ring A6$30;
         private final Ring A7$26;
         private final Ring A8$22;
         private final Ring A9$18;
         private final Ring A10$14;
         private final Ring A11$10;
         private final Ring A12$6;
         private final Ring A13$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple14 one() {
            return new Tuple14(this.A0$54.one(), this.A1$50.one(), this.A2$46.one(), this.A3$42.one(), this.A4$38.one(), this.A5$34.one(), this.A6$30.one(), this.A7$26.one(), this.A8$22.one(), this.A9$18.one(), this.A10$14.one(), this.A11$10.one(), this.A12$6.one(), this.A13$2.one());
         }

         public Tuple14 plus(final Tuple14 x, final Tuple14 y) {
            return new Tuple14(this.A0$54.plus(x._1(), y._1()), this.A1$50.plus(x._2(), y._2()), this.A2$46.plus(x._3(), y._3()), this.A3$42.plus(x._4(), y._4()), this.A4$38.plus(x._5(), y._5()), this.A5$34.plus(x._6(), y._6()), this.A6$30.plus(x._7(), y._7()), this.A7$26.plus(x._8(), y._8()), this.A8$22.plus(x._9(), y._9()), this.A9$18.plus(x._10(), y._10()), this.A10$14.plus(x._11(), y._11()), this.A11$10.plus(x._12(), y._12()), this.A12$6.plus(x._13(), y._13()), this.A13$2.plus(x._14(), y._14()));
         }

         public Tuple14 times(final Tuple14 x, final Tuple14 y) {
            return new Tuple14(this.A0$54.times(x._1(), y._1()), this.A1$50.times(x._2(), y._2()), this.A2$46.times(x._3(), y._3()), this.A3$42.times(x._4(), y._4()), this.A4$38.times(x._5(), y._5()), this.A5$34.times(x._6(), y._6()), this.A6$30.times(x._7(), y._7()), this.A7$26.times(x._8(), y._8()), this.A8$22.times(x._9(), y._9()), this.A9$18.times(x._10(), y._10()), this.A10$14.times(x._11(), y._11()), this.A11$10.times(x._12(), y._12()), this.A12$6.times(x._13(), y._13()), this.A13$2.times(x._14(), y._14()));
         }

         public Tuple14 zero() {
            return new Tuple14(this.A0$54.zero(), this.A1$50.zero(), this.A2$46.zero(), this.A3$42.zero(), this.A4$38.zero(), this.A5$34.zero(), this.A6$30.zero(), this.A7$26.zero(), this.A8$22.zero(), this.A9$18.zero(), this.A10$14.zero(), this.A11$10.zero(), this.A12$6.zero(), this.A13$2.zero());
         }

         public Tuple14 negate(final Tuple14 x) {
            return new Tuple14(this.A0$54.negate(x._1()), this.A1$50.negate(x._2()), this.A2$46.negate(x._3()), this.A3$42.negate(x._4()), this.A4$38.negate(x._5()), this.A5$34.negate(x._6()), this.A6$30.negate(x._7()), this.A7$26.negate(x._8()), this.A8$22.negate(x._9()), this.A9$18.negate(x._10()), this.A10$14.negate(x._11()), this.A11$10.negate(x._12()), this.A12$6.negate(x._13()), this.A13$2.negate(x._14()));
         }

         public {
            this.A0$54 = A0$54;
            this.A1$50 = A1$50;
            this.A2$46 = A2$46;
            this.A3$42 = A3$42;
            this.A4$38 = A4$38;
            this.A5$34 = A5$34;
            this.A6$30 = A6$30;
            this.A7$26 = A7$26;
            this.A8$22 = A8$22;
            this.A9$18 = A9$18;
            this.A10$14 = A10$14;
            this.A11$10 = A11$10;
            this.A12$6 = A12$6;
            this.A13$2 = A13$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple14Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13) {
      return $this.tuple14Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13);
   }

   default Rng tuple14Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) {
         private final Rng A0$55;
         private final Rng A1$51;
         private final Rng A2$47;
         private final Rng A3$43;
         private final Rng A4$39;
         private final Rng A5$35;
         private final Rng A6$31;
         private final Rng A7$27;
         private final Rng A8$23;
         private final Rng A9$19;
         private final Rng A10$15;
         private final Rng A11$11;
         private final Rng A12$7;
         private final Rng A13$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple14 plus(final Tuple14 x, final Tuple14 y) {
            return new Tuple14(this.A0$55.plus(x._1(), y._1()), this.A1$51.plus(x._2(), y._2()), this.A2$47.plus(x._3(), y._3()), this.A3$43.plus(x._4(), y._4()), this.A4$39.plus(x._5(), y._5()), this.A5$35.plus(x._6(), y._6()), this.A6$31.plus(x._7(), y._7()), this.A7$27.plus(x._8(), y._8()), this.A8$23.plus(x._9(), y._9()), this.A9$19.plus(x._10(), y._10()), this.A10$15.plus(x._11(), y._11()), this.A11$11.plus(x._12(), y._12()), this.A12$7.plus(x._13(), y._13()), this.A13$3.plus(x._14(), y._14()));
         }

         public Tuple14 times(final Tuple14 x, final Tuple14 y) {
            return new Tuple14(this.A0$55.times(x._1(), y._1()), this.A1$51.times(x._2(), y._2()), this.A2$47.times(x._3(), y._3()), this.A3$43.times(x._4(), y._4()), this.A4$39.times(x._5(), y._5()), this.A5$35.times(x._6(), y._6()), this.A6$31.times(x._7(), y._7()), this.A7$27.times(x._8(), y._8()), this.A8$23.times(x._9(), y._9()), this.A9$19.times(x._10(), y._10()), this.A10$15.times(x._11(), y._11()), this.A11$11.times(x._12(), y._12()), this.A12$7.times(x._13(), y._13()), this.A13$3.times(x._14(), y._14()));
         }

         public Tuple14 zero() {
            return new Tuple14(this.A0$55.zero(), this.A1$51.zero(), this.A2$47.zero(), this.A3$43.zero(), this.A4$39.zero(), this.A5$35.zero(), this.A6$31.zero(), this.A7$27.zero(), this.A8$23.zero(), this.A9$19.zero(), this.A10$15.zero(), this.A11$11.zero(), this.A12$7.zero(), this.A13$3.zero());
         }

         public Tuple14 negate(final Tuple14 x) {
            return new Tuple14(this.A0$55.negate(x._1()), this.A1$51.negate(x._2()), this.A2$47.negate(x._3()), this.A3$43.negate(x._4()), this.A4$39.negate(x._5()), this.A5$35.negate(x._6()), this.A6$31.negate(x._7()), this.A7$27.negate(x._8()), this.A8$23.negate(x._9()), this.A9$19.negate(x._10()), this.A10$15.negate(x._11()), this.A11$11.negate(x._12()), this.A12$7.negate(x._13()), this.A13$3.negate(x._14()));
         }

         public {
            this.A0$55 = A0$55;
            this.A1$51 = A1$51;
            this.A2$47 = A2$47;
            this.A3$43 = A3$43;
            this.A4$39 = A4$39;
            this.A5$35 = A5$35;
            this.A6$31 = A6$31;
            this.A7$27 = A7$27;
            this.A8$23 = A8$23;
            this.A9$19 = A9$19;
            this.A10$15 = A10$15;
            this.A11$11 = A11$11;
            this.A12$7 = A12$7;
            this.A13$3 = A13$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple14Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13) {
      return $this.tuple14Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13);
   }

   default Semiring tuple14Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) {
         private final Semiring A0$56;
         private final Semiring A1$52;
         private final Semiring A2$48;
         private final Semiring A3$44;
         private final Semiring A4$40;
         private final Semiring A5$36;
         private final Semiring A6$32;
         private final Semiring A7$28;
         private final Semiring A8$24;
         private final Semiring A9$20;
         private final Semiring A10$16;
         private final Semiring A11$12;
         private final Semiring A12$8;
         private final Semiring A13$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple14 plus(final Tuple14 x, final Tuple14 y) {
            return new Tuple14(this.A0$56.plus(x._1(), y._1()), this.A1$52.plus(x._2(), y._2()), this.A2$48.plus(x._3(), y._3()), this.A3$44.plus(x._4(), y._4()), this.A4$40.plus(x._5(), y._5()), this.A5$36.plus(x._6(), y._6()), this.A6$32.plus(x._7(), y._7()), this.A7$28.plus(x._8(), y._8()), this.A8$24.plus(x._9(), y._9()), this.A9$20.plus(x._10(), y._10()), this.A10$16.plus(x._11(), y._11()), this.A11$12.plus(x._12(), y._12()), this.A12$8.plus(x._13(), y._13()), this.A13$4.plus(x._14(), y._14()));
         }

         public Tuple14 times(final Tuple14 x, final Tuple14 y) {
            return new Tuple14(this.A0$56.times(x._1(), y._1()), this.A1$52.times(x._2(), y._2()), this.A2$48.times(x._3(), y._3()), this.A3$44.times(x._4(), y._4()), this.A4$40.times(x._5(), y._5()), this.A5$36.times(x._6(), y._6()), this.A6$32.times(x._7(), y._7()), this.A7$28.times(x._8(), y._8()), this.A8$24.times(x._9(), y._9()), this.A9$20.times(x._10(), y._10()), this.A10$16.times(x._11(), y._11()), this.A11$12.times(x._12(), y._12()), this.A12$8.times(x._13(), y._13()), this.A13$4.times(x._14(), y._14()));
         }

         public Tuple14 zero() {
            return new Tuple14(this.A0$56.zero(), this.A1$52.zero(), this.A2$48.zero(), this.A3$44.zero(), this.A4$40.zero(), this.A5$36.zero(), this.A6$32.zero(), this.A7$28.zero(), this.A8$24.zero(), this.A9$20.zero(), this.A10$16.zero(), this.A11$12.zero(), this.A12$8.zero(), this.A13$4.zero());
         }

         public {
            this.A0$56 = A0$56;
            this.A1$52 = A1$52;
            this.A2$48 = A2$48;
            this.A3$44 = A3$44;
            this.A4$40 = A4$40;
            this.A5$36 = A5$36;
            this.A6$32 = A6$32;
            this.A7$28 = A7$28;
            this.A8$24 = A8$24;
            this.A9$20 = A9$20;
            this.A10$16 = A10$16;
            this.A11$12 = A11$12;
            this.A12$8 = A12$8;
            this.A13$4 = A13$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple15Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14) {
      return $this.tuple15Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14);
   }

   default Rig tuple15Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) {
         private final Rig A0$57;
         private final Rig A1$53;
         private final Rig A2$49;
         private final Rig A3$45;
         private final Rig A4$41;
         private final Rig A5$37;
         private final Rig A6$33;
         private final Rig A7$29;
         private final Rig A8$25;
         private final Rig A9$21;
         private final Rig A10$17;
         private final Rig A11$13;
         private final Rig A12$9;
         private final Rig A13$5;
         private final Rig A14$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple15 one() {
            return new Tuple15(this.A0$57.one(), this.A1$53.one(), this.A2$49.one(), this.A3$45.one(), this.A4$41.one(), this.A5$37.one(), this.A6$33.one(), this.A7$29.one(), this.A8$25.one(), this.A9$21.one(), this.A10$17.one(), this.A11$13.one(), this.A12$9.one(), this.A13$5.one(), this.A14$1.one());
         }

         public Tuple15 plus(final Tuple15 x, final Tuple15 y) {
            return new Tuple15(this.A0$57.plus(x._1(), y._1()), this.A1$53.plus(x._2(), y._2()), this.A2$49.plus(x._3(), y._3()), this.A3$45.plus(x._4(), y._4()), this.A4$41.plus(x._5(), y._5()), this.A5$37.plus(x._6(), y._6()), this.A6$33.plus(x._7(), y._7()), this.A7$29.plus(x._8(), y._8()), this.A8$25.plus(x._9(), y._9()), this.A9$21.plus(x._10(), y._10()), this.A10$17.plus(x._11(), y._11()), this.A11$13.plus(x._12(), y._12()), this.A12$9.plus(x._13(), y._13()), this.A13$5.plus(x._14(), y._14()), this.A14$1.plus(x._15(), y._15()));
         }

         public Tuple15 times(final Tuple15 x, final Tuple15 y) {
            return new Tuple15(this.A0$57.times(x._1(), y._1()), this.A1$53.times(x._2(), y._2()), this.A2$49.times(x._3(), y._3()), this.A3$45.times(x._4(), y._4()), this.A4$41.times(x._5(), y._5()), this.A5$37.times(x._6(), y._6()), this.A6$33.times(x._7(), y._7()), this.A7$29.times(x._8(), y._8()), this.A8$25.times(x._9(), y._9()), this.A9$21.times(x._10(), y._10()), this.A10$17.times(x._11(), y._11()), this.A11$13.times(x._12(), y._12()), this.A12$9.times(x._13(), y._13()), this.A13$5.times(x._14(), y._14()), this.A14$1.times(x._15(), y._15()));
         }

         public Tuple15 zero() {
            return new Tuple15(this.A0$57.zero(), this.A1$53.zero(), this.A2$49.zero(), this.A3$45.zero(), this.A4$41.zero(), this.A5$37.zero(), this.A6$33.zero(), this.A7$29.zero(), this.A8$25.zero(), this.A9$21.zero(), this.A10$17.zero(), this.A11$13.zero(), this.A12$9.zero(), this.A13$5.zero(), this.A14$1.zero());
         }

         public {
            this.A0$57 = A0$57;
            this.A1$53 = A1$53;
            this.A2$49 = A2$49;
            this.A3$45 = A3$45;
            this.A4$41 = A4$41;
            this.A5$37 = A5$37;
            this.A6$33 = A6$33;
            this.A7$29 = A7$29;
            this.A8$25 = A8$25;
            this.A9$21 = A9$21;
            this.A10$17 = A10$17;
            this.A11$13 = A11$13;
            this.A12$9 = A12$9;
            this.A13$5 = A13$5;
            this.A14$1 = A14$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple15Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14) {
      return $this.tuple15Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14);
   }

   default Ring tuple15Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) {
         private final Ring A0$58;
         private final Ring A1$54;
         private final Ring A2$50;
         private final Ring A3$46;
         private final Ring A4$42;
         private final Ring A5$38;
         private final Ring A6$34;
         private final Ring A7$30;
         private final Ring A8$26;
         private final Ring A9$22;
         private final Ring A10$18;
         private final Ring A11$14;
         private final Ring A12$10;
         private final Ring A13$6;
         private final Ring A14$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple15 one() {
            return new Tuple15(this.A0$58.one(), this.A1$54.one(), this.A2$50.one(), this.A3$46.one(), this.A4$42.one(), this.A5$38.one(), this.A6$34.one(), this.A7$30.one(), this.A8$26.one(), this.A9$22.one(), this.A10$18.one(), this.A11$14.one(), this.A12$10.one(), this.A13$6.one(), this.A14$2.one());
         }

         public Tuple15 plus(final Tuple15 x, final Tuple15 y) {
            return new Tuple15(this.A0$58.plus(x._1(), y._1()), this.A1$54.plus(x._2(), y._2()), this.A2$50.plus(x._3(), y._3()), this.A3$46.plus(x._4(), y._4()), this.A4$42.plus(x._5(), y._5()), this.A5$38.plus(x._6(), y._6()), this.A6$34.plus(x._7(), y._7()), this.A7$30.plus(x._8(), y._8()), this.A8$26.plus(x._9(), y._9()), this.A9$22.plus(x._10(), y._10()), this.A10$18.plus(x._11(), y._11()), this.A11$14.plus(x._12(), y._12()), this.A12$10.plus(x._13(), y._13()), this.A13$6.plus(x._14(), y._14()), this.A14$2.plus(x._15(), y._15()));
         }

         public Tuple15 times(final Tuple15 x, final Tuple15 y) {
            return new Tuple15(this.A0$58.times(x._1(), y._1()), this.A1$54.times(x._2(), y._2()), this.A2$50.times(x._3(), y._3()), this.A3$46.times(x._4(), y._4()), this.A4$42.times(x._5(), y._5()), this.A5$38.times(x._6(), y._6()), this.A6$34.times(x._7(), y._7()), this.A7$30.times(x._8(), y._8()), this.A8$26.times(x._9(), y._9()), this.A9$22.times(x._10(), y._10()), this.A10$18.times(x._11(), y._11()), this.A11$14.times(x._12(), y._12()), this.A12$10.times(x._13(), y._13()), this.A13$6.times(x._14(), y._14()), this.A14$2.times(x._15(), y._15()));
         }

         public Tuple15 zero() {
            return new Tuple15(this.A0$58.zero(), this.A1$54.zero(), this.A2$50.zero(), this.A3$46.zero(), this.A4$42.zero(), this.A5$38.zero(), this.A6$34.zero(), this.A7$30.zero(), this.A8$26.zero(), this.A9$22.zero(), this.A10$18.zero(), this.A11$14.zero(), this.A12$10.zero(), this.A13$6.zero(), this.A14$2.zero());
         }

         public Tuple15 negate(final Tuple15 x) {
            return new Tuple15(this.A0$58.negate(x._1()), this.A1$54.negate(x._2()), this.A2$50.negate(x._3()), this.A3$46.negate(x._4()), this.A4$42.negate(x._5()), this.A5$38.negate(x._6()), this.A6$34.negate(x._7()), this.A7$30.negate(x._8()), this.A8$26.negate(x._9()), this.A9$22.negate(x._10()), this.A10$18.negate(x._11()), this.A11$14.negate(x._12()), this.A12$10.negate(x._13()), this.A13$6.negate(x._14()), this.A14$2.negate(x._15()));
         }

         public {
            this.A0$58 = A0$58;
            this.A1$54 = A1$54;
            this.A2$50 = A2$50;
            this.A3$46 = A3$46;
            this.A4$42 = A4$42;
            this.A5$38 = A5$38;
            this.A6$34 = A6$34;
            this.A7$30 = A7$30;
            this.A8$26 = A8$26;
            this.A9$22 = A9$22;
            this.A10$18 = A10$18;
            this.A11$14 = A11$14;
            this.A12$10 = A12$10;
            this.A13$6 = A13$6;
            this.A14$2 = A14$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple15Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14) {
      return $this.tuple15Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14);
   }

   default Rng tuple15Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) {
         private final Rng A0$59;
         private final Rng A1$55;
         private final Rng A2$51;
         private final Rng A3$47;
         private final Rng A4$43;
         private final Rng A5$39;
         private final Rng A6$35;
         private final Rng A7$31;
         private final Rng A8$27;
         private final Rng A9$23;
         private final Rng A10$19;
         private final Rng A11$15;
         private final Rng A12$11;
         private final Rng A13$7;
         private final Rng A14$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple15 plus(final Tuple15 x, final Tuple15 y) {
            return new Tuple15(this.A0$59.plus(x._1(), y._1()), this.A1$55.plus(x._2(), y._2()), this.A2$51.plus(x._3(), y._3()), this.A3$47.plus(x._4(), y._4()), this.A4$43.plus(x._5(), y._5()), this.A5$39.plus(x._6(), y._6()), this.A6$35.plus(x._7(), y._7()), this.A7$31.plus(x._8(), y._8()), this.A8$27.plus(x._9(), y._9()), this.A9$23.plus(x._10(), y._10()), this.A10$19.plus(x._11(), y._11()), this.A11$15.plus(x._12(), y._12()), this.A12$11.plus(x._13(), y._13()), this.A13$7.plus(x._14(), y._14()), this.A14$3.plus(x._15(), y._15()));
         }

         public Tuple15 times(final Tuple15 x, final Tuple15 y) {
            return new Tuple15(this.A0$59.times(x._1(), y._1()), this.A1$55.times(x._2(), y._2()), this.A2$51.times(x._3(), y._3()), this.A3$47.times(x._4(), y._4()), this.A4$43.times(x._5(), y._5()), this.A5$39.times(x._6(), y._6()), this.A6$35.times(x._7(), y._7()), this.A7$31.times(x._8(), y._8()), this.A8$27.times(x._9(), y._9()), this.A9$23.times(x._10(), y._10()), this.A10$19.times(x._11(), y._11()), this.A11$15.times(x._12(), y._12()), this.A12$11.times(x._13(), y._13()), this.A13$7.times(x._14(), y._14()), this.A14$3.times(x._15(), y._15()));
         }

         public Tuple15 zero() {
            return new Tuple15(this.A0$59.zero(), this.A1$55.zero(), this.A2$51.zero(), this.A3$47.zero(), this.A4$43.zero(), this.A5$39.zero(), this.A6$35.zero(), this.A7$31.zero(), this.A8$27.zero(), this.A9$23.zero(), this.A10$19.zero(), this.A11$15.zero(), this.A12$11.zero(), this.A13$7.zero(), this.A14$3.zero());
         }

         public Tuple15 negate(final Tuple15 x) {
            return new Tuple15(this.A0$59.negate(x._1()), this.A1$55.negate(x._2()), this.A2$51.negate(x._3()), this.A3$47.negate(x._4()), this.A4$43.negate(x._5()), this.A5$39.negate(x._6()), this.A6$35.negate(x._7()), this.A7$31.negate(x._8()), this.A8$27.negate(x._9()), this.A9$23.negate(x._10()), this.A10$19.negate(x._11()), this.A11$15.negate(x._12()), this.A12$11.negate(x._13()), this.A13$7.negate(x._14()), this.A14$3.negate(x._15()));
         }

         public {
            this.A0$59 = A0$59;
            this.A1$55 = A1$55;
            this.A2$51 = A2$51;
            this.A3$47 = A3$47;
            this.A4$43 = A4$43;
            this.A5$39 = A5$39;
            this.A6$35 = A6$35;
            this.A7$31 = A7$31;
            this.A8$27 = A8$27;
            this.A9$23 = A9$23;
            this.A10$19 = A10$19;
            this.A11$15 = A11$15;
            this.A12$11 = A12$11;
            this.A13$7 = A13$7;
            this.A14$3 = A14$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple15Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14) {
      return $this.tuple15Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14);
   }

   default Semiring tuple15Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) {
         private final Semiring A0$60;
         private final Semiring A1$56;
         private final Semiring A2$52;
         private final Semiring A3$48;
         private final Semiring A4$44;
         private final Semiring A5$40;
         private final Semiring A6$36;
         private final Semiring A7$32;
         private final Semiring A8$28;
         private final Semiring A9$24;
         private final Semiring A10$20;
         private final Semiring A11$16;
         private final Semiring A12$12;
         private final Semiring A13$8;
         private final Semiring A14$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple15 plus(final Tuple15 x, final Tuple15 y) {
            return new Tuple15(this.A0$60.plus(x._1(), y._1()), this.A1$56.plus(x._2(), y._2()), this.A2$52.plus(x._3(), y._3()), this.A3$48.plus(x._4(), y._4()), this.A4$44.plus(x._5(), y._5()), this.A5$40.plus(x._6(), y._6()), this.A6$36.plus(x._7(), y._7()), this.A7$32.plus(x._8(), y._8()), this.A8$28.plus(x._9(), y._9()), this.A9$24.plus(x._10(), y._10()), this.A10$20.plus(x._11(), y._11()), this.A11$16.plus(x._12(), y._12()), this.A12$12.plus(x._13(), y._13()), this.A13$8.plus(x._14(), y._14()), this.A14$4.plus(x._15(), y._15()));
         }

         public Tuple15 times(final Tuple15 x, final Tuple15 y) {
            return new Tuple15(this.A0$60.times(x._1(), y._1()), this.A1$56.times(x._2(), y._2()), this.A2$52.times(x._3(), y._3()), this.A3$48.times(x._4(), y._4()), this.A4$44.times(x._5(), y._5()), this.A5$40.times(x._6(), y._6()), this.A6$36.times(x._7(), y._7()), this.A7$32.times(x._8(), y._8()), this.A8$28.times(x._9(), y._9()), this.A9$24.times(x._10(), y._10()), this.A10$20.times(x._11(), y._11()), this.A11$16.times(x._12(), y._12()), this.A12$12.times(x._13(), y._13()), this.A13$8.times(x._14(), y._14()), this.A14$4.times(x._15(), y._15()));
         }

         public Tuple15 zero() {
            return new Tuple15(this.A0$60.zero(), this.A1$56.zero(), this.A2$52.zero(), this.A3$48.zero(), this.A4$44.zero(), this.A5$40.zero(), this.A6$36.zero(), this.A7$32.zero(), this.A8$28.zero(), this.A9$24.zero(), this.A10$20.zero(), this.A11$16.zero(), this.A12$12.zero(), this.A13$8.zero(), this.A14$4.zero());
         }

         public {
            this.A0$60 = A0$60;
            this.A1$56 = A1$56;
            this.A2$52 = A2$52;
            this.A3$48 = A3$48;
            this.A4$44 = A4$44;
            this.A5$40 = A5$40;
            this.A6$36 = A6$36;
            this.A7$32 = A7$32;
            this.A8$28 = A8$28;
            this.A9$24 = A9$24;
            this.A10$20 = A10$20;
            this.A11$16 = A11$16;
            this.A12$12 = A12$12;
            this.A13$8 = A13$8;
            this.A14$4 = A14$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple16Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15) {
      return $this.tuple16Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15);
   }

   default Rig tuple16Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) {
         private final Rig A0$61;
         private final Rig A1$57;
         private final Rig A2$53;
         private final Rig A3$49;
         private final Rig A4$45;
         private final Rig A5$41;
         private final Rig A6$37;
         private final Rig A7$33;
         private final Rig A8$29;
         private final Rig A9$25;
         private final Rig A10$21;
         private final Rig A11$17;
         private final Rig A12$13;
         private final Rig A13$9;
         private final Rig A14$5;
         private final Rig A15$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple16 one() {
            return new Tuple16(this.A0$61.one(), this.A1$57.one(), this.A2$53.one(), this.A3$49.one(), this.A4$45.one(), this.A5$41.one(), this.A6$37.one(), this.A7$33.one(), this.A8$29.one(), this.A9$25.one(), this.A10$21.one(), this.A11$17.one(), this.A12$13.one(), this.A13$9.one(), this.A14$5.one(), this.A15$1.one());
         }

         public Tuple16 plus(final Tuple16 x, final Tuple16 y) {
            return new Tuple16(this.A0$61.plus(x._1(), y._1()), this.A1$57.plus(x._2(), y._2()), this.A2$53.plus(x._3(), y._3()), this.A3$49.plus(x._4(), y._4()), this.A4$45.plus(x._5(), y._5()), this.A5$41.plus(x._6(), y._6()), this.A6$37.plus(x._7(), y._7()), this.A7$33.plus(x._8(), y._8()), this.A8$29.plus(x._9(), y._9()), this.A9$25.plus(x._10(), y._10()), this.A10$21.plus(x._11(), y._11()), this.A11$17.plus(x._12(), y._12()), this.A12$13.plus(x._13(), y._13()), this.A13$9.plus(x._14(), y._14()), this.A14$5.plus(x._15(), y._15()), this.A15$1.plus(x._16(), y._16()));
         }

         public Tuple16 times(final Tuple16 x, final Tuple16 y) {
            return new Tuple16(this.A0$61.times(x._1(), y._1()), this.A1$57.times(x._2(), y._2()), this.A2$53.times(x._3(), y._3()), this.A3$49.times(x._4(), y._4()), this.A4$45.times(x._5(), y._5()), this.A5$41.times(x._6(), y._6()), this.A6$37.times(x._7(), y._7()), this.A7$33.times(x._8(), y._8()), this.A8$29.times(x._9(), y._9()), this.A9$25.times(x._10(), y._10()), this.A10$21.times(x._11(), y._11()), this.A11$17.times(x._12(), y._12()), this.A12$13.times(x._13(), y._13()), this.A13$9.times(x._14(), y._14()), this.A14$5.times(x._15(), y._15()), this.A15$1.times(x._16(), y._16()));
         }

         public Tuple16 zero() {
            return new Tuple16(this.A0$61.zero(), this.A1$57.zero(), this.A2$53.zero(), this.A3$49.zero(), this.A4$45.zero(), this.A5$41.zero(), this.A6$37.zero(), this.A7$33.zero(), this.A8$29.zero(), this.A9$25.zero(), this.A10$21.zero(), this.A11$17.zero(), this.A12$13.zero(), this.A13$9.zero(), this.A14$5.zero(), this.A15$1.zero());
         }

         public {
            this.A0$61 = A0$61;
            this.A1$57 = A1$57;
            this.A2$53 = A2$53;
            this.A3$49 = A3$49;
            this.A4$45 = A4$45;
            this.A5$41 = A5$41;
            this.A6$37 = A6$37;
            this.A7$33 = A7$33;
            this.A8$29 = A8$29;
            this.A9$25 = A9$25;
            this.A10$21 = A10$21;
            this.A11$17 = A11$17;
            this.A12$13 = A12$13;
            this.A13$9 = A13$9;
            this.A14$5 = A14$5;
            this.A15$1 = A15$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple16Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15) {
      return $this.tuple16Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15);
   }

   default Ring tuple16Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) {
         private final Ring A0$62;
         private final Ring A1$58;
         private final Ring A2$54;
         private final Ring A3$50;
         private final Ring A4$46;
         private final Ring A5$42;
         private final Ring A6$38;
         private final Ring A7$34;
         private final Ring A8$30;
         private final Ring A9$26;
         private final Ring A10$22;
         private final Ring A11$18;
         private final Ring A12$14;
         private final Ring A13$10;
         private final Ring A14$6;
         private final Ring A15$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple16 one() {
            return new Tuple16(this.A0$62.one(), this.A1$58.one(), this.A2$54.one(), this.A3$50.one(), this.A4$46.one(), this.A5$42.one(), this.A6$38.one(), this.A7$34.one(), this.A8$30.one(), this.A9$26.one(), this.A10$22.one(), this.A11$18.one(), this.A12$14.one(), this.A13$10.one(), this.A14$6.one(), this.A15$2.one());
         }

         public Tuple16 plus(final Tuple16 x, final Tuple16 y) {
            return new Tuple16(this.A0$62.plus(x._1(), y._1()), this.A1$58.plus(x._2(), y._2()), this.A2$54.plus(x._3(), y._3()), this.A3$50.plus(x._4(), y._4()), this.A4$46.plus(x._5(), y._5()), this.A5$42.plus(x._6(), y._6()), this.A6$38.plus(x._7(), y._7()), this.A7$34.plus(x._8(), y._8()), this.A8$30.plus(x._9(), y._9()), this.A9$26.plus(x._10(), y._10()), this.A10$22.plus(x._11(), y._11()), this.A11$18.plus(x._12(), y._12()), this.A12$14.plus(x._13(), y._13()), this.A13$10.plus(x._14(), y._14()), this.A14$6.plus(x._15(), y._15()), this.A15$2.plus(x._16(), y._16()));
         }

         public Tuple16 times(final Tuple16 x, final Tuple16 y) {
            return new Tuple16(this.A0$62.times(x._1(), y._1()), this.A1$58.times(x._2(), y._2()), this.A2$54.times(x._3(), y._3()), this.A3$50.times(x._4(), y._4()), this.A4$46.times(x._5(), y._5()), this.A5$42.times(x._6(), y._6()), this.A6$38.times(x._7(), y._7()), this.A7$34.times(x._8(), y._8()), this.A8$30.times(x._9(), y._9()), this.A9$26.times(x._10(), y._10()), this.A10$22.times(x._11(), y._11()), this.A11$18.times(x._12(), y._12()), this.A12$14.times(x._13(), y._13()), this.A13$10.times(x._14(), y._14()), this.A14$6.times(x._15(), y._15()), this.A15$2.times(x._16(), y._16()));
         }

         public Tuple16 zero() {
            return new Tuple16(this.A0$62.zero(), this.A1$58.zero(), this.A2$54.zero(), this.A3$50.zero(), this.A4$46.zero(), this.A5$42.zero(), this.A6$38.zero(), this.A7$34.zero(), this.A8$30.zero(), this.A9$26.zero(), this.A10$22.zero(), this.A11$18.zero(), this.A12$14.zero(), this.A13$10.zero(), this.A14$6.zero(), this.A15$2.zero());
         }

         public Tuple16 negate(final Tuple16 x) {
            return new Tuple16(this.A0$62.negate(x._1()), this.A1$58.negate(x._2()), this.A2$54.negate(x._3()), this.A3$50.negate(x._4()), this.A4$46.negate(x._5()), this.A5$42.negate(x._6()), this.A6$38.negate(x._7()), this.A7$34.negate(x._8()), this.A8$30.negate(x._9()), this.A9$26.negate(x._10()), this.A10$22.negate(x._11()), this.A11$18.negate(x._12()), this.A12$14.negate(x._13()), this.A13$10.negate(x._14()), this.A14$6.negate(x._15()), this.A15$2.negate(x._16()));
         }

         public {
            this.A0$62 = A0$62;
            this.A1$58 = A1$58;
            this.A2$54 = A2$54;
            this.A3$50 = A3$50;
            this.A4$46 = A4$46;
            this.A5$42 = A5$42;
            this.A6$38 = A6$38;
            this.A7$34 = A7$34;
            this.A8$30 = A8$30;
            this.A9$26 = A9$26;
            this.A10$22 = A10$22;
            this.A11$18 = A11$18;
            this.A12$14 = A12$14;
            this.A13$10 = A13$10;
            this.A14$6 = A14$6;
            this.A15$2 = A15$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple16Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15) {
      return $this.tuple16Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15);
   }

   default Rng tuple16Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) {
         private final Rng A0$63;
         private final Rng A1$59;
         private final Rng A2$55;
         private final Rng A3$51;
         private final Rng A4$47;
         private final Rng A5$43;
         private final Rng A6$39;
         private final Rng A7$35;
         private final Rng A8$31;
         private final Rng A9$27;
         private final Rng A10$23;
         private final Rng A11$19;
         private final Rng A12$15;
         private final Rng A13$11;
         private final Rng A14$7;
         private final Rng A15$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple16 plus(final Tuple16 x, final Tuple16 y) {
            return new Tuple16(this.A0$63.plus(x._1(), y._1()), this.A1$59.plus(x._2(), y._2()), this.A2$55.plus(x._3(), y._3()), this.A3$51.plus(x._4(), y._4()), this.A4$47.plus(x._5(), y._5()), this.A5$43.plus(x._6(), y._6()), this.A6$39.plus(x._7(), y._7()), this.A7$35.plus(x._8(), y._8()), this.A8$31.plus(x._9(), y._9()), this.A9$27.plus(x._10(), y._10()), this.A10$23.plus(x._11(), y._11()), this.A11$19.plus(x._12(), y._12()), this.A12$15.plus(x._13(), y._13()), this.A13$11.plus(x._14(), y._14()), this.A14$7.plus(x._15(), y._15()), this.A15$3.plus(x._16(), y._16()));
         }

         public Tuple16 times(final Tuple16 x, final Tuple16 y) {
            return new Tuple16(this.A0$63.times(x._1(), y._1()), this.A1$59.times(x._2(), y._2()), this.A2$55.times(x._3(), y._3()), this.A3$51.times(x._4(), y._4()), this.A4$47.times(x._5(), y._5()), this.A5$43.times(x._6(), y._6()), this.A6$39.times(x._7(), y._7()), this.A7$35.times(x._8(), y._8()), this.A8$31.times(x._9(), y._9()), this.A9$27.times(x._10(), y._10()), this.A10$23.times(x._11(), y._11()), this.A11$19.times(x._12(), y._12()), this.A12$15.times(x._13(), y._13()), this.A13$11.times(x._14(), y._14()), this.A14$7.times(x._15(), y._15()), this.A15$3.times(x._16(), y._16()));
         }

         public Tuple16 zero() {
            return new Tuple16(this.A0$63.zero(), this.A1$59.zero(), this.A2$55.zero(), this.A3$51.zero(), this.A4$47.zero(), this.A5$43.zero(), this.A6$39.zero(), this.A7$35.zero(), this.A8$31.zero(), this.A9$27.zero(), this.A10$23.zero(), this.A11$19.zero(), this.A12$15.zero(), this.A13$11.zero(), this.A14$7.zero(), this.A15$3.zero());
         }

         public Tuple16 negate(final Tuple16 x) {
            return new Tuple16(this.A0$63.negate(x._1()), this.A1$59.negate(x._2()), this.A2$55.negate(x._3()), this.A3$51.negate(x._4()), this.A4$47.negate(x._5()), this.A5$43.negate(x._6()), this.A6$39.negate(x._7()), this.A7$35.negate(x._8()), this.A8$31.negate(x._9()), this.A9$27.negate(x._10()), this.A10$23.negate(x._11()), this.A11$19.negate(x._12()), this.A12$15.negate(x._13()), this.A13$11.negate(x._14()), this.A14$7.negate(x._15()), this.A15$3.negate(x._16()));
         }

         public {
            this.A0$63 = A0$63;
            this.A1$59 = A1$59;
            this.A2$55 = A2$55;
            this.A3$51 = A3$51;
            this.A4$47 = A4$47;
            this.A5$43 = A5$43;
            this.A6$39 = A6$39;
            this.A7$35 = A7$35;
            this.A8$31 = A8$31;
            this.A9$27 = A9$27;
            this.A10$23 = A10$23;
            this.A11$19 = A11$19;
            this.A12$15 = A12$15;
            this.A13$11 = A13$11;
            this.A14$7 = A14$7;
            this.A15$3 = A15$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple16Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15) {
      return $this.tuple16Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15);
   }

   default Semiring tuple16Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) {
         private final Semiring A0$64;
         private final Semiring A1$60;
         private final Semiring A2$56;
         private final Semiring A3$52;
         private final Semiring A4$48;
         private final Semiring A5$44;
         private final Semiring A6$40;
         private final Semiring A7$36;
         private final Semiring A8$32;
         private final Semiring A9$28;
         private final Semiring A10$24;
         private final Semiring A11$20;
         private final Semiring A12$16;
         private final Semiring A13$12;
         private final Semiring A14$8;
         private final Semiring A15$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple16 plus(final Tuple16 x, final Tuple16 y) {
            return new Tuple16(this.A0$64.plus(x._1(), y._1()), this.A1$60.plus(x._2(), y._2()), this.A2$56.plus(x._3(), y._3()), this.A3$52.plus(x._4(), y._4()), this.A4$48.plus(x._5(), y._5()), this.A5$44.plus(x._6(), y._6()), this.A6$40.plus(x._7(), y._7()), this.A7$36.plus(x._8(), y._8()), this.A8$32.plus(x._9(), y._9()), this.A9$28.plus(x._10(), y._10()), this.A10$24.plus(x._11(), y._11()), this.A11$20.plus(x._12(), y._12()), this.A12$16.plus(x._13(), y._13()), this.A13$12.plus(x._14(), y._14()), this.A14$8.plus(x._15(), y._15()), this.A15$4.plus(x._16(), y._16()));
         }

         public Tuple16 times(final Tuple16 x, final Tuple16 y) {
            return new Tuple16(this.A0$64.times(x._1(), y._1()), this.A1$60.times(x._2(), y._2()), this.A2$56.times(x._3(), y._3()), this.A3$52.times(x._4(), y._4()), this.A4$48.times(x._5(), y._5()), this.A5$44.times(x._6(), y._6()), this.A6$40.times(x._7(), y._7()), this.A7$36.times(x._8(), y._8()), this.A8$32.times(x._9(), y._9()), this.A9$28.times(x._10(), y._10()), this.A10$24.times(x._11(), y._11()), this.A11$20.times(x._12(), y._12()), this.A12$16.times(x._13(), y._13()), this.A13$12.times(x._14(), y._14()), this.A14$8.times(x._15(), y._15()), this.A15$4.times(x._16(), y._16()));
         }

         public Tuple16 zero() {
            return new Tuple16(this.A0$64.zero(), this.A1$60.zero(), this.A2$56.zero(), this.A3$52.zero(), this.A4$48.zero(), this.A5$44.zero(), this.A6$40.zero(), this.A7$36.zero(), this.A8$32.zero(), this.A9$28.zero(), this.A10$24.zero(), this.A11$20.zero(), this.A12$16.zero(), this.A13$12.zero(), this.A14$8.zero(), this.A15$4.zero());
         }

         public {
            this.A0$64 = A0$64;
            this.A1$60 = A1$60;
            this.A2$56 = A2$56;
            this.A3$52 = A3$52;
            this.A4$48 = A4$48;
            this.A5$44 = A5$44;
            this.A6$40 = A6$40;
            this.A7$36 = A7$36;
            this.A8$32 = A8$32;
            this.A9$28 = A9$28;
            this.A10$24 = A10$24;
            this.A11$20 = A11$20;
            this.A12$16 = A12$16;
            this.A13$12 = A13$12;
            this.A14$8 = A14$8;
            this.A15$4 = A15$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple17Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16) {
      return $this.tuple17Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);
   }

   default Rig tuple17Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) {
         private final Rig A0$65;
         private final Rig A1$61;
         private final Rig A2$57;
         private final Rig A3$53;
         private final Rig A4$49;
         private final Rig A5$45;
         private final Rig A6$41;
         private final Rig A7$37;
         private final Rig A8$33;
         private final Rig A9$29;
         private final Rig A10$25;
         private final Rig A11$21;
         private final Rig A12$17;
         private final Rig A13$13;
         private final Rig A14$9;
         private final Rig A15$5;
         private final Rig A16$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple17 one() {
            return new Tuple17(this.A0$65.one(), this.A1$61.one(), this.A2$57.one(), this.A3$53.one(), this.A4$49.one(), this.A5$45.one(), this.A6$41.one(), this.A7$37.one(), this.A8$33.one(), this.A9$29.one(), this.A10$25.one(), this.A11$21.one(), this.A12$17.one(), this.A13$13.one(), this.A14$9.one(), this.A15$5.one(), this.A16$1.one());
         }

         public Tuple17 plus(final Tuple17 x, final Tuple17 y) {
            return new Tuple17(this.A0$65.plus(x._1(), y._1()), this.A1$61.plus(x._2(), y._2()), this.A2$57.plus(x._3(), y._3()), this.A3$53.plus(x._4(), y._4()), this.A4$49.plus(x._5(), y._5()), this.A5$45.plus(x._6(), y._6()), this.A6$41.plus(x._7(), y._7()), this.A7$37.plus(x._8(), y._8()), this.A8$33.plus(x._9(), y._9()), this.A9$29.plus(x._10(), y._10()), this.A10$25.plus(x._11(), y._11()), this.A11$21.plus(x._12(), y._12()), this.A12$17.plus(x._13(), y._13()), this.A13$13.plus(x._14(), y._14()), this.A14$9.plus(x._15(), y._15()), this.A15$5.plus(x._16(), y._16()), this.A16$1.plus(x._17(), y._17()));
         }

         public Tuple17 times(final Tuple17 x, final Tuple17 y) {
            return new Tuple17(this.A0$65.times(x._1(), y._1()), this.A1$61.times(x._2(), y._2()), this.A2$57.times(x._3(), y._3()), this.A3$53.times(x._4(), y._4()), this.A4$49.times(x._5(), y._5()), this.A5$45.times(x._6(), y._6()), this.A6$41.times(x._7(), y._7()), this.A7$37.times(x._8(), y._8()), this.A8$33.times(x._9(), y._9()), this.A9$29.times(x._10(), y._10()), this.A10$25.times(x._11(), y._11()), this.A11$21.times(x._12(), y._12()), this.A12$17.times(x._13(), y._13()), this.A13$13.times(x._14(), y._14()), this.A14$9.times(x._15(), y._15()), this.A15$5.times(x._16(), y._16()), this.A16$1.times(x._17(), y._17()));
         }

         public Tuple17 zero() {
            return new Tuple17(this.A0$65.zero(), this.A1$61.zero(), this.A2$57.zero(), this.A3$53.zero(), this.A4$49.zero(), this.A5$45.zero(), this.A6$41.zero(), this.A7$37.zero(), this.A8$33.zero(), this.A9$29.zero(), this.A10$25.zero(), this.A11$21.zero(), this.A12$17.zero(), this.A13$13.zero(), this.A14$9.zero(), this.A15$5.zero(), this.A16$1.zero());
         }

         public {
            this.A0$65 = A0$65;
            this.A1$61 = A1$61;
            this.A2$57 = A2$57;
            this.A3$53 = A3$53;
            this.A4$49 = A4$49;
            this.A5$45 = A5$45;
            this.A6$41 = A6$41;
            this.A7$37 = A7$37;
            this.A8$33 = A8$33;
            this.A9$29 = A9$29;
            this.A10$25 = A10$25;
            this.A11$21 = A11$21;
            this.A12$17 = A12$17;
            this.A13$13 = A13$13;
            this.A14$9 = A14$9;
            this.A15$5 = A15$5;
            this.A16$1 = A16$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple17Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16) {
      return $this.tuple17Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);
   }

   default Ring tuple17Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) {
         private final Ring A0$66;
         private final Ring A1$62;
         private final Ring A2$58;
         private final Ring A3$54;
         private final Ring A4$50;
         private final Ring A5$46;
         private final Ring A6$42;
         private final Ring A7$38;
         private final Ring A8$34;
         private final Ring A9$30;
         private final Ring A10$26;
         private final Ring A11$22;
         private final Ring A12$18;
         private final Ring A13$14;
         private final Ring A14$10;
         private final Ring A15$6;
         private final Ring A16$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple17 one() {
            return new Tuple17(this.A0$66.one(), this.A1$62.one(), this.A2$58.one(), this.A3$54.one(), this.A4$50.one(), this.A5$46.one(), this.A6$42.one(), this.A7$38.one(), this.A8$34.one(), this.A9$30.one(), this.A10$26.one(), this.A11$22.one(), this.A12$18.one(), this.A13$14.one(), this.A14$10.one(), this.A15$6.one(), this.A16$2.one());
         }

         public Tuple17 plus(final Tuple17 x, final Tuple17 y) {
            return new Tuple17(this.A0$66.plus(x._1(), y._1()), this.A1$62.plus(x._2(), y._2()), this.A2$58.plus(x._3(), y._3()), this.A3$54.plus(x._4(), y._4()), this.A4$50.plus(x._5(), y._5()), this.A5$46.plus(x._6(), y._6()), this.A6$42.plus(x._7(), y._7()), this.A7$38.plus(x._8(), y._8()), this.A8$34.plus(x._9(), y._9()), this.A9$30.plus(x._10(), y._10()), this.A10$26.plus(x._11(), y._11()), this.A11$22.plus(x._12(), y._12()), this.A12$18.plus(x._13(), y._13()), this.A13$14.plus(x._14(), y._14()), this.A14$10.plus(x._15(), y._15()), this.A15$6.plus(x._16(), y._16()), this.A16$2.plus(x._17(), y._17()));
         }

         public Tuple17 times(final Tuple17 x, final Tuple17 y) {
            return new Tuple17(this.A0$66.times(x._1(), y._1()), this.A1$62.times(x._2(), y._2()), this.A2$58.times(x._3(), y._3()), this.A3$54.times(x._4(), y._4()), this.A4$50.times(x._5(), y._5()), this.A5$46.times(x._6(), y._6()), this.A6$42.times(x._7(), y._7()), this.A7$38.times(x._8(), y._8()), this.A8$34.times(x._9(), y._9()), this.A9$30.times(x._10(), y._10()), this.A10$26.times(x._11(), y._11()), this.A11$22.times(x._12(), y._12()), this.A12$18.times(x._13(), y._13()), this.A13$14.times(x._14(), y._14()), this.A14$10.times(x._15(), y._15()), this.A15$6.times(x._16(), y._16()), this.A16$2.times(x._17(), y._17()));
         }

         public Tuple17 zero() {
            return new Tuple17(this.A0$66.zero(), this.A1$62.zero(), this.A2$58.zero(), this.A3$54.zero(), this.A4$50.zero(), this.A5$46.zero(), this.A6$42.zero(), this.A7$38.zero(), this.A8$34.zero(), this.A9$30.zero(), this.A10$26.zero(), this.A11$22.zero(), this.A12$18.zero(), this.A13$14.zero(), this.A14$10.zero(), this.A15$6.zero(), this.A16$2.zero());
         }

         public Tuple17 negate(final Tuple17 x) {
            return new Tuple17(this.A0$66.negate(x._1()), this.A1$62.negate(x._2()), this.A2$58.negate(x._3()), this.A3$54.negate(x._4()), this.A4$50.negate(x._5()), this.A5$46.negate(x._6()), this.A6$42.negate(x._7()), this.A7$38.negate(x._8()), this.A8$34.negate(x._9()), this.A9$30.negate(x._10()), this.A10$26.negate(x._11()), this.A11$22.negate(x._12()), this.A12$18.negate(x._13()), this.A13$14.negate(x._14()), this.A14$10.negate(x._15()), this.A15$6.negate(x._16()), this.A16$2.negate(x._17()));
         }

         public {
            this.A0$66 = A0$66;
            this.A1$62 = A1$62;
            this.A2$58 = A2$58;
            this.A3$54 = A3$54;
            this.A4$50 = A4$50;
            this.A5$46 = A5$46;
            this.A6$42 = A6$42;
            this.A7$38 = A7$38;
            this.A8$34 = A8$34;
            this.A9$30 = A9$30;
            this.A10$26 = A10$26;
            this.A11$22 = A11$22;
            this.A12$18 = A12$18;
            this.A13$14 = A13$14;
            this.A14$10 = A14$10;
            this.A15$6 = A15$6;
            this.A16$2 = A16$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple17Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16) {
      return $this.tuple17Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);
   }

   default Rng tuple17Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) {
         private final Rng A0$67;
         private final Rng A1$63;
         private final Rng A2$59;
         private final Rng A3$55;
         private final Rng A4$51;
         private final Rng A5$47;
         private final Rng A6$43;
         private final Rng A7$39;
         private final Rng A8$35;
         private final Rng A9$31;
         private final Rng A10$27;
         private final Rng A11$23;
         private final Rng A12$19;
         private final Rng A13$15;
         private final Rng A14$11;
         private final Rng A15$7;
         private final Rng A16$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple17 plus(final Tuple17 x, final Tuple17 y) {
            return new Tuple17(this.A0$67.plus(x._1(), y._1()), this.A1$63.plus(x._2(), y._2()), this.A2$59.plus(x._3(), y._3()), this.A3$55.plus(x._4(), y._4()), this.A4$51.plus(x._5(), y._5()), this.A5$47.plus(x._6(), y._6()), this.A6$43.plus(x._7(), y._7()), this.A7$39.plus(x._8(), y._8()), this.A8$35.plus(x._9(), y._9()), this.A9$31.plus(x._10(), y._10()), this.A10$27.plus(x._11(), y._11()), this.A11$23.plus(x._12(), y._12()), this.A12$19.plus(x._13(), y._13()), this.A13$15.plus(x._14(), y._14()), this.A14$11.plus(x._15(), y._15()), this.A15$7.plus(x._16(), y._16()), this.A16$3.plus(x._17(), y._17()));
         }

         public Tuple17 times(final Tuple17 x, final Tuple17 y) {
            return new Tuple17(this.A0$67.times(x._1(), y._1()), this.A1$63.times(x._2(), y._2()), this.A2$59.times(x._3(), y._3()), this.A3$55.times(x._4(), y._4()), this.A4$51.times(x._5(), y._5()), this.A5$47.times(x._6(), y._6()), this.A6$43.times(x._7(), y._7()), this.A7$39.times(x._8(), y._8()), this.A8$35.times(x._9(), y._9()), this.A9$31.times(x._10(), y._10()), this.A10$27.times(x._11(), y._11()), this.A11$23.times(x._12(), y._12()), this.A12$19.times(x._13(), y._13()), this.A13$15.times(x._14(), y._14()), this.A14$11.times(x._15(), y._15()), this.A15$7.times(x._16(), y._16()), this.A16$3.times(x._17(), y._17()));
         }

         public Tuple17 zero() {
            return new Tuple17(this.A0$67.zero(), this.A1$63.zero(), this.A2$59.zero(), this.A3$55.zero(), this.A4$51.zero(), this.A5$47.zero(), this.A6$43.zero(), this.A7$39.zero(), this.A8$35.zero(), this.A9$31.zero(), this.A10$27.zero(), this.A11$23.zero(), this.A12$19.zero(), this.A13$15.zero(), this.A14$11.zero(), this.A15$7.zero(), this.A16$3.zero());
         }

         public Tuple17 negate(final Tuple17 x) {
            return new Tuple17(this.A0$67.negate(x._1()), this.A1$63.negate(x._2()), this.A2$59.negate(x._3()), this.A3$55.negate(x._4()), this.A4$51.negate(x._5()), this.A5$47.negate(x._6()), this.A6$43.negate(x._7()), this.A7$39.negate(x._8()), this.A8$35.negate(x._9()), this.A9$31.negate(x._10()), this.A10$27.negate(x._11()), this.A11$23.negate(x._12()), this.A12$19.negate(x._13()), this.A13$15.negate(x._14()), this.A14$11.negate(x._15()), this.A15$7.negate(x._16()), this.A16$3.negate(x._17()));
         }

         public {
            this.A0$67 = A0$67;
            this.A1$63 = A1$63;
            this.A2$59 = A2$59;
            this.A3$55 = A3$55;
            this.A4$51 = A4$51;
            this.A5$47 = A5$47;
            this.A6$43 = A6$43;
            this.A7$39 = A7$39;
            this.A8$35 = A8$35;
            this.A9$31 = A9$31;
            this.A10$27 = A10$27;
            this.A11$23 = A11$23;
            this.A12$19 = A12$19;
            this.A13$15 = A13$15;
            this.A14$11 = A14$11;
            this.A15$7 = A15$7;
            this.A16$3 = A16$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple17Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16) {
      return $this.tuple17Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);
   }

   default Semiring tuple17Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) {
         private final Semiring A0$68;
         private final Semiring A1$64;
         private final Semiring A2$60;
         private final Semiring A3$56;
         private final Semiring A4$52;
         private final Semiring A5$48;
         private final Semiring A6$44;
         private final Semiring A7$40;
         private final Semiring A8$36;
         private final Semiring A9$32;
         private final Semiring A10$28;
         private final Semiring A11$24;
         private final Semiring A12$20;
         private final Semiring A13$16;
         private final Semiring A14$12;
         private final Semiring A15$8;
         private final Semiring A16$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple17 plus(final Tuple17 x, final Tuple17 y) {
            return new Tuple17(this.A0$68.plus(x._1(), y._1()), this.A1$64.plus(x._2(), y._2()), this.A2$60.plus(x._3(), y._3()), this.A3$56.plus(x._4(), y._4()), this.A4$52.plus(x._5(), y._5()), this.A5$48.plus(x._6(), y._6()), this.A6$44.plus(x._7(), y._7()), this.A7$40.plus(x._8(), y._8()), this.A8$36.plus(x._9(), y._9()), this.A9$32.plus(x._10(), y._10()), this.A10$28.plus(x._11(), y._11()), this.A11$24.plus(x._12(), y._12()), this.A12$20.plus(x._13(), y._13()), this.A13$16.plus(x._14(), y._14()), this.A14$12.plus(x._15(), y._15()), this.A15$8.plus(x._16(), y._16()), this.A16$4.plus(x._17(), y._17()));
         }

         public Tuple17 times(final Tuple17 x, final Tuple17 y) {
            return new Tuple17(this.A0$68.times(x._1(), y._1()), this.A1$64.times(x._2(), y._2()), this.A2$60.times(x._3(), y._3()), this.A3$56.times(x._4(), y._4()), this.A4$52.times(x._5(), y._5()), this.A5$48.times(x._6(), y._6()), this.A6$44.times(x._7(), y._7()), this.A7$40.times(x._8(), y._8()), this.A8$36.times(x._9(), y._9()), this.A9$32.times(x._10(), y._10()), this.A10$28.times(x._11(), y._11()), this.A11$24.times(x._12(), y._12()), this.A12$20.times(x._13(), y._13()), this.A13$16.times(x._14(), y._14()), this.A14$12.times(x._15(), y._15()), this.A15$8.times(x._16(), y._16()), this.A16$4.times(x._17(), y._17()));
         }

         public Tuple17 zero() {
            return new Tuple17(this.A0$68.zero(), this.A1$64.zero(), this.A2$60.zero(), this.A3$56.zero(), this.A4$52.zero(), this.A5$48.zero(), this.A6$44.zero(), this.A7$40.zero(), this.A8$36.zero(), this.A9$32.zero(), this.A10$28.zero(), this.A11$24.zero(), this.A12$20.zero(), this.A13$16.zero(), this.A14$12.zero(), this.A15$8.zero(), this.A16$4.zero());
         }

         public {
            this.A0$68 = A0$68;
            this.A1$64 = A1$64;
            this.A2$60 = A2$60;
            this.A3$56 = A3$56;
            this.A4$52 = A4$52;
            this.A5$48 = A5$48;
            this.A6$44 = A6$44;
            this.A7$40 = A7$40;
            this.A8$36 = A8$36;
            this.A9$32 = A9$32;
            this.A10$28 = A10$28;
            this.A11$24 = A11$24;
            this.A12$20 = A12$20;
            this.A13$16 = A13$16;
            this.A14$12 = A14$12;
            this.A15$8 = A15$8;
            this.A16$4 = A16$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple18Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16, final Rig A17) {
      return $this.tuple18Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17);
   }

   default Rig tuple18Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16, final Rig A17) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) {
         private final Rig A0$69;
         private final Rig A1$65;
         private final Rig A2$61;
         private final Rig A3$57;
         private final Rig A4$53;
         private final Rig A5$49;
         private final Rig A6$45;
         private final Rig A7$41;
         private final Rig A8$37;
         private final Rig A9$33;
         private final Rig A10$29;
         private final Rig A11$25;
         private final Rig A12$21;
         private final Rig A13$17;
         private final Rig A14$13;
         private final Rig A15$9;
         private final Rig A16$5;
         private final Rig A17$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple18 one() {
            return new Tuple18(this.A0$69.one(), this.A1$65.one(), this.A2$61.one(), this.A3$57.one(), this.A4$53.one(), this.A5$49.one(), this.A6$45.one(), this.A7$41.one(), this.A8$37.one(), this.A9$33.one(), this.A10$29.one(), this.A11$25.one(), this.A12$21.one(), this.A13$17.one(), this.A14$13.one(), this.A15$9.one(), this.A16$5.one(), this.A17$1.one());
         }

         public Tuple18 plus(final Tuple18 x, final Tuple18 y) {
            return new Tuple18(this.A0$69.plus(x._1(), y._1()), this.A1$65.plus(x._2(), y._2()), this.A2$61.plus(x._3(), y._3()), this.A3$57.plus(x._4(), y._4()), this.A4$53.plus(x._5(), y._5()), this.A5$49.plus(x._6(), y._6()), this.A6$45.plus(x._7(), y._7()), this.A7$41.plus(x._8(), y._8()), this.A8$37.plus(x._9(), y._9()), this.A9$33.plus(x._10(), y._10()), this.A10$29.plus(x._11(), y._11()), this.A11$25.plus(x._12(), y._12()), this.A12$21.plus(x._13(), y._13()), this.A13$17.plus(x._14(), y._14()), this.A14$13.plus(x._15(), y._15()), this.A15$9.plus(x._16(), y._16()), this.A16$5.plus(x._17(), y._17()), this.A17$1.plus(x._18(), y._18()));
         }

         public Tuple18 times(final Tuple18 x, final Tuple18 y) {
            return new Tuple18(this.A0$69.times(x._1(), y._1()), this.A1$65.times(x._2(), y._2()), this.A2$61.times(x._3(), y._3()), this.A3$57.times(x._4(), y._4()), this.A4$53.times(x._5(), y._5()), this.A5$49.times(x._6(), y._6()), this.A6$45.times(x._7(), y._7()), this.A7$41.times(x._8(), y._8()), this.A8$37.times(x._9(), y._9()), this.A9$33.times(x._10(), y._10()), this.A10$29.times(x._11(), y._11()), this.A11$25.times(x._12(), y._12()), this.A12$21.times(x._13(), y._13()), this.A13$17.times(x._14(), y._14()), this.A14$13.times(x._15(), y._15()), this.A15$9.times(x._16(), y._16()), this.A16$5.times(x._17(), y._17()), this.A17$1.times(x._18(), y._18()));
         }

         public Tuple18 zero() {
            return new Tuple18(this.A0$69.zero(), this.A1$65.zero(), this.A2$61.zero(), this.A3$57.zero(), this.A4$53.zero(), this.A5$49.zero(), this.A6$45.zero(), this.A7$41.zero(), this.A8$37.zero(), this.A9$33.zero(), this.A10$29.zero(), this.A11$25.zero(), this.A12$21.zero(), this.A13$17.zero(), this.A14$13.zero(), this.A15$9.zero(), this.A16$5.zero(), this.A17$1.zero());
         }

         public {
            this.A0$69 = A0$69;
            this.A1$65 = A1$65;
            this.A2$61 = A2$61;
            this.A3$57 = A3$57;
            this.A4$53 = A4$53;
            this.A5$49 = A5$49;
            this.A6$45 = A6$45;
            this.A7$41 = A7$41;
            this.A8$37 = A8$37;
            this.A9$33 = A9$33;
            this.A10$29 = A10$29;
            this.A11$25 = A11$25;
            this.A12$21 = A12$21;
            this.A13$17 = A13$17;
            this.A14$13 = A14$13;
            this.A15$9 = A15$9;
            this.A16$5 = A16$5;
            this.A17$1 = A17$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple18Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16, final Ring A17) {
      return $this.tuple18Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17);
   }

   default Ring tuple18Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16, final Ring A17) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) {
         private final Ring A0$70;
         private final Ring A1$66;
         private final Ring A2$62;
         private final Ring A3$58;
         private final Ring A4$54;
         private final Ring A5$50;
         private final Ring A6$46;
         private final Ring A7$42;
         private final Ring A8$38;
         private final Ring A9$34;
         private final Ring A10$30;
         private final Ring A11$26;
         private final Ring A12$22;
         private final Ring A13$18;
         private final Ring A14$14;
         private final Ring A15$10;
         private final Ring A16$6;
         private final Ring A17$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple18 one() {
            return new Tuple18(this.A0$70.one(), this.A1$66.one(), this.A2$62.one(), this.A3$58.one(), this.A4$54.one(), this.A5$50.one(), this.A6$46.one(), this.A7$42.one(), this.A8$38.one(), this.A9$34.one(), this.A10$30.one(), this.A11$26.one(), this.A12$22.one(), this.A13$18.one(), this.A14$14.one(), this.A15$10.one(), this.A16$6.one(), this.A17$2.one());
         }

         public Tuple18 plus(final Tuple18 x, final Tuple18 y) {
            return new Tuple18(this.A0$70.plus(x._1(), y._1()), this.A1$66.plus(x._2(), y._2()), this.A2$62.plus(x._3(), y._3()), this.A3$58.plus(x._4(), y._4()), this.A4$54.plus(x._5(), y._5()), this.A5$50.plus(x._6(), y._6()), this.A6$46.plus(x._7(), y._7()), this.A7$42.plus(x._8(), y._8()), this.A8$38.plus(x._9(), y._9()), this.A9$34.plus(x._10(), y._10()), this.A10$30.plus(x._11(), y._11()), this.A11$26.plus(x._12(), y._12()), this.A12$22.plus(x._13(), y._13()), this.A13$18.plus(x._14(), y._14()), this.A14$14.plus(x._15(), y._15()), this.A15$10.plus(x._16(), y._16()), this.A16$6.plus(x._17(), y._17()), this.A17$2.plus(x._18(), y._18()));
         }

         public Tuple18 times(final Tuple18 x, final Tuple18 y) {
            return new Tuple18(this.A0$70.times(x._1(), y._1()), this.A1$66.times(x._2(), y._2()), this.A2$62.times(x._3(), y._3()), this.A3$58.times(x._4(), y._4()), this.A4$54.times(x._5(), y._5()), this.A5$50.times(x._6(), y._6()), this.A6$46.times(x._7(), y._7()), this.A7$42.times(x._8(), y._8()), this.A8$38.times(x._9(), y._9()), this.A9$34.times(x._10(), y._10()), this.A10$30.times(x._11(), y._11()), this.A11$26.times(x._12(), y._12()), this.A12$22.times(x._13(), y._13()), this.A13$18.times(x._14(), y._14()), this.A14$14.times(x._15(), y._15()), this.A15$10.times(x._16(), y._16()), this.A16$6.times(x._17(), y._17()), this.A17$2.times(x._18(), y._18()));
         }

         public Tuple18 zero() {
            return new Tuple18(this.A0$70.zero(), this.A1$66.zero(), this.A2$62.zero(), this.A3$58.zero(), this.A4$54.zero(), this.A5$50.zero(), this.A6$46.zero(), this.A7$42.zero(), this.A8$38.zero(), this.A9$34.zero(), this.A10$30.zero(), this.A11$26.zero(), this.A12$22.zero(), this.A13$18.zero(), this.A14$14.zero(), this.A15$10.zero(), this.A16$6.zero(), this.A17$2.zero());
         }

         public Tuple18 negate(final Tuple18 x) {
            return new Tuple18(this.A0$70.negate(x._1()), this.A1$66.negate(x._2()), this.A2$62.negate(x._3()), this.A3$58.negate(x._4()), this.A4$54.negate(x._5()), this.A5$50.negate(x._6()), this.A6$46.negate(x._7()), this.A7$42.negate(x._8()), this.A8$38.negate(x._9()), this.A9$34.negate(x._10()), this.A10$30.negate(x._11()), this.A11$26.negate(x._12()), this.A12$22.negate(x._13()), this.A13$18.negate(x._14()), this.A14$14.negate(x._15()), this.A15$10.negate(x._16()), this.A16$6.negate(x._17()), this.A17$2.negate(x._18()));
         }

         public {
            this.A0$70 = A0$70;
            this.A1$66 = A1$66;
            this.A2$62 = A2$62;
            this.A3$58 = A3$58;
            this.A4$54 = A4$54;
            this.A5$50 = A5$50;
            this.A6$46 = A6$46;
            this.A7$42 = A7$42;
            this.A8$38 = A8$38;
            this.A9$34 = A9$34;
            this.A10$30 = A10$30;
            this.A11$26 = A11$26;
            this.A12$22 = A12$22;
            this.A13$18 = A13$18;
            this.A14$14 = A14$14;
            this.A15$10 = A15$10;
            this.A16$6 = A16$6;
            this.A17$2 = A17$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple18Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16, final Rng A17) {
      return $this.tuple18Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17);
   }

   default Rng tuple18Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16, final Rng A17) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) {
         private final Rng A0$71;
         private final Rng A1$67;
         private final Rng A2$63;
         private final Rng A3$59;
         private final Rng A4$55;
         private final Rng A5$51;
         private final Rng A6$47;
         private final Rng A7$43;
         private final Rng A8$39;
         private final Rng A9$35;
         private final Rng A10$31;
         private final Rng A11$27;
         private final Rng A12$23;
         private final Rng A13$19;
         private final Rng A14$15;
         private final Rng A15$11;
         private final Rng A16$7;
         private final Rng A17$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple18 plus(final Tuple18 x, final Tuple18 y) {
            return new Tuple18(this.A0$71.plus(x._1(), y._1()), this.A1$67.plus(x._2(), y._2()), this.A2$63.plus(x._3(), y._3()), this.A3$59.plus(x._4(), y._4()), this.A4$55.plus(x._5(), y._5()), this.A5$51.plus(x._6(), y._6()), this.A6$47.plus(x._7(), y._7()), this.A7$43.plus(x._8(), y._8()), this.A8$39.plus(x._9(), y._9()), this.A9$35.plus(x._10(), y._10()), this.A10$31.plus(x._11(), y._11()), this.A11$27.plus(x._12(), y._12()), this.A12$23.plus(x._13(), y._13()), this.A13$19.plus(x._14(), y._14()), this.A14$15.plus(x._15(), y._15()), this.A15$11.plus(x._16(), y._16()), this.A16$7.plus(x._17(), y._17()), this.A17$3.plus(x._18(), y._18()));
         }

         public Tuple18 times(final Tuple18 x, final Tuple18 y) {
            return new Tuple18(this.A0$71.times(x._1(), y._1()), this.A1$67.times(x._2(), y._2()), this.A2$63.times(x._3(), y._3()), this.A3$59.times(x._4(), y._4()), this.A4$55.times(x._5(), y._5()), this.A5$51.times(x._6(), y._6()), this.A6$47.times(x._7(), y._7()), this.A7$43.times(x._8(), y._8()), this.A8$39.times(x._9(), y._9()), this.A9$35.times(x._10(), y._10()), this.A10$31.times(x._11(), y._11()), this.A11$27.times(x._12(), y._12()), this.A12$23.times(x._13(), y._13()), this.A13$19.times(x._14(), y._14()), this.A14$15.times(x._15(), y._15()), this.A15$11.times(x._16(), y._16()), this.A16$7.times(x._17(), y._17()), this.A17$3.times(x._18(), y._18()));
         }

         public Tuple18 zero() {
            return new Tuple18(this.A0$71.zero(), this.A1$67.zero(), this.A2$63.zero(), this.A3$59.zero(), this.A4$55.zero(), this.A5$51.zero(), this.A6$47.zero(), this.A7$43.zero(), this.A8$39.zero(), this.A9$35.zero(), this.A10$31.zero(), this.A11$27.zero(), this.A12$23.zero(), this.A13$19.zero(), this.A14$15.zero(), this.A15$11.zero(), this.A16$7.zero(), this.A17$3.zero());
         }

         public Tuple18 negate(final Tuple18 x) {
            return new Tuple18(this.A0$71.negate(x._1()), this.A1$67.negate(x._2()), this.A2$63.negate(x._3()), this.A3$59.negate(x._4()), this.A4$55.negate(x._5()), this.A5$51.negate(x._6()), this.A6$47.negate(x._7()), this.A7$43.negate(x._8()), this.A8$39.negate(x._9()), this.A9$35.negate(x._10()), this.A10$31.negate(x._11()), this.A11$27.negate(x._12()), this.A12$23.negate(x._13()), this.A13$19.negate(x._14()), this.A14$15.negate(x._15()), this.A15$11.negate(x._16()), this.A16$7.negate(x._17()), this.A17$3.negate(x._18()));
         }

         public {
            this.A0$71 = A0$71;
            this.A1$67 = A1$67;
            this.A2$63 = A2$63;
            this.A3$59 = A3$59;
            this.A4$55 = A4$55;
            this.A5$51 = A5$51;
            this.A6$47 = A6$47;
            this.A7$43 = A7$43;
            this.A8$39 = A8$39;
            this.A9$35 = A9$35;
            this.A10$31 = A10$31;
            this.A11$27 = A11$27;
            this.A12$23 = A12$23;
            this.A13$19 = A13$19;
            this.A14$15 = A14$15;
            this.A15$11 = A15$11;
            this.A16$7 = A16$7;
            this.A17$3 = A17$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple18Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16, final Semiring A17) {
      return $this.tuple18Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17);
   }

   default Semiring tuple18Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16, final Semiring A17) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) {
         private final Semiring A0$72;
         private final Semiring A1$68;
         private final Semiring A2$64;
         private final Semiring A3$60;
         private final Semiring A4$56;
         private final Semiring A5$52;
         private final Semiring A6$48;
         private final Semiring A7$44;
         private final Semiring A8$40;
         private final Semiring A9$36;
         private final Semiring A10$32;
         private final Semiring A11$28;
         private final Semiring A12$24;
         private final Semiring A13$20;
         private final Semiring A14$16;
         private final Semiring A15$12;
         private final Semiring A16$8;
         private final Semiring A17$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple18 plus(final Tuple18 x, final Tuple18 y) {
            return new Tuple18(this.A0$72.plus(x._1(), y._1()), this.A1$68.plus(x._2(), y._2()), this.A2$64.plus(x._3(), y._3()), this.A3$60.plus(x._4(), y._4()), this.A4$56.plus(x._5(), y._5()), this.A5$52.plus(x._6(), y._6()), this.A6$48.plus(x._7(), y._7()), this.A7$44.plus(x._8(), y._8()), this.A8$40.plus(x._9(), y._9()), this.A9$36.plus(x._10(), y._10()), this.A10$32.plus(x._11(), y._11()), this.A11$28.plus(x._12(), y._12()), this.A12$24.plus(x._13(), y._13()), this.A13$20.plus(x._14(), y._14()), this.A14$16.plus(x._15(), y._15()), this.A15$12.plus(x._16(), y._16()), this.A16$8.plus(x._17(), y._17()), this.A17$4.plus(x._18(), y._18()));
         }

         public Tuple18 times(final Tuple18 x, final Tuple18 y) {
            return new Tuple18(this.A0$72.times(x._1(), y._1()), this.A1$68.times(x._2(), y._2()), this.A2$64.times(x._3(), y._3()), this.A3$60.times(x._4(), y._4()), this.A4$56.times(x._5(), y._5()), this.A5$52.times(x._6(), y._6()), this.A6$48.times(x._7(), y._7()), this.A7$44.times(x._8(), y._8()), this.A8$40.times(x._9(), y._9()), this.A9$36.times(x._10(), y._10()), this.A10$32.times(x._11(), y._11()), this.A11$28.times(x._12(), y._12()), this.A12$24.times(x._13(), y._13()), this.A13$20.times(x._14(), y._14()), this.A14$16.times(x._15(), y._15()), this.A15$12.times(x._16(), y._16()), this.A16$8.times(x._17(), y._17()), this.A17$4.times(x._18(), y._18()));
         }

         public Tuple18 zero() {
            return new Tuple18(this.A0$72.zero(), this.A1$68.zero(), this.A2$64.zero(), this.A3$60.zero(), this.A4$56.zero(), this.A5$52.zero(), this.A6$48.zero(), this.A7$44.zero(), this.A8$40.zero(), this.A9$36.zero(), this.A10$32.zero(), this.A11$28.zero(), this.A12$24.zero(), this.A13$20.zero(), this.A14$16.zero(), this.A15$12.zero(), this.A16$8.zero(), this.A17$4.zero());
         }

         public {
            this.A0$72 = A0$72;
            this.A1$68 = A1$68;
            this.A2$64 = A2$64;
            this.A3$60 = A3$60;
            this.A4$56 = A4$56;
            this.A5$52 = A5$52;
            this.A6$48 = A6$48;
            this.A7$44 = A7$44;
            this.A8$40 = A8$40;
            this.A9$36 = A9$36;
            this.A10$32 = A10$32;
            this.A11$28 = A11$28;
            this.A12$24 = A12$24;
            this.A13$20 = A13$20;
            this.A14$16 = A14$16;
            this.A15$12 = A15$12;
            this.A16$8 = A16$8;
            this.A17$4 = A17$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple19Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16, final Rig A17, final Rig A18) {
      return $this.tuple19Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18);
   }

   default Rig tuple19Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16, final Rig A17, final Rig A18) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) {
         private final Rig A0$73;
         private final Rig A1$69;
         private final Rig A2$65;
         private final Rig A3$61;
         private final Rig A4$57;
         private final Rig A5$53;
         private final Rig A6$49;
         private final Rig A7$45;
         private final Rig A8$41;
         private final Rig A9$37;
         private final Rig A10$33;
         private final Rig A11$29;
         private final Rig A12$25;
         private final Rig A13$21;
         private final Rig A14$17;
         private final Rig A15$13;
         private final Rig A16$9;
         private final Rig A17$5;
         private final Rig A18$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple19 one() {
            return new Tuple19(this.A0$73.one(), this.A1$69.one(), this.A2$65.one(), this.A3$61.one(), this.A4$57.one(), this.A5$53.one(), this.A6$49.one(), this.A7$45.one(), this.A8$41.one(), this.A9$37.one(), this.A10$33.one(), this.A11$29.one(), this.A12$25.one(), this.A13$21.one(), this.A14$17.one(), this.A15$13.one(), this.A16$9.one(), this.A17$5.one(), this.A18$1.one());
         }

         public Tuple19 plus(final Tuple19 x, final Tuple19 y) {
            return new Tuple19(this.A0$73.plus(x._1(), y._1()), this.A1$69.plus(x._2(), y._2()), this.A2$65.plus(x._3(), y._3()), this.A3$61.plus(x._4(), y._4()), this.A4$57.plus(x._5(), y._5()), this.A5$53.plus(x._6(), y._6()), this.A6$49.plus(x._7(), y._7()), this.A7$45.plus(x._8(), y._8()), this.A8$41.plus(x._9(), y._9()), this.A9$37.plus(x._10(), y._10()), this.A10$33.plus(x._11(), y._11()), this.A11$29.plus(x._12(), y._12()), this.A12$25.plus(x._13(), y._13()), this.A13$21.plus(x._14(), y._14()), this.A14$17.plus(x._15(), y._15()), this.A15$13.plus(x._16(), y._16()), this.A16$9.plus(x._17(), y._17()), this.A17$5.plus(x._18(), y._18()), this.A18$1.plus(x._19(), y._19()));
         }

         public Tuple19 times(final Tuple19 x, final Tuple19 y) {
            return new Tuple19(this.A0$73.times(x._1(), y._1()), this.A1$69.times(x._2(), y._2()), this.A2$65.times(x._3(), y._3()), this.A3$61.times(x._4(), y._4()), this.A4$57.times(x._5(), y._5()), this.A5$53.times(x._6(), y._6()), this.A6$49.times(x._7(), y._7()), this.A7$45.times(x._8(), y._8()), this.A8$41.times(x._9(), y._9()), this.A9$37.times(x._10(), y._10()), this.A10$33.times(x._11(), y._11()), this.A11$29.times(x._12(), y._12()), this.A12$25.times(x._13(), y._13()), this.A13$21.times(x._14(), y._14()), this.A14$17.times(x._15(), y._15()), this.A15$13.times(x._16(), y._16()), this.A16$9.times(x._17(), y._17()), this.A17$5.times(x._18(), y._18()), this.A18$1.times(x._19(), y._19()));
         }

         public Tuple19 zero() {
            return new Tuple19(this.A0$73.zero(), this.A1$69.zero(), this.A2$65.zero(), this.A3$61.zero(), this.A4$57.zero(), this.A5$53.zero(), this.A6$49.zero(), this.A7$45.zero(), this.A8$41.zero(), this.A9$37.zero(), this.A10$33.zero(), this.A11$29.zero(), this.A12$25.zero(), this.A13$21.zero(), this.A14$17.zero(), this.A15$13.zero(), this.A16$9.zero(), this.A17$5.zero(), this.A18$1.zero());
         }

         public {
            this.A0$73 = A0$73;
            this.A1$69 = A1$69;
            this.A2$65 = A2$65;
            this.A3$61 = A3$61;
            this.A4$57 = A4$57;
            this.A5$53 = A5$53;
            this.A6$49 = A6$49;
            this.A7$45 = A7$45;
            this.A8$41 = A8$41;
            this.A9$37 = A9$37;
            this.A10$33 = A10$33;
            this.A11$29 = A11$29;
            this.A12$25 = A12$25;
            this.A13$21 = A13$21;
            this.A14$17 = A14$17;
            this.A15$13 = A15$13;
            this.A16$9 = A16$9;
            this.A17$5 = A17$5;
            this.A18$1 = A18$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple19Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16, final Ring A17, final Ring A18) {
      return $this.tuple19Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18);
   }

   default Ring tuple19Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16, final Ring A17, final Ring A18) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) {
         private final Ring A0$74;
         private final Ring A1$70;
         private final Ring A2$66;
         private final Ring A3$62;
         private final Ring A4$58;
         private final Ring A5$54;
         private final Ring A6$50;
         private final Ring A7$46;
         private final Ring A8$42;
         private final Ring A9$38;
         private final Ring A10$34;
         private final Ring A11$30;
         private final Ring A12$26;
         private final Ring A13$22;
         private final Ring A14$18;
         private final Ring A15$14;
         private final Ring A16$10;
         private final Ring A17$6;
         private final Ring A18$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple19 one() {
            return new Tuple19(this.A0$74.one(), this.A1$70.one(), this.A2$66.one(), this.A3$62.one(), this.A4$58.one(), this.A5$54.one(), this.A6$50.one(), this.A7$46.one(), this.A8$42.one(), this.A9$38.one(), this.A10$34.one(), this.A11$30.one(), this.A12$26.one(), this.A13$22.one(), this.A14$18.one(), this.A15$14.one(), this.A16$10.one(), this.A17$6.one(), this.A18$2.one());
         }

         public Tuple19 plus(final Tuple19 x, final Tuple19 y) {
            return new Tuple19(this.A0$74.plus(x._1(), y._1()), this.A1$70.plus(x._2(), y._2()), this.A2$66.plus(x._3(), y._3()), this.A3$62.plus(x._4(), y._4()), this.A4$58.plus(x._5(), y._5()), this.A5$54.plus(x._6(), y._6()), this.A6$50.plus(x._7(), y._7()), this.A7$46.plus(x._8(), y._8()), this.A8$42.plus(x._9(), y._9()), this.A9$38.plus(x._10(), y._10()), this.A10$34.plus(x._11(), y._11()), this.A11$30.plus(x._12(), y._12()), this.A12$26.plus(x._13(), y._13()), this.A13$22.plus(x._14(), y._14()), this.A14$18.plus(x._15(), y._15()), this.A15$14.plus(x._16(), y._16()), this.A16$10.plus(x._17(), y._17()), this.A17$6.plus(x._18(), y._18()), this.A18$2.plus(x._19(), y._19()));
         }

         public Tuple19 times(final Tuple19 x, final Tuple19 y) {
            return new Tuple19(this.A0$74.times(x._1(), y._1()), this.A1$70.times(x._2(), y._2()), this.A2$66.times(x._3(), y._3()), this.A3$62.times(x._4(), y._4()), this.A4$58.times(x._5(), y._5()), this.A5$54.times(x._6(), y._6()), this.A6$50.times(x._7(), y._7()), this.A7$46.times(x._8(), y._8()), this.A8$42.times(x._9(), y._9()), this.A9$38.times(x._10(), y._10()), this.A10$34.times(x._11(), y._11()), this.A11$30.times(x._12(), y._12()), this.A12$26.times(x._13(), y._13()), this.A13$22.times(x._14(), y._14()), this.A14$18.times(x._15(), y._15()), this.A15$14.times(x._16(), y._16()), this.A16$10.times(x._17(), y._17()), this.A17$6.times(x._18(), y._18()), this.A18$2.times(x._19(), y._19()));
         }

         public Tuple19 zero() {
            return new Tuple19(this.A0$74.zero(), this.A1$70.zero(), this.A2$66.zero(), this.A3$62.zero(), this.A4$58.zero(), this.A5$54.zero(), this.A6$50.zero(), this.A7$46.zero(), this.A8$42.zero(), this.A9$38.zero(), this.A10$34.zero(), this.A11$30.zero(), this.A12$26.zero(), this.A13$22.zero(), this.A14$18.zero(), this.A15$14.zero(), this.A16$10.zero(), this.A17$6.zero(), this.A18$2.zero());
         }

         public Tuple19 negate(final Tuple19 x) {
            return new Tuple19(this.A0$74.negate(x._1()), this.A1$70.negate(x._2()), this.A2$66.negate(x._3()), this.A3$62.negate(x._4()), this.A4$58.negate(x._5()), this.A5$54.negate(x._6()), this.A6$50.negate(x._7()), this.A7$46.negate(x._8()), this.A8$42.negate(x._9()), this.A9$38.negate(x._10()), this.A10$34.negate(x._11()), this.A11$30.negate(x._12()), this.A12$26.negate(x._13()), this.A13$22.negate(x._14()), this.A14$18.negate(x._15()), this.A15$14.negate(x._16()), this.A16$10.negate(x._17()), this.A17$6.negate(x._18()), this.A18$2.negate(x._19()));
         }

         public {
            this.A0$74 = A0$74;
            this.A1$70 = A1$70;
            this.A2$66 = A2$66;
            this.A3$62 = A3$62;
            this.A4$58 = A4$58;
            this.A5$54 = A5$54;
            this.A6$50 = A6$50;
            this.A7$46 = A7$46;
            this.A8$42 = A8$42;
            this.A9$38 = A9$38;
            this.A10$34 = A10$34;
            this.A11$30 = A11$30;
            this.A12$26 = A12$26;
            this.A13$22 = A13$22;
            this.A14$18 = A14$18;
            this.A15$14 = A15$14;
            this.A16$10 = A16$10;
            this.A17$6 = A17$6;
            this.A18$2 = A18$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple19Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16, final Rng A17, final Rng A18) {
      return $this.tuple19Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18);
   }

   default Rng tuple19Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16, final Rng A17, final Rng A18) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) {
         private final Rng A0$75;
         private final Rng A1$71;
         private final Rng A2$67;
         private final Rng A3$63;
         private final Rng A4$59;
         private final Rng A5$55;
         private final Rng A6$51;
         private final Rng A7$47;
         private final Rng A8$43;
         private final Rng A9$39;
         private final Rng A10$35;
         private final Rng A11$31;
         private final Rng A12$27;
         private final Rng A13$23;
         private final Rng A14$19;
         private final Rng A15$15;
         private final Rng A16$11;
         private final Rng A17$7;
         private final Rng A18$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple19 plus(final Tuple19 x, final Tuple19 y) {
            return new Tuple19(this.A0$75.plus(x._1(), y._1()), this.A1$71.plus(x._2(), y._2()), this.A2$67.plus(x._3(), y._3()), this.A3$63.plus(x._4(), y._4()), this.A4$59.plus(x._5(), y._5()), this.A5$55.plus(x._6(), y._6()), this.A6$51.plus(x._7(), y._7()), this.A7$47.plus(x._8(), y._8()), this.A8$43.plus(x._9(), y._9()), this.A9$39.plus(x._10(), y._10()), this.A10$35.plus(x._11(), y._11()), this.A11$31.plus(x._12(), y._12()), this.A12$27.plus(x._13(), y._13()), this.A13$23.plus(x._14(), y._14()), this.A14$19.plus(x._15(), y._15()), this.A15$15.plus(x._16(), y._16()), this.A16$11.plus(x._17(), y._17()), this.A17$7.plus(x._18(), y._18()), this.A18$3.plus(x._19(), y._19()));
         }

         public Tuple19 times(final Tuple19 x, final Tuple19 y) {
            return new Tuple19(this.A0$75.times(x._1(), y._1()), this.A1$71.times(x._2(), y._2()), this.A2$67.times(x._3(), y._3()), this.A3$63.times(x._4(), y._4()), this.A4$59.times(x._5(), y._5()), this.A5$55.times(x._6(), y._6()), this.A6$51.times(x._7(), y._7()), this.A7$47.times(x._8(), y._8()), this.A8$43.times(x._9(), y._9()), this.A9$39.times(x._10(), y._10()), this.A10$35.times(x._11(), y._11()), this.A11$31.times(x._12(), y._12()), this.A12$27.times(x._13(), y._13()), this.A13$23.times(x._14(), y._14()), this.A14$19.times(x._15(), y._15()), this.A15$15.times(x._16(), y._16()), this.A16$11.times(x._17(), y._17()), this.A17$7.times(x._18(), y._18()), this.A18$3.times(x._19(), y._19()));
         }

         public Tuple19 zero() {
            return new Tuple19(this.A0$75.zero(), this.A1$71.zero(), this.A2$67.zero(), this.A3$63.zero(), this.A4$59.zero(), this.A5$55.zero(), this.A6$51.zero(), this.A7$47.zero(), this.A8$43.zero(), this.A9$39.zero(), this.A10$35.zero(), this.A11$31.zero(), this.A12$27.zero(), this.A13$23.zero(), this.A14$19.zero(), this.A15$15.zero(), this.A16$11.zero(), this.A17$7.zero(), this.A18$3.zero());
         }

         public Tuple19 negate(final Tuple19 x) {
            return new Tuple19(this.A0$75.negate(x._1()), this.A1$71.negate(x._2()), this.A2$67.negate(x._3()), this.A3$63.negate(x._4()), this.A4$59.negate(x._5()), this.A5$55.negate(x._6()), this.A6$51.negate(x._7()), this.A7$47.negate(x._8()), this.A8$43.negate(x._9()), this.A9$39.negate(x._10()), this.A10$35.negate(x._11()), this.A11$31.negate(x._12()), this.A12$27.negate(x._13()), this.A13$23.negate(x._14()), this.A14$19.negate(x._15()), this.A15$15.negate(x._16()), this.A16$11.negate(x._17()), this.A17$7.negate(x._18()), this.A18$3.negate(x._19()));
         }

         public {
            this.A0$75 = A0$75;
            this.A1$71 = A1$71;
            this.A2$67 = A2$67;
            this.A3$63 = A3$63;
            this.A4$59 = A4$59;
            this.A5$55 = A5$55;
            this.A6$51 = A6$51;
            this.A7$47 = A7$47;
            this.A8$43 = A8$43;
            this.A9$39 = A9$39;
            this.A10$35 = A10$35;
            this.A11$31 = A11$31;
            this.A12$27 = A12$27;
            this.A13$23 = A13$23;
            this.A14$19 = A14$19;
            this.A15$15 = A15$15;
            this.A16$11 = A16$11;
            this.A17$7 = A17$7;
            this.A18$3 = A18$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple19Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16, final Semiring A17, final Semiring A18) {
      return $this.tuple19Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18);
   }

   default Semiring tuple19Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16, final Semiring A17, final Semiring A18) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) {
         private final Semiring A0$76;
         private final Semiring A1$72;
         private final Semiring A2$68;
         private final Semiring A3$64;
         private final Semiring A4$60;
         private final Semiring A5$56;
         private final Semiring A6$52;
         private final Semiring A7$48;
         private final Semiring A8$44;
         private final Semiring A9$40;
         private final Semiring A10$36;
         private final Semiring A11$32;
         private final Semiring A12$28;
         private final Semiring A13$24;
         private final Semiring A14$20;
         private final Semiring A15$16;
         private final Semiring A16$12;
         private final Semiring A17$8;
         private final Semiring A18$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple19 plus(final Tuple19 x, final Tuple19 y) {
            return new Tuple19(this.A0$76.plus(x._1(), y._1()), this.A1$72.plus(x._2(), y._2()), this.A2$68.plus(x._3(), y._3()), this.A3$64.plus(x._4(), y._4()), this.A4$60.plus(x._5(), y._5()), this.A5$56.plus(x._6(), y._6()), this.A6$52.plus(x._7(), y._7()), this.A7$48.plus(x._8(), y._8()), this.A8$44.plus(x._9(), y._9()), this.A9$40.plus(x._10(), y._10()), this.A10$36.plus(x._11(), y._11()), this.A11$32.plus(x._12(), y._12()), this.A12$28.plus(x._13(), y._13()), this.A13$24.plus(x._14(), y._14()), this.A14$20.plus(x._15(), y._15()), this.A15$16.plus(x._16(), y._16()), this.A16$12.plus(x._17(), y._17()), this.A17$8.plus(x._18(), y._18()), this.A18$4.plus(x._19(), y._19()));
         }

         public Tuple19 times(final Tuple19 x, final Tuple19 y) {
            return new Tuple19(this.A0$76.times(x._1(), y._1()), this.A1$72.times(x._2(), y._2()), this.A2$68.times(x._3(), y._3()), this.A3$64.times(x._4(), y._4()), this.A4$60.times(x._5(), y._5()), this.A5$56.times(x._6(), y._6()), this.A6$52.times(x._7(), y._7()), this.A7$48.times(x._8(), y._8()), this.A8$44.times(x._9(), y._9()), this.A9$40.times(x._10(), y._10()), this.A10$36.times(x._11(), y._11()), this.A11$32.times(x._12(), y._12()), this.A12$28.times(x._13(), y._13()), this.A13$24.times(x._14(), y._14()), this.A14$20.times(x._15(), y._15()), this.A15$16.times(x._16(), y._16()), this.A16$12.times(x._17(), y._17()), this.A17$8.times(x._18(), y._18()), this.A18$4.times(x._19(), y._19()));
         }

         public Tuple19 zero() {
            return new Tuple19(this.A0$76.zero(), this.A1$72.zero(), this.A2$68.zero(), this.A3$64.zero(), this.A4$60.zero(), this.A5$56.zero(), this.A6$52.zero(), this.A7$48.zero(), this.A8$44.zero(), this.A9$40.zero(), this.A10$36.zero(), this.A11$32.zero(), this.A12$28.zero(), this.A13$24.zero(), this.A14$20.zero(), this.A15$16.zero(), this.A16$12.zero(), this.A17$8.zero(), this.A18$4.zero());
         }

         public {
            this.A0$76 = A0$76;
            this.A1$72 = A1$72;
            this.A2$68 = A2$68;
            this.A3$64 = A3$64;
            this.A4$60 = A4$60;
            this.A5$56 = A5$56;
            this.A6$52 = A6$52;
            this.A7$48 = A7$48;
            this.A8$44 = A8$44;
            this.A9$40 = A9$40;
            this.A10$36 = A10$36;
            this.A11$32 = A11$32;
            this.A12$28 = A12$28;
            this.A13$24 = A13$24;
            this.A14$20 = A14$20;
            this.A15$16 = A15$16;
            this.A16$12 = A16$12;
            this.A17$8 = A17$8;
            this.A18$4 = A18$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple20Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16, final Rig A17, final Rig A18, final Rig A19) {
      return $this.tuple20Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19);
   }

   default Rig tuple20Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16, final Rig A17, final Rig A18, final Rig A19) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) {
         private final Rig A0$77;
         private final Rig A1$73;
         private final Rig A2$69;
         private final Rig A3$65;
         private final Rig A4$61;
         private final Rig A5$57;
         private final Rig A6$53;
         private final Rig A7$49;
         private final Rig A8$45;
         private final Rig A9$41;
         private final Rig A10$37;
         private final Rig A11$33;
         private final Rig A12$29;
         private final Rig A13$25;
         private final Rig A14$21;
         private final Rig A15$17;
         private final Rig A16$13;
         private final Rig A17$9;
         private final Rig A18$5;
         private final Rig A19$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple20 one() {
            return new Tuple20(this.A0$77.one(), this.A1$73.one(), this.A2$69.one(), this.A3$65.one(), this.A4$61.one(), this.A5$57.one(), this.A6$53.one(), this.A7$49.one(), this.A8$45.one(), this.A9$41.one(), this.A10$37.one(), this.A11$33.one(), this.A12$29.one(), this.A13$25.one(), this.A14$21.one(), this.A15$17.one(), this.A16$13.one(), this.A17$9.one(), this.A18$5.one(), this.A19$1.one());
         }

         public Tuple20 plus(final Tuple20 x, final Tuple20 y) {
            return new Tuple20(this.A0$77.plus(x._1(), y._1()), this.A1$73.plus(x._2(), y._2()), this.A2$69.plus(x._3(), y._3()), this.A3$65.plus(x._4(), y._4()), this.A4$61.plus(x._5(), y._5()), this.A5$57.plus(x._6(), y._6()), this.A6$53.plus(x._7(), y._7()), this.A7$49.plus(x._8(), y._8()), this.A8$45.plus(x._9(), y._9()), this.A9$41.plus(x._10(), y._10()), this.A10$37.plus(x._11(), y._11()), this.A11$33.plus(x._12(), y._12()), this.A12$29.plus(x._13(), y._13()), this.A13$25.plus(x._14(), y._14()), this.A14$21.plus(x._15(), y._15()), this.A15$17.plus(x._16(), y._16()), this.A16$13.plus(x._17(), y._17()), this.A17$9.plus(x._18(), y._18()), this.A18$5.plus(x._19(), y._19()), this.A19$1.plus(x._20(), y._20()));
         }

         public Tuple20 times(final Tuple20 x, final Tuple20 y) {
            return new Tuple20(this.A0$77.times(x._1(), y._1()), this.A1$73.times(x._2(), y._2()), this.A2$69.times(x._3(), y._3()), this.A3$65.times(x._4(), y._4()), this.A4$61.times(x._5(), y._5()), this.A5$57.times(x._6(), y._6()), this.A6$53.times(x._7(), y._7()), this.A7$49.times(x._8(), y._8()), this.A8$45.times(x._9(), y._9()), this.A9$41.times(x._10(), y._10()), this.A10$37.times(x._11(), y._11()), this.A11$33.times(x._12(), y._12()), this.A12$29.times(x._13(), y._13()), this.A13$25.times(x._14(), y._14()), this.A14$21.times(x._15(), y._15()), this.A15$17.times(x._16(), y._16()), this.A16$13.times(x._17(), y._17()), this.A17$9.times(x._18(), y._18()), this.A18$5.times(x._19(), y._19()), this.A19$1.times(x._20(), y._20()));
         }

         public Tuple20 zero() {
            return new Tuple20(this.A0$77.zero(), this.A1$73.zero(), this.A2$69.zero(), this.A3$65.zero(), this.A4$61.zero(), this.A5$57.zero(), this.A6$53.zero(), this.A7$49.zero(), this.A8$45.zero(), this.A9$41.zero(), this.A10$37.zero(), this.A11$33.zero(), this.A12$29.zero(), this.A13$25.zero(), this.A14$21.zero(), this.A15$17.zero(), this.A16$13.zero(), this.A17$9.zero(), this.A18$5.zero(), this.A19$1.zero());
         }

         public {
            this.A0$77 = A0$77;
            this.A1$73 = A1$73;
            this.A2$69 = A2$69;
            this.A3$65 = A3$65;
            this.A4$61 = A4$61;
            this.A5$57 = A5$57;
            this.A6$53 = A6$53;
            this.A7$49 = A7$49;
            this.A8$45 = A8$45;
            this.A9$41 = A9$41;
            this.A10$37 = A10$37;
            this.A11$33 = A11$33;
            this.A12$29 = A12$29;
            this.A13$25 = A13$25;
            this.A14$21 = A14$21;
            this.A15$17 = A15$17;
            this.A16$13 = A16$13;
            this.A17$9 = A17$9;
            this.A18$5 = A18$5;
            this.A19$1 = A19$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple20Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16, final Ring A17, final Ring A18, final Ring A19) {
      return $this.tuple20Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19);
   }

   default Ring tuple20Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16, final Ring A17, final Ring A18, final Ring A19) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) {
         private final Ring A0$78;
         private final Ring A1$74;
         private final Ring A2$70;
         private final Ring A3$66;
         private final Ring A4$62;
         private final Ring A5$58;
         private final Ring A6$54;
         private final Ring A7$50;
         private final Ring A8$46;
         private final Ring A9$42;
         private final Ring A10$38;
         private final Ring A11$34;
         private final Ring A12$30;
         private final Ring A13$26;
         private final Ring A14$22;
         private final Ring A15$18;
         private final Ring A16$14;
         private final Ring A17$10;
         private final Ring A18$6;
         private final Ring A19$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple20 one() {
            return new Tuple20(this.A0$78.one(), this.A1$74.one(), this.A2$70.one(), this.A3$66.one(), this.A4$62.one(), this.A5$58.one(), this.A6$54.one(), this.A7$50.one(), this.A8$46.one(), this.A9$42.one(), this.A10$38.one(), this.A11$34.one(), this.A12$30.one(), this.A13$26.one(), this.A14$22.one(), this.A15$18.one(), this.A16$14.one(), this.A17$10.one(), this.A18$6.one(), this.A19$2.one());
         }

         public Tuple20 plus(final Tuple20 x, final Tuple20 y) {
            return new Tuple20(this.A0$78.plus(x._1(), y._1()), this.A1$74.plus(x._2(), y._2()), this.A2$70.plus(x._3(), y._3()), this.A3$66.plus(x._4(), y._4()), this.A4$62.plus(x._5(), y._5()), this.A5$58.plus(x._6(), y._6()), this.A6$54.plus(x._7(), y._7()), this.A7$50.plus(x._8(), y._8()), this.A8$46.plus(x._9(), y._9()), this.A9$42.plus(x._10(), y._10()), this.A10$38.plus(x._11(), y._11()), this.A11$34.plus(x._12(), y._12()), this.A12$30.plus(x._13(), y._13()), this.A13$26.plus(x._14(), y._14()), this.A14$22.plus(x._15(), y._15()), this.A15$18.plus(x._16(), y._16()), this.A16$14.plus(x._17(), y._17()), this.A17$10.plus(x._18(), y._18()), this.A18$6.plus(x._19(), y._19()), this.A19$2.plus(x._20(), y._20()));
         }

         public Tuple20 times(final Tuple20 x, final Tuple20 y) {
            return new Tuple20(this.A0$78.times(x._1(), y._1()), this.A1$74.times(x._2(), y._2()), this.A2$70.times(x._3(), y._3()), this.A3$66.times(x._4(), y._4()), this.A4$62.times(x._5(), y._5()), this.A5$58.times(x._6(), y._6()), this.A6$54.times(x._7(), y._7()), this.A7$50.times(x._8(), y._8()), this.A8$46.times(x._9(), y._9()), this.A9$42.times(x._10(), y._10()), this.A10$38.times(x._11(), y._11()), this.A11$34.times(x._12(), y._12()), this.A12$30.times(x._13(), y._13()), this.A13$26.times(x._14(), y._14()), this.A14$22.times(x._15(), y._15()), this.A15$18.times(x._16(), y._16()), this.A16$14.times(x._17(), y._17()), this.A17$10.times(x._18(), y._18()), this.A18$6.times(x._19(), y._19()), this.A19$2.times(x._20(), y._20()));
         }

         public Tuple20 zero() {
            return new Tuple20(this.A0$78.zero(), this.A1$74.zero(), this.A2$70.zero(), this.A3$66.zero(), this.A4$62.zero(), this.A5$58.zero(), this.A6$54.zero(), this.A7$50.zero(), this.A8$46.zero(), this.A9$42.zero(), this.A10$38.zero(), this.A11$34.zero(), this.A12$30.zero(), this.A13$26.zero(), this.A14$22.zero(), this.A15$18.zero(), this.A16$14.zero(), this.A17$10.zero(), this.A18$6.zero(), this.A19$2.zero());
         }

         public Tuple20 negate(final Tuple20 x) {
            return new Tuple20(this.A0$78.negate(x._1()), this.A1$74.negate(x._2()), this.A2$70.negate(x._3()), this.A3$66.negate(x._4()), this.A4$62.negate(x._5()), this.A5$58.negate(x._6()), this.A6$54.negate(x._7()), this.A7$50.negate(x._8()), this.A8$46.negate(x._9()), this.A9$42.negate(x._10()), this.A10$38.negate(x._11()), this.A11$34.negate(x._12()), this.A12$30.negate(x._13()), this.A13$26.negate(x._14()), this.A14$22.negate(x._15()), this.A15$18.negate(x._16()), this.A16$14.negate(x._17()), this.A17$10.negate(x._18()), this.A18$6.negate(x._19()), this.A19$2.negate(x._20()));
         }

         public {
            this.A0$78 = A0$78;
            this.A1$74 = A1$74;
            this.A2$70 = A2$70;
            this.A3$66 = A3$66;
            this.A4$62 = A4$62;
            this.A5$58 = A5$58;
            this.A6$54 = A6$54;
            this.A7$50 = A7$50;
            this.A8$46 = A8$46;
            this.A9$42 = A9$42;
            this.A10$38 = A10$38;
            this.A11$34 = A11$34;
            this.A12$30 = A12$30;
            this.A13$26 = A13$26;
            this.A14$22 = A14$22;
            this.A15$18 = A15$18;
            this.A16$14 = A16$14;
            this.A17$10 = A17$10;
            this.A18$6 = A18$6;
            this.A19$2 = A19$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple20Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16, final Rng A17, final Rng A18, final Rng A19) {
      return $this.tuple20Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19);
   }

   default Rng tuple20Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16, final Rng A17, final Rng A18, final Rng A19) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) {
         private final Rng A0$79;
         private final Rng A1$75;
         private final Rng A2$71;
         private final Rng A3$67;
         private final Rng A4$63;
         private final Rng A5$59;
         private final Rng A6$55;
         private final Rng A7$51;
         private final Rng A8$47;
         private final Rng A9$43;
         private final Rng A10$39;
         private final Rng A11$35;
         private final Rng A12$31;
         private final Rng A13$27;
         private final Rng A14$23;
         private final Rng A15$19;
         private final Rng A16$15;
         private final Rng A17$11;
         private final Rng A18$7;
         private final Rng A19$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple20 plus(final Tuple20 x, final Tuple20 y) {
            return new Tuple20(this.A0$79.plus(x._1(), y._1()), this.A1$75.plus(x._2(), y._2()), this.A2$71.plus(x._3(), y._3()), this.A3$67.plus(x._4(), y._4()), this.A4$63.plus(x._5(), y._5()), this.A5$59.plus(x._6(), y._6()), this.A6$55.plus(x._7(), y._7()), this.A7$51.plus(x._8(), y._8()), this.A8$47.plus(x._9(), y._9()), this.A9$43.plus(x._10(), y._10()), this.A10$39.plus(x._11(), y._11()), this.A11$35.plus(x._12(), y._12()), this.A12$31.plus(x._13(), y._13()), this.A13$27.plus(x._14(), y._14()), this.A14$23.plus(x._15(), y._15()), this.A15$19.plus(x._16(), y._16()), this.A16$15.plus(x._17(), y._17()), this.A17$11.plus(x._18(), y._18()), this.A18$7.plus(x._19(), y._19()), this.A19$3.plus(x._20(), y._20()));
         }

         public Tuple20 times(final Tuple20 x, final Tuple20 y) {
            return new Tuple20(this.A0$79.times(x._1(), y._1()), this.A1$75.times(x._2(), y._2()), this.A2$71.times(x._3(), y._3()), this.A3$67.times(x._4(), y._4()), this.A4$63.times(x._5(), y._5()), this.A5$59.times(x._6(), y._6()), this.A6$55.times(x._7(), y._7()), this.A7$51.times(x._8(), y._8()), this.A8$47.times(x._9(), y._9()), this.A9$43.times(x._10(), y._10()), this.A10$39.times(x._11(), y._11()), this.A11$35.times(x._12(), y._12()), this.A12$31.times(x._13(), y._13()), this.A13$27.times(x._14(), y._14()), this.A14$23.times(x._15(), y._15()), this.A15$19.times(x._16(), y._16()), this.A16$15.times(x._17(), y._17()), this.A17$11.times(x._18(), y._18()), this.A18$7.times(x._19(), y._19()), this.A19$3.times(x._20(), y._20()));
         }

         public Tuple20 zero() {
            return new Tuple20(this.A0$79.zero(), this.A1$75.zero(), this.A2$71.zero(), this.A3$67.zero(), this.A4$63.zero(), this.A5$59.zero(), this.A6$55.zero(), this.A7$51.zero(), this.A8$47.zero(), this.A9$43.zero(), this.A10$39.zero(), this.A11$35.zero(), this.A12$31.zero(), this.A13$27.zero(), this.A14$23.zero(), this.A15$19.zero(), this.A16$15.zero(), this.A17$11.zero(), this.A18$7.zero(), this.A19$3.zero());
         }

         public Tuple20 negate(final Tuple20 x) {
            return new Tuple20(this.A0$79.negate(x._1()), this.A1$75.negate(x._2()), this.A2$71.negate(x._3()), this.A3$67.negate(x._4()), this.A4$63.negate(x._5()), this.A5$59.negate(x._6()), this.A6$55.negate(x._7()), this.A7$51.negate(x._8()), this.A8$47.negate(x._9()), this.A9$43.negate(x._10()), this.A10$39.negate(x._11()), this.A11$35.negate(x._12()), this.A12$31.negate(x._13()), this.A13$27.negate(x._14()), this.A14$23.negate(x._15()), this.A15$19.negate(x._16()), this.A16$15.negate(x._17()), this.A17$11.negate(x._18()), this.A18$7.negate(x._19()), this.A19$3.negate(x._20()));
         }

         public {
            this.A0$79 = A0$79;
            this.A1$75 = A1$75;
            this.A2$71 = A2$71;
            this.A3$67 = A3$67;
            this.A4$63 = A4$63;
            this.A5$59 = A5$59;
            this.A6$55 = A6$55;
            this.A7$51 = A7$51;
            this.A8$47 = A8$47;
            this.A9$43 = A9$43;
            this.A10$39 = A10$39;
            this.A11$35 = A11$35;
            this.A12$31 = A12$31;
            this.A13$27 = A13$27;
            this.A14$23 = A14$23;
            this.A15$19 = A15$19;
            this.A16$15 = A16$15;
            this.A17$11 = A17$11;
            this.A18$7 = A18$7;
            this.A19$3 = A19$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple20Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16, final Semiring A17, final Semiring A18, final Semiring A19) {
      return $this.tuple20Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19);
   }

   default Semiring tuple20Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16, final Semiring A17, final Semiring A18, final Semiring A19) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) {
         private final Semiring A0$80;
         private final Semiring A1$76;
         private final Semiring A2$72;
         private final Semiring A3$68;
         private final Semiring A4$64;
         private final Semiring A5$60;
         private final Semiring A6$56;
         private final Semiring A7$52;
         private final Semiring A8$48;
         private final Semiring A9$44;
         private final Semiring A10$40;
         private final Semiring A11$36;
         private final Semiring A12$32;
         private final Semiring A13$28;
         private final Semiring A14$24;
         private final Semiring A15$20;
         private final Semiring A16$16;
         private final Semiring A17$12;
         private final Semiring A18$8;
         private final Semiring A19$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple20 plus(final Tuple20 x, final Tuple20 y) {
            return new Tuple20(this.A0$80.plus(x._1(), y._1()), this.A1$76.plus(x._2(), y._2()), this.A2$72.plus(x._3(), y._3()), this.A3$68.plus(x._4(), y._4()), this.A4$64.plus(x._5(), y._5()), this.A5$60.plus(x._6(), y._6()), this.A6$56.plus(x._7(), y._7()), this.A7$52.plus(x._8(), y._8()), this.A8$48.plus(x._9(), y._9()), this.A9$44.plus(x._10(), y._10()), this.A10$40.plus(x._11(), y._11()), this.A11$36.plus(x._12(), y._12()), this.A12$32.plus(x._13(), y._13()), this.A13$28.plus(x._14(), y._14()), this.A14$24.plus(x._15(), y._15()), this.A15$20.plus(x._16(), y._16()), this.A16$16.plus(x._17(), y._17()), this.A17$12.plus(x._18(), y._18()), this.A18$8.plus(x._19(), y._19()), this.A19$4.plus(x._20(), y._20()));
         }

         public Tuple20 times(final Tuple20 x, final Tuple20 y) {
            return new Tuple20(this.A0$80.times(x._1(), y._1()), this.A1$76.times(x._2(), y._2()), this.A2$72.times(x._3(), y._3()), this.A3$68.times(x._4(), y._4()), this.A4$64.times(x._5(), y._5()), this.A5$60.times(x._6(), y._6()), this.A6$56.times(x._7(), y._7()), this.A7$52.times(x._8(), y._8()), this.A8$48.times(x._9(), y._9()), this.A9$44.times(x._10(), y._10()), this.A10$40.times(x._11(), y._11()), this.A11$36.times(x._12(), y._12()), this.A12$32.times(x._13(), y._13()), this.A13$28.times(x._14(), y._14()), this.A14$24.times(x._15(), y._15()), this.A15$20.times(x._16(), y._16()), this.A16$16.times(x._17(), y._17()), this.A17$12.times(x._18(), y._18()), this.A18$8.times(x._19(), y._19()), this.A19$4.times(x._20(), y._20()));
         }

         public Tuple20 zero() {
            return new Tuple20(this.A0$80.zero(), this.A1$76.zero(), this.A2$72.zero(), this.A3$68.zero(), this.A4$64.zero(), this.A5$60.zero(), this.A6$56.zero(), this.A7$52.zero(), this.A8$48.zero(), this.A9$44.zero(), this.A10$40.zero(), this.A11$36.zero(), this.A12$32.zero(), this.A13$28.zero(), this.A14$24.zero(), this.A15$20.zero(), this.A16$16.zero(), this.A17$12.zero(), this.A18$8.zero(), this.A19$4.zero());
         }

         public {
            this.A0$80 = A0$80;
            this.A1$76 = A1$76;
            this.A2$72 = A2$72;
            this.A3$68 = A3$68;
            this.A4$64 = A4$64;
            this.A5$60 = A5$60;
            this.A6$56 = A6$56;
            this.A7$52 = A7$52;
            this.A8$48 = A8$48;
            this.A9$44 = A9$44;
            this.A10$40 = A10$40;
            this.A11$36 = A11$36;
            this.A12$32 = A12$32;
            this.A13$28 = A13$28;
            this.A14$24 = A14$24;
            this.A15$20 = A15$20;
            this.A16$16 = A16$16;
            this.A17$12 = A17$12;
            this.A18$8 = A18$8;
            this.A19$4 = A19$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple21Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16, final Rig A17, final Rig A18, final Rig A19, final Rig A20) {
      return $this.tuple21Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20);
   }

   default Rig tuple21Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16, final Rig A17, final Rig A18, final Rig A19, final Rig A20) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) {
         private final Rig A0$81;
         private final Rig A1$77;
         private final Rig A2$73;
         private final Rig A3$69;
         private final Rig A4$65;
         private final Rig A5$61;
         private final Rig A6$57;
         private final Rig A7$53;
         private final Rig A8$49;
         private final Rig A9$45;
         private final Rig A10$41;
         private final Rig A11$37;
         private final Rig A12$33;
         private final Rig A13$29;
         private final Rig A14$25;
         private final Rig A15$21;
         private final Rig A16$17;
         private final Rig A17$13;
         private final Rig A18$9;
         private final Rig A19$5;
         private final Rig A20$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple21 one() {
            return new Tuple21(this.A0$81.one(), this.A1$77.one(), this.A2$73.one(), this.A3$69.one(), this.A4$65.one(), this.A5$61.one(), this.A6$57.one(), this.A7$53.one(), this.A8$49.one(), this.A9$45.one(), this.A10$41.one(), this.A11$37.one(), this.A12$33.one(), this.A13$29.one(), this.A14$25.one(), this.A15$21.one(), this.A16$17.one(), this.A17$13.one(), this.A18$9.one(), this.A19$5.one(), this.A20$1.one());
         }

         public Tuple21 plus(final Tuple21 x, final Tuple21 y) {
            return new Tuple21(this.A0$81.plus(x._1(), y._1()), this.A1$77.plus(x._2(), y._2()), this.A2$73.plus(x._3(), y._3()), this.A3$69.plus(x._4(), y._4()), this.A4$65.plus(x._5(), y._5()), this.A5$61.plus(x._6(), y._6()), this.A6$57.plus(x._7(), y._7()), this.A7$53.plus(x._8(), y._8()), this.A8$49.plus(x._9(), y._9()), this.A9$45.plus(x._10(), y._10()), this.A10$41.plus(x._11(), y._11()), this.A11$37.plus(x._12(), y._12()), this.A12$33.plus(x._13(), y._13()), this.A13$29.plus(x._14(), y._14()), this.A14$25.plus(x._15(), y._15()), this.A15$21.plus(x._16(), y._16()), this.A16$17.plus(x._17(), y._17()), this.A17$13.plus(x._18(), y._18()), this.A18$9.plus(x._19(), y._19()), this.A19$5.plus(x._20(), y._20()), this.A20$1.plus(x._21(), y._21()));
         }

         public Tuple21 times(final Tuple21 x, final Tuple21 y) {
            return new Tuple21(this.A0$81.times(x._1(), y._1()), this.A1$77.times(x._2(), y._2()), this.A2$73.times(x._3(), y._3()), this.A3$69.times(x._4(), y._4()), this.A4$65.times(x._5(), y._5()), this.A5$61.times(x._6(), y._6()), this.A6$57.times(x._7(), y._7()), this.A7$53.times(x._8(), y._8()), this.A8$49.times(x._9(), y._9()), this.A9$45.times(x._10(), y._10()), this.A10$41.times(x._11(), y._11()), this.A11$37.times(x._12(), y._12()), this.A12$33.times(x._13(), y._13()), this.A13$29.times(x._14(), y._14()), this.A14$25.times(x._15(), y._15()), this.A15$21.times(x._16(), y._16()), this.A16$17.times(x._17(), y._17()), this.A17$13.times(x._18(), y._18()), this.A18$9.times(x._19(), y._19()), this.A19$5.times(x._20(), y._20()), this.A20$1.times(x._21(), y._21()));
         }

         public Tuple21 zero() {
            return new Tuple21(this.A0$81.zero(), this.A1$77.zero(), this.A2$73.zero(), this.A3$69.zero(), this.A4$65.zero(), this.A5$61.zero(), this.A6$57.zero(), this.A7$53.zero(), this.A8$49.zero(), this.A9$45.zero(), this.A10$41.zero(), this.A11$37.zero(), this.A12$33.zero(), this.A13$29.zero(), this.A14$25.zero(), this.A15$21.zero(), this.A16$17.zero(), this.A17$13.zero(), this.A18$9.zero(), this.A19$5.zero(), this.A20$1.zero());
         }

         public {
            this.A0$81 = A0$81;
            this.A1$77 = A1$77;
            this.A2$73 = A2$73;
            this.A3$69 = A3$69;
            this.A4$65 = A4$65;
            this.A5$61 = A5$61;
            this.A6$57 = A6$57;
            this.A7$53 = A7$53;
            this.A8$49 = A8$49;
            this.A9$45 = A9$45;
            this.A10$41 = A10$41;
            this.A11$37 = A11$37;
            this.A12$33 = A12$33;
            this.A13$29 = A13$29;
            this.A14$25 = A14$25;
            this.A15$21 = A15$21;
            this.A16$17 = A16$17;
            this.A17$13 = A17$13;
            this.A18$9 = A18$9;
            this.A19$5 = A19$5;
            this.A20$1 = A20$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple21Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16, final Ring A17, final Ring A18, final Ring A19, final Ring A20) {
      return $this.tuple21Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20);
   }

   default Ring tuple21Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16, final Ring A17, final Ring A18, final Ring A19, final Ring A20) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) {
         private final Ring A0$82;
         private final Ring A1$78;
         private final Ring A2$74;
         private final Ring A3$70;
         private final Ring A4$66;
         private final Ring A5$62;
         private final Ring A6$58;
         private final Ring A7$54;
         private final Ring A8$50;
         private final Ring A9$46;
         private final Ring A10$42;
         private final Ring A11$38;
         private final Ring A12$34;
         private final Ring A13$30;
         private final Ring A14$26;
         private final Ring A15$22;
         private final Ring A16$18;
         private final Ring A17$14;
         private final Ring A18$10;
         private final Ring A19$6;
         private final Ring A20$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple21 one() {
            return new Tuple21(this.A0$82.one(), this.A1$78.one(), this.A2$74.one(), this.A3$70.one(), this.A4$66.one(), this.A5$62.one(), this.A6$58.one(), this.A7$54.one(), this.A8$50.one(), this.A9$46.one(), this.A10$42.one(), this.A11$38.one(), this.A12$34.one(), this.A13$30.one(), this.A14$26.one(), this.A15$22.one(), this.A16$18.one(), this.A17$14.one(), this.A18$10.one(), this.A19$6.one(), this.A20$2.one());
         }

         public Tuple21 plus(final Tuple21 x, final Tuple21 y) {
            return new Tuple21(this.A0$82.plus(x._1(), y._1()), this.A1$78.plus(x._2(), y._2()), this.A2$74.plus(x._3(), y._3()), this.A3$70.plus(x._4(), y._4()), this.A4$66.plus(x._5(), y._5()), this.A5$62.plus(x._6(), y._6()), this.A6$58.plus(x._7(), y._7()), this.A7$54.plus(x._8(), y._8()), this.A8$50.plus(x._9(), y._9()), this.A9$46.plus(x._10(), y._10()), this.A10$42.plus(x._11(), y._11()), this.A11$38.plus(x._12(), y._12()), this.A12$34.plus(x._13(), y._13()), this.A13$30.plus(x._14(), y._14()), this.A14$26.plus(x._15(), y._15()), this.A15$22.plus(x._16(), y._16()), this.A16$18.plus(x._17(), y._17()), this.A17$14.plus(x._18(), y._18()), this.A18$10.plus(x._19(), y._19()), this.A19$6.plus(x._20(), y._20()), this.A20$2.plus(x._21(), y._21()));
         }

         public Tuple21 times(final Tuple21 x, final Tuple21 y) {
            return new Tuple21(this.A0$82.times(x._1(), y._1()), this.A1$78.times(x._2(), y._2()), this.A2$74.times(x._3(), y._3()), this.A3$70.times(x._4(), y._4()), this.A4$66.times(x._5(), y._5()), this.A5$62.times(x._6(), y._6()), this.A6$58.times(x._7(), y._7()), this.A7$54.times(x._8(), y._8()), this.A8$50.times(x._9(), y._9()), this.A9$46.times(x._10(), y._10()), this.A10$42.times(x._11(), y._11()), this.A11$38.times(x._12(), y._12()), this.A12$34.times(x._13(), y._13()), this.A13$30.times(x._14(), y._14()), this.A14$26.times(x._15(), y._15()), this.A15$22.times(x._16(), y._16()), this.A16$18.times(x._17(), y._17()), this.A17$14.times(x._18(), y._18()), this.A18$10.times(x._19(), y._19()), this.A19$6.times(x._20(), y._20()), this.A20$2.times(x._21(), y._21()));
         }

         public Tuple21 zero() {
            return new Tuple21(this.A0$82.zero(), this.A1$78.zero(), this.A2$74.zero(), this.A3$70.zero(), this.A4$66.zero(), this.A5$62.zero(), this.A6$58.zero(), this.A7$54.zero(), this.A8$50.zero(), this.A9$46.zero(), this.A10$42.zero(), this.A11$38.zero(), this.A12$34.zero(), this.A13$30.zero(), this.A14$26.zero(), this.A15$22.zero(), this.A16$18.zero(), this.A17$14.zero(), this.A18$10.zero(), this.A19$6.zero(), this.A20$2.zero());
         }

         public Tuple21 negate(final Tuple21 x) {
            return new Tuple21(this.A0$82.negate(x._1()), this.A1$78.negate(x._2()), this.A2$74.negate(x._3()), this.A3$70.negate(x._4()), this.A4$66.negate(x._5()), this.A5$62.negate(x._6()), this.A6$58.negate(x._7()), this.A7$54.negate(x._8()), this.A8$50.negate(x._9()), this.A9$46.negate(x._10()), this.A10$42.negate(x._11()), this.A11$38.negate(x._12()), this.A12$34.negate(x._13()), this.A13$30.negate(x._14()), this.A14$26.negate(x._15()), this.A15$22.negate(x._16()), this.A16$18.negate(x._17()), this.A17$14.negate(x._18()), this.A18$10.negate(x._19()), this.A19$6.negate(x._20()), this.A20$2.negate(x._21()));
         }

         public {
            this.A0$82 = A0$82;
            this.A1$78 = A1$78;
            this.A2$74 = A2$74;
            this.A3$70 = A3$70;
            this.A4$66 = A4$66;
            this.A5$62 = A5$62;
            this.A6$58 = A6$58;
            this.A7$54 = A7$54;
            this.A8$50 = A8$50;
            this.A9$46 = A9$46;
            this.A10$42 = A10$42;
            this.A11$38 = A11$38;
            this.A12$34 = A12$34;
            this.A13$30 = A13$30;
            this.A14$26 = A14$26;
            this.A15$22 = A15$22;
            this.A16$18 = A16$18;
            this.A17$14 = A17$14;
            this.A18$10 = A18$10;
            this.A19$6 = A19$6;
            this.A20$2 = A20$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple21Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16, final Rng A17, final Rng A18, final Rng A19, final Rng A20) {
      return $this.tuple21Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20);
   }

   default Rng tuple21Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16, final Rng A17, final Rng A18, final Rng A19, final Rng A20) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) {
         private final Rng A0$83;
         private final Rng A1$79;
         private final Rng A2$75;
         private final Rng A3$71;
         private final Rng A4$67;
         private final Rng A5$63;
         private final Rng A6$59;
         private final Rng A7$55;
         private final Rng A8$51;
         private final Rng A9$47;
         private final Rng A10$43;
         private final Rng A11$39;
         private final Rng A12$35;
         private final Rng A13$31;
         private final Rng A14$27;
         private final Rng A15$23;
         private final Rng A16$19;
         private final Rng A17$15;
         private final Rng A18$11;
         private final Rng A19$7;
         private final Rng A20$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple21 plus(final Tuple21 x, final Tuple21 y) {
            return new Tuple21(this.A0$83.plus(x._1(), y._1()), this.A1$79.plus(x._2(), y._2()), this.A2$75.plus(x._3(), y._3()), this.A3$71.plus(x._4(), y._4()), this.A4$67.plus(x._5(), y._5()), this.A5$63.plus(x._6(), y._6()), this.A6$59.plus(x._7(), y._7()), this.A7$55.plus(x._8(), y._8()), this.A8$51.plus(x._9(), y._9()), this.A9$47.plus(x._10(), y._10()), this.A10$43.plus(x._11(), y._11()), this.A11$39.plus(x._12(), y._12()), this.A12$35.plus(x._13(), y._13()), this.A13$31.plus(x._14(), y._14()), this.A14$27.plus(x._15(), y._15()), this.A15$23.plus(x._16(), y._16()), this.A16$19.plus(x._17(), y._17()), this.A17$15.plus(x._18(), y._18()), this.A18$11.plus(x._19(), y._19()), this.A19$7.plus(x._20(), y._20()), this.A20$3.plus(x._21(), y._21()));
         }

         public Tuple21 times(final Tuple21 x, final Tuple21 y) {
            return new Tuple21(this.A0$83.times(x._1(), y._1()), this.A1$79.times(x._2(), y._2()), this.A2$75.times(x._3(), y._3()), this.A3$71.times(x._4(), y._4()), this.A4$67.times(x._5(), y._5()), this.A5$63.times(x._6(), y._6()), this.A6$59.times(x._7(), y._7()), this.A7$55.times(x._8(), y._8()), this.A8$51.times(x._9(), y._9()), this.A9$47.times(x._10(), y._10()), this.A10$43.times(x._11(), y._11()), this.A11$39.times(x._12(), y._12()), this.A12$35.times(x._13(), y._13()), this.A13$31.times(x._14(), y._14()), this.A14$27.times(x._15(), y._15()), this.A15$23.times(x._16(), y._16()), this.A16$19.times(x._17(), y._17()), this.A17$15.times(x._18(), y._18()), this.A18$11.times(x._19(), y._19()), this.A19$7.times(x._20(), y._20()), this.A20$3.times(x._21(), y._21()));
         }

         public Tuple21 zero() {
            return new Tuple21(this.A0$83.zero(), this.A1$79.zero(), this.A2$75.zero(), this.A3$71.zero(), this.A4$67.zero(), this.A5$63.zero(), this.A6$59.zero(), this.A7$55.zero(), this.A8$51.zero(), this.A9$47.zero(), this.A10$43.zero(), this.A11$39.zero(), this.A12$35.zero(), this.A13$31.zero(), this.A14$27.zero(), this.A15$23.zero(), this.A16$19.zero(), this.A17$15.zero(), this.A18$11.zero(), this.A19$7.zero(), this.A20$3.zero());
         }

         public Tuple21 negate(final Tuple21 x) {
            return new Tuple21(this.A0$83.negate(x._1()), this.A1$79.negate(x._2()), this.A2$75.negate(x._3()), this.A3$71.negate(x._4()), this.A4$67.negate(x._5()), this.A5$63.negate(x._6()), this.A6$59.negate(x._7()), this.A7$55.negate(x._8()), this.A8$51.negate(x._9()), this.A9$47.negate(x._10()), this.A10$43.negate(x._11()), this.A11$39.negate(x._12()), this.A12$35.negate(x._13()), this.A13$31.negate(x._14()), this.A14$27.negate(x._15()), this.A15$23.negate(x._16()), this.A16$19.negate(x._17()), this.A17$15.negate(x._18()), this.A18$11.negate(x._19()), this.A19$7.negate(x._20()), this.A20$3.negate(x._21()));
         }

         public {
            this.A0$83 = A0$83;
            this.A1$79 = A1$79;
            this.A2$75 = A2$75;
            this.A3$71 = A3$71;
            this.A4$67 = A4$67;
            this.A5$63 = A5$63;
            this.A6$59 = A6$59;
            this.A7$55 = A7$55;
            this.A8$51 = A8$51;
            this.A9$47 = A9$47;
            this.A10$43 = A10$43;
            this.A11$39 = A11$39;
            this.A12$35 = A12$35;
            this.A13$31 = A13$31;
            this.A14$27 = A14$27;
            this.A15$23 = A15$23;
            this.A16$19 = A16$19;
            this.A17$15 = A17$15;
            this.A18$11 = A18$11;
            this.A19$7 = A19$7;
            this.A20$3 = A20$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple21Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16, final Semiring A17, final Semiring A18, final Semiring A19, final Semiring A20) {
      return $this.tuple21Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20);
   }

   default Semiring tuple21Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16, final Semiring A17, final Semiring A18, final Semiring A19, final Semiring A20) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) {
         private final Semiring A0$84;
         private final Semiring A1$80;
         private final Semiring A2$76;
         private final Semiring A3$72;
         private final Semiring A4$68;
         private final Semiring A5$64;
         private final Semiring A6$60;
         private final Semiring A7$56;
         private final Semiring A8$52;
         private final Semiring A9$48;
         private final Semiring A10$44;
         private final Semiring A11$40;
         private final Semiring A12$36;
         private final Semiring A13$32;
         private final Semiring A14$28;
         private final Semiring A15$24;
         private final Semiring A16$20;
         private final Semiring A17$16;
         private final Semiring A18$12;
         private final Semiring A19$8;
         private final Semiring A20$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple21 plus(final Tuple21 x, final Tuple21 y) {
            return new Tuple21(this.A0$84.plus(x._1(), y._1()), this.A1$80.plus(x._2(), y._2()), this.A2$76.plus(x._3(), y._3()), this.A3$72.plus(x._4(), y._4()), this.A4$68.plus(x._5(), y._5()), this.A5$64.plus(x._6(), y._6()), this.A6$60.plus(x._7(), y._7()), this.A7$56.plus(x._8(), y._8()), this.A8$52.plus(x._9(), y._9()), this.A9$48.plus(x._10(), y._10()), this.A10$44.plus(x._11(), y._11()), this.A11$40.plus(x._12(), y._12()), this.A12$36.plus(x._13(), y._13()), this.A13$32.plus(x._14(), y._14()), this.A14$28.plus(x._15(), y._15()), this.A15$24.plus(x._16(), y._16()), this.A16$20.plus(x._17(), y._17()), this.A17$16.plus(x._18(), y._18()), this.A18$12.plus(x._19(), y._19()), this.A19$8.plus(x._20(), y._20()), this.A20$4.plus(x._21(), y._21()));
         }

         public Tuple21 times(final Tuple21 x, final Tuple21 y) {
            return new Tuple21(this.A0$84.times(x._1(), y._1()), this.A1$80.times(x._2(), y._2()), this.A2$76.times(x._3(), y._3()), this.A3$72.times(x._4(), y._4()), this.A4$68.times(x._5(), y._5()), this.A5$64.times(x._6(), y._6()), this.A6$60.times(x._7(), y._7()), this.A7$56.times(x._8(), y._8()), this.A8$52.times(x._9(), y._9()), this.A9$48.times(x._10(), y._10()), this.A10$44.times(x._11(), y._11()), this.A11$40.times(x._12(), y._12()), this.A12$36.times(x._13(), y._13()), this.A13$32.times(x._14(), y._14()), this.A14$28.times(x._15(), y._15()), this.A15$24.times(x._16(), y._16()), this.A16$20.times(x._17(), y._17()), this.A17$16.times(x._18(), y._18()), this.A18$12.times(x._19(), y._19()), this.A19$8.times(x._20(), y._20()), this.A20$4.times(x._21(), y._21()));
         }

         public Tuple21 zero() {
            return new Tuple21(this.A0$84.zero(), this.A1$80.zero(), this.A2$76.zero(), this.A3$72.zero(), this.A4$68.zero(), this.A5$64.zero(), this.A6$60.zero(), this.A7$56.zero(), this.A8$52.zero(), this.A9$48.zero(), this.A10$44.zero(), this.A11$40.zero(), this.A12$36.zero(), this.A13$32.zero(), this.A14$28.zero(), this.A15$24.zero(), this.A16$20.zero(), this.A17$16.zero(), this.A18$12.zero(), this.A19$8.zero(), this.A20$4.zero());
         }

         public {
            this.A0$84 = A0$84;
            this.A1$80 = A1$80;
            this.A2$76 = A2$76;
            this.A3$72 = A3$72;
            this.A4$68 = A4$68;
            this.A5$64 = A5$64;
            this.A6$60 = A6$60;
            this.A7$56 = A7$56;
            this.A8$52 = A8$52;
            this.A9$48 = A9$48;
            this.A10$44 = A10$44;
            this.A11$40 = A11$40;
            this.A12$36 = A12$36;
            this.A13$32 = A13$32;
            this.A14$28 = A14$28;
            this.A15$24 = A15$24;
            this.A16$20 = A16$20;
            this.A17$16 = A17$16;
            this.A18$12 = A18$12;
            this.A19$8 = A19$8;
            this.A20$4 = A20$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rig tuple22Rig$(final TupleInstances $this, final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16, final Rig A17, final Rig A18, final Rig A19, final Rig A20, final Rig A21) {
      return $this.tuple22Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21);
   }

   default Rig tuple22Rig(final Rig A0, final Rig A1, final Rig A2, final Rig A3, final Rig A4, final Rig A5, final Rig A6, final Rig A7, final Rig A8, final Rig A9, final Rig A10, final Rig A11, final Rig A12, final Rig A13, final Rig A14, final Rig A15, final Rig A16, final Rig A17, final Rig A18, final Rig A19, final Rig A20, final Rig A21) {
      return new Rig(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) {
         private final Rig A0$85;
         private final Rig A1$81;
         private final Rig A2$77;
         private final Rig A3$73;
         private final Rig A4$69;
         private final Rig A5$65;
         private final Rig A6$61;
         private final Rig A7$57;
         private final Rig A8$53;
         private final Rig A9$49;
         private final Rig A10$45;
         private final Rig A11$41;
         private final Rig A12$37;
         private final Rig A13$33;
         private final Rig A14$29;
         private final Rig A15$25;
         private final Rig A16$21;
         private final Rig A17$17;
         private final Rig A18$13;
         private final Rig A19$9;
         private final Rig A20$5;
         private final Rig A21$1;

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple22 one() {
            return new Tuple22(this.A0$85.one(), this.A1$81.one(), this.A2$77.one(), this.A3$73.one(), this.A4$69.one(), this.A5$65.one(), this.A6$61.one(), this.A7$57.one(), this.A8$53.one(), this.A9$49.one(), this.A10$45.one(), this.A11$41.one(), this.A12$37.one(), this.A13$33.one(), this.A14$29.one(), this.A15$25.one(), this.A16$21.one(), this.A17$17.one(), this.A18$13.one(), this.A19$9.one(), this.A20$5.one(), this.A21$1.one());
         }

         public Tuple22 plus(final Tuple22 x, final Tuple22 y) {
            return new Tuple22(this.A0$85.plus(x._1(), y._1()), this.A1$81.plus(x._2(), y._2()), this.A2$77.plus(x._3(), y._3()), this.A3$73.plus(x._4(), y._4()), this.A4$69.plus(x._5(), y._5()), this.A5$65.plus(x._6(), y._6()), this.A6$61.plus(x._7(), y._7()), this.A7$57.plus(x._8(), y._8()), this.A8$53.plus(x._9(), y._9()), this.A9$49.plus(x._10(), y._10()), this.A10$45.plus(x._11(), y._11()), this.A11$41.plus(x._12(), y._12()), this.A12$37.plus(x._13(), y._13()), this.A13$33.plus(x._14(), y._14()), this.A14$29.plus(x._15(), y._15()), this.A15$25.plus(x._16(), y._16()), this.A16$21.plus(x._17(), y._17()), this.A17$17.plus(x._18(), y._18()), this.A18$13.plus(x._19(), y._19()), this.A19$9.plus(x._20(), y._20()), this.A20$5.plus(x._21(), y._21()), this.A21$1.plus(x._22(), y._22()));
         }

         public Tuple22 times(final Tuple22 x, final Tuple22 y) {
            return new Tuple22(this.A0$85.times(x._1(), y._1()), this.A1$81.times(x._2(), y._2()), this.A2$77.times(x._3(), y._3()), this.A3$73.times(x._4(), y._4()), this.A4$69.times(x._5(), y._5()), this.A5$65.times(x._6(), y._6()), this.A6$61.times(x._7(), y._7()), this.A7$57.times(x._8(), y._8()), this.A8$53.times(x._9(), y._9()), this.A9$49.times(x._10(), y._10()), this.A10$45.times(x._11(), y._11()), this.A11$41.times(x._12(), y._12()), this.A12$37.times(x._13(), y._13()), this.A13$33.times(x._14(), y._14()), this.A14$29.times(x._15(), y._15()), this.A15$25.times(x._16(), y._16()), this.A16$21.times(x._17(), y._17()), this.A17$17.times(x._18(), y._18()), this.A18$13.times(x._19(), y._19()), this.A19$9.times(x._20(), y._20()), this.A20$5.times(x._21(), y._21()), this.A21$1.times(x._22(), y._22()));
         }

         public Tuple22 zero() {
            return new Tuple22(this.A0$85.zero(), this.A1$81.zero(), this.A2$77.zero(), this.A3$73.zero(), this.A4$69.zero(), this.A5$65.zero(), this.A6$61.zero(), this.A7$57.zero(), this.A8$53.zero(), this.A9$49.zero(), this.A10$45.zero(), this.A11$41.zero(), this.A12$37.zero(), this.A13$33.zero(), this.A14$29.zero(), this.A15$25.zero(), this.A16$21.zero(), this.A17$17.zero(), this.A18$13.zero(), this.A19$9.zero(), this.A20$5.zero(), this.A21$1.zero());
         }

         public {
            this.A0$85 = A0$85;
            this.A1$81 = A1$81;
            this.A2$77 = A2$77;
            this.A3$73 = A3$73;
            this.A4$69 = A4$69;
            this.A5$65 = A5$65;
            this.A6$61 = A6$61;
            this.A7$57 = A7$57;
            this.A8$53 = A8$53;
            this.A9$49 = A9$49;
            this.A10$45 = A10$45;
            this.A11$41 = A11$41;
            this.A12$37 = A12$37;
            this.A13$33 = A13$33;
            this.A14$29 = A14$29;
            this.A15$25 = A15$25;
            this.A16$21 = A16$21;
            this.A17$17 = A17$17;
            this.A18$13 = A18$13;
            this.A19$9 = A19$9;
            this.A20$5 = A20$5;
            this.A21$1 = A21$1;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Ring tuple22Ring$(final TupleInstances $this, final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16, final Ring A17, final Ring A18, final Ring A19, final Ring A20, final Ring A21) {
      return $this.tuple22Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21);
   }

   default Ring tuple22Ring(final Ring A0, final Ring A1, final Ring A2, final Ring A3, final Ring A4, final Ring A5, final Ring A6, final Ring A7, final Ring A8, final Ring A9, final Ring A10, final Ring A11, final Ring A12, final Ring A13, final Ring A14, final Ring A15, final Ring A16, final Ring A17, final Ring A18, final Ring A19, final Ring A20, final Ring A21) {
      return new Ring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) {
         private final Ring A0$86;
         private final Ring A1$82;
         private final Ring A2$78;
         private final Ring A3$74;
         private final Ring A4$70;
         private final Ring A5$66;
         private final Ring A6$62;
         private final Ring A7$58;
         private final Ring A8$54;
         private final Ring A9$50;
         private final Ring A10$46;
         private final Ring A11$42;
         private final Ring A12$38;
         private final Ring A13$34;
         private final Ring A14$30;
         private final Ring A15$26;
         private final Ring A16$22;
         private final Ring A17$18;
         private final Ring A18$14;
         private final Ring A19$10;
         private final Ring A20$6;
         private final Ring A21$2;

         public Object fromInt(final int n) {
            return Ring.fromInt$(this, n);
         }

         public double fromInt$mcD$sp(final int n) {
            return Ring.fromInt$mcD$sp$(this, n);
         }

         public float fromInt$mcF$sp(final int n) {
            return Ring.fromInt$mcF$sp$(this, n);
         }

         public int fromInt$mcI$sp(final int n) {
            return Ring.fromInt$mcI$sp$(this, n);
         }

         public long fromInt$mcJ$sp(final int n) {
            return Ring.fromInt$mcJ$sp$(this, n);
         }

         public Object fromBigInt(final BigInt n) {
            return Ring.fromBigInt$(this, n);
         }

         public double fromBigInt$mcD$sp(final BigInt n) {
            return Ring.fromBigInt$mcD$sp$(this, n);
         }

         public float fromBigInt$mcF$sp(final BigInt n) {
            return Ring.fromBigInt$mcF$sp$(this, n);
         }

         public int fromBigInt$mcI$sp(final BigInt n) {
            return Ring.fromBigInt$mcI$sp$(this, n);
         }

         public long fromBigInt$mcJ$sp(final BigInt n) {
            return Ring.fromBigInt$mcJ$sp$(this, n);
         }

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Monoid multiplicative() {
            return MultiplicativeMonoid.multiplicative$(this);
         }

         public Monoid multiplicative$mcD$sp() {
            return MultiplicativeMonoid.multiplicative$mcD$sp$(this);
         }

         public Monoid multiplicative$mcF$sp() {
            return MultiplicativeMonoid.multiplicative$mcF$sp$(this);
         }

         public Monoid multiplicative$mcI$sp() {
            return MultiplicativeMonoid.multiplicative$mcI$sp$(this);
         }

         public Monoid multiplicative$mcJ$sp() {
            return MultiplicativeMonoid.multiplicative$mcJ$sp$(this);
         }

         public double one$mcD$sp() {
            return MultiplicativeMonoid.one$mcD$sp$(this);
         }

         public float one$mcF$sp() {
            return MultiplicativeMonoid.one$mcF$sp$(this);
         }

         public int one$mcI$sp() {
            return MultiplicativeMonoid.one$mcI$sp$(this);
         }

         public long one$mcJ$sp() {
            return MultiplicativeMonoid.one$mcJ$sp$(this);
         }

         public boolean isOne(final Object a, final Eq ev) {
            return MultiplicativeMonoid.isOne$(this, a, ev);
         }

         public boolean isOne$mcD$sp(final double a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcD$sp$(this, a, ev);
         }

         public boolean isOne$mcF$sp(final float a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcF$sp$(this, a, ev);
         }

         public boolean isOne$mcI$sp(final int a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcI$sp$(this, a, ev);
         }

         public boolean isOne$mcJ$sp(final long a, final Eq ev) {
            return MultiplicativeMonoid.isOne$mcJ$sp$(this, a, ev);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeMonoid.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeMonoid.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeMonoid.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeMonoid.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeMonoid.pow$mcJ$sp$(this, a, n);
         }

         public Object product(final IterableOnce as) {
            return MultiplicativeMonoid.product$(this, as);
         }

         public double product$mcD$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcD$sp$(this, as);
         }

         public float product$mcF$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcF$sp$(this, as);
         }

         public int product$mcI$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcI$sp$(this, as);
         }

         public long product$mcJ$sp(final IterableOnce as) {
            return MultiplicativeMonoid.product$mcJ$sp$(this, as);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeMonoid.tryProduct$(this, as);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple22 one() {
            return new Tuple22(this.A0$86.one(), this.A1$82.one(), this.A2$78.one(), this.A3$74.one(), this.A4$70.one(), this.A5$66.one(), this.A6$62.one(), this.A7$58.one(), this.A8$54.one(), this.A9$50.one(), this.A10$46.one(), this.A11$42.one(), this.A12$38.one(), this.A13$34.one(), this.A14$30.one(), this.A15$26.one(), this.A16$22.one(), this.A17$18.one(), this.A18$14.one(), this.A19$10.one(), this.A20$6.one(), this.A21$2.one());
         }

         public Tuple22 plus(final Tuple22 x, final Tuple22 y) {
            return new Tuple22(this.A0$86.plus(x._1(), y._1()), this.A1$82.plus(x._2(), y._2()), this.A2$78.plus(x._3(), y._3()), this.A3$74.plus(x._4(), y._4()), this.A4$70.plus(x._5(), y._5()), this.A5$66.plus(x._6(), y._6()), this.A6$62.plus(x._7(), y._7()), this.A7$58.plus(x._8(), y._8()), this.A8$54.plus(x._9(), y._9()), this.A9$50.plus(x._10(), y._10()), this.A10$46.plus(x._11(), y._11()), this.A11$42.plus(x._12(), y._12()), this.A12$38.plus(x._13(), y._13()), this.A13$34.plus(x._14(), y._14()), this.A14$30.plus(x._15(), y._15()), this.A15$26.plus(x._16(), y._16()), this.A16$22.plus(x._17(), y._17()), this.A17$18.plus(x._18(), y._18()), this.A18$14.plus(x._19(), y._19()), this.A19$10.plus(x._20(), y._20()), this.A20$6.plus(x._21(), y._21()), this.A21$2.plus(x._22(), y._22()));
         }

         public Tuple22 times(final Tuple22 x, final Tuple22 y) {
            return new Tuple22(this.A0$86.times(x._1(), y._1()), this.A1$82.times(x._2(), y._2()), this.A2$78.times(x._3(), y._3()), this.A3$74.times(x._4(), y._4()), this.A4$70.times(x._5(), y._5()), this.A5$66.times(x._6(), y._6()), this.A6$62.times(x._7(), y._7()), this.A7$58.times(x._8(), y._8()), this.A8$54.times(x._9(), y._9()), this.A9$50.times(x._10(), y._10()), this.A10$46.times(x._11(), y._11()), this.A11$42.times(x._12(), y._12()), this.A12$38.times(x._13(), y._13()), this.A13$34.times(x._14(), y._14()), this.A14$30.times(x._15(), y._15()), this.A15$26.times(x._16(), y._16()), this.A16$22.times(x._17(), y._17()), this.A17$18.times(x._18(), y._18()), this.A18$14.times(x._19(), y._19()), this.A19$10.times(x._20(), y._20()), this.A20$6.times(x._21(), y._21()), this.A21$2.times(x._22(), y._22()));
         }

         public Tuple22 zero() {
            return new Tuple22(this.A0$86.zero(), this.A1$82.zero(), this.A2$78.zero(), this.A3$74.zero(), this.A4$70.zero(), this.A5$66.zero(), this.A6$62.zero(), this.A7$58.zero(), this.A8$54.zero(), this.A9$50.zero(), this.A10$46.zero(), this.A11$42.zero(), this.A12$38.zero(), this.A13$34.zero(), this.A14$30.zero(), this.A15$26.zero(), this.A16$22.zero(), this.A17$18.zero(), this.A18$14.zero(), this.A19$10.zero(), this.A20$6.zero(), this.A21$2.zero());
         }

         public Tuple22 negate(final Tuple22 x) {
            return new Tuple22(this.A0$86.negate(x._1()), this.A1$82.negate(x._2()), this.A2$78.negate(x._3()), this.A3$74.negate(x._4()), this.A4$70.negate(x._5()), this.A5$66.negate(x._6()), this.A6$62.negate(x._7()), this.A7$58.negate(x._8()), this.A8$54.negate(x._9()), this.A9$50.negate(x._10()), this.A10$46.negate(x._11()), this.A11$42.negate(x._12()), this.A12$38.negate(x._13()), this.A13$34.negate(x._14()), this.A14$30.negate(x._15()), this.A15$26.negate(x._16()), this.A16$22.negate(x._17()), this.A17$18.negate(x._18()), this.A18$14.negate(x._19()), this.A19$10.negate(x._20()), this.A20$6.negate(x._21()), this.A21$2.negate(x._22()));
         }

         public {
            this.A0$86 = A0$86;
            this.A1$82 = A1$82;
            this.A2$78 = A2$78;
            this.A3$74 = A3$74;
            this.A4$70 = A4$70;
            this.A5$66 = A5$66;
            this.A6$62 = A6$62;
            this.A7$58 = A7$58;
            this.A8$54 = A8$54;
            this.A9$50 = A9$50;
            this.A10$46 = A10$46;
            this.A11$42 = A11$42;
            this.A12$38 = A12$38;
            this.A13$34 = A13$34;
            this.A14$30 = A14$30;
            this.A15$26 = A15$26;
            this.A16$22 = A16$22;
            this.A17$18 = A17$18;
            this.A18$14 = A18$14;
            this.A19$10 = A19$10;
            this.A20$6 = A20$6;
            this.A21$2 = A21$2;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            MultiplicativeMonoid.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
            Ring.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Rng tuple22Rng$(final TupleInstances $this, final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16, final Rng A17, final Rng A18, final Rng A19, final Rng A20, final Rng A21) {
      return $this.tuple22Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21);
   }

   default Rng tuple22Rng(final Rng A0, final Rng A1, final Rng A2, final Rng A3, final Rng A4, final Rng A5, final Rng A6, final Rng A7, final Rng A8, final Rng A9, final Rng A10, final Rng A11, final Rng A12, final Rng A13, final Rng A14, final Rng A15, final Rng A16, final Rng A17, final Rng A18, final Rng A19, final Rng A20, final Rng A21) {
      return new Rng(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) {
         private final Rng A0$87;
         private final Rng A1$83;
         private final Rng A2$79;
         private final Rng A3$75;
         private final Rng A4$71;
         private final Rng A5$67;
         private final Rng A6$63;
         private final Rng A7$59;
         private final Rng A8$55;
         private final Rng A9$51;
         private final Rng A10$47;
         private final Rng A11$43;
         private final Rng A12$39;
         private final Rng A13$35;
         private final Rng A14$31;
         private final Rng A15$27;
         private final Rng A16$23;
         private final Rng A17$19;
         private final Rng A18$15;
         private final Rng A19$11;
         private final Rng A20$7;
         private final Rng A21$3;

         public CommutativeGroup additive() {
            return AdditiveCommutativeGroup.additive$(this);
         }

         public CommutativeGroup additive$mcD$sp() {
            return AdditiveCommutativeGroup.additive$mcD$sp$(this);
         }

         public CommutativeGroup additive$mcF$sp() {
            return AdditiveCommutativeGroup.additive$mcF$sp$(this);
         }

         public CommutativeGroup additive$mcI$sp() {
            return AdditiveCommutativeGroup.additive$mcI$sp$(this);
         }

         public CommutativeGroup additive$mcJ$sp() {
            return AdditiveCommutativeGroup.additive$mcJ$sp$(this);
         }

         public double negate$mcD$sp(final double x) {
            return AdditiveGroup.negate$mcD$sp$(this, x);
         }

         public float negate$mcF$sp(final float x) {
            return AdditiveGroup.negate$mcF$sp$(this, x);
         }

         public int negate$mcI$sp(final int x) {
            return AdditiveGroup.negate$mcI$sp$(this, x);
         }

         public long negate$mcJ$sp(final long x) {
            return AdditiveGroup.negate$mcJ$sp$(this, x);
         }

         public Object minus(final Object x, final Object y) {
            return AdditiveGroup.minus$(this, x, y);
         }

         public double minus$mcD$sp(final double x, final double y) {
            return AdditiveGroup.minus$mcD$sp$(this, x, y);
         }

         public float minus$mcF$sp(final float x, final float y) {
            return AdditiveGroup.minus$mcF$sp$(this, x, y);
         }

         public int minus$mcI$sp(final int x, final int y) {
            return AdditiveGroup.minus$mcI$sp$(this, x, y);
         }

         public long minus$mcJ$sp(final long x, final long y) {
            return AdditiveGroup.minus$mcJ$sp$(this, x, y);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveGroup.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveGroup.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveGroup.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveGroup.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveGroup.sumN$mcJ$sp$(this, a, n);
         }

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple22 plus(final Tuple22 x, final Tuple22 y) {
            return new Tuple22(this.A0$87.plus(x._1(), y._1()), this.A1$83.plus(x._2(), y._2()), this.A2$79.plus(x._3(), y._3()), this.A3$75.plus(x._4(), y._4()), this.A4$71.plus(x._5(), y._5()), this.A5$67.plus(x._6(), y._6()), this.A6$63.plus(x._7(), y._7()), this.A7$59.plus(x._8(), y._8()), this.A8$55.plus(x._9(), y._9()), this.A9$51.plus(x._10(), y._10()), this.A10$47.plus(x._11(), y._11()), this.A11$43.plus(x._12(), y._12()), this.A12$39.plus(x._13(), y._13()), this.A13$35.plus(x._14(), y._14()), this.A14$31.plus(x._15(), y._15()), this.A15$27.plus(x._16(), y._16()), this.A16$23.plus(x._17(), y._17()), this.A17$19.plus(x._18(), y._18()), this.A18$15.plus(x._19(), y._19()), this.A19$11.plus(x._20(), y._20()), this.A20$7.plus(x._21(), y._21()), this.A21$3.plus(x._22(), y._22()));
         }

         public Tuple22 times(final Tuple22 x, final Tuple22 y) {
            return new Tuple22(this.A0$87.times(x._1(), y._1()), this.A1$83.times(x._2(), y._2()), this.A2$79.times(x._3(), y._3()), this.A3$75.times(x._4(), y._4()), this.A4$71.times(x._5(), y._5()), this.A5$67.times(x._6(), y._6()), this.A6$63.times(x._7(), y._7()), this.A7$59.times(x._8(), y._8()), this.A8$55.times(x._9(), y._9()), this.A9$51.times(x._10(), y._10()), this.A10$47.times(x._11(), y._11()), this.A11$43.times(x._12(), y._12()), this.A12$39.times(x._13(), y._13()), this.A13$35.times(x._14(), y._14()), this.A14$31.times(x._15(), y._15()), this.A15$27.times(x._16(), y._16()), this.A16$23.times(x._17(), y._17()), this.A17$19.times(x._18(), y._18()), this.A18$15.times(x._19(), y._19()), this.A19$11.times(x._20(), y._20()), this.A20$7.times(x._21(), y._21()), this.A21$3.times(x._22(), y._22()));
         }

         public Tuple22 zero() {
            return new Tuple22(this.A0$87.zero(), this.A1$83.zero(), this.A2$79.zero(), this.A3$75.zero(), this.A4$71.zero(), this.A5$67.zero(), this.A6$63.zero(), this.A7$59.zero(), this.A8$55.zero(), this.A9$51.zero(), this.A10$47.zero(), this.A11$43.zero(), this.A12$39.zero(), this.A13$35.zero(), this.A14$31.zero(), this.A15$27.zero(), this.A16$23.zero(), this.A17$19.zero(), this.A18$15.zero(), this.A19$11.zero(), this.A20$7.zero(), this.A21$3.zero());
         }

         public Tuple22 negate(final Tuple22 x) {
            return new Tuple22(this.A0$87.negate(x._1()), this.A1$83.negate(x._2()), this.A2$79.negate(x._3()), this.A3$75.negate(x._4()), this.A4$71.negate(x._5()), this.A5$67.negate(x._6()), this.A6$63.negate(x._7()), this.A7$59.negate(x._8()), this.A8$55.negate(x._9()), this.A9$51.negate(x._10()), this.A10$47.negate(x._11()), this.A11$43.negate(x._12()), this.A12$39.negate(x._13()), this.A13$35.negate(x._14()), this.A14$31.negate(x._15()), this.A15$27.negate(x._16()), this.A16$23.negate(x._17()), this.A17$19.negate(x._18()), this.A18$15.negate(x._19()), this.A19$11.negate(x._20()), this.A20$7.negate(x._21()), this.A21$3.negate(x._22()));
         }

         public {
            this.A0$87 = A0$87;
            this.A1$83 = A1$83;
            this.A2$79 = A2$79;
            this.A3$75 = A3$75;
            this.A4$71 = A4$71;
            this.A5$67 = A5$67;
            this.A6$63 = A6$63;
            this.A7$59 = A7$59;
            this.A8$55 = A8$55;
            this.A9$51 = A9$51;
            this.A10$47 = A10$47;
            this.A11$43 = A11$43;
            this.A12$39 = A12$39;
            this.A13$35 = A13$35;
            this.A14$31 = A14$31;
            this.A15$27 = A15$27;
            this.A16$23 = A16$23;
            this.A17$19 = A17$19;
            this.A18$15 = A18$15;
            this.A19$11 = A19$11;
            this.A20$7 = A20$7;
            this.A21$3 = A21$3;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
            AdditiveGroup.$init$(this);
            AdditiveCommutativeGroup.$init$(this);
         }
      };
   }

   // $FF: synthetic method
   static Semiring tuple22Semiring$(final TupleInstances $this, final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16, final Semiring A17, final Semiring A18, final Semiring A19, final Semiring A20, final Semiring A21) {
      return $this.tuple22Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21);
   }

   default Semiring tuple22Semiring(final Semiring A0, final Semiring A1, final Semiring A2, final Semiring A3, final Semiring A4, final Semiring A5, final Semiring A6, final Semiring A7, final Semiring A8, final Semiring A9, final Semiring A10, final Semiring A11, final Semiring A12, final Semiring A13, final Semiring A14, final Semiring A15, final Semiring A16, final Semiring A17, final Semiring A18, final Semiring A19, final Semiring A20, final Semiring A21) {
      return new Semiring(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) {
         private final Semiring A0$88;
         private final Semiring A1$84;
         private final Semiring A2$80;
         private final Semiring A3$76;
         private final Semiring A4$72;
         private final Semiring A5$68;
         private final Semiring A6$64;
         private final Semiring A7$60;
         private final Semiring A8$56;
         private final Semiring A9$52;
         private final Semiring A10$48;
         private final Semiring A11$44;
         private final Semiring A12$40;
         private final Semiring A13$36;
         private final Semiring A14$32;
         private final Semiring A15$28;
         private final Semiring A16$24;
         private final Semiring A17$20;
         private final Semiring A18$16;
         private final Semiring A19$12;
         private final Semiring A20$8;
         private final Semiring A21$4;

         public Semigroup multiplicative() {
            return MultiplicativeSemigroup.multiplicative$(this);
         }

         public Semigroup multiplicative$mcD$sp() {
            return MultiplicativeSemigroup.multiplicative$mcD$sp$(this);
         }

         public Semigroup multiplicative$mcF$sp() {
            return MultiplicativeSemigroup.multiplicative$mcF$sp$(this);
         }

         public Semigroup multiplicative$mcI$sp() {
            return MultiplicativeSemigroup.multiplicative$mcI$sp$(this);
         }

         public Semigroup multiplicative$mcJ$sp() {
            return MultiplicativeSemigroup.multiplicative$mcJ$sp$(this);
         }

         public double times$mcD$sp(final double x, final double y) {
            return MultiplicativeSemigroup.times$mcD$sp$(this, x, y);
         }

         public float times$mcF$sp(final float x, final float y) {
            return MultiplicativeSemigroup.times$mcF$sp$(this, x, y);
         }

         public int times$mcI$sp(final int x, final int y) {
            return MultiplicativeSemigroup.times$mcI$sp$(this, x, y);
         }

         public long times$mcJ$sp(final long x, final long y) {
            return MultiplicativeSemigroup.times$mcJ$sp$(this, x, y);
         }

         public Object pow(final Object a, final int n) {
            return MultiplicativeSemigroup.pow$(this, a, n);
         }

         public double pow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.pow$mcD$sp$(this, a, n);
         }

         public float pow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.pow$mcF$sp$(this, a, n);
         }

         public int pow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.pow$mcI$sp$(this, a, n);
         }

         public long pow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.pow$mcJ$sp$(this, a, n);
         }

         public Object positivePow(final Object a, final int n) {
            return MultiplicativeSemigroup.positivePow$(this, a, n);
         }

         public double positivePow$mcD$sp(final double a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcD$sp$(this, a, n);
         }

         public float positivePow$mcF$sp(final float a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcF$sp$(this, a, n);
         }

         public int positivePow$mcI$sp(final int a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcI$sp$(this, a, n);
         }

         public long positivePow$mcJ$sp(final long a, final int n) {
            return MultiplicativeSemigroup.positivePow$mcJ$sp$(this, a, n);
         }

         public Option tryProduct(final IterableOnce as) {
            return MultiplicativeSemigroup.tryProduct$(this, as);
         }

         public CommutativeMonoid additive() {
            return AdditiveCommutativeMonoid.additive$(this);
         }

         public CommutativeMonoid additive$mcD$sp() {
            return AdditiveCommutativeMonoid.additive$mcD$sp$(this);
         }

         public CommutativeMonoid additive$mcF$sp() {
            return AdditiveCommutativeMonoid.additive$mcF$sp$(this);
         }

         public CommutativeMonoid additive$mcI$sp() {
            return AdditiveCommutativeMonoid.additive$mcI$sp$(this);
         }

         public CommutativeMonoid additive$mcJ$sp() {
            return AdditiveCommutativeMonoid.additive$mcJ$sp$(this);
         }

         public double zero$mcD$sp() {
            return AdditiveMonoid.zero$mcD$sp$(this);
         }

         public float zero$mcF$sp() {
            return AdditiveMonoid.zero$mcF$sp$(this);
         }

         public int zero$mcI$sp() {
            return AdditiveMonoid.zero$mcI$sp$(this);
         }

         public long zero$mcJ$sp() {
            return AdditiveMonoid.zero$mcJ$sp$(this);
         }

         public boolean isZero(final Object a, final Eq ev) {
            return AdditiveMonoid.isZero$(this, a, ev);
         }

         public boolean isZero$mcD$sp(final double a, final Eq ev) {
            return AdditiveMonoid.isZero$mcD$sp$(this, a, ev);
         }

         public boolean isZero$mcF$sp(final float a, final Eq ev) {
            return AdditiveMonoid.isZero$mcF$sp$(this, a, ev);
         }

         public boolean isZero$mcI$sp(final int a, final Eq ev) {
            return AdditiveMonoid.isZero$mcI$sp$(this, a, ev);
         }

         public boolean isZero$mcJ$sp(final long a, final Eq ev) {
            return AdditiveMonoid.isZero$mcJ$sp$(this, a, ev);
         }

         public Object sumN(final Object a, final int n) {
            return AdditiveMonoid.sumN$(this, a, n);
         }

         public double sumN$mcD$sp(final double a, final int n) {
            return AdditiveMonoid.sumN$mcD$sp$(this, a, n);
         }

         public float sumN$mcF$sp(final float a, final int n) {
            return AdditiveMonoid.sumN$mcF$sp$(this, a, n);
         }

         public int sumN$mcI$sp(final int a, final int n) {
            return AdditiveMonoid.sumN$mcI$sp$(this, a, n);
         }

         public long sumN$mcJ$sp(final long a, final int n) {
            return AdditiveMonoid.sumN$mcJ$sp$(this, a, n);
         }

         public Object sum(final IterableOnce as) {
            return AdditiveMonoid.sum$(this, as);
         }

         public double sum$mcD$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcD$sp$(this, as);
         }

         public float sum$mcF$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcF$sp$(this, as);
         }

         public int sum$mcI$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcI$sp$(this, as);
         }

         public long sum$mcJ$sp(final IterableOnce as) {
            return AdditiveMonoid.sum$mcJ$sp$(this, as);
         }

         public Option trySum(final IterableOnce as) {
            return AdditiveMonoid.trySum$(this, as);
         }

         public double plus$mcD$sp(final double x, final double y) {
            return AdditiveSemigroup.plus$mcD$sp$(this, x, y);
         }

         public float plus$mcF$sp(final float x, final float y) {
            return AdditiveSemigroup.plus$mcF$sp$(this, x, y);
         }

         public int plus$mcI$sp(final int x, final int y) {
            return AdditiveSemigroup.plus$mcI$sp$(this, x, y);
         }

         public long plus$mcJ$sp(final long x, final long y) {
            return AdditiveSemigroup.plus$mcJ$sp$(this, x, y);
         }

         public Object positiveSumN(final Object a, final int n) {
            return AdditiveSemigroup.positiveSumN$(this, a, n);
         }

         public double positiveSumN$mcD$sp(final double a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcD$sp$(this, a, n);
         }

         public float positiveSumN$mcF$sp(final float a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcF$sp$(this, a, n);
         }

         public int positiveSumN$mcI$sp(final int a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcI$sp$(this, a, n);
         }

         public long positiveSumN$mcJ$sp(final long a, final int n) {
            return AdditiveSemigroup.positiveSumN$mcJ$sp$(this, a, n);
         }

         public Tuple22 plus(final Tuple22 x, final Tuple22 y) {
            return new Tuple22(this.A0$88.plus(x._1(), y._1()), this.A1$84.plus(x._2(), y._2()), this.A2$80.plus(x._3(), y._3()), this.A3$76.plus(x._4(), y._4()), this.A4$72.plus(x._5(), y._5()), this.A5$68.plus(x._6(), y._6()), this.A6$64.plus(x._7(), y._7()), this.A7$60.plus(x._8(), y._8()), this.A8$56.plus(x._9(), y._9()), this.A9$52.plus(x._10(), y._10()), this.A10$48.plus(x._11(), y._11()), this.A11$44.plus(x._12(), y._12()), this.A12$40.plus(x._13(), y._13()), this.A13$36.plus(x._14(), y._14()), this.A14$32.plus(x._15(), y._15()), this.A15$28.plus(x._16(), y._16()), this.A16$24.plus(x._17(), y._17()), this.A17$20.plus(x._18(), y._18()), this.A18$16.plus(x._19(), y._19()), this.A19$12.plus(x._20(), y._20()), this.A20$8.plus(x._21(), y._21()), this.A21$4.plus(x._22(), y._22()));
         }

         public Tuple22 times(final Tuple22 x, final Tuple22 y) {
            return new Tuple22(this.A0$88.times(x._1(), y._1()), this.A1$84.times(x._2(), y._2()), this.A2$80.times(x._3(), y._3()), this.A3$76.times(x._4(), y._4()), this.A4$72.times(x._5(), y._5()), this.A5$68.times(x._6(), y._6()), this.A6$64.times(x._7(), y._7()), this.A7$60.times(x._8(), y._8()), this.A8$56.times(x._9(), y._9()), this.A9$52.times(x._10(), y._10()), this.A10$48.times(x._11(), y._11()), this.A11$44.times(x._12(), y._12()), this.A12$40.times(x._13(), y._13()), this.A13$36.times(x._14(), y._14()), this.A14$32.times(x._15(), y._15()), this.A15$28.times(x._16(), y._16()), this.A16$24.times(x._17(), y._17()), this.A17$20.times(x._18(), y._18()), this.A18$16.times(x._19(), y._19()), this.A19$12.times(x._20(), y._20()), this.A20$8.times(x._21(), y._21()), this.A21$4.times(x._22(), y._22()));
         }

         public Tuple22 zero() {
            return new Tuple22(this.A0$88.zero(), this.A1$84.zero(), this.A2$80.zero(), this.A3$76.zero(), this.A4$72.zero(), this.A5$68.zero(), this.A6$64.zero(), this.A7$60.zero(), this.A8$56.zero(), this.A9$52.zero(), this.A10$48.zero(), this.A11$44.zero(), this.A12$40.zero(), this.A13$36.zero(), this.A14$32.zero(), this.A15$28.zero(), this.A16$24.zero(), this.A17$20.zero(), this.A18$16.zero(), this.A19$12.zero(), this.A20$8.zero(), this.A21$4.zero());
         }

         public {
            this.A0$88 = A0$88;
            this.A1$84 = A1$84;
            this.A2$80 = A2$80;
            this.A3$76 = A3$76;
            this.A4$72 = A4$72;
            this.A5$68 = A5$68;
            this.A6$64 = A6$64;
            this.A7$60 = A7$60;
            this.A8$56 = A8$56;
            this.A9$52 = A9$52;
            this.A10$48 = A10$48;
            this.A11$44 = A11$44;
            this.A12$40 = A12$40;
            this.A13$36 = A13$36;
            this.A14$32 = A14$32;
            this.A15$28 = A15$28;
            this.A16$24 = A16$24;
            this.A17$20 = A17$20;
            this.A18$16 = A18$16;
            this.A19$12 = A19$12;
            this.A20$8 = A20$8;
            this.A21$4 = A21$4;
            AdditiveSemigroup.$init$(this);
            AdditiveMonoid.$init$(this);
            AdditiveCommutativeSemigroup.$init$(this);
            AdditiveCommutativeMonoid.$init$(this);
            MultiplicativeSemigroup.$init$(this);
         }
      };
   }

   static void $init$(final TupleInstances $this) {
   }
}
