package org.datanucleus.store.rdbms.datasource.dbcp.cpdsadapter;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import org.datanucleus.store.rdbms.datasource.dbcp.DelegatingConnection;
import org.datanucleus.store.rdbms.datasource.dbcp.DelegatingPreparedStatement;

class ConnectionImpl extends DelegatingConnection {
   private final boolean accessToUnderlyingConnectionAllowed;
   private final PooledConnectionImpl pooledConnection;

   ConnectionImpl(PooledConnectionImpl pooledConnection, Connection connection, boolean accessToUnderlyingConnectionAllowed) {
      super(connection);
      this.pooledConnection = pooledConnection;
      this.accessToUnderlyingConnectionAllowed = accessToUnderlyingConnectionAllowed;
   }

   public void close() throws SQLException {
      if (!this._closed) {
         this._closed = true;
         this.passivate();
         this.pooledConnection.notifyListeners();
      }

   }

   public PreparedStatement prepareStatement(String sql) throws SQLException {
      this.checkOpen();

      try {
         return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql));
      } catch (SQLException e) {
         this.handleException(e);
         return null;
      }
   }

   public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
      this.checkOpen();

      try {
         return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql, resultSetType, resultSetConcurrency));
      } catch (SQLException e) {
         this.handleException(e);
         return null;
      }
   }

   public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
      this.checkOpen();

      try {
         return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
      } catch (SQLException e) {
         this.handleException(e);
         return null;
      }
   }

   public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
      this.checkOpen();

      try {
         return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql, autoGeneratedKeys));
      } catch (SQLException e) {
         this.handleException(e);
         return null;
      }
   }

   public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
      this.checkOpen();

      try {
         return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql, columnIndexes));
      } catch (SQLException e) {
         this.handleException(e);
         return null;
      }
   }

   public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
      this.checkOpen();

      try {
         return new DelegatingPreparedStatement(this, this.pooledConnection.prepareStatement(sql, columnNames));
      } catch (SQLException e) {
         this.handleException(e);
         return null;
      }
   }

   public boolean isAccessToUnderlyingConnectionAllowed() {
      return this.accessToUnderlyingConnectionAllowed;
   }

   public Connection getDelegate() {
      return this.isAccessToUnderlyingConnectionAllowed() ? this.getDelegateInternal() : null;
   }

   public Connection getInnermostDelegate() {
      return this.isAccessToUnderlyingConnectionAllowed() ? super.getInnermostDelegateInternal() : null;
   }
}
