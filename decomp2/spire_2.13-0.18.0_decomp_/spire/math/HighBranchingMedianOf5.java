package spire.math;

import cats.kernel.Order;
import scala.reflect.ScalaSignature;
import scala.runtime.BoxedUnit;
import scala.runtime.ScalaRunTime.;

@ScalaSignature(
   bytes = "\u0006\u0005\u00193qa\u0001\u0003\u0011\u0002\u0007\u0005\u0011\u0002C\u0003\u0011\u0001\u0011\u0005\u0011\u0003C\u0003\u0016\u0001\u0011\u0015aC\u0001\fIS\u001eD'I]1oG\"LgnZ'fI&\fgn\u001446\u0015\t)a!\u0001\u0003nCRD'\"A\u0004\u0002\u000bM\u0004\u0018N]3\u0004\u0001M\u0011\u0001A\u0003\t\u0003\u00179i\u0011\u0001\u0004\u0006\u0002\u001b\u0005)1oY1mC&\u0011q\u0002\u0004\u0002\u0007\u0003:L(+\u001a4\u0002\r\u0011Jg.\u001b;%)\u0005\u0011\u0002CA\u0006\u0014\u0013\t!BB\u0001\u0003V]&$\u0018aA7pkU\u0011q#\f\u000b\u00051izD\t\u0006\u0002\u00133!)!D\u0001a\u00027\u0005\tq\u000eE\u0002\u001dQ-r!!H\u0013\u000f\u0005y\u0019cBA\u0010#\u001b\u0005\u0001#BA\u0011\t\u0003\u0019a$o\\8u}%\tq!\u0003\u0002%\r\u00059\u0011\r\\4fEJ\f\u0017B\u0001\u0014(\u0003\u001d\u0001\u0018mY6bO\u0016T!\u0001\n\u0004\n\u0005%R#!B(sI\u0016\u0014(B\u0001\u0014(!\taS\u0006\u0004\u0001\u0005\u00139\u0012\u0001\u0015!A\u0001\u0006\u0004y#!A!\u0012\u0005A\u001a\u0004CA\u00062\u0013\t\u0011DBA\u0004O_RD\u0017N\\4\u0011\u0005-!\u0014BA\u001b\r\u0005\r\te.\u001f\u0015\u0003[]\u0002\"a\u0003\u001d\n\u0005eb!aC:qK\u000eL\u0017\r\\5{K\u0012DQa\u000f\u0002A\u0002q\nA\u0001Z1uCB\u00191\"P\u0016\n\u0005yb!!B!se\u0006L\b\"\u0002!\u0003\u0001\u0004\t\u0015AB8gMN,G\u000f\u0005\u0002\f\u0005&\u00111\t\u0004\u0002\u0004\u0013:$\b\"B#\u0003\u0001\u0004\t\u0015AB:ue&$W\r"
)
public interface HighBranchingMedianOf5 {
   // $FF: synthetic method
   static void mo5$(final HighBranchingMedianOf5 $this, final Object data, final int offset, final int stride, final Order o) {
      $this.mo5(data, offset, stride, o);
   }

   default void mo5(final Object data, final int offset, final int stride, final Order o) {
      Object ai1 = .MODULE$.array_apply(data, offset);
      Object ai2 = .MODULE$.array_apply(data, offset + stride);
      Object ai3 = .MODULE$.array_apply(data, offset + 2 * stride);
      Object ai4 = .MODULE$.array_apply(data, offset + 3 * stride);
      Object ai5 = .MODULE$.array_apply(data, offset + 4 * stride);
      int i = o.lt(ai1, ai2) ? (o.lt(ai3, ai4) ? (o.lt(ai2, ai4) ? (o.lt(ai3, ai5) ? (o.lt(ai2, ai5) ? (o.lt(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt(ai2, ai3) ? (o.lt(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride))) : (o.lt(ai1, ai5) ? (o.lt(ai5, ai4) ? (o.lt(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride)) : (o.lt(ai1, ai4) ? (o.lt(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt(ai2, ai3) ? (o.lt(ai4, ai5) ? (o.lt(ai2, ai5) ? (o.lt(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt(ai2, ai4) ? (o.lt(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride))) : (o.lt(ai1, ai5) ? (o.lt(ai5, ai3) ? (o.lt(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride)) : (o.lt(ai1, ai3) ? (o.lt(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride))))) : (o.lt(ai3, ai4) ? (o.lt(ai1, ai4) ? (o.lt(ai3, ai5) ? (o.lt(ai1, ai5) ? (o.lt(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt(ai1, ai3) ? (o.lt(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride))) : (o.lt(ai2, ai5) ? (o.lt(ai5, ai4) ? (o.lt(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride)) : (o.lt(ai2, ai4) ? (o.lt(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt(ai1, ai3) ? (o.lt(ai4, ai5) ? (o.lt(ai1, ai5) ? (o.lt(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt(ai1, ai4) ? (o.lt(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride))) : (o.lt(ai2, ai5) ? (o.lt(ai5, ai3) ? (o.lt(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride)) : (o.lt(ai2, ai3) ? (o.lt(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride)))));
      Object m = .MODULE$.array_apply(data, i);
      .MODULE$.array_update(data, i, .MODULE$.array_apply(data, offset));
      .MODULE$.array_update(data, offset, m);
   }

   // $FF: synthetic method
   static void mo5$mZc$sp$(final HighBranchingMedianOf5 $this, final boolean[] data, final int offset, final int stride, final Order o) {
      $this.mo5$mZc$sp(data, offset, stride, o);
   }

   default void mo5$mZc$sp(final boolean[] data, final int offset, final int stride, final Order o) {
      boolean ai1 = data[offset];
      boolean ai2 = data[offset + stride];
      boolean ai3 = data[offset + 2 * stride];
      boolean ai4 = data[offset + 3 * stride];
      boolean ai5 = data[offset + 4 * stride];
      int i = o.lt$mcZ$sp(ai1, ai2) ? (o.lt$mcZ$sp(ai3, ai4) ? (o.lt$mcZ$sp(ai2, ai4) ? (o.lt$mcZ$sp(ai3, ai5) ? (o.lt$mcZ$sp(ai2, ai5) ? (o.lt$mcZ$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcZ$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcZ$sp(ai2, ai3) ? (o.lt$mcZ$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcZ$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride))) : (o.lt$mcZ$sp(ai1, ai5) ? (o.lt$mcZ$sp(ai5, ai4) ? (o.lt$mcZ$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcZ$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride)) : (o.lt$mcZ$sp(ai1, ai4) ? (o.lt$mcZ$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcZ$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcZ$sp(ai2, ai3) ? (o.lt$mcZ$sp(ai4, ai5) ? (o.lt$mcZ$sp(ai2, ai5) ? (o.lt$mcZ$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcZ$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcZ$sp(ai2, ai4) ? (o.lt$mcZ$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcZ$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride))) : (o.lt$mcZ$sp(ai1, ai5) ? (o.lt$mcZ$sp(ai5, ai3) ? (o.lt$mcZ$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcZ$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride)) : (o.lt$mcZ$sp(ai1, ai3) ? (o.lt$mcZ$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcZ$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride))))) : (o.lt$mcZ$sp(ai3, ai4) ? (o.lt$mcZ$sp(ai1, ai4) ? (o.lt$mcZ$sp(ai3, ai5) ? (o.lt$mcZ$sp(ai1, ai5) ? (o.lt$mcZ$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcZ$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcZ$sp(ai1, ai3) ? (o.lt$mcZ$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcZ$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride))) : (o.lt$mcZ$sp(ai2, ai5) ? (o.lt$mcZ$sp(ai5, ai4) ? (o.lt$mcZ$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcZ$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride)) : (o.lt$mcZ$sp(ai2, ai4) ? (o.lt$mcZ$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcZ$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcZ$sp(ai1, ai3) ? (o.lt$mcZ$sp(ai4, ai5) ? (o.lt$mcZ$sp(ai1, ai5) ? (o.lt$mcZ$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcZ$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcZ$sp(ai1, ai4) ? (o.lt$mcZ$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcZ$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride))) : (o.lt$mcZ$sp(ai2, ai5) ? (o.lt$mcZ$sp(ai5, ai3) ? (o.lt$mcZ$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcZ$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride)) : (o.lt$mcZ$sp(ai2, ai3) ? (o.lt$mcZ$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcZ$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride)))));
      boolean m = data[i];
      data[i] = data[offset];
      data[offset] = m;
   }

   // $FF: synthetic method
   static void mo5$mBc$sp$(final HighBranchingMedianOf5 $this, final byte[] data, final int offset, final int stride, final Order o) {
      $this.mo5$mBc$sp(data, offset, stride, o);
   }

   default void mo5$mBc$sp(final byte[] data, final int offset, final int stride, final Order o) {
      byte ai1 = data[offset];
      byte ai2 = data[offset + stride];
      byte ai3 = data[offset + 2 * stride];
      byte ai4 = data[offset + 3 * stride];
      byte ai5 = data[offset + 4 * stride];
      int i = o.lt$mcB$sp(ai1, ai2) ? (o.lt$mcB$sp(ai3, ai4) ? (o.lt$mcB$sp(ai2, ai4) ? (o.lt$mcB$sp(ai3, ai5) ? (o.lt$mcB$sp(ai2, ai5) ? (o.lt$mcB$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcB$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcB$sp(ai2, ai3) ? (o.lt$mcB$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcB$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride))) : (o.lt$mcB$sp(ai1, ai5) ? (o.lt$mcB$sp(ai5, ai4) ? (o.lt$mcB$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcB$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride)) : (o.lt$mcB$sp(ai1, ai4) ? (o.lt$mcB$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcB$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcB$sp(ai2, ai3) ? (o.lt$mcB$sp(ai4, ai5) ? (o.lt$mcB$sp(ai2, ai5) ? (o.lt$mcB$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcB$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcB$sp(ai2, ai4) ? (o.lt$mcB$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcB$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride))) : (o.lt$mcB$sp(ai1, ai5) ? (o.lt$mcB$sp(ai5, ai3) ? (o.lt$mcB$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcB$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride)) : (o.lt$mcB$sp(ai1, ai3) ? (o.lt$mcB$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcB$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride))))) : (o.lt$mcB$sp(ai3, ai4) ? (o.lt$mcB$sp(ai1, ai4) ? (o.lt$mcB$sp(ai3, ai5) ? (o.lt$mcB$sp(ai1, ai5) ? (o.lt$mcB$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcB$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcB$sp(ai1, ai3) ? (o.lt$mcB$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcB$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride))) : (o.lt$mcB$sp(ai2, ai5) ? (o.lt$mcB$sp(ai5, ai4) ? (o.lt$mcB$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcB$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride)) : (o.lt$mcB$sp(ai2, ai4) ? (o.lt$mcB$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcB$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcB$sp(ai1, ai3) ? (o.lt$mcB$sp(ai4, ai5) ? (o.lt$mcB$sp(ai1, ai5) ? (o.lt$mcB$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcB$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcB$sp(ai1, ai4) ? (o.lt$mcB$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcB$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride))) : (o.lt$mcB$sp(ai2, ai5) ? (o.lt$mcB$sp(ai5, ai3) ? (o.lt$mcB$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcB$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride)) : (o.lt$mcB$sp(ai2, ai3) ? (o.lt$mcB$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcB$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride)))));
      byte m = data[i];
      data[i] = data[offset];
      data[offset] = m;
   }

   // $FF: synthetic method
   static void mo5$mCc$sp$(final HighBranchingMedianOf5 $this, final char[] data, final int offset, final int stride, final Order o) {
      $this.mo5$mCc$sp(data, offset, stride, o);
   }

   default void mo5$mCc$sp(final char[] data, final int offset, final int stride, final Order o) {
      char ai1 = data[offset];
      char ai2 = data[offset + stride];
      char ai3 = data[offset + 2 * stride];
      char ai4 = data[offset + 3 * stride];
      char ai5 = data[offset + 4 * stride];
      int i = o.lt$mcC$sp(ai1, ai2) ? (o.lt$mcC$sp(ai3, ai4) ? (o.lt$mcC$sp(ai2, ai4) ? (o.lt$mcC$sp(ai3, ai5) ? (o.lt$mcC$sp(ai2, ai5) ? (o.lt$mcC$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcC$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcC$sp(ai2, ai3) ? (o.lt$mcC$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcC$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride))) : (o.lt$mcC$sp(ai1, ai5) ? (o.lt$mcC$sp(ai5, ai4) ? (o.lt$mcC$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcC$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride)) : (o.lt$mcC$sp(ai1, ai4) ? (o.lt$mcC$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcC$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcC$sp(ai2, ai3) ? (o.lt$mcC$sp(ai4, ai5) ? (o.lt$mcC$sp(ai2, ai5) ? (o.lt$mcC$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcC$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcC$sp(ai2, ai4) ? (o.lt$mcC$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcC$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride))) : (o.lt$mcC$sp(ai1, ai5) ? (o.lt$mcC$sp(ai5, ai3) ? (o.lt$mcC$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcC$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride)) : (o.lt$mcC$sp(ai1, ai3) ? (o.lt$mcC$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcC$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride))))) : (o.lt$mcC$sp(ai3, ai4) ? (o.lt$mcC$sp(ai1, ai4) ? (o.lt$mcC$sp(ai3, ai5) ? (o.lt$mcC$sp(ai1, ai5) ? (o.lt$mcC$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcC$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcC$sp(ai1, ai3) ? (o.lt$mcC$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcC$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride))) : (o.lt$mcC$sp(ai2, ai5) ? (o.lt$mcC$sp(ai5, ai4) ? (o.lt$mcC$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcC$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride)) : (o.lt$mcC$sp(ai2, ai4) ? (o.lt$mcC$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcC$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcC$sp(ai1, ai3) ? (o.lt$mcC$sp(ai4, ai5) ? (o.lt$mcC$sp(ai1, ai5) ? (o.lt$mcC$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcC$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcC$sp(ai1, ai4) ? (o.lt$mcC$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcC$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride))) : (o.lt$mcC$sp(ai2, ai5) ? (o.lt$mcC$sp(ai5, ai3) ? (o.lt$mcC$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcC$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride)) : (o.lt$mcC$sp(ai2, ai3) ? (o.lt$mcC$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcC$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride)))));
      char m = data[i];
      data[i] = data[offset];
      data[offset] = m;
   }

   // $FF: synthetic method
   static void mo5$mDc$sp$(final HighBranchingMedianOf5 $this, final double[] data, final int offset, final int stride, final Order o) {
      $this.mo5$mDc$sp(data, offset, stride, o);
   }

   default void mo5$mDc$sp(final double[] data, final int offset, final int stride, final Order o) {
      double ai1 = data[offset];
      double ai2 = data[offset + stride];
      double ai3 = data[offset + 2 * stride];
      double ai4 = data[offset + 3 * stride];
      double ai5 = data[offset + 4 * stride];
      int i = o.lt$mcD$sp(ai1, ai2) ? (o.lt$mcD$sp(ai3, ai4) ? (o.lt$mcD$sp(ai2, ai4) ? (o.lt$mcD$sp(ai3, ai5) ? (o.lt$mcD$sp(ai2, ai5) ? (o.lt$mcD$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcD$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcD$sp(ai2, ai3) ? (o.lt$mcD$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcD$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride))) : (o.lt$mcD$sp(ai1, ai5) ? (o.lt$mcD$sp(ai5, ai4) ? (o.lt$mcD$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcD$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride)) : (o.lt$mcD$sp(ai1, ai4) ? (o.lt$mcD$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcD$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcD$sp(ai2, ai3) ? (o.lt$mcD$sp(ai4, ai5) ? (o.lt$mcD$sp(ai2, ai5) ? (o.lt$mcD$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcD$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcD$sp(ai2, ai4) ? (o.lt$mcD$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcD$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride))) : (o.lt$mcD$sp(ai1, ai5) ? (o.lt$mcD$sp(ai5, ai3) ? (o.lt$mcD$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcD$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride)) : (o.lt$mcD$sp(ai1, ai3) ? (o.lt$mcD$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcD$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride))))) : (o.lt$mcD$sp(ai3, ai4) ? (o.lt$mcD$sp(ai1, ai4) ? (o.lt$mcD$sp(ai3, ai5) ? (o.lt$mcD$sp(ai1, ai5) ? (o.lt$mcD$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcD$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcD$sp(ai1, ai3) ? (o.lt$mcD$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcD$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride))) : (o.lt$mcD$sp(ai2, ai5) ? (o.lt$mcD$sp(ai5, ai4) ? (o.lt$mcD$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcD$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride)) : (o.lt$mcD$sp(ai2, ai4) ? (o.lt$mcD$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcD$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcD$sp(ai1, ai3) ? (o.lt$mcD$sp(ai4, ai5) ? (o.lt$mcD$sp(ai1, ai5) ? (o.lt$mcD$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcD$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcD$sp(ai1, ai4) ? (o.lt$mcD$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcD$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride))) : (o.lt$mcD$sp(ai2, ai5) ? (o.lt$mcD$sp(ai5, ai3) ? (o.lt$mcD$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcD$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride)) : (o.lt$mcD$sp(ai2, ai3) ? (o.lt$mcD$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcD$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride)))));
      double m = data[i];
      data[i] = data[offset];
      data[offset] = m;
   }

   // $FF: synthetic method
   static void mo5$mFc$sp$(final HighBranchingMedianOf5 $this, final float[] data, final int offset, final int stride, final Order o) {
      $this.mo5$mFc$sp(data, offset, stride, o);
   }

   default void mo5$mFc$sp(final float[] data, final int offset, final int stride, final Order o) {
      float ai1 = data[offset];
      float ai2 = data[offset + stride];
      float ai3 = data[offset + 2 * stride];
      float ai4 = data[offset + 3 * stride];
      float ai5 = data[offset + 4 * stride];
      int i = o.lt$mcF$sp(ai1, ai2) ? (o.lt$mcF$sp(ai3, ai4) ? (o.lt$mcF$sp(ai2, ai4) ? (o.lt$mcF$sp(ai3, ai5) ? (o.lt$mcF$sp(ai2, ai5) ? (o.lt$mcF$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcF$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcF$sp(ai2, ai3) ? (o.lt$mcF$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcF$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride))) : (o.lt$mcF$sp(ai1, ai5) ? (o.lt$mcF$sp(ai5, ai4) ? (o.lt$mcF$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcF$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride)) : (o.lt$mcF$sp(ai1, ai4) ? (o.lt$mcF$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcF$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcF$sp(ai2, ai3) ? (o.lt$mcF$sp(ai4, ai5) ? (o.lt$mcF$sp(ai2, ai5) ? (o.lt$mcF$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcF$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcF$sp(ai2, ai4) ? (o.lt$mcF$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcF$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride))) : (o.lt$mcF$sp(ai1, ai5) ? (o.lt$mcF$sp(ai5, ai3) ? (o.lt$mcF$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcF$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride)) : (o.lt$mcF$sp(ai1, ai3) ? (o.lt$mcF$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcF$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride))))) : (o.lt$mcF$sp(ai3, ai4) ? (o.lt$mcF$sp(ai1, ai4) ? (o.lt$mcF$sp(ai3, ai5) ? (o.lt$mcF$sp(ai1, ai5) ? (o.lt$mcF$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcF$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcF$sp(ai1, ai3) ? (o.lt$mcF$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcF$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride))) : (o.lt$mcF$sp(ai2, ai5) ? (o.lt$mcF$sp(ai5, ai4) ? (o.lt$mcF$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcF$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride)) : (o.lt$mcF$sp(ai2, ai4) ? (o.lt$mcF$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcF$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcF$sp(ai1, ai3) ? (o.lt$mcF$sp(ai4, ai5) ? (o.lt$mcF$sp(ai1, ai5) ? (o.lt$mcF$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcF$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcF$sp(ai1, ai4) ? (o.lt$mcF$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcF$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride))) : (o.lt$mcF$sp(ai2, ai5) ? (o.lt$mcF$sp(ai5, ai3) ? (o.lt$mcF$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcF$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride)) : (o.lt$mcF$sp(ai2, ai3) ? (o.lt$mcF$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcF$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride)))));
      float m = data[i];
      data[i] = data[offset];
      data[offset] = m;
   }

   // $FF: synthetic method
   static void mo5$mIc$sp$(final HighBranchingMedianOf5 $this, final int[] data, final int offset, final int stride, final Order o) {
      $this.mo5$mIc$sp(data, offset, stride, o);
   }

   default void mo5$mIc$sp(final int[] data, final int offset, final int stride, final Order o) {
      int ai1 = data[offset];
      int ai2 = data[offset + stride];
      int ai3 = data[offset + 2 * stride];
      int ai4 = data[offset + 3 * stride];
      int ai5 = data[offset + 4 * stride];
      int i = o.lt$mcI$sp(ai1, ai2) ? (o.lt$mcI$sp(ai3, ai4) ? (o.lt$mcI$sp(ai2, ai4) ? (o.lt$mcI$sp(ai3, ai5) ? (o.lt$mcI$sp(ai2, ai5) ? (o.lt$mcI$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcI$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcI$sp(ai2, ai3) ? (o.lt$mcI$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcI$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride))) : (o.lt$mcI$sp(ai1, ai5) ? (o.lt$mcI$sp(ai5, ai4) ? (o.lt$mcI$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcI$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride)) : (o.lt$mcI$sp(ai1, ai4) ? (o.lt$mcI$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcI$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcI$sp(ai2, ai3) ? (o.lt$mcI$sp(ai4, ai5) ? (o.lt$mcI$sp(ai2, ai5) ? (o.lt$mcI$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcI$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcI$sp(ai2, ai4) ? (o.lt$mcI$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcI$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride))) : (o.lt$mcI$sp(ai1, ai5) ? (o.lt$mcI$sp(ai5, ai3) ? (o.lt$mcI$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcI$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride)) : (o.lt$mcI$sp(ai1, ai3) ? (o.lt$mcI$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcI$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride))))) : (o.lt$mcI$sp(ai3, ai4) ? (o.lt$mcI$sp(ai1, ai4) ? (o.lt$mcI$sp(ai3, ai5) ? (o.lt$mcI$sp(ai1, ai5) ? (o.lt$mcI$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcI$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcI$sp(ai1, ai3) ? (o.lt$mcI$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcI$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride))) : (o.lt$mcI$sp(ai2, ai5) ? (o.lt$mcI$sp(ai5, ai4) ? (o.lt$mcI$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcI$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride)) : (o.lt$mcI$sp(ai2, ai4) ? (o.lt$mcI$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcI$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcI$sp(ai1, ai3) ? (o.lt$mcI$sp(ai4, ai5) ? (o.lt$mcI$sp(ai1, ai5) ? (o.lt$mcI$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcI$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcI$sp(ai1, ai4) ? (o.lt$mcI$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcI$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride))) : (o.lt$mcI$sp(ai2, ai5) ? (o.lt$mcI$sp(ai5, ai3) ? (o.lt$mcI$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcI$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride)) : (o.lt$mcI$sp(ai2, ai3) ? (o.lt$mcI$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcI$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride)))));
      int m = data[i];
      data[i] = data[offset];
      data[offset] = m;
   }

   // $FF: synthetic method
   static void mo5$mJc$sp$(final HighBranchingMedianOf5 $this, final long[] data, final int offset, final int stride, final Order o) {
      $this.mo5$mJc$sp(data, offset, stride, o);
   }

   default void mo5$mJc$sp(final long[] data, final int offset, final int stride, final Order o) {
      long ai1 = data[offset];
      long ai2 = data[offset + stride];
      long ai3 = data[offset + 2 * stride];
      long ai4 = data[offset + 3 * stride];
      long ai5 = data[offset + 4 * stride];
      int i = o.lt$mcJ$sp(ai1, ai2) ? (o.lt$mcJ$sp(ai3, ai4) ? (o.lt$mcJ$sp(ai2, ai4) ? (o.lt$mcJ$sp(ai3, ai5) ? (o.lt$mcJ$sp(ai2, ai5) ? (o.lt$mcJ$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcJ$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcJ$sp(ai2, ai3) ? (o.lt$mcJ$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcJ$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride))) : (o.lt$mcJ$sp(ai1, ai5) ? (o.lt$mcJ$sp(ai5, ai4) ? (o.lt$mcJ$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcJ$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride)) : (o.lt$mcJ$sp(ai1, ai4) ? (o.lt$mcJ$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcJ$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcJ$sp(ai2, ai3) ? (o.lt$mcJ$sp(ai4, ai5) ? (o.lt$mcJ$sp(ai2, ai5) ? (o.lt$mcJ$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcJ$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcJ$sp(ai2, ai4) ? (o.lt$mcJ$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcJ$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride))) : (o.lt$mcJ$sp(ai1, ai5) ? (o.lt$mcJ$sp(ai5, ai3) ? (o.lt$mcJ$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcJ$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride)) : (o.lt$mcJ$sp(ai1, ai3) ? (o.lt$mcJ$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcJ$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride))))) : (o.lt$mcJ$sp(ai3, ai4) ? (o.lt$mcJ$sp(ai1, ai4) ? (o.lt$mcJ$sp(ai3, ai5) ? (o.lt$mcJ$sp(ai1, ai5) ? (o.lt$mcJ$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcJ$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcJ$sp(ai1, ai3) ? (o.lt$mcJ$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcJ$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride))) : (o.lt$mcJ$sp(ai2, ai5) ? (o.lt$mcJ$sp(ai5, ai4) ? (o.lt$mcJ$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcJ$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride)) : (o.lt$mcJ$sp(ai2, ai4) ? (o.lt$mcJ$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcJ$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcJ$sp(ai1, ai3) ? (o.lt$mcJ$sp(ai4, ai5) ? (o.lt$mcJ$sp(ai1, ai5) ? (o.lt$mcJ$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcJ$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcJ$sp(ai1, ai4) ? (o.lt$mcJ$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcJ$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride))) : (o.lt$mcJ$sp(ai2, ai5) ? (o.lt$mcJ$sp(ai5, ai3) ? (o.lt$mcJ$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcJ$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride)) : (o.lt$mcJ$sp(ai2, ai3) ? (o.lt$mcJ$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcJ$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride)))));
      long m = data[i];
      data[i] = data[offset];
      data[offset] = m;
   }

   // $FF: synthetic method
   static void mo5$mSc$sp$(final HighBranchingMedianOf5 $this, final short[] data, final int offset, final int stride, final Order o) {
      $this.mo5$mSc$sp(data, offset, stride, o);
   }

   default void mo5$mSc$sp(final short[] data, final int offset, final int stride, final Order o) {
      short ai1 = data[offset];
      short ai2 = data[offset + stride];
      short ai3 = data[offset + 2 * stride];
      short ai4 = data[offset + 3 * stride];
      short ai5 = data[offset + 4 * stride];
      int i = o.lt$mcS$sp(ai1, ai2) ? (o.lt$mcS$sp(ai3, ai4) ? (o.lt$mcS$sp(ai2, ai4) ? (o.lt$mcS$sp(ai3, ai5) ? (o.lt$mcS$sp(ai2, ai5) ? (o.lt$mcS$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcS$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcS$sp(ai2, ai3) ? (o.lt$mcS$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcS$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride))) : (o.lt$mcS$sp(ai1, ai5) ? (o.lt$mcS$sp(ai5, ai4) ? (o.lt$mcS$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcS$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride)) : (o.lt$mcS$sp(ai1, ai4) ? (o.lt$mcS$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcS$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcS$sp(ai2, ai3) ? (o.lt$mcS$sp(ai4, ai5) ? (o.lt$mcS$sp(ai2, ai5) ? (o.lt$mcS$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcS$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcS$sp(ai2, ai4) ? (o.lt$mcS$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcS$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride))) : (o.lt$mcS$sp(ai1, ai5) ? (o.lt$mcS$sp(ai5, ai3) ? (o.lt$mcS$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcS$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride)) : (o.lt$mcS$sp(ai1, ai3) ? (o.lt$mcS$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcS$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride))))) : (o.lt$mcS$sp(ai3, ai4) ? (o.lt$mcS$sp(ai1, ai4) ? (o.lt$mcS$sp(ai3, ai5) ? (o.lt$mcS$sp(ai1, ai5) ? (o.lt$mcS$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcS$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcS$sp(ai1, ai3) ? (o.lt$mcS$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcS$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride))) : (o.lt$mcS$sp(ai2, ai5) ? (o.lt$mcS$sp(ai5, ai4) ? (o.lt$mcS$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcS$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride)) : (o.lt$mcS$sp(ai2, ai4) ? (o.lt$mcS$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcS$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcS$sp(ai1, ai3) ? (o.lt$mcS$sp(ai4, ai5) ? (o.lt$mcS$sp(ai1, ai5) ? (o.lt$mcS$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcS$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcS$sp(ai1, ai4) ? (o.lt$mcS$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcS$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride))) : (o.lt$mcS$sp(ai2, ai5) ? (o.lt$mcS$sp(ai5, ai3) ? (o.lt$mcS$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcS$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride)) : (o.lt$mcS$sp(ai2, ai3) ? (o.lt$mcS$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcS$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride)))));
      short m = data[i];
      data[i] = data[offset];
      data[offset] = m;
   }

   // $FF: synthetic method
   static void mo5$mVc$sp$(final HighBranchingMedianOf5 $this, final BoxedUnit[] data, final int offset, final int stride, final Order o) {
      $this.mo5$mVc$sp(data, offset, stride, o);
   }

   default void mo5$mVc$sp(final BoxedUnit[] data, final int offset, final int stride, final Order o) {
      BoxedUnit ai1 = data[offset];
      BoxedUnit ai2 = data[offset + stride];
      BoxedUnit ai3 = data[offset + 2 * stride];
      BoxedUnit ai4 = data[offset + 3 * stride];
      BoxedUnit ai5 = data[offset + 4 * stride];
      int i = o.lt$mcV$sp(ai1, ai2) ? (o.lt$mcV$sp(ai3, ai4) ? (o.lt$mcV$sp(ai2, ai4) ? (o.lt$mcV$sp(ai3, ai5) ? (o.lt$mcV$sp(ai2, ai5) ? (o.lt$mcV$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcV$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcV$sp(ai2, ai3) ? (o.lt$mcV$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcV$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride))) : (o.lt$mcV$sp(ai1, ai5) ? (o.lt$mcV$sp(ai5, ai4) ? (o.lt$mcV$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcV$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride)) : (o.lt$mcV$sp(ai1, ai4) ? (o.lt$mcV$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcV$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcV$sp(ai2, ai3) ? (o.lt$mcV$sp(ai4, ai5) ? (o.lt$mcV$sp(ai2, ai5) ? (o.lt$mcV$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcV$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride)) : (o.lt$mcV$sp(ai2, ai4) ? (o.lt$mcV$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride) : (o.lt$mcV$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride))) : (o.lt$mcV$sp(ai1, ai5) ? (o.lt$mcV$sp(ai5, ai3) ? (o.lt$mcV$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcV$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride)) : (o.lt$mcV$sp(ai1, ai3) ? (o.lt$mcV$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcV$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride))))) : (o.lt$mcV$sp(ai3, ai4) ? (o.lt$mcV$sp(ai1, ai4) ? (o.lt$mcV$sp(ai3, ai5) ? (o.lt$mcV$sp(ai1, ai5) ? (o.lt$mcV$sp(ai1, ai3) ? offset + 2 * stride : offset + 0 * stride) : (o.lt$mcV$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcV$sp(ai1, ai3) ? (o.lt$mcV$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcV$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride))) : (o.lt$mcV$sp(ai2, ai5) ? (o.lt$mcV$sp(ai5, ai4) ? (o.lt$mcV$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride) : (o.lt$mcV$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride)) : (o.lt$mcV$sp(ai2, ai4) ? (o.lt$mcV$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride) : (o.lt$mcV$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride)))) : (o.lt$mcV$sp(ai1, ai3) ? (o.lt$mcV$sp(ai4, ai5) ? (o.lt$mcV$sp(ai1, ai5) ? (o.lt$mcV$sp(ai1, ai4) ? offset + 3 * stride : offset + 0 * stride) : (o.lt$mcV$sp(ai2, ai5) ? offset + 4 * stride : offset + 1 * stride)) : (o.lt$mcV$sp(ai1, ai4) ? (o.lt$mcV$sp(ai1, ai5) ? offset + 4 * stride : offset + 0 * stride) : (o.lt$mcV$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride))) : (o.lt$mcV$sp(ai2, ai5) ? (o.lt$mcV$sp(ai5, ai3) ? (o.lt$mcV$sp(ai5, ai4) ? offset + 3 * stride : offset + 4 * stride) : (o.lt$mcV$sp(ai2, ai3) ? offset + 2 * stride : offset + 1 * stride)) : (o.lt$mcV$sp(ai2, ai3) ? (o.lt$mcV$sp(ai2, ai4) ? offset + 3 * stride : offset + 1 * stride) : (o.lt$mcV$sp(ai5, ai3) ? offset + 2 * stride : offset + 4 * stride)))));
      BoxedUnit m = data[i];
      data[i] = data[offset];
      data[offset] = m;
   }

   static void $init$(final HighBranchingMedianOf5 $this) {
   }
}
