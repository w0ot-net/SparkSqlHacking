package spire.macros;

import java.lang.invoke.SerializedLambda;
import scala.Function0;
import scala.Predef;
import scala.collection.immutable.;
import scala.collection.immutable.List;
import scala.collection.immutable.Nil;
import scala.reflect.ScalaSignature;
import scala.reflect.api.Exprs;
import scala.reflect.api.Mirror;
import scala.reflect.api.Names;
import scala.reflect.api.Symbols;
import scala.reflect.api.TreeCreator;
import scala.reflect.api.Trees;
import scala.reflect.api.TypeCreator;
import scala.reflect.api.TypeTags;
import scala.reflect.api.Types;
import scala.reflect.macros.Universe;
import scala.runtime.BoxedUnit;
import scala.runtime.BoxesRunTime;
import scala.runtime.ScalaRunTime;

@ScalaSignature(
   bytes = "\u0006\u0005\t]d!B\u000b\u0017\u0003\u0003Y\u0002\"\u0002\u0011\u0001\t\u0003\t\u0003\"B\u0012\u0001\r\u0003!\u0003\"B#\u0001\r\u00031\u0005\"\u0002(\u0001\r\u0003y\u0005\"B,\u0001\r\u0003A\u0006\"\u00021\u0001\r\u0003\t\u0007\"B5\u0001\r\u0003Q\u0007\"\u0002@\u0001\r\u0003y\bbBA\b\u0001\u0019\u0005\u0011\u0011\u0003\u0005\n\u0003[\u0001\u0011\u0013!C\u0001\u0003_Aq!a\u0013\u0001\r\u0003\ti\u0005C\u0004\u0002X\u00011\t!!\u0017\t\u000f\u0005\r\u0004\u0001\"\u0001\u0002f!9\u0011q\u0012\u0001\u0005\u0002\u0005E\u0005bBAZ\u0001\u0011\u0005\u0011Q\u0017\u0005\b\u0003#\u0004A\u0011AAj\u0011\u001d\t\t\u0010\u0001C\u0001\u0003gDqAa\b\u0001\t\u0003\u0011\t\u0003C\u0004\u0003H\u0001!\tA!\u0013\t\u000f\tu\u0003\u0001\"\u0001\u0003`\tY\u0011)\u001e;p\u00032<WM\u0019:b\u0015\t9\u0002$\u0001\u0004nC\u000e\u0014xn\u001d\u0006\u00023\u0005)1\u000f]5sK\u000e\u00011C\u0001\u0001\u001d!\tib$D\u0001\u0017\u0013\tybCA\u0004BkR|w\n]:\u0002\rqJg.\u001b;?)\u0005\u0011\u0003CA\u000f\u0001\u0003\u0011\u0001H.^:\u0016\u0005\u00152DC\u0001\u0014A!\r93\u0006\u000e\b\u0003Q%j\u0011\u0001A\u0005\u0003Uy\t\u0011aY\u0005\u0003Y5\u0012A!\u0012=qe&\u0011af\f\u0002\b\u00032L\u0017m]3t\u0015\t9\u0002G\u0003\u00022e\u00059!/\u001a4mK\u000e$(\"A\u001a\u0002\u000bM\u001c\u0017\r\\1\u0011\u0005U2D\u0002\u0001\u0003\u0006o\t\u0011\r\u0001\u000f\u0002\u0002\u0003F\u0011\u0011(\u0010\t\u0003umj\u0011AM\u0005\u0003yI\u0012qAT8uQ&tw\r\u0005\u0002;}%\u0011qH\r\u0002\u0004\u0003:L\bbB!\u0003\u0003\u0003\u0005\u001dAQ\u0001\u000bKZLG-\u001a8dK\u0012B\u0004cA\u0014Di%\u0011A)\f\u0002\f/\u0016\f7\u000eV=qKR\u000bw-A\u0003nS:,8/\u0006\u0002H\u0015R\u0011\u0001j\u0013\t\u0004O-J\u0005CA\u001bK\t\u001594A1\u00019\u0011\u001da5!!AA\u00045\u000b!\"\u001a<jI\u0016t7-\u001a\u0013:!\r93)S\u0001\u0006i&lWm]\u000b\u0003!N#\"!\u0015+\u0011\u0007\u001dZ#\u000b\u0005\u00026'\u0012)q\u0007\u0002b\u0001q!9Q\u000bBA\u0001\u0002\b1\u0016aC3wS\u0012,gnY3%cA\u00022aJ\"S\u0003\u0019qWmZ1uKV\u0011\u0011\f\u0018\u000b\u00035v\u00032aJ\u0016\\!\t)D\fB\u00038\u000b\t\u0007\u0001\bC\u0004_\u000b\u0005\u0005\t9A0\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$\u0013'\r\t\u0004O\r[\u0016a\u00013jmV\u0011!-\u001a\u000b\u0003G\u001a\u00042aJ\u0016e!\t)T\rB\u00038\r\t\u0007\u0001\bC\u0004h\r\u0005\u0005\t9\u00015\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$\u0013G\r\t\u0004O\r#\u0017!E3vG2LG-Z1o\rVt7\r^5p]V\u00111. \u000b\u0003Yf\u00042aJ\u0016n!\tqgO\u0004\u0002pi:\u0011\u0001o]\u0007\u0002c*\u0011!OG\u0001\u0007yI|w\u000e\u001e \n\u0003MJ!!\u001e\u001a\u0002\u000fA\f7m[1hK&\u0011q\u000f\u001f\u0002\u0007\u0005&<\u0017J\u001c;\u000b\u0005U\u0014\u0004b\u0002>\b\u0003\u0003\u0005\u001da_\u0001\fKZLG-\u001a8dK\u0012\n4\u0007E\u0002(\u0007r\u0004\"!N?\u0005\u000b]:!\u0019\u0001\u001d\u0002\tE,x\u000e^\u000b\u0005\u0003\u0003\t9\u0001\u0006\u0003\u0002\u0004\u0005%\u0001\u0003B\u0014,\u0003\u000b\u00012!NA\u0004\t\u00159\u0004B1\u00019\u0011%\tY\u0001CA\u0001\u0002\b\ti!A\u0006fm&$WM\\2fIE\"\u0004\u0003B\u0014D\u0003\u000b\t1!\\8e+\u0011\t\u0019\"a\u0007\u0015\t\u0005U\u00111\u0005\u000b\u0005\u0003/\ti\u0002\u0005\u0003(W\u0005e\u0001cA\u001b\u0002\u001c\u0011)q'\u0003b\u0001q!I\u0011qD\u0005\u0002\u0002\u0003\u000f\u0011\u0011E\u0001\fKZLG-\u001a8dK\u0012\nT\u0007\u0005\u0003(\u0007\u0006e\u0001\"CA\u0013\u0013A%\t\u0019AA\u0014\u0003\u0011\u0019H/\u001e2\u0011\u000bi\nI#a\u0006\n\u0007\u0005-\"G\u0001\u0005=Eft\u0017-\\3?\u00035iw\u000e\u001a\u0013eK\u001a\fW\u000f\u001c;%cU!\u0011\u0011GA%+\t\t\u0019D\u000b\u0003\u00026\u0005]\u0002cA\u0014,s-\u0012\u0011\u0011\b\t\u0005\u0003w\t)%\u0004\u0002\u0002>)!\u0011qHA!\u0003%)hn\u00195fG.,GMC\u0002\u0002DI\n!\"\u00198o_R\fG/[8o\u0013\u0011\t9%!\u0010\u0003#Ut7\r[3dW\u0016$g+\u0019:jC:\u001cW\rB\u00038\u0015\t\u0007\u0001(\u0001\u0004fcV\fGn]\u000b\u0003\u0003\u001f\u0002BaJ\u0016\u0002RA\u0019!(a\u0015\n\u0007\u0005U#GA\u0004C_>dW-\u00198\u0002\u000f\r|W\u000e]1sKV\u0011\u00111\f\t\u0005O-\ni\u0006E\u0002;\u0003?J1!!\u00193\u0005\rIe\u000e^\u0001\t'\u0016l\u0017N]5oOV!\u0011qMAD)\t\tI\u0007\u0006\u0003\u0002l\u0005%\u0005\u0003B\u0014,\u0003[\u0002b!a\u001c\u0002\u0000\u0005\u0015e\u0002BA9\u0003wrA!a\u001d\u0002x9\u0019\u0001/!\u001e\n\u0003eI1!!\u001f\u0019\u0003\u001d\tGnZ3ce\u0006L1!^A?\u0015\r\tI\bG\u0005\u0005\u0003\u0003\u000b\u0019I\u0001\u0005TK6L'/\u001b8h\u0015\r)\u0018Q\u0010\t\u0004k\u0005\u001dE!B\u001c\u000e\u0005\u0004A\u0004\"CAF\u001b\u0005\u0005\t9AAG\u0003-)g/\u001b3f]\u000e,G%\r\u001c\u0011\t\u001d\u001a\u0015QQ\u0001\u0004%&<W\u0003BAJ\u0003C#b!!&\u0002*\u0006=F\u0003BAL\u0003G\u0003BaJ\u0016\u0002\u001aB1\u0011qNAN\u0003?KA!!(\u0002\u0004\n\u0019!+[4\u0011\u0007U\n\t\u000bB\u00038\u001d\t\u0007\u0001\bC\u0005\u0002&:\t\t\u0011q\u0001\u0002(\u0006YQM^5eK:\u001cW\rJ\u00198!\u001193)a(\t\u000f\u0005-f\u00021\u0001\u0002.\u0006\t!\u0010\u0005\u0003(W\u0005}\u0005bBAY\u001d\u0001\u0007\u0011QV\u0001\u0002_\u0006\u0019!K\\4\u0016\t\u0005]\u0016Q\u0019\u000b\u0005\u0003s\u000bi\r\u0006\u0003\u0002<\u0006\u001d\u0007\u0003B\u0014,\u0003{\u0003b!a\u001c\u0002@\u0006\r\u0017\u0002BAa\u0003\u0007\u00131A\u00158h!\r)\u0014Q\u0019\u0003\u0006o=\u0011\r\u0001\u000f\u0005\n\u0003\u0013|\u0011\u0011!a\u0002\u0003\u0017\f1\"\u001a<jI\u0016t7-\u001a\u00132qA!qeQAb\u0011\u001d\tYk\u0004a\u0001\u0003\u001f\u0004BaJ\u0016\u0002D\u0006!!+\u001b8h+\u0011\t).a9\u0015\r\u0005]\u00171^Ax)\u0011\tI.!:\u0011\t\u001dZ\u00131\u001c\t\u0007\u0003_\ni.!9\n\t\u0005}\u00171\u0011\u0002\u0005%&tw\rE\u00026\u0003G$Qa\u000e\tC\u0002aB\u0011\"a:\u0011\u0003\u0003\u0005\u001d!!;\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$\u0013'\u000f\t\u0005O\r\u000b\t\u000fC\u0004\u0002,B\u0001\r!!<\u0011\t\u001dZ\u0013\u0011\u001d\u0005\b\u0003c\u0003\u0002\u0019AAw\u00035)Uo\u00197jI\u0016\fgNU5oOV!\u0011Q\u001fB\u0003)\u0019\t9P!\u0007\u0003\u001eQ!\u0011\u0011 B\u0007)\u0011\tYPa\u0002\u0011\t\u001dZ\u0013Q \t\u0007\u0003_\nyPa\u0001\n\t\t\u0005\u00111\u0011\u0002\u000e\u000bV\u001cG.\u001b3fC:\u0014\u0016N\\4\u0011\u0007U\u0012)\u0001B\u00038#\t\u0007\u0001\bC\u0005\u0003\nE\t\t\u0011q\u0001\u0003\f\u0005YQM^5eK:\u001cW\r\n\u001a1!\u001193Ia\u0001\t\u000f\t=\u0011\u00031\u0001\u0003\u0012\u0005\u0011QM\u001e\t\u0005O-\u0012\u0019\u0002\u0005\u0004\u0002p\tU!1A\u0005\u0005\u0005/\t\u0019I\u0001\u0002Fc\"9\u00111V\tA\u0002\tm\u0001\u0003B\u0014,\u0005\u0007Aq!!-\u0012\u0001\u0004\u0011Y\"A\u0003GS\u0016dG-\u0006\u0003\u0003$\tMBC\u0002B\u0013\u0005\u0003\u0012)\u0005\u0006\u0003\u0003(\tmB\u0003\u0002B\u0015\u0005k\u0001BaJ\u0016\u0003,A1\u0011q\u000eB\u0017\u0005cIAAa\f\u0002\u0004\n)a)[3mIB\u0019QGa\r\u0005\u000b]\u0012\"\u0019\u0001\u001d\t\u0013\t]\"#!AA\u0004\te\u0012aC3wS\u0012,gnY3%eE\u0002BaJ\"\u00032!9!q\u0002\nA\u0002\tu\u0002\u0003B\u0014,\u0005\u007f\u0001b!a\u001c\u0003\u0016\tE\u0002bBAV%\u0001\u0007!1\t\t\u0005O-\u0012\t\u0004C\u0004\u00022J\u0001\rAa\u0011\u0002\u0005\u0015\u000bX\u0003\u0002B&\u0005+\"\"A!\u0014\u0015\t\t=#q\u000b\t\u0005O-\u0012\t\u0006\u0005\u0004\u0002p\tU!1\u000b\t\u0004k\tUC!B\u001c\u0014\u0005\u0004A\u0004\"\u0003B-'\u0005\u0005\t9\u0001B.\u0003-)g/\u001b3f]\u000e,GE\r\u001a\u0011\t\u001d\u001a%1K\u0001\u0006\u001fJ$WM]\u000b\u0005\u0005C\u0012y\u0007\u0006\u0002\u0003dQ!!Q\rB9!\u001193Fa\u001a\u0011\r\u0005=$\u0011\u000eB7\u0013\u0011\u0011Y'a!\u0003\u000b=\u0013H-\u001a:\u0011\u0007U\u0012y\u0007B\u00038)\t\u0007\u0001\bC\u0005\u0003tQ\t\t\u0011q\u0001\u0003v\u0005YQM^5eK:\u001cW\r\n\u001a4!\u001193I!\u001c"
)
public abstract class AutoAlgebra extends AutoOps {
   public abstract Exprs.Expr plus(final TypeTags.WeakTypeTag evidence$8);

   public abstract Exprs.Expr minus(final TypeTags.WeakTypeTag evidence$9);

   public abstract Exprs.Expr times(final TypeTags.WeakTypeTag evidence$10);

   public abstract Exprs.Expr negate(final TypeTags.WeakTypeTag evidence$11);

   public abstract Exprs.Expr div(final TypeTags.WeakTypeTag evidence$12);

   public abstract Exprs.Expr euclideanFunction(final TypeTags.WeakTypeTag evidence$13);

   public abstract Exprs.Expr quot(final TypeTags.WeakTypeTag evidence$14);

   public abstract Exprs.Expr mod(final Function0 stub, final TypeTags.WeakTypeTag evidence$15);

   public Exprs.Expr mod$default$1() {
      return this.failedSearch("mod", "%");
   }

   public abstract Exprs.Expr equals();

   public abstract Exprs.Expr compare();

   public Exprs.Expr Semiring(final TypeTags.WeakTypeTag evidence$16) {
      Universe $u = this.c().universe();
      Mirror $m = this.c().universe().rootMirror();

      final class $treecreator1$1 extends TreeCreator {
         // $FF: synthetic field
         private final AutoAlgebra $outer;
         private final TypeTags.WeakTypeTag evidence$16$1;

         public Trees.TreeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            return $u.Block().apply((List)(new .colon.colon($u.ClassDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(32L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TypeName().apply("$anon"), scala.collection.immutable.Nil..MODULE$, $u.Template().apply((List)(new .colon.colon($u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Semiring")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$16$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.noSelfType(), (List)(new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("<init>"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon(scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$)), $u.TypeTree().apply(), $u.Block().apply((List)(new .colon.colon($u.Apply().apply($u.Select().apply($u.Super().apply($u.This().apply($u.TypeName().apply("")), $u.TypeName().apply("")), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$), scala.collection.immutable.Nil..MODULE$)), $u.Literal().apply($u.Constant().apply(BoxedUnit.UNIT)))), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("plus"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$16$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$16$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$16$1.in($m$untyped).tpe()), this.$outer.plus(this.evidence$16$1).in($m$untyped).tree()), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("times"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$16$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$16$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$16$1.in($m$untyped).tpe()), this.$outer.times(this.evidence$16$1).in($m$untyped).tree()), scala.collection.immutable.Nil..MODULE$)))))), scala.collection.immutable.Nil..MODULE$)), $u.Apply().apply($u.Select().apply($u.New().apply($u.Ident().apply((Names.NameApi)$u.TypeName().apply("$anon"))), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$));
         }

         public $treecreator1$1(final TypeTags.WeakTypeTag evidence$16$1) {
            if (AutoAlgebra.this == null) {
               throw null;
            } else {
               this.$outer = AutoAlgebra.this;
               this.evidence$16$1 = evidence$16$1;
               super();
            }
         }
      }


      final class $typecreator2$1 extends TypeCreator {
         private final TypeTags.WeakTypeTag evidence$16$1;

         public Types.TypeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            Symbols.SymbolApi symdef$$lessrefinement$greater1 = $u.internal().reificationSupport().newNestedSymbol($u.internal().reificationSupport().selectTerm($m$untyped.staticClass("spire.macros.AutoAlgebra"), "Semiring"), (Names.NameApi)$u.TypeName().apply("<refinement>"), $u.NoPosition(), $u.internal().reificationSupport().FlagsRepr().apply(0L), true);
            $u.internal().reificationSupport().setInfo(symdef$$lessrefinement$greater1, (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Semiring"), (List)(new .colon.colon(this.evidence$16$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1));
            return (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Semiring"), (List)(new .colon.colon(this.evidence$16$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1);
         }

         public $typecreator2$1(final TypeTags.WeakTypeTag evidence$16$1) {
            this.evidence$16$1 = evidence$16$1;
         }
      }

      return $u.Expr().apply($m, new $treecreator1$1(evidence$16), $u.WeakTypeTag().apply($m, new $typecreator2$1(evidence$16)));
   }

   public Exprs.Expr Rig(final Exprs.Expr z, final Exprs.Expr o, final TypeTags.WeakTypeTag evidence$17) {
      Universe $u = this.c().universe();
      Mirror $m = this.c().universe().rootMirror();

      final class $treecreator1$2 extends TreeCreator {
         // $FF: synthetic field
         private final AutoAlgebra $outer;
         private final TypeTags.WeakTypeTag evidence$17$1;
         private final Exprs.Expr z$12;
         private final Exprs.Expr o$9;

         public Trees.TreeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            return $u.Block().apply((List)(new .colon.colon($u.ClassDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(32L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TypeName().apply("$anon"), scala.collection.immutable.Nil..MODULE$, $u.Template().apply((List)(new .colon.colon($u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Rig")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$17$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.noSelfType(), (List)(new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("<init>"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon(scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$)), $u.TypeTree().apply(), $u.Block().apply((List)(new .colon.colon($u.Apply().apply($u.Select().apply($u.Super().apply($u.This().apply($u.TypeName().apply("")), $u.TypeName().apply("")), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$), scala.collection.immutable.Nil..MODULE$)), $u.Literal().apply($u.Constant().apply(BoxedUnit.UNIT)))), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("zero"), scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$, $u.internal().reificationSupport().mkTypeTree(this.evidence$17$1.in($m$untyped).tpe()), this.z$12.in($m$untyped).tree()), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("one"), scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$, $u.internal().reificationSupport().mkTypeTree(this.evidence$17$1.in($m$untyped).tpe()), this.o$9.in($m$untyped).tree()), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("plus"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new Trees.ValDefApi[]{$u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$17$1.in($m$untyped).tpe()), $u.EmptyTree()), $u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$17$1.in($m$untyped).tpe()), $u.EmptyTree())}))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$17$1.in($m$untyped).tpe()), this.$outer.plus(this.evidence$17$1).in($m$untyped).tree()), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("times"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new Trees.ValDefApi[]{$u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$17$1.in($m$untyped).tpe()), $u.EmptyTree()), $u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$17$1.in($m$untyped).tpe()), $u.EmptyTree())}))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$17$1.in($m$untyped).tpe()), this.$outer.times(this.evidence$17$1).in($m$untyped).tree()), scala.collection.immutable.Nil..MODULE$)))))))), scala.collection.immutable.Nil..MODULE$)), $u.Apply().apply($u.Select().apply($u.New().apply($u.Ident().apply((Names.NameApi)$u.TypeName().apply("$anon"))), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$));
         }

         public $treecreator1$2(final TypeTags.WeakTypeTag evidence$17$1, final Exprs.Expr z$12, final Exprs.Expr o$9) {
            if (AutoAlgebra.this == null) {
               throw null;
            } else {
               this.$outer = AutoAlgebra.this;
               this.evidence$17$1 = evidence$17$1;
               this.z$12 = z$12;
               this.o$9 = o$9;
               super();
            }
         }
      }


      final class $typecreator2$2 extends TypeCreator {
         private final TypeTags.WeakTypeTag evidence$17$1;

         public Types.TypeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            Symbols.SymbolApi symdef$$lessrefinement$greater1 = $u.internal().reificationSupport().newNestedSymbol($u.internal().reificationSupport().selectTerm($m$untyped.staticClass("spire.macros.AutoAlgebra"), "Rig"), (Names.NameApi)$u.TypeName().apply("<refinement>"), $u.NoPosition(), $u.internal().reificationSupport().FlagsRepr().apply(0L), true);
            $u.internal().reificationSupport().setInfo(symdef$$lessrefinement$greater1, (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Rig"), (List)(new .colon.colon(this.evidence$17$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1));
            return (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Rig"), (List)(new .colon.colon(this.evidence$17$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1);
         }

         public $typecreator2$2(final TypeTags.WeakTypeTag evidence$17$1) {
            this.evidence$17$1 = evidence$17$1;
         }
      }

      return $u.Expr().apply($m, new $treecreator1$2(evidence$17, z, o), $u.WeakTypeTag().apply($m, new $typecreator2$2(evidence$17)));
   }

   public Exprs.Expr Rng(final Exprs.Expr z, final TypeTags.WeakTypeTag evidence$18) {
      Universe $u = this.c().universe();
      Mirror $m = this.c().universe().rootMirror();

      final class $treecreator1$3 extends TreeCreator {
         // $FF: synthetic field
         private final AutoAlgebra $outer;
         private final TypeTags.WeakTypeTag evidence$18$1;
         private final Exprs.Expr z$13;

         public Trees.TreeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            return $u.Block().apply((List)(new .colon.colon($u.ClassDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(32L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TypeName().apply("$anon"), scala.collection.immutable.Nil..MODULE$, $u.Template().apply((List)(new .colon.colon($u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Rng")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.noSelfType(), (List)(new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("<init>"), scala.collection.immutable.Nil..MODULE$, (List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new List[]{scala.collection.immutable.Nil..MODULE$}))), $u.TypeTree().apply(), $u.Block().apply((List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new Trees.ApplyApi[]{$u.Apply().apply($u.Select().apply($u.Super().apply($u.This().apply($u.TypeName().apply("")), $u.TypeName().apply("")), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$)}))), $u.Literal().apply($u.Constant().apply(BoxedUnit.UNIT)))), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("zero"), scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$, $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), this.z$13.in($m$untyped).tree()), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("plus"), scala.collection.immutable.Nil..MODULE$, (List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new List[]{(List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new Trees.ValDefApi[]{$u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), $u.EmptyTree()), $u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), $u.EmptyTree())})))}))), $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), this.$outer.plus(this.evidence$18$1).in($m$untyped).tree()), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("times"), scala.collection.immutable.Nil..MODULE$, (List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new List[]{(List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new Trees.ValDefApi[]{$u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), $u.EmptyTree()), $u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), $u.EmptyTree())})))}))), $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), this.$outer.times(this.evidence$18$1).in($m$untyped).tree()), new .colon.colon($u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("minus"), scala.collection.immutable.Nil..MODULE$, (List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new List[]{(List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new Trees.ValDefApi[]{$u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), $u.EmptyTree()), $u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), $u.EmptyTree())})))}))), $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), this.$outer.minus(this.evidence$18$1).in($m$untyped).tree()), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("negate"), scala.collection.immutable.Nil..MODULE$, (List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new List[]{(List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new Trees.ValDefApi[]{$u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), $u.EmptyTree())})))}))), $u.internal().reificationSupport().mkTypeTree(this.evidence$18$1.in($m$untyped).tpe()), this.$outer.negate(this.evidence$18$1).in($m$untyped).tree()), scala.collection.immutable.Nil..MODULE$))))))))), scala.collection.immutable.Nil..MODULE$)), $u.Apply().apply($u.Select().apply($u.New().apply($u.Ident().apply((Names.NameApi)$u.TypeName().apply("$anon"))), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$));
         }

         public $treecreator1$3(final TypeTags.WeakTypeTag evidence$18$1, final Exprs.Expr z$13) {
            if (AutoAlgebra.this == null) {
               throw null;
            } else {
               this.$outer = AutoAlgebra.this;
               this.evidence$18$1 = evidence$18$1;
               this.z$13 = z$13;
               super();
            }
         }
      }


      final class $typecreator2$3 extends TypeCreator {
         private final TypeTags.WeakTypeTag evidence$18$1;

         public Types.TypeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            Symbols.SymbolApi symdef$$lessrefinement$greater1 = $u.internal().reificationSupport().newNestedSymbol($u.internal().reificationSupport().selectTerm($m$untyped.staticClass("spire.macros.AutoAlgebra"), "Rng"), (Names.NameApi)$u.TypeName().apply("<refinement>"), $u.NoPosition(), $u.internal().reificationSupport().FlagsRepr().apply(0L), true);
            $u.internal().reificationSupport().setInfo(symdef$$lessrefinement$greater1, (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Rng"), (List)(new .colon.colon(this.evidence$18$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1));
            return (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Rng"), (List)(new .colon.colon(this.evidence$18$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1);
         }

         public $typecreator2$3(final TypeTags.WeakTypeTag evidence$18$1) {
            this.evidence$18$1 = evidence$18$1;
         }
      }

      return $u.Expr().apply($m, new $treecreator1$3(evidence$18, z), $u.WeakTypeTag().apply($m, new $typecreator2$3(evidence$18)));
   }

   public Exprs.Expr Ring(final Exprs.Expr z, final Exprs.Expr o, final TypeTags.WeakTypeTag evidence$19) {
      Universe $u = this.c().universe();
      Mirror $m = this.c().universe().rootMirror();

      final class $treecreator1$4 extends TreeCreator {
         // $FF: synthetic field
         private final AutoAlgebra $outer;
         private final TypeTags.WeakTypeTag evidence$19$1;
         private final Exprs.Expr z$14;
         private final Exprs.Expr o$10;

         public Trees.TreeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            return $u.Block().apply((List)(new .colon.colon($u.ClassDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(32L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TypeName().apply("$anon"), scala.collection.immutable.Nil..MODULE$, $u.Template().apply((List)(new .colon.colon($u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Ring")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.noSelfType(), (List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new Trees.DefDefApi[]{$u.DefDef().apply($u.NoMods(), $u.TermName().apply("<init>"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon(scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$)), $u.TypeTree().apply(), $u.Block().apply((List)(new .colon.colon($u.Apply().apply($u.Select().apply($u.Super().apply($u.This().apply($u.TypeName().apply("")), $u.TypeName().apply("")), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$), scala.collection.immutable.Nil..MODULE$)), $u.Literal().apply($u.Constant().apply(BoxedUnit.UNIT)))), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("zero"), scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$, $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), this.z$14.in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("one"), scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$, $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), this.o$10.in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("plus"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), this.$outer.plus(this.evidence$19$1).in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("times"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), this.$outer.times(this.evidence$19$1).in($m$untyped).tree()), $u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("minus"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), this.$outer.minus(this.evidence$19$1).in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("negate"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$)), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$19$1.in($m$untyped).tpe()), this.$outer.negate(this.evidence$19$1).in($m$untyped).tree())}))))), scala.collection.immutable.Nil..MODULE$)), $u.Apply().apply($u.Select().apply($u.New().apply($u.Ident().apply((Names.NameApi)$u.TypeName().apply("$anon"))), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$));
         }

         public $treecreator1$4(final TypeTags.WeakTypeTag evidence$19$1, final Exprs.Expr z$14, final Exprs.Expr o$10) {
            if (AutoAlgebra.this == null) {
               throw null;
            } else {
               this.$outer = AutoAlgebra.this;
               this.evidence$19$1 = evidence$19$1;
               this.z$14 = z$14;
               this.o$10 = o$10;
               super();
            }
         }
      }


      final class $typecreator2$4 extends TypeCreator {
         private final TypeTags.WeakTypeTag evidence$19$1;

         public Types.TypeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            Symbols.SymbolApi symdef$$lessrefinement$greater1 = $u.internal().reificationSupport().newNestedSymbol($u.internal().reificationSupport().selectTerm($m$untyped.staticClass("spire.macros.AutoAlgebra"), "Ring"), (Names.NameApi)$u.TypeName().apply("<refinement>"), $u.NoPosition(), $u.internal().reificationSupport().FlagsRepr().apply(0L), true);
            $u.internal().reificationSupport().setInfo(symdef$$lessrefinement$greater1, (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Ring"), (List)(new .colon.colon(this.evidence$19$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1));
            return (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Ring"), (List)(new .colon.colon(this.evidence$19$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1);
         }

         public $typecreator2$4(final TypeTags.WeakTypeTag evidence$19$1) {
            this.evidence$19$1 = evidence$19$1;
         }
      }

      return $u.Expr().apply($m, new $treecreator1$4(evidence$19, z, o), $u.WeakTypeTag().apply($m, new $typecreator2$4(evidence$19)));
   }

   public Exprs.Expr EuclideanRing(final Exprs.Expr z, final Exprs.Expr o, final Exprs.Expr ev, final TypeTags.WeakTypeTag evidence$20) {
      Universe $u = this.c().universe();
      Mirror $m = this.c().universe().rootMirror();

      final class $treecreator1$5 extends TreeCreator {
         // $FF: synthetic field
         private final AutoAlgebra $outer;
         private final TypeTags.WeakTypeTag evidence$20$1;
         private final Exprs.Expr z$15;
         private final Exprs.Expr o$11;

         public Trees.TreeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            Trees.BlockExtractor var10000 = $u.Block();
            Trees.ClassDefExtractor var10003 = $u.ClassDef();
            Trees.ModifiersApi var10004 = $u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(32L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$);
            Names.TypeNameApi var10005 = $u.TypeName().apply("$anon");
            Nil var10006 = scala.collection.immutable.Nil..MODULE$;
            Trees.TemplateExtractor var10007 = $u.Template();
            List var10008 = (List)(new .colon.colon($u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("EuclideanRing")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$));
            Trees.ValDefApi var10009 = $u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(4L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("self"), $u.TypeTree().apply(), $u.EmptyTree());
            List var10010 = scala.collection.immutable.List..MODULE$;
            ScalaRunTime var10011 = scala.runtime.ScalaRunTime..MODULE$;
            Trees.DefDefApi[] var10012 = new Trees.DefDefApi[]{$u.DefDef().apply($u.NoMods(), $u.TermName().apply("<init>"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon(scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$)), $u.TypeTree().apply(), $u.Block().apply((List)(new .colon.colon($u.Apply().apply($u.Select().apply($u.Super().apply($u.This().apply($u.TypeName().apply("")), $u.TypeName().apply("")), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$), scala.collection.immutable.Nil..MODULE$)), $u.Literal().apply($u.Constant().apply(BoxedUnit.UNIT)))), $u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(32L), (Names.NameApi)$u.TypeName().apply(""), (List)(new .colon.colon($u.Apply().apply($u.Select().apply($u.New().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.package")), (Names.NameApi)$u.TypeName().apply("tailrec"))), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$), scala.collection.immutable.Nil..MODULE$))), $u.TermName().apply("euclid"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("a"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("b"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8704L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("ev"), $u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Eq")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$)), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.If().apply($u.Apply().apply($u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("isZero")), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("b")), scala.collection.immutable.Nil..MODULE$))), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("ev")), scala.collection.immutable.Nil..MODULE$))), $u.Ident().apply((Names.NameApi)$u.TermName().apply("a")), $u.Apply().apply($u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("euclid")), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("b")), new .colon.colon($u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("emod")), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("a")), new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("b")), scala.collection.immutable.Nil..MODULE$)))), scala.collection.immutable.Nil..MODULE$)))), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("ev")), scala.collection.immutable.Nil..MODULE$))))), $u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("gcd"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("a"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("b"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8704L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("ev"), $u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Eq")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$)), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.Apply().apply($u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("euclid")), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("a")), new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("b")), scala.collection.immutable.Nil..MODULE$)))), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("ev")), scala.collection.immutable.Nil..MODULE$)))), $u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("lcm"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("a"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("b"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8704L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("ev"), $u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Eq")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$)), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.If().apply($u.Apply().apply($u.Select().apply($u.Apply().apply($u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("isZero")), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("a")), scala.collection.immutable.Nil..MODULE$))), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("ev")), scala.collection.immutable.Nil..MODULE$))), (Names.NameApi)$u.TermName().apply("$bar$bar")), (List)(new .colon.colon($u.Apply().apply($u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("isZero")), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("b")), scala.collection.immutable.Nil..MODULE$))), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("ev")), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("zero")), $u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("times")), (List)(new .colon.colon($u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("equot")), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("a")), new .colon.colon($u.Apply().apply($u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("gcd")), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("a")), new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("b")), scala.collection.immutable.Nil..MODULE$)))), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("ev")), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)))), new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("b")), scala.collection.immutable.Nil..MODULE$)))))), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("zero"), scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$, $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), this.z$15.in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("one"), scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$, $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), this.o$11.in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("plus"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), this.$outer.plus(this.evidence$20$1).in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("times"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), this.$outer.times(this.evidence$20$1).in($m$untyped).tree()), $u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("minus"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), this.$outer.minus(this.evidence$20$1).in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("negate"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$)), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), this.$outer.negate(this.evidence$20$1).in($m$untyped).tree()), null, null, null};
            Trees.DefDefExtractor var10015 = $u.DefDef();
            Trees.ModifiersApi var10016 = $u.NoMods();
            Names.TermNameApi var10017 = $u.TermName().apply("euclideanFunction");
            Nil var10018 = scala.collection.immutable.Nil..MODULE$;
            List var10019 = (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$)), scala.collection.immutable.Nil..MODULE$));
            Trees.SelectApi var10020 = $u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("scala.package")), (Names.NameApi)$u.TypeName().apply("BigInt"));
            AutoAlgebra var10021 = this.$outer;
            Predef var10022 = scala.Predef..MODULE$;
            Universe $u = this.$outer.c().universe();
            Mirror $m = this.$outer.c().universe().rootMirror();

            final class $typecreator3$1 extends TypeCreator {
               public Types.TypeApi apply(final Mirror $m$untyped) {
                  scala.reflect.api.Universe $u = $m$untyped.universe();
                  return $u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("scala")), $m$untyped.staticModule("scala.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("scala.package").asModule().moduleClass(), "BigInt"), scala.collection.immutable.Nil..MODULE$);
               }

               public $typecreator3$1() {
               }
            }

            var10012[10] = var10015.apply(var10016, var10017, var10018, var10019, var10020, var10021.euclideanFunction((TypeTags.WeakTypeTag)var10022.implicitly($u.TypeTag().apply($m, new $typecreator3$1()))).in($m$untyped).tree());
            var10012[11] = $u.DefDef().apply($u.NoMods(), $u.TermName().apply("equot"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), this.$outer.quot(this.evidence$20$1).in($m$untyped).tree());
            var10012[12] = $u.DefDef().apply($u.NoMods(), $u.TermName().apply("emod"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$20$1.in($m$untyped).tpe()), this.$outer.mod(() -> this.$outer.mod$default$1(), this.evidence$20$1).in($m$untyped).tree());
            return var10000.apply((List)(new .colon.colon(var10003.apply(var10004, var10005, var10006, var10007.apply(var10008, var10009, (List)var10010.apply(var10011.wrapRefArray((Object[])var10012)))), scala.collection.immutable.Nil..MODULE$)), $u.Apply().apply($u.Select().apply($u.New().apply($u.Ident().apply((Names.NameApi)$u.TypeName().apply("$anon"))), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$));
         }

         public $treecreator1$5(final TypeTags.WeakTypeTag evidence$20$1, final Exprs.Expr z$15, final Exprs.Expr o$11) {
            if (AutoAlgebra.this == null) {
               throw null;
            } else {
               this.$outer = AutoAlgebra.this;
               this.evidence$20$1 = evidence$20$1;
               this.z$15 = z$15;
               this.o$11 = o$11;
               super();
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      }


      final class $typecreator2$5 extends TypeCreator {
         private final TypeTags.WeakTypeTag evidence$20$1;

         public Types.TypeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            Symbols.SymbolApi symdef$$lessrefinement$greater1 = $u.internal().reificationSupport().newNestedSymbol($u.internal().reificationSupport().selectTerm($m$untyped.staticClass("spire.macros.AutoAlgebra"), "EuclideanRing"), (Names.NameApi)$u.TypeName().apply("<refinement>"), $u.NoPosition(), $u.internal().reificationSupport().FlagsRepr().apply(0L), true);
            $u.internal().reificationSupport().setInfo(symdef$$lessrefinement$greater1, (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "EuclideanRing"), (List)(new .colon.colon(this.evidence$20$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1));
            return (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "EuclideanRing"), (List)(new .colon.colon(this.evidence$20$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1);
         }

         public $typecreator2$5(final TypeTags.WeakTypeTag evidence$20$1) {
            this.evidence$20$1 = evidence$20$1;
         }
      }

      return $u.Expr().apply($m, new $treecreator1$5(evidence$20, z, o), $u.WeakTypeTag().apply($m, new $typecreator2$5(evidence$20)));
   }

   public Exprs.Expr Field(final Exprs.Expr z, final Exprs.Expr o, final Exprs.Expr ev, final TypeTags.WeakTypeTag evidence$21) {
      Universe $u = this.c().universe();
      Mirror $m = this.c().universe().rootMirror();

      final class $treecreator1$6 extends TreeCreator {
         // $FF: synthetic field
         private final AutoAlgebra $outer;
         private final TypeTags.WeakTypeTag evidence$21$1;
         private final Exprs.Expr z$16;
         private final Exprs.Expr o$12;

         public Trees.TreeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            return $u.Block().apply((List)(new .colon.colon($u.ClassDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(32L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TypeName().apply("$anon"), scala.collection.immutable.Nil..MODULE$, $u.Template().apply((List)(new .colon.colon($u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Field")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.noSelfType(), (List)scala.collection.immutable.List..MODULE$.apply(scala.runtime.ScalaRunTime..MODULE$.wrapRefArray((Object[])(new Trees.DefDefApi[]{$u.DefDef().apply($u.NoMods(), $u.TermName().apply("<init>"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon(scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$)), $u.TypeTree().apply(), $u.Block().apply((List)(new .colon.colon($u.Apply().apply($u.Select().apply($u.Super().apply($u.This().apply($u.TypeName().apply("")), $u.TypeName().apply("")), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$), scala.collection.immutable.Nil..MODULE$)), $u.Literal().apply($u.Constant().apply(BoxedUnit.UNIT)))), $u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("gcd"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("a"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("b"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8704L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("eqA"), $u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Eq")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$)), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.If().apply($u.Apply().apply($u.Select().apply($u.Apply().apply($u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("isZero")), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("a")), scala.collection.immutable.Nil..MODULE$))), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("eqA")), scala.collection.immutable.Nil..MODULE$))), (Names.NameApi)$u.TermName().apply("$amp$amp")), (List)(new .colon.colon($u.Apply().apply($u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("isZero")), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("b")), scala.collection.immutable.Nil..MODULE$))), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("eqA")), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("zero")), $u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("one")))), $u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("lcm"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("a"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("b"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8704L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("eqA"), $u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Eq")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$)), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.Apply().apply($u.Select().apply($u.This().apply($u.TypeName().apply("$anon")), (Names.NameApi)$u.TermName().apply("times")), (List)(new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("a")), new .colon.colon($u.Ident().apply((Names.NameApi)$u.TermName().apply("b")), scala.collection.immutable.Nil..MODULE$))))), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("zero"), scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$, $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), this.z$16.in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("one"), scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$, $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), this.o$12.in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("plus"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), this.$outer.plus(this.evidence$21$1).in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("times"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), this.$outer.times(this.evidence$21$1).in($m$untyped).tree()), $u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("minus"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), this.$outer.minus(this.evidence$21$1).in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("negate"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$)), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), this.$outer.negate(this.evidence$21$1).in($m$untyped).tree()), $u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("euclideanFunction"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$)), scala.collection.immutable.Nil..MODULE$)), $u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("scala.package")), (Names.NameApi)$u.TypeName().apply("BigInt")), $u.Apply().apply($u.Select().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("scala.package")), (Names.NameApi)$u.TermName().apply("BigInt")), (Names.NameApi)$u.TermName().apply("apply")), (List)(new .colon.colon($u.Literal().apply($u.Constant().apply(BoxesRunTime.boxToInteger(0))), scala.collection.immutable.Nil..MODULE$)))), $u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("equot"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), this.$outer.div(this.evidence$21$1).in($m$untyped).tree()), $u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("emod"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), this.$outer.mod(() -> this.z$16, this.evidence$21$1).in($m$untyped).tree()), $u.DefDef().apply($u.NoMods(), $u.TermName().apply("div"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkTypeTree(this.evidence$21$1.in($m$untyped).tpe()), this.$outer.div(this.evidence$21$1).in($m$untyped).tree())}))))), scala.collection.immutable.Nil..MODULE$)), $u.Apply().apply($u.Select().apply($u.New().apply($u.Ident().apply((Names.NameApi)$u.TypeName().apply("$anon"))), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$));
         }

         public $treecreator1$6(final TypeTags.WeakTypeTag evidence$21$1, final Exprs.Expr z$16, final Exprs.Expr o$12) {
            if (AutoAlgebra.this == null) {
               throw null;
            } else {
               this.$outer = AutoAlgebra.this;
               this.evidence$21$1 = evidence$21$1;
               this.z$16 = z$16;
               this.o$12 = o$12;
               super();
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      }


      final class $typecreator2$6 extends TypeCreator {
         private final TypeTags.WeakTypeTag evidence$21$1;

         public Types.TypeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            Symbols.SymbolApi symdef$$lessrefinement$greater1 = $u.internal().reificationSupport().newNestedSymbol($u.internal().reificationSupport().selectTerm($m$untyped.staticClass("spire.macros.AutoAlgebra"), "Field"), (Names.NameApi)$u.TypeName().apply("<refinement>"), $u.NoPosition(), $u.internal().reificationSupport().FlagsRepr().apply(0L), true);
            $u.internal().reificationSupport().setInfo(symdef$$lessrefinement$greater1, (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Field"), (List)(new .colon.colon(this.evidence$21$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1));
            return (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Field"), (List)(new .colon.colon(this.evidence$21$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1);
         }

         public $typecreator2$6(final TypeTags.WeakTypeTag evidence$21$1) {
            this.evidence$21$1 = evidence$21$1;
         }
      }

      return $u.Expr().apply($m, new $treecreator1$6(evidence$21, z, o), $u.WeakTypeTag().apply($m, new $typecreator2$6(evidence$21)));
   }

   public Exprs.Expr Eq(final TypeTags.WeakTypeTag evidence$22) {
      Universe $u = this.c().universe();
      Mirror $m = this.c().universe().rootMirror();

      final class $treecreator1$7 extends TreeCreator {
         // $FF: synthetic field
         private final AutoAlgebra $outer;
         private final TypeTags.WeakTypeTag evidence$22$1;

         public Trees.TreeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            return $u.Block().apply((List)(new .colon.colon($u.ClassDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(32L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TypeName().apply("$anon"), scala.collection.immutable.Nil..MODULE$, $u.Template().apply((List)(new .colon.colon($u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Eq")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$22$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.noSelfType(), (List)(new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("<init>"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon(scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$)), $u.TypeTree().apply(), $u.Block().apply((List)(new .colon.colon($u.Apply().apply($u.Select().apply($u.Super().apply($u.This().apply($u.TypeName().apply("")), $u.TypeName().apply("")), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$), scala.collection.immutable.Nil..MODULE$)), $u.Literal().apply($u.Constant().apply(BoxedUnit.UNIT)))), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("eqv"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$22$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$22$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkIdent($m$untyped.staticClass("scala.Boolean")), this.$outer.equals().in($m$untyped).tree()), scala.collection.immutable.Nil..MODULE$))))), scala.collection.immutable.Nil..MODULE$)), $u.Apply().apply($u.Select().apply($u.New().apply($u.Ident().apply((Names.NameApi)$u.TypeName().apply("$anon"))), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$));
         }

         public $treecreator1$7(final TypeTags.WeakTypeTag evidence$22$1) {
            if (AutoAlgebra.this == null) {
               throw null;
            } else {
               this.$outer = AutoAlgebra.this;
               this.evidence$22$1 = evidence$22$1;
               super();
            }
         }
      }


      final class $typecreator2$7 extends TypeCreator {
         private final TypeTags.WeakTypeTag evidence$22$1;

         public Types.TypeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            Symbols.SymbolApi symdef$$lessrefinement$greater1 = $u.internal().reificationSupport().newNestedSymbol($u.internal().reificationSupport().selectTerm($m$untyped.staticClass("spire.macros.AutoAlgebra"), "Eq"), (Names.NameApi)$u.TypeName().apply("<refinement>"), $u.NoPosition(), $u.internal().reificationSupport().FlagsRepr().apply(0L), true);
            $u.internal().reificationSupport().setInfo(symdef$$lessrefinement$greater1, (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Eq"), (List)(new .colon.colon(this.evidence$22$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1));
            return (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Eq"), (List)(new .colon.colon(this.evidence$22$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1);
         }

         public $typecreator2$7(final TypeTags.WeakTypeTag evidence$22$1) {
            this.evidence$22$1 = evidence$22$1;
         }
      }

      return $u.Expr().apply($m, new $treecreator1$7(evidence$22), $u.WeakTypeTag().apply($m, new $typecreator2$7(evidence$22)));
   }

   public Exprs.Expr Order(final TypeTags.WeakTypeTag evidence$23) {
      Universe $u = this.c().universe();
      Mirror $m = this.c().universe().rootMirror();

      final class $treecreator1$8 extends TreeCreator {
         // $FF: synthetic field
         private final AutoAlgebra $outer;
         private final TypeTags.WeakTypeTag evidence$23$1;

         public Trees.TreeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            return $u.Block().apply((List)(new .colon.colon($u.ClassDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(32L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TypeName().apply("$anon"), scala.collection.immutable.Nil..MODULE$, $u.Template().apply((List)(new .colon.colon($u.AppliedTypeTree().apply($u.Select().apply($u.internal().reificationSupport().mkIdent($m$untyped.staticModule("spire.algebra.package")), (Names.NameApi)$u.TypeName().apply("Order")), (List)(new .colon.colon($u.internal().reificationSupport().mkTypeTree(this.evidence$23$1.in($m$untyped).tpe()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.noSelfType(), (List)(new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("<init>"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon(scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$)), $u.TypeTree().apply(), $u.Block().apply((List)(new .colon.colon($u.Apply().apply($u.Select().apply($u.Super().apply($u.This().apply($u.TypeName().apply("")), $u.TypeName().apply("")), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$), scala.collection.immutable.Nil..MODULE$)), $u.Literal().apply($u.Constant().apply(BoxedUnit.UNIT)))), new .colon.colon($u.DefDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(2L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("eqv"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$23$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$23$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkIdent($m$untyped.staticClass("scala.Boolean")), this.$outer.equals().in($m$untyped).tree()), new .colon.colon($u.DefDef().apply($u.NoMods(), $u.TermName().apply("compare"), scala.collection.immutable.Nil..MODULE$, (List)(new .colon.colon((List)(new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("x"), $u.internal().reificationSupport().mkTypeTree(this.evidence$23$1.in($m$untyped).tpe()), $u.EmptyTree()), new .colon.colon($u.ValDef().apply($u.Modifiers().apply($u.internal().reificationSupport().FlagsRepr().apply(8192L), (Names.NameApi)$u.TypeName().apply(""), scala.collection.immutable.Nil..MODULE$), $u.TermName().apply("y"), $u.internal().reificationSupport().mkTypeTree(this.evidence$23$1.in($m$untyped).tpe()), $u.EmptyTree()), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$)), $u.internal().reificationSupport().mkIdent($m$untyped.staticClass("scala.Int")), this.$outer.compare().in($m$untyped).tree()), scala.collection.immutable.Nil..MODULE$)))))), scala.collection.immutable.Nil..MODULE$)), $u.Apply().apply($u.Select().apply($u.New().apply($u.Ident().apply((Names.NameApi)$u.TypeName().apply("$anon"))), (Names.NameApi)$u.TermName().apply("<init>")), scala.collection.immutable.Nil..MODULE$));
         }

         public $treecreator1$8(final TypeTags.WeakTypeTag evidence$23$1) {
            if (AutoAlgebra.this == null) {
               throw null;
            } else {
               this.$outer = AutoAlgebra.this;
               this.evidence$23$1 = evidence$23$1;
               super();
            }
         }
      }


      final class $typecreator2$8 extends TypeCreator {
         private final TypeTags.WeakTypeTag evidence$23$1;

         public Types.TypeApi apply(final Mirror $m$untyped) {
            scala.reflect.api.Universe $u = $m$untyped.universe();
            Symbols.SymbolApi symdef$$lessrefinement$greater1 = $u.internal().reificationSupport().newNestedSymbol($u.internal().reificationSupport().selectTerm($m$untyped.staticClass("spire.macros.AutoAlgebra"), "Order"), (Names.NameApi)$u.TypeName().apply("<refinement>"), $u.NoPosition(), $u.internal().reificationSupport().FlagsRepr().apply(0L), true);
            $u.internal().reificationSupport().setInfo(symdef$$lessrefinement$greater1, (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Order"), (List)(new .colon.colon(this.evidence$23$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1));
            return (Types.TypeApi)$u.internal().reificationSupport().RefinedType((List)(new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().ThisType($m$untyped.staticPackage("scala").asModule().moduleClass()), $u.internal().reificationSupport().selectType($m$untyped.staticPackage("scala").asModule().moduleClass(), "AnyRef"), scala.collection.immutable.Nil..MODULE$), new .colon.colon($u.internal().reificationSupport().TypeRef($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().SingleType($u.internal().reificationSupport().thisPrefix($m$untyped.RootClass()), $m$untyped.staticPackage("spire")), $m$untyped.staticPackage("spire.algebra")), $m$untyped.staticModule("spire.algebra.package")), $u.internal().reificationSupport().selectType($m$untyped.staticModule("spire.algebra.package").asModule().moduleClass(), "Order"), (List)(new .colon.colon(this.evidence$23$1.in($m$untyped).tpe(), scala.collection.immutable.Nil..MODULE$))), scala.collection.immutable.Nil..MODULE$))), $u.internal().reificationSupport().newScopeWith(scala.collection.immutable.Nil..MODULE$), symdef$$lessrefinement$greater1);
         }

         public $typecreator2$8(final TypeTags.WeakTypeTag evidence$23$1) {
            this.evidence$23$1 = evidence$23$1;
         }
      }

      return $u.Expr().apply($m, new $treecreator1$8(evidence$23), $u.WeakTypeTag().apply($m, new $typecreator2$8(evidence$23)));
   }
}
