package breeze.linalg.operators;

import breeze.generic.UFunc;
import breeze.generic.UFunc$InPlaceImpl2$mcD$sp;
import breeze.generic.UFunc$InPlaceImpl2$mcF$sp;
import breeze.generic.UFunc$InPlaceImpl2$mcI$sp;
import breeze.linalg.DenseMatrix;
import breeze.linalg.DenseMatrix$;
import breeze.linalg.DenseVector$mcD$sp;
import breeze.linalg.DenseVector$mcF$sp;
import breeze.linalg.DenseVector$mcI$sp;
import breeze.linalg.DenseVector$mcJ$sp;
import breeze.linalg.package$;
import breeze.math.Field;
import breeze.math.PowImplicits$;
import breeze.math.Ring$;
import breeze.math.Semiring$;
import breeze.storage.Zero;
import breeze.storage.Zero$;
import java.lang.invoke.SerializedLambda;
import scala.Predef.;
import scala.reflect.ClassTag;
import scala.reflect.ScalaSignature;
import scala.runtime.BoxesRunTime;
import scala.runtime.IntRef;

@ScalaSignature(
   bytes = "\u0006\u0005!\u0015bACA$\u0003\u0013\u0002\n1!\u0001\u0002X!9\u0011\u0011\u0010\u0001\u0005\u0002\u0005m\u0004\"CAB\u0001\t\u0007I1AAC\u0011%\tI\u000b\u0001b\u0001\n\u0007\tY\u000bC\u0005\u00028\u0002\u0011\r\u0011b\u0001\u0002:\"I\u0011Q\u0019\u0001C\u0002\u0013\r\u0011q\u0019\u0005\n\u0003'\u0004!\u0019!C\u0002\u0003+D\u0011\"a8\u0001\u0005\u0004%\u0019!!9\t\u0013\u0005\u0015\bA1A\u0005\u0004\u0005\u001d\b\"CAv\u0001\t\u0007I1AAw\u0011%\t\t\u0010\u0001b\u0001\n\u0007\t\u0019\u0010C\u0005\u0002~\u0002\u0011\r\u0011b\u0001\u0002\u0000\"I!1\u0001\u0001C\u0002\u0013\r!Q\u0001\u0005\n\u0005\u0013\u0001!\u0019!C\u0002\u0005\u0017A\u0011Ba\u0004\u0001\u0005\u0004%\u0019A!\u0005\t\u0013\tm\u0001A1A\u0005\u0004\tu\u0001\"\u0003B\u0011\u0001\t\u0007I1\u0001B\u0012\u0011%\u00119\u0003\u0001b\u0001\n\u0007\u0011I\u0003C\u0005\u0003.\u0001\u0011\r\u0011b\u0001\u00030!I!\u0011\b\u0001C\u0002\u0013\r!1\b\u0005\n\u0005\u007f\u0001!\u0019!C\u0002\u0005\u0003B\u0011B!\u0012\u0001\u0005\u0004%\u0019Aa\u0012\t\u0013\t-\u0003A1A\u0005\u0004\t5\u0003\"\u0003B,\u0001\t\u0007I1\u0001B-\u0011%\u0011i\u0006\u0001b\u0001\n\u0007\u0011y\u0006C\u0005\u0003d\u0001\u0011\r\u0011b\u0001\u0003f!I!\u0011\u000e\u0001C\u0002\u0013\r!1\u000e\u0005\n\u0005k\u0002!\u0019!C\u0002\u0005oB\u0011Ba\u001f\u0001\u0005\u0004%\u0019A! \t\u0013\t\u0005\u0005A1A\u0005\u0004\t\r\u0005b\u0002BD\u0001\u0011\r!\u0011\u0012\u0005\b\u0005/\u0004A1\u0001Bm\u0011\u001d\u00119\u0010\u0001C\u0002\u0005sDqaa\u0006\u0001\t\u0007\u0019I\u0002C\u0004\u00048\u0001!\u0019a!\u000f\t\u000f\r]\u0003\u0001b\u0001\u0004Z!I1q\u000f\u0001C\u0002\u0013\r1\u0011\u0010\u0005\n\u0007{\u0002!\u0019!C\u0002\u0007\u007fB\u0011ba!\u0001\u0005\u0004%\u0019a!\"\t\u0013\r%\u0005A1A\u0005\u0004\r-\u0005\"CBH\u0001\t\u0007I1ABI\u0011%\u0019)\n\u0001b\u0001\n\u0007\u00199\nC\u0005\u0004\u001c\u0002\u0011\r\u0011b\u0001\u0004\u001e\"I1\u0011\u0015\u0001C\u0002\u0013\r11\u0015\u0005\n\u0007O\u0003!\u0019!C\u0002\u0007SC\u0011b!,\u0001\u0005\u0004%\u0019aa,\t\u0013\rM\u0006A1A\u0005\u0004\rU\u0006\"CB]\u0001\t\u0007I1AB^\u0011%\u0019y\f\u0001b\u0001\n\u0007\u0019\t\rC\u0005\u0004L\u0002\u0011\r\u0011b\u0001\u0004N\"I1\u0011\u001b\u0001C\u0002\u0013\r11\u001b\u0005\n\u0007/\u0004!\u0019!C\u0002\u00073D\u0011b!8\u0001\u0005\u0004%\u0019aa8\t\u0013\r\r\bA1A\u0005\u0004\r\u0015\b\"CBu\u0001\t\u0007I1ABv\u0011%\u0019y\u000f\u0001b\u0001\n\u0007\u0019\t\u0010C\u0005\u0004v\u0002\u0011\r\u0011b\u0001\u0004x\"I11 \u0001C\u0002\u0013\r1Q \u0005\n\t\u0003\u0001!\u0019!C\u0002\t\u0007A\u0011\u0002b\u0002\u0001\u0005\u0004%\u0019\u0001\"\u0003\t\u0013\u00115\u0001A1A\u0005\u0004\u0011=\u0001\"\u0003C\n\u0001\t\u0007I1\u0001C\u000b\u0011%!I\u0002\u0001b\u0001\n\u0007!Y\u0002C\u0005\u0005 \u0001\u0011\r\u0011b\u0001\u0005\"!IAQ\u0005\u0001C\u0002\u0013\rAq\u0005\u0005\n\tW\u0001!\u0019!C\u0002\t[A\u0011\u0002\"\r\u0001\u0005\u0004%\u0019\u0001b\r\t\u0013\u0011]\u0002A1A\u0005\u0004\u0011e\u0002b\u0002C\u001f\u0001\u0011\rAq\b\u0005\b\t;\u0002A1\u0001C0\u0011\u001d!i\b\u0001C\u0002\t\u007fBq\u0001\"(\u0001\t\u0007!y\nC\u0004\u0005>\u0002!\u0019\u0001b0\t\u000f\u0011u\u0007\u0001b\u0001\u0005`\"9AQ \u0001\u0005\u0004\u0011}\b\"CC\u000f\u0001\t\u0007I1AC\u0010\u0011%)9\u0003\u0001b\u0001\n\u0007)I\u0003C\u0005\u0006.\u0001\u0011\r\u0011b\u0001\u00060!IQ1\u0007\u0001C\u0002\u0013\rQQ\u0007\u0005\n\u000bs\u0001!\u0019!C\u0002\u000bwA\u0011\"b\u0010\u0001\u0005\u0004%\u0019!\"\u0011\t\u0013\u0015\u0015\u0003A1A\u0005\u0004\u0015\u001d\u0003\"CC&\u0001\t\u0007I1AC'\u0011%)\t\u0006\u0001b\u0001\n\u0007)\u0019\u0006C\u0005\u0006X\u0001\u0011\r\u0011b\u0001\u0006Z!IQQ\f\u0001C\u0002\u0013\rQq\f\u0005\n\u000bG\u0002!\u0019!C\u0002\u000bKB\u0011\"\"\u001b\u0001\u0005\u0004%\u0019!b\u001b\t\u0013\u0015=\u0004A1A\u0005\u0004\u0015E\u0004\"CC;\u0001\t\u0007I1AC<\u0011%)Y\b\u0001b\u0001\n\u0007)i\bC\u0005\u0006\u0002\u0002\u0011\r\u0011b\u0001\u0006\u0004\"IQq\u0011\u0001C\u0002\u0013\rQ\u0011\u0012\u0005\n\u000b\u001b\u0003!\u0019!C\u0002\u000b\u001fC\u0011\"b%\u0001\u0005\u0004%\u0019!\"&\t\u0013\u0015e\u0005A1A\u0005\u0004\u0015m\u0005\"CCP\u0001\t\u0007I1ACQ\u0011%))\u000b\u0001b\u0001\n\u0007)9\u000bC\u0005\u0006,\u0002\u0011\r\u0011b\u0001\u0006.\"IQ\u0011\u0017\u0001C\u0002\u0013\rQ1\u0017\u0005\n\u000bo\u0003!\u0019!C\u0002\u000bsC\u0011\"\"0\u0001\u0005\u0004%\u0019!b0\t\u0013\u0015\r\u0007A1A\u0005\u0004\u0015\u0015\u0007bBCe\u0001\u0011\rQ1\u001a\u0005\b\u000bS\u0004A1ACv\u0011\u001d1I\u0001\u0001C\u0002\r\u0017AqA\"\u000b\u0001\t\u00071Y\u0003C\u0004\u0007J\u0001!\u0019Ab\u0013\t\u000f\u0019%\u0004\u0001b\u0001\u0007l!9a\u0011\u0012\u0001\u0005\u0004\u0019-\u0005\"\u0003DU\u0001\t\u0007I1\u0001DV\u0011%1y\u000b\u0001b\u0001\n\u00071\t\fC\u0005\u00076\u0002\u0011\r\u0011b\u0001\u00078\"Ia1\u0018\u0001C\u0002\u0013\raQ\u0018\u0005\n\r\u0003\u0004!\u0019!C\u0002\r\u0007D\u0011Bb2\u0001\u0005\u0004%\u0019A\"3\t\u0013\u00195\u0007A1A\u0005\u0004\u0019=\u0007\"\u0003Dj\u0001\t\u0007I1\u0001Dk\u0011%1I\u000e\u0001b\u0001\n\u00071Y\u000eC\u0005\u0007`\u0002\u0011\r\u0011b\u0001\u0007b\"IaQ\u001d\u0001C\u0002\u0013\raq\u001d\u0005\n\rW\u0004!\u0019!C\u0002\r[D\u0011B\"=\u0001\u0005\u0004%\u0019Ab=\t\u0013\u0019]\bA1A\u0005\u0004\u0019e\b\"\u0003D\u007f\u0001\t\u0007I1\u0001D\u0000\u0011%9\u0019\u0001\u0001b\u0001\n\u00079)\u0001C\u0005\b\n\u0001\u0011\r\u0011b\u0001\b\f!Iqq\u0002\u0001C\u0002\u0013\rq\u0011\u0003\u0005\n\u000f+\u0001!\u0019!C\u0002\u000f/A\u0011bb\u0007\u0001\u0005\u0004%\u0019a\"\b\t\u0013\u001d\u0005\u0002A1A\u0005\u0004\u001d\r\u0002\"CD\u0014\u0001\t\u0007I1AD\u0015\u0011%9i\u0003\u0001b\u0001\n\u00079y\u0003C\u0005\b4\u0001\u0011\r\u0011b\u0001\b6!Iq\u0011\b\u0001C\u0002\u0013\rq1\b\u0005\n\u000f\u007f\u0001!\u0019!C\u0002\u000f\u0003B\u0011b\"\u0012\u0001\u0005\u0004%\u0019ab\u0012\t\u0013\u001d-\u0003A1A\u0005\u0004\u001d5\u0003bBD)\u0001\u0011\rq1\u000b\u0005\n\u000f+\u0003!\u0019!C\u0002\u000f/C\u0011bb'\u0001\u0005\u0004%\u0019a\"(\t\u0013\u001d\u0005\u0006A1A\u0005\u0004\u001d\r\u0006\"CDT\u0001\t\u0007I1ADU\u0011%9i\u000b\u0001b\u0001\n\u00079y\u000bC\u0005\b4\u0002\u0011\r\u0011b\u0001\b6\"Iq\u0011\u0018\u0001C\u0002\u0013\rq1\u0018\u0005\n\u000f\u007f\u0003!\u0019!C\u0002\u000f\u0003D\u0011b\"2\u0001\u0005\u0004%\u0019ab2\t\u0013\u001d-\u0007A1A\u0005\u0004\u001d5\u0007\"CDi\u0001\t\u0007I1ADj\u0011%99\u000e\u0001b\u0001\n\u00079I\u000eC\u0005\b^\u0002\u0011\r\u0011b\u0001\b`\"Iq1\u001d\u0001C\u0002\u0013\rqQ\u001d\u0005\n\u000fS\u0004!\u0019!C\u0002\u000fWD\u0011bb<\u0001\u0005\u0004%\u0019a\"=\t\u0013\u001dU\bA1A\u0005\u0004\u001d]\b\"CD~\u0001\t\u0007I1AD\u007f\u0011%A\t\u0001\u0001b\u0001\n\u0007A\u0019\u0001C\u0005\t\b\u0001\u0011\r\u0011b\u0001\t\n!I\u0001R\u0002\u0001C\u0002\u0013\r\u0001r\u0002\u0005\n\u0011'\u0001!\u0019!C\u0002\u0011+A\u0011\u0002#\u0007\u0001\u0005\u0004%\u0019\u0001c\u0007\t\u0013!}\u0001A1A\u0005\u0004!\u0005\"A\u0006#f]N,W*\u0019;sSb,\u0005\u0010]1oI\u0016$w\n]:\u000b\t\u0005-\u0013QJ\u0001\n_B,'/\u0019;peNTA!a\u0014\u0002R\u00051A.\u001b8bY\u001eT!!a\u0015\u0002\r\t\u0014X-\u001a>f\u0007\u0001\u0019\u0012\u0002AA-\u0003K\ni'a\u001d\u0011\t\u0005m\u0013\u0011M\u0007\u0003\u0003;R!!a\u0018\u0002\u000bM\u001c\u0017\r\\1\n\t\u0005\r\u0014Q\f\u0002\u0007\u0003:L(+\u001a4\u0011\t\u0005\u001d\u0014\u0011N\u0007\u0003\u0003\u0013JA!a\u001b\u0002J\tIQ*\u0019;sSb|\u0005o\u001d\t\u0005\u0003O\ny'\u0003\u0003\u0002r\u0005%#A\u0006#f]N,W*\u0019;sSb|v)\u001a8fe&\u001cw\n]:\u0011\t\u0005\u001d\u0014QO\u0005\u0005\u0003o\nIE\u0001\rEK:\u001cX-T1ue&Dx\f\u0016:bm\u0016\u00148/\u00197PaN\fa\u0001J5oSR$CCAA?!\u0011\tY&a \n\t\u0005\u0005\u0015Q\f\u0002\u0005+:LG/\u0001\re[~#WnX+qI\u0006$Xm\u00149`\u0013:$xl\u00149BI\u0012,\"!a\"\u0011\u0011\u0005%\u0015qRAN\u00037sA!a\u001a\u0002\f&!\u0011QRA%\u0003\u0015y\u0005/\u00113e\u0013\u0011\t\t*a%\u0003\u0019%s\u0007\u000b\\1dK&k\u0007\u000f\u001c\u001a\n\t\u0005U\u0015q\u0013\u0002\u0006+\u001a+hn\u0019\u0006\u0005\u00033\u000b\t&A\u0004hK:,'/[2\u0011\r\u0005u\u0015qTAR\u001b\t\ti%\u0003\u0003\u0002\"\u00065#a\u0003#f]N,W*\u0019;sSb\u0004B!a\u0017\u0002&&!\u0011qUA/\u0005\rIe\u000e^\u0001\u001cI6|F-\\0Va\u0012\fG/Z(q?\u0012{WO\u00197f?>\u0003\u0018\t\u001a3\u0016\u0005\u00055\u0006\u0003CAE\u0003\u001f\u000by+a,\u0011\r\u0005u\u0015qTAY!\u0011\tY&a-\n\t\u0005U\u0016Q\f\u0002\u0007\t>,(\r\\3\u00025\u0011lw\fZ7`+B$\u0017\r^3Pa~3En\\1u?>\u0003\u0018\t\u001a3\u0016\u0005\u0005m\u0006\u0003CAE\u0003\u001f\u000bi,!0\u0011\r\u0005u\u0015qTA`!\u0011\tY&!1\n\t\u0005\r\u0017Q\f\u0002\u0006\r2|\u0017\r^\u0001\u001aI6|F-\\0Va\u0012\fG/Z(q?2{gnZ0Pa\u0006#G-\u0006\u0002\u0002JBA\u0011\u0011RAH\u0003\u0017\fY\r\u0005\u0004\u0002\u001e\u0006}\u0015Q\u001a\t\u0005\u00037\ny-\u0003\u0003\u0002R\u0006u#\u0001\u0002'p]\u001e\f\u0001\u0004Z7`I6|V\u000b\u001d3bi\u0016|\u0005oX%oi~{\u0005oU;c+\t\t9\u000e\u0005\u0005\u0002Z\u0006=\u00151TAN\u001d\u0011\t9'a7\n\t\u0005u\u0017\u0011J\u0001\u0006\u001fB\u001cVOY\u0001\u001cI6|F-\\0Va\u0012\fG/Z(q?\u0012{WO\u00197f?>\u00038+\u001e2\u0016\u0005\u0005\r\b\u0003CAm\u0003\u001f\u000by+a,\u00025\u0011lw\fZ7`+B$\u0017\r^3Pa~3En\\1u?>\u00038+\u001e2\u0016\u0005\u0005%\b\u0003CAm\u0003\u001f\u000bi,!0\u00023\u0011lw\fZ7`+B$\u0017\r^3Pa~cuN\\4`\u001fB\u001cVOY\u000b\u0003\u0003_\u0004\u0002\"!7\u0002\u0010\u0006-\u00171Z\u0001\u001fI6|F-\\0Va\u0012\fG/Z(q?&sGoX(q\u001bVd7kY1mCJ,\"!!>\u0011\u0011\u0005]\u0018qRAN\u00037sA!a\u001a\u0002z&!\u00111`A%\u0003-y\u0005/T;m'\u000e\fG.\u0019:\u0002C\u0011lw\fZ7`+B$\u0017\r^3Pa~#u.\u001e2mK~{\u0005/T;m'\u000e\fG.\u0019:\u0016\u0005\t\u0005\u0001\u0003CA|\u0003\u001f\u000by+a,\u0002A\u0011lw\fZ7`+B$\u0017\r^3Pa~3En\\1u?>\u0003X*\u001e7TG\u0006d\u0017M]\u000b\u0003\u0005\u000f\u0001\u0002\"a>\u0002\u0010\u0006u\u0016QX\u0001 I6|F-\\0Va\u0012\fG/Z(q?2{gnZ0Pa6+HnU2bY\u0006\u0014XC\u0001B\u0007!!\t90a$\u0002L\u0006-\u0017\u0001\u00073n?\u0012lw,\u00169eCR,w\n]0J]R|v\n\u001d#jmV\u0011!1\u0003\t\t\u0005+\ty)a'\u0002\u001c:!\u0011q\rB\f\u0013\u0011\u0011I\"!\u0013\u0002\u000b=\u0003H)\u001b<\u00027\u0011lw\fZ7`+B$\u0017\r^3Pa~#u.\u001e2mK~{\u0005\u000fR5w+\t\u0011y\u0002\u0005\u0005\u0003\u0016\u0005=\u0015qVAX\u0003i!Wn\u00183n?V\u0003H-\u0019;f\u001fB|f\t\\8bi~{\u0005\u000fR5w+\t\u0011)\u0003\u0005\u0005\u0003\u0016\u0005=\u0015QXA_\u0003e!Wn\u00183n?V\u0003H-\u0019;f\u001fB|Fj\u001c8h?>\u0003H)\u001b<\u0016\u0005\t-\u0002\u0003\u0003B\u000b\u0003\u001f\u000bY-a3\u00021\u0011lw\fZ7`+B$\u0017\r^3Pa~Ke\u000e^0PaN+G/\u0006\u0002\u00032AA!1GAH\u00037\u000bYJ\u0004\u0003\u0002h\tU\u0012\u0002\u0002B\u001c\u0003\u0013\nQa\u00149TKR\f1\u0004Z7`I6|V\u000b\u001d3bi\u0016|\u0005o\u0018#pk\ndWmX(q'\u0016$XC\u0001B\u001f!!\u0011\u0019$a$\u00020\u0006=\u0016A\u00073n?\u0012lw,\u00169eCR,w\n]0GY>\fGoX(q'\u0016$XC\u0001B\"!!\u0011\u0019$a$\u0002>\u0006u\u0016!\u00073n?\u0012lw,\u00169eCR,w\n]0M_:<wl\u00149TKR,\"A!\u0013\u0011\u0011\tM\u0012qRAf\u0003\u0017\f\u0001\u0004Z7`I6|V\u000b\u001d3bi\u0016|\u0005oX%oi~{\u0005/T8e+\t\u0011y\u0005\u0005\u0005\u0003R\u0005=\u00151TAN\u001d\u0011\t9Ga\u0015\n\t\tU\u0013\u0011J\u0001\u0006\u001fBlu\u000eZ\u0001\u001cI6|F-\\0Va\u0012\fG/Z(q?\u0012{WO\u00197f?>\u0003Xj\u001c3\u0016\u0005\tm\u0003\u0003\u0003B)\u0003\u001f\u000by+a,\u00025\u0011lw\fZ7`+B$\u0017\r^3Pa~3En\\1u?>\u0003Xj\u001c3\u0016\u0005\t\u0005\u0004\u0003\u0003B)\u0003\u001f\u000bi,!0\u00023\u0011lw\fZ7`+B$\u0017\r^3Pa~cuN\\4`\u001fBlu\u000eZ\u000b\u0003\u0005O\u0002\u0002B!\u0015\u0002\u0010\u0006-\u00171Z\u0001\u0019I6|F-\\0Va\u0012\fG/Z(q?&sGoX(q!><XC\u0001B7!!\u0011y'a$\u0002\u001c\u0006me\u0002BA4\u0005cJAAa\u001d\u0002J\u0005)q\n\u001d)po\u0006YB-\\0e[~+\u0006\u000fZ1uK>\u0003x\fR8vE2,wl\u00149Q_^,\"A!\u001f\u0011\u0011\t=\u0014qRAX\u0003_\u000b!\u0004Z7`I6|V\u000b\u001d3bi\u0016|\u0005o\u0018$m_\u0006$xl\u00149Q_^,\"Aa \u0011\u0011\t=\u0014qRA_\u0003{\u000b\u0011\u0004Z7`I6|V\u000b\u001d3bi\u0016|\u0005o\u0018'p]\u001e|v\n\u001d)poV\u0011!Q\u0011\t\t\u0005_\ny)a3\u0002L\u0006!B-\\0e[~+\u0006\u000fZ1uK>\u0003xl\u00149BI\u0012,BAa#\u0003\u0016RA!Q\u0012BT\u0005o\u00139\r\u0005\u0005\u0002\n\u0006=%q\u0012BH!\u0019\ti*a(\u0003\u0012B!!1\u0013BK\u0019\u0001!qAa&\u001f\u0005\u0004\u0011IJA\u0001U#\u0011\u0011YJ!)\u0011\t\u0005m#QT\u0005\u0005\u0005?\u000biFA\u0004O_RD\u0017N\\4\u0011\t\u0005m#1U\u0005\u0005\u0005K\u000biFA\u0002B]fD\u0011B!+\u001f\u0003\u0003\u0005\u001dAa+\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$\u0013g\r\t\u0007\u0005[\u0013\u0019L!%\u000e\u0005\t=&\u0002\u0002BY\u0003#\nA!\\1uQ&!!Q\u0017BX\u0005\u00151\u0015.\u001a7e\u0011%\u0011ILHA\u0001\u0002\b\u0011Y,A\u0006fm&$WM\\2fIE\"\u0004C\u0002B_\u0005\u0007\u0014\t*\u0004\u0002\u0003@*!!\u0011YA)\u0003\u001d\u0019Ho\u001c:bO\u0016LAA!2\u0003@\n!!,\u001a:p\u0011%\u0011IMHA\u0001\u0002\b\u0011Y-A\u0006fm&$WM\\2fIE*\u0004C\u0002Bg\u0005'\u0014\t*\u0004\u0002\u0003P*!!\u0011[A/\u0003\u001d\u0011XM\u001a7fGRLAA!6\u0003P\nA1\t\\1tgR\u000bw-\u0001\u000be[~#WnX+qI\u0006$Xm\u00149`\u001fB\u001cVOY\u000b\u0005\u00057\u0014\u0019\u000f\u0006\u0005\u0003^\n\u0015(1\u001eBy!!\tI.a$\u0003`\n}\u0007CBAO\u0003?\u0013\t\u000f\u0005\u0003\u0003\u0014\n\rHa\u0002BL?\t\u0007!\u0011\u0014\u0005\n\u0005O|\u0012\u0011!a\u0002\u0005S\f1\"\u001a<jI\u0016t7-\u001a\u00132mA1!Q\u0016BZ\u0005CD\u0011B!< \u0003\u0003\u0005\u001dAa<\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$\u0013g\u000e\t\u0007\u0005{\u0013\u0019M!9\t\u0013\tMx$!AA\u0004\tU\u0018aC3wS\u0012,gnY3%ca\u0002bA!4\u0003T\n\u0005\u0018A\u00073n?\u0012lw,\u00169eCR,w\n]0Pa6+HnU2bY\u0006\u0014X\u0003\u0002B~\u0007\u0007!\u0002B!@\u0004\u0006\r-1\u0011\u0003\t\t\u0003o\fyIa@\u0003\u0000B1\u0011QTAP\u0007\u0003\u0001BAa%\u0004\u0004\u00119!q\u0013\u0011C\u0002\te\u0005\"CB\u0004A\u0005\u0005\t9AB\u0005\u0003-)g/\u001b3f]\u000e,G%M\u001d\u0011\r\t5&1WB\u0001\u0011%\u0019i\u0001IA\u0001\u0002\b\u0019y!A\u0006fm&$WM\\2fII\u0002\u0004C\u0002B_\u0005\u0007\u001c\t\u0001C\u0005\u0004\u0014\u0001\n\t\u0011q\u0001\u0004\u0016\u0005YQM^5eK:\u001cW\r\n\u001a2!\u0019\u0011iMa5\u0004\u0002\u0005!B-\\0e[~+\u0006\u000fZ1uK>\u0003xl\u00149ESZ,Baa\u0007\u0004$QA1QDB\u0013\u0007W\u0019\t\u0004\u0005\u0005\u0003\u0016\u0005=5qDB\u0010!\u0019\ti*a(\u0004\"A!!1SB\u0012\t\u001d\u00119*\tb\u0001\u00053C\u0011ba\n\"\u0003\u0003\u0005\u001da!\u000b\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$#G\r\t\u0007\u0005[\u0013\u0019l!\t\t\u0013\r5\u0012%!AA\u0004\r=\u0012aC3wS\u0012,gnY3%eM\u0002bA!0\u0003D\u000e\u0005\u0002\"CB\u001aC\u0005\u0005\t9AB\u001b\u0003-)g/\u001b3f]\u000e,GE\r\u001b\u0011\r\t5'1[B\u0011\u0003Q!Wn\u00183n?V\u0003H-\u0019;f\u001fB|v\n]'pIV!11HB\")!\u0019id!\u0012\u0004L\rE\u0003\u0003\u0003B)\u0003\u001f\u001byda\u0010\u0011\r\u0005u\u0015qTB!!\u0011\u0011\u0019ja\u0011\u0005\u000f\t]%E1\u0001\u0003\u001a\"I1q\t\u0012\u0002\u0002\u0003\u000f1\u0011J\u0001\fKZLG-\u001a8dK\u0012\u0012T\u0007\u0005\u0004\u0003.\nM6\u0011\t\u0005\n\u0007\u001b\u0012\u0013\u0011!a\u0002\u0007\u001f\n1\"\u001a<jI\u0016t7-\u001a\u00133mA1!Q\u0018Bb\u0007\u0003B\u0011ba\u0015#\u0003\u0003\u0005\u001da!\u0016\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$#g\u000e\t\u0007\u0005\u001b\u0014\u0019n!\u0011\u0002)\u0011lw\fZ7`+B$\u0017\r^3Pa~{\u0005\u000fU8x+\u0011\u0019Yfa\u0019\u0015\u0011\ru3QMB6\u0007c\u0002\u0002Ba\u001c\u0002\u0010\u000e}3q\f\t\u0007\u0003;\u000byj!\u0019\u0011\t\tM51\r\u0003\b\u0005/\u001b#\u0019\u0001BM\u0011%\u00199gIA\u0001\u0002\b\u0019I'A\u0006fm&$WM\\2fIIB\u0004C\u0002BW\u0005g\u001b\t\u0007C\u0005\u0004n\r\n\t\u0011q\u0001\u0004p\u0005YQM^5eK:\u001cW\r\n\u001a:!\u0019\u0011iLa1\u0004b!I11O\u0012\u0002\u0002\u0003\u000f1QO\u0001\fKZLG-\u001a8dK\u0012\u001a\u0004\u0007\u0005\u0004\u0003N\nM7\u0011M\u0001\u0018I6|6oX+qI\u0006$Xm\u00149`\u0013:$xl\u00149BI\u0012,\"aa\u001f\u0011\u0011\u0005%\u0015qRAN\u0003G\u000b!\u0004Z7`g~+\u0006\u000fZ1uK>\u0003x\fR8vE2,wl\u00149BI\u0012,\"a!!\u0011\u0011\u0005%\u0015qRAX\u0003c\u000b\u0011\u0004Z7`g~+\u0006\u000fZ1uK>\u0003xL\u00127pCR|v\n]!eIV\u00111q\u0011\t\t\u0003\u0013\u000by)!0\u0002@\u0006AB-\\0t?V\u0003H-\u0019;f\u001fB|Fj\u001c8h?>\u0003\u0018\t\u001a3\u0016\u0005\r5\u0005\u0003CAE\u0003\u001f\u000bY-!4\u0002/\u0011lwl]0Va\u0012\fG/Z(q?&sGoX(q'V\u0014WCABJ!!\tI.a$\u0002\u001c\u0006\r\u0016A\u00073n?N|V\u000b\u001d3bi\u0016|\u0005o\u0018#pk\ndWmX(q'V\u0014WCABM!!\tI.a$\u00020\u0006E\u0016!\u00073n?N|V\u000b\u001d3bi\u0016|\u0005o\u0018$m_\u0006$xl\u00149Tk\n,\"aa(\u0011\u0011\u0005e\u0017qRA_\u0003\u007f\u000b\u0001\u0004Z7`g~+\u0006\u000fZ1uK>\u0003x\fT8oO~{\u0005oU;c+\t\u0019)\u000b\u0005\u0005\u0002Z\u0006=\u00151ZAg\u0003u!WnX:`+B$\u0017\r^3Pa~Ke\u000e^0Pa6+HnU2bY\u0006\u0014XCABV!!\t90a$\u0002\u001c\u0006\r\u0016\u0001\t3n?N|V\u000b\u001d3bi\u0016|\u0005o\u0018#pk\ndWmX(q\u001bVd7kY1mCJ,\"a!-\u0011\u0011\u0005]\u0018qRAX\u0003c\u000bq\u0004Z7`g~+\u0006\u000fZ1uK>\u0003xL\u00127pCR|v\n]'vYN\u001b\u0017\r\\1s+\t\u00199\f\u0005\u0005\u0002x\u0006=\u0015QXA`\u0003y!WnX:`+B$\u0017\r^3Pa~cuN\\4`\u001fBlU\u000f\\*dC2\f'/\u0006\u0002\u0004>BA\u0011q_AH\u0003\u0017\fi-A\u000fe[~\u001bx,\u00169eCR,w\n]0J]R|v\n]'vY6\u000bGO]5y+\t\u0019\u0019\r\u0005\u0005\u0004F\u0006=\u00151TAR\u001d\u0011\t9ga2\n\t\r%\u0017\u0011J\u0001\f\u001fBlU\u000f\\'biJL\u00070\u0001\u0011e[~\u001bx,\u00169eCR,w\n]0E_V\u0014G.Z0Pa6+H.T1ue&DXCABh!!\u0019)-a$\u00020\u0006E\u0016a\b3n?N|V\u000b\u001d3bi\u0016|\u0005o\u0018$m_\u0006$xl\u00149Nk2l\u0015\r\u001e:jqV\u00111Q\u001b\t\t\u0007\u000b\fy)!0\u0002@\u0006qB-\\0t?V\u0003H-\u0019;f\u001fB|Fj\u001c8h?>\u0003X*\u001e7NCR\u0014\u0018\u000e_\u000b\u0003\u00077\u0004\u0002b!2\u0002\u0010\u0006-\u0017QZ\u0001\u0018I6|6oX+qI\u0006$Xm\u00149`\u0013:$xl\u00149ESZ,\"a!9\u0011\u0011\tU\u0011qRAN\u0003G\u000b!\u0004Z7`g~+\u0006\u000fZ1uK>\u0003x\fR8vE2,wl\u00149ESZ,\"aa:\u0011\u0011\tU\u0011qRAX\u0003c\u000b\u0011\u0004Z7`g~+\u0006\u000fZ1uK>\u0003xL\u00127pCR|v\n\u001d#jmV\u00111Q\u001e\t\t\u0005+\ty)!0\u0002@\u0006AB-\\0t?V\u0003H-\u0019;f\u001fB|Fj\u001c8h?>\u0003H)\u001b<\u0016\u0005\rM\b\u0003\u0003B\u000b\u0003\u001f\u000bY-!4\u0002/\u0011lwl]0Va\u0012\fG/Z(q?&sGoX(q'\u0016$XCAB}!!\u0011\u0019$a$\u0002\u001c\u0006\r\u0016A\u00073n?N|V\u000b\u001d3bi\u0016|\u0005o\u0018#pk\ndWmX(q'\u0016$XCAB\u0000!!\u0011\u0019$a$\u00020\u0006E\u0016!\u00073n?N|V\u000b\u001d3bi\u0016|\u0005o\u0018$m_\u0006$xl\u00149TKR,\"\u0001\"\u0002\u0011\u0011\tM\u0012qRA_\u0003\u007f\u000b\u0001\u0004Z7`g~+\u0006\u000fZ1uK>\u0003x\fT8oO~{\u0005oU3u+\t!Y\u0001\u0005\u0005\u00034\u0005=\u00151ZAg\u0003]!WnX:`+B$\u0017\r^3Pa~Ke\u000e^0Pa6{G-\u0006\u0002\u0005\u0012AA!\u0011KAH\u00037\u000b\u0019+\u0001\u000ee[~\u001bx,\u00169eCR,w\n]0E_V\u0014G.Z0Pa6{G-\u0006\u0002\u0005\u0018AA!\u0011KAH\u0003_\u000b\t,A\re[~\u001bx,\u00169eCR,w\n]0GY>\fGoX(q\u001b>$WC\u0001C\u000f!!\u0011\t&a$\u0002>\u0006}\u0016\u0001\u00073n?N|V\u000b\u001d3bi\u0016|\u0005o\u0018'p]\u001e|v\n]'pIV\u0011A1\u0005\t\t\u0005#\ny)a3\u0002N\u00069B-\\0t?V\u0003H-\u0019;f\u001fB|\u0016J\u001c;`\u001fB\u0004vn^\u000b\u0003\tS\u0001\u0002Ba\u001c\u0002\u0010\u0006m\u00151U\u0001\u001bI6|6oX+qI\u0006$Xm\u00149`\t>,(\r\\3`\u001fB\u0004vn^\u000b\u0003\t_\u0001\u0002Ba\u001c\u0002\u0010\u0006=\u0016\u0011W\u0001\u001aI6|6oX+qI\u0006$Xm\u00149`\r2|\u0017\r^0PaB{w/\u0006\u0002\u00056AA!qNAH\u0003{\u000by,\u0001\re[~\u001bx,\u00169eCR,w\n]0M_:<wl\u00149Q_^,\"\u0001b\u000f\u0011\u0011\t=\u0014qRAf\u0003\u001b\f1c\u001c9Va\u0012\fG/Z0E\u001b~\u001bvl\u00149BI\u0012,B\u0001\"\u0011\u0005JQAA1\tC&\t#\"9\u0006\u0005\u0005\u0002\n\u0006=EQ\tC$!\u0019\ti*a(\u0005HA!!1\u0013C%\t\u001d\u00119\n\u0012b\u0001\u00053C\u0011\u0002\"\u0014E\u0003\u0003\u0005\u001d\u0001b\u0014\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$3'\r\t\u0007\u0005[\u0013\u0019\fb\u0012\t\u0013\u0011MC)!AA\u0004\u0011U\u0013aC3wS\u0012,gnY3%gI\u0002bA!0\u0003D\u0012\u001d\u0003\"\u0003C-\t\u0006\u0005\t9\u0001C.\u0003-)g/\u001b3f]\u000e,GeM\u001a\u0011\r\t5'1\u001bC$\u0003My\u0007/\u00169eCR,w\fR'`'~{\u0005oU;c+\u0011!\t\u0007\"\u001b\u0015\u0011\u0011\rD1\u000eC9\to\u0002\u0002\"!7\u0002\u0010\u0012\u0015Dq\r\t\u0007\u0003;\u000by\nb\u001a\u0011\t\tME\u0011\u000e\u0003\b\u0005/+%\u0019\u0001BM\u0011%!i'RA\u0001\u0002\b!y'A\u0006fm&$WM\\2fIM\"\u0004C\u0002BW\u0005g#9\u0007C\u0005\u0005t\u0015\u000b\t\u0011q\u0001\u0005v\u0005YQM^5eK:\u001cW\rJ\u001a6!\u0019\u0011iLa1\u0005h!IA\u0011P#\u0002\u0002\u0003\u000fA1P\u0001\fKZLG-\u001a8dK\u0012\u001ad\u0007\u0005\u0004\u0003N\nMGqM\u0001\u001a_B,\u0006\u000fZ1uK~#UjX*`\u001fBlU\u000f\\*dC2\f'/\u0006\u0003\u0005\u0002\u0012%E\u0003\u0003CB\t\u0017#\t\nb&\u0011\u0011\u0005]\u0018q\u0012CC\t\u000f\u0003b!!(\u0002 \u0012\u001d\u0005\u0003\u0002BJ\t\u0013#qAa&G\u0005\u0004\u0011I\nC\u0005\u0005\u000e\u001a\u000b\t\u0011q\u0001\u0005\u0010\u0006YQM^5eK:\u001cW\rJ\u001a8!\u0019\u0011iKa-\u0005\b\"IA1\u0013$\u0002\u0002\u0003\u000fAQS\u0001\fKZLG-\u001a8dK\u0012\u001a\u0004\b\u0005\u0004\u0003>\n\rGq\u0011\u0005\n\t33\u0015\u0011!a\u0002\t7\u000b1\"\u001a<jI\u0016t7-\u001a\u00134sA1!Q\u001aBj\t\u000f\u000b\u0011d\u001c9Va\u0012\fG/Z0E\u001b~\u001bvl\u00149Nk2l\u0015\r\u001e:jqV!A\u0011\u0015CU)!!\u0019\u000bb+\u00052\u0012]\u0006\u0003CBc\u0003\u001f#)\u000bb*\u0011\r\u0005u\u0015q\u0014CT!\u0011\u0011\u0019\n\"+\u0005\u000f\t]uI1\u0001\u0003\u001a\"IAQV$\u0002\u0002\u0003\u000fAqV\u0001\fKZLG-\u001a8dK\u0012\"\u0004\u0007\u0005\u0004\u0003.\nMFq\u0015\u0005\n\tg;\u0015\u0011!a\u0002\tk\u000b1\"\u001a<jI\u0016t7-\u001a\u00135cA1!Q\u0018Bb\tOC\u0011\u0002\"/H\u0003\u0003\u0005\u001d\u0001b/\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$CG\r\t\u0007\u0005\u001b\u0014\u0019\u000eb*\u0002'=\u0004X\u000b\u001d3bi\u0016|F)T0T?>\u0003H)\u001b<\u0016\t\u0011\u0005G\u0011\u001a\u000b\t\t\u0007$Y\r\"5\u0005XBA!QCAH\t\u000b$9\r\u0005\u0004\u0002\u001e\u0006}Eq\u0019\t\u0005\u0005'#I\rB\u0004\u0003\u0018\"\u0013\rA!'\t\u0013\u00115\u0007*!AA\u0004\u0011=\u0017aC3wS\u0012,gnY3%iM\u0002bA!,\u00034\u0012\u001d\u0007\"\u0003Cj\u0011\u0006\u0005\t9\u0001Ck\u0003-)g/\u001b3f]\u000e,G\u0005\u000e\u001b\u0011\r\tu&1\u0019Cd\u0011%!I\u000eSA\u0001\u0002\b!Y.A\u0006fm&$WM\\2fIQ*\u0004C\u0002Bg\u0005'$9-A\npaV\u0003H-\u0019;f?\u0012kulU0Pa6{G-\u0006\u0003\u0005b\u0012%H\u0003\u0003Cr\tW$\t\u0010b>\u0011\u0011\tE\u0013q\u0012Cs\tO\u0004b!!(\u0002 \u0012\u001d\b\u0003\u0002BJ\tS$qAa&J\u0005\u0004\u0011I\nC\u0005\u0005n&\u000b\t\u0011q\u0001\u0005p\u0006YQM^5eK:\u001cW\r\n\u001b7!\u0019\u0011iKa-\u0005h\"IA1_%\u0002\u0002\u0003\u000fAQ_\u0001\fKZLG-\u001a8dK\u0012\"t\u0007\u0005\u0004\u0003>\n\rGq\u001d\u0005\n\tsL\u0015\u0011!a\u0002\tw\f1\"\u001a<jI\u0016t7-\u001a\u00135qA1!Q\u001aBj\tO\f1c\u001c9Va\u0012\fG/Z0E\u001b~\u001bvl\u00149Q_^,B!\"\u0001\u0006\nQAQ1AC\u0006\u000b#)9\u0002\u0005\u0005\u0003p\u0005=UQAC\u0004!\u0019\ti*a(\u0006\bA!!1SC\u0005\t\u001d\u00119J\u0013b\u0001\u00053C\u0011\"\"\u0004K\u0003\u0003\u0005\u001d!b\u0004\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$C'\u000f\t\u0007\u0005[\u0013\u0019,b\u0002\t\u0013\u0015M!*!AA\u0004\u0015U\u0011aC3wS\u0012,gnY3%kA\u0002bA!0\u0003D\u0016\u001d\u0001\"CC\r\u0015\u0006\u0005\t9AC\u000e\u0003-)g/\u001b3f]\u000e,G%N\u0019\u0011\r\t5'1[C\u0004\u0003Ey\u0007o\u0018#N?N{\u0016J\u001c;`\u001fB\fE\rZ\u000b\u0003\u000bC\u0001\"\"!#\u0006$\u0005m\u00151UAN\u0013\u0011))#a%\u0003\u000b%k\u0007\u000f\u001c\u001a\u0002%=\u0004x\fR'`'~cuN\\4`\u001fB\fE\rZ\u000b\u0003\u000bW\u0001\"\"!#\u0006$\u0005-\u0017QZAf\u0003My\u0007o\u0018#N?N{f\t\\8bi~{\u0005/\u00113e+\t)\t\u0004\u0005\u0006\u0002\n\u0016\r\u0012QXA`\u0003{\u000bAc\u001c9`\t6{6k\u0018#pk\ndWmX(q\u0003\u0012$WCAC\u001c!)\tI)b\t\u00020\u0006E\u0016qV\u0001\u0012_B|F)T0T?&sGoX(q'V\u0014WCAC\u001f!)\tI.b\t\u0002\u001c\u0006\r\u00161T\u0001\u0013_B|F)T0T?2{gnZ0PaN+(-\u0006\u0002\u0006DAQ\u0011\u0011\\C\u0012\u0003\u0017\fi-a3\u0002'=\u0004x\fR'`'~3En\\1u?>\u00038+\u001e2\u0016\u0005\u0015%\u0003CCAm\u000bG\ti,a0\u0002>\u0006!r\u000e]0E\u001b~\u001bv\fR8vE2,wl\u00149Tk\n,\"!b\u0014\u0011\u0015\u0005eW1EAX\u0003c\u000by+A\fpa~#UjX*`\u0013:$xl\u00149Nk2\u001c6-\u00197beV\u0011QQ\u000b\t\u000b\u0003o,\u0019#a'\u0002$\u0006m\u0015\u0001G8q?\u0012kulU0M_:<wl\u00149Nk2\u001c6-\u00197beV\u0011Q1\f\t\u000b\u0003o,\u0019#a3\u0002N\u0006-\u0017!G8q?\u0012kulU0GY>\fGoX(q\u001bVd7kY1mCJ,\"!\"\u0019\u0011\u0015\u0005]X1EA_\u0003\u007f\u000bi,\u0001\u000epa~#UjX*`\t>,(\r\\3`\u001fBlU\u000f\\*dC2\f'/\u0006\u0002\u0006hAQ\u0011q_C\u0012\u0003_\u000b\t,a,\u0002/=\u0004x\fR'`'~Ke\u000e^0Pa6+H.T1ue&DXCAC7!)\u0019)-b\t\u0002\u001c\u0006\r\u00161T\u0001\u0019_B|F)T0T?2{gnZ0Pa6+H.T1ue&DXCAC:!)\u0019)-b\t\u0002L\u00065\u00171Z\u0001\u001a_B|F)T0T?\u001acw.\u0019;`\u001fBlU\u000f\\'biJL\u00070\u0006\u0002\u0006zAQ1QYC\u0012\u0003{\u000by,!0\u00025=\u0004x\fR'`'~#u.\u001e2mK~{\u0005/T;m\u001b\u0006$(/\u001b=\u0016\u0005\u0015}\u0004CCBc\u000bG\ty+!-\u00020\u0006\tr\u000e]0E\u001b~\u001bv,\u00138u?>\u0003Xj\u001c3\u0016\u0005\u0015\u0015\u0005C\u0003B)\u000bG\tY*a)\u0002\u001c\u0006\u0011r\u000e]0E\u001b~\u001bv\fT8oO~{\u0005/T8e+\t)Y\t\u0005\u0006\u0003R\u0015\r\u00121ZAg\u0003\u0017\f1c\u001c9`\t6{6k\u0018$m_\u0006$xl\u00149N_\u0012,\"!\"%\u0011\u0015\tES1EA_\u0003\u007f\u000bi,\u0001\u000bpa~#UjX*`\t>,(\r\\3`\u001fBlu\u000eZ\u000b\u0003\u000b/\u0003\"B!\u0015\u0006$\u0005=\u0016\u0011WAX\u0003Ey\u0007o\u0018#N?N{\u0016J\u001c;`\u001fB$\u0015N^\u000b\u0003\u000b;\u0003\"B!\u0006\u0006$\u0005m\u00151UAN\u0003Iy\u0007o\u0018#N?N{Fj\u001c8h?>\u0003H)\u001b<\u0016\u0005\u0015\r\u0006C\u0003B\u000b\u000bG\tY-!4\u0002L\u0006\u0019r\u000e]0E\u001b~\u001bvL\u00127pCR|v\n\u001d#jmV\u0011Q\u0011\u0016\t\u000b\u0005+)\u0019#!0\u0002@\u0006u\u0016\u0001F8q?\u0012kulU0E_V\u0014G.Z0Pa\u0012Kg/\u0006\u0002\u00060BQ!QCC\u0012\u0003_\u000b\t,a,\u0002#=\u0004x\fR'`'~Ke\u000e^0PaB{w/\u0006\u0002\u00066BQ!qNC\u0012\u00037\u000b\u0019+a'\u0002%=\u0004x\fR'`'~cuN\\4`\u001fB\u0004vn^\u000b\u0003\u000bw\u0003\"Ba\u001c\u0006$\u0005-\u0017QZAf\u0003My\u0007o\u0018#N?N{f\t\\8bi~{\u0005\u000fU8x+\t)\t\r\u0005\u0006\u0003p\u0015\r\u0012QXA`\u0003{\u000bAc\u001c9`\t6{6k\u0018#pk\ndWmX(q!><XCACd!)\u0011y'b\t\u00020\u0006E\u0016qV\u0001\u000e_B|F)T0T?>\u0003\u0018\t\u001a3\u0016\t\u00155WQ\u001b\u000b\t\u000b\u001f,9.\"8\u0006dBQ\u0011\u0011RC\u0012\u000b#,\u0019.\"5\u0011\r\u0005u\u0015qTCj!\u0011\u0011\u0019*\"6\u0005\u000f\t]uM1\u0001\u0003\u001a\"IQ\u0011\\4\u0002\u0002\u0003\u000fQ1\\\u0001\fKZLG-\u001a8dK\u0012*$\u0007\u0005\u0004\u0003.\nMV1\u001b\u0005\n\u000b?<\u0017\u0011!a\u0002\u000bC\f1\"\u001a<jI\u0016t7-\u001a\u00136gA1!Q\u0018Bb\u000b'D\u0011\"\":h\u0003\u0003\u0005\u001d!b:\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$S\u0007\u000e\t\u0007\u0005\u001b\u0014\u0019.b5\u0002\u001b=\u0004x\fR'`'~{\u0005oU;c+\u0011)i/\">\u0015\u0011\u0015=Xq_C\u007f\r\u0007\u0001\"\"!7\u0006$\u0015EX1_Cy!\u0019\ti*a(\u0006tB!!1SC{\t\u001d\u00119\n\u001bb\u0001\u00053C\u0011\"\"?i\u0003\u0003\u0005\u001d!b?\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$S'\u000e\t\u0007\u0005[\u0013\u0019,b=\t\u0013\u0015}\b.!AA\u0004\u0019\u0005\u0011aC3wS\u0012,gnY3%kY\u0002bA!0\u0003D\u0016M\b\"\u0003D\u0003Q\u0006\u0005\t9\u0001D\u0004\u0003-)g/\u001b3f]\u000e,G%N\u001c\u0011\r\t5'1[Cz\u0003My\u0007o\u0018#N?N{v\n]'vYN\u001b\u0017\r\\1s+\u00111iA\"\u0006\u0015\u0011\u0019=aq\u0003D\u000f\rG\u0001\"\"a>\u0006$\u0019Ea1\u0003D\t!\u0019\ti*a(\u0007\u0014A!!1\u0013D\u000b\t\u001d\u00119*\u001bb\u0001\u00053C\u0011B\"\u0007j\u0003\u0003\u0005\u001dAb\u0007\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$S\u0007\u000f\t\u0007\u0005[\u0013\u0019Lb\u0005\t\u0013\u0019}\u0011.!AA\u0004\u0019\u0005\u0012aC3wS\u0012,gnY3%ke\u0002bA!0\u0003D\u001aM\u0001\"\u0003D\u0013S\u0006\u0005\t9\u0001D\u0014\u0003-)g/\u001b3f]\u000e,GE\u000e\u0019\u0011\r\t5'1\u001bD\n\u0003My\u0007o\u0018#N?N{v\n]'vY6\u000bGO]5y+\u00111iC\"\u000e\u0015\u0011\u0019=bq\u0007D\u001f\r\u0007\u0002\"b!2\u0006$\u0019Eb1\u0007D\u0019!\u0019\ti*a(\u00074A!!1\u0013D\u001b\t\u001d\u00119J\u001bb\u0001\u00053C\u0011B\"\u000fk\u0003\u0003\u0005\u001dAb\u000f\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$c'\r\t\u0007\u0005[\u0013\u0019Lb\r\t\u0013\u0019}\".!AA\u0004\u0019\u0005\u0013aC3wS\u0012,gnY3%mI\u0002bA!0\u0003D\u001aM\u0002\"\u0003D#U\u0006\u0005\t9\u0001D$\u0003-)g/\u001b3f]\u000e,GEN\u001a\u0011\r\t5'1\u001bD\u001a\u00035y\u0007o\u0018#N?N{v\n\u001d#jmV!aQ\nD+)!1yEb\u0016\u0007^\u0019\r\u0004C\u0003B\u000b\u000bG1\tFb\u0015\u0007RA1\u0011QTAP\r'\u0002BAa%\u0007V\u00119!qS6C\u0002\te\u0005\"\u0003D-W\u0006\u0005\t9\u0001D.\u0003-)g/\u001b3f]\u000e,GE\u000e\u001b\u0011\r\t5&1\u0017D*\u0011%1yf[A\u0001\u0002\b1\t'A\u0006fm&$WM\\2fIY*\u0004C\u0002B_\u0005\u00074\u0019\u0006C\u0005\u0007f-\f\t\u0011q\u0001\u0007h\u0005YQM^5eK:\u001cW\r\n\u001c7!\u0019\u0011iMa5\u0007T\u0005iq\u000e]0E\u001b~\u001bvl\u00149N_\u0012,BA\"\u001c\u0007vQAaq\u000eD<\r{2\u0019\t\u0005\u0006\u0003R\u0015\rb\u0011\u000fD:\rc\u0002b!!(\u0002 \u001aM\u0004\u0003\u0002BJ\rk\"qAa&m\u0005\u0004\u0011I\nC\u0005\u0007z1\f\t\u0011q\u0001\u0007|\u0005YQM^5eK:\u001cW\r\n\u001c8!\u0019\u0011iKa-\u0007t!Iaq\u00107\u0002\u0002\u0003\u000fa\u0011Q\u0001\fKZLG-\u001a8dK\u00122\u0004\b\u0005\u0004\u0003>\n\rg1\u000f\u0005\n\r\u000bc\u0017\u0011!a\u0002\r\u000f\u000b1\"\u001a<jI\u0016t7-\u001a\u00137sA1!Q\u001aBj\rg\nQb\u001c9`\t6{6kX(q!><X\u0003\u0002DG\r+#\u0002Bb$\u0007\u0018\u001aue1\u0015\t\u000b\u0005_*\u0019C\"%\u0007\u0014\u001aE\u0005CBAO\u0003?3\u0019\n\u0005\u0003\u0003\u0014\u001aUEa\u0002BL[\n\u0007!\u0011\u0014\u0005\n\r3k\u0017\u0011!a\u0002\r7\u000b1\"\u001a<jI\u0016t7-\u001a\u00138aA1!Q\u0016BZ\r'C\u0011Bb(n\u0003\u0003\u0005\u001dA\")\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$s'\r\t\u0007\u0005{\u0013\u0019Mb%\t\u0013\u0019\u0015V.!AA\u0004\u0019\u001d\u0016aC3wS\u0012,gnY3%oI\u0002bA!4\u0003T\u001aM\u0015!E:`I6|v\u000e]0J]R|v\n]!eIV\u0011aQ\u0016\t\u000b\u0003\u0013+\u0019#a)\u0002\u001c\u0006m\u0015\u0001F:`I6|v\u000e]0E_V\u0014G.Z0Pa\u0006#G-\u0006\u0002\u00074BQ\u0011\u0011RC\u0012\u0003c\u000by+a,\u0002'M|F-\\0pa~3En\\1u?>\u0003\u0018\t\u001a3\u0016\u0005\u0019e\u0006CCAE\u000bG\ty,!0\u0002>\u0006\u00112o\u00183n?>\u0004x\fT8oO~{\u0005/\u00113e+\t1y\f\u0005\u0006\u0002\n\u0016\r\u0012QZAf\u0003\u0017\f\u0011c]0e[~{\u0007oX%oi~{\u0005oU;c+\t1)\r\u0005\u0006\u0002Z\u0016\r\u00121UAN\u00037\u000bAc]0e[~{\u0007o\u0018#pk\ndWmX(q'V\u0014WC\u0001Df!)\tI.b\t\u00022\u0006=\u0016qV\u0001\u0014g~#WnX8q?\u001acw.\u0019;`\u001fB\u001cVOY\u000b\u0003\r#\u0004\"\"!7\u0006$\u0005}\u0016QXA_\u0003I\u0019x\fZ7`_B|Fj\u001c8h?>\u00038+\u001e2\u0016\u0005\u0019]\u0007CCAm\u000bG\ti-a3\u0002L\u000692o\u00183n?>\u0004x,\u00138u?>\u0003X*\u001e7TG\u0006d\u0017M]\u000b\u0003\r;\u0004\"\"a>\u0006$\u0005\r\u00161TAN\u0003i\u0019x\fZ7`_B|Fi\\;cY\u0016|v\n]'vYN\u001b\u0017\r\\1s+\t1\u0019\u000f\u0005\u0006\u0002x\u0016\r\u0012\u0011WAX\u0003_\u000b\u0011d]0e[~{\u0007o\u0018$m_\u0006$xl\u00149Nk2\u001c6-\u00197beV\u0011a\u0011\u001e\t\u000b\u0003o,\u0019#a0\u0002>\u0006u\u0016\u0001G:`I6|v\u000e]0M_:<wl\u00149Nk2\u001c6-\u00197beV\u0011aq\u001e\t\u000b\u0003o,\u0019#!4\u0002L\u0006-\u0017aF:`I6|v\u000e]0J]R|v\n]'vY6\u000bGO]5y+\t1)\u0010\u0005\u0006\u0004F\u0016\r\u00121UAN\u00037\u000b!d]0e[~{\u0007o\u0018#pk\ndWmX(q\u001bVdW*\u0019;sSb,\"Ab?\u0011\u0015\r\u0015W1EAY\u0003_\u000by+A\rt?\u0012lwl\u001c9`\r2|\u0017\r^0Pa6+H.T1ue&DXCAD\u0001!)\u0019)-b\t\u0002@\u0006u\u0016QX\u0001\u0019g~#WnX8q?2{gnZ0Pa6+H.T1ue&DXCAD\u0004!)\u0019)-b\t\u0002N\u0006-\u00171Z\u0001\u0012g~#WnX8q?&sGoX(q\t&4XCAD\u0007!)\u0011)\"b\t\u0002$\u0006m\u00151T\u0001\u0015g~#WnX8q?\u0012{WO\u00197f?>\u0003H)\u001b<\u0016\u0005\u001dM\u0001C\u0003B\u000b\u000bG\t\t,a,\u00020\u0006\u00192o\u00183n?>\u0004xL\u00127pCR|v\n\u001d#jmV\u0011q\u0011\u0004\t\u000b\u0005+)\u0019#a0\u0002>\u0006u\u0016AE:`I6|v\u000e]0M_:<wl\u00149ESZ,\"ab\b\u0011\u0015\tUQ1EAg\u0003\u0017\fY-A\tt?\u0012lwl\u001c9`\u0013:$xl\u00149N_\u0012,\"a\"\n\u0011\u0015\tES1EAR\u00037\u000bY*\u0001\u000bt?\u0012lwl\u001c9`\t>,(\r\\3`\u001fBlu\u000eZ\u000b\u0003\u000fW\u0001\"B!\u0015\u0006$\u0005E\u0016qVAX\u0003M\u0019x\fZ7`_B|f\t\\8bi~{\u0005/T8e+\t9\t\u0004\u0005\u0006\u0003R\u0015\r\u0012qXA_\u0003{\u000b!c]0e[~{\u0007o\u0018'p]\u001e|v\n]'pIV\u0011qq\u0007\t\u000b\u0005#*\u0019#!4\u0002L\u0006-\u0017!E:`I6|v\u000e]0J]R|v\n\u001d)poV\u0011qQ\b\t\u000b\u0005_*\u0019#a)\u0002\u001c\u0006m\u0015\u0001F:`I6|v\u000e]0E_V\u0014G.Z0PaB{w/\u0006\u0002\bDAQ!qNC\u0012\u0003c\u000by+a,\u0002'M|F-\\0pa~3En\\1u?>\u0003\bk\\<\u0016\u0005\u001d%\u0003C\u0003B8\u000bG\ty,!0\u0002>\u0006\u00112o\u00183n?>\u0004x\fT8oO~{\u0005\u000fU8x+\t9y\u0005\u0005\u0006\u0003p\u0015\r\u0012QZAf\u0003\u0017\fqa]0e[~{\u0007/\u0006\u0005\bV\u001d]t\u0011ND@)!99fb!\b\n\u001e=\u0005\u0003DD-\u000fC:9g\"\u001e\bz\u001dmd\u0002BD.\u000f;j!!a&\n\t\u001d}\u0013qS\u0001\u0006+\u001a+hnY\u0005\u0005\u000fG:)G\u0001\u0004V\u00136\u0004HN\r\u0006\u0005\u000f?\n9\n\u0005\u0003\u0003\u0014\u001e%D\u0001CD6\u0003+\u0011\ra\"\u001c\u0003\u0005=\u0003\u0018\u0003\u0002BN\u000f_\u0002B!a\u001a\br%!q1OA%\u0005\u0019y\u0005\u000fV=qKB!!1SD<\t!\u00119*!\u0006C\u0002\te\u0005CBAO\u0003?;)\b\u0005\u0004\u0002\u001e\u0006}uQ\u0010\t\u0005\u0005';y\b\u0002\u0005\b\u0002\u0006U!\u0019\u0001BM\u0005\u0005)\u0006\u0002CDC\u0003+\u0001\u001dab\"\u0002\u0011=\u00048kY1mCJ\u0004Bb\"\u0017\bb\u001d\u001dtQOD;\u000f{B\u0001bb#\u0002\u0016\u0001\u000fqQR\u0001\u0003GR\u0004bA!4\u0003T\u001eu\u0004\u0002CDI\u0003+\u0001\u001dab%\u0002\ti,'o\u001c\t\u0007\u0005{\u0013\u0019m\" \u0002%=\u0004x\fR'`\t6{\u0016J\u001c;`\u001fB\fE\rZ\u000b\u0003\u000f3\u0003\"\"!#\u0006$\u0005m\u00151TAN\u0003My\u0007o\u0018#N?\u0012ku\fT8oO~{\u0005/\u00113e+\t9y\n\u0005\u0006\u0002\n\u0016\r\u00121ZAf\u0003\u0017\fAc\u001c9`\t6{F)T0GY>\fGoX(q\u0003\u0012$WCADS!)\tI)b\t\u0002>\u0006u\u0016QX\u0001\u0016_B|F)T0E\u001b~#u.\u001e2mK~{\u0005/\u00113e+\t9Y\u000b\u0005\u0006\u0002\n\u0016\r\u0012qVAX\u0003_\u000b!c\u001c9`\t6{F)T0J]R|v\n]*vEV\u0011q\u0011\u0017\t\u000b\u00033,\u0019#a'\u0002\u001c\u0006m\u0015aE8q?\u0012ku\fR'`\u0019>twmX(q'V\u0014WCAD\\!)\tI.b\t\u0002L\u0006-\u00171Z\u0001\u0015_B|F)T0E\u001b~3En\\1u?>\u00038+\u001e2\u0016\u0005\u001du\u0006CCAm\u000bG\ti,!0\u0002>\u0006)r\u000e]0E\u001b~#Uj\u0018#pk\ndWmX(q'V\u0014WCADb!)\tI.b\t\u00020\u0006=\u0016qV\u0001\u0019_B|F)T0E\u001b~Ke\u000e^0Pa6+HnU2bY\u0006\u0014XCADe!)\t90b\t\u0002\u001c\u0006m\u00151T\u0001\u001a_B|F)T0E\u001b~cuN\\4`\u001fBlU\u000f\\*dC2\f'/\u0006\u0002\bPBQ\u0011q_C\u0012\u0003\u0017\fY-a3\u00025=\u0004x\fR'`\t6{f\t\\8bi~{\u0005/T;m'\u000e\fG.\u0019:\u0016\u0005\u001dU\u0007CCA|\u000bG\ti,!0\u0002>\u0006Yr\u000e]0E\u001b~#Uj\u0018#pk\ndWmX(q\u001bVd7kY1mCJ,\"ab7\u0011\u0015\u0005]X1EAX\u0003_\u000by+\u0001\npa~#Uj\u0018#N?&sGoX(q\u001b>$WCADq!)\u0011\t&b\t\u0002\u001c\u0006m\u00151T\u0001\u0014_B|F)T0E\u001b~cuN\\4`\u001fBlu\u000eZ\u000b\u0003\u000fO\u0004\"B!\u0015\u0006$\u0005-\u00171ZAf\u0003Qy\u0007o\u0018#N?\u0012kuL\u00127pCR|v\n]'pIV\u0011qQ\u001e\t\u000b\u0005#*\u0019#!0\u0002>\u0006u\u0016!F8q?\u0012ku\fR'`\t>,(\r\\3`\u001fBlu\u000eZ\u000b\u0003\u000fg\u0004\"B!\u0015\u0006$\u0005=\u0016qVAX\u0003Iy\u0007o\u0018#N?\u0012ku,\u00138u?>\u0003H)\u001b<\u0016\u0005\u001de\bC\u0003B\u000b\u000bG\tY*a'\u0002\u001c\u0006\u0019r\u000e]0E\u001b~#Uj\u0018'p]\u001e|v\n\u001d#jmV\u0011qq \t\u000b\u0005+)\u0019#a3\u0002L\u0006-\u0017\u0001F8q?\u0012ku\fR'`\r2|\u0017\r^0Pa\u0012Kg/\u0006\u0002\t\u0006AQ!QCC\u0012\u0003{\u000bi,!0\u0002+=\u0004x\fR'`\t6{Fi\\;cY\u0016|v\n\u001d#jmV\u0011\u00012\u0002\t\u000b\u0005+)\u0019#a,\u00020\u0006=\u0016AE8q?\u0012ku\fR'`\u0013:$xl\u00149Q_^,\"\u0001#\u0005\u0011\u0015\t=T1EAN\u00037\u000bY*A\npa~#Uj\u0018#N?2{gnZ0PaB{w/\u0006\u0002\t\u0018AQ!qNC\u0012\u0003\u0017\fY-a3\u0002)=\u0004x\fR'`\t6{f\t\\8bi~{\u0005\u000fU8x+\tAi\u0002\u0005\u0006\u0003p\u0015\r\u0012QXA_\u0003{\u000bQc\u001c9`\t6{F)T0E_V\u0014G.Z0PaB{w/\u0006\u0002\t$AQ!qNC\u0012\u0003_\u000by+a,"
)
public interface DenseMatrixExpandedOps extends DenseMatrix_GenericOps, DenseMatrix_TraversalOps {
   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpAdd_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpAdd_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpAdd_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpAdd_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpSub_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpSub_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpSub_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpSub_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpMulScalar_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpMulScalar_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpMulScalar_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpMulScalar_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpDiv_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpDiv_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpDiv_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpDiv_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpSet_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpSet_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpSet_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpSet_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpMod_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpMod_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpMod_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpMod_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpPow_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpPow_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpPow_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpPow_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpAdd_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpAdd_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpAdd_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpAdd_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpSub_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpSub_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpSub_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpSub_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpMulScalar_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpMulScalar_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpMulScalar_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpMulScalar_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpMulMatrix_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpMulMatrix_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpMulMatrix_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpMulMatrix_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpDiv_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpDiv_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpDiv_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpDiv_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpSet_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpSet_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpSet_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpSet_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpMod_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpMod_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpMod_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpMod_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpPow_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpPow_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpPow_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpPow_$eq(final UFunc.InPlaceImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpMulMatrix_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpMulMatrix_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpMulMatrix_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpMulMatrix_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpPow_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpPow_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpPow_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpPow_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpMulMatrix_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpMulMatrix_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpMulMatrix_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpMulMatrix_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpPow_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpPow_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpPow_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpPow_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpAdd_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpSub_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpMulScalar_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpMod_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpDiv_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpPow_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpPow_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpPow_$eq(final UFunc.UImpl2 x$1);

   void breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpPow_$eq(final UFunc.UImpl2 x$1);

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Int_OpAdd();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Double_OpAdd();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Float_OpAdd();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Long_OpAdd();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Int_OpSub();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Double_OpSub();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Float_OpSub();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Long_OpSub();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Int_OpMulScalar();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Double_OpMulScalar();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Float_OpMulScalar();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Long_OpMulScalar();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Int_OpDiv();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Double_OpDiv();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Float_OpDiv();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Long_OpDiv();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Int_OpSet();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Double_OpSet();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Float_OpSet();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Long_OpSet();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Int_OpMod();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Double_OpMod();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Float_OpMod();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Long_OpMod();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Int_OpPow();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Double_OpPow();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Float_OpPow();

   UFunc.InPlaceImpl2 dm_dm_UpdateOp_Long_OpPow();

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpAdd$(final DenseMatrixExpandedOps $this, final Field evidence$13, final Zero evidence$14, final ClassTag evidence$15) {
      return $this.dm_dm_UpdateOp_OpAdd(evidence$13, evidence$14, evidence$15);
   }

   default UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpAdd(final Field evidence$13, final Zero evidence$14, final ClassTag evidence$15) {
      Field f = (Field).MODULE$.implicitly(evidence$13);
      return new UFunc.InPlaceImpl2(evidence$13, evidence$14, evidence$15, f) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final Field evidence$13$1;
         private final Zero evidence$14$1;
         private final ClassTag evidence$15$1;
         private final Field f$1;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            Object ad = a.data();
            Object bd = b.data();
            if (a != b && a.overlaps(b)) {
               DenseMatrix ac = a.copy();
               this.apply(ac, b);
               a.$colon$eq(ac, this.$outer.castUpdateOps_M_M(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), this.$outer.m_m_UpdateOp_OpSet(this.evidence$13$1, this.evidence$14$1, this.evidence$15$1)));
            } else {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$1.$plus(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), scala.runtime.ScalaRunTime..MODULE$.array_apply(bd, b.linearIndex(r, c))))).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$13$1 = evidence$13$1;
               this.evidence$14$1 = evidence$14$1;
               this.evidence$15$1 = evidence$15$1;
               this.f$1 = f$1;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_OpAdd(evidence$13$1, evidence$14$1, evidence$15$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpSub$(final DenseMatrixExpandedOps $this, final Field evidence$16, final Zero evidence$17, final ClassTag evidence$18) {
      return $this.dm_dm_UpdateOp_OpSub(evidence$16, evidence$17, evidence$18);
   }

   default UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpSub(final Field evidence$16, final Zero evidence$17, final ClassTag evidence$18) {
      Field f = (Field).MODULE$.implicitly(evidence$16);
      return new UFunc.InPlaceImpl2(evidence$16, evidence$17, evidence$18, f) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final Field evidence$16$1;
         private final Zero evidence$17$1;
         private final ClassTag evidence$18$1;
         private final Field f$2;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            Object ad = a.data();
            Object bd = b.data();
            if (a != b && a.overlaps(b)) {
               DenseMatrix ac = a.copy();
               this.apply(ac, b);
               a.$colon$eq(ac, this.$outer.castUpdateOps_M_M(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), this.$outer.m_m_UpdateOp_OpSet(this.evidence$16$1, this.evidence$17$1, this.evidence$18$1)));
            } else {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$2.$minus(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), scala.runtime.ScalaRunTime..MODULE$.array_apply(bd, b.linearIndex(r, c))))).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$16$1 = evidence$16$1;
               this.evidence$17$1 = evidence$17$1;
               this.evidence$18$1 = evidence$18$1;
               this.f$2 = f$2;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_OpSub(evidence$16$1, evidence$17$1, evidence$18$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpMulScalar$(final DenseMatrixExpandedOps $this, final Field evidence$19, final Zero evidence$20, final ClassTag evidence$21) {
      return $this.dm_dm_UpdateOp_OpMulScalar(evidence$19, evidence$20, evidence$21);
   }

   default UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpMulScalar(final Field evidence$19, final Zero evidence$20, final ClassTag evidence$21) {
      Field f = (Field).MODULE$.implicitly(evidence$19);
      return new UFunc.InPlaceImpl2(evidence$19, evidence$20, evidence$21, f) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final Field evidence$19$1;
         private final Zero evidence$20$1;
         private final ClassTag evidence$21$1;
         private final Field f$3;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            Object ad = a.data();
            Object bd = b.data();
            if (a != b && a.overlaps(b)) {
               DenseMatrix ac = a.copy();
               this.apply(ac, b);
               a.$colon$eq(ac, this.$outer.castUpdateOps_M_M(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), this.$outer.m_m_UpdateOp_OpSet(this.evidence$19$1, this.evidence$20$1, this.evidence$21$1)));
            } else {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$3.$times(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), scala.runtime.ScalaRunTime..MODULE$.array_apply(bd, b.linearIndex(r, c))))).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$19$1 = evidence$19$1;
               this.evidence$20$1 = evidence$20$1;
               this.evidence$21$1 = evidence$21$1;
               this.f$3 = f$3;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_OpMulScalar(evidence$19$1, evidence$20$1, evidence$21$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpDiv$(final DenseMatrixExpandedOps $this, final Field evidence$22, final Zero evidence$23, final ClassTag evidence$24) {
      return $this.dm_dm_UpdateOp_OpDiv(evidence$22, evidence$23, evidence$24);
   }

   default UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpDiv(final Field evidence$22, final Zero evidence$23, final ClassTag evidence$24) {
      Field f = (Field).MODULE$.implicitly(evidence$22);
      return new UFunc.InPlaceImpl2(evidence$22, evidence$23, evidence$24, f) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final Field evidence$22$1;
         private final Zero evidence$23$1;
         private final ClassTag evidence$24$1;
         private final Field f$4;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            Object ad = a.data();
            Object bd = b.data();
            if (a != b && a.overlaps(b)) {
               DenseMatrix ac = a.copy();
               this.apply(ac, b);
               a.$colon$eq(ac, this.$outer.castUpdateOps_M_M(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), this.$outer.m_m_UpdateOp_OpSet(this.evidence$22$1, this.evidence$23$1, this.evidence$24$1)));
            } else {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$4.$div(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), scala.runtime.ScalaRunTime..MODULE$.array_apply(bd, b.linearIndex(r, c))))).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$22$1 = evidence$22$1;
               this.evidence$23$1 = evidence$23$1;
               this.evidence$24$1 = evidence$24$1;
               this.f$4 = f$4;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_OpDiv(evidence$22$1, evidence$23$1, evidence$24$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpMod$(final DenseMatrixExpandedOps $this, final Field evidence$25, final Zero evidence$26, final ClassTag evidence$27) {
      return $this.dm_dm_UpdateOp_OpMod(evidence$25, evidence$26, evidence$27);
   }

   default UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpMod(final Field evidence$25, final Zero evidence$26, final ClassTag evidence$27) {
      Field f = (Field).MODULE$.implicitly(evidence$25);
      return new UFunc.InPlaceImpl2(evidence$25, evidence$26, evidence$27, f) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final Field evidence$25$1;
         private final Zero evidence$26$1;
         private final ClassTag evidence$27$1;
         private final Field f$5;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            Object ad = a.data();
            Object bd = b.data();
            if (a != b && a.overlaps(b)) {
               DenseMatrix ac = a.copy();
               this.apply(ac, b);
               a.$colon$eq(ac, this.$outer.castUpdateOps_M_M(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), this.$outer.m_m_UpdateOp_OpSet(this.evidence$25$1, this.evidence$26$1, this.evidence$27$1)));
            } else {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$5.$percent(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), scala.runtime.ScalaRunTime..MODULE$.array_apply(bd, b.linearIndex(r, c))))).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$25$1 = evidence$25$1;
               this.evidence$26$1 = evidence$26$1;
               this.evidence$27$1 = evidence$27$1;
               this.f$5 = f$5;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_OpMod(evidence$25$1, evidence$26$1, evidence$27$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpPow$(final DenseMatrixExpandedOps $this, final Field evidence$28, final Zero evidence$29, final ClassTag evidence$30) {
      return $this.dm_dm_UpdateOp_OpPow(evidence$28, evidence$29, evidence$30);
   }

   default UFunc.InPlaceImpl2 dm_dm_UpdateOp_OpPow(final Field evidence$28, final Zero evidence$29, final ClassTag evidence$30) {
      Field f = (Field).MODULE$.implicitly(evidence$28);
      return new UFunc.InPlaceImpl2(evidence$28, evidence$29, evidence$30, f) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final Field evidence$28$1;
         private final Zero evidence$29$1;
         private final ClassTag evidence$30$1;
         private final Field f$6;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            Object ad = a.data();
            Object bd = b.data();
            if (a != b && a.overlaps(b)) {
               DenseMatrix ac = a.copy();
               this.apply(ac, b);
               a.$colon$eq(ac, this.$outer.castUpdateOps_M_M(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), this.$outer.m_m_UpdateOp_OpSet(this.evidence$28$1, this.evidence$29$1, this.evidence$30$1)));
            } else {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$6.pow(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), scala.runtime.ScalaRunTime..MODULE$.array_apply(bd, b.linearIndex(r, c))))).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$28$1 = evidence$28$1;
               this.evidence$29$1 = evidence$29$1;
               this.evidence$30$1 = evidence$30$1;
               this.f$6 = f$6;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_OpPow(evidence$28$1, evidence$29$1, evidence$30$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Int_OpAdd();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Double_OpAdd();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Float_OpAdd();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Long_OpAdd();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Int_OpSub();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Double_OpSub();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Float_OpSub();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Long_OpSub();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Int_OpMulScalar();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Double_OpMulScalar();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Float_OpMulScalar();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Long_OpMulScalar();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Int_OpMulMatrix();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Double_OpMulMatrix();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Float_OpMulMatrix();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Long_OpMulMatrix();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Int_OpDiv();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Double_OpDiv();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Float_OpDiv();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Long_OpDiv();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Int_OpSet();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Double_OpSet();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Float_OpSet();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Long_OpSet();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Int_OpMod();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Double_OpMod();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Float_OpMod();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Long_OpMod();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Int_OpPow();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Double_OpPow();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Float_OpPow();

   UFunc.InPlaceImpl2 dm_s_UpdateOp_Long_OpPow();

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 opUpdate_DM_S_OpAdd$(final DenseMatrixExpandedOps $this, final Field evidence$31, final Zero evidence$32, final ClassTag evidence$33) {
      return $this.opUpdate_DM_S_OpAdd(evidence$31, evidence$32, evidence$33);
   }

   default UFunc.InPlaceImpl2 opUpdate_DM_S_OpAdd(final Field evidence$31, final Zero evidence$32, final ClassTag evidence$33) {
      Field f = (Field).MODULE$.implicitly(evidence$31);
      return new UFunc.InPlaceImpl2(evidence$31, evidence$32, evidence$33, f) {
         private final Field f$7;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final Object b) {
            Object ad = a.data();
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$7.$plus(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), b))).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

         }

         public {
            this.f$7 = f$7;
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_OpAdd(evidence$31$1, evidence$32$1, evidence$33$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$33$1);
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 opUpdate_DM_S_OpSub$(final DenseMatrixExpandedOps $this, final Field evidence$34, final Zero evidence$35, final ClassTag evidence$36) {
      return $this.opUpdate_DM_S_OpSub(evidence$34, evidence$35, evidence$36);
   }

   default UFunc.InPlaceImpl2 opUpdate_DM_S_OpSub(final Field evidence$34, final Zero evidence$35, final ClassTag evidence$36) {
      Field f = (Field).MODULE$.implicitly(evidence$34);
      return new UFunc.InPlaceImpl2(evidence$34, evidence$35, evidence$36, f) {
         private final Field f$8;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final Object b) {
            Object ad = a.data();
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$8.$minus(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), b))).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

         }

         public {
            this.f$8 = f$8;
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_OpSub(evidence$34$1, evidence$35$1, evidence$36$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$36$1);
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 opUpdate_DM_S_OpMulScalar$(final DenseMatrixExpandedOps $this, final Field evidence$37, final Zero evidence$38, final ClassTag evidence$39) {
      return $this.opUpdate_DM_S_OpMulScalar(evidence$37, evidence$38, evidence$39);
   }

   default UFunc.InPlaceImpl2 opUpdate_DM_S_OpMulScalar(final Field evidence$37, final Zero evidence$38, final ClassTag evidence$39) {
      Field f = (Field).MODULE$.implicitly(evidence$37);
      return new UFunc.InPlaceImpl2(evidence$37, evidence$38, evidence$39, f) {
         private final Field f$9;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final Object b) {
            Object ad = a.data();
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$9.$times(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), b))).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

         }

         public {
            this.f$9 = f$9;
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_OpMulScalar(evidence$37$1, evidence$38$1, evidence$39$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$39$1);
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 opUpdate_DM_S_OpMulMatrix$(final DenseMatrixExpandedOps $this, final Field evidence$40, final Zero evidence$41, final ClassTag evidence$42) {
      return $this.opUpdate_DM_S_OpMulMatrix(evidence$40, evidence$41, evidence$42);
   }

   default UFunc.InPlaceImpl2 opUpdate_DM_S_OpMulMatrix(final Field evidence$40, final Zero evidence$41, final ClassTag evidence$42) {
      Field f = (Field).MODULE$.implicitly(evidence$40);
      return new UFunc.InPlaceImpl2(evidence$40, evidence$41, evidence$42, f) {
         private final Field f$10;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final Object b) {
            Object ad = a.data();
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$10.$times(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), b))).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

         }

         public {
            this.f$10 = f$10;
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_OpMulMatrix(evidence$40$1, evidence$41$1, evidence$42$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$42$1);
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 opUpdate_DM_S_OpDiv$(final DenseMatrixExpandedOps $this, final Field evidence$43, final Zero evidence$44, final ClassTag evidence$45) {
      return $this.opUpdate_DM_S_OpDiv(evidence$43, evidence$44, evidence$45);
   }

   default UFunc.InPlaceImpl2 opUpdate_DM_S_OpDiv(final Field evidence$43, final Zero evidence$44, final ClassTag evidence$45) {
      Field f = (Field).MODULE$.implicitly(evidence$43);
      return new UFunc.InPlaceImpl2(evidence$43, evidence$44, evidence$45, f) {
         private final Field f$11;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final Object b) {
            Object ad = a.data();
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$11.$div(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), b))).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

         }

         public {
            this.f$11 = f$11;
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_OpDiv(evidence$43$1, evidence$44$1, evidence$45$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$45$1);
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 opUpdate_DM_S_OpMod$(final DenseMatrixExpandedOps $this, final Field evidence$46, final Zero evidence$47, final ClassTag evidence$48) {
      return $this.opUpdate_DM_S_OpMod(evidence$46, evidence$47, evidence$48);
   }

   default UFunc.InPlaceImpl2 opUpdate_DM_S_OpMod(final Field evidence$46, final Zero evidence$47, final ClassTag evidence$48) {
      Field f = (Field).MODULE$.implicitly(evidence$46);
      return new UFunc.InPlaceImpl2(evidence$46, evidence$47, evidence$48, f) {
         private final Field f$12;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final Object b) {
            Object ad = a.data();
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$12.$percent(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), b))).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

         }

         public {
            this.f$12 = f$12;
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_OpMod(evidence$46$1, evidence$47$1, evidence$48$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$48$1);
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   // $FF: synthetic method
   static UFunc.InPlaceImpl2 opUpdate_DM_S_OpPow$(final DenseMatrixExpandedOps $this, final Field evidence$49, final Zero evidence$50, final ClassTag evidence$51) {
      return $this.opUpdate_DM_S_OpPow(evidence$49, evidence$50, evidence$51);
   }

   default UFunc.InPlaceImpl2 opUpdate_DM_S_OpPow(final Field evidence$49, final Zero evidence$50, final ClassTag evidence$51) {
      Field f = (Field).MODULE$.implicitly(evidence$49);
      return new UFunc.InPlaceImpl2(evidence$49, evidence$50, evidence$51, f) {
         private final Field f$13;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final Object b) {
            Object ad = a.data();
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> scala.runtime.ScalaRunTime..MODULE$.array_update(ad, a.linearIndex(r, c), this.f$13.pow(scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c)), b))).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

         }

         public {
            this.f$13 = f$13;
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_OpPow(evidence$49$1, evidence$50$1, evidence$51$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$51$1);
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   UFunc.UImpl2 op_DM_S_Int_OpAdd();

   UFunc.UImpl2 op_DM_S_Long_OpAdd();

   UFunc.UImpl2 op_DM_S_Float_OpAdd();

   UFunc.UImpl2 op_DM_S_Double_OpAdd();

   UFunc.UImpl2 op_DM_S_Int_OpSub();

   UFunc.UImpl2 op_DM_S_Long_OpSub();

   UFunc.UImpl2 op_DM_S_Float_OpSub();

   UFunc.UImpl2 op_DM_S_Double_OpSub();

   UFunc.UImpl2 op_DM_S_Int_OpMulScalar();

   UFunc.UImpl2 op_DM_S_Long_OpMulScalar();

   UFunc.UImpl2 op_DM_S_Float_OpMulScalar();

   UFunc.UImpl2 op_DM_S_Double_OpMulScalar();

   UFunc.UImpl2 op_DM_S_Int_OpMulMatrix();

   UFunc.UImpl2 op_DM_S_Long_OpMulMatrix();

   UFunc.UImpl2 op_DM_S_Float_OpMulMatrix();

   UFunc.UImpl2 op_DM_S_Double_OpMulMatrix();

   UFunc.UImpl2 op_DM_S_Int_OpMod();

   UFunc.UImpl2 op_DM_S_Long_OpMod();

   UFunc.UImpl2 op_DM_S_Float_OpMod();

   UFunc.UImpl2 op_DM_S_Double_OpMod();

   UFunc.UImpl2 op_DM_S_Int_OpDiv();

   UFunc.UImpl2 op_DM_S_Long_OpDiv();

   UFunc.UImpl2 op_DM_S_Float_OpDiv();

   UFunc.UImpl2 op_DM_S_Double_OpDiv();

   UFunc.UImpl2 op_DM_S_Int_OpPow();

   UFunc.UImpl2 op_DM_S_Long_OpPow();

   UFunc.UImpl2 op_DM_S_Float_OpPow();

   UFunc.UImpl2 op_DM_S_Double_OpPow();

   // $FF: synthetic method
   static UFunc.UImpl2 op_DM_S_OpAdd$(final DenseMatrixExpandedOps $this, final Field evidence$52, final Zero evidence$53, final ClassTag evidence$54) {
      return $this.op_DM_S_OpAdd(evidence$52, evidence$53, evidence$54);
   }

   default UFunc.UImpl2 op_DM_S_OpAdd(final Field evidence$52, final Zero evidence$53, final ClassTag evidence$54) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.opUpdate_DM_S_OpAdd(evidence$52, evidence$53, evidence$54));
      return new UFunc.UImpl2(evidence$52, evidence$53, evidence$54, uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final ClassTag evidence$54$1;
         private final UFunc.InPlaceImpl2 uop$29;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final Object b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(this.evidence$54$1));
            this.uop$29.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$54$1 = evidence$54$1;
               this.uop$29 = uop$29;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_OpAdd(evidence$52$1, evidence$53$1, evidence$54$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$54$1);
            }
         }
      };
   }

   // $FF: synthetic method
   static UFunc.UImpl2 op_DM_S_OpSub$(final DenseMatrixExpandedOps $this, final Field evidence$55, final Zero evidence$56, final ClassTag evidence$57) {
      return $this.op_DM_S_OpSub(evidence$55, evidence$56, evidence$57);
   }

   default UFunc.UImpl2 op_DM_S_OpSub(final Field evidence$55, final Zero evidence$56, final ClassTag evidence$57) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.opUpdate_DM_S_OpSub(evidence$55, evidence$56, evidence$57));
      return new UFunc.UImpl2(evidence$55, evidence$56, evidence$57, uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final ClassTag evidence$57$1;
         private final UFunc.InPlaceImpl2 uop$30;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final Object b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(this.evidence$57$1));
            this.uop$30.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$57$1 = evidence$57$1;
               this.uop$30 = uop$30;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_OpSub(evidence$55$1, evidence$56$1, evidence$57$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$57$1);
            }
         }
      };
   }

   // $FF: synthetic method
   static UFunc.UImpl2 op_DM_S_OpMulScalar$(final DenseMatrixExpandedOps $this, final Field evidence$58, final Zero evidence$59, final ClassTag evidence$60) {
      return $this.op_DM_S_OpMulScalar(evidence$58, evidence$59, evidence$60);
   }

   default UFunc.UImpl2 op_DM_S_OpMulScalar(final Field evidence$58, final Zero evidence$59, final ClassTag evidence$60) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.opUpdate_DM_S_OpMulScalar(evidence$58, evidence$59, evidence$60));
      return new UFunc.UImpl2(evidence$58, evidence$59, evidence$60, uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final ClassTag evidence$60$1;
         private final UFunc.InPlaceImpl2 uop$31;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final Object b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(this.evidence$60$1));
            this.uop$31.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$60$1 = evidence$60$1;
               this.uop$31 = uop$31;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_OpMulScalar(evidence$58$1, evidence$59$1, evidence$60$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$60$1);
            }
         }
      };
   }

   // $FF: synthetic method
   static UFunc.UImpl2 op_DM_S_OpMulMatrix$(final DenseMatrixExpandedOps $this, final Field evidence$61, final Zero evidence$62, final ClassTag evidence$63) {
      return $this.op_DM_S_OpMulMatrix(evidence$61, evidence$62, evidence$63);
   }

   default UFunc.UImpl2 op_DM_S_OpMulMatrix(final Field evidence$61, final Zero evidence$62, final ClassTag evidence$63) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.opUpdate_DM_S_OpMulMatrix(evidence$61, evidence$62, evidence$63));
      return new UFunc.UImpl2(evidence$61, evidence$62, evidence$63, uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final ClassTag evidence$63$1;
         private final UFunc.InPlaceImpl2 uop$32;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final Object b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(this.evidence$63$1));
            this.uop$32.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$63$1 = evidence$63$1;
               this.uop$32 = uop$32;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_OpMulMatrix(evidence$61$1, evidence$62$1, evidence$63$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$63$1);
            }
         }
      };
   }

   // $FF: synthetic method
   static UFunc.UImpl2 op_DM_S_OpDiv$(final DenseMatrixExpandedOps $this, final Field evidence$64, final Zero evidence$65, final ClassTag evidence$66) {
      return $this.op_DM_S_OpDiv(evidence$64, evidence$65, evidence$66);
   }

   default UFunc.UImpl2 op_DM_S_OpDiv(final Field evidence$64, final Zero evidence$65, final ClassTag evidence$66) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.opUpdate_DM_S_OpDiv(evidence$64, evidence$65, evidence$66));
      return new UFunc.UImpl2(evidence$64, evidence$65, evidence$66, uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final ClassTag evidence$66$1;
         private final UFunc.InPlaceImpl2 uop$33;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final Object b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(this.evidence$66$1));
            this.uop$33.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$66$1 = evidence$66$1;
               this.uop$33 = uop$33;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_OpDiv(evidence$64$1, evidence$65$1, evidence$66$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$66$1);
            }
         }
      };
   }

   // $FF: synthetic method
   static UFunc.UImpl2 op_DM_S_OpMod$(final DenseMatrixExpandedOps $this, final Field evidence$67, final Zero evidence$68, final ClassTag evidence$69) {
      return $this.op_DM_S_OpMod(evidence$67, evidence$68, evidence$69);
   }

   default UFunc.UImpl2 op_DM_S_OpMod(final Field evidence$67, final Zero evidence$68, final ClassTag evidence$69) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.opUpdate_DM_S_OpMod(evidence$67, evidence$68, evidence$69));
      return new UFunc.UImpl2(evidence$67, evidence$68, evidence$69, uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final ClassTag evidence$69$1;
         private final UFunc.InPlaceImpl2 uop$34;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final Object b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(this.evidence$69$1));
            this.uop$34.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$69$1 = evidence$69$1;
               this.uop$34 = uop$34;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_OpMod(evidence$67$1, evidence$68$1, evidence$69$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$69$1);
            }
         }
      };
   }

   // $FF: synthetic method
   static UFunc.UImpl2 op_DM_S_OpPow$(final DenseMatrixExpandedOps $this, final Field evidence$70, final Zero evidence$71, final ClassTag evidence$72) {
      return $this.op_DM_S_OpPow(evidence$70, evidence$71, evidence$72);
   }

   default UFunc.UImpl2 op_DM_S_OpPow(final Field evidence$70, final Zero evidence$71, final ClassTag evidence$72) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.opUpdate_DM_S_OpPow(evidence$70, evidence$71, evidence$72));
      return new UFunc.UImpl2(evidence$70, evidence$71, evidence$72, uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final ClassTag evidence$72$1;
         private final UFunc.InPlaceImpl2 uop$35;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final Object b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(this.evidence$72$1));
            this.uop$35.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.evidence$72$1 = evidence$72$1;
               this.uop$35 = uop$35;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_OpPow(evidence$70$1, evidence$71$1, evidence$72$1))).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), evidence$72$1);
            }
         }
      };
   }

   UFunc.UImpl2 s_dm_op_Int_OpAdd();

   UFunc.UImpl2 s_dm_op_Double_OpAdd();

   UFunc.UImpl2 s_dm_op_Float_OpAdd();

   UFunc.UImpl2 s_dm_op_Long_OpAdd();

   UFunc.UImpl2 s_dm_op_Int_OpSub();

   UFunc.UImpl2 s_dm_op_Double_OpSub();

   UFunc.UImpl2 s_dm_op_Float_OpSub();

   UFunc.UImpl2 s_dm_op_Long_OpSub();

   UFunc.UImpl2 s_dm_op_Int_OpMulScalar();

   UFunc.UImpl2 s_dm_op_Double_OpMulScalar();

   UFunc.UImpl2 s_dm_op_Float_OpMulScalar();

   UFunc.UImpl2 s_dm_op_Long_OpMulScalar();

   UFunc.UImpl2 s_dm_op_Int_OpMulMatrix();

   UFunc.UImpl2 s_dm_op_Double_OpMulMatrix();

   UFunc.UImpl2 s_dm_op_Float_OpMulMatrix();

   UFunc.UImpl2 s_dm_op_Long_OpMulMatrix();

   UFunc.UImpl2 s_dm_op_Int_OpDiv();

   UFunc.UImpl2 s_dm_op_Double_OpDiv();

   UFunc.UImpl2 s_dm_op_Float_OpDiv();

   UFunc.UImpl2 s_dm_op_Long_OpDiv();

   UFunc.UImpl2 s_dm_op_Int_OpMod();

   UFunc.UImpl2 s_dm_op_Double_OpMod();

   UFunc.UImpl2 s_dm_op_Float_OpMod();

   UFunc.UImpl2 s_dm_op_Long_OpMod();

   UFunc.UImpl2 s_dm_op_Int_OpPow();

   UFunc.UImpl2 s_dm_op_Double_OpPow();

   UFunc.UImpl2 s_dm_op_Float_OpPow();

   UFunc.UImpl2 s_dm_op_Long_OpPow();

   // $FF: synthetic method
   static UFunc.UImpl2 s_dm_op$(final DenseMatrixExpandedOps $this, final UFunc.UImpl2 opScalar, final ClassTag ct, final Zero zero) {
      return $this.s_dm_op(opScalar, ct, zero);
   }

   default UFunc.UImpl2 s_dm_op(final UFunc.UImpl2 opScalar, final ClassTag ct, final Zero zero) {
      return new UFunc.UImpl2(ct, zero, opScalar) {
         private final ClassTag ct$1;
         private final Zero zero$1;
         private final UFunc.UImpl2 opScalar$1;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final Object b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), this.ct$1, this.zero$1);
            Object resd = res.data();
            Object ad = a.data();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     scala.runtime.ScalaRunTime..MODULE$.array_update(resd, off.elem, this.opScalar$1.apply(b, scala.runtime.ScalaRunTime..MODULE$.array_apply(ad, a.linearIndex(r, c))));
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            this.ct$1 = ct$1;
            this.zero$1 = zero$1;
            this.opScalar$1 = opScalar$1;
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      };
   }

   UFunc.UImpl2 op_DM_DM_Int_OpAdd();

   UFunc.UImpl2 op_DM_DM_Long_OpAdd();

   UFunc.UImpl2 op_DM_DM_Float_OpAdd();

   UFunc.UImpl2 op_DM_DM_Double_OpAdd();

   UFunc.UImpl2 op_DM_DM_Int_OpSub();

   UFunc.UImpl2 op_DM_DM_Long_OpSub();

   UFunc.UImpl2 op_DM_DM_Float_OpSub();

   UFunc.UImpl2 op_DM_DM_Double_OpSub();

   UFunc.UImpl2 op_DM_DM_Int_OpMulScalar();

   UFunc.UImpl2 op_DM_DM_Long_OpMulScalar();

   UFunc.UImpl2 op_DM_DM_Float_OpMulScalar();

   UFunc.UImpl2 op_DM_DM_Double_OpMulScalar();

   UFunc.UImpl2 op_DM_DM_Int_OpMod();

   UFunc.UImpl2 op_DM_DM_Long_OpMod();

   UFunc.UImpl2 op_DM_DM_Float_OpMod();

   UFunc.UImpl2 op_DM_DM_Double_OpMod();

   UFunc.UImpl2 op_DM_DM_Int_OpDiv();

   UFunc.UImpl2 op_DM_DM_Long_OpDiv();

   UFunc.UImpl2 op_DM_DM_Float_OpDiv();

   UFunc.UImpl2 op_DM_DM_Double_OpDiv();

   UFunc.UImpl2 op_DM_DM_Int_OpPow();

   UFunc.UImpl2 op_DM_DM_Long_OpPow();

   UFunc.UImpl2 op_DM_DM_Float_OpPow();

   UFunc.UImpl2 op_DM_DM_Double_OpPow();

   static void $init$(final DenseMatrixExpandedOps $this) {
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpAdd_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcI$sp(b)) {
                     DenseMatrix ac = a.copy$mcI$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Int_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcI$sp(a.data$mcI$sp(), a.offset(), 1, a.size())).$plus$eq(new DenseVector$mcI$sp(b.data$mcI$sp(), b.offset(), 1, b.size()), this.$outer.impl_OpAdd_InPlace_T_U_Generic_from_scaleAdd_InPlace(HasOps$.MODULE$.impl_scaleAdd_InPlace_DV_S_DV_Int(), Semiring$.MODULE$.semiringInt()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               int[] ad = a.data$mcI$sp();
               int[] bd = b.data$mcI$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] += bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Int_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpAdd_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcD$sp(b)) {
                     DenseMatrix ac = a.copy$mcD$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Double_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcD$sp(a.data$mcD$sp(), a.offset(), 1, a.size())).$plus$eq(new DenseVector$mcD$sp(b.data$mcD$sp(), b.offset(), 1, b.size()), this.$outer.impl_OpAdd_InPlace_T_U_Generic_from_scaleAdd_InPlace(HasOps$.MODULE$.impl_scaleAdd_InPlace_DV_T_DV_Double(), Semiring$.MODULE$.semiringD()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               double[] ad = a.data$mcD$sp();
               double[] bd = b.data$mcD$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] += bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Double_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpAdd_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcF$sp(b)) {
                     DenseMatrix ac = a.copy$mcF$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Float_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcF$sp(a.data$mcF$sp(), a.offset(), 1, a.size())).$plus$eq(new DenseVector$mcF$sp(b.data$mcF$sp(), b.offset(), 1, b.size()), this.$outer.impl_OpAdd_InPlace_T_U_Generic_from_scaleAdd_InPlace(HasOps$.MODULE$.impl_scaledAdd_InPlace_DV_S_DV_Float(), Semiring$.MODULE$.semiringFloat()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               float[] ad = a.data$mcF$sp();
               float[] bd = b.data$mcF$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] += bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Float_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpAdd_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcJ$sp(b)) {
                     DenseMatrix ac = a.copy$mcJ$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Long_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcJ$sp(a.data$mcJ$sp(), a.offset(), 1, a.size())).$plus$eq(new DenseVector$mcJ$sp(b.data$mcJ$sp(), b.offset(), 1, b.size()), this.$outer.impl_OpAdd_InPlace_T_U_Generic_from_scaleAdd_InPlace(HasOps$.MODULE$.impl_scaleAdd_InPlace_DV_S_DV_Long(), Semiring$.MODULE$.semiringLong()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               long[] ad = a.data$mcJ$sp();
               long[] bd = b.data$mcJ$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] += bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Long_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpSub_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcI$sp(b)) {
                     DenseMatrix ac = a.copy$mcI$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Int_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcI$sp(a.data$mcI$sp(), a.offset(), 1, a.size())).$minus$eq(new DenseVector$mcI$sp(b.data$mcI$sp(), b.offset(), 1, b.size()), this.$outer.impl_OpSub_InPlace_T_U_Generic_from_scaleAdd_InPlace(HasOps$.MODULE$.impl_scaleAdd_InPlace_DV_S_DV_Int(), Ring$.MODULE$.ringInt()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               int[] ad = a.data$mcI$sp();
               int[] bd = b.data$mcI$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] -= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Int_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpSub_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcD$sp(b)) {
                     DenseMatrix ac = a.copy$mcD$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Double_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcD$sp(a.data$mcD$sp(), a.offset(), 1, a.size())).$minus$eq(new DenseVector$mcD$sp(b.data$mcD$sp(), b.offset(), 1, b.size()), this.$outer.impl_OpSub_InPlace_T_U_Generic_from_scaleAdd_InPlace(HasOps$.MODULE$.impl_scaleAdd_InPlace_DV_T_DV_Double(), Ring$.MODULE$.ringD()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               double[] ad = a.data$mcD$sp();
               double[] bd = b.data$mcD$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] -= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Double_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpSub_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcF$sp(b)) {
                     DenseMatrix ac = a.copy$mcF$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Float_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcF$sp(a.data$mcF$sp(), a.offset(), 1, a.size())).$minus$eq(new DenseVector$mcF$sp(b.data$mcF$sp(), b.offset(), 1, b.size()), this.$outer.impl_OpSub_InPlace_T_U_Generic_from_scaleAdd_InPlace(HasOps$.MODULE$.impl_scaledAdd_InPlace_DV_S_DV_Float(), Ring$.MODULE$.ringFloat()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               float[] ad = a.data$mcF$sp();
               float[] bd = b.data$mcF$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] -= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Float_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpSub_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcJ$sp(b)) {
                     DenseMatrix ac = a.copy$mcJ$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Long_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcJ$sp(a.data$mcJ$sp(), a.offset(), 1, a.size())).$minus$eq(new DenseVector$mcJ$sp(b.data$mcJ$sp(), b.offset(), 1, b.size()), this.$outer.impl_OpSub_InPlace_T_U_Generic_from_scaleAdd_InPlace(HasOps$.MODULE$.impl_scaleAdd_InPlace_DV_S_DV_Long(), Ring$.MODULE$.ringLong()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               long[] ad = a.data$mcJ$sp();
               long[] bd = b.data$mcJ$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] -= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Long_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpMulScalar_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcI$sp(b)) {
                     DenseMatrix ac = a.copy$mcI$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Int_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcI$sp(a.data$mcI$sp(), a.offset(), 1, a.size())).$colon$times$eq(new DenseVector$mcI$sp(b.data$mcI$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Int_OpMulScalar()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               int[] ad = a.data$mcI$sp();
               int[] bd = b.data$mcI$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Int_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpMulScalar_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcD$sp(b)) {
                     DenseMatrix ac = a.copy$mcD$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Double_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcD$sp(a.data$mcD$sp(), a.offset(), 1, a.size())).$colon$times$eq(new DenseVector$mcD$sp(b.data$mcD$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Double_OpMulScalar()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               double[] ad = a.data$mcD$sp();
               double[] bd = b.data$mcD$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Double_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpMulScalar_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcF$sp(b)) {
                     DenseMatrix ac = a.copy$mcF$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Float_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcF$sp(a.data$mcF$sp(), a.offset(), 1, a.size())).$colon$times$eq(new DenseVector$mcF$sp(b.data$mcF$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Float_OpMulScalar()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               float[] ad = a.data$mcF$sp();
               float[] bd = b.data$mcF$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Float_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpMulScalar_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcJ$sp(b)) {
                     DenseMatrix ac = a.copy$mcJ$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Long_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcJ$sp(a.data$mcJ$sp(), a.offset(), 1, a.size())).$colon$times$eq(new DenseVector$mcJ$sp(b.data$mcJ$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Long_OpMulScalar()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               long[] ad = a.data$mcJ$sp();
               long[] bd = b.data$mcJ$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Long_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpDiv_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcI$sp(b)) {
                     DenseMatrix ac = a.copy$mcI$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Int_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcI$sp(a.data$mcI$sp(), a.offset(), 1, a.size())).$colon$div$eq(new DenseVector$mcI$sp(b.data$mcI$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Int_OpDiv()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               int[] ad = a.data$mcI$sp();
               int[] bd = b.data$mcI$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] /= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Int_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpDiv_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcD$sp(b)) {
                     DenseMatrix ac = a.copy$mcD$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Double_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcD$sp(a.data$mcD$sp(), a.offset(), 1, a.size())).$colon$div$eq(new DenseVector$mcD$sp(b.data$mcD$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Double_OpDiv()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               double[] ad = a.data$mcD$sp();
               double[] bd = b.data$mcD$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] /= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Double_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpDiv_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcF$sp(b)) {
                     DenseMatrix ac = a.copy$mcF$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Float_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcF$sp(a.data$mcF$sp(), a.offset(), 1, a.size())).$colon$div$eq(new DenseVector$mcF$sp(b.data$mcF$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Float_OpDiv()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               float[] ad = a.data$mcF$sp();
               float[] bd = b.data$mcF$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] /= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Float_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpDiv_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcJ$sp(b)) {
                     DenseMatrix ac = a.copy$mcJ$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Long_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcJ$sp(a.data$mcJ$sp(), a.offset(), 1, a.size())).$colon$div$eq(new DenseVector$mcJ$sp(b.data$mcJ$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Long_OpDiv()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               long[] ad = a.data$mcJ$sp();
               long[] bd = b.data$mcJ$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] /= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Long_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpSet_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcI$sp(b)) {
                     DenseMatrix ac = a.copy$mcI$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Int_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcI$sp(a.data$mcI$sp(), a.offset(), 1, a.size())).$colon$eq(new DenseVector$mcI$sp(b.data$mcI$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Int_OpSet()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               int[] ad = a.data$mcI$sp();
               int[] bd = b.data$mcI$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Int_OpSet())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpSet_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcD$sp(b)) {
                     DenseMatrix ac = a.copy$mcD$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Double_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcD$sp(a.data$mcD$sp(), a.offset(), 1, a.size())).$colon$eq(new DenseVector$mcD$sp(b.data$mcD$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Double_OpSet()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               double[] ad = a.data$mcD$sp();
               double[] bd = b.data$mcD$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Double_OpSet())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpSet_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcF$sp(b)) {
                     DenseMatrix ac = a.copy$mcF$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Float_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcF$sp(a.data$mcF$sp(), a.offset(), 1, a.size())).$colon$eq(new DenseVector$mcF$sp(b.data$mcF$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Float_OpSet()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               float[] ad = a.data$mcF$sp();
               float[] bd = b.data$mcF$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Float_OpSet())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpSet_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcJ$sp(b)) {
                     DenseMatrix ac = a.copy$mcJ$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Long_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcJ$sp(a.data$mcJ$sp(), a.offset(), 1, a.size())).$colon$eq(new DenseVector$mcJ$sp(b.data$mcJ$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Long_OpSet()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               long[] ad = a.data$mcJ$sp();
               long[] bd = b.data$mcJ$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Long_OpSet())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpMod_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcI$sp(b)) {
                     DenseMatrix ac = a.copy$mcI$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Int_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcI$sp(a.data$mcI$sp(), a.offset(), 1, a.size())).$percent$eq(new DenseVector$mcI$sp(b.data$mcI$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Int_OpMod()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               int[] ad = a.data$mcI$sp();
               int[] bd = b.data$mcI$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] %= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Int_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpMod_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcD$sp(b)) {
                     DenseMatrix ac = a.copy$mcD$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Double_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcD$sp(a.data$mcD$sp(), a.offset(), 1, a.size())).$percent$eq(new DenseVector$mcD$sp(b.data$mcD$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Double_OpMod()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               double[] ad = a.data$mcD$sp();
               double[] bd = b.data$mcD$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] %= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Double_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpMod_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcF$sp(b)) {
                     DenseMatrix ac = a.copy$mcF$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Float_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcF$sp(a.data$mcF$sp(), a.offset(), 1, a.size())).$percent$eq(new DenseVector$mcF$sp(b.data$mcF$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Float_OpMod()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               float[] ad = a.data$mcF$sp();
               float[] bd = b.data$mcF$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] %= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Float_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpMod_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcJ$sp(b)) {
                     DenseMatrix ac = a.copy$mcJ$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Long_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcJ$sp(a.data$mcJ$sp(), a.offset(), 1, a.size())).$percent$eq(new DenseVector$mcJ$sp(b.data$mcJ$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Long_OpMod()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               long[] ad = a.data$mcJ$sp();
               long[] bd = b.data$mcJ$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] %= bd[b.linearIndex(r, c)]).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Long_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Int_OpPow_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcI$sp(b)) {
                     DenseMatrix ac = a.copy$mcI$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Int_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcI$sp(a.data$mcI$sp(), a.offset(), 1, a.size())).$colon$up$eq(new DenseVector$mcI$sp(b.data$mcI$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Int_OpPow()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               int[] ad = a.data$mcI$sp();
               int[] bd = b.data$mcI$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.IntPow(ad[a.linearIndex(r, c)]).pow(bd[b.linearIndex(r, c)])).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Int_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Double_OpPow_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcD$sp(b)) {
                     DenseMatrix ac = a.copy$mcD$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Double_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcD$sp(a.data$mcD$sp(), a.offset(), 1, a.size())).$colon$up$eq(new DenseVector$mcD$sp(b.data$mcD$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Double_OpPow()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               double[] ad = a.data$mcD$sp();
               double[] bd = b.data$mcD$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.DoublePow(ad[a.linearIndex(r, c)]).pow(bd[b.linearIndex(r, c)])).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Double_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Float_OpPow_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcF$sp(b)) {
                     DenseMatrix ac = a.copy$mcF$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Float_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcF$sp(a.data$mcF$sp(), a.offset(), 1, a.size())).$colon$up$eq(new DenseVector$mcF$sp(b.data$mcF$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Float_OpPow()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               float[] ad = a.data$mcF$sp();
               float[] bd = b.data$mcF$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.FloatPow(ad[a.linearIndex(r, c)]).pow(bd[b.linearIndex(r, c)])).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Float_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_dm_UpdateOp_Long_OpPow_$eq(new UFunc.InPlaceImpl2() {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final DenseMatrix b) {
            int left$macro$1 = a.rows();
            int right$macro$2 = b.rows();
            if (left$macro$1 != right$macro$2) {
               throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Row dimension mismatch!: ").append("a.rows == b.rows (").append(left$macro$1).append(" ").append("!=").append(" ").append(right$macro$2).append(")").toString());
            } else {
               int left$macro$3 = a.cols();
               int right$macro$4 = b.cols();
               if (left$macro$3 != right$macro$4) {
                  throw new IllegalArgumentException((new StringBuilder(68)).append("requirement failed: Col dimension mismatch!: ").append("a.cols == b.cols (").append(left$macro$3).append(" ").append("!=").append(" ").append(right$macro$4).append(")").toString());
               } else {
                  if (a != b && a.overlaps$mcJ$sp(b)) {
                     DenseMatrix ac = a.copy$mcJ$sp();
                     this.apply(ac, b);
                     a.$colon$eq(ac, this.$outer.dm_dm_UpdateOp_Long_OpSet());
                  } else if (a.isTranspose() == b.isTranspose() && a.isContiguous() && b.isContiguous()) {
                     (new DenseVector$mcJ$sp(a.data$mcJ$sp(), a.offset(), 1, a.size())).$colon$up$eq(new DenseVector$mcJ$sp(b.data$mcJ$sp(), b.offset(), 1, b.size()), this.$outer.castUpdateOps_V_V(scala..less.colon.less..MODULE$.refl(), scala..less.colon.less..MODULE$.refl(), breeze.gymnastics.NotGiven..MODULE$.neq(), HasOps$.MODULE$.impl_Op_InPlace_V_V_Long_OpPow()));
                  } else {
                     this.slowPath(a, b);
                  }

               }
            }
         }

         private void slowPath(final DenseMatrix a, final DenseMatrix b) {
            if (a.isTranspose()) {
               this.apply((DenseMatrix)a.t(HasOps$.MODULE$.canTranspose_DM()), (DenseMatrix)b.t(HasOps$.MODULE$.canTranspose_DM()));
            } else {
               long[] ad = a.data$mcJ$sp();
               long[] bd = b.data$mcJ$sp();
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.LongPow(ad[a.linearIndex(r, c)]).pow(bd[b.linearIndex(r, c)])).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            }

         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_m_UpdateOp_Long_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpAdd_$eq(new UFunc$InPlaceImpl2$mcI$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final int b) {
            this.apply$mcI$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] += b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] += b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] += b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcI$sp(final DenseMatrix a, final int b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Int_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpAdd_$eq(new UFunc$InPlaceImpl2$mcD$sp() {
         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final double b) {
            this.apply$mcD$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] += b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] += b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] += b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcD$sp(final DenseMatrix a, final double b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Double_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpAdd_$eq(new UFunc$InPlaceImpl2$mcF$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final float b) {
            this.apply$mcF$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] += b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] += b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] += b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcF$sp(final DenseMatrix a, final float b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Float_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpAdd_$eq(new UFunc.InPlaceImpl2() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final long b) {
            if (a.isContiguous()) {
               this.fastPath(a, b);
            } else {
               this.slowPath(a, b);
            }

         }

         private void fastPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] += b;
            }

         }

         private void slowPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] += b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] += b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Long_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpSub_$eq(new UFunc$InPlaceImpl2$mcI$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final int b) {
            this.apply$mcI$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] -= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] -= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] -= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcI$sp(final DenseMatrix a, final int b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Int_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpSub_$eq(new UFunc$InPlaceImpl2$mcD$sp() {
         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final double b) {
            this.apply$mcD$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] -= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] -= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] -= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcD$sp(final DenseMatrix a, final double b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Double_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpSub_$eq(new UFunc$InPlaceImpl2$mcF$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final float b) {
            this.apply$mcF$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] -= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] -= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] -= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcF$sp(final DenseMatrix a, final float b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Float_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpSub_$eq(new UFunc.InPlaceImpl2() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final long b) {
            if (a.isContiguous()) {
               this.fastPath(a, b);
            } else {
               this.slowPath(a, b);
            }

         }

         private void fastPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] -= b;
            }

         }

         private void slowPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] -= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] -= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Long_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpMulScalar_$eq(new UFunc$InPlaceImpl2$mcI$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final int b) {
            this.apply$mcI$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] *= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcI$sp(final DenseMatrix a, final int b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Int_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpMulScalar_$eq(new UFunc$InPlaceImpl2$mcD$sp() {
         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final double b) {
            this.apply$mcD$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] *= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcD$sp(final DenseMatrix a, final double b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Double_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpMulScalar_$eq(new UFunc$InPlaceImpl2$mcF$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final float b) {
            this.apply$mcF$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] *= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcF$sp(final DenseMatrix a, final float b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Float_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpMulScalar_$eq(new UFunc.InPlaceImpl2() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final long b) {
            if (a.isContiguous()) {
               this.fastPath(a, b);
            } else {
               this.slowPath(a, b);
            }

         }

         private void fastPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] *= b;
            }

         }

         private void slowPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Long_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpMulMatrix_$eq(new UFunc$InPlaceImpl2$mcI$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final int b) {
            this.apply$mcI$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] *= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcI$sp(final DenseMatrix a, final int b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Int_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpMulMatrix_$eq(new UFunc$InPlaceImpl2$mcD$sp() {
         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final double b) {
            this.apply$mcD$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] *= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcD$sp(final DenseMatrix a, final double b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Double_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpMulMatrix_$eq(new UFunc$InPlaceImpl2$mcF$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final float b) {
            this.apply$mcF$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] *= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcF$sp(final DenseMatrix a, final float b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Float_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpMulMatrix_$eq(new UFunc.InPlaceImpl2() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final long b) {
            if (a.isContiguous()) {
               this.fastPath(a, b);
            } else {
               this.slowPath(a, b);
            }

         }

         private void fastPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] *= b;
            }

         }

         private void slowPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] *= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Long_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpDiv_$eq(new UFunc$InPlaceImpl2$mcI$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final int b) {
            this.apply$mcI$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] /= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] /= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] /= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcI$sp(final DenseMatrix a, final int b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Int_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpDiv_$eq(new UFunc$InPlaceImpl2$mcD$sp() {
         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final double b) {
            this.apply$mcD$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] /= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] /= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] /= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcD$sp(final DenseMatrix a, final double b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Double_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpDiv_$eq(new UFunc$InPlaceImpl2$mcF$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final float b) {
            this.apply$mcF$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] /= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] /= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] /= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcF$sp(final DenseMatrix a, final float b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Float_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpDiv_$eq(new UFunc.InPlaceImpl2() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final long b) {
            if (a.isContiguous()) {
               this.fastPath(a, b);
            } else {
               this.slowPath(a, b);
            }

         }

         private void fastPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] /= b;
            }

         }

         private void slowPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] /= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] /= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Long_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpSet_$eq(new UFunc$InPlaceImpl2$mcI$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final int b) {
            this.apply$mcI$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] = b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] = b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcI$sp(final DenseMatrix a, final int b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Int_OpSet())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpSet_$eq(new UFunc$InPlaceImpl2$mcD$sp() {
         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final double b) {
            this.apply$mcD$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] = b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] = b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcD$sp(final DenseMatrix a, final double b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Double_OpSet())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpSet_$eq(new UFunc$InPlaceImpl2$mcF$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final float b) {
            this.apply$mcF$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] = b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] = b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcF$sp(final DenseMatrix a, final float b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Float_OpSet())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpSet_$eq(new UFunc.InPlaceImpl2() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final long b) {
            if (a.isContiguous()) {
               this.fastPath(a, b);
            } else {
               this.slowPath(a, b);
            }

         }

         private void fastPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] = b;
            }

         }

         private void slowPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] = b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Long_OpSet())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpMod_$eq(new UFunc$InPlaceImpl2$mcI$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final int b) {
            this.apply$mcI$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] %= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] %= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] %= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcI$sp(final DenseMatrix a, final int b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Int_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpMod_$eq(new UFunc$InPlaceImpl2$mcD$sp() {
         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final double b) {
            this.apply$mcD$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] %= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] %= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] %= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcD$sp(final DenseMatrix a, final double b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Double_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpMod_$eq(new UFunc$InPlaceImpl2$mcF$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final float b) {
            this.apply$mcF$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] %= b;
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] %= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] %= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcF$sp(final DenseMatrix a, final float b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Float_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpMod_$eq(new UFunc.InPlaceImpl2() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final long b) {
            if (a.isContiguous()) {
               this.fastPath(a, b);
            } else {
               this.slowPath(a, b);
            }

         }

         private void fastPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] %= b;
            }

         }

         private void slowPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] %= b).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] %= b).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Long_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Int_OpPow_$eq(new UFunc$InPlaceImpl2$mcI$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final int b) {
            this.apply$mcI$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] = PowImplicits$.MODULE$.IntPow(ad[index$macro$2]).pow(b);
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final int b) {
            int[] ad = a.data$mcI$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.IntPow(ad[a.linearIndex(r, c)]).pow(b)).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.IntPow(ad[a.linearIndex(r, c)]).pow(b)).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcI$sp(final DenseMatrix a, final int b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Int_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Double_OpPow_$eq(new UFunc$InPlaceImpl2$mcD$sp() {
         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final double b) {
            this.apply$mcD$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] = PowImplicits$.MODULE$.DoublePow(ad[index$macro$2]).pow(b);
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final double b) {
            double[] ad = a.data$mcD$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.DoublePow(ad[a.linearIndex(r, c)]).pow(b)).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.DoublePow(ad[a.linearIndex(r, c)]).pow(b)).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcD$sp(final DenseMatrix a, final double b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Double_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Float_OpPow_$eq(new UFunc$InPlaceImpl2$mcF$sp() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final float b) {
            this.apply$mcF$sp(a, b);
         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] = PowImplicits$.MODULE$.FloatPow(ad[index$macro$2]).pow(b);
            }

         }

         public void breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(final DenseMatrix a, final float b) {
            float[] ad = a.data$mcF$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.FloatPow(ad[a.linearIndex(r, c)]).pow(b)).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.FloatPow(ad[a.linearIndex(r, c)]).pow(b)).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public void apply$mcF$sp(final DenseMatrix a, final float b) {
            if (a.isContiguous()) {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$fastPath(a, b);
            } else {
               this.breeze$linalg$operators$DenseMatrixExpandedOps$$anon$$slowPath(a, b);
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Float_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$dm_s_UpdateOp_Long_OpPow_$eq(new UFunc.InPlaceImpl2() {
         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public void apply(final DenseMatrix a, final long b) {
            if (a.isContiguous()) {
               this.fastPath(a, b);
            } else {
               this.slowPath(a, b);
            }

         }

         private void fastPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            int index$macro$2 = a.offset();

            for(int limit$macro$4 = a.offset() + a.size(); index$macro$2 < limit$macro$4; ++index$macro$2) {
               ad[index$macro$2] = PowImplicits$.MODULE$.LongPow(ad[index$macro$2]).pow(b);
            }

         }

         private void slowPath(final DenseMatrix a, final long b) {
            long[] ad = a.data$mcJ$sp();
            if (!a.isTranspose()) {
               int index$macro$7 = 0;

               for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
                  int index$macro$2 = 0;

                  for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                     ((c, r) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.LongPow(ad[a.linearIndex(r, c)]).pow(b)).apply$mcVII$sp(index$macro$7, index$macro$2);
                  }
               }
            } else {
               int index$macro$17 = 0;

               for(int limit$macro$19 = a.rows(); index$macro$17 < limit$macro$19; ++index$macro$17) {
                  int index$macro$12 = 0;

                  for(int limit$macro$14 = a.cols(); index$macro$12 < limit$macro$14; ++index$macro$12) {
                     ((r, c) -> ad[a.linearIndex(r, c)] = PowImplicits$.MODULE$.LongPow(ad[a.linearIndex(r, c)]).pow(b)).apply$mcVII$sp(index$macro$17, index$macro$12);
                  }
               }
            }

         }

         public {
            ((BinaryUpdateRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.m_s_UpdateOp_Long_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Int_OpAdd());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpAdd_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$1;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final int b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$1.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$1 = uop$1;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Int_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Long_OpAdd());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpAdd_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$2;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final long b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$2.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$2 = uop$2;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Long_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Float_OpAdd());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpAdd_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$3;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final float b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$3.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$3 = uop$3;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Float_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Double_OpAdd());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpAdd_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$4;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final double b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$4.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$4 = uop$4;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Double_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Int_OpSub());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpSub_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$5;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final int b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$5.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$5 = uop$5;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Int_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Long_OpSub());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpSub_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$6;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final long b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$6.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$6 = uop$6;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Long_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Float_OpSub());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpSub_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$7;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final float b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$7.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$7 = uop$7;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Float_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Double_OpSub());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpSub_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$8;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final double b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$8.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$8 = uop$8;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Double_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Int_OpMulScalar());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpMulScalar_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$9;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final int b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$9.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$9 = uop$9;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Int_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Long_OpMulScalar());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpMulScalar_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$10;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final long b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$10.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$10 = uop$10;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Long_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Float_OpMulScalar());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpMulScalar_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$11;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final float b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$11.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$11 = uop$11;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Float_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Double_OpMulScalar());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpMulScalar_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$12;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final double b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$12.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$12 = uop$12;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Double_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Int_OpMulMatrix());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpMulMatrix_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$13;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final int b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$13.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$13 = uop$13;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Int_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Long_OpMulMatrix());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpMulMatrix_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$14;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final long b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$14.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$14 = uop$14;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Long_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Float_OpMulMatrix());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpMulMatrix_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$15;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final float b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$15.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$15 = uop$15;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Float_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Double_OpMulMatrix());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpMulMatrix_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$16;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final double b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$16.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$16 = uop$16;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Double_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Int_OpMod());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpMod_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$17;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final int b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$17.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$17 = uop$17;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Int_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Long_OpMod());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpMod_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$18;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final long b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$18.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$18 = uop$18;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Long_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Float_OpMod());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpMod_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$19;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final float b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$19.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$19 = uop$19;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Float_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Double_OpMod());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpMod_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$20;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final double b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$20.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$20 = uop$20;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Double_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Int_OpDiv());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpDiv_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$21;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final int b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$21.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$21 = uop$21;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Int_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Long_OpDiv());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpDiv_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$22;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final long b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$22.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$22 = uop$22;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Long_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Float_OpDiv());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpDiv_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$23;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final float b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$23.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$23 = uop$23;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Float_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Double_OpDiv());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpDiv_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$24;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final double b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$24.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$24 = uop$24;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Double_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Int_OpPow());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Int_OpPow_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$25;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final int b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$25.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$25 = uop$25;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Int_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Int());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Long_OpPow());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Long_OpPow_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$26;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final long b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$26.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$26 = uop$26;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Long_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Long());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Float_OpPow());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Float_OpPow_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$27;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final float b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$27.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$27 = uop$27;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Float_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Float());
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_s_UpdateOp_Double_OpPow());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_S_Double_OpPow_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$28;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final double b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$28.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$28 = uop$28;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_S_Double_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.Double());
            }
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpAdd_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final int b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int[] ad = a.data$mcI$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b + ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Int_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.Int(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpAdd_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final double b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            double[] ad = a.data$mcD$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b + ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Double_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.Double(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpAdd_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final float b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            float[] ad = a.data$mcF$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b + ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Float_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.Float(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpAdd_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final long b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            long[] ad = a.data$mcJ$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b + ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Long_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.Long(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpSub_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final int b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int[] ad = a.data$mcI$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b - ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Int_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.Int(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpSub_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final double b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            double[] ad = a.data$mcD$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b - ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Double_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.Double(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpSub_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final float b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            float[] ad = a.data$mcF$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b - ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Float_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.Float(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpSub_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final long b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            long[] ad = a.data$mcJ$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b - ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Long_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.Long(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpMulScalar_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final int b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int[] ad = a.data$mcI$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b * ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Int_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.Int(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpMulScalar_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final double b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            double[] ad = a.data$mcD$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b * ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Double_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.Double(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpMulScalar_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final float b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            float[] ad = a.data$mcF$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b * ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Float_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.Float(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpMulScalar_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final long b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            long[] ad = a.data$mcJ$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b * ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Long_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.Long(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpMulMatrix_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final int b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int[] ad = a.data$mcI$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b * ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Int_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.Int(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpMulMatrix_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final double b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            double[] ad = a.data$mcD$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b * ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Double_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.Double(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpMulMatrix_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final float b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            float[] ad = a.data$mcF$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b * ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Float_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.Float(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpMulMatrix_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final long b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            long[] ad = a.data$mcJ$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b * ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Long_OpMulMatrix())).register(this, scala.reflect.ClassTag..MODULE$.Long(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpDiv_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final int b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int[] ad = a.data$mcI$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b / ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Int_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.Int(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpDiv_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final double b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            double[] ad = a.data$mcD$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b / ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Double_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.Double(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpDiv_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final float b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            float[] ad = a.data$mcF$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b / ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Float_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.Float(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpDiv_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final long b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            long[] ad = a.data$mcJ$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b / ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Long_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.Long(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpMod_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final int b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int[] ad = a.data$mcI$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b % ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Int_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.Int(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpMod_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final double b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            double[] ad = a.data$mcD$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b % ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Double_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.Double(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpMod_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final float b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            float[] ad = a.data$mcF$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b % ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Float_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.Float(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpMod_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final long b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            long[] ad = a.data$mcJ$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = b % ad[a.linearIndex(r, c)];
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Long_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.Long(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Int_OpPow_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final int b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int[] ad = a.data$mcI$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = PowImplicits$.MODULE$.IntPow(b).pow(ad[a.linearIndex(r, c)]);
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Int_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.Int(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Double_OpPow_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final double b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            double[] ad = a.data$mcD$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = PowImplicits$.MODULE$.DoublePow(b).pow(ad[a.linearIndex(r, c)]);
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Double_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.Double(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Float_OpPow_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final float b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            float[] ad = a.data$mcF$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = PowImplicits$.MODULE$.FloatPow(b).pow(ad[a.linearIndex(r, c)]);
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Float_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.Float(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$s_dm_op_Long_OpPow_$eq(new UFunc.UImpl2() {
         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final long b, final DenseMatrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            long[] ad = a.data$mcJ$sp();
            IntRef off = IntRef.create(0);
            int index$macro$7 = 0;

            for(int limit$macro$9 = a.cols(); index$macro$7 < limit$macro$9; ++index$macro$7) {
               int index$macro$2 = 0;

               for(int limit$macro$4 = a.rows(); index$macro$2 < limit$macro$4; ++index$macro$2) {
                  ((c, r) -> {
                     resd[off.elem] = PowImplicits$.MODULE$.LongPow(b).pow(ad[a.linearIndex(r, c)]);
                     ++off.elem;
                  }).apply$mcVII$sp(index$macro$7, index$macro$2);
               }
            }

            return res;
         }

         public {
            ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_S_M_Long_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.Long(), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Int_OpAdd());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpAdd_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$36;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$36.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$36 = uop$36;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Int_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Long_OpAdd());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpAdd_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$37;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$37.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$37 = uop$37;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Long_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Float_OpAdd());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpAdd_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$38;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$38.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$38 = uop$38;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Float_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Double_OpAdd());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpAdd_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$39;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$39.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$39 = uop$39;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Double_OpAdd())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Int_OpSub());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpSub_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$40;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$40.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$40 = uop$40;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Int_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Long_OpSub());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpSub_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$41;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$41.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$41 = uop$41;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Long_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Float_OpSub());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpSub_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$42;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$42.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$42 = uop$42;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Float_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Double_OpSub());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpSub_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$43;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$43.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$43 = uop$43;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Double_OpSub())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Int_OpMulScalar());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpMulScalar_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$44;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$44.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$44 = uop$44;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Int_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Long_OpMulScalar());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpMulScalar_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$45;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$45.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$45 = uop$45;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Long_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Float_OpMulScalar());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpMulScalar_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$46;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$46.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$46 = uop$46;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Float_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Double_OpMulScalar());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpMulScalar_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$47;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$47.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$47 = uop$47;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Double_OpMulScalar())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Int_OpMod());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpMod_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$48;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$48.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$48 = uop$48;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Int_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Long_OpMod());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpMod_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$49;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$49.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$49 = uop$49;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Long_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Float_OpMod());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpMod_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$50;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$50.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$50 = uop$50;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Float_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Double_OpMod());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpMod_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$51;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$51.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$51 = uop$51;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Double_OpMod())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Int_OpDiv());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpDiv_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$52;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$52.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$52 = uop$52;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Int_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Long_OpDiv());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpDiv_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$53;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$53.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$53 = uop$53;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Long_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Float_OpDiv());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpDiv_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$54;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$54.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$54 = uop$54;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Float_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Double_OpDiv());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpDiv_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$55;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$55.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$55 = uop$55;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Double_OpDiv())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Int_OpPow());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Int_OpPow_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$56;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$56.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$56 = uop$56;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Int_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Long_OpPow());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Long_OpPow_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$57;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$57.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$57 = uop$57;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Long_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Float_OpPow());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Float_OpPow_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$58;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$58.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$58 = uop$58;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Float_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.dm_dm_UpdateOp_Double_OpPow());
      $this.breeze$linalg$operators$DenseMatrixExpandedOps$_setter_$op_DM_DM_Double_OpPow_$eq(new UFunc.UImpl2(uop) {
         // $FF: synthetic field
         private final DenseMatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$59;

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public DenseMatrix apply(final DenseMatrix a, final DenseMatrix b) {
            DenseMatrix c = (DenseMatrix)package$.MODULE$.copy(a, this.$outer.canCopy_DM(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$59.apply(c, b);
            return c;
         }

         public {
            if (DenseMatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = DenseMatrixExpandedOps.this;
               this.uop$59 = uop$59;
               ((BinaryRegistry).MODULE$.implicitly(DenseMatrixExpandedOps.this.op_M_DM_Double_OpPow())).register(this, scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class), scala.reflect.ClassTag..MODULE$.apply(DenseMatrix.class));
            }
         }
      });
   }
}
