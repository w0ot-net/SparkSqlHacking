package breeze.linalg.operators;

import breeze.generic.MMRegistry2;
import breeze.generic.UFunc;
import breeze.linalg.DenseMatrix;
import breeze.linalg.DenseMatrix$;
import breeze.linalg.Matrix;
import breeze.linalg.package$;
import breeze.math.Complex;
import breeze.math.Complex$;
import breeze.math.Field;
import breeze.math.PowImplicits$;
import breeze.storage.Zero;
import breeze.storage.Zero$;
import java.util.concurrent.ConcurrentHashMap;
import scala.Predef.;
import scala.collection.MapView;
import scala.collection.immutable.Map;
import scala.collection.mutable.HashMap;
import scala.math.BigInt;
import scala.reflect.ClassTag;
import scala.reflect.ScalaSignature;
import scala.runtime.BoxesRunTime;
import scala.runtime.Nothing;
import scala.runtime.Statics;

@ScalaSignature(
   bytes = "\u0006\u0005)=gACAg\u0003\u001f\u0004\n1!\u0001\u0002^\"9\u00111\u001f\u0001\u0005\u0002\u0005U\b\"CA\u007f\u0001\t\u0007I1AA\u0000\u0011%\u0011Y\u0002\u0001b\u0001\n\u0007\u0011i\u0002C\u0005\u0003*\u0001\u0011\r\u0011b\u0001\u0003,!I!q\u0007\u0001C\u0002\u0013\r!\u0011\b\u0005\n\u0005\u000b\u0002!\u0019!C\u0002\u0005\u000fB\u0011B!\u0017\u0001\u0005\u0004%\u0019Aa\u0017\t\u0013\t-\u0004A1A\u0005\u0004\t5\u0004\"\u0003B<\u0001\t\u0007I1\u0001B=\u0011%\u0011i\b\u0001b\u0001\n\u0007\u0011y\bC\u0005\u0003\u0004\u0002\u0011\r\u0011b\u0001\u0003\u0006\"I!\u0011\u0012\u0001C\u0002\u0013\r!1\u0012\u0005\n\u0005\u001f\u0003!\u0019!C\u0002\u0005#C\u0011B!&\u0001\u0005\u0004%\u0019Aa&\t\u0013\t\u0005\u0006A1A\u0005\u0004\t\r\u0006\"\u0003BT\u0001\t\u0007I1\u0001BU\u0011%\u0011i\u000b\u0001b\u0001\n\u0007\u0011y\u000bC\u0005\u00034\u0002\u0011\r\u0011b\u0001\u00036\"I!\u0011\u0018\u0001C\u0002\u0013\r!1\u0018\u0005\n\u0005\u007f\u0003!\u0019!C\u0002\u0005\u0003D\u0011Ba3\u0001\u0005\u0004%\u0019A!4\t\u0013\tE\u0007A1A\u0005\u0004\tM\u0007\"\u0003Bl\u0001\t\u0007I1\u0001Bm\u0011%\u0011i\u000e\u0001b\u0001\n\u0007\u0011y\u000eC\u0005\u0003d\u0002\u0011\r\u0011b\u0001\u0003f\"I!\u0011\u001e\u0001C\u0002\u0013\r!1\u001e\u0005\n\u0005k\u0004!\u0019!C\u0002\u0005oD\u0011Ba?\u0001\u0005\u0004%\u0019A!@\t\u0013\r\u0005\u0001A1A\u0005\u0004\r\r\u0001\"CB\u0004\u0001\t\u0007I1AB\u0005\u0011%\u0019i\u0001\u0001b\u0001\n\u0007\u0019y\u0001C\u0005\u0004\u0014\u0001\u0011\r\u0011b\u0001\u0004\u0016!I1q\u0004\u0001C\u0002\u0013\r1\u0011\u0005\u0005\n\u0007K\u0001!\u0019!C\u0002\u0007OA\u0011ba\u000b\u0001\u0005\u0004%\u0019a!\f\t\u0013\rE\u0002A1A\u0005\u0004\rM\u0002\"CB\u001c\u0001\t\u0007I1AB\u001d\u0011%\u0019\u0019\u0005\u0001b\u0001\n\u0007\u0019)\u0005C\u0005\u0004J\u0001\u0011\r\u0011b\u0001\u0004L!I1q\n\u0001C\u0002\u0013\r1\u0011\u000b\u0005\n\u0007+\u0002!\u0019!C\u0002\u0007/Bqaa\u0017\u0001\t\u0007\u0019i\u0006C\u0004\u0004&\u0002!\u0019aa*\t\u000f\r\u0015\u0007\u0001b\u0001\u0004H\"91Q\u001d\u0001\u0005\u0004\r\u001d\bb\u0002C\u0003\u0001\u0011\rAq\u0001\u0005\b\tK\u0001A1\u0001C\u0014\u0011\u001d!)\u0005\u0001C\u0002\t\u000fB\u0011\u0002\"\u001a\u0001\u0005\u0004%\u0019\u0001b\u001a\t\u0013\u0011-\u0004A1A\u0005\u0004\u00115\u0004\"\u0003C9\u0001\t\u0007I1\u0001C:\u0011%!9\b\u0001b\u0001\n\u0007!I\bC\u0005\u0005~\u0001\u0011\r\u0011b\u0001\u0005\u0000!IA1\u0011\u0001C\u0002\u0013\rAQ\u0011\u0005\n\t\u0013\u0003!\u0019!C\u0002\t\u0017C\u0011\u0002b$\u0001\u0005\u0004%\u0019\u0001\"%\t\u0013\u0011U\u0005A1A\u0005\u0004\u0011]\u0005\"\u0003CN\u0001\t\u0007I1\u0001CO\u0011%!\t\u000b\u0001b\u0001\n\u0007!\u0019\u000bC\u0005\u0005(\u0002\u0011\r\u0011b\u0001\u0005*\"IAQ\u0016\u0001C\u0002\u0013\rAq\u0016\u0005\n\tg\u0003!\u0019!C\u0002\tkC\u0011\u0002\"/\u0001\u0005\u0004%\u0019\u0001b/\t\u0013\u0011}\u0006A1A\u0005\u0004\u0011\u0005\u0007\"\u0003Cc\u0001\t\u0007I1\u0001Cd\u0011%!Y\r\u0001b\u0001\n\u0007!i\rC\u0005\u0005R\u0002\u0011\r\u0011b\u0001\u0005T\"IAQ\u001c\u0001C\u0002\u0013\rAq\u001c\u0005\n\tG\u0004!\u0019!C\u0002\tKD\u0011\u0002\";\u0001\u0005\u0004%\u0019\u0001b;\t\u0013\u0011=\bA1A\u0005\u0004\u0011E\b\"\u0003C{\u0001\t\u0007I1\u0001C|\u0011%!Y\u0010\u0001b\u0001\n\u0007!i\u0010C\u0005\u0006\u0002\u0001\u0011\r\u0011b\u0001\u0006\u0004!IQq\u0001\u0001C\u0002\u0013\rQ\u0011\u0002\u0005\n\u000b\u001b\u0001!\u0019!C\u0002\u000b\u001fA\u0011\"b\u0005\u0001\u0005\u0004%\u0019!\"\u0006\t\u0013\u0015e\u0001A1A\u0005\u0004\u0015m\u0001\"CC\u0010\u0001\t\u0007I1AC\u0011\u0011%))\u0003\u0001b\u0001\n\u0007)9\u0003C\u0005\u0006,\u0001\u0011\r\u0011b\u0001\u0006.!IQ\u0011\u0007\u0001C\u0002\u0013\rQ1\u0007\u0005\n\u000bo\u0001!\u0019!C\u0002\u000bsA\u0011\"\"\u0010\u0001\u0005\u0004%\u0019!b\u0010\t\u0013\u0015\r\u0003A1A\u0005\u0004\u0015\u0015\u0003\"CC%\u0001\t\u0007I1AC&\u0011%)y\u0005\u0001b\u0001\n\u0007)\t\u0006C\u0005\u0006V\u0001\u0011\r\u0011b\u0001\u0006X!IQ1\f\u0001C\u0002\u0013\rQQ\f\u0005\n\u000bC\u0002!\u0019!C\u0002\u000bGB\u0011\"b\u001a\u0001\u0005\u0004%\u0019!\"\u001b\t\u0013\u00155\u0004A1A\u0005\u0004\u0015=\u0004\"CC:\u0001\t\u0007I1AC;\u0011%)I\b\u0001b\u0001\n\u0007)Y\bC\u0004\u0006\u0000\u0001!\u0019!\"!\t\u000f\u0015}\u0005\u0001b\u0001\u0006\"\"9Qq\u0018\u0001\u0005\u0004\u0015\u0005\u0007bBCp\u0001\u0011\rQ\u0011\u001d\u0005\b\u000b\u007f\u0004A1\u0001D\u0001\u0011\u001d1y\u0002\u0001C\u0002\rCAqAb\u0010\u0001\t\u00071\t\u0005C\u0005\u0007`\u0001\u0011\r\u0011b\u0001\u0007b!Ia\u0011\u000e\u0001C\u0002\u0013\ra1\u000e\u0005\n\r_\u0002!\u0019!C\u0002\rcB\u0011B\"\u001e\u0001\u0005\u0004%\u0019Ab\u001e\t\u0013\u0019m\u0004A1A\u0005\u0004\u0019u\u0004\"\u0003DA\u0001\t\u0007I1\u0001DB\u0011%19\t\u0001b\u0001\n\u00071I\tC\u0005\u0007\u000e\u0002\u0011\r\u0011b\u0001\u0007\u0010\"Ia1\u0013\u0001C\u0002\u0013\raQ\u0013\u0005\n\r3\u0003!\u0019!C\u0002\r7C\u0011Bb(\u0001\u0005\u0004%\u0019A\")\t\u0013\u0019\u0015\u0006A1A\u0005\u0004\u0019\u001d\u0006\"\u0003DV\u0001\t\u0007I1\u0001DW\u0011%1\t\f\u0001b\u0001\n\u00071\u0019\fC\u0005\u00078\u0002\u0011\r\u0011b\u0001\u0007:\"IaQ\u0018\u0001C\u0002\u0013\raq\u0018\u0005\n\r\u0007\u0004!\u0019!C\u0002\r\u000bD\u0011B\"3\u0001\u0005\u0004%\u0019Ab3\t\u0013\u0019=\u0007A1A\u0005\u0004\u0019E\u0007\"\u0003Dk\u0001\t\u0007I1\u0001Dl\u0011%1Y\u000e\u0001b\u0001\n\u00071i\u000eC\u0005\u0007b\u0002\u0011\r\u0011b\u0001\u0007d\"Iaq\u001d\u0001C\u0002\u0013\ra\u0011\u001e\u0005\n\r[\u0004!\u0019!C\u0002\r_D\u0011Bb=\u0001\u0005\u0004%\u0019A\">\t\u0013\u0019e\bA1A\u0005\u0004\u0019m\b\"\u0003D\u0000\u0001\t\u0007I1AD\u0001\u0011%9)\u0001\u0001b\u0001\n\u000799\u0001C\u0005\b\f\u0001\u0011\r\u0011b\u0001\b\u000e!Iq\u0011\u0003\u0001C\u0002\u0013\rq1\u0003\u0005\n\u000f/\u0001!\u0019!C\u0002\u000f3A\u0011b\"\b\u0001\u0005\u0004%\u0019ab\b\t\u0013\u001d\r\u0002A1A\u0005\u0004\u001d\u0015\u0002\"CD\u0015\u0001\t\u0007I1AD\u0016\u0011%9y\u0003\u0001b\u0001\n\u00079\t\u0004C\u0005\b6\u0001\u0011\r\u0011b\u0001\b8!Iq1\b\u0001C\u0002\u0013\rqQ\b\u0005\n\u000f\u0003\u0002!\u0019!C\u0002\u000f\u0007B\u0011bb\u0012\u0001\u0005\u0004%\u0019a\"\u0013\t\u0013\u001d5\u0003A1A\u0005\u0004\u001d=\u0003bBD*\u0001\u0011\rqQ\u000b\u0005\b\u000fg\u0002A1AD;\u0011\u001d9\u0019\n\u0001C\u0002\u000f+Cqab-\u0001\t\u00079)\fC\u0004\bT\u0002!\u0019a\"6\t\u000f\u001dM\b\u0001b\u0001\bv\"9\u00012\u0003\u0001\u0005\u0004!U\u0001\"\u0003E\u001a\u0001\t\u0007I1\u0001E\u001b\u0011%AI\u0004\u0001b\u0001\n\u0007AY\u0004C\u0005\t@\u0001\u0011\r\u0011b\u0001\tB!I\u0001R\t\u0001C\u0002\u0013\r\u0001r\t\u0005\n\u0011\u0017\u0002!\u0019!C\u0002\u0011\u001bB\u0011\u0002#\u0015\u0001\u0005\u0004%\u0019\u0001c\u0015\t\u0013!]\u0003A1A\u0005\u0004!e\u0003\"\u0003E/\u0001\t\u0007I1\u0001E0\u0011%A\u0019\u0007\u0001b\u0001\n\u0007A)\u0007C\u0005\tj\u0001\u0011\r\u0011b\u0001\tl!I\u0001r\u000e\u0001C\u0002\u0013\r\u0001\u0012\u000f\u0005\n\u0011k\u0002!\u0019!C\u0002\u0011oB\u0011\u0002c\u001f\u0001\u0005\u0004%\u0019\u0001# \t\u0013!\u0005\u0005A1A\u0005\u0004!\r\u0005\"\u0003ED\u0001\t\u0007I1\u0001EE\u0011%Ai\t\u0001b\u0001\n\u0007Ay\tC\u0005\t\u0014\u0002\u0011\r\u0011b\u0001\t\u0016\"I\u0001\u0012\u0014\u0001C\u0002\u0013\r\u00012\u0014\u0005\n\u0011?\u0003!\u0019!C\u0002\u0011CC\u0011\u0002#*\u0001\u0005\u0004%\u0019\u0001c*\t\u0013!-\u0006A1A\u0005\u0004!5\u0006\"\u0003EY\u0001\t\u0007I1\u0001EZ\u0011%A9\f\u0001b\u0001\n\u0007AI\fC\u0005\t>\u0002\u0011\r\u0011b\u0001\t@\"I\u00012\u0019\u0001C\u0002\u0013\r\u0001R\u0019\u0005\n\u0011\u0013\u0004!\u0019!C\u0002\u0011\u0017D\u0011\u0002c4\u0001\u0005\u0004%\u0019\u0001#5\t\u0013!U\u0007A1A\u0005\u0004!]\u0007\"\u0003En\u0001\t\u0007I1\u0001Eo\u0011%A\t\u000f\u0001b\u0001\n\u0007A\u0019\u000fC\u0005\th\u0002\u0011\r\u0011b\u0001\tj\"I\u0001R\u001e\u0001C\u0002\u0013\r\u0001r\u001e\u0005\n\u0011g\u0004!\u0019!C\u0002\u0011kD\u0011\u0002#?\u0001\u0005\u0004%\u0019\u0001c?\t\u0013!}\bA1A\u0005\u0004%\u0005\u0001\"CE\u0003\u0001\t\u0007I1AE\u0004\u0011%IY\u0001\u0001b\u0001\n\u0007Ii\u0001C\u0005\n\u0012\u0001\u0011\r\u0011b\u0001\n\u0014!I\u0011r\u0003\u0001C\u0002\u0013\r\u0011\u0012\u0004\u0005\n\u0013;\u0001!\u0019!C\u0002\u0013?Aq!c\t\u0001\t\u0007I)\u0003C\u0004\nD\u0001!\u0019!#\u0012\t\u000f%\r\u0004\u0001b\u0001\nf!9\u00112\u0011\u0001\u0005\u0004%\u0015\u0005bBER\u0001\u0011\r\u0011R\u0015\u0005\b\u0013\u0007\u0004A1AEc\u0011\u001dI\u0019\u000f\u0001C\u0002\u0013KD\u0011Bc\u0001\u0001\u0005\u0004%\u0019A#\u0002\t\u0013)%\u0001A1A\u0005\u0004)-\u0001\"\u0003F\b\u0001\t\u0007I1\u0001F\t\u0011%Q)\u0002\u0001b\u0001\n\u0007Q9\u0002C\u0005\u000b\u001c\u0001\u0011\r\u0011b\u0001\u000b\u001e!I!\u0012\u0005\u0001C\u0002\u0013\r!2\u0005\u0005\n\u0015O\u0001!\u0019!C\u0002\u0015SA\u0011B#\f\u0001\u0005\u0004%\u0019Ac\f\t\u0013)M\u0002A1A\u0005\u0004)U\u0002\"\u0003F\u001d\u0001\t\u0007I1\u0001F\u001e\u0011%Qy\u0004\u0001b\u0001\n\u0007Q\t\u0005C\u0005\u000bF\u0001\u0011\r\u0011b\u0001\u000bH!I!2\n\u0001C\u0002\u0013\r!R\n\u0005\n\u0015#\u0002!\u0019!C\u0002\u0015'B\u0011Bc\u0016\u0001\u0005\u0004%\u0019A#\u0017\t\u0013)u\u0003A1A\u0005\u0004)}\u0003\"\u0003F2\u0001\t\u0007I1\u0001F3\u0011%QI\u0007\u0001b\u0001\n\u0007QY\u0007C\u0005\u000bp\u0001\u0011\r\u0011b\u0001\u000br!I!R\u000f\u0001C\u0002\u0013\r!r\u000f\u0005\n\u0015w\u0002!\u0019!C\u0002\u0015{B\u0011B#!\u0001\u0005\u0004%\u0019Ac!\t\u0013)\u001d\u0005A1A\u0005\u0004)%\u0005\"\u0003FG\u0001\t\u0007I1\u0001FH\u0011%Q\u0019\n\u0001b\u0001\n\u0007Q)\nC\u0005\u000b\u001a\u0002\u0011\r\u0011b\u0001\u000b\u001c\"I!r\u0014\u0001C\u0002\u0013\r!\u0012\u0015\u0005\n\u0015K\u0003!\u0019!C\u0002\u0015OC\u0011Bc+\u0001\u0005\u0004%\u0019A#,\t\u0013)E\u0006A1A\u0005\u0004)M\u0006\"\u0003F\\\u0001\t\u0007I1\u0001F]\u0011%Qi\f\u0001b\u0001\n\u0007Qy\fC\u0005\u000bD\u0002\u0011\r\u0011b\u0001\u000bF\"I!\u0012\u001a\u0001C\u0002\u0013\r!2\u001a\u0002\u0012\u001b\u0006$(/\u001b=FqB\fg\u000eZ3e\u001fB\u001c(\u0002BAi\u0003'\f\u0011b\u001c9fe\u0006$xN]:\u000b\t\u0005U\u0017q[\u0001\u0007Y&t\u0017\r\\4\u000b\u0005\u0005e\u0017A\u00022sK\u0016TXm\u0001\u0001\u0014\u000b\u0001\ty.a;\u0011\t\u0005\u0005\u0018q]\u0007\u0003\u0003GT!!!:\u0002\u000bM\u001c\u0017\r\\1\n\t\u0005%\u00181\u001d\u0002\u0007\u0003:L(+\u001a4\u0011\t\u00055\u0018q^\u0007\u0003\u0003\u001fLA!!=\u0002P\n\u0001R*\u0019;sSb<UM\\3sS\u000e|\u0005o]\u0001\u0007I%t\u0017\u000e\u001e\u0013\u0015\u0005\u0005]\b\u0003BAq\u0003sLA!a?\u0002d\n!QK\\5u\u0003Yiw,\\0Va\u0012\fG/Z(q?&sGoX(q\u0003\u0012$WC\u0001B\u0001!)\tiOa\u0001\u0003\b\t\u001d!QC\u0005\u0005\u0005\u000b\tyM\u0001\u000bCS:\f'/_+qI\u0006$XMU3hSN$(/\u001f\t\u0007\u0005\u0013\u0011YAa\u0004\u000e\u0005\u0005M\u0017\u0002\u0002B\u0007\u0003'\u0014a!T1ue&D\b\u0003BAq\u0005#IAAa\u0005\u0002d\n\u0019\u0011J\u001c;\u000f\t\u00055(qC\u0005\u0005\u00053\ty-A\u0003Pa\u0006#G-A\rn?6|V\u000b\u001d3bi\u0016|\u0005o\u0018#pk\ndWmX(q\u0003\u0012$WC\u0001B\u0010!)\tiOa\u0001\u0003\"\t\u0005\"Q\u0003\t\u0007\u0005\u0013\u0011YAa\t\u0011\t\u0005\u0005(QE\u0005\u0005\u0005O\t\u0019O\u0001\u0004E_V\u0014G.Z\u0001\u0019[~kw,\u00169eCR,w\n]0GY>\fGoX(q\u0003\u0012$WC\u0001B\u0017!)\tiOa\u0001\u00030\t=\"Q\u0003\t\u0007\u0005\u0013\u0011YA!\r\u0011\t\u0005\u0005(1G\u0005\u0005\u0005k\t\u0019OA\u0003GY>\fG/A\fn?6|V\u000b\u001d3bi\u0016|\u0005o\u0018'p]\u001e|v\n]!eIV\u0011!1\b\t\u000b\u0003[\u0014\u0019A!\u0010\u0003>\tU\u0001C\u0002B\u0005\u0005\u0017\u0011y\u0004\u0005\u0003\u0002b\n\u0005\u0013\u0002\u0002B\"\u0003G\u0014A\u0001T8oO\u0006IRnX7`+B$\u0017\r^3Pa~\u0013\u0015nZ%oi~{\u0005/\u00113e+\t\u0011I\u0005\u0005\u0006\u0002n\n\r!1\nB&\u0005+\u0001bA!\u0003\u0003\f\t5\u0003\u0003\u0002B(\u0005+j!A!\u0015\u000b\t\tM\u00131]\u0001\u0005[\u0006$\b.\u0003\u0003\u0003X\tE#A\u0002\"jO&sG/\u0001\u000en?6|V\u000b\u001d3bi\u0016|\u0005oX\"p[BdW\r_0Pa\u0006#G-\u0006\u0002\u0003^AQ\u0011Q\u001eB\u0002\u0005?\u0012yF!\u0006\u0011\r\t%!1\u0002B1!\u0011\u0011\u0019Ga\u001a\u000e\u0005\t\u0015$\u0002\u0002B*\u0003/LAA!\u001b\u0003f\t91i\\7qY\u0016D\u0018AF7`[~+\u0006\u000fZ1uK>\u0003x,\u00138u?>\u00038+\u001e2\u0016\u0005\t=\u0004CCAw\u0005\u0007\u00119Aa\u0002\u0003r9!\u0011Q\u001eB:\u0013\u0011\u0011)(a4\u0002\u000b=\u00038+\u001e2\u000235|VnX+qI\u0006$Xm\u00149`\t>,(\r\\3`\u001fB\u001cVOY\u000b\u0003\u0005w\u0002\"\"!<\u0003\u0004\t\u0005\"\u0011\u0005B9\u0003aiw,\\0Va\u0012\fG/Z(q?\u001acw.\u0019;`\u001fB\u001cVOY\u000b\u0003\u0005\u0003\u0003\"\"!<\u0003\u0004\t=\"q\u0006B9\u0003]iw,\\0Va\u0012\fG/Z(q?2{gnZ0PaN+(-\u0006\u0002\u0003\bBQ\u0011Q\u001eB\u0002\u0005{\u0011iD!\u001d\u000235|VnX+qI\u0006$Xm\u00149`\u0005&<\u0017J\u001c;`\u001fB\u001cVOY\u000b\u0003\u0005\u001b\u0003\"\"!<\u0003\u0004\t-#1\nB9\u0003iiw,\\0Va\u0012\fG/Z(q?\u000e{W\u000e\u001d7fq~{\u0005oU;c+\t\u0011\u0019\n\u0005\u0006\u0002n\n\r!q\fB0\u0005c\nA$\\0n?V\u0003H-\u0019;f\u001fB|\u0016J\u001c;`\u001fBlU\u000f\\*dC2\f'/\u0006\u0002\u0003\u001aBQ\u0011Q\u001eB\u0002\u0005\u000f\u00119Aa'\u000f\t\u00055(QT\u0005\u0005\u0005?\u000by-A\u0006Pa6+HnU2bY\u0006\u0014\u0018aH7`[~+\u0006\u000fZ1uK>\u0003x\fR8vE2,wl\u00149Nk2\u001c6-\u00197beV\u0011!Q\u0015\t\u000b\u0003[\u0014\u0019A!\t\u0003\"\tm\u0015AH7`[~+\u0006\u000fZ1uK>\u0003xL\u00127pCR|v\n]'vYN\u001b\u0017\r\\1s+\t\u0011Y\u000b\u0005\u0006\u0002n\n\r!q\u0006B\u0018\u00057\u000bQ$\\0n?V\u0003H-\u0019;f\u001fB|Fj\u001c8h?>\u0003X*\u001e7TG\u0006d\u0017M]\u000b\u0003\u0005c\u0003\"\"!<\u0003\u0004\tu\"Q\bBN\u0003}iw,\\0Va\u0012\fG/Z(q?\nKw-\u00138u?>\u0003X*\u001e7TG\u0006d\u0017M]\u000b\u0003\u0005o\u0003\"\"!<\u0003\u0004\t-#1\nBN\u0003\u0001jw,\\0Va\u0012\fG/Z(q?\u000e{W\u000e\u001d7fq~{\u0005/T;m'\u000e\fG.\u0019:\u0016\u0005\tu\u0006CCAw\u0005\u0007\u0011yFa\u0018\u0003\u001c\u00061RnX7`+B$\u0017\r^3Pa~Ke\u000e^0Pa\u0012Kg/\u0006\u0002\u0003DBQ\u0011Q\u001eB\u0002\u0005\u000f\u00119A!2\u000f\t\u00055(qY\u0005\u0005\u0005\u0013\fy-A\u0003Pa\u0012Kg/A\rn?6|V\u000b\u001d3bi\u0016|\u0005o\u0018#pk\ndWmX(q\t&4XC\u0001Bh!)\tiOa\u0001\u0003\"\t\u0005\"QY\u0001\u0019[~kw,\u00169eCR,w\n]0GY>\fGoX(q\t&4XC\u0001Bk!)\tiOa\u0001\u00030\t=\"QY\u0001\u0018[~kw,\u00169eCR,w\n]0M_:<wl\u00149ESZ,\"Aa7\u0011\u0015\u00055(1\u0001B\u001f\u0005{\u0011)-A\rn?6|V\u000b\u001d3bi\u0016|\u0005o\u0018\"jO&sGoX(q\t&4XC\u0001Bq!)\tiOa\u0001\u0003L\t-#QY\u0001\u001b[~kw,\u00169eCR,w\n]0D_6\u0004H.\u001a=`\u001fB$\u0015N^\u000b\u0003\u0005O\u0004\"\"!<\u0003\u0004\t}#q\fBc\u0003Yiw,\\0Va\u0012\fG/Z(q?&sGoX(q'\u0016$XC\u0001Bw!)\tiOa\u0001\u0003\b\t\u001d!q\u001e\b\u0005\u0003[\u0014\t0\u0003\u0003\u0003t\u0006=\u0017!B(q'\u0016$\u0018!G7`[~+\u0006\u000fZ1uK>\u0003x\fR8vE2,wl\u00149TKR,\"A!?\u0011\u0015\u00055(1\u0001B\u0011\u0005C\u0011y/\u0001\rn?6|V\u000b\u001d3bi\u0016|\u0005o\u0018$m_\u0006$xl\u00149TKR,\"Aa@\u0011\u0015\u00055(1\u0001B\u0018\u0005_\u0011y/A\fn?6|V\u000b\u001d3bi\u0016|\u0005o\u0018'p]\u001e|v\n]*fiV\u00111Q\u0001\t\u000b\u0003[\u0014\u0019A!\u0010\u0003>\t=\u0018!G7`[~+\u0006\u000fZ1uK>\u0003xLQ5h\u0013:$xl\u00149TKR,\"aa\u0003\u0011\u0015\u00055(1\u0001B&\u0005\u0017\u0012y/\u0001\u000en?6|V\u000b\u001d3bi\u0016|\u0005oX\"p[BdW\r_0PaN+G/\u0006\u0002\u0004\u0012AQ\u0011Q\u001eB\u0002\u0005?\u0012yFa<\u0002-5|VnX+qI\u0006$Xm\u00149`\u0013:$xl\u00149N_\u0012,\"aa\u0006\u0011\u0015\u00055(1\u0001B\u0004\u0005\u000f\u0019IB\u0004\u0003\u0002n\u000em\u0011\u0002BB\u000f\u0003\u001f\fQa\u00149N_\u0012\f\u0011$\\0n?V\u0003H-\u0019;f\u001fB|Fi\\;cY\u0016|v\n]'pIV\u001111\u0005\t\u000b\u0003[\u0014\u0019A!\t\u0003\"\re\u0011\u0001G7`[~+\u0006\u000fZ1uK>\u0003xL\u00127pCR|v\n]'pIV\u00111\u0011\u0006\t\u000b\u0003[\u0014\u0019Aa\f\u00030\re\u0011aF7`[~+\u0006\u000fZ1uK>\u0003x\fT8oO~{\u0005/T8e+\t\u0019y\u0003\u0005\u0006\u0002n\n\r!Q\bB\u001f\u00073\t\u0011$\\0n?V\u0003H-\u0019;f\u001fB|&)[4J]R|v\n]'pIV\u00111Q\u0007\t\u000b\u0003[\u0014\u0019Aa\u0013\u0003L\re\u0011AF7`[~+\u0006\u000fZ1uK>\u0003x,\u00138u?>\u0003\bk\\<\u0016\u0005\rm\u0002CCAw\u0005\u0007\u00119Aa\u0002\u0004>9!\u0011Q^B \u0013\u0011\u0019\t%a4\u0002\u000b=\u0003\bk\\<\u000235|VnX+qI\u0006$Xm\u00149`\t>,(\r\\3`\u001fB\u0004vn^\u000b\u0003\u0007\u000f\u0002\"\"!<\u0003\u0004\t\u0005\"\u0011EB\u001f\u0003aiw,\\0Va\u0012\fG/Z(q?\u001acw.\u0019;`\u001fB\u0004vn^\u000b\u0003\u0007\u001b\u0002\"\"!<\u0003\u0004\t=\"qFB\u001f\u0003]iw,\\0Va\u0012\fG/Z(q?2{gnZ0PaB{w/\u0006\u0002\u0004TAQ\u0011Q\u001eB\u0002\u0005{\u0011id!\u0010\u000255|VnX+qI\u0006$Xm\u00149`\u0007>l\u0007\u000f\\3y?>\u0003\bk\\<\u0016\u0005\re\u0003CCAw\u0005\u0007\u0011yFa\u0018\u0004>\u0005\u0011RnX7`+B$\u0017\r^3Pa~{\u0005/\u00113e+\u0011\u0019yf!\u001b\u0015\u0011\r\u000541PBC\u0007+\u0003\"\"!<\u0003\u0004\r\r41\rB\u000b!\u0019\u0011IAa\u0003\u0004fA!1qMB5\u0019\u0001!qaa\u001b+\u0005\u0004\u0019iGA\u0001U#\u0011\u0019yg!\u001e\u0011\t\u0005\u00058\u0011O\u0005\u0005\u0007g\n\u0019OA\u0004O_RD\u0017N\\4\u0011\t\u0005\u00058qO\u0005\u0005\u0007s\n\u0019OA\u0002B]fD\u0011b! +\u0003\u0003\u0005\u001daa \u0002\u0017\u00154\u0018\u000eZ3oG\u0016$\u0013\u0007\u000e\t\u0007\u0005G\u001a\ti!\u001a\n\t\r\r%Q\r\u0002\u0006\r&,G\u000e\u001a\u0005\n\u0007\u000fS\u0013\u0011!a\u0002\u0007\u0013\u000b1\"\u001a<jI\u0016t7-\u001a\u00132kA111RBI\u0007Kj!a!$\u000b\t\r=\u0015q[\u0001\bgR|'/Y4f\u0013\u0011\u0019\u0019j!$\u0003\ti+'o\u001c\u0005\n\u0007/S\u0013\u0011!a\u0002\u00073\u000b1\"\u001a<jI\u0016t7-\u001a\u00132mA111TBQ\u0007Kj!a!(\u000b\t\r}\u00151]\u0001\be\u00164G.Z2u\u0013\u0011\u0019\u0019k!(\u0003\u0011\rc\u0017m]:UC\u001e\f!#\\0n?V\u0003H-\u0019;f\u001fB|v\n]*vEV!1\u0011VBY)!\u0019Yka-\u0004:\u000e}\u0006CCAw\u0005\u0007\u0019ik!,\u0003rA1!\u0011\u0002B\u0006\u0007_\u0003Baa\u001a\u00042\u0012911N\u0016C\u0002\r5\u0004\"CB[W\u0005\u0005\t9AB\\\u0003-)g/\u001b3f]\u000e,G%M\u001c\u0011\r\t\r4\u0011QBX\u0011%\u0019YlKA\u0001\u0002\b\u0019i,A\u0006fm&$WM\\2fIEB\u0004CBBF\u0007#\u001by\u000bC\u0005\u0004B.\n\t\u0011q\u0001\u0004D\u0006YQM^5eK:\u001cW\rJ\u0019:!\u0019\u0019Yj!)\u00040\u0006ARnX7`+B$\u0017\r^3Pa~{\u0005/T;m'\u000e\fG.\u0019:\u0016\t\r%7\u0011\u001b\u000b\t\u0007\u0017\u001c\u0019n!7\u0004`BQ\u0011Q\u001eB\u0002\u0007\u001b\u001ciMa'\u0011\r\t%!1BBh!\u0011\u00199g!5\u0005\u000f\r-DF1\u0001\u0004n!I1Q\u001b\u0017\u0002\u0002\u0003\u000f1q[\u0001\fKZLG-\u001a8dK\u0012\u0012\u0004\u0007\u0005\u0004\u0003d\r\u00055q\u001a\u0005\n\u00077d\u0013\u0011!a\u0002\u0007;\f1\"\u001a<jI\u0016t7-\u001a\u00133cA111RBI\u0007\u001fD\u0011b!9-\u0003\u0003\u0005\u001daa9\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$#G\r\t\u0007\u00077\u001b\tka4\u0002%5|VnX+qI\u0006$Xm\u00149`\u001fB$\u0015N^\u000b\u0005\u0007S\u001c\t\u0010\u0006\u0005\u0004l\u000eM8\u0011`B\u0000!)\tiOa\u0001\u0004n\u000e5(Q\u0019\t\u0007\u0005\u0013\u0011Yaa<\u0011\t\r\u001d4\u0011\u001f\u0003\b\u0007Wj#\u0019AB7\u0011%\u0019)0LA\u0001\u0002\b\u001990A\u0006fm&$WM\\2fII\u001a\u0004C\u0002B2\u0007\u0003\u001by\u000fC\u0005\u0004|6\n\t\u0011q\u0001\u0004~\u0006YQM^5eK:\u001cW\r\n\u001a5!\u0019\u0019Yi!%\u0004p\"IA\u0011A\u0017\u0002\u0002\u0003\u000fA1A\u0001\fKZLG-\u001a8dK\u0012\u0012T\u0007\u0005\u0004\u0004\u001c\u000e\u00056q^\u0001\u0013[~kw,\u00169eCR,w\n]0PaN+G/\u0006\u0003\u0005\n\u0011EA\u0003\u0003C\u0006\t'!I\u0002b\b\u0011\u0015\u00055(1\u0001C\u0007\t\u001b\u0011y\u000f\u0005\u0004\u0003\n\t-Aq\u0002\t\u0005\u0007O\"\t\u0002B\u0004\u0004l9\u0012\ra!\u001c\t\u0013\u0011Ua&!AA\u0004\u0011]\u0011aC3wS\u0012,gnY3%eY\u0002bAa\u0019\u0004\u0002\u0012=\u0001\"\u0003C\u000e]\u0005\u0005\t9\u0001C\u000f\u0003-)g/\u001b3f]\u000e,GEM\u001c\u0011\r\r-5\u0011\u0013C\b\u0011%!\tCLA\u0001\u0002\b!\u0019#A\u0006fm&$WM\\2fIIB\u0004CBBN\u0007C#y!\u0001\nn?6|V\u000b\u001d3bi\u0016|\u0005oX(q\u001b>$W\u0003\u0002C\u0015\tc!\u0002\u0002b\u000b\u00054\u0011eBq\b\t\u000b\u0003[\u0014\u0019\u0001\"\f\u0005.\re\u0001C\u0002B\u0005\u0005\u0017!y\u0003\u0005\u0003\u0004h\u0011EBaBB6_\t\u00071Q\u000e\u0005\n\tky\u0013\u0011!a\u0002\to\t1\"\u001a<jI\u0016t7-\u001a\u00133sA1!1MBA\t_A\u0011\u0002b\u000f0\u0003\u0003\u0005\u001d\u0001\"\u0010\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$3\u0007\r\t\u0007\u0007\u0017\u001b\t\nb\f\t\u0013\u0011\u0005s&!AA\u0004\u0011\r\u0013aC3wS\u0012,gnY3%gE\u0002baa'\u0004\"\u0012=\u0012AE7`[~+\u0006\u000fZ1uK>\u0003xl\u00149Q_^,B\u0001\"\u0013\u0005RQAA1\nC*\t3\"y\u0006\u0005\u0006\u0002n\n\rAQ\nC'\u0007{\u0001bA!\u0003\u0003\f\u0011=\u0003\u0003BB4\t#\"qaa\u001b1\u0005\u0004\u0019i\u0007C\u0005\u0005VA\n\t\u0011q\u0001\u0005X\u0005YQM^5eK:\u001cW\rJ\u001a3!\u0019\u0011\u0019g!!\u0005P!IA1\f\u0019\u0002\u0002\u0003\u000fAQL\u0001\fKZLG-\u001a8dK\u0012\u001a4\u0007\u0005\u0004\u0004\f\u000eEEq\n\u0005\n\tC\u0002\u0014\u0011!a\u0002\tG\n1\"\u001a<jI\u0016t7-\u001a\u00134iA111TBQ\t\u001f\na#\\0t?V\u0003H-\u0019;f\u001fB|\u0016J\u001c;`\u001fB\fE\rZ\u000b\u0003\tS\u0002\"\"!<\u0003\u0004\t\u001d!q\u0002B\u000b\u0003eiwl]0Va\u0012\fG/Z(q?\u0012{WO\u00197f?>\u0003\u0018\t\u001a3\u0016\u0005\u0011=\u0004CCAw\u0005\u0007\u0011\tCa\t\u0003\u0016\u0005ARnX:`+B$\u0017\r^3Pa~3En\\1u?>\u0003\u0018\t\u001a3\u0016\u0005\u0011U\u0004CCAw\u0005\u0007\u0011yC!\r\u0003\u0016\u00059RnX:`+B$\u0017\r^3Pa~cuN\\4`\u001fB\fE\rZ\u000b\u0003\tw\u0002\"\"!<\u0003\u0004\tu\"q\bB\u000b\u0003eiwl]0Va\u0012\fG/Z(q?\nKw-\u00138u?>\u0003\u0018\t\u001a3\u0016\u0005\u0011\u0005\u0005CCAw\u0005\u0007\u0011YE!\u0014\u0003\u0016\u0005QRnX:`+B$\u0017\r^3Pa~\u001bu.\u001c9mKb|v\n]!eIV\u0011Aq\u0011\t\u000b\u0003[\u0014\u0019Aa\u0018\u0003b\tU\u0011AF7`g~+\u0006\u000fZ1uK>\u0003x,\u00138u?>\u00038+\u001e2\u0016\u0005\u00115\u0005CCAw\u0005\u0007\u00119Aa\u0004\u0003r\u0005IRnX:`+B$\u0017\r^3Pa~#u.\u001e2mK~{\u0005oU;c+\t!\u0019\n\u0005\u0006\u0002n\n\r!\u0011\u0005B\u0012\u0005c\n\u0001$\\0t?V\u0003H-\u0019;f\u001fB|f\t\\8bi~{\u0005oU;c+\t!I\n\u0005\u0006\u0002n\n\r!q\u0006B\u0019\u0005c\nq#\\0t?V\u0003H-\u0019;f\u001fB|Fj\u001c8h?>\u00038+\u001e2\u0016\u0005\u0011}\u0005CCAw\u0005\u0007\u0011iDa\u0010\u0003r\u0005IRnX:`+B$\u0017\r^3Pa~\u0013\u0015nZ%oi~{\u0005oU;c+\t!)\u000b\u0005\u0006\u0002n\n\r!1\nB'\u0005c\n!$\\0t?V\u0003H-\u0019;f\u001fB|6i\\7qY\u0016Dxl\u00149Tk\n,\"\u0001b+\u0011\u0015\u00055(1\u0001B0\u0005C\u0012\t(\u0001\u000fn?N|V\u000b\u001d3bi\u0016|\u0005oX%oi~{\u0005/T;m'\u000e\fG.\u0019:\u0016\u0005\u0011E\u0006CCAw\u0005\u0007\u00119Aa\u0004\u0003\u001c\u0006yRnX:`+B$\u0017\r^3Pa~#u.\u001e2mK~{\u0005/T;m'\u000e\fG.\u0019:\u0016\u0005\u0011]\u0006CCAw\u0005\u0007\u0011\tCa\t\u0003\u001c\u0006qRnX:`+B$\u0017\r^3Pa~3En\\1u?>\u0003X*\u001e7TG\u0006d\u0017M]\u000b\u0003\t{\u0003\"\"!<\u0003\u0004\t=\"\u0011\u0007BN\u0003uiwl]0Va\u0012\fG/Z(q?2{gnZ0Pa6+HnU2bY\u0006\u0014XC\u0001Cb!)\tiOa\u0001\u0003>\t}\"1T\u0001 [~\u001bx,\u00169eCR,w\n]0CS\u001eLe\u000e^0Pa6+HnU2bY\u0006\u0014XC\u0001Ce!)\tiOa\u0001\u0003L\t5#1T\u0001![~\u001bx,\u00169eCR,w\n]0D_6\u0004H.\u001a=`\u001fBlU\u000f\\*dC2\f'/\u0006\u0002\u0005PBQ\u0011Q\u001eB\u0002\u0005?\u0012\tGa'\u000295|6oX+qI\u0006$Xm\u00149`\u0013:$xl\u00149Nk2l\u0015\r\u001e:jqV\u0011AQ\u001b\t\u000b\u0003[\u0014\u0019Aa\u0002\u0003\u0010\u0011]g\u0002BAw\t3LA\u0001b7\u0002P\u0006Yq\n]'vY6\u000bGO]5y\u0003}iwl]0Va\u0012\fG/Z(q?\u0012{WO\u00197f?>\u0003X*\u001e7NCR\u0014\u0018\u000e_\u000b\u0003\tC\u0004\"\"!<\u0003\u0004\t\u0005\"1\u0005Cl\u0003yiwl]0Va\u0012\fG/Z(q?\u001acw.\u0019;`\u001fBlU\u000f\\'biJL\u00070\u0006\u0002\u0005hBQ\u0011Q\u001eB\u0002\u0005_\u0011\t\u0004b6\u0002;5|6oX+qI\u0006$Xm\u00149`\u0019>twmX(q\u001bVdW*\u0019;sSb,\"\u0001\"<\u0011\u0015\u00055(1\u0001B\u001f\u0005\u007f!9.A\u0010n?N|V\u000b\u001d3bi\u0016|\u0005o\u0018\"jO&sGoX(q\u001bVdW*\u0019;sSb,\"\u0001b=\u0011\u0015\u00055(1\u0001B&\u0005\u001b\"9.\u0001\u0011n?N|V\u000b\u001d3bi\u0016|\u0005oX\"p[BdW\r_0Pa6+H.T1ue&DXC\u0001C}!)\tiOa\u0001\u0003`\t\u0005Dq[\u0001\u0017[~\u001bx,\u00169eCR,w\n]0J]R|v\n\u001d#jmV\u0011Aq \t\u000b\u0003[\u0014\u0019Aa\u0002\u0003\u0010\t\u0015\u0017!G7`g~+\u0006\u000fZ1uK>\u0003x\fR8vE2,wl\u00149ESZ,\"!\"\u0002\u0011\u0015\u00055(1\u0001B\u0011\u0005G\u0011)-\u0001\rn?N|V\u000b\u001d3bi\u0016|\u0005o\u0018$m_\u0006$xl\u00149ESZ,\"!b\u0003\u0011\u0015\u00055(1\u0001B\u0018\u0005c\u0011)-A\fn?N|V\u000b\u001d3bi\u0016|\u0005o\u0018'p]\u001e|v\n\u001d#jmV\u0011Q\u0011\u0003\t\u000b\u0003[\u0014\u0019A!\u0010\u0003@\t\u0015\u0017!G7`g~+\u0006\u000fZ1uK>\u0003xLQ5h\u0013:$xl\u00149ESZ,\"!b\u0006\u0011\u0015\u00055(1\u0001B&\u0005\u001b\u0012)-\u0001\u000en?N|V\u000b\u001d3bi\u0016|\u0005oX\"p[BdW\r_0Pa\u0012Kg/\u0006\u0002\u0006\u001eAQ\u0011Q\u001eB\u0002\u0005?\u0012\tG!2\u0002-5|6oX+qI\u0006$Xm\u00149`\u0013:$xl\u00149TKR,\"!b\t\u0011\u0015\u00055(1\u0001B\u0004\u0005\u001f\u0011y/A\rn?N|V\u000b\u001d3bi\u0016|\u0005o\u0018#pk\ndWmX(q'\u0016$XCAC\u0015!)\tiOa\u0001\u0003\"\t\r\"q^\u0001\u0019[~\u001bx,\u00169eCR,w\n]0GY>\fGoX(q'\u0016$XCAC\u0018!)\tiOa\u0001\u00030\tE\"q^\u0001\u0018[~\u001bx,\u00169eCR,w\n]0M_:<wl\u00149TKR,\"!\"\u000e\u0011\u0015\u00055(1\u0001B\u001f\u0005\u007f\u0011y/A\rn?N|V\u000b\u001d3bi\u0016|\u0005o\u0018\"jO&sGoX(q'\u0016$XCAC\u001e!)\tiOa\u0001\u0003L\t5#q^\u0001\u001b[~\u001bx,\u00169eCR,w\n]0D_6\u0004H.\u001a=`\u001fB\u001cV\r^\u000b\u0003\u000b\u0003\u0002\"\"!<\u0003\u0004\t}#\u0011\rBx\u0003Yiwl]0Va\u0012\fG/Z(q?&sGoX(q\u001b>$WCAC$!)\tiOa\u0001\u0003\b\t=1\u0011D\u0001\u001a[~\u001bx,\u00169eCR,w\n]0E_V\u0014G.Z0Pa6{G-\u0006\u0002\u0006NAQ\u0011Q\u001eB\u0002\u0005C\u0011\u0019c!\u0007\u000215|6oX+qI\u0006$Xm\u00149`\r2|\u0017\r^0Pa6{G-\u0006\u0002\u0006TAQ\u0011Q\u001eB\u0002\u0005_\u0011\td!\u0007\u0002/5|6oX+qI\u0006$Xm\u00149`\u0019>twmX(q\u001b>$WCAC-!)\tiOa\u0001\u0003>\t}2\u0011D\u0001\u001a[~\u001bx,\u00169eCR,w\n]0CS\u001eLe\u000e^0Pa6{G-\u0006\u0002\u0006`AQ\u0011Q\u001eB\u0002\u0005\u0017\u0012ie!\u0007\u0002-5|6oX+qI\u0006$Xm\u00149`\u0013:$xl\u00149Q_^,\"!\"\u001a\u0011\u0015\u00055(1\u0001B\u0004\u0005\u001f\u0019i$A\rn?N|V\u000b\u001d3bi\u0016|\u0005o\u0018#pk\ndWmX(q!><XCAC6!)\tiOa\u0001\u0003\"\t\r2QH\u0001\u0019[~\u001bx,\u00169eCR,w\n]0GY>\fGoX(q!><XCAC9!)\tiOa\u0001\u00030\tE2QH\u0001\u0018[~\u001bx,\u00169eCR,w\n]0M_:<wl\u00149Q_^,\"!b\u001e\u0011\u0015\u00055(1\u0001B\u001f\u0005\u007f\u0019i$\u0001\u000en?N|V\u000b\u001d3bi\u0016|\u0005oX\"p[BdW\r_0PaB{w/\u0006\u0002\u0006~AQ\u0011Q\u001eB\u0002\u0005?\u0012\tg!\u0010\u0002%5|6oX+qI\u0006$Xm\u00149`\u001fB\fE\rZ\u000b\u0005\u000b\u0007+Y\t\u0006\u0005\u0006\u0006\u00165U1SCM!)\tiOa\u0001\u0006\b\u0016%%Q\u0003\t\u0007\u0005\u0013\u0011Y!\"#\u0011\t\r\u001dT1\u0012\u0003\b\u0007Wz&\u0019AB7\u0011%)yiXA\u0001\u0002\b)\t*A\u0006fm&$WM\\2fIM*\u0004C\u0002B2\u0007\u0003+I\tC\u0005\u0006\u0016~\u000b\t\u0011q\u0001\u0006\u0018\u0006YQM^5eK:\u001cW\rJ\u001a7!\u0019\u0019Yi!%\u0006\n\"IQ1T0\u0002\u0002\u0003\u000fQQT\u0001\fKZLG-\u001a8dK\u0012\u001at\u0007\u0005\u0004\u0004\u001c\u000e\u0005V\u0011R\u0001\u0013[~\u001bx,\u00169eCR,w\n]0PaN+(-\u0006\u0003\u0006$\u0016-F\u0003CCS\u000b[+\u0019,\"/\u0011\u0015\u00055(1ACT\u000bS\u0013\t\b\u0005\u0004\u0003\n\t-Q\u0011\u0016\t\u0005\u0007O*Y\u000bB\u0004\u0004l\u0001\u0014\ra!\u001c\t\u0013\u0015=\u0006-!AA\u0004\u0015E\u0016aC3wS\u0012,gnY3%ga\u0002bAa\u0019\u0004\u0002\u0016%\u0006\"CC[A\u0006\u0005\t9AC\\\u0003-)g/\u001b3f]\u000e,GeM\u001d\u0011\r\r-5\u0011SCU\u0011%)Y\fYA\u0001\u0002\b)i,A\u0006fm&$WM\\2fIQ\u0002\u0004CBBN\u0007C+I+\u0001\rn?N|V\u000b\u001d3bi\u0016|\u0005oX(q\u001bVd7kY1mCJ,B!b1\u0006LRAQQYCg\u000b',I\u000e\u0005\u0006\u0002n\n\rQqYCe\u00057\u0003bA!\u0003\u0003\f\u0015%\u0007\u0003BB4\u000b\u0017$qaa\u001bb\u0005\u0004\u0019i\u0007C\u0005\u0006P\u0006\f\t\u0011q\u0001\u0006R\u0006YQM^5eK:\u001cW\r\n\u001b2!\u0019\u0011\u0019g!!\u0006J\"IQQ[1\u0002\u0002\u0003\u000fQq[\u0001\fKZLG-\u001a8dK\u0012\"$\u0007\u0005\u0004\u0004\f\u000eEU\u0011\u001a\u0005\n\u000b7\f\u0017\u0011!a\u0002\u000b;\f1\"\u001a<jI\u0016t7-\u001a\u00135gA111TBQ\u000b\u0013\f\u0001$\\0t?V\u0003H-\u0019;f\u001fB|v\n]'vY6\u000bGO]5y+\u0011)\u0019/b;\u0015\u0011\u0015\u0015XQ^Cz\u000bs\u0004\"\"!<\u0003\u0004\u0015\u001dX\u0011\u001eCl!\u0019\u0011IAa\u0003\u0006jB!1qMCv\t\u001d\u0019YG\u0019b\u0001\u0007[B\u0011\"b<c\u0003\u0003\u0005\u001d!\"=\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$C\u0007\u000e\t\u0007\u0005G\u001a\t)\";\t\u0013\u0015U(-!AA\u0004\u0015]\u0018aC3wS\u0012,gnY3%iU\u0002baa#\u0004\u0012\u0016%\b\"CC~E\u0006\u0005\t9AC\u007f\u0003-)g/\u001b3f]\u000e,G\u0005\u000e\u001c\u0011\r\rm5\u0011UCu\u0003Iiwl]0Va\u0012\fG/Z(q?>\u0003H)\u001b<\u0016\t\u0019\ra1\u0002\u000b\t\r\u000b1iAb\u0005\u0007\u001aAQ\u0011Q\u001eB\u0002\r\u000f1IA!2\u0011\r\t%!1\u0002D\u0005!\u0011\u00199Gb\u0003\u0005\u000f\r-4M1\u0001\u0004n!IaqB2\u0002\u0002\u0003\u000fa\u0011C\u0001\fKZLG-\u001a8dK\u0012\"t\u0007\u0005\u0004\u0003d\r\u0005e\u0011\u0002\u0005\n\r+\u0019\u0017\u0011!a\u0002\r/\t1\"\u001a<jI\u0016t7-\u001a\u00135qA111RBI\r\u0013A\u0011Bb\u0007d\u0003\u0003\u0005\u001dA\"\b\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$C'\u000f\t\u0007\u00077\u001b\tK\"\u0003\u0002%5|6oX+qI\u0006$Xm\u00149`\u001fBlu\u000eZ\u000b\u0005\rG1Y\u0003\u0006\u0005\u0007&\u00195b1\u0007D\u001d!)\tiOa\u0001\u0007(\u0019%2\u0011\u0004\t\u0007\u0005\u0013\u0011YA\"\u000b\u0011\t\r\u001dd1\u0006\u0003\b\u0007W\"'\u0019AB7\u0011%1y\u0003ZA\u0001\u0002\b1\t$A\u0006fm&$WM\\2fIU\u0002\u0004C\u0002B2\u0007\u00033I\u0003C\u0005\u00076\u0011\f\t\u0011q\u0001\u00078\u0005YQM^5eK:\u001cW\rJ\u001b2!\u0019\u0019Yi!%\u0007*!Ia1\b3\u0002\u0002\u0003\u000faQH\u0001\fKZLG-\u001a8dK\u0012*$\u0007\u0005\u0004\u0004\u001c\u000e\u0005f\u0011F\u0001\u0013[~\u001bx,\u00169eCR,w\n]0PaB{w/\u0006\u0003\u0007D\u0019-C\u0003\u0003D#\r\u001b2\u0019F\"\u0017\u0011\u0015\u00055(1\u0001D$\r\u0013\u001ai\u0004\u0005\u0004\u0003\n\t-a\u0011\n\t\u0005\u0007O2Y\u0005B\u0004\u0004l\u0015\u0014\ra!\u001c\t\u0013\u0019=S-!AA\u0004\u0019E\u0013aC3wS\u0012,gnY3%kM\u0002bAa\u0019\u0004\u0002\u001a%\u0003\"\u0003D+K\u0006\u0005\t9\u0001D,\u0003-)g/\u001b3f]\u000e,G%\u000e\u001b\u0011\r\r-5\u0011\u0013D%\u0011%1Y&ZA\u0001\u0002\b1i&A\u0006fm&$WM\\2fIU*\u0004CBBN\u0007C3I%\u0001\tpa~kulU0J]R|v\n]!eIV\u0011a1\r\t\r\u0003[4)Ga\u0002\u0003\u0010\tU!qA\u0005\u0005\rO\nyM\u0001\bCS:\f'/\u001f*fO&\u001cHO]=\u0002#=\u0004x,T0T?2{gnZ0Pa\u0006#G-\u0006\u0002\u0007nAa\u0011Q\u001eD3\u0005{\u0011yD!\u0006\u0003>\u0005\u0011r\u000e]0N?N{f\t\\8bi~{\u0005/\u00113e+\t1\u0019\b\u0005\u0007\u0002n\u001a\u0015$q\u0006B\u0019\u0005+\u0011y#A\npa~kulU0E_V\u0014G.Z0Pa\u0006#G-\u0006\u0002\u0007zAa\u0011Q\u001eD3\u0005C\u0011\u0019C!\u0006\u0003\"\u0005\u0019r\u000e]0N?N{&)[4J]R|v\n]!eIV\u0011aq\u0010\t\r\u0003[4)Ga\u0013\u0003N\tU!1J\u0001\u0015_B|VjX*`\u0007>l\u0007\u000f\\3y?>\u0003\u0018\t\u001a3\u0016\u0005\u0019\u0015\u0005\u0003DAw\rK\u0012yF!\u0019\u0003\u0016\t}\u0013\u0001E8q?6{6kX%oi~{\u0005oU;c+\t1Y\t\u0005\u0007\u0002n\u001a\u0015$q\u0001B\b\u0005c\u00129!A\tpa~kulU0M_:<wl\u00149Tk\n,\"A\"%\u0011\u0019\u00055hQ\rB\u001f\u0005\u007f\u0011\tH!\u0010\u0002%=\u0004x,T0T?\u001acw.\u0019;`\u001fB\u001cVOY\u000b\u0003\r/\u0003B\"!<\u0007f\t=\"\u0011\u0007B9\u0005_\t1c\u001c9`\u001b~\u001bv\fR8vE2,wl\u00149Tk\n,\"A\"(\u0011\u0019\u00055hQ\rB\u0011\u0005G\u0011\tH!\t\u0002'=\u0004x,T0T?\nKw-\u00138u?>\u00038+\u001e2\u0016\u0005\u0019\r\u0006\u0003DAw\rK\u0012YE!\u0014\u0003r\t-\u0013\u0001F8q?6{6kX\"p[BdW\r_0PaN+(-\u0006\u0002\u0007*Ba\u0011Q\u001eD3\u0005?\u0012\tG!\u001d\u0003`\u00051r\u000e]0N?N{\u0016J\u001c;`\u001fBlU\u000f\\*dC2\f'/\u0006\u0002\u00070Ba\u0011Q\u001eD3\u0005\u000f\u0011yAa'\u0003\b\u00059r\u000e]0N?N{Fj\u001c8h?>\u0003X*\u001e7TG\u0006d\u0017M]\u000b\u0003\rk\u0003B\"!<\u0007f\tu\"q\bBN\u0005{\t\u0001d\u001c9`\u001b~\u001bvL\u00127pCR|v\n]'vYN\u001b\u0017\r\\1s+\t1Y\f\u0005\u0007\u0002n\u001a\u0015$q\u0006B\u0019\u00057\u0013y#A\rpa~kulU0E_V\u0014G.Z0Pa6+HnU2bY\u0006\u0014XC\u0001Da!1\tiO\"\u001a\u0003\"\t\r\"1\u0014B\u0011\u0003ey\u0007oX'`'~\u0013\u0015nZ%oi~{\u0005/T;m'\u000e\fG.\u0019:\u0016\u0005\u0019\u001d\u0007\u0003DAw\rK\u0012YE!\u0014\u0003\u001c\n-\u0013AG8q?6{6kX\"p[BdW\r_0Pa6+HnU2bY\u0006\u0014XC\u0001Dg!1\tiO\"\u001a\u0003`\t\u0005$1\u0014B0\u0003Yy\u0007oX'`'~Ke\u000e^0Pa6+H.T1ue&DXC\u0001Dj!1\tiO\"\u001a\u0003\b\t=Aq\u001bB\u0004\u0003]y\u0007oX'`'~cuN\\4`\u001fBlU\u000f\\'biJL\u00070\u0006\u0002\u0007ZBa\u0011Q\u001eD3\u0005{\u0011y\u0004b6\u0003>\u0005Ar\u000e]0N?N{f\t\\8bi~{\u0005/T;m\u001b\u0006$(/\u001b=\u0016\u0005\u0019}\u0007\u0003DAw\rK\u0012yC!\r\u0005X\n=\u0012!G8q?6{6k\u0018#pk\ndWmX(q\u001bVdW*\u0019;sSb,\"A\":\u0011\u0019\u00055hQ\rB\u0011\u0005G!9N!\t\u00023=\u0004x,T0T?\nKw-\u00138u?>\u0003X*\u001e7NCR\u0014\u0018\u000e_\u000b\u0003\rW\u0004B\"!<\u0007f\t-#Q\nCl\u0005\u0017\n!d\u001c9`\u001b~\u001bvlQ8na2,\u0007pX(q\u001bVdW*\u0019;sSb,\"A\"=\u0011\u0019\u00055hQ\rB0\u0005C\"9Na\u0018\u0002!=\u0004x,T0T?&sGoX(q\u001b>$WC\u0001D|!1\tiO\"\u001a\u0003\b\t=1\u0011\u0004B\u0004\u0003Ey\u0007oX'`'~cuN\\4`\u001fBlu\u000eZ\u000b\u0003\r{\u0004B\"!<\u0007f\tu\"qHB\r\u0005{\t!c\u001c9`\u001b~\u001bvL\u00127pCR|v\n]'pIV\u0011q1\u0001\t\r\u0003[4)Ga\f\u00032\re!qF\u0001\u0014_B|VjX*`\t>,(\r\\3`\u001fBlu\u000eZ\u000b\u0003\u000f\u0013\u0001B\"!<\u0007f\t\u0005\"1EB\r\u0005C\t1c\u001c9`\u001b~\u001bvLQ5h\u0013:$xl\u00149N_\u0012,\"ab\u0004\u0011\u0019\u00055hQ\rB&\u0005\u001b\u001aIBa\u0013\u0002!=\u0004x,T0T?&sGoX(q\t&4XCAD\u000b!1\tiO\"\u001a\u0003\b\t=!Q\u0019B\u0004\u0003Ey\u0007oX'`'~cuN\\4`\u001fB$\u0015N^\u000b\u0003\u000f7\u0001B\"!<\u0007f\tu\"q\bBc\u0005{\t!c\u001c9`\u001b~\u001bvL\u00127pCR|v\n\u001d#jmV\u0011q\u0011\u0005\t\r\u0003[4)Ga\f\u00032\t\u0015'qF\u0001\u0014_B|VjX*`\t>,(\r\\3`\u001fB$\u0015N^\u000b\u0003\u000fO\u0001B\"!<\u0007f\t\u0005\"1\u0005Bc\u0005C\t1c\u001c9`\u001b~\u001bvLQ5h\u0013:$xl\u00149ESZ,\"a\"\f\u0011\u0019\u00055hQ\rB&\u0005\u001b\u0012)Ma\u0013\u0002)=\u0004x,T0T?\u000e{W\u000e\u001d7fq~{\u0005\u000fR5w+\t9\u0019\u0004\u0005\u0007\u0002n\u001a\u0015$q\fB1\u0005\u000b\u0014y&\u0001\tpa~kulU0J]R|v\n\u001d)poV\u0011q\u0011\b\t\r\u0003[4)Ga\u0002\u0003\u0010\ru\"qA\u0001\u0012_B|VjX*`\u0019>twmX(q!><XCAD !1\tiO\"\u001a\u0003>\t}2Q\bB\u001f\u0003Iy\u0007oX'`'~3En\\1u?>\u0003\bk\\<\u0016\u0005\u001d\u0015\u0003\u0003DAw\rK\u0012yC!\r\u0004>\t=\u0012aE8q?6{6k\u0018#pk\ndWmX(q!><XCAD&!1\tiO\"\u001a\u0003\"\t\r2Q\bB\u0011\u0003Qy\u0007oX'`'~\u001bu.\u001c9mKb|v\n\u001d)poV\u0011q\u0011\u000b\t\r\u0003[4)Ga\u0018\u0003b\ru\"qL\u0001\r_B|VjX*`\u001fB\fE\rZ\u000b\u0005\u000f/:y\u0006\u0006\u0005\bZ\u001d\u0005tqMD7!1\tiO\"\u001a\b\\\u001du#QCD.!\u0019\u0011IAa\u0003\b^A!1qMD0\t!\u0019Y'!\bC\u0002\r5\u0004BCD2\u0003;\t\t\u0011q\u0001\bf\u0005YQM^5eK:\u001cW\rJ\u001b7!\u0019\u0011\u0019g!!\b^!Qq\u0011NA\u000f\u0003\u0003\u0005\u001dab\u001b\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$Sg\u000e\t\u0007\u0007\u0017\u001b\tj\"\u0018\t\u0015\u001d=\u0014QDA\u0001\u0002\b9\t(A\u0006fm&$WM\\2fIUB\u0004CBBN\u0007C;i&\u0001\u0007pa~kulU0PaN+(-\u0006\u0003\bx\u001d}D\u0003CD=\u000f\u0003;9i\"$\u0011\u0019\u00055hQMD>\u000f{\u0012\thb\u001f\u0011\r\t%!1BD?!\u0011\u00199gb \u0005\u0011\r-\u0014q\u0004b\u0001\u0007[B!bb!\u0002 \u0005\u0005\t9ADC\u0003-)g/\u001b3f]\u000e,G%N\u001d\u0011\r\t\r4\u0011QD?\u0011)9I)a\b\u0002\u0002\u0003\u000fq1R\u0001\fKZLG-\u001a8dK\u00122\u0004\u0007\u0005\u0004\u0004\f\u000eEuQ\u0010\u0005\u000b\u000f\u001f\u000by\"!AA\u0004\u001dE\u0015aC3wS\u0012,gnY3%mE\u0002baa'\u0004\"\u001eu\u0014AE8q?6{6kX(q\u001bVd7kY1mCJ,Bab&\b RAq\u0011TDQ\u000fO;i\u000b\u0005\u0007\u0002n\u001a\u0015t1TDO\u00057;Y\n\u0005\u0004\u0003\n\t-qQ\u0014\t\u0005\u0007O:y\n\u0002\u0005\u0004l\u0005\u0005\"\u0019AB7\u0011)9\u0019+!\t\u0002\u0002\u0003\u000fqQU\u0001\fKZLG-\u001a8dK\u00122$\u0007\u0005\u0004\u0003d\r\u0005uQ\u0014\u0005\u000b\u000fS\u000b\t#!AA\u0004\u001d-\u0016aC3wS\u0012,gnY3%mM\u0002baa#\u0004\u0012\u001eu\u0005BCDX\u0003C\t\t\u0011q\u0001\b2\u0006YQM^5eK:\u001cW\r\n\u001c5!\u0019\u0019Yj!)\b\u001e\u0006\u0011r\u000e]0N?N{v\n]'vY6\u000bGO]5y+\u001199lb0\u0015\u0011\u001dev\u0011YDd\u000f\u001b\u0004B\"!<\u0007f\u001dmvQ\u0018Cl\u000fw\u0003bA!\u0003\u0003\f\u001du\u0006\u0003BB4\u000f\u007f#\u0001ba\u001b\u0002$\t\u00071Q\u000e\u0005\u000b\u000f\u0007\f\u0019#!AA\u0004\u001d\u0015\u0017aC3wS\u0012,gnY3%mU\u0002bAa\u0019\u0004\u0002\u001eu\u0006BCDe\u0003G\t\t\u0011q\u0001\bL\u0006YQM^5eK:\u001cW\r\n\u001c7!\u0019\u0019Yi!%\b>\"QqqZA\u0012\u0003\u0003\u0005\u001da\"5\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$cg\u000e\t\u0007\u00077\u001b\tk\"0\u0002\u0019=\u0004x,T0T?>\u0003H)\u001b<\u0016\t\u001d]wq\u001c\u000b\t\u000f3<\tob:\bnBa\u0011Q\u001eD3\u000f7<iN!2\b\\B1!\u0011\u0002B\u0006\u000f;\u0004Baa\u001a\b`\u0012A11NA\u0013\u0005\u0004\u0019i\u0007\u0003\u0006\bd\u0006\u0015\u0012\u0011!a\u0002\u000fK\f1\"\u001a<jI\u0016t7-\u001a\u00137qA1!1MBA\u000f;D!b\";\u0002&\u0005\u0005\t9ADv\u0003-)g/\u001b3f]\u000e,GEN\u001d\u0011\r\r-5\u0011SDo\u0011)9y/!\n\u0002\u0002\u0003\u000fq\u0011_\u0001\fKZLG-\u001a8dK\u0012:\u0004\u0007\u0005\u0004\u0004\u001c\u000e\u0005vQ\\\u0001\r_B|VjX*`\u001fBlu\u000eZ\u000b\u0005\u000fo<y\u0010\u0006\u0005\bz\"\u0005\u0001r\u0001E\u0007!1\tiO\"\u001a\b|\u001eu8\u0011DD~!\u0019\u0011IAa\u0003\b~B!1qMD\u0000\t!\u0019Y'a\nC\u0002\r5\u0004B\u0003E\u0002\u0003O\t\t\u0011q\u0001\t\u0006\u0005YQM^5eK:\u001cW\rJ\u001c2!\u0019\u0011\u0019g!!\b~\"Q\u0001\u0012BA\u0014\u0003\u0003\u0005\u001d\u0001c\u0003\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$sG\r\t\u0007\u0007\u0017\u001b\tj\"@\t\u0015!=\u0011qEA\u0001\u0002\bA\t\"A\u0006fm&$WM\\2fI]\u001a\u0004CBBN\u0007C;i0\u0001\u0007pa~kulU0PaB{w/\u0006\u0003\t\u0018!}A\u0003\u0003E\r\u0011CA9\u0003#\f\u0011\u0019\u00055hQ\rE\u000e\u0011;\u0019i\u0004c\u0007\u0011\r\t%!1\u0002E\u000f!\u0011\u00199\u0007c\b\u0005\u0011\r-\u0014\u0011\u0006b\u0001\u0007[B!\u0002c\t\u0002*\u0005\u0005\t9\u0001E\u0013\u0003-)g/\u001b3f]\u000e,Ge\u000e\u001b\u0011\r\t\r4\u0011\u0011E\u000f\u0011)AI#!\u000b\u0002\u0002\u0003\u000f\u00012F\u0001\fKZLG-\u001a8dK\u0012:T\u0007\u0005\u0004\u0004\f\u000eE\u0005R\u0004\u0005\u000b\u0011_\tI#!AA\u0004!E\u0012aC3wS\u0012,gnY3%oY\u0002baa'\u0004\"\"u\u0011\u0001E8q?N{VjX%oi~{\u0005/\u00113e+\tA9\u0004\u0005\u0007\u0002n\u001a\u0015$q\u0002B\u0004\u0005+\u00119!A\tpa~\u001bv,T0M_:<wl\u00149BI\u0012,\"\u0001#\u0010\u0011\u0019\u00055hQ\rB \u0005{\u0011)B!\u0010\u0002%=\u0004xlU0N?\u001acw.\u0019;`\u001fB\fE\rZ\u000b\u0003\u0011\u0007\u0002B\"!<\u0007f\tE\"q\u0006B\u000b\u0005_\t1c\u001c9`'~ku\fR8vE2,wl\u00149BI\u0012,\"\u0001#\u0013\u0011\u0019\u00055hQ\rB\u0012\u0005C\u0011)B!\t\u0002'=\u0004xlU0N?\nKw-\u00138u?>\u0003\u0018\t\u001a3\u0016\u0005!=\u0003\u0003DAw\rK\u0012iEa\u0013\u0003\u0016\t-\u0013\u0001F8q?N{VjX\"p[BdW\r_0Pa\u0006#G-\u0006\u0002\tVAa\u0011Q\u001eD3\u0005C\u0012yF!\u0006\u0003`\u0005\u0001r\u000e]0T?6{\u0016J\u001c;`\u001fB\u001cVOY\u000b\u0003\u00117\u0002B\"!<\u0007f\t=!q\u0001B9\u0005\u000f\t\u0011c\u001c9`'~ku\fT8oO~{\u0005oU;c+\tA\t\u0007\u0005\u0007\u0002n\u001a\u0015$q\bB\u001f\u0005c\u0012i$\u0001\npa~\u001bv,T0GY>\fGoX(q'V\u0014WC\u0001E4!1\tiO\"\u001a\u00032\t=\"\u0011\u000fB\u0018\u0003My\u0007oX*`\u001b~#u.\u001e2mK~{\u0005oU;c+\tAi\u0007\u0005\u0007\u0002n\u001a\u0015$1\u0005B\u0011\u0005c\u0012\t#A\npa~\u001bv,T0CS\u001eLe\u000e^0PaN+(-\u0006\u0002\ttAa\u0011Q\u001eD3\u0005\u001b\u0012YE!\u001d\u0003L\u0005!r\u000e]0T?6{6i\\7qY\u0016Dxl\u00149Tk\n,\"\u0001#\u001f\u0011\u0019\u00055hQ\rB1\u0005?\u0012\tHa\u0018\u0002-=\u0004xlU0N?&sGoX(q\u001bVd7kY1mCJ,\"\u0001c \u0011\u0019\u00055hQ\rB\b\u0005\u000f\u0011YJa\u0002\u0002/=\u0004xlU0N?2{gnZ0Pa6+HnU2bY\u0006\u0014XC\u0001EC!1\tiO\"\u001a\u0003@\tu\"1\u0014B\u001f\u0003ay\u0007oX*`\u001b~3En\\1u?>\u0003X*\u001e7TG\u0006d\u0017M]\u000b\u0003\u0011\u0017\u0003B\"!<\u0007f\tE\"q\u0006BN\u0005_\t\u0011d\u001c9`'~ku\fR8vE2,wl\u00149Nk2\u001c6-\u00197beV\u0011\u0001\u0012\u0013\t\r\u0003[4)Ga\t\u0003\"\tm%\u0011E\u0001\u001a_B|6kX'`\u0005&<\u0017J\u001c;`\u001fBlU\u000f\\*dC2\f'/\u0006\u0002\t\u0018Ba\u0011Q\u001eD3\u0005\u001b\u0012YEa'\u0003L\u0005Qr\u000e]0T?6{6i\\7qY\u0016Dxl\u00149Nk2\u001c6-\u00197beV\u0011\u0001R\u0014\t\r\u0003[4)G!\u0019\u0003`\tm%qL\u0001\u0017_B|6kX'`\u0013:$xl\u00149Nk2l\u0015\r\u001e:jqV\u0011\u00012\u0015\t\r\u0003[4)Ga\u0004\u0003\b\u0011]'qA\u0001\u0018_B|6kX'`\u0019>twmX(q\u001bVdW*\u0019;sSb,\"\u0001#+\u0011\u0019\u00055hQ\rB \u0005{!9N!\u0010\u00021=\u0004xlU0N?\u001acw.\u0019;`\u001fBlU\u000f\\'biJL\u00070\u0006\u0002\t0Ba\u0011Q\u001eD3\u0005c\u0011y\u0003b6\u00030\u0005Ir\u000e]0T?6{Fi\\;cY\u0016|v\n]'vY6\u000bGO]5y+\tA)\f\u0005\u0007\u0002n\u001a\u0015$1\u0005B\u0011\t/\u0014\t#A\rpa~\u001bv,T0CS\u001eLe\u000e^0Pa6+H.T1ue&DXC\u0001E^!1\tiO\"\u001a\u0003N\t-Cq\u001bB&\u0003iy\u0007oX*`\u001b~\u001bu.\u001c9mKb|v\n]'vY6\u000bGO]5y+\tA\t\r\u0005\u0007\u0002n\u001a\u0015$\u0011\rB0\t/\u0014y&\u0001\tpa~\u001bv,T0J]R|v\n\u001d#jmV\u0011\u0001r\u0019\t\r\u0003[4)Ga\u0004\u0003\b\t\u0015'qA\u0001\u0012_B|6kX'`\u0019>twmX(q\t&4XC\u0001Eg!1\tiO\"\u001a\u0003@\tu\"Q\u0019B\u001f\u0003Iy\u0007oX*`\u001b~3En\\1u?>\u0003H)\u001b<\u0016\u0005!M\u0007\u0003DAw\rK\u0012\tDa\f\u0003F\n=\u0012aE8q?N{Vj\u0018#pk\ndWmX(q\t&4XC\u0001Em!1\tiO\"\u001a\u0003$\t\u0005\"Q\u0019B\u0011\u0003My\u0007oX*`\u001b~\u0013\u0015nZ%oi~{\u0005\u000fR5w+\tAy\u000e\u0005\u0007\u0002n\u001a\u0015$Q\nB&\u0005\u000b\u0014Y%\u0001\u000bpa~\u001bv,T0D_6\u0004H.\u001a=`\u001fB$\u0015N^\u000b\u0003\u0011K\u0004B\"!<\u0007f\t\u0005$q\fBc\u0005?\n\u0001c\u001c9`'~ku,\u00138u?>\u0003Xj\u001c3\u0016\u0005!-\b\u0003DAw\rK\u0012yAa\u0002\u0004\u001a\t\u001d\u0011!E8q?N{Vj\u0018'p]\u001e|v\n]'pIV\u0011\u0001\u0012\u001f\t\r\u0003[4)Ga\u0010\u0003>\re!QH\u0001\u0013_B|6kX'`\r2|\u0017\r^0Pa6{G-\u0006\u0002\txBa\u0011Q\u001eD3\u0005c\u0011yc!\u0007\u00030\u0005\u0019r\u000e]0T?6{Fi\\;cY\u0016|v\n]'pIV\u0011\u0001R \t\r\u0003[4)Ga\t\u0003\"\re!\u0011E\u0001\u0014_B|6kX'`\u0005&<\u0017J\u001c;`\u001fBlu\u000eZ\u000b\u0003\u0013\u0007\u0001B\"!<\u0007f\t5#1JB\r\u0005\u0017\n\u0001c\u001c9`'~ku,\u00138u?>\u0003\bk\\<\u0016\u0005%%\u0001\u0003DAw\rK\u0012yAa\u0002\u0004>\t\u001d\u0011!E8q?N{Vj\u0018'p]\u001e|v\n\u001d)poV\u0011\u0011r\u0002\t\r\u0003[4)Ga\u0010\u0003>\ru\"QH\u0001\u0013_B|6kX'`\r2|\u0017\r^0PaB{w/\u0006\u0002\n\u0016Aa\u0011Q\u001eD3\u0005c\u0011yc!\u0010\u00030\u0005\u0019r\u000e]0T?6{Fi\\;cY\u0016|v\n\u001d)poV\u0011\u00112\u0004\t\r\u0003[4)Ga\t\u0003\"\ru\"\u0011E\u0001\u0015_B|6kX'`\u0007>l\u0007\u000f\\3y?>\u0003\bk\\<\u0016\u0005%\u0005\u0002\u0003DAw\rK\u0012\tGa\u0018\u0004>\t}\u0013\u0001D8q?N{VjX(q\u0003\u0012$W\u0003BE\u0014\u0013[!\u0002\"#\u000b\n2%]\u0012R\b\t\r\u0003[4)'c\u000b\n0\tU\u0011r\u0006\t\u0005\u0007OJi\u0003\u0002\u0005\u0004l\u0005m$\u0019AB7!\u0019\u0011IAa\u0003\n,!Q\u00112GA>\u0003\u0003\u0005\u001d!#\u000e\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$sg\u000e\t\u0007\u0005G\u001a\t)c\u000b\t\u0015%e\u00121PA\u0001\u0002\bIY$A\u0006fm&$WM\\2fI]B\u0004CBBF\u0007#KY\u0003\u0003\u0006\n@\u0005m\u0014\u0011!a\u0002\u0013\u0003\n1\"\u001a<jI\u0016t7-\u001a\u00138sA111TBQ\u0013W\tAb\u001c9`'~kul\u00149Tk\n,B!c\u0012\nNQA\u0011\u0012JE)\u0013/Ji\u0006\u0005\u0007\u0002n\u001a\u0015\u00142JE(\u0005cJy\u0005\u0005\u0003\u0004h%5C\u0001CB6\u0003{\u0012\ra!\u001c\u0011\r\t%!1BE&\u0011)I\u0019&! \u0002\u0002\u0003\u000f\u0011RK\u0001\fKZLG-\u001a8dK\u0012B\u0004\u0007\u0005\u0004\u0003d\r\u0005\u00152\n\u0005\u000b\u00133\ni(!AA\u0004%m\u0013aC3wS\u0012,gnY3%qE\u0002baa#\u0004\u0012&-\u0003BCE0\u0003{\n\t\u0011q\u0001\nb\u0005YQM^5eK:\u001cW\r\n\u001d3!\u0019\u0019Yj!)\nL\u0005\u0011r\u000e]0T?6{v\n]'vYN\u001b\u0017\r\\1s+\u0011I9'#\u001c\u0015\u0011%%\u0014\u0012OE<\u0013{\u0002B\"!<\u0007f%-\u0014r\u000eBN\u0013_\u0002Baa\u001a\nn\u0011A11NA@\u0005\u0004\u0019i\u0007\u0005\u0004\u0003\n\t-\u00112\u000e\u0005\u000b\u0013g\ny(!AA\u0004%U\u0014aC3wS\u0012,gnY3%qM\u0002bAa\u0019\u0004\u0002&-\u0004BCE=\u0003\u007f\n\t\u0011q\u0001\n|\u0005YQM^5eK:\u001cW\r\n\u001d5!\u0019\u0019Yi!%\nl!Q\u0011rPA@\u0003\u0003\u0005\u001d!#!\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$\u0003(\u000e\t\u0007\u00077\u001b\t+c\u001b\u0002%=\u0004xlU0N?>\u0003X*\u001e7NCR\u0014\u0018\u000e_\u000b\u0005\u0013\u000fKi\t\u0006\u0005\n\n&E\u0015rSEO!1\tiO\"\u001a\n\f&=Eq[EH!\u0011\u00199'#$\u0005\u0011\r-\u0014\u0011\u0011b\u0001\u0007[\u0002bA!\u0003\u0003\f%-\u0005BCEJ\u0003\u0003\u000b\t\u0011q\u0001\n\u0016\u0006YQM^5eK:\u001cW\r\n\u001d7!\u0019\u0011\u0019g!!\n\f\"Q\u0011\u0012TAA\u0003\u0003\u0005\u001d!c'\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$\u0003h\u000e\t\u0007\u0007\u0017\u001b\t*c#\t\u0015%}\u0015\u0011QA\u0001\u0002\bI\t+A\u0006fm&$WM\\2fIaB\u0004CBBN\u0007CKY)\u0001\u0007pa~\u001bv,T0Pa\u0012Kg/\u0006\u0003\n(&5F\u0003CEU\u0013cK9,#0\u0011\u0019\u00055hQMEV\u0013_\u0013)-c,\u0011\t\r\u001d\u0014R\u0016\u0003\t\u0007W\n\u0019I1\u0001\u0004nA1!\u0011\u0002B\u0006\u0013WC!\"c-\u0002\u0004\u0006\u0005\t9AE[\u0003-)g/\u001b3f]\u000e,G\u0005O\u001d\u0011\r\t\r4\u0011QEV\u0011)II,a!\u0002\u0002\u0003\u000f\u00112X\u0001\fKZLG-\u001a8dK\u0012J\u0004\u0007\u0005\u0004\u0004\f\u000eE\u00152\u0016\u0005\u000b\u0013\u007f\u000b\u0019)!AA\u0004%\u0005\u0017aC3wS\u0012,gnY3%sE\u0002baa'\u0004\"&-\u0016\u0001D8q?N{VjX(q\u001b>$W\u0003BEd\u0013\u001b$\u0002\"#3\nR&]\u0017R\u001c\t\r\u0003[4)'c3\nP\u000ee\u0011r\u001a\t\u0005\u0007OJi\r\u0002\u0005\u0004l\u0005\u0015%\u0019AB7!\u0019\u0011IAa\u0003\nL\"Q\u00112[AC\u0003\u0003\u0005\u001d!#6\u0002\u0017\u00154\u0018\u000eZ3oG\u0016$\u0013H\r\t\u0007\u0005G\u001a\t)c3\t\u0015%e\u0017QQA\u0001\u0002\bIY.A\u0006fm&$WM\\2fIe\u001a\u0004CBBF\u0007#KY\r\u0003\u0006\n`\u0006\u0015\u0015\u0011!a\u0002\u0013C\f1\"\u001a<jI\u0016t7-\u001a\u0013:iA111TBQ\u0013\u0017\fAb\u001c9`'~kul\u00149Q_^,B!c:\nnRA\u0011\u0012^Ey\u0013oLi\u0010\u0005\u0007\u0002n\u001a\u0015\u00142^Ex\u0007{Iy\u000f\u0005\u0003\u0004h%5H\u0001CB6\u0003\u000f\u0013\ra!\u001c\u0011\r\t%!1BEv\u0011)I\u00190a\"\u0002\u0002\u0003\u000f\u0011R_\u0001\fKZLG-\u001a8dK\u0012JT\u0007\u0005\u0004\u0003d\r\u0005\u00152\u001e\u0005\u000b\u0013s\f9)!AA\u0004%m\u0018aC3wS\u0012,gnY3%sY\u0002baa#\u0004\u0012&-\bBCE\u0000\u0003\u000f\u000b\t\u0011q\u0001\u000b\u0002\u0005YQM^5eK:\u001cW\rJ\u001d8!\u0019\u0019Yj!)\nl\u0006\tr\u000e]0N?\u0012ku,\u00138u?>\u0003\u0018\t\u001a3\u0016\u0005)\u001d\u0001\u0003DAw\rK\u00129Aa\u0002\u0003\u0016\t\u001d\u0011AE8q?6{F)T0M_:<wl\u00149BI\u0012,\"A#\u0004\u0011\u0019\u00055hQ\rB\u001f\u0005{\u0011)B!\u0010\u0002'=\u0004x,T0E\u001b~3En\\1u?>\u0003\u0018\t\u001a3\u0016\u0005)M\u0001\u0003DAw\rK\u0012yCa\f\u0003\u0016\t=\u0012\u0001F8q?6{F)T0E_V\u0014G.Z0Pa\u0006#G-\u0006\u0002\u000b\u001aAa\u0011Q\u001eD3\u0005C\u0011\tC!\u0006\u0003\"\u0005!r\u000e]0N?\u0012kuLQ5h\u0013:$xl\u00149BI\u0012,\"Ac\b\u0011\u0019\u00055hQ\rB&\u0005\u0017\u0012)Ba\u0013\u0002+=\u0004x,T0E\u001b~\u001bu.\u001c9mKb|v\n]!eIV\u0011!R\u0005\t\r\u0003[4)Ga\u0018\u0003`\tU!qL\u0001\u0012_B|Vj\u0018#N?&sGoX(q'V\u0014WC\u0001F\u0016!1\tiO\"\u001a\u0003\b\t\u001d!\u0011\u000fB\u0004\u0003Iy\u0007oX'`\t6{Fj\u001c8h?>\u00038+\u001e2\u0016\u0005)E\u0002\u0003DAw\rK\u0012iD!\u0010\u0003r\tu\u0012aE8q?6{F)T0GY>\fGoX(q'V\u0014WC\u0001F\u001c!1\tiO\"\u001a\u00030\t=\"\u0011\u000fB\u0018\u0003Qy\u0007oX'`\t6{Fi\\;cY\u0016|v\n]*vEV\u0011!R\b\t\r\u0003[4)G!\t\u0003\"\tE$\u0011E\u0001\u0015_B|Vj\u0018#N?\nKw-\u00138u?>\u00038+\u001e2\u0016\u0005)\r\u0003\u0003DAw\rK\u0012YEa\u0013\u0003r\t-\u0013!F8q?6{F)T0D_6\u0004H.\u001a=`\u001fB\u001cVOY\u000b\u0003\u0015\u0013\u0002B\"!<\u0007f\t}#q\fB9\u0005?\nqc\u001c9`\u001b~#UjX%oi~{\u0005/T;m'\u000e\fG.\u0019:\u0016\u0005)=\u0003\u0003DAw\rK\u00129Aa\u0002\u0003\u001c\n\u001d\u0011\u0001G8q?6{F)T0M_:<wl\u00149Nk2\u001c6-\u00197beV\u0011!R\u000b\t\r\u0003[4)G!\u0010\u0003>\tm%QH\u0001\u001a_B|Vj\u0018#N?\u001acw.\u0019;`\u001fBlU\u000f\\*dC2\f'/\u0006\u0002\u000b\\Aa\u0011Q\u001eD3\u0005_\u0011yCa'\u00030\u0005Qr\u000e]0N?\u0012ku\fR8vE2,wl\u00149Nk2\u001c6-\u00197beV\u0011!\u0012\r\t\r\u0003[4)G!\t\u0003\"\tm%\u0011E\u0001\u001b_B|Vj\u0018#N?\nKw-\u00138u?>\u0003X*\u001e7TG\u0006d\u0017M]\u000b\u0003\u0015O\u0002B\"!<\u0007f\t-#1\nBN\u0005\u0017\n1d\u001c9`\u001b~#UjX\"p[BdW\r_0Pa6+HnU2bY\u0006\u0014XC\u0001F7!1\tiO\"\u001a\u0003`\t}#1\u0014B0\u0003Ey\u0007oX'`\t6{\u0016J\u001c;`\u001fBlu\u000eZ\u000b\u0003\u0015g\u0002B\"!<\u0007f\t\u001d!qAB\r\u0005\u000f\t!c\u001c9`\u001b~#Uj\u0018'p]\u001e|v\n]'pIV\u0011!\u0012\u0010\t\r\u0003[4)G!\u0010\u0003>\re!QH\u0001\u0014_B|Vj\u0018#N?\u001acw.\u0019;`\u001fBlu\u000eZ\u000b\u0003\u0015\u007f\u0002B\"!<\u0007f\t=\"qFB\r\u0005_\tAc\u001c9`\u001b~#Uj\u0018#pk\ndWmX(q\u001b>$WC\u0001FC!1\tiO\"\u001a\u0003\"\t\u00052\u0011\u0004B\u0011\u0003Qy\u0007oX'`\t6{&)[4J]R|v\n]'pIV\u0011!2\u0012\t\r\u0003[4)Ga\u0013\u0003L\re!1J\u0001\u0012_B|Vj\u0018#N?&sGoX(q\t&4XC\u0001FI!1\tiO\"\u001a\u0003\b\t\u001d!Q\u0019B\u0004\u0003Iy\u0007oX'`\t6{Fj\u001c8h?>\u0003H)\u001b<\u0016\u0005)]\u0005\u0003DAw\rK\u0012iD!\u0010\u0003F\nu\u0012aE8q?6{F)T0GY>\fGoX(q\t&4XC\u0001FO!1\tiO\"\u001a\u00030\t=\"Q\u0019B\u0018\u0003Qy\u0007oX'`\t6{Fi\\;cY\u0016|v\n\u001d#jmV\u0011!2\u0015\t\r\u0003[4)G!\t\u0003\"\t\u0015'\u0011E\u0001\u0015_B|Vj\u0018#N?\nKw-\u00138u?>\u0003H)\u001b<\u0016\u0005)%\u0006\u0003DAw\rK\u0012YEa\u0013\u0003F\n-\u0013!F8q?6{F)T0D_6\u0004H.\u001a=`\u001fB$\u0015N^\u000b\u0003\u0015_\u0003B\"!<\u0007f\t}#q\fBc\u0005?\n\u0011c\u001c9`\u001b~#UjX%oi~{\u0005\u000fU8x+\tQ)\f\u0005\u0007\u0002n\u001a\u0015$q\u0001B\u0004\u0007{\u00119!\u0001\npa~ku\fR'`\u0019>twmX(q!><XC\u0001F^!1\tiO\"\u001a\u0003>\tu2Q\bB\u001f\u0003My\u0007oX'`\t6{f\t\\8bi~{\u0005\u000fU8x+\tQ\t\r\u0005\u0007\u0002n\u001a\u0015$q\u0006B\u0018\u0007{\u0011y#\u0001\u000bpa~ku\fR'`\t>,(\r\\3`\u001fB\u0004vn^\u000b\u0003\u0015\u000f\u0004B\"!<\u0007f\t\u0005\"\u0011EB\u001f\u0005C\tQc\u001c9`\u001b~#UjX\"p[BdW\r_0PaB{w/\u0006\u0002\u000bNBa\u0011Q\u001eD3\u0005?\u0012yf!\u0010\u0003`\u0001"
)
public interface MatrixExpandedOps extends MatrixGenericOps {
   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpMod_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpMod_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpMod_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpMod_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpMod_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpPow_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpPow_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpPow_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpPow_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpPow_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpAdd_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpSub_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpMulScalar_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpMulMatrix_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpMulMatrix_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpMulMatrix_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpMulMatrix_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpMulMatrix_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpMulMatrix_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpDiv_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpSet_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpMod_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpMod_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpMod_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpMod_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpMod_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpPow_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpPow_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpPow_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpPow_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpPow_$eq(final BinaryUpdateRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpMulMatrix_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_BigInt_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Complex_OpAdd_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_BigInt_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Complex_OpSub_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_BigInt_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Complex_OpMulScalar_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_BigInt_OpMod_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_BigInt_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Complex_OpDiv_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpPow_$eq(final BinaryRegistry x$1);

   void breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Complex_OpPow_$eq(final BinaryRegistry x$1);

   BinaryUpdateRegistry m_m_UpdateOp_Int_OpAdd();

   BinaryUpdateRegistry m_m_UpdateOp_Double_OpAdd();

   BinaryUpdateRegistry m_m_UpdateOp_Float_OpAdd();

   BinaryUpdateRegistry m_m_UpdateOp_Long_OpAdd();

   BinaryUpdateRegistry m_m_UpdateOp_BigInt_OpAdd();

   BinaryUpdateRegistry m_m_UpdateOp_Complex_OpAdd();

   BinaryUpdateRegistry m_m_UpdateOp_Int_OpSub();

   BinaryUpdateRegistry m_m_UpdateOp_Double_OpSub();

   BinaryUpdateRegistry m_m_UpdateOp_Float_OpSub();

   BinaryUpdateRegistry m_m_UpdateOp_Long_OpSub();

   BinaryUpdateRegistry m_m_UpdateOp_BigInt_OpSub();

   BinaryUpdateRegistry m_m_UpdateOp_Complex_OpSub();

   BinaryUpdateRegistry m_m_UpdateOp_Int_OpMulScalar();

   BinaryUpdateRegistry m_m_UpdateOp_Double_OpMulScalar();

   BinaryUpdateRegistry m_m_UpdateOp_Float_OpMulScalar();

   BinaryUpdateRegistry m_m_UpdateOp_Long_OpMulScalar();

   BinaryUpdateRegistry m_m_UpdateOp_BigInt_OpMulScalar();

   BinaryUpdateRegistry m_m_UpdateOp_Complex_OpMulScalar();

   BinaryUpdateRegistry m_m_UpdateOp_Int_OpDiv();

   BinaryUpdateRegistry m_m_UpdateOp_Double_OpDiv();

   BinaryUpdateRegistry m_m_UpdateOp_Float_OpDiv();

   BinaryUpdateRegistry m_m_UpdateOp_Long_OpDiv();

   BinaryUpdateRegistry m_m_UpdateOp_BigInt_OpDiv();

   BinaryUpdateRegistry m_m_UpdateOp_Complex_OpDiv();

   BinaryUpdateRegistry m_m_UpdateOp_Int_OpSet();

   BinaryUpdateRegistry m_m_UpdateOp_Double_OpSet();

   BinaryUpdateRegistry m_m_UpdateOp_Float_OpSet();

   BinaryUpdateRegistry m_m_UpdateOp_Long_OpSet();

   BinaryUpdateRegistry m_m_UpdateOp_BigInt_OpSet();

   BinaryUpdateRegistry m_m_UpdateOp_Complex_OpSet();

   BinaryUpdateRegistry m_m_UpdateOp_Int_OpMod();

   BinaryUpdateRegistry m_m_UpdateOp_Double_OpMod();

   BinaryUpdateRegistry m_m_UpdateOp_Float_OpMod();

   BinaryUpdateRegistry m_m_UpdateOp_Long_OpMod();

   BinaryUpdateRegistry m_m_UpdateOp_BigInt_OpMod();

   BinaryUpdateRegistry m_m_UpdateOp_Int_OpPow();

   BinaryUpdateRegistry m_m_UpdateOp_Double_OpPow();

   BinaryUpdateRegistry m_m_UpdateOp_Float_OpPow();

   BinaryUpdateRegistry m_m_UpdateOp_Long_OpPow();

   BinaryUpdateRegistry m_m_UpdateOp_Complex_OpPow();

   // $FF: synthetic method
   static BinaryUpdateRegistry m_m_UpdateOp_OpAdd$(final MatrixExpandedOps $this, final Field evidence$14, final Zero evidence$15, final ClassTag evidence$16) {
      return $this.m_m_UpdateOp_OpAdd(evidence$14, evidence$15, evidence$16);
   }

   default BinaryUpdateRegistry m_m_UpdateOp_OpAdd(final Field evidence$14, final Zero evidence$15, final ClassTag evidence$16) {
      return new BinaryUpdateRegistry(evidence$14) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().$plus(a.apply(r, c), b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$14$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_m_UpdateOp_OpSub$(final MatrixExpandedOps $this, final Field evidence$17, final Zero evidence$18, final ClassTag evidence$19) {
      return $this.m_m_UpdateOp_OpSub(evidence$17, evidence$18, evidence$19);
   }

   default BinaryUpdateRegistry m_m_UpdateOp_OpSub(final Field evidence$17, final Zero evidence$18, final ClassTag evidence$19) {
      return new BinaryUpdateRegistry(evidence$17) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().$minus(a.apply(r, c), b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$17$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_m_UpdateOp_OpMulScalar$(final MatrixExpandedOps $this, final Field evidence$20, final Zero evidence$21, final ClassTag evidence$22) {
      return $this.m_m_UpdateOp_OpMulScalar(evidence$20, evidence$21, evidence$22);
   }

   default BinaryUpdateRegistry m_m_UpdateOp_OpMulScalar(final Field evidence$20, final Zero evidence$21, final ClassTag evidence$22) {
      return new BinaryUpdateRegistry(evidence$20) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().$times(a.apply(r, c), b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$20$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_m_UpdateOp_OpDiv$(final MatrixExpandedOps $this, final Field evidence$23, final Zero evidence$24, final ClassTag evidence$25) {
      return $this.m_m_UpdateOp_OpDiv(evidence$23, evidence$24, evidence$25);
   }

   default BinaryUpdateRegistry m_m_UpdateOp_OpDiv(final Field evidence$23, final Zero evidence$24, final ClassTag evidence$25) {
      return new BinaryUpdateRegistry(evidence$23) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().$div(a.apply(r, c), b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$23$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_m_UpdateOp_OpSet$(final MatrixExpandedOps $this, final Field evidence$26, final Zero evidence$27, final ClassTag evidence$28) {
      return $this.m_m_UpdateOp_OpSet(evidence$26, evidence$27, evidence$28);
   }

   default BinaryUpdateRegistry m_m_UpdateOp_OpSet(final Field evidence$26, final Zero evidence$27, final ClassTag evidence$28) {
      return new BinaryUpdateRegistry(evidence$26) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, b.apply(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$26$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_m_UpdateOp_OpMod$(final MatrixExpandedOps $this, final Field evidence$29, final Zero evidence$30, final ClassTag evidence$31) {
      return $this.m_m_UpdateOp_OpMod(evidence$29, evidence$30, evidence$31);
   }

   default BinaryUpdateRegistry m_m_UpdateOp_OpMod(final Field evidence$29, final Zero evidence$30, final ClassTag evidence$31) {
      return new BinaryUpdateRegistry(evidence$29) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().$percent(a.apply(r, c), b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$29$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_m_UpdateOp_OpPow$(final MatrixExpandedOps $this, final Field evidence$32, final Zero evidence$33, final ClassTag evidence$34) {
      return $this.m_m_UpdateOp_OpPow(evidence$32, evidence$33, evidence$34);
   }

   default BinaryUpdateRegistry m_m_UpdateOp_OpPow(final Field evidence$32, final Zero evidence$33, final ClassTag evidence$34) {
      return new BinaryUpdateRegistry(evidence$32) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().pow(a.apply(r, c), b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$32$1);
            Statics.releaseFence();
         }
      };
   }

   BinaryUpdateRegistry m_s_UpdateOp_Int_OpAdd();

   BinaryUpdateRegistry m_s_UpdateOp_Double_OpAdd();

   BinaryUpdateRegistry m_s_UpdateOp_Float_OpAdd();

   BinaryUpdateRegistry m_s_UpdateOp_Long_OpAdd();

   BinaryUpdateRegistry m_s_UpdateOp_BigInt_OpAdd();

   BinaryUpdateRegistry m_s_UpdateOp_Complex_OpAdd();

   BinaryUpdateRegistry m_s_UpdateOp_Int_OpSub();

   BinaryUpdateRegistry m_s_UpdateOp_Double_OpSub();

   BinaryUpdateRegistry m_s_UpdateOp_Float_OpSub();

   BinaryUpdateRegistry m_s_UpdateOp_Long_OpSub();

   BinaryUpdateRegistry m_s_UpdateOp_BigInt_OpSub();

   BinaryUpdateRegistry m_s_UpdateOp_Complex_OpSub();

   BinaryUpdateRegistry m_s_UpdateOp_Int_OpMulScalar();

   BinaryUpdateRegistry m_s_UpdateOp_Double_OpMulScalar();

   BinaryUpdateRegistry m_s_UpdateOp_Float_OpMulScalar();

   BinaryUpdateRegistry m_s_UpdateOp_Long_OpMulScalar();

   BinaryUpdateRegistry m_s_UpdateOp_BigInt_OpMulScalar();

   BinaryUpdateRegistry m_s_UpdateOp_Complex_OpMulScalar();

   BinaryUpdateRegistry m_s_UpdateOp_Int_OpMulMatrix();

   BinaryUpdateRegistry m_s_UpdateOp_Double_OpMulMatrix();

   BinaryUpdateRegistry m_s_UpdateOp_Float_OpMulMatrix();

   BinaryUpdateRegistry m_s_UpdateOp_Long_OpMulMatrix();

   BinaryUpdateRegistry m_s_UpdateOp_BigInt_OpMulMatrix();

   BinaryUpdateRegistry m_s_UpdateOp_Complex_OpMulMatrix();

   BinaryUpdateRegistry m_s_UpdateOp_Int_OpDiv();

   BinaryUpdateRegistry m_s_UpdateOp_Double_OpDiv();

   BinaryUpdateRegistry m_s_UpdateOp_Float_OpDiv();

   BinaryUpdateRegistry m_s_UpdateOp_Long_OpDiv();

   BinaryUpdateRegistry m_s_UpdateOp_BigInt_OpDiv();

   BinaryUpdateRegistry m_s_UpdateOp_Complex_OpDiv();

   BinaryUpdateRegistry m_s_UpdateOp_Int_OpSet();

   BinaryUpdateRegistry m_s_UpdateOp_Double_OpSet();

   BinaryUpdateRegistry m_s_UpdateOp_Float_OpSet();

   BinaryUpdateRegistry m_s_UpdateOp_Long_OpSet();

   BinaryUpdateRegistry m_s_UpdateOp_BigInt_OpSet();

   BinaryUpdateRegistry m_s_UpdateOp_Complex_OpSet();

   BinaryUpdateRegistry m_s_UpdateOp_Int_OpMod();

   BinaryUpdateRegistry m_s_UpdateOp_Double_OpMod();

   BinaryUpdateRegistry m_s_UpdateOp_Float_OpMod();

   BinaryUpdateRegistry m_s_UpdateOp_Long_OpMod();

   BinaryUpdateRegistry m_s_UpdateOp_BigInt_OpMod();

   BinaryUpdateRegistry m_s_UpdateOp_Int_OpPow();

   BinaryUpdateRegistry m_s_UpdateOp_Double_OpPow();

   BinaryUpdateRegistry m_s_UpdateOp_Float_OpPow();

   BinaryUpdateRegistry m_s_UpdateOp_Long_OpPow();

   BinaryUpdateRegistry m_s_UpdateOp_Complex_OpPow();

   // $FF: synthetic method
   static BinaryUpdateRegistry m_s_UpdateOp_OpAdd$(final MatrixExpandedOps $this, final Field evidence$35, final Zero evidence$36, final ClassTag evidence$37) {
      return $this.m_s_UpdateOp_OpAdd(evidence$35, evidence$36, evidence$37);
   }

   default BinaryUpdateRegistry m_s_UpdateOp_OpAdd(final Field evidence$35, final Zero evidence$36, final ClassTag evidence$37) {
      return new BinaryUpdateRegistry(evidence$35) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Object b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().$plus(a.apply(r, c), b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$35$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_s_UpdateOp_OpSub$(final MatrixExpandedOps $this, final Field evidence$38, final Zero evidence$39, final ClassTag evidence$40) {
      return $this.m_s_UpdateOp_OpSub(evidence$38, evidence$39, evidence$40);
   }

   default BinaryUpdateRegistry m_s_UpdateOp_OpSub(final Field evidence$38, final Zero evidence$39, final ClassTag evidence$40) {
      return new BinaryUpdateRegistry(evidence$38) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Object b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().$minus(a.apply(r, c), b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$38$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_s_UpdateOp_OpMulScalar$(final MatrixExpandedOps $this, final Field evidence$41, final Zero evidence$42, final ClassTag evidence$43) {
      return $this.m_s_UpdateOp_OpMulScalar(evidence$41, evidence$42, evidence$43);
   }

   default BinaryUpdateRegistry m_s_UpdateOp_OpMulScalar(final Field evidence$41, final Zero evidence$42, final ClassTag evidence$43) {
      return new BinaryUpdateRegistry(evidence$41) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Object b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().$times(a.apply(r, c), b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$41$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_s_UpdateOp_OpMulMatrix$(final MatrixExpandedOps $this, final Field evidence$44, final Zero evidence$45, final ClassTag evidence$46) {
      return $this.m_s_UpdateOp_OpMulMatrix(evidence$44, evidence$45, evidence$46);
   }

   default BinaryUpdateRegistry m_s_UpdateOp_OpMulMatrix(final Field evidence$44, final Zero evidence$45, final ClassTag evidence$46) {
      return new BinaryUpdateRegistry(evidence$44) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Object b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().$times(a.apply(r, c), b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$44$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_s_UpdateOp_OpDiv$(final MatrixExpandedOps $this, final Field evidence$47, final Zero evidence$48, final ClassTag evidence$49) {
      return $this.m_s_UpdateOp_OpDiv(evidence$47, evidence$48, evidence$49);
   }

   default BinaryUpdateRegistry m_s_UpdateOp_OpDiv(final Field evidence$47, final Zero evidence$48, final ClassTag evidence$49) {
      return new BinaryUpdateRegistry(evidence$47) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Object b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().$div(a.apply(r, c), b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$47$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_s_UpdateOp_OpMod$(final MatrixExpandedOps $this, final Field evidence$50, final Zero evidence$51, final ClassTag evidence$52) {
      return $this.m_s_UpdateOp_OpMod(evidence$50, evidence$51, evidence$52);
   }

   default BinaryUpdateRegistry m_s_UpdateOp_OpMod(final Field evidence$50, final Zero evidence$51, final ClassTag evidence$52) {
      return new BinaryUpdateRegistry(evidence$50) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Object b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().$percent(a.apply(r, c), b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$50$1);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryUpdateRegistry m_s_UpdateOp_OpPow$(final MatrixExpandedOps $this, final Field evidence$53, final Zero evidence$54, final ClassTag evidence$55) {
      return $this.m_s_UpdateOp_OpPow(evidence$53, evidence$54, evidence$55);
   }

   default BinaryUpdateRegistry m_s_UpdateOp_OpPow(final Field evidence$53, final Zero evidence$54, final ClassTag evidence$55) {
      return new BinaryUpdateRegistry(evidence$53) {
         private final Field f;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         private Field f() {
            return this.f;
         }

         public void bindingMissing(final Matrix a, final Object b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, this.f().pow(a.apply(r, c), b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            this.f = (Field).MODULE$.implicitly(evidence$53$1);
            Statics.releaseFence();
         }
      };
   }

   BinaryRegistry op_M_S_Int_OpAdd();

   BinaryRegistry op_M_S_Long_OpAdd();

   BinaryRegistry op_M_S_Float_OpAdd();

   BinaryRegistry op_M_S_Double_OpAdd();

   BinaryRegistry op_M_S_BigInt_OpAdd();

   BinaryRegistry op_M_S_Complex_OpAdd();

   BinaryRegistry op_M_S_Int_OpSub();

   BinaryRegistry op_M_S_Long_OpSub();

   BinaryRegistry op_M_S_Float_OpSub();

   BinaryRegistry op_M_S_Double_OpSub();

   BinaryRegistry op_M_S_BigInt_OpSub();

   BinaryRegistry op_M_S_Complex_OpSub();

   BinaryRegistry op_M_S_Int_OpMulScalar();

   BinaryRegistry op_M_S_Long_OpMulScalar();

   BinaryRegistry op_M_S_Float_OpMulScalar();

   BinaryRegistry op_M_S_Double_OpMulScalar();

   BinaryRegistry op_M_S_BigInt_OpMulScalar();

   BinaryRegistry op_M_S_Complex_OpMulScalar();

   BinaryRegistry op_M_S_Int_OpMulMatrix();

   BinaryRegistry op_M_S_Long_OpMulMatrix();

   BinaryRegistry op_M_S_Float_OpMulMatrix();

   BinaryRegistry op_M_S_Double_OpMulMatrix();

   BinaryRegistry op_M_S_BigInt_OpMulMatrix();

   BinaryRegistry op_M_S_Complex_OpMulMatrix();

   BinaryRegistry op_M_S_Int_OpMod();

   BinaryRegistry op_M_S_Long_OpMod();

   BinaryRegistry op_M_S_Float_OpMod();

   BinaryRegistry op_M_S_Double_OpMod();

   BinaryRegistry op_M_S_BigInt_OpMod();

   BinaryRegistry op_M_S_Int_OpDiv();

   BinaryRegistry op_M_S_Long_OpDiv();

   BinaryRegistry op_M_S_Float_OpDiv();

   BinaryRegistry op_M_S_Double_OpDiv();

   BinaryRegistry op_M_S_BigInt_OpDiv();

   BinaryRegistry op_M_S_Complex_OpDiv();

   BinaryRegistry op_M_S_Int_OpPow();

   BinaryRegistry op_M_S_Long_OpPow();

   BinaryRegistry op_M_S_Float_OpPow();

   BinaryRegistry op_M_S_Double_OpPow();

   BinaryRegistry op_M_S_Complex_OpPow();

   // $FF: synthetic method
   static BinaryRegistry op_M_S_OpAdd$(final MatrixExpandedOps $this, final Field evidence$56, final Zero evidence$57, final ClassTag evidence$58) {
      return $this.op_M_S_OpAdd(evidence$56, evidence$57, evidence$58);
   }

   default BinaryRegistry op_M_S_OpAdd(final Field evidence$56, final Zero evidence$57, final ClassTag evidence$58) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.m_s_UpdateOp_OpAdd(evidence$56, evidence$57, evidence$58));
      return new BinaryRegistry(evidence$58, uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final ClassTag evidence$58$1;
         private final UFunc.InPlaceImpl2 uop$41;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Object b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(this.evidence$58$1));
            this.uop$41.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.evidence$58$1 = evidence$58$1;
               this.uop$41 = uop$41;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_M_S_OpSub$(final MatrixExpandedOps $this, final Field evidence$59, final Zero evidence$60, final ClassTag evidence$61) {
      return $this.op_M_S_OpSub(evidence$59, evidence$60, evidence$61);
   }

   default BinaryRegistry op_M_S_OpSub(final Field evidence$59, final Zero evidence$60, final ClassTag evidence$61) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.m_s_UpdateOp_OpSub(evidence$59, evidence$60, evidence$61));
      return new BinaryRegistry(evidence$61, uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final ClassTag evidence$61$1;
         private final UFunc.InPlaceImpl2 uop$42;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Object b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(this.evidence$61$1));
            this.uop$42.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.evidence$61$1 = evidence$61$1;
               this.uop$42 = uop$42;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_M_S_OpMulScalar$(final MatrixExpandedOps $this, final Field evidence$62, final Zero evidence$63, final ClassTag evidence$64) {
      return $this.op_M_S_OpMulScalar(evidence$62, evidence$63, evidence$64);
   }

   default BinaryRegistry op_M_S_OpMulScalar(final Field evidence$62, final Zero evidence$63, final ClassTag evidence$64) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.m_s_UpdateOp_OpMulScalar(evidence$62, evidence$63, evidence$64));
      return new BinaryRegistry(evidence$64, uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final ClassTag evidence$64$1;
         private final UFunc.InPlaceImpl2 uop$43;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Object b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(this.evidence$64$1));
            this.uop$43.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.evidence$64$1 = evidence$64$1;
               this.uop$43 = uop$43;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_M_S_OpMulMatrix$(final MatrixExpandedOps $this, final Field evidence$65, final Zero evidence$66, final ClassTag evidence$67) {
      return $this.op_M_S_OpMulMatrix(evidence$65, evidence$66, evidence$67);
   }

   default BinaryRegistry op_M_S_OpMulMatrix(final Field evidence$65, final Zero evidence$66, final ClassTag evidence$67) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.m_s_UpdateOp_OpMulMatrix(evidence$65, evidence$66, evidence$67));
      return new BinaryRegistry(evidence$67, uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final ClassTag evidence$67$1;
         private final UFunc.InPlaceImpl2 uop$44;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Object b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(this.evidence$67$1));
            this.uop$44.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.evidence$67$1 = evidence$67$1;
               this.uop$44 = uop$44;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_M_S_OpDiv$(final MatrixExpandedOps $this, final Field evidence$68, final Zero evidence$69, final ClassTag evidence$70) {
      return $this.op_M_S_OpDiv(evidence$68, evidence$69, evidence$70);
   }

   default BinaryRegistry op_M_S_OpDiv(final Field evidence$68, final Zero evidence$69, final ClassTag evidence$70) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.m_s_UpdateOp_OpDiv(evidence$68, evidence$69, evidence$70));
      return new BinaryRegistry(evidence$70, uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final ClassTag evidence$70$1;
         private final UFunc.InPlaceImpl2 uop$45;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Object b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(this.evidence$70$1));
            this.uop$45.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.evidence$70$1 = evidence$70$1;
               this.uop$45 = uop$45;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_M_S_OpMod$(final MatrixExpandedOps $this, final Field evidence$71, final Zero evidence$72, final ClassTag evidence$73) {
      return $this.op_M_S_OpMod(evidence$71, evidence$72, evidence$73);
   }

   default BinaryRegistry op_M_S_OpMod(final Field evidence$71, final Zero evidence$72, final ClassTag evidence$73) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.m_s_UpdateOp_OpMod(evidence$71, evidence$72, evidence$73));
      return new BinaryRegistry(evidence$73, uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final ClassTag evidence$73$1;
         private final UFunc.InPlaceImpl2 uop$46;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Object b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(this.evidence$73$1));
            this.uop$46.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.evidence$73$1 = evidence$73$1;
               this.uop$46 = uop$46;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_M_S_OpPow$(final MatrixExpandedOps $this, final Field evidence$74, final Zero evidence$75, final ClassTag evidence$76) {
      return $this.op_M_S_OpPow(evidence$74, evidence$75, evidence$76);
   }

   default BinaryRegistry op_M_S_OpPow(final Field evidence$74, final Zero evidence$75, final ClassTag evidence$76) {
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly(this.m_s_UpdateOp_OpPow(evidence$74, evidence$75, evidence$76));
      return new BinaryRegistry(evidence$76, uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final ClassTag evidence$76$1;
         private final UFunc.InPlaceImpl2 uop$47;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Object b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(this.evidence$76$1));
            this.uop$47.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.evidence$76$1 = evidence$76$1;
               this.uop$47 = uop$47;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      };
   }

   BinaryRegistry op_S_M_Int_OpAdd();

   BinaryRegistry op_S_M_Long_OpAdd();

   BinaryRegistry op_S_M_Float_OpAdd();

   BinaryRegistry op_S_M_Double_OpAdd();

   BinaryRegistry op_S_M_BigInt_OpAdd();

   BinaryRegistry op_S_M_Complex_OpAdd();

   BinaryRegistry op_S_M_Int_OpSub();

   BinaryRegistry op_S_M_Long_OpSub();

   BinaryRegistry op_S_M_Float_OpSub();

   BinaryRegistry op_S_M_Double_OpSub();

   BinaryRegistry op_S_M_BigInt_OpSub();

   BinaryRegistry op_S_M_Complex_OpSub();

   BinaryRegistry op_S_M_Int_OpMulScalar();

   BinaryRegistry op_S_M_Long_OpMulScalar();

   BinaryRegistry op_S_M_Float_OpMulScalar();

   BinaryRegistry op_S_M_Double_OpMulScalar();

   BinaryRegistry op_S_M_BigInt_OpMulScalar();

   BinaryRegistry op_S_M_Complex_OpMulScalar();

   BinaryRegistry op_S_M_Int_OpMulMatrix();

   BinaryRegistry op_S_M_Long_OpMulMatrix();

   BinaryRegistry op_S_M_Float_OpMulMatrix();

   BinaryRegistry op_S_M_Double_OpMulMatrix();

   BinaryRegistry op_S_M_BigInt_OpMulMatrix();

   BinaryRegistry op_S_M_Complex_OpMulMatrix();

   BinaryRegistry op_S_M_Int_OpDiv();

   BinaryRegistry op_S_M_Long_OpDiv();

   BinaryRegistry op_S_M_Float_OpDiv();

   BinaryRegistry op_S_M_Double_OpDiv();

   BinaryRegistry op_S_M_BigInt_OpDiv();

   BinaryRegistry op_S_M_Complex_OpDiv();

   BinaryRegistry op_S_M_Int_OpMod();

   BinaryRegistry op_S_M_Long_OpMod();

   BinaryRegistry op_S_M_Float_OpMod();

   BinaryRegistry op_S_M_Double_OpMod();

   BinaryRegistry op_S_M_BigInt_OpMod();

   BinaryRegistry op_S_M_Int_OpPow();

   BinaryRegistry op_S_M_Long_OpPow();

   BinaryRegistry op_S_M_Float_OpPow();

   BinaryRegistry op_S_M_Double_OpPow();

   BinaryRegistry op_S_M_Complex_OpPow();

   // $FF: synthetic method
   static BinaryRegistry op_S_M_OpAdd$(final MatrixExpandedOps $this, final Field evidence$77, final Zero evidence$78, final ClassTag evidence$79) {
      return $this.op_S_M_OpAdd(evidence$77, evidence$78, evidence$79);
   }

   default BinaryRegistry op_S_M_OpAdd(final Field evidence$77, final Zero evidence$78, final ClassTag evidence$79) {
      Field f = (Field).MODULE$.implicitly(evidence$77);
      return new BinaryRegistry(evidence$79, evidence$78, f) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         private final ClassTag evidence$79$1;
         private final Zero evidence$78$1;
         private final Field f$1;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Object b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), this.evidence$79$1, this.evidence$78$1);
            Object resd = res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  scala.runtime.ScalaRunTime..MODULE$.array_update(resd, off, this.f$1.$plus(a.apply(r, c), b));
                  ++r;
               }
            }

            return res;
         }

         public {
            this.evidence$79$1 = evidence$79$1;
            this.evidence$78$1 = evidence$78$1;
            this.f$1 = f$1;
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_S_M_OpSub$(final MatrixExpandedOps $this, final Field evidence$80, final Zero evidence$81, final ClassTag evidence$82) {
      return $this.op_S_M_OpSub(evidence$80, evidence$81, evidence$82);
   }

   default BinaryRegistry op_S_M_OpSub(final Field evidence$80, final Zero evidence$81, final ClassTag evidence$82) {
      Field f = (Field).MODULE$.implicitly(evidence$80);
      return new BinaryRegistry(evidence$82, evidence$81, f) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         private final ClassTag evidence$82$1;
         private final Zero evidence$81$1;
         private final Field f$2;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Object b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), this.evidence$82$1, this.evidence$81$1);
            Object resd = res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  scala.runtime.ScalaRunTime..MODULE$.array_update(resd, off, this.f$2.$minus(a.apply(r, c), b));
                  ++r;
               }
            }

            return res;
         }

         public {
            this.evidence$82$1 = evidence$82$1;
            this.evidence$81$1 = evidence$81$1;
            this.f$2 = f$2;
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_S_M_OpMulScalar$(final MatrixExpandedOps $this, final Field evidence$83, final Zero evidence$84, final ClassTag evidence$85) {
      return $this.op_S_M_OpMulScalar(evidence$83, evidence$84, evidence$85);
   }

   default BinaryRegistry op_S_M_OpMulScalar(final Field evidence$83, final Zero evidence$84, final ClassTag evidence$85) {
      Field f = (Field).MODULE$.implicitly(evidence$83);
      return new BinaryRegistry(evidence$85, evidence$84, f) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         private final ClassTag evidence$85$1;
         private final Zero evidence$84$1;
         private final Field f$3;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Object b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), this.evidence$85$1, this.evidence$84$1);
            Object resd = res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  scala.runtime.ScalaRunTime..MODULE$.array_update(resd, off, this.f$3.$times(a.apply(r, c), b));
                  ++r;
               }
            }

            return res;
         }

         public {
            this.evidence$85$1 = evidence$85$1;
            this.evidence$84$1 = evidence$84$1;
            this.f$3 = f$3;
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_S_M_OpMulMatrix$(final MatrixExpandedOps $this, final Field evidence$86, final Zero evidence$87, final ClassTag evidence$88) {
      return $this.op_S_M_OpMulMatrix(evidence$86, evidence$87, evidence$88);
   }

   default BinaryRegistry op_S_M_OpMulMatrix(final Field evidence$86, final Zero evidence$87, final ClassTag evidence$88) {
      Field f = (Field).MODULE$.implicitly(evidence$86);
      return new BinaryRegistry(evidence$88, evidence$87, f) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         private final ClassTag evidence$88$1;
         private final Zero evidence$87$1;
         private final Field f$4;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Object b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), this.evidence$88$1, this.evidence$87$1);
            Object resd = res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  scala.runtime.ScalaRunTime..MODULE$.array_update(resd, off, this.f$4.$times(a.apply(r, c), b));
                  ++r;
               }
            }

            return res;
         }

         public {
            this.evidence$88$1 = evidence$88$1;
            this.evidence$87$1 = evidence$87$1;
            this.f$4 = f$4;
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_S_M_OpDiv$(final MatrixExpandedOps $this, final Field evidence$89, final Zero evidence$90, final ClassTag evidence$91) {
      return $this.op_S_M_OpDiv(evidence$89, evidence$90, evidence$91);
   }

   default BinaryRegistry op_S_M_OpDiv(final Field evidence$89, final Zero evidence$90, final ClassTag evidence$91) {
      Field f = (Field).MODULE$.implicitly(evidence$89);
      return new BinaryRegistry(evidence$91, evidence$90, f) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         private final ClassTag evidence$91$1;
         private final Zero evidence$90$1;
         private final Field f$5;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Object b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), this.evidence$91$1, this.evidence$90$1);
            Object resd = res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  scala.runtime.ScalaRunTime..MODULE$.array_update(resd, off, this.f$5.$div(a.apply(r, c), b));
                  ++r;
               }
            }

            return res;
         }

         public {
            this.evidence$91$1 = evidence$91$1;
            this.evidence$90$1 = evidence$90$1;
            this.f$5 = f$5;
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_S_M_OpMod$(final MatrixExpandedOps $this, final Field evidence$92, final Zero evidence$93, final ClassTag evidence$94) {
      return $this.op_S_M_OpMod(evidence$92, evidence$93, evidence$94);
   }

   default BinaryRegistry op_S_M_OpMod(final Field evidence$92, final Zero evidence$93, final ClassTag evidence$94) {
      Field f = (Field).MODULE$.implicitly(evidence$92);
      return new BinaryRegistry(evidence$94, evidence$93, f) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         private final ClassTag evidence$94$1;
         private final Zero evidence$93$1;
         private final Field f$6;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Object b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), this.evidence$94$1, this.evidence$93$1);
            Object resd = res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  scala.runtime.ScalaRunTime..MODULE$.array_update(resd, off, this.f$6.$percent(a.apply(r, c), b));
                  ++r;
               }
            }

            return res;
         }

         public {
            this.evidence$94$1 = evidence$94$1;
            this.evidence$93$1 = evidence$93$1;
            this.f$6 = f$6;
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      };
   }

   // $FF: synthetic method
   static BinaryRegistry op_S_M_OpPow$(final MatrixExpandedOps $this, final Field evidence$95, final Zero evidence$96, final ClassTag evidence$97) {
      return $this.op_S_M_OpPow(evidence$95, evidence$96, evidence$97);
   }

   default BinaryRegistry op_S_M_OpPow(final Field evidence$95, final Zero evidence$96, final ClassTag evidence$97) {
      Field f = (Field).MODULE$.implicitly(evidence$95);
      return new BinaryRegistry(evidence$97, evidence$96, f) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         private final ClassTag evidence$97$1;
         private final Zero evidence$96$1;
         private final Field f$7;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Object b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), this.evidence$97$1, this.evidence$96$1);
            Object resd = res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  scala.runtime.ScalaRunTime..MODULE$.array_update(resd, off, this.f$7.pow(a.apply(r, c), b));
                  ++r;
               }
            }

            return res;
         }

         public {
            this.evidence$97$1 = evidence$97$1;
            this.evidence$96$1 = evidence$96$1;
            this.f$7 = f$7;
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      };
   }

   BinaryRegistry op_M_DM_Int_OpAdd();

   BinaryRegistry op_M_DM_Long_OpAdd();

   BinaryRegistry op_M_DM_Float_OpAdd();

   BinaryRegistry op_M_DM_Double_OpAdd();

   BinaryRegistry op_M_DM_BigInt_OpAdd();

   BinaryRegistry op_M_DM_Complex_OpAdd();

   BinaryRegistry op_M_DM_Int_OpSub();

   BinaryRegistry op_M_DM_Long_OpSub();

   BinaryRegistry op_M_DM_Float_OpSub();

   BinaryRegistry op_M_DM_Double_OpSub();

   BinaryRegistry op_M_DM_BigInt_OpSub();

   BinaryRegistry op_M_DM_Complex_OpSub();

   BinaryRegistry op_M_DM_Int_OpMulScalar();

   BinaryRegistry op_M_DM_Long_OpMulScalar();

   BinaryRegistry op_M_DM_Float_OpMulScalar();

   BinaryRegistry op_M_DM_Double_OpMulScalar();

   BinaryRegistry op_M_DM_BigInt_OpMulScalar();

   BinaryRegistry op_M_DM_Complex_OpMulScalar();

   BinaryRegistry op_M_DM_Int_OpMod();

   BinaryRegistry op_M_DM_Long_OpMod();

   BinaryRegistry op_M_DM_Float_OpMod();

   BinaryRegistry op_M_DM_Double_OpMod();

   BinaryRegistry op_M_DM_BigInt_OpMod();

   BinaryRegistry op_M_DM_Int_OpDiv();

   BinaryRegistry op_M_DM_Long_OpDiv();

   BinaryRegistry op_M_DM_Float_OpDiv();

   BinaryRegistry op_M_DM_Double_OpDiv();

   BinaryRegistry op_M_DM_BigInt_OpDiv();

   BinaryRegistry op_M_DM_Complex_OpDiv();

   BinaryRegistry op_M_DM_Int_OpPow();

   BinaryRegistry op_M_DM_Long_OpPow();

   BinaryRegistry op_M_DM_Float_OpPow();

   BinaryRegistry op_M_DM_Double_OpPow();

   BinaryRegistry op_M_DM_Complex_OpPow();

   static void $init$(final MatrixExpandedOps $this) {
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, a.apply$mcI$sp(r, c) + b.apply$mcI$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, a.apply$mcD$sp(r, c) + b.apply$mcD$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, a.apply$mcF$sp(r, c) + b.apply$mcF$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, a.apply$mcJ$sp(r, c) + b.apply$mcJ$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((BigInt)a.apply(r, c)).$plus((BigInt)b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((Complex)a.apply(r, c)).$plus((Complex)b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, a.apply$mcI$sp(r, c) - b.apply$mcI$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, a.apply$mcD$sp(r, c) - b.apply$mcD$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, a.apply$mcF$sp(r, c) - b.apply$mcF$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, a.apply$mcJ$sp(r, c) - b.apply$mcJ$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((BigInt)a.apply(r, c)).$minus((BigInt)b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((Complex)a.apply(r, c)).$minus((Complex)b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, a.apply$mcI$sp(r, c) * b.apply$mcI$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, a.apply$mcD$sp(r, c) * b.apply$mcD$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, a.apply$mcF$sp(r, c) * b.apply$mcF$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, a.apply$mcJ$sp(r, c) * b.apply$mcJ$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((BigInt)a.apply(r, c)).$times((BigInt)b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((Complex)a.apply(r, c)).$times((Complex)b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, a.apply$mcI$sp(r, c) / b.apply$mcI$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, a.apply$mcD$sp(r, c) / b.apply$mcD$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, a.apply$mcF$sp(r, c) / b.apply$mcF$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, a.apply$mcJ$sp(r, c) / b.apply$mcJ$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((BigInt)a.apply(r, c)).$div((BigInt)b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((Complex)a.apply(r, c)).$div((Complex)b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, b.apply$mcI$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, b.apply$mcD$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, b.apply$mcF$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, b.apply$mcJ$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, b.apply(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, b.apply(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpMod_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, a.apply$mcI$sp(r, c) % b.apply$mcI$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpMod_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, a.apply$mcD$sp(r, c) % b.apply$mcD$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpMod_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, a.apply$mcF$sp(r, c) % b.apply$mcF$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpMod_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, a.apply$mcJ$sp(r, c) % b.apply$mcJ$sp(r, c));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_BigInt_OpMod_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((BigInt)a.apply(r, c)).$percent((BigInt)b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Int_OpPow_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, PowImplicits$.MODULE$.IntPow(a.apply$mcI$sp(r, c)).pow(b.apply$mcI$sp(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Double_OpPow_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, PowImplicits$.MODULE$.DoublePow(a.apply$mcD$sp(r, c)).pow(b.apply$mcD$sp(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Float_OpPow_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, PowImplicits$.MODULE$.FloatPow(a.apply$mcF$sp(r, c)).pow(b.apply$mcF$sp(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Long_OpPow_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, PowImplicits$.MODULE$.LongPow(a.apply$mcJ$sp(r, c)).pow(b.apply$mcJ$sp(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_m_UpdateOp_Complex_OpPow_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Matrix b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((Complex)a.apply(r, c)).pow((Complex)b.apply(r, c)));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final int b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, a.apply$mcI$sp(r, c) + b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final double b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, a.apply$mcD$sp(r, c) + b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final float b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, a.apply$mcF$sp(r, c) + b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final long b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, a.apply$mcJ$sp(r, c) + b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final BigInt b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((BigInt)a.apply(r, c)).$plus(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpAdd_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Complex b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((Complex)a.apply(r, c)).$plus(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final int b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, a.apply$mcI$sp(r, c) - b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final double b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, a.apply$mcD$sp(r, c) - b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final float b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, a.apply$mcF$sp(r, c) - b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final long b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, a.apply$mcJ$sp(r, c) - b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final BigInt b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((BigInt)a.apply(r, c)).$minus(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpSub_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Complex b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((Complex)a.apply(r, c)).$minus(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final int b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, a.apply$mcI$sp(r, c) * b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final double b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, a.apply$mcD$sp(r, c) * b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final float b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, a.apply$mcF$sp(r, c) * b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final long b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, a.apply$mcJ$sp(r, c) * b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final BigInt b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((BigInt)a.apply(r, c)).$times(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpMulScalar_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Complex b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((Complex)a.apply(r, c)).$times(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpMulMatrix_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final int b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, a.apply$mcI$sp(r, c) * b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpMulMatrix_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final double b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, a.apply$mcD$sp(r, c) * b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpMulMatrix_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final float b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, a.apply$mcF$sp(r, c) * b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpMulMatrix_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final long b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, a.apply$mcJ$sp(r, c) * b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpMulMatrix_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final BigInt b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((BigInt)a.apply(r, c)).$times(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpMulMatrix_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Complex b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((Complex)a.apply(r, c)).$times(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final int b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, a.apply$mcI$sp(r, c) / b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final double b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, a.apply$mcD$sp(r, c) / b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final float b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, a.apply$mcF$sp(r, c) / b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final long b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, a.apply$mcJ$sp(r, c) / b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final BigInt b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((BigInt)a.apply(r, c)).$div(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpDiv_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Complex b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((Complex)a.apply(r, c)).$div(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final int b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final double b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final float b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final long b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final BigInt b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpSet_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Complex b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpMod_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final int b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, a.apply$mcI$sp(r, c) % b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpMod_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final double b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, a.apply$mcD$sp(r, c) % b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpMod_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final float b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, a.apply$mcF$sp(r, c) % b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpMod_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final long b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, a.apply$mcJ$sp(r, c) % b);
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_BigInt_OpMod_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final BigInt b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((BigInt)a.apply(r, c)).$percent(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Int_OpPow_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final int b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcI$sp(r, c, PowImplicits$.MODULE$.IntPow(a.apply$mcI$sp(r, c)).pow(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Double_OpPow_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final double b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcD$sp(r, c, PowImplicits$.MODULE$.DoublePow(a.apply$mcD$sp(r, c)).pow(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Float_OpPow_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final float b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcF$sp(r, c, PowImplicits$.MODULE$.FloatPow(a.apply$mcF$sp(r, c)).pow(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Long_OpPow_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final long b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update$mcJ$sp(r, c, PowImplicits$.MODULE$.LongPow(a.apply$mcJ$sp(r, c)).pow(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$m_s_UpdateOp_Complex_OpPow_$eq(new BinaryUpdateRegistry() {
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryUpdateRegistry$$super$register(final Class a, final Class b, final UFunc.InPlaceImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public void multipleOptions(final Object a, final Object b, final Map m) {
            BinaryUpdateRegistry.multipleOptions$(this, a, b, m);
         }

         public void apply(final Object a, final Object b) {
            BinaryUpdateRegistry.apply$(this, a, b);
         }

         public UFunc.InPlaceImpl2 register(final UFunc.InPlaceImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryUpdateRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public void apply$mcD$sp(final Object v, final double v2) {
            UFunc.InPlaceImpl2.apply$mcD$sp$(this, v, v2);
         }

         public void apply$mcF$sp(final Object v, final float v2) {
            UFunc.InPlaceImpl2.apply$mcF$sp$(this, v, v2);
         }

         public void apply$mcI$sp(final Object v, final int v2) {
            UFunc.InPlaceImpl2.apply$mcI$sp$(this, v, v2);
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public void bindingMissing(final Matrix a, final Complex b) {
            for(int c = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++r) {
                  a.update(r, c, ((Complex)a.apply(r, c)).pow(b));
               }
            }

         }

         public {
            MMRegistry2.$init$(this);
            BinaryUpdateRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Int_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$1;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final int b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$1.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$1 = uop$1;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Long_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$2;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final long b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$2.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$2 = uop$2;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Float_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$3;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final float b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$3.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$3 = uop$3;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Double_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$4;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final double b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$4.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$4 = uop$4;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_BigInt_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$5;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final BigInt b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(BigInt.class)));
            this.uop$5.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$5 = uop$5;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Complex_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$6;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Complex b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(Complex.class)));
            this.uop$6.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$6 = uop$6;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Int_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$7;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final int b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$7.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$7 = uop$7;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Long_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$8;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final long b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$8.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$8 = uop$8;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Float_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$9;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final float b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$9.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$9 = uop$9;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Double_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$10;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final double b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$10.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$10 = uop$10;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_BigInt_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$11;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final BigInt b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(BigInt.class)));
            this.uop$11.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$11 = uop$11;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Complex_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$12;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Complex b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(Complex.class)));
            this.uop$12.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$12 = uop$12;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Int_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$13;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final int b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$13.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$13 = uop$13;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Long_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$14;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final long b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$14.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$14 = uop$14;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Float_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$15;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final float b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$15.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$15 = uop$15;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Double_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$16;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final double b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$16.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$16 = uop$16;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_BigInt_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$17;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final BigInt b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(BigInt.class)));
            this.uop$17.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$17 = uop$17;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Complex_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$18;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Complex b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(Complex.class)));
            this.uop$18.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$18 = uop$18;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Int_OpMulMatrix());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpMulMatrix_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$19;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final int b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$19.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$19 = uop$19;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Long_OpMulMatrix());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpMulMatrix_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$20;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final long b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$20.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$20 = uop$20;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Float_OpMulMatrix());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpMulMatrix_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$21;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final float b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$21.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$21 = uop$21;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Double_OpMulMatrix());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpMulMatrix_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$22;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final double b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$22.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$22 = uop$22;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_BigInt_OpMulMatrix());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpMulMatrix_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$23;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final BigInt b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(BigInt.class)));
            this.uop$23.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$23 = uop$23;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Complex_OpMulMatrix());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpMulMatrix_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$24;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Complex b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(Complex.class)));
            this.uop$24.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$24 = uop$24;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Int_OpMod());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpMod_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$25;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final int b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$25.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$25 = uop$25;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Long_OpMod());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpMod_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$26;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final long b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$26.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$26 = uop$26;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Float_OpMod());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpMod_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$27;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final float b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$27.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$27 = uop$27;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Double_OpMod());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpMod_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$28;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final double b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$28.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$28 = uop$28;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_BigInt_OpMod());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpMod_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$29;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final BigInt b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(BigInt.class)));
            this.uop$29.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$29 = uop$29;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Int_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$30;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final int b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$30.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$30 = uop$30;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Long_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$31;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final long b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$31.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$31 = uop$31;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Float_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$32;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final float b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$32.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$32 = uop$32;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Double_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$33;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final double b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$33.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$33 = uop$33;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_BigInt_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_BigInt_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$34;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final BigInt b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(BigInt.class)));
            this.uop$34.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$34 = uop$34;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Complex_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$35;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Complex b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(Complex.class)));
            this.uop$35.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$35 = uop$35;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Int_OpPow());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Int_OpPow_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$36;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final int b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$36.apply$mcI$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$36 = uop$36;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Long_OpPow());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Long_OpPow_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$37;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final long b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$37.apply(c, BoxesRunTime.boxToLong(b));
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$37 = uop$37;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Float_OpPow());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Float_OpPow_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$38;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final float b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$38.apply$mcF$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$38 = uop$38;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Double_OpPow());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Double_OpPow_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$39;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final double b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$39.apply$mcD$sp(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$39 = uop$39;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_s_UpdateOp_Complex_OpPow());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_S_Complex_OpPow_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$40;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Complex b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(Complex.class)));
            this.uop$40.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$40 = uop$40;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpAdd_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final int b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcI$sp(r, c) + b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpAdd_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final long b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcJ$sp(r, c) + b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpAdd_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final float b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcF$sp(r, c) + b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpAdd_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final double b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcD$sp(r, c) + b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpAdd_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final BigInt b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(BigInt.class), Zero$.MODULE$.BigIntZero());
            BigInt[] resd = (BigInt[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((BigInt)a.apply(r, c)).$plus(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpAdd_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Complex b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(Complex.class), Complex$.MODULE$.ComplexZero());
            Complex[] resd = (Complex[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((Complex)a.apply(r, c)).$plus(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpSub_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final int b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcI$sp(r, c) - b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpSub_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final long b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcJ$sp(r, c) - b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpSub_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final float b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcF$sp(r, c) - b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpSub_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final double b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcD$sp(r, c) - b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpSub_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final BigInt b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(BigInt.class), Zero$.MODULE$.BigIntZero());
            BigInt[] resd = (BigInt[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((BigInt)a.apply(r, c)).$minus(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpSub_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Complex b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(Complex.class), Complex$.MODULE$.ComplexZero());
            Complex[] resd = (Complex[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((Complex)a.apply(r, c)).$minus(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpMulScalar_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final int b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcI$sp(r, c) * b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpMulScalar_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final long b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcJ$sp(r, c) * b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpMulScalar_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final float b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcF$sp(r, c) * b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpMulScalar_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final double b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcD$sp(r, c) * b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpMulScalar_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final BigInt b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(BigInt.class), Zero$.MODULE$.BigIntZero());
            BigInt[] resd = (BigInt[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((BigInt)a.apply(r, c)).$times(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpMulScalar_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Complex b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(Complex.class), Complex$.MODULE$.ComplexZero());
            Complex[] resd = (Complex[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((Complex)a.apply(r, c)).$times(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpMulMatrix_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final int b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcI$sp(r, c) * b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpMulMatrix_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final long b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcJ$sp(r, c) * b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpMulMatrix_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final float b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcF$sp(r, c) * b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpMulMatrix_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final double b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcD$sp(r, c) * b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpMulMatrix_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final BigInt b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(BigInt.class), Zero$.MODULE$.BigIntZero());
            BigInt[] resd = (BigInt[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((BigInt)a.apply(r, c)).$times(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpMulMatrix_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Complex b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(Complex.class), Complex$.MODULE$.ComplexZero());
            Complex[] resd = (Complex[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((Complex)a.apply(r, c)).$times(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpDiv_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final int b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcI$sp(r, c) / b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpDiv_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final long b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcJ$sp(r, c) / b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpDiv_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final float b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcF$sp(r, c) / b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpDiv_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final double b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcD$sp(r, c) / b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpDiv_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final BigInt b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(BigInt.class), Zero$.MODULE$.BigIntZero());
            BigInt[] resd = (BigInt[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((BigInt)a.apply(r, c)).$div(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpDiv_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Complex b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(Complex.class), Complex$.MODULE$.ComplexZero());
            Complex[] resd = (Complex[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((Complex)a.apply(r, c)).$div(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpMod_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final int b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcI$sp(r, c) % b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpMod_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final long b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcJ$sp(r, c) % b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpMod_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final float b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcF$sp(r, c) % b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpMod_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final double b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = a.apply$mcD$sp(r, c) % b;
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_BigInt_OpMod_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final BigInt b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(BigInt.class), Zero$.MODULE$.BigIntZero());
            BigInt[] resd = (BigInt[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((BigInt)a.apply(r, c)).$percent(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Int_OpPow_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final int b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mIc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Int(), Zero$.MODULE$.IntZero());
            int[] resd = res.data$mcI$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = PowImplicits$.MODULE$.IntPow(a.apply$mcI$sp(r, c)).pow(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Long_OpPow_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final long b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mJc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Long(), Zero$.MODULE$.LongZero());
            long[] resd = res.data$mcJ$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = PowImplicits$.MODULE$.LongPow(a.apply$mcJ$sp(r, c)).pow(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Float_OpPow_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final float b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mFc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Float(), Zero$.MODULE$.FloatZero());
            float[] resd = res.data$mcF$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = PowImplicits$.MODULE$.FloatPow(a.apply$mcF$sp(r, c)).pow(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Double_OpPow_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final double b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros$mDc$sp(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.Double(), Zero$.MODULE$.DoubleZero());
            double[] resd = res.data$mcD$sp();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = PowImplicits$.MODULE$.DoublePow(a.apply$mcD$sp(r, c)).pow(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_S_M_Complex_OpPow_$eq(new BinaryRegistry() {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public DenseMatrix bindingMissing(final Complex b, final Matrix a) {
            DenseMatrix res = DenseMatrix$.MODULE$.zeros(a.rows(), a.cols(), scala.reflect.ClassTag..MODULE$.apply(Complex.class), Complex$.MODULE$.ComplexZero());
            Complex[] resd = (Complex[])res.data();
            int c = 0;

            for(int off = 0; c < a.cols(); ++c) {
               for(int r = 0; r < a.rows(); ++off) {
                  resd[off] = ((Complex)a.apply(r, c)).pow(b);
                  ++r;
               }
            }

            return res;
         }

         public {
            MMRegistry2.$init$(this);
            BinaryRegistry.$init$(this);
            Statics.releaseFence();
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Int_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$48;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$48.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$48 = uop$48;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Long_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$49;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$49.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$49 = uop$49;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Float_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$50;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$50.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$50 = uop$50;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Double_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$51;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$51.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$51 = uop$51;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_BigInt_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_BigInt_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$52;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(BigInt.class)));
            this.uop$52.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$52 = uop$52;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Complex_OpAdd());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Complex_OpAdd_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$53;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(Complex.class)));
            this.uop$53.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$53 = uop$53;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Int_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$54;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$54.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$54 = uop$54;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Long_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$55;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$55.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$55 = uop$55;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Float_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$56;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$56.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$56 = uop$56;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Double_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$57;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$57.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$57 = uop$57;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_BigInt_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_BigInt_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$58;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(BigInt.class)));
            this.uop$58.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$58 = uop$58;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Complex_OpSub());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Complex_OpSub_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$59;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(Complex.class)));
            this.uop$59.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$59 = uop$59;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Int_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$60;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$60.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$60 = uop$60;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Long_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$61;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$61.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$61 = uop$61;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Float_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$62;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$62.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$62 = uop$62;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Double_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$63;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$63.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$63 = uop$63;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_BigInt_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_BigInt_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$64;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(BigInt.class)));
            this.uop$64.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$64 = uop$64;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Complex_OpMulScalar());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Complex_OpMulScalar_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$65;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(Complex.class)));
            this.uop$65.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$65 = uop$65;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Int_OpMod());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpMod_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$66;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$66.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$66 = uop$66;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Long_OpMod());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpMod_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$67;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$67.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$67 = uop$67;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Float_OpMod());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpMod_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$68;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$68.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$68 = uop$68;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Double_OpMod());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpMod_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$69;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$69.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$69 = uop$69;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_BigInt_OpMod());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_BigInt_OpMod_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$70;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(BigInt.class)));
            this.uop$70.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$70 = uop$70;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Int_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$71;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$71.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$71 = uop$71;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Long_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$72;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$72.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$72 = uop$72;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Float_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$73;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$73.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$73 = uop$73;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Double_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$74;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$74.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$74 = uop$74;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_BigInt_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_BigInt_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$75;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(BigInt.class)));
            this.uop$75.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$75 = uop$75;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Complex_OpDiv());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Complex_OpDiv_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$76;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(Complex.class)));
            this.uop$76.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$76 = uop$76;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Int_OpPow());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Int_OpPow_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$77;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Int()));
            this.uop$77.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$77 = uop$77;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Long_OpPow());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Long_OpPow_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$78;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Long()));
            this.uop$78.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$78 = uop$78;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Float_OpPow());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Float_OpPow_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$79;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Float()));
            this.uop$79.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$79 = uop$79;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Double_OpPow());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Double_OpPow_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$80;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.Double()));
            this.uop$80.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$80 = uop$80;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
      UFunc.InPlaceImpl2 uop = (UFunc.InPlaceImpl2).MODULE$.implicitly($this.m_m_UpdateOp_Complex_OpPow());
      $this.breeze$linalg$operators$MatrixExpandedOps$_setter_$op_M_DM_Complex_OpPow_$eq(new BinaryRegistry(uop) {
         private ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache;
         private HashMap ops;
         private ConcurrentHashMap cache;
         // $FF: synthetic field
         private final MatrixExpandedOps $outer;
         private final UFunc.InPlaceImpl2 uop$81;

         // $FF: synthetic method
         public void breeze$linalg$operators$BinaryRegistry$$super$register(final Class a, final Class b, final UFunc.UImpl2 op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Nothing multipleOptions(final Object a, final Object b, final Map m) {
            return BinaryRegistry.multipleOptions$(this, a, b, m);
         }

         public Object apply(final Object a, final Object b) {
            return BinaryRegistry.apply$(this, a, b);
         }

         public UFunc.UImpl2 register(final UFunc.UImpl2 op, final ClassTag cA, final ClassTag cB) {
            return BinaryRegistry.register$(this, op, cA, cB);
         }

         public void register(final Class a, final Class b, final Object op) {
            MMRegistry2.register$(this, a, b, op);
         }

         public Map resolve(final Class a, final Class b) {
            return MMRegistry2.resolve$(this, a, b);
         }

         public MapView selectBestOption(final Map options) {
            return MMRegistry2.selectBestOption$(this, options);
         }

         public double apply$mcDDD$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDD$sp$(this, v, v2);
         }

         public float apply$mcDDF$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDF$sp$(this, v, v2);
         }

         public int apply$mcDDI$sp(final double v, final double v2) {
            return UFunc.UImpl2.apply$mcDDI$sp$(this, v, v2);
         }

         public double apply$mcDFD$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFD$sp$(this, v, v2);
         }

         public float apply$mcDFF$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFF$sp$(this, v, v2);
         }

         public int apply$mcDFI$sp(final double v, final float v2) {
            return UFunc.UImpl2.apply$mcDFI$sp$(this, v, v2);
         }

         public double apply$mcDID$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDID$sp$(this, v, v2);
         }

         public float apply$mcDIF$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDIF$sp$(this, v, v2);
         }

         public int apply$mcDII$sp(final double v, final int v2) {
            return UFunc.UImpl2.apply$mcDII$sp$(this, v, v2);
         }

         public double apply$mcFDD$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDD$sp$(this, v, v2);
         }

         public float apply$mcFDF$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDF$sp$(this, v, v2);
         }

         public int apply$mcFDI$sp(final float v, final double v2) {
            return UFunc.UImpl2.apply$mcFDI$sp$(this, v, v2);
         }

         public double apply$mcFFD$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFD$sp$(this, v, v2);
         }

         public float apply$mcFFF$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFF$sp$(this, v, v2);
         }

         public int apply$mcFFI$sp(final float v, final float v2) {
            return UFunc.UImpl2.apply$mcFFI$sp$(this, v, v2);
         }

         public double apply$mcFID$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFID$sp$(this, v, v2);
         }

         public float apply$mcFIF$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFIF$sp$(this, v, v2);
         }

         public int apply$mcFII$sp(final float v, final int v2) {
            return UFunc.UImpl2.apply$mcFII$sp$(this, v, v2);
         }

         public double apply$mcIDD$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDD$sp$(this, v, v2);
         }

         public float apply$mcIDF$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDF$sp$(this, v, v2);
         }

         public int apply$mcIDI$sp(final int v, final double v2) {
            return UFunc.UImpl2.apply$mcIDI$sp$(this, v, v2);
         }

         public double apply$mcIFD$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFD$sp$(this, v, v2);
         }

         public float apply$mcIFF$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFF$sp$(this, v, v2);
         }

         public int apply$mcIFI$sp(final int v, final float v2) {
            return UFunc.UImpl2.apply$mcIFI$sp$(this, v, v2);
         }

         public double apply$mcIID$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIID$sp$(this, v, v2);
         }

         public float apply$mcIIF$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIIF$sp$(this, v, v2);
         }

         public int apply$mcIII$sp(final int v, final int v2) {
            return UFunc.UImpl2.apply$mcIII$sp$(this, v, v2);
         }

         public ThreadLocal breeze$linalg$operators$BinaryRegistry$$l1cache() {
            return this.breeze$linalg$operators$BinaryRegistry$$l1cache;
         }

         public final void breeze$linalg$operators$BinaryRegistry$_setter_$breeze$linalg$operators$BinaryRegistry$$l1cache_$eq(final ThreadLocal x$1) {
            this.breeze$linalg$operators$BinaryRegistry$$l1cache = x$1;
         }

         public HashMap ops() {
            return this.ops;
         }

         public ConcurrentHashMap cache() {
            return this.cache;
         }

         public void breeze$generic$MMRegistry2$_setter_$ops_$eq(final HashMap x$1) {
            this.ops = x$1;
         }

         public void breeze$generic$MMRegistry2$_setter_$cache_$eq(final ConcurrentHashMap x$1) {
            this.cache = x$1;
         }

         public Matrix bindingMissing(final Matrix a, final Matrix b) {
            Matrix c = (Matrix)package$.MODULE$.copy(a, this.$outer.canCopyMatrix(scala.reflect.ClassTag..MODULE$.apply(Complex.class)));
            this.uop$81.apply(c, b);
            return c;
         }

         public {
            if (MatrixExpandedOps.this == null) {
               throw null;
            } else {
               this.$outer = MatrixExpandedOps.this;
               this.uop$81 = uop$81;
               MMRegistry2.$init$(this);
               BinaryRegistry.$init$(this);
               Statics.releaseFence();
            }
         }
      });
   }
}
