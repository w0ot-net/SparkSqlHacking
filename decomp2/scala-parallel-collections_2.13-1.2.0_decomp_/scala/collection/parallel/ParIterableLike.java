package scala.collection.parallel;

import java.io.Serializable;
import java.lang.invoke.SerializedLambda;
import java.util.concurrent.atomic.AtomicInteger;
import scala.Function0;
import scala.Function1;
import scala.Function2;
import scala.MatchError;
import scala.None;
import scala.Option;
import scala.PartialFunction;
import scala.Some;
import scala.Tuple2;
import scala.Tuple6;
import scala.None.;
import scala.collection.CustomParallelizable;
import scala.collection.DebugUtils$;
import scala.collection.Factory;
import scala.collection.Iterable;
import scala.collection.IterableOnce;
import scala.collection.IterableOps;
import scala.collection.Iterator;
import scala.collection.Parallel;
import scala.collection.generic.AtomicIndexFlag;
import scala.collection.generic.DefaultSignalling;
import scala.collection.generic.DelegatedSignalling;
import scala.collection.generic.GenericParCompanion;
import scala.collection.generic.HasNewCombiner;
import scala.collection.generic.Signalling;
import scala.collection.generic.Sizing;
import scala.collection.immutable.IndexedSeq;
import scala.collection.immutable.List;
import scala.collection.immutable.Seq;
import scala.collection.immutable.Stream;
import scala.collection.immutable.Vector;
import scala.collection.mutable.ArrayBuffer;
import scala.collection.mutable.Buffer;
import scala.collection.mutable.Builder;
import scala.collection.parallel.immutable.HashMapCombiner;
import scala.collection.parallel.immutable.HashMapCombiner$;
import scala.collection.parallel.immutable.ParHashMap;
import scala.collection.parallel.immutable.ParRange$;
import scala.math.Numeric;
import scala.math.Ordering;
import scala.reflect.ClassTag;
import scala.reflect.ScalaSignature;
import scala.runtime.BoxedUnit;
import scala.runtime.BoxesRunTime;
import scala.runtime.Nothing;
import scala.runtime.ObjectRef;
import scala.runtime.Statics;

@ScalaSignature(
   bytes = "\u0006\u0005]\rdACC-\u000b7\u0002\n1!\u0001\u0006j!9Qq\u001b\u0001\u0005\u0002\u0015e\u0007bBCq\u0001\u0019\u0005Q1\u001d\u0005\b\u000bW\u0004a\u0011ACw\u0011\u001d1)\u0001\u0001D\u0001\r\u000fA\u0011B\"\t\u0001\u0001\u0004%IAb\t\t\u0013\u0019m\u0002\u00011A\u0005\n\u0019u\u0002b\u0002D\"\u0001\u0011EQ\u0011\u001c\u0005\b\r\u000b\u0002A\u0011\u0001D\u0012\u0011\u001d19\u0005\u0001C\u0001\r\u0013BqAb\u0014\u0001\r\u00031\t\u0006C\u0004\u0007r\u0001!\tAb\u001d\t\u000f\u0019U\u0004\u0001\"\u0002\u0007x!9aq\u0010\u0001\u0005\u0002\u0019]\u0004b\u0002DA\u0001\u0011\u0005aq\u000f\u0005\b\r\u0007\u0003A\u0011\u0001D<\u0011\u001d1)\t\u0001C\u0001\r\u000fCqA\"#\u0001\t\u00031Y\tC\u0004\u0007\u0014\u0002!\tAb\u001d\t\u000f\u0019U\u0005\u0001\"\u0001\u0007\b\"9aq\u0013\u0001\u0005\u0002\u0019-\u0005b\u0002DM\u0001\u0011\u0005a1\u000f\u0005\n\r7\u0003a\u0011CC.\r;CqA\"*\u0001\t\u000319\u000bC\u0004\u00070\u0002!\tEb\u001d\t\u000f\u0019E\u0006\u0001\"\u0001\u0007x!9a1\u0017\u0001\u0005\u0012\u0019UVA\u0002Dk\u0001\u000119NB\u0005\u0007\u0000\u0002\u0001\n1%\u0001\b\u0002!9qQ\u0001\u000f\u0007\u0002\u001d\u001d\u0001bBDA9\u0019\u0005q1\u0011\u0005\b\u000b;bb\u0011\u0001E.\r%AI\f\u0001I\u0001\u0004\u0003AY\fC\u0004\u0006X\u0002\"\t!\"7\u0007\u0013!}\u0006\u0005%A\u0012\u0002!\u0005\u0007b\u0002EcE\u0019\u0005\u0001r\u0019\u0005\b\u0011W\u0004c\u0011\u0001Ew\u0011\u001dAy\u0010\tD\u0001\roBq!#\u0001!\r\u0003I\u0019AB\u0005\n\u0014\u0001\u0001\n1%\u0001\n\u0016!9\u0011\u0012D\u0014\u0007\u0002%m\u0001bBE\u001b\u0001\u0011M\u0011r\u0007\u0005\b\u0013\u0017\u0002A\u0011CE'\u0011\u001dIy\u0007\u0001C\n\u0013cBq!c \u0001\t'I\t\t\u0003\u0005\n \u0002\u0001K\u0011CEQ\u0011\u001dI\u0019\f\u0001C\u0001\u0013kCq!c-\u0001\t\u0003I\u0019\rC\u0004\n4\u0002!\t!\"<\t\u000f%\u001d\u0007\u0001\"\u0011\nJ\"9\u00112\u001a\u0001\u0005\u0002%5\u0007bBEp\u0001\u0011\u0005\u0011\u0012\u001d\u0005\b\u0013_\u0004A\u0011AEy\u0011\u001dQ\u0019\u0001\u0001C\u0001\u0015\u000bAqAc\b\u0001\t\u0003Q\t\u0003C\u0004\u000b2\u0001!\tAc\r\t\u000f)\r\u0003\u0001\"\u0001\u000bF!9!\u0012\u000b\u0001\u0005\u0002)M\u0003b\u0002F0\u0001\u0011\u0005!\u0012\r\u0005\b\u0015_\u0002A\u0011\u0001F9\u0011\u001dQy\b\u0001C\u0001\u0015\u0003CqA#$\u0001\t\u0003Qy\tC\u0004\u000b\u0018\u0002!\tA#'\t\u000f)-\u0006\u0001\"\u0001\u000b.\"9!\u0012\u0018\u0001\u0005\u0002)m\u0006b\u0002Fg\u0001\u0011\u0005!r\u001a\u0005\b\u00157\u0004A\u0011\u0001Fo\u0011\u001dQ\t\u0010\u0001C\u0001\u0015gDqab\u0016\u0001\t\u0003Y)\u0001C\u0004\f\u0014\u0001!\ta#\u0006\t\u000f-%\u0002\u0001\"\u0001\f,!912\b\u0001\u0005\u0002-u\u0002bBF!\u0001\u0011\u000512\t\u0005\b\u0017\u000f\u0002A\u0011AF%\u0011!Yi\u0005\u0001Q\u0005\u0012-=\u0003\u0002CF'\u0001\u0001&\tb#\u0017\t\u000f-]\u0004\u0001\"\u0001\fz!91r\u0010\u0001\u0005\u0002-\u0005\u0005bBFC\u0001\u0011\u00051r\u0011\u0005\b\u0017\u0017\u0003A\u0011AFG\u0011\u001dYi\n\u0001C\u0001\u0017?Cqa#+\u0001\t\u0003YY\u000bC\u0004\fF\u0002!\tac2\t\u000f-5\u0007\u0001\"\u0003\fP\"912\u001b\u0001\u0005\u0002-U\u0007bBFm\u0001\u0011%12\u001c\u0005\b\u0017?\u0004A\u0011AFq\u0011\u001dYY\u000f\u0001C\u0005\u0017[Dqac>\u0001\t\u0003YI\u0010C\u0004\f~\u0002!\tac@\t\u000f1E\u0001\u0001\"\u0001\r\u0014!9AR\u0005\u0001\u0005\u00021\u001d\u0002b\u0002G\u001d\u0001\u0011\u0005A2\b\u0005\b\u0019\u007f\u0001A\u0011\u0001G!\u0011\u001da)\u0005\u0001C\u0001\u0019\u000fBq\u0001d\u0013\u0001\t\u0003ai\u0005C\u0004\rL\u0001!\t\u0001d\u0018\t\u000f1-\u0003\u0001\"\u0001\rn!9Ar\u0010\u0001\u0005\u00021\u0005\u0005b\u0002GG\u0001\u0011\u0005Ar\u0012\u0005\b\u0019\u001b\u0003A\u0011\u0001GR\u0011\u001da9\f\u0001C\u0001\u0019sCq\u0001$2\u0001\t\u0003a9\rC\u0004\rd\u0002!\t\u0002$:\t\u000f1]\b\u0001\"\u0005\rz\"9Qr\u0004\u0001\u0005\u00025\u0005\u0002bBG\u0019\u0001\u0011\u0005Q2\u0007\u0005\b\u001bw\u0001A\u0011AG\u001f\u0011\u001diI\u0005\u0001C\u0001\u001b\u0017Bq!d\u001a\u0001\t\u0003iI\u0007C\u0004\u000er\u0001!\t!d\u001d\t\u000f5\u0005\u0005\u0001\"\u0001\u000e\u0004\"9Q2\u0012\u0001\u0005\u00025\r\u0005bBGG\u0001\u0011\u0005Qr\u0012\u0005\b\u001b/\u0003A\u0011AGM\u0011\u001di9\u000b\u0001C\u0001\u001bSCq!$0\u0001\t\u0003iy\fC\u0004\u000eH\u0002!\t!$3\u0007\u0013\u0019u\u0007\u0001%A\u0002\u0012\u0019}\u0007bBClm\u0012\u0005Q\u0011\u001c\u0005\b\rk4H\u0011\u0001D<\r%ii\u000e\u0001I\u0001\u0004#iy\u000eC\u0004\u0006Xf$\t!\"7\t\u001355\u0018P1Q\u0007\u0012\u0019u\u0005\u0002CGxs\u00026\t\"$=\t\u000f\u001d\u0015\u0012\u0010\"\u0001\u0007x!9qqE=\u0005\u00025e\b\"CD5s\u0012\u0005S1LCm\u0011\u001dI9-\u001fC!\u001d\u0003AaB$\u0005z!\u0003\r\t\u0011!C\u0005\u001d\u0003q\u0019BB\u0005\b\u0016\u0001\u0001\n5!\u0005\b\u0018!AQq[A\u0003\t\u0003)I\u000e\u0003\u0005\b&\u0005\u0015A\u0011\u0001D<\u0011!99#!\u0002\u0005\u0002\u001d%b!CE,\u0001A\u0005\u001b\u0013CE-\r!9\u0019\n\u0001Q\u0002\u0012\u001dU\u0005bCDi\u0003\u001f\u0011)\u0019!C\u0001\u000f'D1b\"6\u0002\u0010\t\u0005\t\u0015!\u0003\b.\"Yqq[A\b\u0005\u000b\u0007I\u0011ADm\u0011-9Y.a\u0004\u0003\u0002\u0003\u0006Iab0\t\u0011\u001d\r\u0013q\u0002C\u0001\u000f;D\u0001bb9\u0002\u0010\u0019\u0005qQ\u001d\u0005\u000b\u000f\u0013\ny\u00011A\u0005\u0002\u001d=\bBCD'\u0003\u001f\u0001\r\u0011\"\u0001\br\"Iq1KA\bA\u0003&q1\u0014\u0005\u000b\u000fS\ny\u0001\"\u0011\u0006\\\u0015e\u0007\u0002CD|\u0003\u001f!\t\"\"7\t\u0011\u0019U\u0018q\u0002C!\ro2\u0001bb#\u0001A\u0007EqQ\u0012\u0005\u000e\u0011K\tIC!A!\u0002\u0013A)!!\u0005\t\u001b!\u001d\u0012\u0011\u0006B\u0001B\u0003%\u0001RCA\u000b\u0011!9\u0019%!\u000b\u0005\u0002!%\u0002\u0002CD0\u0003S!\t\u0001#\r\u0007\u0011!\r\u0004\u0001iA\t\u0011KBQ\u0002#\n\u00024\t\u0005\t\u0015!\u0003\tx\u0005E\u0001\"\u0004E\u0014\u0003g\u0011\t\u0011)A\u0005\u0011\u000f\u000b)\u0002\u0003\u0005\bD\u0005MB\u0011\u0001EL\u0011!9y&a\r\u0005\u0002!}e\u0001CD\u0007\u0001\u0001\u000e\tbb\u0004\t\u0017\u001dm\u0012Q\bBC\u0002\u0013\u0005qQ\b\u0005\f\u000f\u0003\niD!A!\u0002\u00139y\u0004\u0003\u0005\bD\u0005uB\u0011AD#\u0011)9I%!\u0010A\u0002\u0013\u0005q1\n\u0005\u000b\u000f\u001b\ni\u00041A\u0005\u0002\u001d=\u0003\"CD*\u0003{\u0001\u000b\u0015BD\u0016\u0011!99&!\u0010\u0007\u0002\u001de\u0003\u0002CD0\u0003{!\ta\"\u0019\t\u0015\u001d%\u0014Q\bC!\u000b7*I\u000e\u0003\u0005\u0007v\u0006uB\u0011\tD<\r%qI\u0002\u0001I\u0001$#qYB\u0002\u0005\u000f*\u0001\u0001\u000b\u0011\u0003H\u0016\u0011-IY.!\u0016\u0003\u0002\u0003\u0006IAd\u000e\t\u001755\u0018Q\u000bBCB\u0013Ea\u0012\b\u0005\f\u001dw\t)F!A!\u0002\u0013i9\u0010\u0003\u0005\bD\u0005UC\u0011\u0001H\u001f\u0011)9I%!\u0016A\u0002\u0013\u0005a2\t\u0005\u000b\u000f\u001b\n)\u00061A\u0005\u00029\u0015\u0003\"CD*\u0003+\u0002\u000b\u0015BCn\u0011!9y&!\u0016\u0005\u00029-\u0003\"CGx\u0003+\u0002K\u0011\u0003H)\r!q)\u0006\u0001Q\u0001\u00129]\u0003bCF?\u0003S\u0012\t\u0011)A\u0005\u0015+C1\"$<\u0002j\t\u0015\r\u0015\"\u0005\u000f:!Ya2HA5\u0005\u0003\u0005\u000b\u0011BG|\u0011!9\u0019%!\u001b\u0005\u00029u\u0003BCD%\u0003S\u0002\r\u0011\"\u0001\u0006d\"QqQJA5\u0001\u0004%\tAd\u0019\t\u0013\u001dM\u0013\u0011\u000eQ!\n\u0015\u0015\b\u0002CD0\u0003S\"\tA$\u001b\t\u00135=\u0018\u0011\u000eQ\u0005\u00129=\u0004\u0002\u0003H:\u0003S\"\tE$\u001e\u0007\u00119e\u0004\u0001)A\t\u001dwB1\"c7\u0002\u0000\t\u0005\t\u0015!\u0003\u000f\n\"YQR^A@\u0005\u000b\u0007K\u0011\u0003H\u001d\u0011-qY$a \u0003\u0002\u0003\u0006I!d>\t\u0011\u001d\r\u0013q\u0010C\u0001\u001d\u0017C!b\"\u0013\u0002\u0000\u0001\u0007I\u0011\u0001HI\u0011)9i%a A\u0002\u0013\u0005a2\u0013\u0005\n\u000f'\ny\b)Q\u0005\u001d\u0003C\u0001bb\u0018\u0002\u0000\u0011\u0005a\u0012\u0014\u0005\n\u001b_\fy\b)C\t\u001d?C\u0001Bd\u001d\u0002\u0000\u0011\u0005c2\u0015\u0005\t\rk\fy\b\"\u0011\u0007x\u0019Aar\u0015\u0001!\u0002#qI\u000bC\u0006\u000b\u0002\u0005]%\u0011!Q\u0001\n9=\u0006bCEn\u0003/\u0013\t\u0011)A\u0005\u001dkC1\"$<\u0002\u0018\n\u0015\r\u0015\"\u0005\u000f:!Ya2HAL\u0005\u0003\u0005\u000b\u0011BG|\u0011!9\u0019%a&\u0005\u00029]\u0006BCD%\u0003/\u0003\r\u0011\"\u0001\u000f@\"QqQJAL\u0001\u0004%\tA$1\t\u0013\u001dM\u0013q\u0013Q!\n9=\u0006\u0002CD0\u0003/#\tAd2\t\u00135=\u0018q\u0013Q\u0005\u001295\u0007\u0002\u0003H:\u0003/#\tE$5\u0007\u00119U\u0007\u0001)A\t\u001d/D1B#\u0001\u00020\n\u0005\t\u0015!\u0003\u000fd\"Y!\u0012CAX\u0005\u0003\u0005\u000b\u0011\u0002Hs\u0011-Q9\"a,\u0003\u0002\u0003\u0006IAd:\t\u001755\u0018q\u0016BCB\u0013Ea\u0012\b\u0005\f\u001dw\tyK!A!\u0002\u0013i9\u0010\u0003\u0005\bD\u0005=F\u0011\u0001Hu\u0011)9I%a,A\u0002\u0013\u0005a2\u001f\u0005\u000b\u000f\u001b\ny\u000b1A\u0005\u00029U\b\"CD*\u0003_\u0003\u000b\u0015\u0002Ho\u0011!9y&a,\u0005\u00029m\b\"CGx\u0003_\u0003K\u0011CH\u0001\u0011!q\u0019(a,\u0005B=\u0015a\u0001CH\u0005\u0001\u0001\u0006\tbd\u0003\t\u0017)\r\u0016\u0011\u001aB\u0001B\u0003%qr\u0003\u0005\f\u001b[\fIM!b!\n#qI\u0004C\u0006\u000f<\u0005%'\u0011!Q\u0001\n5]\b\u0002CD\"\u0003\u0013$\ta$\u0007\t\u0015\u001d%\u0013\u0011\u001aa\u0001\n\u0003yy\u0002\u0003\u0006\bN\u0005%\u0007\u0019!C\u0001\u001fCA\u0011bb\u0015\u0002J\u0002\u0006Ka$\u0005\t\u0011\u001d}\u0013\u0011\u001aC\u0001\u001fOA\u0011\"d<\u0002J\u0002&\tb$\f\t\u00119M\u0014\u0011\u001aC!\u001fc1\u0001b$\u000e\u0001A\u0003Eqr\u0007\u0005\f\u0015G\u000byN!A!\u0002\u0013y\u0019\u0005C\u0006\u000en\u0006}'Q1Q\u0005\u00129e\u0002b\u0003H\u001e\u0003?\u0014\t\u0011)A\u0005\u001boD\u0001bb\u0011\u0002`\u0012\u0005qR\t\u0005\u000b\u000f\u0013\ny\u000e1A\u0005\u0002=-\u0003BCD'\u0003?\u0004\r\u0011\"\u0001\u0010N!Iq1KApA\u0003&qR\b\u0005\t\u000f?\ny\u000e\"\u0001\u0010T!IQr^ApA\u0013Eq\u0012\f\u0005\t\u001dg\ny\u000e\"\u0011\u0010^\u0019Aq\u0012\r\u0001!\u0002#y\u0019\u0007C\u0006\u000bB\u0006U(\u0011!Q\u0001\n=E\u0004bCGw\u0003k\u0014)\u0019)C\t\u001dsA1Bd\u000f\u0002v\n\u0005\t\u0015!\u0003\u000ex\"Aq1IA{\t\u0003y\u0019\b\u0003\u0006\bJ\u0005U\b\u0019!C\u0001\u001fsB!b\"\u0014\u0002v\u0002\u0007I\u0011AH>\u0011%9\u0019&!>!B\u0013yI\u0007\u0003\u0005\b`\u0005UH\u0011AHA\u0011%iy/!>!\n#y9\t\u0003\u0005\u000ft\u0005UH\u0011IHF\u0011!1)0!>\u0005B\u0019]d\u0001CHH\u0001\u0001\u0006\tb$%\t\u0017)\u0005'Q\u0002B\u0001B\u0003%qr\u0014\u0005\f\u001b[\u0014iA!b!\n#qI\u0004C\u0006\u000f<\t5!\u0011!Q\u0001\n5]\b\u0002CD\"\u0005\u001b!\ta$)\t\u0015\u001d%#Q\u0002a\u0001\n\u0003y9\u000b\u0003\u0006\bN\t5\u0001\u0019!C\u0001\u001fSC\u0011bb\u0015\u0003\u000e\u0001\u0006Kad&\t\u0011\u001d}#Q\u0002C\u0001\u001f_C\u0011\"d<\u0003\u000e\u0001&\tb$.\t\u00119M$Q\u0002C!\u001fsC\u0001B\">\u0003\u000e\u0011\u0005cq\u000f\u0004\t\u001f{\u0003\u0001\u0015!\u0005\u0010@\"Y\u0001R\u0005B\u0013\u0005\u0003\u0005\u000b\u0011BHi\u0011-YiG!\n\u0003\u0002\u0003\u0006Iad5\t\u001755(Q\u0005BCB\u0013Ea\u0012\b\u0005\f\u001dw\u0011)C!A!\u0002\u0013i9\u0010\u0003\u0005\bD\t\u0015B\u0011AHk\u0011)9IE!\nA\u0002\u0013\u0005qR\u001c\u0005\u000b\u000f\u001b\u0012)\u00031A\u0005\u0002=}\u0007\"CD*\u0005K\u0001\u000b\u0015BHc\u0011!9yF!\n\u0005\u0002=\u0015\b\"CGx\u0005K\u0001K\u0011CHw\u0011!q\u0019H!\n\u0005B=Eh\u0001CH{\u0001\u0001\u0006\tbd>\t\u0017-\u0005\"Q\bB\u0001B\u0003%\u0001\u0013\u0002\u0005\f!\u0017\u0011iD!A!\u0002\u0013\u0001j\u0001C\u0006\u000en\nu\"Q1Q\u0005\u00129e\u0002b\u0003H\u001e\u0005{\u0011\t\u0011)A\u0005\u001boD\u0001bb\u0011\u0003>\u0011\u0005\u0001s\u0002\u0005\u000b\u000f\u0013\u0012i\u00041A\u0005\u0002A]\u0001BCD'\u0005{\u0001\r\u0011\"\u0001\u0011\u001a!Iq1\u000bB\u001fA\u0003&qR \u0005\t\u000f?\u0012i\u0004\"\u0001\u0011 !IQr\u001eB\u001fA\u0013E\u0001S\u0005\u0005\t\u001dg\u0012i\u0004\"\u0011\u0011*\u0019A\u0001S\u0006\u0001!\u0002#\u0001z\u0003C\u0006\t&\tU#\u0011!Q\u0001\nA\u0005\u0003b\u0003I\u0006\u0005+\u0012\t\u0011)A\u0005!\u000bB1\"$<\u0003V\t\u0015\r\u0015\"\u0005\u000f:!Ya2\bB+\u0005\u0003\u0005\u000b\u0011BG|\u0011!9\u0019E!\u0016\u0005\u0002A\u001d\u0003BCD%\u0005+\u0002\r\u0011\"\u0001\u0011P!QqQ\nB+\u0001\u0004%\t\u0001%\u0015\t\u0013\u001dM#Q\u000bQ!\nAU\u0002\u0002CD0\u0005+\"\t\u0001e\u0016\t\u00135=(Q\u000bQ\u0005\u0012Au\u0003\u0002\u0003H:\u0005+\"\t\u0005%\u0019\u0007\u0011A\u0015\u0004\u0001)A\t!OB1b# \u0003n\t\u0005\t\u0015!\u0003\u000b\u0016\"YQR\u001eB7\u0005\u000b\u0007K\u0011\u0003H\u001d\u0011-qYD!\u001c\u0003\u0002\u0003\u0006I!d>\t\u0011\u001d\r#Q\u000eC\u0001![B!b\"\u0013\u0003n\u0001\u0007I\u0011\u0001D<\u0011)9iE!\u001cA\u0002\u0013\u0005\u00013\u000f\u0005\n\u000f'\u0012i\u0007)Q\u0005\rsB\u0001bb\u0018\u0003n\u0011\u0005\u0001\u0013\u0010\u0005\n\u001b_\u0014i\u0007)C\t!\u007fB\u0001Bd\u001d\u0003n\u0011\u0005\u00033\u0011\u0004\t!\u000f\u0003\u0001\u0015!\u0005\u0011\n\"Y1R\u0010BB\u0005\u0003\u0005\u000b\u0011\u0002FK\u0011-iiOa!\u0003\u0006\u0004&\tB$\u000f\t\u00179m\"1\u0011B\u0001B\u0003%Qr\u001f\u0005\t\u000f\u0007\u0012\u0019\t\"\u0001\u0011\u0010\"Qq\u0011\nBB\u0001\u0004%\tAb\u001e\t\u0015\u001d5#1\u0011a\u0001\n\u0003\u0001*\nC\u0005\bT\t\r\u0005\u0015)\u0003\u0007z!Aqq\fBB\t\u0003\u0001Z\nC\u0005\u000ep\n\r\u0005\u0015\"\u0005\u0011 \"Aa2\u000fBB\t\u0003\u0002\u001aK\u0002\u0005\u0011(\u0002\u0001\u000b\u0011\u0003IU\u0011-YiH!'\u0003\u0002\u0003\u0006IA#&\t\u001755(\u0011\u0014BCB\u0013Ea\u0012\b\u0005\f\u001dw\u0011IJ!A!\u0002\u0013i9\u0010\u0003\u0005\bD\teE\u0011\u0001I\\\u0011)9IE!'A\u0002\u0013\u0005\u0001S\u0018\u0005\u000b\u000f\u001b\u0012I\n1A\u0005\u0002A}\u0006\"CD*\u00053\u0003\u000b\u0015\u0002IX\u0011!9yF!'\u0005\u0002A\u0015\u0007\"CGx\u00053\u0003K\u0011\u0003If\u0011!q\u0019H!'\u0005BA=g\u0001\u0003Ij\u0001\u0001\u0006\t\u0002%6\t\u0017-u$q\u0016B\u0001B\u0003%!R\u0013\u0005\f\u0017[\u0012yK!A!\u0002\u0013\u0001Z\u000fC\u0006\u000en\n=&Q1Q\u0005\u00129e\u0002b\u0003H\u001e\u0005_\u0013\t\u0011)A\u0005\u001boD\u0001bb\u0011\u00030\u0012\u0005\u0001S\u001e\u0005\u000b\u000f\u0013\u0012y\u000b1A\u0005\u0002AU\bBCD'\u0005_\u0003\r\u0011\"\u0001\u0011x\"Iq1\u000bBXA\u0003&\u00013\u001c\u0005\t\u000f?\u0012y\u000b\"\u0001\u0011~\"IQr\u001eBXA\u0013E\u00113\u0001\u0005\t\u001dg\u0012y\u000b\"\u0011\u0012\b\u0019A\u00113\u0002\u0001!\u0002#\tj\u0001C\u0006\f~\t\u001d'\u0011!Q\u0001\n)U\u0005bCF7\u0005\u000f\u0014\t\u0011)A\u0005#?A1\"$<\u0003H\n\u0015\r\u0015\"\u0005\u000f:!Ya2\bBd\u0005\u0003\u0005\u000b\u0011BG|\u0011!9\u0019Ea2\u0005\u0002E\u0005\u0002BCD%\u0005\u000f\u0004\r\u0011\"\u0001\u0012*!QqQ\nBd\u0001\u0004%\t!e\u000b\t\u0013\u001dM#q\u0019Q!\nEM\u0001\u0002CD0\u0005\u000f$\t!%\r\t\u00135=(q\u0019Q\u0005\u0012E]\u0002\u0002\u0003H:\u0005\u000f$\t%e\u000f\u0007\rE}\u0002\u0001CI!\u0011-\t\u001aFa8\u0003\u0002\u0003\u0006I!%\u0016\t\u001755(q\u001cBCB\u0013Ea\u0012\b\u0005\f\u001dw\u0011yN!A!\u0002\u0013i9\u0010\u0003\u0005\bD\t}G\u0011AI,\u0011)9IEa8A\u0002\u0013\u0005\u0011S\f\u0005\u000b\u000f\u001b\u0012y\u000e1A\u0005\u0002E}\u0003\"CD*\u0005?\u0004\u000b\u0015BI$\u0011!9yFa8\u0005\u0002E\u0015\u0004\"CGx\u0005?\u0004K\u0011CI6\u0011!q\u0019Ha8\u0005BE=d\u0001CI:\u0001\u0001\u0006\t\"%\u001e\t\u0017-u$Q\u001fB\u0001B\u0003%!R\u0013\u0005\f#\u0013\u0013)P!A!\u0002\u0013\tZ\tC\u0006\u0012\u000e\nU(\u0011!Q\u0001\nE-\u0005bCGw\u0005k\u0014)\u0019)C\t\u001dsA1Bd\u000f\u0003v\n\u0005\t\u0015!\u0003\u000ex\"Aq1\tB{\t\u0003\tz\t\u0003\u0006\bJ\tU\b\u0019!C\u0001#3C!b\"\u0014\u0003v\u0002\u0007I\u0011AIN\u0011%9\u0019F!>!B\u0013\tZ\b\u0003\u0005\b`\tUH\u0011AIQ\u0011%iyO!>!\n#\t:\u000b\u0003\u0005\u000ft\tUH\u0011IIV\r!\tz\u000b\u0001Q\u0001\u0012EE\u0006b\u0003E\u0013\u0007\u001f\u0011\t\u0011)A\u0005#\u000fD1\"%3\u0004\u0010\t\u0005\t\u0015!\u0003\u0012L\"YQR^B\b\u0005\u000b\u0007K\u0011\u0003H\u001d\u0011-qYda\u0004\u0003\u0002\u0003\u0006I!d>\t\u0011\u001d\r3q\u0002C\u0001#\u001bD!b\"\u0013\u0004\u0010\u0001\u0007I\u0011AIk\u0011)9iea\u0004A\u0002\u0013\u0005\u0011s\u001c\u0005\n\u000f'\u001ay\u0001)Q\u0005#/D\u0001bb\u0018\u0004\u0010\u0011\u0015\u0011S\u001d\u0005\n\u001b_\u001cy\u0001)C\t#WD\u0001Bd\u001d\u0004\u0010\u0011\u0005\u0013s\u001e\u0004\t#g\u0004\u0001\u0015!\u0005\u0012v\"Y12ZB\u0014\u0005\u0003\u0005\u000b\u0011BCs\u0011-Yiga\n\u0003\u0002\u0003\u0006IAe\u0002\t\u0017558q\u0005BCB\u0013Ea\u0012\b\u0005\f\u001dw\u00199C!A!\u0002\u0013i9\u0010\u0003\u0005\bD\r\u001dB\u0011\u0001J\u0005\u0011)9Iea\nA\u0002\u0013\u0005!\u0013\u0003\u0005\u000b\u000f\u001b\u001a9\u00031A\u0005\u0002IM\u0001\"CD*\u0007O\u0001\u000b\u0015BI~\u0011!9yfa\n\u0005\u0002Ie\u0001\"CGx\u0007O\u0001K\u0011\u0003J\u0010\u0011!99ca\n\u0005BI\r\u0002\u0002\u0003H:\u0007O!\tE%\u000b\t\u0011\u0019U8q\u0005C!\ro2\u0001B%\f\u0001A\u0003E!s\u0006\u0005\f\u0017\u0017\u001c\u0019E!A!\u0002\u0013))\u000fC\u0006\fn\r\r#\u0011!Q\u0001\nI\u0005\u0003bCGw\u0007\u0007\u0012)\u0019)C\t\u001dsA1Bd\u000f\u0004D\t\u0005\t\u0015!\u0003\u000ex\"Aq1IB\"\t\u0003\u0011\u001a\u0005\u0003\u0006\bJ\r\r\u0003\u0019!C\u0001%\u0017B!b\"\u0014\u0004D\u0001\u0007I\u0011\u0001J'\u0011%9\u0019fa\u0011!B\u0013\u0011*\u0004\u0003\u0005\b`\r\rC\u0011\u0001J*\u0011%iyoa\u0011!\n#\u0011J\u0006\u0003\u0005\b(\r\rC\u0011\tJ/\u0011!q\u0019ha\u0011\u0005BI\r\u0004\u0002\u0003D{\u0007\u0007\"\tEb\u001e\u0007\u0011I\u001d\u0004\u0001)A\t%SB1b#=\u0004`\t\u0005\t\u0015!\u0003\u0006f\"Y1R_B0\u0005\u0003\u0005\u000b\u0011BCs\u0011-Yiga\u0018\u0003\u0002\u0003\u0006IAe\u001f\t\u0017558q\fBCB\u0013Ea\u0012\b\u0005\f\u001dw\u0019yF!A!\u0002\u0013i9\u0010\u0003\u0005\bD\r}C\u0011\u0001J?\u0011)9Iea\u0018A\u0002\u0013\u0005!s\u0011\u0005\u000b\u000f\u001b\u001ay\u00061A\u0005\u0002I%\u0005\"CD*\u0007?\u0002\u000b\u0015\u0002J8\u0011!9yfa\u0018\u0005\u0002I=\u0005\"CGx\u0007?\u0002K\u0011\u0003JK\u0011!99ca\u0018\u0005BIe\u0005\u0002\u0003H:\u0007?\"\tEe(\t\u0011\u0019U8q\fC!\ro2\u0001Be)\u0001A\u0003E!S\u0015\u0005\f%s\u001biH!A!\u0002\u0013))\u000fC\u0006\u0013<\u000eu$\u0011!Q\u0001\nIu\u0006b\u0003J`\u0007{\u0012\t\u0011)A\u0005%{C1\"$<\u0004~\t\u0015\r\u0015\"\u0005\u000f:!Ya2HB?\u0005\u0003\u0005\u000b\u0011BG|\u0011!9\u0019e! \u0005\u0002I\u0005\u0007BCD%\u0007{\u0002\r\u0011\"\u0001\u0013L\"QqQJB?\u0001\u0004%\tA%4\t\u0013\u001dM3Q\u0010Q!\nI-\u0006\u0002CD0\u0007{\"\tAe5\t\u00135=8Q\u0010Q\u0005\u0012Ie\u0007\u0002CD\u0014\u0007{\"\tE%8\t\u00119M4Q\u0010C!%GD\u0001B\">\u0004~\u0011\u0005cq\u000f\u0004\t%O\u0004\u0001\u0015!\u0005\u0013j\"Y!S`BN\u0005\u0003\u0005\u000b\u0011BCs\u0011-Yiha'\u0003\u0002\u0003\u0006IA#&\t\u0017-541\u0014B\u0001B\u0003%!s \u0005\f\u001b[\u001cYJ!b!\n#qI\u0004C\u0006\u000f<\rm%\u0011!Q\u0001\n5]\b\u0002CD\"\u00077#\ta%\u0001\t\u0015\u001d%31\u0014a\u0001\n\u0003\u0019Z\u0001\u0003\u0006\bN\rm\u0005\u0019!C\u0001'\u001bA\u0011bb\u0015\u0004\u001c\u0002\u0006KAe<\t\u0011\u001d}31\u0014C\u0001''A\u0011\"d<\u0004\u001c\u0002&\tb%\u0007\t\u0011\u001d\u001d21\u0014C!';A\u0001Bd\u001d\u0004\u001c\u0012\u000533\u0005\u0005\t\rk\u001cY\n\"\u0011\u0007x\u0019A1s\u0005\u0001!\u0002#\u0019J\u0003C\u0006\u0013~\u000ee&\u0011!Q\u0001\n\u0015\u0015\bbCF?\u0007s\u0013\t\u0011)A\u0005\u0015+C1Be/\u0004:\n\u0005\t\u0015!\u0003\u0014>!Y!sXB]\u0005\u0003\u0005\u000b\u0011BJ\u001f\u0011-iio!/\u0003\u0006\u0004&\tB$\u000f\t\u00179m2\u0011\u0018B\u0001B\u0003%Qr\u001f\u0005\t\u000f\u0007\u001aI\f\"\u0001\u0014@!Qq\u0011JB]\u0001\u0004%\tae\u0013\t\u0015\u001d53\u0011\u0018a\u0001\n\u0003\u0019j\u0005C\u0005\bT\re\u0006\u0015)\u0003\u00140!AqqLB]\t\u0003\u0019\u001a\u0006C\u0005\u000ep\u000ee\u0006\u0015\"\u0005\u0014Z!AqqEB]\t\u0003\u001aj\u0006\u0003\u0005\u000ft\reF\u0011IJ2\u0011!1)p!/\u0005B\u0019]d\u0001CJ4\u0001\u0001\u0006\tb%\u001b\t\u0017A-1\u0011\u001cB\u0001B\u0003%1\u0013\u0011\u0005\f\u001b[\u001cIN!b!\n#qI\u0004C\u0006\u000f<\re'\u0011!Q\u0001\n5]\bbCJB\u00073\u0014)\u0019!C\u0001'\u000bC1b%$\u0004Z\n\u0005\t\u0015!\u0003\u0014\b\"Aq1IBm\t\u0003\u0019z\t\u0003\u0006\bJ\re\u0007\u0019!C\u0001'/C!b\"\u0014\u0004Z\u0002\u0007I\u0011AJO\u0011%9\u0019f!7!B\u0013\u0019J\n\u0003\u0005\b`\reG\u0011AJR\u0011%iyo!7!\n#\u0019J\u000b\u0003\u0005\b(\reG\u0011IJW\u0011!q\u0019h!7\u0005BME\u0006\u0002\u0003D{\u00073$\tEb\u001e\u0007\u0011MU\u0006\u0001)A\t'oC1\u0002$ \u0004x\n\u0005\t\u0015!\u0003\u0006f\"Y1sZB|\u0005\u0003\u0005\u000b\u0011BJa\u0011-\u0019\nna>\u0003\u0002\u0003\u0006Ia%2\t\u0017A-1q\u001fB\u0001B\u0003%13\u001b\u0005\f\u001b[\u001c9P!b!\n#qI\u0004C\u0006\u000f<\r](\u0011!Q\u0001\n5]\bbCJB\u0007o\u0014)\u0019!C\u0001'+D1b%$\u0004x\n\u0005\t\u0015!\u0003\u0014X\"Aq1IB|\t\u0003\u0019J\u000e\u0003\u0006\bJ\r]\b\u0019!C\u0001'OD!b\"\u0014\u0004x\u0002\u0007I\u0011AJw\u0011%9\u0019fa>!B\u0013\u0019J\u000f\u0003\u0005\b`\r]H\u0011AJz\u0011%iyoa>!\n#\u0019J\u0010\u0003\u0005\b(\r]H\u0011IJ\u007f\u0011!q\u0019ha>\u0005BQ\r\u0001\u0002\u0003D{\u0007o$\tEb\u001e\u0007\u0011Q\u001d\u0001\u0001)A\t)\u0013A1b#=\u0005\u001c\t\u0005\t\u0015!\u0003\u0006f\"YAR\u0010C\u000e\u0005\u0003\u0005\u000b\u0011BCs\u0011-!J\u0002b\u0007\u0003\u0002\u0003\u0006I\u0001f\u0007\t\u001755H1\u0004BCB\u0013Ea\u0012\b\u0005\f\u001dw!YB!A!\u0002\u0013i9\u0010\u0003\u0005\bD\u0011mA\u0011\u0001K\u000f\u0011)9I\u0005b\u0007A\u0002\u0013\u0005a2\t\u0005\u000b\u000f\u001b\"Y\u00021A\u0005\u0002Q\u001d\u0002\"CD*\t7\u0001\u000b\u0015BCn\u0011!9y\u0006b\u0007\u0005\u0002Q5\u0002\"CGx\t7\u0001K\u0011\u0003K\u0019\u0011!99\u0003b\u0007\u0005BQU\u0002\u0002\u0003D{\t7!\tEb\u001e\u0007\u0011Qe\u0002\u0001)A\t)wA1b#\u001c\u00058\t\u0005\t\u0015!\u0003\u0015N!YQR\u001eC\u001c\u0005\u000b\u0007K\u0011\u0003H\u001d\u0011-qY\u0004b\u000e\u0003\u0002\u0003\u0006I!d>\t\u0011\u001d\rCq\u0007C\u0001)\u001fB!b\"\u0013\u00058\u0001\u0007I\u0011\u0001K+\u0011)9i\u0005b\u000eA\u0002\u0013\u0005A3\f\u0005\n\u000f'\"9\u0004)Q\u0005)/B\u0001bb\u0018\u00058\u0011\u0005A\u0013\r\u0005\n\u001b_$9\u0004)C\t)OB\u0001Bd\u001d\u00058\u0011\u0005C3\u000e\u0004\t)_\u0002\u0001\u0015!\u0005\u0015r!Y1R\u000eC'\u0005\u0003\u0005\u000b\u0011\u0002KE\u0011-ii\u000f\"\u0014\u0003\u0006\u0004&\tB$\u000f\t\u00179mBQ\nB\u0001B\u0003%Qr\u001f\u0005\f\u001b\u000b!iE!A!\u0002\u0017!Z\t\u0003\u0005\bD\u00115C\u0011\u0001KG\u0011)9I\u0005\"\u0014A\u0002\u0013\u0005As\u0013\u0005\u000b\u000f\u001b\"i\u00051A\u0005\u0002Qu\u0005\"CD*\t\u001b\u0002\u000b\u0015\u0002KM\u0011!9y\u0006\"\u0014\u0005\u0002Q\r\u0006\"CGx\t\u001b\u0002K\u0011\u0003KU\u0011!q\u0019\b\"\u0014\u0005BQ5f\u0001\u0003KY\u0001\u0001\u0006\t\u0002f-\t\u0017-EHQ\rB\u0001B\u0003%QQ\u001d\u0005\f\u0019{\")G!A!\u0002\u0013))\u000fC\u0006\u000b\u0002\u0011\u0015$\u0011!Q\u0001\nYe\u0001bCEn\tK\u0012\t\u0011)A\u0005-?A1\"$<\u0005f\t\u0015\r\u0015\"\u0005\u000f:!Ya2\bC3\u0005\u0003\u0005\u000b\u0011BG|\u0011!9\u0019\u0005\"\u001a\u0005\u0002Y\u0005\u0002BCD%\tK\u0002\r\u0011\"\u0001\u0017.!QqQ\nC3\u0001\u0004%\tAf\f\t\u0013\u001dMCQ\rQ!\nQe\u0006\u0002CD0\tK\"\tA&\u000e\t\u0011YmBQ\rC\u0005-{A\u0001Bf\u0011\u0005f\u0011%aS\t\u0005\n\u001b_$)\u0007)C\t-/B\u0001bb\n\u0005f\u0011\u0005c3\f\u0005\t\u001dg\")\u0007\"\u0011\u0017b!AaQ\u001fC3\t\u000329H\u0002\u0005\u0017f\u0001\u0001\u000b\u0011\u0003L4\u0011-1J\b\"#\u0003\u0002\u0003\u0006IAf\u001f\t\u0017)\u0005A\u0011\u0012B\u0001B\u0003%as\u000e\u0005\f\u00137$II!A!\u0002\u00131j\bC\u0006\fn\u0011%%\u0011!Q\u0001\nY}\u0004\u0002CD\"\t\u0013#\tA&!\t\u0015\u001d%C\u0011\u0012a\u0001\n\u00031Z\t\u0003\u0006\bN\u0011%\u0005\u0019!C\u0001-\u001bC\u0011bb\u0015\u0005\n\u0002\u0006KA&\u001c\t\u0011\u001d}C\u0011\u0012C\u0001-'C\u0001B&'\u0005\n\u0012%a3\u0014\u0005\t\u000fO!I\t\"\u0001\u0017\"\"AqQ\u0005CE\t\u000319\b\u0003\u0005\u000ft\u0011%E\u0011\tLU\u0011!1j\u000b\u0001Q\u0005\u0012\u0015\rh!\u0003K^\u0001A\u0005\u001b\u0011\u0007K_\u0011!!\n\rb*\u0007\u0002\u0015\r\b\u0002\u0003Kb\tO3\t\u0001&2\t\u0011Q=Gq\u0015D\u0001)#D\u0001\"&\f\u0005(\u001a\u0005A\u0013\u001b\u0005\t+_!9K\"\u0001\u00168\"QQ3\u0018CT#\u0003%\t!&\u001c\u0007\u0011U}\u0006\u0001)AI+\u0003D1\"f3\u00056\nU\r\u0011\"\u0001\u0016N\"YQs\u001aC[\u0005#\u0005\u000b\u0011BKc\u0011-)\n\u000e\".\u0003\u0016\u0004%\t!&4\t\u0017UMGQ\u0017B\tB\u0003%QS\u0019\u0005\t\u000f\u0007\")\f\"\u0001\u0016V\"QAs\u001aC[\u0005\u0004%\t!&8\t\u0013U\u0005HQ\u0017Q\u0001\nU}\u0007BCK\u0017\tk\u0013\r\u0011\"\u0001\u0016^\"IQ3\u001dC[A\u0003%Qs\u001c\u0005\t)\u0003$)\f\"\u0001\u0006d\"AA3\u0019C[\t\u0003)*\u000f\u0003\u0005\u00160\u0011UF\u0011AKu\u0011)):\u0004\".\u0002\u0002\u0013\u0005QS\u001e\u0005\u000b++\"),%A\u0005\u0002Uu\bBCK0\tk\u000b\n\u0011\"\u0001\u0017\u0006!QQS\u0012C[\u0003\u0003%\t%f$\t\u0015UEEQWA\u0001\n\u0003)\u0019\u000f\u0003\u0006\u0016\u0014\u0012U\u0016\u0011!C\u0001-\u0013A!\"&'\u00056\u0006\u0005I\u0011IKN\u0011))\n\u000b\".\u0002\u0002\u0013\u0005aS\u0002\u0005\u000b+O#),!A\u0005BYE\u0001BCKW\tk\u000b\t\u0011\"\u0011\u00160\"Q\u0011r\u0019C[\u0003\u0003%\tE$\u0001\t\u0015UEFQWA\u0001\n\u00032*bB\u0005\u00170\u0002\t\t\u0015#\u0005\u00172\u001aIQs\u0018\u0001\u0002B#Ea3\u0017\u0005\t\u000f\u0007\"I\u000f\"\u0001\u0017@\"Q\u0011r\u0019Cu\u0003\u0003%)E$\u0001\t\u0015Y\u0005G\u0011^A\u0001\n\u00033\u001a\r\u0003\u0006\u0017T\u0012%\u0018\u0011!CA-+4\u0001\u0002&6\u0001A\u0003EEs\u001b\u0005\f\u001b[$\u0019P!f\u0001\n\u0003!\n\u0010C\u0006\u000f<\u0011M(\u0011#Q\u0001\nQM\bbCEn\tg\u0014)\u001a!C\u0001)kD1\u0002&?\u0005t\nE\t\u0015!\u0003\u0015x\"Y1\u0012\u001fCz\u0005+\u0007I\u0011ACr\u0011-!Z\u0010b=\u0003\u0012\u0003\u0006I!\":\t\u00171uD1\u001fBK\u0002\u0013\u0005Q1\u001d\u0005\f){$\u0019P!E!\u0002\u0013))\u000fC\u0006\u0010j\u0012M(\u00113A\u0005\u0002Q}\bbCK\u0003\tg\u0014\t\u0019!C\u0001+\u000fA1\"f\u0003\u0005t\nE\t\u0015)\u0003\u0016\u0002!YQS\u0002Cz\u0005#\u0007I\u0011AK\b\u0011-)\n\u0002b=\u0003\u0002\u0004%\t!f\u0005\t\u0017U]A1\u001fB\tB\u0003&AS\u001c\u0005\t\u000f\u0007\"\u0019\u0010\"\u0001\u0016\u001a!AA\u0013\u0019Cz\t\u0003)\u0019\u000f\u0003\u0005\u0015D\u0012MH\u0011AK\u0014\u0011!!z\rb=\u0005\u0002U-\u0002\u0002CK\u0017\tg$\t!f\u000b\t\u0011U=B1\u001fC\u0001+cA!\"f\u000e\u0005t\u0006\u0005I\u0011AK\u001d\u0011))*\u0006b=\u0012\u0002\u0013\u0005Qs\u000b\u0005\u000b+?\"\u00190%A\u0005\u0002U\u0005\u0004BCK5\tg\f\n\u0011\"\u0001\u0016l!QQ3\u000fCz#\u0003%\t!&\u001e\t\u0015UeD1_I\u0001\n\u0003)Z\b\u0003\u0006\u0016\u0004\u0012M\u0018\u0013!C\u0001+\u000bC!\"&$\u0005t\u0006\u0005I\u0011IKH\u0011))\n\nb=\u0002\u0002\u0013\u0005Q1\u001d\u0005\u000b+'#\u00190!A\u0005\u0002UU\u0005BCKM\tg\f\t\u0011\"\u0011\u0016\u001c\"QQ\u0013\u0015Cz\u0003\u0003%\t!f)\t\u0015U\u001dF1_A\u0001\n\u0003*J\u000b\u0003\u0006\u0016.\u0012M\u0018\u0011!C!+_C!\"c2\u0005t\u0006\u0005I\u0011\tH\u0001\u0011))\n\fb=\u0002\u0002\u0013\u0005S3W\u0004\n-S\u0004\u0011\u0011)E\t-W4\u0011\u0002&6\u0001\u0003\u0003F\tB&<\t\u0011\u001d\rSq\bC\u0001-_D!\"c2\u0006@\u0005\u0005IQ\tH\u0001\u0011)1\n-b\u0010\u0002\u0002\u0013\u0005e\u0013\u001f\u0005\u000b-',y$!A\u0005\u0002^5\u0001bBL\u0014\u0001\u0011\u0005q\u0013\u0006\u0005\b/s\u0001A\u0011AL\u001e\u0011%9Z\u0005\u0001C\u0001\u000b7*z\tC\u0005\u0018N\u0001!\t!b\u0017\u0018P!9q3\u000b\u0001\u0005\u0002]U\u0003\"CL-\u0001\u0011\u0005Q1LCm\u0011%9Z\u0006\u0001C\u0001\u000b7:j\u0006C\u0005\u0018b\u0001!\t!b\u0017\u0006Z\ny\u0001+\u0019:Ji\u0016\u0014\u0018M\u00197f\u0019&\\WM\u0003\u0003\u0006^\u0015}\u0013\u0001\u00039be\u0006dG.\u001a7\u000b\t\u0015\u0005T1M\u0001\u000bG>dG.Z2uS>t'BAC3\u0003\u0015\u00198-\u00197b\u0007\u0001)\"\"b\u001b\u0006\n\u001aEQq\u0017D+'-\u0001QQNC;\u000b[+)-b3\u0011\t\u0015=T\u0011O\u0007\u0003\u000bGJA!b\u001d\u0006d\t1\u0011I\\=SK\u001a\u0004b!b\u001e\u0006~\u0015\re\u0002BC8\u000bsJA!b\u001f\u0006d\u00059\u0001/Y2lC\u001e,\u0017\u0002BC@\u000b\u0003\u0013A\"\u0013;fe\u0006\u0014G.Z(oG\u0016TA!b\u001f\u0006d)\"QQQCN!\u0011)9)\"#\r\u0001\u0011AQ1\u0012\u0001\u0005\u0006\u0004)iIA\u0001U#\u0011)y)\"&\u0011\t\u0015=T\u0011S\u0005\u0005\u000b'+\u0019GA\u0004O_RD\u0017N\\4\u0011\t\u0015=TqS\u0005\u0005\u000b3+\u0019GA\u0002B]f\\#!\"(\u0011\t\u0015}U\u0011V\u0007\u0003\u000bCSA!b)\u0006&\u0006IQO\\2iK\u000e\\W\r\u001a\u0006\u0005\u000bO+\u0019'\u0001\u0006b]:|G/\u0019;j_:LA!b+\u0006\"\n\tRO\\2iK\u000e\\W\r\u001a,be&\fgnY3\u0011\u0011\u0015=V\u0011WCB\u000bkk!!b\u0018\n\t\u0015MVq\f\u0002\u0015\u0007V\u001cHo\\7QCJ\fG\u000e\\3mSj\f'\r\\3\u0011\t\u0015\u001dUq\u0017\u0003\t\u000bs\u0003AQ1\u0001\u0006<\n!!+\u001a9s#\u0011)y)\"0\u0011\r\u0015}V\u0011YCC\u001b\t)Y&\u0003\u0003\u0006D\u0016m#a\u0003)be&#XM]1cY\u0016\u0004B!b,\u0006H&!Q\u0011ZC0\u0005!\u0001\u0016M]1mY\u0016d\u0007\u0003CCg\u000b',\u0019)\".\u000e\u0005\u0015='\u0002BCi\u000b?\nqaZ3oKJL7-\u0003\u0003\u0006V\u0016='A\u0004%bg:+woQ8nE&tWM]\u0001\u0007I%t\u0017\u000e\u001e\u0013\u0015\u0005\u0015m\u0007\u0003BC8\u000b;LA!b8\u0006d\t!QK\\5u\u0003\u0011\u0019\u0018N_3\u0016\u0005\u0015\u0015\b\u0003BC8\u000bOLA!\";\u0006d\t\u0019\u0011J\u001c;\u0002\u0019M$(/\u001b8h!J,g-\u001b=\u0016\u0005\u0015=\b\u0003BCy\u000b\u007ftA!b=\u0006|B!QQ_C2\u001b\t)9P\u0003\u0003\u0006z\u0016\u001d\u0014A\u0002\u001fs_>$h(\u0003\u0003\u0006~\u0016\r\u0014A\u0002)sK\u0012,g-\u0003\u0003\u0007\u0002\u0019\r!AB*ue&twM\u0003\u0003\u0006~\u0016\r\u0014!C2p[B\fg.[8o+\t1I\u0001\u0005\u0004\u0006N\u001a-aqB\u0005\u0005\r\u001b)yMA\nHK:,'/[2QCJ\u001cu.\u001c9b]&|g\u000e\u0005\u0003\u0006\b\u001aEA\u0001\u0003D\n\u0001\u0011\u0015\rA\"\u0006\u0003\u0005\r\u001bU\u0003\u0002D\f\r;\tB!b$\u0007\u001aA1QqXCa\r7\u0001B!b\"\u0007\u001e\u0011Aaq\u0004D\t\u0005\u0004)iIA\u0001Y\u00031yF/Y:lgV\u0004\bo\u001c:u+\t1)\u0003\u0005\u0003\u0006@\u001a\u001d\u0012\u0002\u0002D\u0015\u000b7\u00121\u0002V1tWN+\b\u000f]8si\"\u001aQA\"\f\u0011\t\u0015=dqF\u0005\u0005\rc)\u0019GA\u0005ue\u0006t7/[3oi\"\u001aQA\"\u000e\u0011\t\u0015=dqG\u0005\u0005\rs)\u0019G\u0001\u0005w_2\fG/\u001b7f\u0003AyF/Y:lgV\u0004\bo\u001c:u?\u0012*\u0017\u000f\u0006\u0003\u0006\\\u001a}\u0002\"\u0003D!\r\u0005\u0005\t\u0019\u0001D\u0013\u0003\rAH%M\u0001\u0010S:LG\u000fV1tWN+\b\u000f]8si\u0006YA/Y:lgV\u0004\bo\u001c:u\u0003=!\u0018m]6tkB\u0004xN\u001d;`I\u0015\fH\u0003BCn\r\u0017BqA\"\u0014\n\u0001\u00041)#\u0001\u0002ug\u0006\u00191/Z9\u0016\u0005\u0019M\u0003\u0003BCD\r+\"\u0001Bb\u0016\u0001\t\u000b\u0007a\u0011\f\u0002\u000b'\u0016\fX/\u001a8uS\u0006d\u0017\u0003BCH\r7\u0012bA\"\u0018\u0007b\u0019\u001ddA\u0002D0\u0001\u00011YF\u0001\u0007=e\u00164\u0017N\\3nK:$h\b\u0005\u0004\u0006x\u0019\rTQQ\u0005\u0005\rK*\tI\u0001\u0005Ji\u0016\u0014\u0018M\u00197f!))yK\"\u001b\u0006\u0006\u001a5dqN\u0005\u0005\rW*yFA\u0006Ji\u0016\u0014\u0018M\u00197f\u001fB\u001c\b\u0003BC<\rGRCAb\u0015\u0006\u001c\u0006!!/\u001a9s+\t)),\u0001\njgR\u0013\u0018M^3sg\u0006\u0014G.Z!hC&tWC\u0001D=!\u0011)yGb\u001f\n\t\u0019uT1\r\u0002\b\u0005>|G.Z1o\u0003=A\u0017m\u001d#fM&t\u0017\u000e^3TSj,\u0017aB5t\u000b6\u0004H/_\u0001\t]>tW)\u001c9us\u0006!\u0001.Z1e+\t)))\u0001\u0006iK\u0006$w\n\u001d;j_:,\"A\"$\u0011\r\u0015=dqRCC\u0013\u00111\t*b\u0019\u0003\r=\u0003H/[8o\u0003\u0011!\u0018-\u001b7\u0002\t1\f7\u000f^\u0001\u000bY\u0006\u001cHo\u00149uS>t\u0017\u0001B5oSR\f\u0001b\u001d9mSR$XM]\u000b\u0003\r?\u0003b!b0\u0007\"\u0016\u0015\u0015\u0002\u0002DR\u000b7\u0012\u0001#\u0013;fe\u0006\u0014G.Z*qY&$H/\u001a:\u0002\u0011%$XM]1u_J,\"A\"+\u0011\r\u0015}f1VCC\u0013\u00111i+b\u0017\u0003\u0011M\u0003H.\u001b;uKJ\f1\u0001]1s\u0003iI7o\u0015;sS\u000e$8\u000b\u001d7jiR,'oQ8mY\u0016\u001cG/[8o\u0003\u0015\u0011X-^:f+\u001919L\"1\u0007HR1a\u0011\u0018Df\r#\u0004\u0002\"b0\u0007<\u001a}fQY\u0005\u0005\r{+YF\u0001\u0005D_6\u0014\u0017N\\3s!\u0011)9I\"1\u0005\u000f\u0019\r'D1\u0001\u0006\u000e\n\t1\u000b\u0005\u0003\u0006\b\u001a\u001dGa\u0002De5\t\u0007QQ\u0012\u0002\u0005)\"\fG\u000fC\u0004\u0007Nj\u0001\rAb4\u0002\t=dGm\u0019\t\u0007\u000b_2yI\"/\t\u000f\u0019M'\u00041\u0001\u0007:\u0006!a.Z<d\u0005\u001d\u00196k\u0011+bg.,bA\"7\u0007z\u001au\bc\u0002Dnm\u001a]h1`\u0007\u0002\u0001\t92\u000b\u001e:jGR\u001c\u0006\u000f\\5ui\u0016\u00148\t[3dWR\u000b7o[\u000b\u0007\rC4YO\"=\u0014\u000bY,iGb9\u0011\u0011\u0015}fQ\u001dDu\r_LAAb:\u0006\\\t!A+Y:l!\u0011)9Ib;\u0005\u000f\u00195hO1\u0001\u0006\u000e\n\t!\u000b\u0005\u0003\u0006\b\u001aEHa\u0002Dzm\n\u0007QQ\u0012\u0002\u0003)B\fqC]3rk&\u0014Xm]*ue&\u001cGo\u00159mSR$XM]:\u0011\t\u0015\u001de\u0011 \u0003\b\r[\\\"\u0019ACG!\u0011)9I\"@\u0005\u000f\u0019M8D1\u0001\u0006\u000e\n9A+Y:l\u001fB\u001cXCBD\u0002\u000f[:\thE\u0002\u001d\u000b[\n\u0011\"\\1q%\u0016\u001cX\u000f\u001c;\u0016\t\u001d%qQ\u000f\u000b\u0005\u000f\u001799\b\u0005\u0006\u0007\\\u0006ur1ND8\u000fg\u0012QBU3tk2$X*\u00199qS:<W\u0003CD\t\u000fk9Id\"\f\u0014\r\u0005uRQND\n!!1Y.!\u0002\b,\u001dE\"\u0001\u0005(p]\u0012Kg/[:jE2,G+Y:l+\u00199Ibb\b\b$M1\u0011QAC7\u000f7\u0001rAb7w\u000f;9\t\u0003\u0005\u0003\u0006\b\u001e}A\u0001\u0003Dw\u0003\u000b\u0011\r!\"$\u0011\t\u0015\u001du1\u0005\u0003\t\rg\f)A1\u0001\u0006\u000e\u0006\u00112\u000f[8vY\u0012\u001c\u0006\u000f\\5u\rV\u0014H\u000f[3s\u0003\u0015\u0019\b\u000f\\5u+\t)y\t\u0005\u0003\u0006\b\u001e5B\u0001CD\u0018\u0003{\u0011\r!\"$\u0003\u0005I\u000b\u0004C\u0003Dn\u0003{9\u0019db\u000e\b,A!QqQD\u001b\t!1i/!\u0010C\u0002\u00155\u0005\u0003BCD\u000fs!\u0001Bb=\u0002>\t\u0007QQR\u0001\u0006S:tWM]\u000b\u0003\u000f\u007f\u0001rAb7w\u000fg99$\u0001\u0004j]:,'\u000fI\u0001\u0007y%t\u0017\u000e\u001e \u0015\t\u001dErq\t\u0005\t\u000fw\t\u0019\u00051\u0001\b@\u00051!/Z:vYR,\"ab\u000b\u0002\u0015I,7/\u001e7u?\u0012*\u0017\u000f\u0006\u0003\u0006\\\u001eE\u0003B\u0003D!\u0003\u000f\n\t\u00111\u0001\b,\u00059!/Z:vYR\u0004\u0003\u0006BA%\rk\t1!\\1q)\u00119Ycb\u0017\t\u0011\u001du\u00131\na\u0001\u000fg\t\u0011A]\u0001\u0005Y\u0016\fg\r\u0006\u0003\u0006\\\u001e\r\u0004\u0002CD3\u0003\u001b\u0002\rab\u001a\u0002\u000bA\u0014XM\u001e:\u0011\r\u0015=dqRD\u0016\u0003-\u0019\u0018n\u001a8bY\u0006\u0013wN\u001d;\u0011\t\u0015\u001duQ\u000e\u0003\b\r[d\"\u0019ACG!\u0011)9i\"\u001d\u0005\u000f\u0019MHD1\u0001\u0006\u000eB!QqQD;\t\u001d9y#\bb\u0001\u000b\u001bCqa\"\u001f\u001e\u0001\u00049Y(A\u0004nCB\u0004\u0018N\\4\u0011\u0011\u0015=tQPD6\u000fgJAab \u0006d\tIa)\u001e8di&|g.M\u0001\bG>l\u0007o\\:f+!9)\tc\u0010\t:!%C\u0003BDD\u0011/\"Ba\"#\tNAqa1\\A\u0015\u000fWB9\u0004#\u0010\tD!\u0015#\u0001D*fc\u000e{W\u000e]8tSR,W\u0003DDH\u000fw<y\u0010c\u0001\t\b!]1\u0003BA\u0015\u000f#\u0003bBb7\u0002\u0010\u001dexQ E\u0001\u0011\u000bA)BA\u0005D_6\u0004xn]5uKVaqqSDR\u000fS;ijb,\bBN1\u0011qBC7\u000f3\u0003\u0002Bb7\u0002\u0006\u001dmuq\u0014\t\u0005\u000b\u000f;i\n\u0002\u0005\u0007n\u0006=!\u0019ACG!91Y.a\u0004\b\"\u001e\u001dv1TDW\u000f\u007f\u0003B!b\"\b$\u0012AqQUA\b\u0005\u0004)iI\u0001\u0002G%B!QqQDU\t!9Y+a\u0004C\u0002\u00155%AA*S!\u0011)9ib,\u0005\u0011\u001dE\u0016q\u0002b\u0001\u000fg\u0013QAR5sgR\fB!b$\b6B\"qqWD^!\u001d1YN^DQ\u000fs\u0003B!b\"\b<\u0012aqQXDX\u0003\u0003\u0005\tQ!\u0001\u0006\u000e\nAA%]7be.$3\u0007\u0005\u0003\u0006\b\u001e\u0005G\u0001CDb\u0003\u001f\u0011\ra\"2\u0003\rM+7m\u001c8e#\u0011)yib21\t\u001d%wQ\u001a\t\b\r74xqUDf!\u0011)9i\"4\u0005\u0019\u001d=w\u0011YA\u0001\u0002\u0003\u0015\t!\"$\u0003\u0011\u0011\nX.\u0019:lIQ\n!A\u001a;\u0016\u0005\u001d5\u0016a\u00014uA\u0005\u00111\u000f^\u000b\u0003\u000f\u007f\u000b1a\u001d;!)\u00199yjb8\bb\"Aq\u0011[A\r\u0001\u00049i\u000b\u0003\u0005\bX\u0006e\u0001\u0019AD`\u00039\u0019w.\u001c2j]\u0016\u0014Vm];miN$bab'\bh\u001e-\b\u0002CDu\u00037\u0001\ra\")\u0002\u0005\u0019\u0014\b\u0002CDw\u00037\u0001\rab*\u0002\u0005M\u0014XCADN)\u0011)Ynb=\t\u0015\u0019\u0005\u0013qDA\u0001\u0002\u00049Y\n\u000b\u0003\u0002\"\u0019U\u0012!D7fe\u001e,7+\u001e2uCN\\7\u000f\u0005\u0003\u0006\b\u001emH\u0001CDS\u0003S\u0011\r!\"$\u0011\t\u0015\u001duq \u0003\t\u000fW\u000bIC1\u0001\u0006\u000eB!Qq\u0011E\u0002\t!1i/!\u000bC\u0002\u00155\u0005\u0003BCD\u0011\u000f!\u0001b\"-\u0002*\t\u0007\u0001\u0012B\t\u0005\u000b\u001fCY\u0001\r\u0003\t\u000e!E\u0001c\u0002Dnm\u001ee\br\u0002\t\u0005\u000b\u000fC\t\u0002\u0002\u0007\t\u0014!\u001d\u0011\u0011!A\u0001\u0006\u0003)iI\u0001\u0005%c6\f'o\u001b\u00136!\u0011)9\tc\u0006\u0005\u0011\u001d\r\u0017\u0011\u0006b\u0001\u00113\tB!b$\t\u001cA\"\u0001R\u0004E\u0011!\u001d1YN^D\u007f\u0011?\u0001B!b\"\t\"\u0011a\u00012\u0005E\f\u0003\u0003\u0005\tQ!\u0001\u0006\u000e\nAA%]7be.$c'A\u0001g\u0003\u0005\u0019HC\u0002E\u0016\u0011[Ay\u0003\u0005\b\u0007\\\u0006%r\u0011`D\u007f\u0011\u0003A)\u0001#\u0006\t\u0011!\u0015\u0012q\u0006a\u0001\u0011\u000bA\u0001\u0002c\n\u00020\u0001\u0007\u0001R\u0003\u000b\u0005\u000b7D\u0019\u0004\u0003\u0005\bf\u0005E\u0002\u0019\u0001E\u001b!\u0019)yGb$\t\u0002A!Qq\u0011E\u001d\t\u001dAYD\bb\u0001\u000b\u001b\u0013!A\u0015\u001a\u0011\t\u0015\u001d\u0005r\b\u0003\b\u0011\u0003r\"\u0019ACG\u0005\t\u00116\u0007E\u0004\u0007\\n9Ygb\u001c\u0011\u000f\u0019m7\u0004c\u000e\tHA!Qq\u0011E%\t\u001dAYE\bb\u0001\u000b\u001b\u00131\u0001\u001693\u0011\u001dAyE\ba\u0001\u0011#\n1B]3t\u0007>l'-\u001b8feBQQq\u000eE*\u000fWB9\u0004#\u0010\n\t!US1\r\u0002\n\rVt7\r^5p]JBq\u0001#\u0017\u001f\u0001\u0004A)%\u0001\u0002ueUA\u0001R\fEV\u0011OC\t\f\u0006\u0003\t`!]F\u0003\u0002E1\u0011g\u0003bBb7\u00024\u001d-\u0004R\u0015EU\u0011\u0007BiK\u0001\u0007QCJ\u001cu.\u001c9pg&$X-\u0006\u0007\th!5\u0004\u0012\u000fE;\u0011sBIi\u0005\u0003\u00024!%\u0004C\u0004Dn\u0003\u001fAY\u0007c\u001c\tt!]\u0004r\u0011\t\u0005\u000b\u000fCi\u0007\u0002\u0005\b&\u0006M\"\u0019ACG!\u0011)9\t#\u001d\u0005\u0011\u001d-\u00161\u0007b\u0001\u000b\u001b\u0003B!b\"\tv\u0011AaQ^A\u001a\u0005\u0004)i\t\u0005\u0003\u0006\b\"eD\u0001CDY\u0003g\u0011\r\u0001c\u001f\u0012\t\u0015=\u0005R\u0010\u0019\u0005\u0011\u007fB\u0019\tE\u0004\u0007\\ZDY\u0007#!\u0011\t\u0015\u001d\u00052\u0011\u0003\r\u0011\u000bCI(!A\u0001\u0002\u000b\u0005QQ\u0012\u0002\tIEl\u0017M]6%oA!Qq\u0011EE\t!9\u0019-a\rC\u0002!-\u0015\u0003BCH\u0011\u001b\u0003D\u0001c$\t\u0014B9a1\u001c<\tp!E\u0005\u0003BCD\u0011'#A\u0002#&\t\n\u0006\u0005\t\u0011!B\u0001\u000b\u001b\u0013\u0001\u0002J9nCJ\\G\u0005\u000f\u000b\u0007\u00113CY\n#(\u0011\u001d\u0019m\u00171\u0007E6\u0011_B\u0019\bc\u001e\t\b\"A\u0001REA\u001d\u0001\u0004A9\b\u0003\u0005\t(\u0005e\u0002\u0019\u0001ED)\u0011)Y\u000e#)\t\u0011\u001d\u0015\u00141\ba\u0001\u0011G\u0003b!b\u001c\u0007\u0010\"M\u0004\u0003BCD\u0011O#q\u0001c\u000f \u0005\u0004)i\t\u0005\u0003\u0006\b\"-Fa\u0002E!?\t\u0007QQ\u0012\t\b\r7\\\u0002R\u0015EX!\u0011)9\t#-\u0005\u000f!-sD1\u0001\u0006\u000e\"9\u0001rJ\u0010A\u0002!U\u0006CCC8\u0011':Y\u0007#*\t*\"9\u0001\u0012L\u0010A\u0002!5&A\u0003\"vS2$WM](qgV1\u0001RXE\u0005\u0013\u001f\u00192\u0001IC7\u0005%yE\u000f[3so&\u001cX-\u0006\u0003\tD\"u7c\u0001\u0012\u0006n\u0005Iq\u000e\u001e5fe^L7/\u001a\u000b\u0005\u0011\u0013D\t\u000f\u0006\u0003\u0006\\\"-\u0007b\u0002EgG\u0001\u000f\u0001rZ\u0001\u0002iB1\u0001\u0012\u001bEl\u00117l!\u0001c5\u000b\t!UW1M\u0001\be\u00164G.Z2u\u0013\u0011AI\u000ec5\u0003\u0011\rc\u0017m]:UC\u001e\u0004B!b\"\t^\u00129\u0001r\u001c\u0012C\u0002\u00155%aA\"nE\"A\u00012]\u0012\u0005\u0002\u0004A)/A\u0004o_R\u0014w\u000eZ=\u0011\r\u0015=\u0004r]Cn\u0013\u0011AI/b\u0019\u0003\u0011q\u0012\u0017P\\1nKz\nA!\u001b4JgV!\u0001r\u001eE|)\u0011A\t\u0010#?\u0011\u000b!M(\u0005#>\u000e\u0003\u0001\u0002B!b\"\tx\u00129\u0001r\u001c\u0013C\u0002\u00155\u0005b\u0002E~I\u0001\u0007\u0001R`\u0001\u0007SN\u0014w\u000eZ=\u0011\u0011\u0015=tQ\u0010E{\u000b7\f!\"[:D_6\u0014\u0017N\\3s\u0003)\t7oQ8nE&tWM]\u000b\u0003\u0013\u000b\u0001\u0002\"b0\u0007<&\u001d\u0011R\u0002\t\u0005\u000b\u000fKI\u0001B\u0004\n\f\u0001\u0012\r!\"$\u0003\t\u0015cW-\u001c\t\u0005\u000b\u000fKy\u0001B\u0004\n\u0012\u0001\u0012\r!\"$\u0003\u0005Q{'!D*jO:\fG\u000e\\5oO>\u00038/\u0006\u0003\n\u0018%}1cA\u0014\u0006n\u00051\u0011m]:jO:$B!#\b\n,A!QqQE\u0010\t\u001dI\tc\nb\u0001\u0013G\u0011!\u0001U%\u0012\t\u0015=\u0015R\u0005\t\u0005\u000b\u001bL9#\u0003\u0003\n*\u0015='a\u0005#fY\u0016<\u0017\r^3e'&<g.\u00197mS:<\u0007bBE\u0017Q\u0001\u0007\u0011rF\u0001\u0005G:$\b\u0010\u0005\u0003\u0006N&E\u0012\u0002BE\u001a\u000b\u001f\u0014!bU5h]\u0006dG.\u001b8h\u0003!!\u0018m]63_B\u001cXCBE\u001d\u0013\u007fI\u0019\u0005\u0006\u0003\n<%\u0015\u0003c\u0002Dn9%u\u0012\u0012\t\t\u0005\u000b\u000fKy\u0004B\u0004\u0007n&\u0012\r!\"$\u0011\t\u0015\u001d\u00152\t\u0003\b\rgL#\u0019ACG\u0011\u001dI9%\u000ba\u0001\u0013\u0013\n1\u0001^:l!\u001d1YnGE\u001f\u0013\u0003\nAa\u001e:baV!\u0011rJE4)\u0011I\t&#\u001b\u0013\r%MSQNE+\r\u00191yF\u000b\u0001\nRA1a1\\A\u0007\u0013K\u0012ABT8o\t&4\u0018n]5cY\u0016,B!c\u0017\nbM1\u0011QBC7\u0013;\u0002\u0002Bb7\u0002\u0006%}\u00132\r\t\u0005\u000b\u000fK\t\u0007\u0002\u0005\u0007n\u00065!\u0019ACG!\u00191Y.!\u0004\n`A!QqQE4\t\u001d1iO\u000bb\u0001\u000b\u001bC\u0001\"c\u001b+\t\u0003\u0007\u0011RN\u0001\u0005E>$\u0017\u0010\u0005\u0004\u0006p!\u001d\u0018RM\u0001\u0018I\u0016dWmZ1uK\u0012\u001c\u0016n\u001a8bY2Lgn\u001a\u001apaN,B!c\u001d\nzQ!\u0011ROE>!\u00151YnJE<!\u0011)9)#\u001f\u0005\u000f%\u00052F1\u0001\n$!9\u0011RP\u0016A\u0002%]\u0014AA5u\u0003-\u0011W/\u001b7eKJ\u0014t\u000e]:\u0016\r%\r\u0015\u0012REG)\u0011I))c$\u0011\u000f\u0019m\u0007%c\"\n\fB!QqQEE\t\u001dIY\u0001\fb\u0001\u000b\u001b\u0003B!b\"\n\u000e\u00129\u0011\u0012\u0003\u0017C\u0002\u00155\u0005bBEIY\u0001\u0007\u00112S\u0001\u0003G\n\u0004\u0002\"#&\n\u001c&\u001d\u00152R\u0007\u0003\u0013/SA!#'\u0006`\u00059Q.\u001e;bE2,\u0017\u0002BEO\u0013/\u0013qAQ;jY\u0012,'/\u0001\u0007tKF,XM\u001c;jC2d\u00170\u0006\u0004\n$&5\u0016r\u0016\u000b\u0005\u000bkK)\u000bC\u0004\n(6\u0002\r!#+\u0002\u0003\tTC!c+\u0006\u001cBAQqND?\r'2\u0019\u0006B\u0004\u0007D6\u0012\r!\"$\u0005\u000f\u0019%WF1\u0001\n2F!QqRCc\u0003!i7n\u0015;sS:<G\u0003CCx\u0013oKY,c0\t\u000f%ef\u00061\u0001\u0006p\u0006)1\u000f^1si\"9\u0011R\u0018\u0018A\u0002\u0015=\u0018aA:fa\"9\u0011\u0012\u0019\u0018A\u0002\u0015=\u0018aA3oIR!Qq^Ec\u0011\u001dIil\fa\u0001\u000b_\f\u0001\u0002^8TiJLgn\u001a\u000b\u0003\u000b_\faA]3ek\u000e,W\u0003BEh\u0013'$B!#5\nZB!QqQEj\t\u001dI)N\rb\u0001\u0013/\u0014\u0011!V\t\u0005\u000b\u000b+)\nC\u0004\n\\J\u0002\r!#8\u0002\u0005=\u0004\bCCC8\u0011'J\t.#5\nR\u0006a!/\u001a3vG\u0016|\u0005\u000f^5p]V!\u00112]Eu)\u0011I)/c;\u0011\r\u0015=dqREt!\u0011)9)#;\u0005\u000f%U7G1\u0001\nX\"9\u00112\\\u001aA\u0002%5\bCCC8\u0011'J9/c:\nh\u0006!am\u001c7e+\u0011I\u00190#?\u0015\t%U\u0018r \u000b\u0005\u0013oLY\u0010\u0005\u0003\u0006\b&eHaBEki\t\u0007\u0011r\u001b\u0005\b\u00137$\u0004\u0019AE\u007f!))y\u0007c\u0015\nx&]\u0018r\u001f\u0005\b\u0015\u0003!\u0004\u0019AE|\u0003\u0005Q\u0018!C1hOJ,w-\u0019;f+\u0011Q9A#\u0004\u0015\t)%!2\u0004\u000b\u0007\u0015\u0017QyA#\u0006\u0011\t\u0015\u001d%R\u0002\u0003\b\r\u0007,$\u0019ACG\u0011\u001dQ\t\"\u000ea\u0001\u0015'\tQa]3r_B\u0004\"\"b\u001c\tT)-QQ\u0011F\u0006\u0011\u001dQ9\"\u000ea\u0001\u00153\taaY8nE>\u0004\bCCC8\u0011'RYAc\u0003\u000b\f!A!\u0012A\u001b\u0005\u0002\u0004Qi\u0002\u0005\u0004\u0006p!\u001d(2B\u0001\tM>dG\rT3giV!!2\u0005F\u0015)\u0011Q)Cc\f\u0015\t)\u001d\"2\u0006\t\u0005\u000b\u000fSI\u0003B\u0004\u0007DZ\u0012\r!\"$\t\u000f%mg\u00071\u0001\u000b.AQQq\u000eE*\u0015O))Ic\n\t\u000f)\u0005a\u00071\u0001\u000b(\u0005Iam\u001c7e%&<\u0007\u000e^\u000b\u0005\u0015kQY\u0004\u0006\u0003\u000b8)\u0005C\u0003\u0002F\u001d\u0015{\u0001B!b\"\u000b<\u00119a1Y\u001cC\u0002\u00155\u0005bBEno\u0001\u0007!r\b\t\u000b\u000b_B\u0019&\"\"\u000b:)e\u0002b\u0002F\u0001o\u0001\u0007!\u0012H\u0001\u000be\u0016$WoY3MK\u001a$X\u0003\u0002F$\u0015\u0017\"BA#\u0013\u000bNA!Qq\u0011F&\t\u001dI)\u000e\u000fb\u0001\u0013/Dq!c79\u0001\u0004Qy\u0005\u0005\u0006\u0006p!M#\u0012JCC\u0015\u0013\n1B]3ek\u000e,'+[4iiV!!R\u000bF-)\u0011Q9Fc\u0017\u0011\t\u0015\u001d%\u0012\f\u0003\b\u0013+L$\u0019AEl\u0011\u001dIY.\u000fa\u0001\u0015;\u0002\"\"b\u001c\tT\u0015\u0015%r\u000bF,\u0003A\u0011X\rZ;dK2+g\r^(qi&|g.\u0006\u0003\u000bd)%D\u0003\u0002F3\u0015W\u0002b!b\u001c\u0007\u0010*\u001d\u0004\u0003BCD\u0015S\"q!#6;\u0005\u0004I9\u000eC\u0004\n\\j\u0002\rA#\u001c\u0011\u0015\u0015=\u00042\u000bF4\u000b\u000bS9'A\tsK\u0012,8-\u001a*jO\"$x\n\u001d;j_:,BAc\u001d\u000bzQ!!R\u000fF>!\u0019)yGb$\u000bxA!Qq\u0011F=\t\u001dI)n\u000fb\u0001\u0013/Dq!c7<\u0001\u0004Qi\b\u0005\u0006\u0006p!MSQ\u0011F<\u0015o\nqAZ8sK\u0006\u001c\u0007.\u0006\u0003\u000b\u0004*-E\u0003BCn\u0015\u000bCq\u0001#\n=\u0001\u0004Q9\t\u0005\u0005\u0006p\u001duTQ\u0011FE!\u0011)9Ic#\u0005\u000f%UGH1\u0001\u0006\u000e\u0006)1m\\;oiR!QQ\u001dFI\u0011\u001dQ\u0019*\u0010a\u0001\u0015+\u000b\u0011\u0001\u001d\t\t\u000b_:i(\"\"\u0007z\u0005\u00191/^7\u0016\t)m%r\u0014\u000b\u0005\u0015;S\t\u000b\u0005\u0003\u0006\b*}EaBEk}\t\u0007\u0011r\u001b\u0005\b\u0015Gs\u00049\u0001FS\u0003\rqW/\u001c\t\u0007\u000boR9K#(\n\t)%V\u0011\u0011\u0002\b\u001dVlWM]5d\u0003\u001d\u0001(o\u001c3vGR,BAc,\u000b4R!!\u0012\u0017F[!\u0011)9Ic-\u0005\u000f%UwH1\u0001\nX\"9!2U A\u0004)]\u0006CBC<\u0015OS\t,A\u0002nS:,BA#0\u000bLR!QQ\u0011F`\u0011\u001dQ\t\r\u0011a\u0002\u0015\u0007\f1a\u001c:e!\u0019)9H#2\u000bJ&!!rYCA\u0005!y%\u000fZ3sS:<\u0007\u0003BCD\u0015\u0017$q!#6A\u0005\u0004I9.A\u0002nCb,BA#5\u000bZR!QQ\u0011Fj\u0011\u001dQ\t-\u0011a\u0002\u0015+\u0004b!b\u001e\u000bF*]\u0007\u0003BCD\u00153$q!#6B\u0005\u0004I9.A\u0003nCb\u0014\u00150\u0006\u0003\u000b`*-H\u0003\u0002Fq\u0015[$B!\"\"\u000bd\"9!R\u001d\"A\u0004)\u001d\u0018aA2naB1Qq\u000fFc\u0015S\u0004B!b\"\u000bl\u00129a1\u0019\"C\u0002\u00155\u0005b\u0002E\u0013\u0005\u0002\u0007!r\u001e\t\t\u000b_:i(\"\"\u000bj\u0006)Q.\u001b8CsV!!R\u001fF\u0000)\u0011Q9p#\u0001\u0015\t\u0015\u0015%\u0012 \u0005\b\u0015K\u001c\u00059\u0001F~!\u0019)9H#2\u000b~B!Qq\u0011F\u0000\t\u001d1\u0019m\u0011b\u0001\u000b\u001bCq\u0001#\nD\u0001\u0004Y\u0019\u0001\u0005\u0005\u0006p\u001duTQ\u0011F\u007f+\u0011Y9a#\u0004\u0015\t-%1r\u0002\t\u0007\u000b\u000f3\tbc\u0003\u0011\t\u0015\u001d5R\u0002\u0003\b\r\u0007$%\u0019ACG\u0011\u001dA)\u0003\u0012a\u0001\u0017#\u0001\u0002\"b\u001c\b~\u0015\u001552B\u0001\bG>dG.Z2u+\u0011Y9b#\b\u0015\t-e1r\u0004\t\u0007\u000b\u000f3\tbc\u0007\u0011\t\u0015\u001d5R\u0004\u0003\b\r\u0007,%\u0019ACG\u0011\u001dY\t#\u0012a\u0001\u0017G\t!\u0001\u001d4\u0011\u0011\u0015=4RECC\u00177IAac\n\u0006d\ty\u0001+\u0019:uS\u0006dg)\u001e8di&|g.A\u0004gY\u0006$X*\u00199\u0016\t-522\u0007\u000b\u0005\u0017_Y)\u0004\u0005\u0004\u0006\b\u001aE1\u0012\u0007\t\u0005\u000b\u000f[\u0019\u0004B\u0004\u0007D\u001a\u0013\r!\"$\t\u000f!\u0015b\t1\u0001\f8AAQqND?\u000b\u000b[I\u0004\u0005\u0004\u0006x\u0015u4\u0012G\u0001\u0007M>\u0014\u0018\r\u001c7\u0015\t\u0019e4r\b\u0005\b\u0015';\u0005\u0019\u0001FK\u0003\u0019)\u00070[:ugR!a\u0011PF#\u0011\u001dQ\u0019\n\u0013a\u0001\u0015+\u000bAAZ5oIR!aQRF&\u0011\u001dQ\u0019*\u0013a\u0001\u0015+\u000bqbY8nE&tWM\u001d$bGR|'/_\u000b\u0003\u0017#\u0002\u0002\"b0\fT\u0015\r5rK\u0005\u0005\u0017+*YFA\bD_6\u0014\u0017N\\3s\r\u0006\u001cGo\u001c:zU\u0011)),b'\u0016\r-m3RMF5)\u0011Yifc\u001b\u0013\r-}SQNF1\r\u00191yf\u0013\u0001\f^AAQqXF*\u0017GZ9\u0007\u0005\u0003\u0006\b.\u0015Da\u0002Db\u0017\n\u0007QQ\u0012\t\u0005\u000b\u000f[I\u0007B\u0004\u0007J.\u0013\r!\"$\t\u000f-54\n1\u0001\fp\u0005\u00191M\u00194\u0011\r\u0015=4\u0012OF;\u0013\u0011Y\u0019(b\u0019\u0003\u0013\u0019+hn\u0019;j_:\u0004\u0004\u0003CC`\rw[\u0019gc\u001a\u0002\u0015]LG\u000f\u001b$jYR,'\u000f\u0006\u0003\u00066.m\u0004bBF?\u0019\u0002\u0007!RS\u0001\u0005aJ,G-\u0001\u0004gS2$XM\u001d\u000b\u0005\u000bk[\u0019\tC\u0004\f~5\u0003\rA#&\u0002\u0013\u0019LG\u000e^3s\u001d>$H\u0003BC[\u0017\u0013Cqa# O\u0001\u0004Q)*\u0001\u0006%a2,8\u000f\n9mkN,Bac$\f\u0016R!1\u0012SFL!\u0019)9I\"\u0005\f\u0014B!QqQFK\t\u001dI)n\u0014b\u0001\u0013/Dqa#'P\u0001\u0004YY*\u0001\u0003uQ\u0006$\bCBC<\u000b{Z\u0019*A\u0005qCJ$\u0018\u000e^5p]R!1\u0012UFT!!)ygc)\u00066\u0016U\u0016\u0002BFS\u000bG\u0012a\u0001V;qY\u0016\u0014\u0004bBF?!\u0002\u0007!RS\u0001\bOJ|W\u000f\u001d\"z+\u0011Yik#0\u0015\t-=6\u0012\u0019\t\t\u0017c[9lc/\u000666\u001112\u0017\u0006\u0005\u0017k+Y&A\u0005j[6,H/\u00192mK&!1\u0012XFZ\u0005\u0019\u0001\u0016M]'baB!QqQF_\t\u001dYy,\u0015b\u0001\u000b\u001b\u0013\u0011a\u0013\u0005\b\u0011K\t\u0006\u0019AFb!!)yg\" \u0006\u0006.m\u0016\u0001\u0002;bW\u0016$B!\".\fJ\"912\u001a*A\u0002\u0015\u0015\u0018!\u00018\u0002\u001fQ\f7.Z0tKF,XM\u001c;jC2$B!\".\fR\"912Z*A\u0002\u0015\u0015\u0018\u0001\u00023s_B$B!\".\fX\"912\u001a+A\u0002\u0015\u0015\u0018a\u00043s_B|6/Z9vK:$\u0018.\u00197\u0015\t\u0015U6R\u001c\u0005\b\u0017\u0017,\u0006\u0019ACs\u0003\u0015\u0019H.[2f)\u0019))lc9\fh\"91R\u001d,A\u0002\u0015\u0015\u0018\u0001C;oG~3'o\\7\t\u000f-%h\u000b1\u0001\u0006f\u0006IQO\\2`k:$\u0018\u000e\\\u0001\u0011g2L7-Z0tKF,XM\u001c;jC2$b!\".\fp.M\bbBFy/\u0002\u0007QQ]\u0001\u0005MJ|W\u000eC\u0004\fv^\u0003\r!\":\u0002\u000bUtG/\u001b7\u0002\u000fM\u0004H.\u001b;BiR!1\u0012UF~\u0011\u001dYY\r\u0017a\u0001\u000bK\fAa]2b]V!A\u0012\u0001G\u0005)\u0011a\u0019\u0001d\u0004\u0015\t1\u0015A2\u0002\t\u0007\u000b\u000f3\t\u0002d\u0002\u0011\t\u0015\u001dE\u0012\u0002\u0003\b\u0013+L&\u0019AEl\u0011\u001dIY.\u0017a\u0001\u0019\u001b\u0001\"\"b\u001c\tT1\u001dAr\u0001G\u0004\u0011\u001dQ\t!\u0017a\u0001\u0019\u000f\t\u0001b]2b]2+g\r^\u000b\u0005\u0019+ai\u0002\u0006\u0003\r\u00181\rB\u0003\u0002G\r\u0019?\u0001b!b\u001e\u0007d1m\u0001\u0003BCD\u0019;!qAb1[\u0005\u0004)i\tC\u0004\n\\j\u0003\r\u0001$\t\u0011\u0015\u0015=\u00042\u000bG\u000e\u000b\u000bcY\u0002C\u0004\u000b\u0002i\u0003\r\u0001d\u0007\u0002\u0013M\u001c\u0017M\u001c*jO\"$X\u0003\u0002G\u0015\u0019c!B\u0001d\u000b\r8Q!AR\u0006G\u001a!\u0019)9Hb\u0019\r0A!Qq\u0011G\u0019\t\u001d1\u0019m\u0017b\u0001\u000b\u001bCq!c7\\\u0001\u0004a)\u0004\u0005\u0006\u0006p!MSQ\u0011G\u0018\u0019_AqA#\u0001\\\u0001\u0004ay#A\u0005uC.,w\u000b[5mKR!QQ\u0017G\u001f\u0011\u001dYi\b\u0018a\u0001\u0015+\u000bAa\u001d9b]R!1\u0012\u0015G\"\u0011\u001dYi(\u0018a\u0001\u0015+\u000b\u0011\u0002\u001a:pa^C\u0017\u000e\\3\u0015\t\u0015UF\u0012\n\u0005\b\u0017{r\u0006\u0019\u0001FK\u0003-\u0019w\u000e]=U_\u0006\u0013(/Y=\u0016\t1=CR\f\u000b\u0005\u000b7d\t\u0006C\u0004\rT}\u0003\r\u0001$\u0016\u0002\u0005a\u001c\bCBC8\u0019/bY&\u0003\u0003\rZ\u0015\r$!B!se\u0006L\b\u0003BCD\u0019;\"q!#6`\u0005\u0004I9.\u0006\u0003\rb1%DCBCn\u0019GbY\u0007C\u0004\rT\u0001\u0004\r\u0001$\u001a\u0011\r\u0015=Dr\u000bG4!\u0011)9\t$\u001b\u0005\u000f%U\u0007M1\u0001\nX\"9\u0011\u0012\u00181A\u0002\u0015\u0015X\u0003\u0002G8\u0019o\"\u0002\"b7\rr1eD2\u0010\u0005\b\u0019'\n\u0007\u0019\u0001G:!\u0019)y\u0007d\u0016\rvA!Qq\u0011G<\t\u001dI).\u0019b\u0001\u0013/Dq!#/b\u0001\u0004))\u000fC\u0004\r~\u0005\u0004\r!\":\u0002\u00071,g.\u0001\u0007tC6,W\t\\3nK:$8/\u0006\u0003\r\u00042-E\u0003\u0002D=\u0019\u000bCqa#'c\u0001\u0004a9\t\u0005\u0004\u0006x\u0015uD\u0012\u0012\t\u0005\u000b\u000fcY\tB\u0004\nV\n\u0014\r!c6\u0002\u0007iL\u0007/\u0006\u0004\r\u00122eER\u0014\u000b\u0005\u0019'cy\n\u0005\u0004\u0006\b\u001aEAR\u0013\t\t\u000b_Z\u0019\u000bd&\r\u001cB!Qq\u0011GM\t\u001dI)n\u0019b\u0001\u0013/\u0004B!b\"\r\u001e\u00129a1Y2C\u0002\u00155\u0005bBFMG\u0002\u0007A\u0012\u0015\t\u0007\u000b\u007f+\t\rd'\u0016\r1\u0015FR\u0016GY)\u0011a9\u000bd-\u0011\r\u0015\u001de\u0011\u0003GU!!)ygc)\r,2=\u0006\u0003BCD\u0019[#q!#6e\u0005\u0004I9\u000e\u0005\u0003\u0006\b2EFa\u0002DbI\n\u0007QQ\u0012\u0005\b\u00173#\u0007\u0019\u0001G[!\u0019)9Hb\u0019\r0\u0006a!0\u001b9XSRD\u0017J\u001c3fqV!A2\u0018Gb+\tai\f\u0005\u0004\u0006\b\u001aEAr\u0018\t\t\u000b_Z\u0019\u000b$1\u0006fB!Qq\u0011Gb\t\u001dI).\u001ab\u0001\u0013/\faA_5q\u00032dWC\u0002Ge\u0019+d\t\u000e\u0006\u0005\rL2]G2\u001cGp!\u0019)9I\"\u0005\rNBAQqNFR\u0019\u001fd\u0019\u000e\u0005\u0003\u0006\b2EGaBEkM\n\u0007\u0011r\u001b\t\u0005\u000b\u000fc)\u000eB\u0004\u0007D\u001a\u0014\r!\"$\t\u000f-ee\r1\u0001\rZB1QqXCa\u0019'Dq\u0001$8g\u0001\u0004ay-\u0001\u0005uQ&\u001cX\t\\3n\u0011\u001da\tO\u001aa\u0001\u0019'\f\u0001\u0002\u001e5bi\u0016cW-\\\u0001\u0010i>\u0004\u0016M]\"pY2,7\r^5p]V1Ar\u001dG{\u0019W$B\u0001$;\rnB!Qq\u0011Gv\t\u001d1Im\u001ab\u0001\u000b\u001bCqa#\u001ch\u0001\u0004ay\u000f\u0005\u0004\u0006p-ED\u0012\u001f\t\t\u000b\u007f3Y\fd=\rjB!Qq\u0011G{\t\u001dI)n\u001ab\u0001\u0013/\f\u0001\u0002^8QCJl\u0015\r]\u000b\t\u0019wl\t\"$\u0006\u000e\u0002Q!AR`G\r)\u0011ay0d\u0001\u0011\t\u0015\u001dU\u0012\u0001\u0003\b\r\u0013D'\u0019ACG\u0011\u001di)\u0001\u001ba\u0002\u001b\u000f\t!!\u001a<\u0011\u0011\u0015=T\u0012BCC\u001b\u001bIA!d\u0003\u0006d\t\u0001B\u0005\\3tg\u0012\u001aw\u000e\\8oI1,7o\u001d\t\t\u000b_Z\u0019+d\u0004\u000e\u0014A!QqQG\t\t\u001dYy\f\u001bb\u0001\u000b\u001b\u0003B!b\"\u000e\u0016\u00119Qr\u00035C\u0002\u00155%!\u0001,\t\u000f-5\u0004\u000e1\u0001\u000e\u001cA1QqNF9\u001b;\u0001\u0002\"b0\u0007<65Ar`\u0001\bi>\f%O]1z+\u0011i\u0019#$\u000b\u0015\t5\u0015R2\u0006\t\u0007\u000b_b9&d\n\u0011\t\u0015\u001dU\u0012\u0006\u0003\b\u0013+L'\u0019AEl\u0011%ii#[A\u0001\u0002\biy#\u0001\u0006fm&$WM\\2fIE\u0002b\u0001#5\tX6\u001d\u0012A\u0002;p\u0019&\u001cH/\u0006\u0002\u000e6A1QqOG\u001c\u000b\u000bKA!$\u000f\u0006\u0002\n!A*[:u\u00031!x.\u00138eKb,GmU3r+\tiy\u0004\u0005\u0004\u000eB5\u0015SQQ\u0007\u0003\u001b\u0007RAa#.\u0006`%!QrIG\"\u0005)Ie\u000eZ3yK\u0012\u001cV-]\u0001\ti>\u001cFO]3b[V\u0011QR\n\t\u0007\u000bojy%\"\"\n\t5ES\u0011\u0011\u0002\u0007'R\u0014X-Y7)\u00171l)&d\u0017\u000e^5\u0005T2\r\t\u0005\u000b_j9&\u0003\u0003\u000eZ\u0015\r$A\u00033faJ,7-\u0019;fI\u00069Q.Z:tC\u001e,\u0017EAG0\u0003m)6/\u001a\u0011ai>DC*\u0019>z\u0019&\u001cH/\u000b1!S:\u001cH/Z1e]\u0005)1/\u001b8dK\u0006\u0012QRM\u0001\u0006a9\ndfM\u0001\u000bi>LE/\u001a:bi>\u0014XCAG6!\u0019)9($\u001c\u0006\u0006&!QrNCA\u0005!IE/\u001a:bi>\u0014\u0018\u0001\u0003;p\u0005V4g-\u001a:\u0016\t5UTrP\u000b\u0003\u001bo\u0002b!#&\u000ez5u\u0014\u0002BG>\u0013/\u0013aAQ;gM\u0016\u0014\b\u0003BCD\u001b\u007f\"q!#6o\u0005\u0004I9.A\u0007u_R\u0013\u0018M^3sg\u0006\u0014G.Z\u000b\u0003\u000b{C3b\\G+\u001b7j9)$\u0019\u000ed\u0005\u0012Q\u0012R\u0001\u0019+N,\u0007\u0005\u0019;p\u0013R,'/\u00192mK\u0002\u0004\u0013N\\:uK\u0006$\u0017A\u0003;p\u0013R,'/\u00192mK\u0006)Ao\\*fcV\u0011Q\u0012\u0013\t\u0007\u000b\u007fk\u0019*\"\"\n\t5UU1\f\u0002\u0007!\u0006\u00148+Z9\u0002\u000bQ|7+\u001a;\u0016\t5mURU\u000b\u0003\u001b;\u0003ba#-\u000e 6\r\u0016\u0002BGQ\u0017g\u0013a\u0001U1s'\u0016$\b\u0003BCD\u001bK#q!#6s\u0005\u0004I9.A\u0003u_6\u000b\u0007/\u0006\u0004\u000e,6EVR\u0017\u000b\u0005\u001b[k9\f\u0005\u0005\f2.]VrVGZ!\u0011)9)$-\u0005\u000f-}6O1\u0001\u0006\u000eB!QqQG[\t\u001di9b\u001db\u0001\u000b\u001bCq!$\u0002t\u0001\biI\f\u0005\u0005\u0006p5%QQQG^!!)ygc)\u000e06M\u0016\u0001\u0003;p-\u0016\u001cGo\u001c:\u0016\u00055\u0005\u0007CBC<\u001b\u0007,))\u0003\u0003\u000eF\u0016\u0005%A\u0002,fGR|'/\u0001\u0002u_V!Q2ZGh)\u0011ii-d5\u0011\t\u0015\u001dUr\u001a\u0003\b\u001b#,(\u0019ACG\u0005\u0005\u0019\u0005bBGkk\u0002\u0007Qr[\u0001\bM\u0006\u001cGo\u001c:z!!)y+$7\u0006\u000665\u0017\u0002BGn\u000b?\u0012qAR1di>\u0014\u0018P\u0001\u0005BG\u000e,7o]8s+\u0019i\t/d:\u000elN)\u00110\"\u001c\u000edB9a1\u001c<\u000ef6%\b\u0003BCD\u001bO$qA\"<z\u0005\u0004)i\t\u0005\u0003\u0006\b6-Ha\u0002Dzs\n\u0007QQR\u0001\u0004a&$\u0018A\u00038foN+(\r^1tWR!Q2_G{!\u001d1Y._Gs\u001bSDqAc%}\u0001\u0004i9\u0010\u0005\u0004\u0006@\u001a\u0005V1Q\u000b\u0003\u001bw\u0004b!$\u0011\u000e~6M\u0018\u0002BG\u0000\u001b\u0007\u00121aU3r)\tq\u0019\u0001\u0005\u0003\u000f\u00069=QB\u0001H\u0004\u0015\u0011qIAd\u0003\u0002\t1\fgn\u001a\u0006\u0003\u001d\u001b\tAA[1wC&!a\u0011\u0001H\u0004\u00039\u0019X\u000f]3sIQ|7\u000b\u001e:j]\u001eLA!c2\u000f\u0016%!ar\u0003H\u0004\u0005\u0019y%M[3di\nYAK]1og\u001a|'/\\3s+\u0019qiBd\t\u000f(M1\u00111KC7\u001d?\u0001rAb7z\u001dCq)\u0003\u0005\u0003\u0006\b:\rB\u0001\u0003Dw\u0003'\u0012\r!\"$\u0011\t\u0015\u001der\u0005\u0003\t\rg\f\u0019F1\u0001\u0006\u000e\n9ai\u001c:fC\u000eDW\u0003\u0002H\u0017\u001dk\u0019b!!\u0016\u0006n9=\u0002c\u0002Dns\u0016mg\u0012\u0007\t\u0007\r7\f)Fd\r\u0011\t\u0015\u001deR\u0007\u0003\t\r\u0007\f)F1\u0001\u0006\u000eBAQqND?\u000b\u000bs\u0019$\u0006\u0002\u000ex\u0006!\u0001/\u001b;!)\u0019q\tDd\u0010\u000fB!A\u00112\\A/\u0001\u0004q9\u0004\u0003\u0005\u000en\u0006u\u0003\u0019AG|+\t)Y\u000e\u0006\u0003\u0006\\:\u001d\u0003B\u0003D!\u0003C\n\t\u00111\u0001\u0006\\\"\"\u00111\rD\u001b)\u0011)YN$\u0014\t\u0011\u001d\u0015\u0014Q\ra\u0001\u001d\u001f\u0002b!b\u001c\u0007\u0010\u0016mG\u0003\u0002H\u0019\u001d'B\u0001Bc%\u0002h\u0001\u0007Qr\u001f\u0002\u0006\u0007>,h\u000e^\n\u0007\u0003S*iG$\u0017\u0011\u000f\u0019m\u00170\":\u000f\\A!a1\\A5)\u0019qYFd\u0018\u000fb!A1RPA9\u0001\u0004Q)\n\u0003\u0005\u000en\u0006E\u0004\u0019AG|)\u0011)YN$\u001a\t\u0015\u0019\u0005\u0013QOA\u0001\u0002\u0004))\u000f\u000b\u0003\u0002x\u0019UB\u0003BCn\u001dWB\u0001b\"\u001a\u0002z\u0001\u0007aR\u000e\t\u0007\u000b_2y)\":\u0015\t9mc\u0012\u000f\u0005\t\u0015'\u000bY\b1\u0001\u000ex\u0006)Q.\u001a:hKR!Q1\u001cH<\u0011!YI*! A\u00029m#A\u0002*fIV\u001cW-\u0006\u0003\u000f~9\u00155CBA@\u000b[ry\bE\u0004\u0007\\ft\tId\"\u0011\r\u0015=dq\u0012HB!\u0011)9I$\"\u0005\u0011%U\u0017q\u0010b\u0001\u0013/\u0004bAb7\u0002\u00009\r\u0005CCC8\u0011'r\u0019Id!\u000f\u0004R1ar\u0011HG\u001d\u001fC\u0001\"c7\u0002\b\u0002\u0007a\u0012\u0012\u0005\t\u001b[\f9\t1\u0001\u000exV\u0011a\u0012\u0011\u000b\u0005\u000b7t)\n\u0003\u0006\u0007B\u0005-\u0015\u0011!a\u0001\u001d\u0003CC!!$\u00076Q!Q1\u001cHN\u0011!9)'a$A\u00029u\u0005CBC8\r\u001fs\t\t\u0006\u0003\u000f\b:\u0005\u0006\u0002\u0003FJ\u0003#\u0003\r!d>\u0015\t\u0015mgR\u0015\u0005\t\u00173\u000b\u0019\n1\u0001\u000f\b\n!ai\u001c7e+\u0011qYK$-\u0014\r\u0005]UQ\u000eHW!\u001d1Y.\u001fHX\u001dg\u0003B!b\"\u000f2\u0012A\u0011R[AL\u0005\u0004I9\u000e\u0005\u0004\u0007\\\u0006]er\u0016\t\u000b\u000b_B\u0019Fd,\u000f0:=F\u0003\u0003HZ\u001dssYL$0\t\u0011)\u0005\u0011\u0011\u0015a\u0001\u001d_C\u0001\"c7\u0002\"\u0002\u0007aR\u0017\u0005\t\u001b[\f\t\u000b1\u0001\u000exV\u0011ar\u0016\u000b\u0005\u000b7t\u0019\r\u0003\u0006\u0007B\u0005\u0015\u0016\u0011!a\u0001\u001d_CC!a*\u00076Q!Q1\u001cHe\u0011!9)'!+A\u00029-\u0007CBC8\r\u001fsy\u000b\u0006\u0003\u000f4:=\u0007\u0002\u0003FJ\u0003W\u0003\r!d>\u0015\t\u0015mg2\u001b\u0005\t\u00173\u000bi\u000b1\u0001\u000f4\nI\u0011iZ4sK\u001e\fG/Z\u000b\u0005\u001d3tyn\u0005\u0004\u00020\u00165d2\u001c\t\b\r7LhR\u001cHq!\u0011)9Id8\u0005\u0011\u0019\r\u0017q\u0016b\u0001\u000b\u001b\u0003bAb7\u00020:u\u0007CBC8\u0017cri\u000e\u0005\u0006\u0006p!McR\\CC\u001d;\u0004\"\"b\u001c\tT9ugR\u001cHo))q\tOd;\u000fn:=h\u0012\u001f\u0005\t\u0015\u0003\tY\f1\u0001\u000fd\"A!\u0012CA^\u0001\u0004q)\u000f\u0003\u0005\u000b\u0018\u0005m\u0006\u0019\u0001Ht\u0011!ii/a/A\u00025]XC\u0001Ho)\u0011)YNd>\t\u0015\u0019\u0005\u0013qXA\u0001\u0002\u0004qi\u000e\u000b\u0003\u0002B\u001aUB\u0003BCn\u001d{D\u0001b\"\u001a\u0002D\u0002\u0007ar \t\u0007\u000b_2yI$8\u0015\t9\u0005x2\u0001\u0005\t\u0015'\u000b)\r1\u0001\u000exR!Q1\\H\u0004\u0011!YI*a2A\u00029\u0005(aA*v[V!qRBH\n'\u0019\tI-\"\u001c\u0010\u0010A9a1\\=\u0010\u0012=U\u0001\u0003BCD\u001f'!\u0001\"#6\u0002J\n\u0007\u0011r\u001b\t\u0007\r7\fIm$\u0005\u0011\r\u0015]$rUH\t)\u0019y)bd\u0007\u0010\u001e!A!2UAi\u0001\u0004y9\u0002\u0003\u0005\u000en\u0006E\u0007\u0019AG|+\ty\t\u0002\u0006\u0003\u0006\\>\r\u0002B\u0003D!\u0003+\f\t\u00111\u0001\u0010\u0012!\"\u0011q\u001bD\u001b)\u0011)Yn$\u000b\t\u0011\u001d\u0015\u0014\u0011\u001ca\u0001\u001fW\u0001b!b\u001c\u0007\u0010>EA\u0003BH\u000b\u001f_A\u0001Bc%\u0002\\\u0002\u0007Qr\u001f\u000b\u0005\u000b7|\u0019\u0004\u0003\u0005\f\u001a\u0006u\u0007\u0019AH\u000b\u0005\u001d\u0001&o\u001c3vGR,Ba$\u000f\u0010@M1\u0011q\\C7\u001fw\u0001rAb7z\u001f{y\t\u0005\u0005\u0003\u0006\b>}B\u0001CEk\u0003?\u0014\r!c6\u0011\r\u0019m\u0017q\\H\u001f!\u0019)9Hc*\u0010>Q1q\u0012IH$\u001f\u0013B\u0001Bc)\u0002h\u0002\u0007q2\t\u0005\t\u001b[\f9\u000f1\u0001\u000exV\u0011qR\b\u000b\u0005\u000b7|y\u0005\u0003\u0006\u0007B\u0005-\u0018\u0011!a\u0001\u001f{AC!!<\u00076Q!Q1\\H+\u0011!9)'a<A\u0002=]\u0003CBC8\r\u001f{i\u0004\u0006\u0003\u0010B=m\u0003\u0002\u0003FJ\u0003c\u0004\r!d>\u0015\t\u0015mwr\f\u0005\t\u00173\u000b\u0019\u00101\u0001\u0010B\t\u0019Q*\u001b8\u0016\t=\u0015tRN\n\u0007\u0003k,igd\u001a\u0011\u000f\u0019m\u0017p$\u001b\u0010pA1Qq\u000eDH\u001fW\u0002B!b\"\u0010n\u0011A\u0011R[A{\u0005\u0004I9\u000e\u0005\u0004\u0007\\\u0006Ux2\u000e\t\u0007\u000boR)md\u001b\u0015\r==tROH<\u0011!Q\t-!@A\u0002=E\u0004\u0002CGw\u0003{\u0004\r!d>\u0016\u0005=%D\u0003BCn\u001f{B!B\"\u0011\u0003\u0002\u0005\u0005\t\u0019AH5Q\u0011\u0011\u0019A\"\u000e\u0015\t\u0015mw2\u0011\u0005\t\u000fK\u0012)\u00011\u0001\u0010\u0006B1Qq\u000eDH\u001fS\"Bad\u001c\u0010\n\"A!2\u0013B\u0004\u0001\u0004i9\u0010\u0006\u0003\u0006\\>5\u0005\u0002CFM\u0005\u0013\u0001\rad\u001c\u0003\u00075\u000b\u00070\u0006\u0003\u0010\u0014>m5C\u0002B\u0007\u000b[z)\nE\u0004\u0007\\f|9j$(\u0011\r\u0015=dqRHM!\u0011)9id'\u0005\u0011%U'Q\u0002b\u0001\u0013/\u0004bAb7\u0003\u000e=e\u0005CBC<\u0015\u000b|I\n\u0006\u0004\u0010\u001e>\rvR\u0015\u0005\t\u0015\u0003\u0014)\u00021\u0001\u0010 \"AQR\u001eB\u000b\u0001\u0004i90\u0006\u0002\u0010\u0018R!Q1\\HV\u0011)1\tE!\u0007\u0002\u0002\u0003\u0007qr\u0013\u0015\u0005\u000571)\u0004\u0006\u0003\u0006\\>E\u0006\u0002CD3\u0005;\u0001\rad-\u0011\r\u0015=dqRHL)\u0011yijd.\t\u0011)M%q\u0004a\u0001\u001bo$B!b7\u0010<\"A1\u0012\u0014B\u0011\u0001\u0004yiJA\u0002NCB,ba$1\u0010J>57C\u0002B\u0013\u000b[z\u0019\r\u0005\u0005\u0007\\\u0006MsRYHh!!)yLb/\u0010H>-\u0007\u0003BCD\u001f\u0013$\u0001Bb1\u0003&\t\u0007QQ\u0012\t\u0005\u000b\u000f{i\r\u0002\u0005\u0007J\n\u0015\"\u0019ACG!!1YN!\n\u0010H>-\u0007\u0003CC8\u000f{*)id2\u0011\u0011\u0015}62KHd\u001f\u0017$\u0002bd4\u0010X>ew2\u001c\u0005\t\u0011K\u0011y\u00031\u0001\u0010R\"A1R\u000eB\u0018\u0001\u0004y\u0019\u000e\u0003\u0005\u000en\n=\u0002\u0019AG|+\ty)\r\u0006\u0003\u0006\\>\u0005\bB\u0003D!\u0005g\t\t\u00111\u0001\u0010F\"\"!Q\u0007D\u001b)\u0011)Ynd:\t\u0011=%(q\u0007a\u0001\u001fW\fA\u0001\u001d:fmB1Qq\u000eDH\u001f\u000b$Bad4\u0010p\"A!2\u0013B\u001d\u0001\u0004i9\u0010\u0006\u0003\u0006\\>M\b\u0002CFM\u0005w\u0001\rad4\u0003\u000f\r{G\u000e\\3diV1q\u0012 I\u0001!\u000b\u0019bA!\u0010\u0006n=m\b\u0003\u0003Dn\u0003'zi\u0010e\u0002\u0011\u0011\u0015}f1XH\u0000!\u0007\u0001B!b\"\u0011\u0002\u0011Aa1\u0019B\u001f\u0005\u0004)i\t\u0005\u0003\u0006\bB\u0015A\u0001\u0003De\u0005{\u0011\r!\"$\u0011\u0011\u0019m'QHH\u0000!\u0007\u0001\u0002\"b\u001c\f&\u0015\u0015ur`\u0001\u0004a\n4\u0007\u0003CC`\u0017'zy\u0010e\u0001\u0015\u0011A\u001d\u0001\u0013\u0003I\n!+A\u0001b#\t\u0003H\u0001\u0007\u0001\u0013\u0002\u0005\t!\u0017\u00119\u00051\u0001\u0011\u000e!AQR\u001eB$\u0001\u0004i90\u0006\u0002\u0010~R!Q1\u001cI\u000e\u0011)1\tEa\u0013\u0002\u0002\u0003\u0007qR \u0015\u0005\u0005\u001b2)\u0004\u0006\u0003\u0006\\B\u0005\u0002\u0002CHu\u0005\u001f\u0002\r\u0001e\t\u0011\r\u0015=dqRH\u007f)\u0011\u0001:\u0001e\n\t\u0011)M%\u0011\u000ba\u0001\u001bo$B!b7\u0011,!A1\u0012\u0014B*\u0001\u0004\u0001:AA\u0004GY\u0006$X*\u00199\u0016\rAE\u0002\u0013\bI\u001f'\u0019\u0011)&\"\u001c\u00114AAa1\\A*!k\u0001z\u0004\u0005\u0005\u0006@\u001am\u0006s\u0007I\u001e!\u0011)9\t%\u000f\u0005\u0011\u0019\r'Q\u000bb\u0001\u000b\u001b\u0003B!b\"\u0011>\u0011Aa\u0011\u001aB+\u0005\u0004)i\t\u0005\u0005\u0007\\\nU\u0003s\u0007I\u001e!!)yg\" \u0006\u0006B\r\u0003CBC<\u000b{\u0002:\u0004\u0005\u0005\u0006@.M\u0003s\u0007I\u001e)!\u0001z\u0004%\u0013\u0011LA5\u0003\u0002\u0003E\u0013\u0005?\u0002\r\u0001%\u0011\t\u0011A-!q\fa\u0001!\u000bB\u0001\"$<\u0003`\u0001\u0007Qr_\u000b\u0003!k!B!b7\u0011T!Qa\u0011\tB2\u0003\u0003\u0005\r\u0001%\u000e)\t\t\u0015dQ\u0007\u000b\u0005\u000b7\u0004J\u0006\u0003\u0005\u0010j\n\u001d\u0004\u0019\u0001I.!\u0019)yGb$\u00116Q!\u0001s\bI0\u0011!Q\u0019J!\u001bA\u00025]H\u0003BCn!GB\u0001b#'\u0003l\u0001\u0007\u0001s\b\u0002\u0007\r>\u0014\u0018\r\u001c7\u0014\r\t5TQ\u000eI5!\u001d1Y.\u001fD=!W\u0002BAb7\u0003nQ1\u00013\u000eI8!cB\u0001b# \u0003v\u0001\u0007!R\u0013\u0005\t\u001b[\u0014)\b1\u0001\u000exR!Q1\u001cI;\u0011)1\tE!\u001f\u0002\u0002\u0003\u0007a\u0011\u0010\u0015\u0005\u0005w2)\u0004\u0006\u0003\u0006\\Bm\u0004\u0002CHu\u0005{\u0002\r\u0001% \u0011\r\u0015=dq\u0012D=)\u0011\u0001Z\u0007%!\t\u0011)M%q\u0010a\u0001\u001bo$B!b7\u0011\u0006\"A1\u0012\u0014BA\u0001\u0004\u0001ZG\u0001\u0004Fq&\u001cHo]\n\u0007\u0005\u0007+i\u0007e#\u0011\u000f\u0019m\u0017P\"\u001f\u0011\u000eB!a1\u001cBB)\u0019\u0001j\t%%\u0011\u0014\"A1R\u0010BF\u0001\u0004Q)\n\u0003\u0005\u000en\n-\u0005\u0019AG|)\u0011)Y\u000ee&\t\u0015\u0019\u0005#qRA\u0001\u0002\u00041I\b\u000b\u0003\u0003\u0012\u001aUB\u0003BCn!;C\u0001b$;\u0003\u0014\u0002\u0007\u0001S\u0010\u000b\u0005!\u001b\u0003\n\u000b\u0003\u0005\u000b\u0014\nU\u0005\u0019AG|)\u0011)Y\u000e%*\t\u0011-e%q\u0013a\u0001!\u001b\u0013AAR5oIV!\u00013\u0016IZ'\u0019\u0011I*\"\u001c\u0011.B9a1\\=\u00110BU\u0006CBC8\r\u001f\u0003\n\f\u0005\u0003\u0006\bBMF\u0001CEk\u00053\u0013\r!c6\u0011\r\u0019m'\u0011\u0014IY)\u0019\u0001*\f%/\u0011<\"A1R\u0010BQ\u0001\u0004Q)\n\u0003\u0005\u000en\n\u0005\u0006\u0019AG|+\t\u0001z\u000b\u0006\u0003\u0006\\B\u0005\u0007B\u0003D!\u0005K\u000b\t\u00111\u0001\u00110\"\"!q\u0015D\u001b)\u0011)Y\u000ee2\t\u0011=%(\u0011\u0016a\u0001!\u0013\u0004b!b\u001c\u0007\u0010B=F\u0003\u0002I[!\u001bD\u0001Bc%\u0003,\u0002\u0007Qr\u001f\u000b\u0005\u000b7\u0004\n\u000e\u0003\u0005\f\u001a\n5\u0006\u0019\u0001I[\u0005\u00191\u0015\u000e\u001c;feV1\u0001s\u001bIp!G\u001cbAa,\u0006nAe\u0007\u0003\u0003Dn\u0003'\u0002Z\u000e%;\u0011\u0011\u0015}f1\u0018Io!C\u0004B!b\"\u0011`\u0012A\u0011R\u001bBX\u0005\u0004I9\u000e\u0005\u0003\u0006\bB\rH\u0001\u0003Is\u0005_\u0013\r\u0001e:\u0003\tQC\u0017n]\t\u0005\u000bk+)\n\u0005\u0005\u0007\\\n=\u0006S\u001cIq!!)ylc\u0015\u0011^B\u0005H\u0003\u0003Iu!_\u0004\n\u0010e=\t\u0011-u$\u0011\u0018a\u0001\u0015+C\u0001b#\u001c\u0003:\u0002\u0007\u00013\u001e\u0005\t\u001b[\u0014I\f1\u0001\u000exV\u0011\u00013\u001c\u000b\u0005\u000b7\u0004J\u0010\u0003\u0006\u0007B\tu\u0016\u0011!a\u0001!7DCAa0\u00076Q!Q1\u001cI\u0000\u0011!yIO!1A\u0002E\u0005\u0001CBC8\r\u001f\u0003Z\u000e\u0006\u0003\u0011jF\u0015\u0001\u0002\u0003FJ\u0005\u0007\u0004\r!d>\u0015\t\u0015m\u0017\u0013\u0002\u0005\t\u00173\u0013)\r1\u0001\u0011j\nIa)\u001b7uKJtu\u000e^\u000b\u0007#\u001f\t:\"e\u0007\u0014\r\t\u001dWQNI\t!!1Y.a\u0015\u0012\u0014Eu\u0001\u0003CC`\rw\u000b*\"%\u0007\u0011\t\u0015\u001d\u0015s\u0003\u0003\t\u0013+\u00149M1\u0001\nXB!QqQI\u000e\t!\u0001*Oa2C\u0002A\u001d\b\u0003\u0003Dn\u0005\u000f\f*\"%\u0007\u0011\u0011\u0015}62KI\u000b#3!\u0002\"%\b\u0012$E\u0015\u0012s\u0005\u0005\t\u0017{\u0012\t\u000e1\u0001\u000b\u0016\"A1R\u000eBi\u0001\u0004\tz\u0002\u0003\u0005\u000en\nE\u0007\u0019AG|+\t\t\u001a\u0002\u0006\u0003\u0006\\F5\u0002B\u0003D!\u0005+\f\t\u00111\u0001\u0012\u0014!\"!q\u001bD\u001b)\u0011)Y.e\r\t\u0011=%(\u0011\u001ca\u0001#k\u0001b!b\u001c\u0007\u0010FMA\u0003BI\u000f#sA\u0001Bc%\u0003\\\u0002\u0007Qr\u001f\u000b\u0005\u000b7\fj\u0004\u0003\u0005\f\u001a\nu\u0007\u0019AI\u000f\u0005\u0011\u0019u\u000e]=\u0016\rE\r\u00133JI('\u0019\u0011y.\"\u001c\u0012FAAa1\\A*#\u000f\n\n\u0006\u0005\u0005\u0006@\u001am\u0016\u0013JI'!\u0011)9)e\u0013\u0005\u0011%U'q\u001cb\u0001\u0013/\u0004B!b\"\u0012P\u0011Aa\u0011\u001aBp\u0005\u0004)i\t\u0005\u0005\u0007\\\n}\u0017\u0013JI'\u0003!\u0019g-Y2u_JL\b\u0003CC`\u0017'\nJ%%\u0014\u0015\rEE\u0013\u0013LI.\u0011!\t\u001aFa:A\u0002EU\u0003\u0002CGw\u0005O\u0004\r!d>\u0016\u0005E\u001dC\u0003BCn#CB!B\"\u0011\u0003l\u0006\u0005\t\u0019AI$Q\u0011\u0011iO\"\u000e\u0015\t\u0015m\u0017s\r\u0005\t\u001fS\u0014y\u000f1\u0001\u0012jA1Qq\u000eDH#\u000f\"B!%\u0015\u0012n!A!2\u0013By\u0001\u0004i9\u0010\u0006\u0003\u0006\\FE\u0004\u0002CFM\u0005g\u0004\r!%\u0015\u0003\u0013A\u000b'\u000f^5uS>tWCBI<#\u0003\u000b*i\u0005\u0004\u0003v\u00165\u0014\u0013\u0010\t\t\r7\f\u0019&e\u001f\u0012\bBAQqNFR#{\nj\b\u0005\u0005\u0006@\u001am\u0016sPIB!\u0011)9)%!\u0005\u0011%U'Q\u001fb\u0001\u0013/\u0004B!b\"\u0012\u0006\u0012A\u0001S\u001dB{\u0005\u0004\u0001:\u000f\u0005\u0005\u0007\\\nU\u0018sPIB\u0003\u001d\u0019'M\u001a+sk\u0016\u0004\u0002\"b0\fTE}\u00143Q\u0001\tG\n4g)\u00197tKRQ\u0011sQII#'\u000b**e&\t\u0011-u4\u0011\u0001a\u0001\u0015+C\u0001\"%#\u0004\u0002\u0001\u0007\u00113\u0012\u0005\t#\u001b\u001b\t\u00011\u0001\u0012\f\"AQR^B\u0001\u0001\u0004i90\u0006\u0002\u0012|Q!Q1\\IO\u0011)1\te!\u0002\u0002\u0002\u0003\u0007\u00113\u0010\u0015\u0005\u0007\u000f1)\u0004\u0006\u0003\u0006\\F\r\u0006\u0002CHu\u0007\u0013\u0001\r!%*\u0011\r\u0015=dqRI>)\u0011\t:)%+\t\u0011)M51\u0002a\u0001\u001bo$B!b7\u0012.\"A1\u0012TB\u0007\u0001\u0004\t:IA\u0004He>,\bOQ=\u0016\rEM\u0016sXIb'\u0019\u0019y!\"\u001c\u00126BAa1\\A*#o\u000b*\r\u0005\u0005\f2Fe\u0016SXIa\u0013\u0011\tZlc-\u0003\u001f!\u000b7\u000f['ba\u000e{WNY5oKJ\u0004B!b\"\u0012@\u0012A1rXB\b\u0005\u0004)i\t\u0005\u0003\u0006\bF\rG\u0001CEk\u0007\u001f\u0011\r!c6\u0011\u0011\u0019m7qBI_#\u0003\u0004\u0002\"b\u001c\b~E\u0005\u0017SX\u0001\u0004[\u000e4\u0007CBC8\u0017c\n:\f\u0006\u0005\u0012FF=\u0017\u0013[Ij\u0011!A)c!\u0007A\u0002E\u001d\u0007\u0002CIe\u00073\u0001\r!e3\t\u0011558\u0011\u0004a\u0001\u001bo,\"!e6\u0011\tEe\u00173\\\u0007\u0003\u0007\u001fIA!%8\u0007f\n1!+Z:vYR$B!b7\u0012b\"Qa\u0011IB\u000f\u0003\u0003\u0005\r!e6)\t\r}aQ\u0007\u000b\u0005\u000b7\f:\u000f\u0003\u0005\u0010j\u000e\u0005\u0002\u0019AIu!\u0019)yGb$\u0012XR!\u0011SYIw\u0011!Q\u0019ja\tA\u00025]H\u0003BCn#cD\u0001b#'\u0004&\u0001\u0007\u0011S\u0019\u0002\u0005)\u0006\\W-\u0006\u0004\u0012xF}(3A\n\u0007\u0007O)i'%?\u0011\u0011\u0019m\u00171KI~%\u000b\u0001\u0002\"b0\u0007<Fu(\u0013\u0001\t\u0005\u000b\u000f\u000bz\u0010\u0002\u0005\nV\u000e\u001d\"\u0019AEl!\u0011)9Ie\u0001\u0005\u0011A\u00158q\u0005b\u0001!O\u0004\u0002Bb7\u0004(Eu(\u0013\u0001\t\t\u000b\u007f[\u0019&%@\u0013\u0002QA!S\u0001J\u0006%\u001b\u0011z\u0001\u0003\u0005\fL\u000eE\u0002\u0019ACs\u0011!Yig!\rA\u0002I\u001d\u0001\u0002CGw\u0007c\u0001\r!d>\u0016\u0005EmH\u0003BCn%+A!B\"\u0011\u00046\u0005\u0005\t\u0019AI~Q\u0011\u00199D\"\u000e\u0015\t\u0015m'3\u0004\u0005\t\u001fS\u001cI\u00041\u0001\u0013\u001eA1Qq\u000eDH#w$B!b$\u0013\"!A!2SB\u001e\u0001\u0004i90\u0006\u0002\u0013&A1Q\u0012IG\u007f%O\u0001rAb7z#w\u0014*\u0001\u0006\u0003\u0006\\J-\u0002\u0002CFM\u0007\u007f\u0001\rA%\u0002\u0003\t\u0011\u0013x\u000e]\u000b\u0007%c\u0011JD%\u0010\u0014\r\r\rSQ\u000eJ\u001a!!1Y.a\u0015\u00136I}\u0002\u0003CC`\rw\u0013:De\u000f\u0011\t\u0015\u001d%\u0013\b\u0003\t\u0013+\u001c\u0019E1\u0001\nXB!Qq\u0011J\u001f\t!\u0001*oa\u0011C\u0002A\u001d\b\u0003\u0003Dn\u0007\u0007\u0012:De\u000f\u0011\u0011\u0015}62\u000bJ\u001c%w!\u0002Be\u0010\u0013FI\u001d#\u0013\n\u0005\t\u0017\u0017\u001ci\u00051\u0001\u0006f\"A1RNB'\u0001\u0004\u0011\n\u0005\u0003\u0005\u000en\u000e5\u0003\u0019AG|+\t\u0011*\u0004\u0006\u0003\u0006\\J=\u0003B\u0003D!\u0007#\n\t\u00111\u0001\u00136!\"11\u000bD\u001b)\u0011)YN%\u0016\t\u0011=%8Q\u000ba\u0001%/\u0002b!b\u001c\u0007\u0010JUB\u0003BCH%7B\u0001Bc%\u0004X\u0001\u0007Qr_\u000b\u0003%?\u0002b!$\u0011\u000e~J\u0005\u0004c\u0002DnsJU\"s\b\u000b\u0005\u000b7\u0014*\u0007\u0003\u0005\f\u001a\u000em\u0003\u0019\u0001J \u0005\u0015\u0019F.[2f+\u0019\u0011ZGe\u001d\u0013xM11qLC7%[\u0002\u0002Bb7\u0002TI=$\u0013\u0010\t\t\u000b\u007f3YL%\u001d\u0013vA!Qq\u0011J:\t!I)na\u0018C\u0002%]\u0007\u0003BCD%o\"\u0001\u0002%:\u0004`\t\u0007\u0001s\u001d\t\t\r7\u001cyF%\u001d\u0013vAAQqXF*%c\u0012*\b\u0006\u0006\u0013zI}$\u0013\u0011JB%\u000bC\u0001b#=\u0004l\u0001\u0007QQ\u001d\u0005\t\u0017k\u001cY\u00071\u0001\u0006f\"A1RNB6\u0001\u0004\u0011Z\b\u0003\u0005\u000en\u000e-\u0004\u0019AG|+\t\u0011z\u0007\u0006\u0003\u0006\\J-\u0005B\u0003D!\u0007_\n\t\u00111\u0001\u0013p!\"1\u0011\u000fD\u001b)\u0011)YN%%\t\u0011=%81\u000fa\u0001%'\u0003b!b\u001c\u0007\u0010J=D\u0003BCH%/C\u0001Bc%\u0004v\u0001\u0007Qr_\u000b\u0003%7\u0003b!$\u0011\u000e~Ju\u0005c\u0002DnsJ=$\u0013\u0010\u000b\u0005\u000b7\u0014\n\u000b\u0003\u0005\f\u001a\u000ee\u0004\u0019\u0001J=\u0005\u001d\u0019\u0006\u000f\\5u\u0003R,bAe*\u00132JU6CBB?\u000b[\u0012J\u000b\u0005\u0005\u0007\\\u0006M#3\u0016J\\!!)ygc)\u0013.J5\u0006\u0003CC`\rw\u0013zKe-\u0011\t\u0015\u001d%\u0013\u0017\u0003\t\u0013+\u001ciH1\u0001\nXB!Qq\u0011J[\t!\u0001*o! C\u0002A\u001d\b\u0003\u0003Dn\u0007{\u0012zKe-\u0002\u0005\u0005$\u0018!C2cM\n+gm\u001c:f!!)ylc\u0015\u00130JM\u0016\u0001C2cM\u00063G/\u001a:\u0015\u0015I]&3\u0019Jc%\u000f\u0014J\r\u0003\u0005\u0013:\u000e%\u0005\u0019ACs\u0011!\u0011Zl!#A\u0002Iu\u0006\u0002\u0003J`\u0007\u0013\u0003\rA%0\t\u0011558\u0011\u0012a\u0001\u001bo,\"Ae+\u0015\t\u0015m's\u001a\u0005\u000b\r\u0003\u001ai)!AA\u0002I-\u0006\u0006BBH\rk!B!b7\u0013V\"Aq\u0012^BI\u0001\u0004\u0011:\u000e\u0005\u0004\u0006p\u0019=%3\u0016\u000b\u0005\u000b\u001f\u0013Z\u000e\u0003\u0005\u000b\u0014\u000eM\u0005\u0019AG|+\t\u0011z\u000e\u0005\u0004\u000eB5u(\u0013\u001d\t\b\r7L(3\u0016J\\)\u0011)YN%:\t\u0011-e5q\u0013a\u0001%o\u0013\u0011\u0002V1lK^C\u0017\u000e\\3\u0016\rI-(S\u001fJ}'\u0019\u0019Y*\"\u001c\u0013nBAa1\\A*%_\u0014Z\u0010\u0005\u0005\u0006p-\r&\u0013\u001fD=!!)yLb/\u0013tJ]\b\u0003BCD%k$\u0001\"#6\u0004\u001c\n\u0007\u0011r\u001b\t\u0005\u000b\u000f\u0013J\u0010\u0002\u0005\u0011f\u000em%\u0019\u0001It!!1Yna'\u0013tJ]\u0018a\u00019pgBAQqXF*%g\u0014:\u0010\u0006\u0006\u0013|N\r1SAJ\u0004'\u0013A\u0001B%@\u0004(\u0002\u0007QQ\u001d\u0005\t\u0017{\u001a9\u000b1\u0001\u000b\u0016\"A1RNBT\u0001\u0004\u0011z\u0010\u0003\u0005\u000en\u000e\u001d\u0006\u0019AG|+\t\u0011z\u000f\u0006\u0003\u0006\\N=\u0001B\u0003D!\u0007W\u000b\t\u00111\u0001\u0013p\"\"1Q\u0016D\u001b)\u0011)Yn%\u0006\t\u0011=%8q\u0016a\u0001'/\u0001b!b\u001c\u0007\u0010J=H\u0003BCH'7A\u0001Bc%\u00042\u0002\u0007Qr_\u000b\u0003'?\u0001b!$\u0011\u000e~N\u0005\u0002c\u0002DnsJ=(3 \u000b\u0005\u000b7\u001c*\u0003\u0003\u0005\f\u001a\u000eU\u0006\u0019\u0001J~\u0005\u0011\u0019\u0006/\u00198\u0016\rM-2SGJ\u001d'\u0019\u0019I,\"\u001c\u0014.AAa1\\A*'_\u0019Z\u0004\u0005\u0005\u0006p-\r6\u0013GJ\u0019!!)yLb/\u00144M]\u0002\u0003BCD'k!\u0001\"#6\u0004:\n\u0007\u0011r\u001b\t\u0005\u000b\u000f\u001bJ\u0004\u0002\u0005\u0011f\u000ee&\u0019\u0001It!!1Yn!/\u00144M]\u0002\u0003CC`\u0017'\u001a\u001ade\u000e\u0015\u0019Mm2\u0013IJ\"'\u000b\u001a:e%\u0013\t\u0011Iu8q\u0019a\u0001\u000bKD\u0001b# \u0004H\u0002\u0007!R\u0013\u0005\t%w\u001b9\r1\u0001\u0014>!A!sXBd\u0001\u0004\u0019j\u0004\u0003\u0005\u000en\u000e\u001d\u0007\u0019AG|+\t\u0019z\u0003\u0006\u0003\u0006\\N=\u0003B\u0003D!\u0007\u0017\f\t\u00111\u0001\u00140!\"1Q\u001aD\u001b)\u0011)Yn%\u0016\t\u0011=%8q\u001aa\u0001'/\u0002b!b\u001c\u0007\u0010N=B\u0003BCH'7B\u0001Bc%\u0004R\u0002\u0007Qr_\u000b\u0003'?\u0002b!$\u0011\u000e~N\u0005\u0004c\u0002DnsN=23\b\u000b\u0005\u000b7\u001c*\u0007\u0003\u0005\f\u001a\u000eU\u0007\u0019AJ\u001e\u0005\rQ\u0016\u000e]\u000b\t'W\u001a*h%\u001f\u0014~M11\u0011\\C7'[\u0002\u0002Bb7\u0002TM=4s\u0010\t\t\u000b\u007f3Yl%\u001d\u0014|AAQqNFR'g\u001a:\b\u0005\u0003\u0006\bNUD\u0001CEk\u00073\u0014\r!c6\u0011\t\u0015\u001d5\u0013\u0010\u0003\t\r\u0007\u001cIN1\u0001\u0006\u000eB!QqQJ?\t!1Im!7C\u0002\u00155\u0005C\u0003Dn\u00073\u001c\u001ahe\u001e\u0014|AAQqXF*'c\u001aZ(\u0001\u0004pi\"\u0004\u0018\u000e^\u000b\u0003'\u000f\u0003b!b0\u0014\nN]\u0014\u0002BJF\u000b7\u00121bU3r'Bd\u0017\u000e\u001e;fe\u00069q\u000e\u001e5qSR\u0004C\u0003CJ@'#\u001b\u001aj%&\t\u0011A-1Q\u001da\u0001'\u0003C\u0001\"$<\u0004f\u0002\u0007Qr\u001f\u0005\t'\u0007\u001b)\u000f1\u0001\u0014\bV\u00111\u0013\u0014\t\u0005'7\u000bZ.\u0004\u0002\u0004ZR!Q1\\JP\u0011)1\te!;\u0002\u0002\u0003\u00071\u0013\u0014\u0015\u0005\u0007W4)\u0004\u0006\u0003\u0006\\N\u0015\u0006\u0002CHu\u0007[\u0004\rae*\u0011\r\u0015=dqRJM)\u0011)yie+\t\u0011)M5q\u001ea\u0001\u001bo,\"ae,\u0011\r5\u0005SR`J@)\u0011)Yne-\t\u0011-e51\u001fa\u0001'\u007f\u0012aAW5q\u00032dW\u0003CJ]'\u0007\u001c:me3\u0014\r\r]XQNJ^!!1Y.a\u0015\u0014>N5\u0007\u0003CC`\rw\u001bzl%3\u0011\u0011\u0015=42UJa'\u000b\u0004B!b\"\u0014D\u0012A\u0011R[B|\u0005\u0004I9\u000e\u0005\u0003\u0006\bN\u001dG\u0001\u0003Db\u0007o\u0014\r!\"$\u0011\t\u0015\u001d53\u001a\u0003\t\r\u0013\u001c9P1\u0001\u0006\u000eBQa1\\B|'\u0003\u001c*m%3\u0002\u0011QD\u0017n]3mK6\f\u0001\u0002\u001e5bi\u0016dW-\u001c\t\t\u000b\u007f[\u0019fe0\u0014JV\u00111s\u001b\t\u0007\u000b\u007f\u001bJi%2\u0015\u001dM573\\Jo'?\u001c\noe9\u0014f\"AAR\u0010C\u0005\u0001\u0004))\u000f\u0003\u0005\u0014P\u0012%\u0001\u0019AJa\u0011!\u0019\n\u000e\"\u0003A\u0002M\u0015\u0007\u0002\u0003I\u0006\t\u0013\u0001\rae5\t\u001155H\u0011\u0002a\u0001\u001boD\u0001be!\u0005\n\u0001\u00071s[\u000b\u0003'S\u0004Bae;\u0012\\6\u00111q\u001f\u000b\u0005\u000b7\u001cz\u000f\u0003\u0006\u0007B\u00115\u0011\u0011!a\u0001'SDC\u0001b\u0004\u00076Q!Q1\\J{\u0011!yI\u000f\"\u0005A\u0002M]\bCBC8\r\u001f\u001bJ\u000f\u0006\u0003\u0006\u0010Nm\b\u0002\u0003FJ\t'\u0001\r!d>\u0016\u0005M}\bCBG!\u001b{$\n\u0001E\u0004\u0007\\f\u001cjl%4\u0015\t\u0015mGS\u0001\u0005\t\u00173#9\u00021\u0001\u0014N\nY1i\u001c9z)>\f%O]1z+\u0019!Z\u0001f\u0005\u0015\u0018M1A1DC7)\u001b\u0001rAb7z\u000b7$z\u0001\u0005\u0005\u0007\\\u0012mA\u0013\u0003K\u000b!\u0011)9\tf\u0005\u0005\u0011%UG1\u0004b\u0001\u0013/\u0004B!b\"\u0015\u0018\u0011A\u0001S\u001dC\u000e\u0005\u0004\u0001:/A\u0003beJ\f\u0017\u0010\u0005\u0004\u0006p1]C\u0013\u0003\u000b\u000b)\u001f!z\u0002&\t\u0015$Q\u0015\u0002\u0002CFy\tO\u0001\r!\":\t\u00111uDq\u0005a\u0001\u000bKD\u0001\u0002&\u0007\u0005(\u0001\u0007A3\u0004\u0005\t\u001b[$9\u00031\u0001\u000exR!Q1\u001cK\u0015\u0011)1\t\u0005b\u000b\u0002\u0002\u0003\u0007Q1\u001c\u0015\u0005\t[1)\u0004\u0006\u0003\u0006\\R=\u0002\u0002CHu\t_\u0001\rAd\u0014\u0015\t\u0015=E3\u0007\u0005\t\u0015'#\t\u00041\u0001\u000exV\u0011As\u0007\t\u0007\u001b\u0003ji\u0010&\u0004\u0003\u001fQ{\u0007+\u0019:D_2dWm\u0019;j_:,b\u0001&\u0010\u0015FQ%3C\u0002C\u001c\u000b[\"z\u0004\u0005\u0005\u0007\\\u0006MC\u0013\tK&!!)yLb/\u0015DQ\u001d\u0003\u0003BCD)\u000b\"\u0001\"#6\u00058\t\u0007\u0011r\u001b\t\u0005\u000b\u000f#J\u0005\u0002\u0005\u0007J\u0012]\"\u0019ACG!!1Y\u000eb\u000e\u0015DQ\u001d\u0003\u0003CC`\u0017'\"\u001a\u0005f\u0012\u0015\rQ-C\u0013\u000bK*\u0011!Yi\u0007b\u0010A\u0002Q5\u0003\u0002CGw\t\u007f\u0001\r!d>\u0016\u0005Q]\u0003\u0003\u0002K-#7l!\u0001b\u000e\u0015\t\u0015mGS\f\u0005\u000b\r\u0003\"\u0019%!AA\u0002Q]\u0003\u0006\u0002C#\rk!B!b7\u0015d!Aq\u0012\u001eC$\u0001\u0004!*\u0007\u0005\u0004\u0006p\u0019=E\u0013\t\u000b\u0005)\u0017\"J\u0007\u0003\u0005\u000b\u0014\u0012%\u0003\u0019AG|)\u0011)Y\u000e&\u001c\t\u0011-eE1\na\u0001)\u0017\u0012\u0001\u0002V8QCJl\u0015\r]\u000b\t)g\"j\b&!\u0015\u0006N1AQJC7)k\u0002\u0002Bb7\u0002TQ]Ds\u0011\t\t\u000b\u007f3Y\f&\u001f\u0015\u0004BAQqNFR)w\"z\b\u0005\u0003\u0006\bRuD\u0001CF`\t\u001b\u0012\r!\"$\u0011\t\u0015\u001dE\u0013\u0011\u0003\t\u001b/!iE1\u0001\u0006\u000eB!Qq\u0011KC\t!1I\r\"\u0014C\u0002\u00155\u0005C\u0003Dn\t\u001b\"Z\bf \u0015\u0004BAQqXF*)s\"\u001a\t\u0005\u0005\u0006p5%QQ\u0011K=)\u0019!z\tf%\u0015\u0016R!As\u0011KI\u0011!i)\u0001b\u0016A\u0004Q-\u0005\u0002CF7\t/\u0002\r\u0001&#\t\u001155Hq\u000ba\u0001\u001bo,\"\u0001&'\u0011\tQm\u00153\\\u0007\u0003\t\u001b\"B!b7\u0015 \"Qa\u0011\tC.\u0003\u0003\u0005\r\u0001&')\t\u0011ucQ\u0007\u000b\u0005\u000b7$*\u000b\u0003\u0005\u0010j\u0012}\u0003\u0019\u0001KT!\u0019)yGb$\u0015xQ!As\u0011KV\u0011!Q\u0019\n\"\u0019A\u00025]H\u0003BCn)_C\u0001b#'\u0005d\u0001\u0007As\u0011\u0002\u000f\u0007J,\u0017\r^3TG\u0006tGK]3f+\u0011!*Lf\u0007\u0014\r\u0011\u0015TQ\u000eK\\!!1Y.a\u0015\u0015:Zu\u0001C\u0002Dn\tO3JB\u0001\u0005TG\u0006tGK]3f+\u0011!z\f&4\u0014\t\u0011\u001dVQN\u0001\tE\u0016<\u0017N\\:Bi\u0006A\u0001/^:iI><h\u000e\u0006\u0003\u0006\\R\u001d\u0007\u0002\u0003Ke\tW\u0003\r\u0001f3\u0002\u0003Y\u0004B!b\"\u0015N\u0012A\u0011R\u001bCT\u0005\u0004I9.\u0001\u0005mK\u001a$Xn\\:u+\t!\u001a\u000e\u0005\u0004\u0007\\\u0012MH3\u001a\u0002\t'\u000e\fg\u000eT3bMV!A\u0013\u001cKp')!\u00190\"\u001c\u0015\\R\u0005HS\u001d\t\u0007\r7$9\u000b&8\u0011\t\u0015\u001dEs\u001c\u0003\t\u0013+$\u0019P1\u0001\nXB!Qq\u000eKr\u0013\u0011y)$b\u0019\u0011\tQ\u001dHS\u001e\b\u0005)S,IH\u0004\u0003\u0006vR-\u0018BAC3\u0013\u0011!z/\"!\u0003\u0019M+'/[1mSj\f'\r\\3\u0016\u0005QM\bCBC`\rC#j.\u0006\u0002\u0015xBQQq\u000eE*);$j\u000e&8\u0002\u0007=\u0004\b%A\u0003ge>l\u0007%\u0001\u0003mK:\u0004SCAK\u0001!\u0019)yGb$\u0016\u0004A1a1\u001cCz);\f\u0001\u0002\u001d:fm~#S-\u001d\u000b\u0005\u000b7,J\u0001\u0003\u0006\u0007B\u0015\u001d\u0011\u0011!a\u0001+\u0003\tQ\u0001\u001d:fm\u0002\n1!Y2d+\t!j.A\u0004bG\u000e|F%Z9\u0015\t\u0015mWS\u0003\u0005\u000b\r\u0003*i!!AA\u0002Qu\u0017\u0001B1dG\u0002\"b\"f\u0001\u0016\u001cUuQsDK\u0011+G)*\u0003\u0003\u0005\u000en\u0016E\u0001\u0019\u0001Kz\u0011!IY.\"\u0005A\u0002Q]\b\u0002CFy\u000b#\u0001\r!\":\t\u00111uT\u0011\u0003a\u0001\u000bKD\u0001b$;\u0006\u0012\u0001\u0007Q\u0013\u0001\u0005\t+\u001b)\t\u00021\u0001\u0015^R!Q1\\K\u0015\u0011!!J-\"\u0006A\u0002QuWCAK\u0002\u0003%\u0011\u0018n\u001a5u[>\u001cH/A\u0003qe&tG\u000f\u0006\u0003\u0006\\VM\u0002BCK\u001b\u000b7\u0001\n\u00111\u0001\u0006f\u0006)A-\u001a9uQ\u0006!1m\u001c9z+\u0011)Z$&\u0011\u0015\u001dUuR3IK$+\u0017*j%f\u0014\u0016TA1a1\u001cCz+\u007f\u0001B!b\"\u0016B\u0011A\u0011R[C\u000f\u0005\u0004I9\u000e\u0003\u0006\u000en\u0016u\u0001\u0013!a\u0001+\u000b\u0002b!b0\u0007\"V}\u0002BCEn\u000b;\u0001\n\u00111\u0001\u0016JAQQq\u000eE*+\u007f)z$f\u0010\t\u0015-EXQ\u0004I\u0001\u0002\u0004))\u000f\u0003\u0006\r~\u0015u\u0001\u0013!a\u0001\u000bKD!b$;\u0006\u001eA\u0005\t\u0019AK)!\u0019)yGb$\u0016>!QQSBC\u000f!\u0003\u0005\r!f\u0010\u0002\u001d\r|\u0007/\u001f\u0013eK\u001a\fW\u000f\u001c;%cU!Q\u0013LK/+\t)ZF\u000b\u0003\u0015t\u0016mE\u0001CEk\u000b?\u0011\r!c6\u0002\u001d\r|\u0007/\u001f\u0013eK\u001a\fW\u000f\u001c;%eU!Q3MK4+\t)*G\u000b\u0003\u0015x\u0016mE\u0001CEk\u000bC\u0011\r!c6\u0002\u001d\r|\u0007/\u001f\u0013eK\u001a\fW\u000f\u001c;%gU!QSNK9+\t)zG\u000b\u0003\u0006f\u0016mE\u0001CEk\u000bG\u0011\r!c6\u0002\u001d\r|\u0007/\u001f\u0013eK\u001a\fW\u000f\u001c;%iU!QSNK<\t!I).\"\nC\u0002%]\u0017AD2paf$C-\u001a4bk2$H%N\u000b\u0005+{*\n)\u0006\u0002\u0016\u0000)\"Q\u0013ACN\t!I).b\nC\u0002%]\u0017AD2paf$C-\u001a4bk2$HEN\u000b\u0005+\u000f+Z)\u0006\u0002\u0016\n*\"AS\\CN\t!I).\"\u000bC\u0002%]\u0017!\u00049s_\u0012,8\r\u001e)sK\u001aL\u00070\u0006\u0002\u000f\u0004\u0005a\u0001O]8ek\u000e$\u0018I]5us\u0006q\u0001O]8ek\u000e$X\t\\3nK:$H\u0003BCK+/C!B\"\u0011\u00060\u0005\u0005\t\u0019ACs\u0003=\u0001(o\u001c3vGRLE/\u001a:bi>\u0014XCAKO!\u0019)y+f(\u0006\u0016&!QrNC0\u0003!\u0019\u0017M\\#rk\u0006dG\u0003\u0002D=+KC!B\"\u0011\u00064\u0005\u0005\t\u0019ACK\u0003I\u0001(o\u001c3vGR,E.Z7f]Rt\u0015-\\3\u0015\t9\rQ3\u0016\u0005\u000b\r\u0003*)$!AA\u0002\u0015\u0015\u0018\u0001\u00035bg\"\u001cu\u000eZ3\u0015\u0005\u0015\u0015\u0018AB3rk\u0006d7\u000f\u0006\u0003\u0007zUU\u0006B\u0003D!\u000bw\t\t\u00111\u0001\u0006\u0016R!Q1\\K]\u0011))*\u0004\"-\u0011\u0002\u0003\u0007QQ]\u0001\u0010aJLg\u000e\u001e\u0013eK\u001a\fW\u000f\u001c;%c%2Aq\u0015Cz\tk\u0013\u0001bU2b]:{G-Z\u000b\u0005+\u0007,Jm\u0005\u0006\u00056\u00165TS\u0019Kq)K\u0004bAb7\u0005(V\u001d\u0007\u0003BCD+\u0013$\u0001\"#6\u00056\n\u0007\u0011r[\u0001\u0005Y\u00164G/\u0006\u0002\u0016F\u0006)A.\u001a4uA\u0005)!/[4ii\u00061!/[4ii\u0002\"b!f6\u0016ZVm\u0007C\u0002Dn\tk+:\r\u0003\u0005\u0016L\u0012}\u0006\u0019AKc\u0011!)\n\u000eb0A\u0002U\u0015WCAKp!\u00191Y\u000eb=\u0016H\u0006IA.\u001a4u[>\u001cH\u000fI\u0001\u000be&<\u0007\u000e^7pgR\u0004C\u0003BCn+OD\u0001\u0002&3\u0005L\u0002\u0007Qs\u0019\u000b\u0005\u000b7,Z\u000f\u0003\u0006\u00166\u00115\u0007\u0013!a\u0001\u000bK,B!f<\u0016vR1Q\u0013_K|+w\u0004bAb7\u00056VM\b\u0003BCD+k$\u0001\"#6\u0005P\n\u0007\u0011r\u001b\u0005\u000b+\u0017$y\r%AA\u0002Ue\bC\u0002Dn\tO+\u001a\u0010\u0003\u0006\u0016R\u0012=\u0007\u0013!a\u0001+s,B!f@\u0017\u0004U\u0011a\u0013\u0001\u0016\u0005+\u000b,Y\n\u0002\u0005\nV\u0012E'\u0019AEl+\u0011)zPf\u0002\u0005\u0011%UG1\u001bb\u0001\u0013/$B!\"&\u0017\f!Qa\u0011\tCm\u0003\u0003\u0005\r!\":\u0015\t\u0019eds\u0002\u0005\u000b\r\u0003\"i.!AA\u0002\u0015UE\u0003\u0002H\u0002-'A!B\"\u0011\u0005`\u0006\u0005\t\u0019ACs)\u00111IHf\u0006\t\u0015\u0019\u0005CQ]A\u0001\u0002\u0004))\n\u0005\u0003\u0006\bZmA\u0001CEk\tK\u0012\r!c6\u0011\r\u0019mGQ\rL\r!))y\u0007c\u0015\u0017\u001aYea\u0013\u0004\u000b\r-;1\u001aC&\n\u0017(Y%b3\u0006\u0005\t\u0017c$\u0019\b1\u0001\u0006f\"AAR\u0010C:\u0001\u0004))\u000f\u0003\u0005\u000b\u0002\u0011M\u0004\u0019\u0001L\r\u0011!IY\u000eb\u001dA\u0002Y}\u0001\u0002CGw\tg\u0002\r!d>\u0016\u0005QeF\u0003BCn-cA!B\"\u0011\u0005x\u0005\u0005\t\u0019\u0001K]Q\u0011!IH\"\u000e\u0015\t\u0015mgs\u0007\u0005\t\u001fS$Y\b1\u0001\u0017:A1Qq\u000eDH)s\u000b\u0011b]2b]\ncwnY6\u0015\rQefs\bL!\u0011!Y\t\u0010\" A\u0002\u0015\u0015\b\u0002\u0003G?\t{\u0002\r!\":\u0002\u00155,'oZ3Ue\u0016,7\u000f\u0006\u0005\u0015:Z\u001dc\u0013\u000bL*\u0011!1J\u0005b A\u0002Y-\u0013!\u0002;sK\u0016\u001c\bCBEK-\u001b\"J,\u0003\u0003\u0017P%]%aC!se\u0006L()\u001e4gKJD\u0001b#=\u0005\u0000\u0001\u0007QQ\u001d\u0005\t-+\"y\b1\u0001\u0006f\u00069\u0001n\\<nC:LH\u0003BCH-3B\u0001\"$<\u0005\u0002\u0002\u0007Qr_\u000b\u0003-;\u0002b!$\u0011\u000e~Z}\u0003c\u0002DnsRefS\u0004\u000b\u0005\u000b74\u001a\u0007\u0003\u0005\f\u001a\u0012\u0015\u0005\u0019\u0001L\u000f\u000511%o\\7TG\u0006tGK]3f+\u00191JG&\u001d\u0017vM1A\u0011RC7-W\u0002rAb7w-[2:\b\u0005\u0005\u0006@\u001amfs\u000eL:!\u0011)9I&\u001d\u0005\u0011%UG\u0011\u0012b\u0001\u0013/\u0004B!b\"\u0017v\u0011Aa\u0011\u001aCE\u0005\u0004)i\t\u0005\u0005\u0007\\\u0012%es\u000eL:\u0003\u0011!(/Z3\u0011\r\u0019mGq\u0015L8!))y\u0007c\u0015\u0017pY=ds\u000e\t\t\u000b\u007f[\u0019Ff\u001c\u0017tQQas\u000fLB-\u000b3:I&#\t\u0011YeD1\u0013a\u0001-wB\u0001B#\u0001\u0005\u0014\u0002\u0007as\u000e\u0005\t\u00137$\u0019\n1\u0001\u0017~!A1R\u000eCJ\u0001\u00041z(\u0006\u0002\u0017nQ!Q1\u001cLH\u0011)1\t\u0005b&\u0002\u0002\u0003\u0007aS\u000e\u0015\u0005\t33)\u0004\u0006\u0003\u0006\\ZU\u0005\u0002CHu\t7\u0003\rAf&\u0011\r\u0015=dq\u0012L7\u0003\u001dIG/\u001a:bi\u0016$b!b7\u0017\u001eZ}\u0005\u0002\u0003L=\t;\u0003\rAf\u001f\t\u0011%EEQ\u0014a\u0001-[*\"Af)\u0011\r\u0015]dS\u0015LT\u0013\u0011iy0\"!\u0011\u0011\u0015}fQ\u001dL7-o\"B!b7\u0017,\"A1\u0012\u0014CR\u0001\u00041:(A\u0007tG\u0006t'\t\\8dWNK'0Z\u0001\t'\u000e\fgNT8eKB!a1\u001cCu'\u0019!I/\"\u001c\u00176B!as\u0017L_\u001b\t1JL\u0003\u0003\u0017<:-\u0011AA5p\u0013\u0011!zO&/\u0015\u0005YE\u0016!B1qa2LX\u0003\u0002Lc-\u0017$bAf2\u0017NZE\u0007C\u0002Dn\tk3J\r\u0005\u0003\u0006\bZ-G\u0001CEk\t_\u0014\r!c6\t\u0011U-Gq\u001ea\u0001-\u001f\u0004bAb7\u0005(Z%\u0007\u0002CKi\t_\u0004\rAf4\u0002\u000fUt\u0017\r\u001d9msV!as\u001bLq)\u00111JNf9\u0011\r\u0015=dq\u0012Ln!!)ygc)\u0017^Zu\u0007C\u0002Dn\tO3z\u000e\u0005\u0003\u0006\bZ\u0005H\u0001CEk\tc\u0014\r!c6\t\u0015Y\u0015H\u0011_A\u0001\u0002\u00041:/A\u0002yIA\u0002bAb7\u00056Z}\u0017\u0001C*dC:dU-\u00194\u0011\t\u0019mWqH\n\u0007\u000b\u007f)iG&.\u0015\u0005Y-X\u0003\u0002Lz-s$bB&>\u0017|Z}x3AL\u0003/\u000f9Z\u0001\u0005\u0004\u0007\\\u0012Mhs\u001f\t\u0005\u000b\u000f3J\u0010\u0002\u0005\nV\u0016\u0015#\u0019AEl\u0011!ii/\"\u0012A\u0002Yu\bCBC`\rC3:\u0010\u0003\u0005\n\\\u0016\u0015\u0003\u0019AL\u0001!))y\u0007c\u0015\u0017xZ]hs\u001f\u0005\t\u0017c,)\u00051\u0001\u0006f\"AARPC#\u0001\u0004))\u000f\u0003\u0005\u0010j\u0016\u0015\u0003\u0019AL\u0005!\u0019)yGb$\u0017v\"AQSBC#\u0001\u00041:0\u0006\u0003\u0018\u0010]uA\u0003BL\t/K\u0001b!b\u001c\u0007\u0010^M\u0001\u0003EC8/+9Jbf\b\u0006f\u0016\u0015x\u0013EL\u000e\u0013\u00119:\"b\u0019\u0003\rQ+\b\u000f\\37!\u0019)yL\")\u0018\u001cA!QqQL\u000f\t!I).b\u0012C\u0002%]\u0007CCC8\u0011':Zbf\u0007\u0018\u001cA1Qq\u000eDH/G\u0001bAb7\u0005t^m\u0001B\u0003Ls\u000b\u000f\n\t\u00111\u0001\u0018$\u0005QA\u0005Z5wI\r|Gn\u001c8\u0016\t]-r\u0013\u0007\u000b\u0005/[9:\u0004\u0006\u0003\u00180]M\u0002\u0003BCD/c!\u0001Bb1\u0006J\t\u0007QQ\u0012\u0005\t\u00137,I\u00051\u0001\u00186AQQq\u000eE*/_))if\f\t\u0011)\u0005Q\u0011\na\u0001/_\tQ\u0002J2pY>tGEY:mCNDW\u0003BL\u001f/\u0007\"Baf\u0010\u0018JQ!q\u0013IL#!\u0011)9if\u0011\u0005\u0011\u0019\rW1\nb\u0001\u000b\u001bC\u0001\"c7\u0006L\u0001\u0007qs\t\t\u000b\u000b_B\u0019&\"\"\u0018B]\u0005\u0003\u0002\u0003F\u0001\u000b\u0017\u0002\ra&\u0011\u0002!\u0011,'-^4J]\u001a|'/\\1uS>t\u0017\u0001\u00052s_.,g.\u00138wCJL\u0017M\u001c;t+\t9\n\u0006\u0005\u0004\u000eB5uXq^\u0001\fI\u0016\u0014Wo\u001a\"vM\u001a,'/\u0006\u0002\u0018XA1\u0011R\u0013L'\u000b_\f!\u0002Z3ck\u001e\u001cG.Z1s\u0003!!WMY;hY><G\u0003BL,/?B\u0001\u0002c\n\u0006V\u0001\u0007Qq^\u0001\u0011aJLg\u000e\u001e#fEV<')\u001e4gKJ\u0004"
)
public interface ParIterableLike extends IterableOnce, CustomParallelizable, Parallel, HasNewCombiner {
   ScanNode$ ScanNode();

   ScanLeaf$ ScanLeaf();

   int size();

   String stringPrefix();

   GenericParCompanion companion();

   TaskSupport scala$collection$parallel$ParIterableLike$$_tasksupport();

   void scala$collection$parallel$ParIterableLike$$_tasksupport_$eq(final TaskSupport x$1);

   // $FF: synthetic method
   static void initTaskSupport$(final ParIterableLike $this) {
      $this.initTaskSupport();
   }

   default void initTaskSupport() {
      this.scala$collection$parallel$ParIterableLike$$_tasksupport_$eq(package$.MODULE$.defaultTaskSupport());
   }

   // $FF: synthetic method
   static TaskSupport tasksupport$(final ParIterableLike $this) {
      return $this.tasksupport();
   }

   default TaskSupport tasksupport() {
      TaskSupport ts = this.scala$collection$parallel$ParIterableLike$$_tasksupport();
      if (ts == null) {
         this.scala$collection$parallel$ParIterableLike$$_tasksupport_$eq(package$.MODULE$.defaultTaskSupport());
         return package$.MODULE$.defaultTaskSupport();
      } else {
         return ts;
      }
   }

   // $FF: synthetic method
   static void tasksupport_$eq$(final ParIterableLike $this, final TaskSupport ts) {
      $this.tasksupport_$eq(ts);
   }

   default void tasksupport_$eq(final TaskSupport ts) {
      this.scala$collection$parallel$ParIterableLike$$_tasksupport_$eq(ts);
   }

   Iterable seq();

   // $FF: synthetic method
   static ParIterable repr$(final ParIterableLike $this) {
      return $this.repr();
   }

   default ParIterable repr() {
      return (ParIterable)this;
   }

   // $FF: synthetic method
   static boolean isTraversableAgain$(final ParIterableLike $this) {
      return $this.isTraversableAgain();
   }

   default boolean isTraversableAgain() {
      return true;
   }

   // $FF: synthetic method
   static boolean hasDefiniteSize$(final ParIterableLike $this) {
      return $this.hasDefiniteSize();
   }

   default boolean hasDefiniteSize() {
      return true;
   }

   // $FF: synthetic method
   static boolean isEmpty$(final ParIterableLike $this) {
      return $this.isEmpty();
   }

   default boolean isEmpty() {
      return this.size() == 0;
   }

   // $FF: synthetic method
   static boolean nonEmpty$(final ParIterableLike $this) {
      return $this.nonEmpty();
   }

   default boolean nonEmpty() {
      return this.size() != 0;
   }

   // $FF: synthetic method
   static Object head$(final ParIterableLike $this) {
      return $this.head();
   }

   default Object head() {
      return this.iterator().next();
   }

   // $FF: synthetic method
   static Option headOption$(final ParIterableLike $this) {
      return $this.headOption();
   }

   default Option headOption() {
      return (Option)(this.nonEmpty() ? new Some(this.head()) : .MODULE$);
   }

   // $FF: synthetic method
   static ParIterable tail$(final ParIterableLike $this) {
      return $this.tail();
   }

   default ParIterable tail() {
      return this.drop(1);
   }

   // $FF: synthetic method
   static Object last$(final ParIterableLike $this) {
      return $this.last();
   }

   default Object last() {
      ObjectRef lst = ObjectRef.create(this.head());
      this.seq().foreach((x) -> {
         $anonfun$last$1(lst, x);
         return BoxedUnit.UNIT;
      });
      return lst.elem;
   }

   // $FF: synthetic method
   static Option lastOption$(final ParIterableLike $this) {
      return $this.lastOption();
   }

   default Option lastOption() {
      return (Option)(this.nonEmpty() ? new Some(this.last()) : .MODULE$);
   }

   // $FF: synthetic method
   static ParIterable init$(final ParIterableLike $this) {
      return $this.init();
   }

   default ParIterable init() {
      return this.take(this.size() - 1);
   }

   IterableSplitter splitter();

   // $FF: synthetic method
   static Splitter iterator$(final ParIterableLike $this) {
      return $this.iterator();
   }

   default Splitter iterator() {
      return this.splitter();
   }

   // $FF: synthetic method
   static ParIterable par$(final ParIterableLike $this) {
      return $this.par();
   }

   default ParIterable par() {
      return this.repr();
   }

   // $FF: synthetic method
   static boolean isStrictSplitterCollection$(final ParIterableLike $this) {
      return $this.isStrictSplitterCollection();
   }

   default boolean isStrictSplitterCollection() {
      return true;
   }

   // $FF: synthetic method
   static Combiner reuse$(final ParIterableLike $this, final Option oldc, final Combiner newc) {
      return $this.reuse(oldc, newc);
   }

   default Combiner reuse(final Option oldc, final Combiner newc) {
      return newc;
   }

   // $FF: synthetic method
   static TaskOps task2ops$(final ParIterableLike $this, final StrictSplitterCheckTask tsk) {
      return $this.task2ops(tsk);
   }

   default TaskOps task2ops(final StrictSplitterCheckTask tsk) {
      return new TaskOps(tsk) {
         // $FF: synthetic field
         private final ParIterableLike $outer;
         public final StrictSplitterCheckTask tsk$1;

         public ResultMapping mapResult(final Function1 mapping) {
            return new ResultMapping(mapping) {
               private final Function1 mapping$1;

               public Object map(final Object r) {
                  return this.mapping$1.apply(r);
               }

               public {
                  this.mapping$1 = mapping$1;
               }
            };
         }

         public SeqComposite compose(final StrictSplitterCheckTask t2, final Function2 resCombiner) {
            return new SeqComposite(t2, resCombiner) {
               private final Function2 resCombiner$1;

               public Object combineResults(final Object fr, final Object sr) {
                  return this.resCombiner$1.apply(fr, sr);
               }

               public {
                  this.resCombiner$1 = resCombiner$1;
               }
            };
         }

         public ParComposite parallel(final StrictSplitterCheckTask t2, final Function2 resCombiner) {
            return new ParComposite(t2, resCombiner) {
               private final Function2 resCombiner$2;

               public Object combineResults(final Object fr, final Object sr) {
                  return this.resCombiner$2.apply(fr, sr);
               }

               public {
                  this.resCombiner$2 = resCombiner$2;
               }
            };
         }

         // $FF: synthetic method
         public ParIterableLike scala$collection$parallel$ParIterableLike$$anon$$$outer() {
            return this.$outer;
         }

         public {
            if (ParIterableLike.this == null) {
               throw null;
            } else {
               this.$outer = ParIterableLike.this;
               this.tsk$1 = tsk$1;
            }
         }
      };
   }

   // $FF: synthetic method
   static NonDivisible wrap$(final ParIterableLike $this, final Function0 body) {
      return $this.wrap(body);
   }

   default NonDivisible wrap(final Function0 body) {
      return new NonDivisible(body) {
         private volatile Object result;
         private volatile Throwable throwable;
         // $FF: synthetic field
         private final ParIterableLike $outer;
         private final Function0 body$1;

         public boolean shouldSplitFurther() {
            return ParIterableLike.NonDivisibleTask.super.shouldSplitFurther();
         }

         public Nothing split() {
            return ParIterableLike.NonDivisibleTask.super.split();
         }

         public boolean requiresStrictSplitters() {
            return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
         }

         public Object repr() {
            return Task.repr$(this);
         }

         public void merge(final Object that) {
            Task.merge$(this, that);
         }

         public void forwardThrowable() {
            Task.forwardThrowable$(this);
         }

         public void tryLeaf(final Option lastres) {
            Task.tryLeaf$(this, lastres);
         }

         public void tryMerge(final Object t) {
            Task.tryMerge$(this, t);
         }

         public void mergeThrowables(final Task that) {
            Task.mergeThrowables$(this, that);
         }

         public void signalAbort() {
            Task.signalAbort$(this);
         }

         public Throwable throwable() {
            return this.throwable;
         }

         public void throwable_$eq(final Throwable x$1) {
            this.throwable = x$1;
         }

         public void leaf(final Option prevr) {
            this.result_$eq(this.body$1.apply());
         }

         public Object result() {
            return this.result;
         }

         public void result_$eq(final Object x$1) {
            this.result = x$1;
         }

         // $FF: synthetic method
         public ParIterableLike scala$collection$parallel$ParIterableLike$NonDivisibleTask$$$outer() {
            return this.$outer;
         }

         // $FF: synthetic method
         public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
            return this.$outer;
         }

         public {
            if (ParIterableLike.this == null) {
               throw null;
            } else {
               this.$outer = ParIterableLike.this;
               this.body$1 = body$1;
               Task.$init$(this);
               ParIterableLike.StrictSplitterCheckTask.$init$(this);
               ParIterableLike.NonDivisibleTask.$init$(this);
               this.result = null;
            }
         }
      };
   }

   // $FF: synthetic method
   static SignallingOps delegatedSignalling2ops$(final ParIterableLike $this, final DelegatedSignalling it) {
      return $this.delegatedSignalling2ops(it);
   }

   default SignallingOps delegatedSignalling2ops(final DelegatedSignalling it) {
      return null.new SignallingOps(it) {
         private final DelegatedSignalling it$1;

         public DelegatedSignalling assign(final Signalling cntx) {
            this.it$1.signalDelegate_$eq(cntx);
            return this.it$1;
         }

         public {
            this.it$1 = it$1;
         }
      };
   }

   // $FF: synthetic method
   static BuilderOps builder2ops$(final ParIterableLike $this, final Builder cb) {
      return $this.builder2ops(cb);
   }

   default BuilderOps builder2ops(final Builder cb) {
      return new BuilderOps(cb) {
         // $FF: synthetic field
         private final ParIterableLike $outer;
         public final Builder cb$1;

         public BuilderOps.Otherwise ifIs(final Function1 isbody) {
            return new BuilderOps.Otherwise(isbody) {
               // $FF: synthetic field
               private final <undefinedtype> $outer;
               private final Function1 isbody$1;

               public void otherwise(final Function0 notbody, final ClassTag t) {
                  label14: {
                     Class var10000 = this.$outer.cb$1.getClass();
                     Class var3 = t.runtimeClass();
                     if (var10000 == null) {
                        if (var3 == null) {
                           break label14;
                        }
                     } else if (var10000.equals(var3)) {
                        break label14;
                     }

                     notbody.apply$mcV$sp();
                     return;
                  }

                  this.isbody$1.apply(this.$outer.cb$1);
               }

               public {
                  if (<VAR_NAMELESS_ENCLOSURE> == null) {
                     throw null;
                  } else {
                     this.$outer = <VAR_NAMELESS_ENCLOSURE>;
                     this.isbody$1 = isbody$1;
                  }
               }
            };
         }

         public boolean isCombiner() {
            return this.cb$1 instanceof Combiner;
         }

         public Combiner asCombiner() {
            return (Combiner)this.cb$1;
         }

         // $FF: synthetic method
         public ParIterableLike scala$collection$parallel$ParIterableLike$BuilderOps$$$outer() {
            return this.$outer;
         }

         public {
            if (ParIterableLike.this == null) {
               throw null;
            } else {
               this.$outer = ParIterableLike.this;
               this.cb$1 = cb$1;
               ParIterableLike.BuilderOps.$init$(this);
            }
         }
      };
   }

   // $FF: synthetic method
   static ParIterable sequentially$(final ParIterableLike $this, final Function1 b) {
      return $this.sequentially(b);
   }

   default ParIterable sequentially(final Function1 b) {
      return (ParIterable)this.newCombiner().fromSequential((IterableOnce)b.apply(this.seq()));
   }

   // $FF: synthetic method
   static String mkString$(final ParIterableLike $this, final String start, final String sep, final String end) {
      return $this.mkString(start, sep, end);
   }

   default String mkString(final String start, final String sep, final String end) {
      return this.seq().mkString(start, sep, end);
   }

   // $FF: synthetic method
   static String mkString$(final ParIterableLike $this, final String sep) {
      return $this.mkString(sep);
   }

   default String mkString(final String sep) {
      return this.seq().mkString("", sep, "");
   }

   // $FF: synthetic method
   static String mkString$(final ParIterableLike $this) {
      return $this.mkString();
   }

   default String mkString() {
      return this.seq().mkString("");
   }

   // $FF: synthetic method
   static String toString$(final ParIterableLike $this) {
      return $this.toString();
   }

   default String toString() {
      return this.seq().mkString((new StringBuilder(1)).append(this.stringPrefix()).append("(").toString(), ", ", ")");
   }

   // $FF: synthetic method
   static Object reduce$(final ParIterableLike $this, final Function2 op) {
      return $this.reduce(op);
   }

   default Object reduce(final Function2 op) {
      if (this.isEmpty()) {
         throw new UnsupportedOperationException("empty.reduce");
      } else {
         return ((Option)this.tasksupport().executeAndWaitResult(new Reduce(op, this.splitter()))).get();
      }
   }

   // $FF: synthetic method
   static Option reduceOption$(final ParIterableLike $this, final Function2 op) {
      return $this.reduceOption(op);
   }

   default Option reduceOption(final Function2 op) {
      return (Option)(this.isEmpty() ? .MODULE$ : new Some(this.reduce(op)));
   }

   // $FF: synthetic method
   static Object fold$(final ParIterableLike $this, final Object z, final Function2 op) {
      return $this.fold(z, op);
   }

   default Object fold(final Object z, final Function2 op) {
      return this.tasksupport().executeAndWaitResult(new Fold(z, op, this.splitter()));
   }

   // $FF: synthetic method
   static Object aggregate$(final ParIterableLike $this, final Function0 z, final Function2 seqop, final Function2 combop) {
      return $this.aggregate(z, seqop, combop);
   }

   default Object aggregate(final Function0 z, final Function2 seqop, final Function2 combop) {
      return this.tasksupport().executeAndWaitResult(new Aggregate(z, seqop, combop, this.splitter()));
   }

   // $FF: synthetic method
   static Object foldLeft$(final ParIterableLike $this, final Object z, final Function2 op) {
      return $this.foldLeft(z, op);
   }

   default Object foldLeft(final Object z, final Function2 op) {
      return this.seq().foldLeft(z, op);
   }

   // $FF: synthetic method
   static Object foldRight$(final ParIterableLike $this, final Object z, final Function2 op) {
      return $this.foldRight(z, op);
   }

   default Object foldRight(final Object z, final Function2 op) {
      return this.seq().foldRight(z, op);
   }

   // $FF: synthetic method
   static Object reduceLeft$(final ParIterableLike $this, final Function2 op) {
      return $this.reduceLeft(op);
   }

   default Object reduceLeft(final Function2 op) {
      return this.seq().reduceLeft(op);
   }

   // $FF: synthetic method
   static Object reduceRight$(final ParIterableLike $this, final Function2 op) {
      return $this.reduceRight(op);
   }

   default Object reduceRight(final Function2 op) {
      return this.seq().reduceRight(op);
   }

   // $FF: synthetic method
   static Option reduceLeftOption$(final ParIterableLike $this, final Function2 op) {
      return $this.reduceLeftOption(op);
   }

   default Option reduceLeftOption(final Function2 op) {
      return this.seq().reduceLeftOption(op);
   }

   // $FF: synthetic method
   static Option reduceRightOption$(final ParIterableLike $this, final Function2 op) {
      return $this.reduceRightOption(op);
   }

   default Option reduceRightOption(final Function2 op) {
      return this.seq().reduceRightOption(op);
   }

   // $FF: synthetic method
   static void foreach$(final ParIterableLike $this, final Function1 f) {
      $this.foreach(f);
   }

   default void foreach(final Function1 f) {
      this.tasksupport().executeAndWaitResult(new Foreach(f, this.splitter()));
   }

   // $FF: synthetic method
   static int count$(final ParIterableLike $this, final Function1 p) {
      return $this.count(p);
   }

   default int count(final Function1 p) {
      return BoxesRunTime.unboxToInt(this.tasksupport().executeAndWaitResult(new Count(p, this.splitter())));
   }

   // $FF: synthetic method
   static Object sum$(final ParIterableLike $this, final Numeric num) {
      return $this.sum(num);
   }

   default Object sum(final Numeric num) {
      return this.tasksupport().executeAndWaitResult(new Sum(num, this.splitter()));
   }

   // $FF: synthetic method
   static Object product$(final ParIterableLike $this, final Numeric num) {
      return $this.product(num);
   }

   default Object product(final Numeric num) {
      return this.tasksupport().executeAndWaitResult(new Product(num, this.splitter()));
   }

   // $FF: synthetic method
   static Object min$(final ParIterableLike $this, final Ordering ord) {
      return $this.min(ord);
   }

   default Object min(final Ordering ord) {
      if (this.isEmpty()) {
         throw new UnsupportedOperationException("empty.min");
      } else {
         return ((Option)this.tasksupport().executeAndWaitResult(new Min(ord, this.splitter()))).get();
      }
   }

   // $FF: synthetic method
   static Object max$(final ParIterableLike $this, final Ordering ord) {
      return $this.max(ord);
   }

   default Object max(final Ordering ord) {
      if (this.isEmpty()) {
         throw new UnsupportedOperationException("empty.max");
      } else {
         return ((Option)this.tasksupport().executeAndWaitResult(new Max(ord, this.splitter()))).get();
      }
   }

   // $FF: synthetic method
   static Object maxBy$(final ParIterableLike $this, final Function1 f, final Ordering cmp) {
      return $this.maxBy(f, cmp);
   }

   default Object maxBy(final Function1 f, final Ordering cmp) {
      if (this.isEmpty()) {
         throw new UnsupportedOperationException("empty.maxBy");
      } else {
         return this.reduce((x, y) -> cmp.gteq(f.apply(x), f.apply(y)) ? x : y);
      }
   }

   // $FF: synthetic method
   static Object minBy$(final ParIterableLike $this, final Function1 f, final Ordering cmp) {
      return $this.minBy(f, cmp);
   }

   default Object minBy(final Function1 f, final Ordering cmp) {
      if (this.isEmpty()) {
         throw new UnsupportedOperationException("empty.minBy");
      } else {
         return this.reduce((x, y) -> cmp.lteq(f.apply(x), f.apply(y)) ? x : y);
      }
   }

   // $FF: synthetic method
   static ParIterable map$(final ParIterableLike $this, final Function1 f) {
      return $this.map(f);
   }

   default ParIterable map(final Function1 f) {
      return (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(new Map(f, this.combinerFactory(() -> this.companion().newCombiner()), this.splitter()))).resultWithTaskSupport();
   }

   // $FF: synthetic method
   static ParIterable collect$(final ParIterableLike $this, final PartialFunction pf) {
      return $this.collect(pf);
   }

   default ParIterable collect(final PartialFunction pf) {
      return (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(new Collect(pf, this.combinerFactory(() -> this.companion().newCombiner()), this.splitter()))).resultWithTaskSupport();
   }

   // $FF: synthetic method
   static ParIterable flatMap$(final ParIterableLike $this, final Function1 f) {
      return $this.flatMap(f);
   }

   default ParIterable flatMap(final Function1 f) {
      return (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(new FlatMap(f, this.combinerFactory(() -> this.companion().newCombiner()), this.splitter()))).resultWithTaskSupport();
   }

   // $FF: synthetic method
   static boolean forall$(final ParIterableLike $this, final Function1 p) {
      return $this.forall(p);
   }

   default boolean forall(final Function1 p) {
      return BoxesRunTime.unboxToBoolean(this.tasksupport().executeAndWaitResult(new Forall(p, (IterableSplitter)this.delegatedSignalling2ops(this.splitter()).assign(new DefaultSignalling() {
      }))));
   }

   // $FF: synthetic method
   static boolean exists$(final ParIterableLike $this, final Function1 p) {
      return $this.exists(p);
   }

   default boolean exists(final Function1 p) {
      return BoxesRunTime.unboxToBoolean(this.tasksupport().executeAndWaitResult(new Exists(p, (IterableSplitter)this.delegatedSignalling2ops(this.splitter()).assign(new DefaultSignalling() {
      }))));
   }

   // $FF: synthetic method
   static Option find$(final ParIterableLike $this, final Function1 p) {
      return $this.find(p);
   }

   default Option find(final Function1 p) {
      return (Option)this.tasksupport().executeAndWaitResult(new Find(p, (IterableSplitter)this.delegatedSignalling2ops(this.splitter()).assign(new DefaultSignalling() {
      })));
   }

   // $FF: synthetic method
   static CombinerFactory combinerFactory$(final ParIterableLike $this) {
      return $this.combinerFactory();
   }

   default CombinerFactory combinerFactory() {
      Combiner combiner = this.newCombiner();
      combiner.combinerTaskSupport_$eq(this.tasksupport());
      return combiner.canBeShared() ? new CombinerFactory(combiner) {
         private final Combiner shared;

         private Combiner shared() {
            return this.shared;
         }

         public Combiner apply() {
            return this.shared();
         }

         public boolean doesShareCombiners() {
            return true;
         }

         public {
            this.shared = combiner$1;
         }
      } : new CombinerFactory() {
         // $FF: synthetic field
         private final ParIterableLike $outer;

         public Combiner apply() {
            Combiner r = this.$outer.newCombiner();
            r.combinerTaskSupport_$eq(this.$outer.tasksupport());
            return r;
         }

         public boolean doesShareCombiners() {
            return false;
         }

         public {
            if (ParIterableLike.this == null) {
               throw null;
            } else {
               this.$outer = ParIterableLike.this;
            }
         }
      };
   }

   // $FF: synthetic method
   static CombinerFactory combinerFactory$(final ParIterableLike $this, final Function0 cbf) {
      return $this.combinerFactory(cbf);
   }

   default CombinerFactory combinerFactory(final Function0 cbf) {
      Combiner combiner = (Combiner)cbf.apply();
      combiner.combinerTaskSupport_$eq(this.tasksupport());
      return combiner.canBeShared() ? new CombinerFactory(combiner) {
         private final Combiner shared;

         public Combiner shared() {
            return this.shared;
         }

         public Combiner apply() {
            return this.shared();
         }

         public boolean doesShareCombiners() {
            return true;
         }

         public {
            this.shared = combiner$2;
         }
      } : new CombinerFactory(cbf) {
         // $FF: synthetic field
         private final ParIterableLike $outer;
         private final Function0 cbf$1;

         public Combiner apply() {
            Combiner r = (Combiner)this.cbf$1.apply();
            r.combinerTaskSupport_$eq(this.$outer.tasksupport());
            return r;
         }

         public boolean doesShareCombiners() {
            return false;
         }

         public {
            if (ParIterableLike.this == null) {
               throw null;
            } else {
               this.$outer = ParIterableLike.this;
               this.cbf$1 = cbf$1;
            }
         }
      };
   }

   // $FF: synthetic method
   static ParIterable withFilter$(final ParIterableLike $this, final Function1 pred) {
      return $this.withFilter(pred);
   }

   default ParIterable withFilter(final Function1 pred) {
      return this.filter(pred);
   }

   // $FF: synthetic method
   static ParIterable filter$(final ParIterableLike $this, final Function1 pred) {
      return $this.filter(pred);
   }

   default ParIterable filter(final Function1 pred) {
      return (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(new Filter(pred, this.combinerFactory(), this.splitter()))).resultWithTaskSupport();
   }

   // $FF: synthetic method
   static ParIterable filterNot$(final ParIterableLike $this, final Function1 pred) {
      return $this.filterNot(pred);
   }

   default ParIterable filterNot(final Function1 pred) {
      return (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(new FilterNot(pred, this.combinerFactory(), this.splitter()))).resultWithTaskSupport();
   }

   // $FF: synthetic method
   static ParIterable $plus$plus$(final ParIterableLike $this, final IterableOnce that) {
      return $this.$plus$plus(that);
   }

   default ParIterable $plus$plus(final IterableOnce that) {
      if (that instanceof ParIterable) {
         ParIterable var4 = (ParIterable)that;
         CombinerFactory cfactory = this.combinerFactory(() -> this.companion().newCombiner());
         Copy copythis = new Copy(cfactory, this.splitter());
         NonDivisible copythat = this.wrap(() -> {
            Copy othtask = var4.new Copy(cfactory, var4.splitter());
            return (Combiner)this.tasksupport().executeAndWaitResult(othtask);
         });
         ParComposite task = this.task2ops(copythis).parallel(copythat, (x$1, x$2) -> x$1.combine(x$2));
         return (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(task)).resultWithTaskSupport();
      } else {
         Copy copythis = new Copy(this.combinerFactory(() -> this.companion().newCombiner()), this.splitter());
         NonDivisible copythat = this.wrap(() -> {
            Combiner cb = this.companion().newCombiner();
            cb.$plus$plus$eq(that);
            return cb;
         });
         return (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(this.task2ops(copythis).parallel(copythat, (x$3, x$4) -> x$3.combine(x$4)))).resultWithTaskSupport();
      }
   }

   // $FF: synthetic method
   static Tuple2 partition$(final ParIterableLike $this, final Function1 pred) {
      return $this.partition(pred);
   }

   default Tuple2 partition(final Function1 pred) {
      Tuple2 result = (Tuple2)this.tasksupport().executeAndWaitResult(new Partition(pred, this.combinerFactory(), this.combinerFactory(), this.splitter()));
      return new Tuple2(((Combiner)result._1()).resultWithTaskSupport(), ((Combiner)result._2()).resultWithTaskSupport());
   }

   // $FF: synthetic method
   static scala.collection.parallel.immutable.ParMap groupBy$(final ParIterableLike $this, final Function1 f) {
      return $this.groupBy(f);
   }

   default scala.collection.parallel.immutable.ParMap groupBy(final Function1 f) {
      ParHashMap r = (ParHashMap)this.tasksupport().executeAndWaitResult(this.task2ops(new GroupBy(f, () -> HashMapCombiner$.MODULE$.apply(), this.splitter())).mapResult((rcb) -> rcb.groupByKey(() -> this.combinerFactory().apply())));
      return (scala.collection.parallel.immutable.ParMap)package$.MODULE$.setTaskSupport(r, this.tasksupport());
   }

   // $FF: synthetic method
   static ParIterable take$(final ParIterableLike $this, final int n) {
      return $this.take(n);
   }

   default ParIterable take(final int n) {
      int actualn = this.size() > n ? n : this.size();
      return actualn < package$.MODULE$.MIN_FOR_COPY() ? this.take_sequential(actualn) : (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(new Take(actualn, this.combinerFactory(), this.splitter()))).resultWithTaskSupport();
   }

   private ParIterable take_sequential(final int n) {
      Combiner cb = this.newCombiner();
      cb.sizeHint(n);
      IterableSplitter it = this.splitter();

      for(int left = n; left > 0; --left) {
         cb.$plus$eq(it.next());
      }

      return (ParIterable)cb.resultWithTaskSupport();
   }

   // $FF: synthetic method
   static ParIterable drop$(final ParIterableLike $this, final int n) {
      return $this.drop(n);
   }

   default ParIterable drop(final int n) {
      int actualn = this.size() > n ? n : this.size();
      return this.size() - actualn < package$.MODULE$.MIN_FOR_COPY() ? this.drop_sequential(actualn) : (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(new Drop(actualn, this.combinerFactory(), this.splitter()))).resultWithTaskSupport();
   }

   private ParIterable drop_sequential(final int n) {
      IterableSplitter it = this.splitter().drop(n);
      Combiner cb = this.newCombiner();
      cb.sizeHint(this.size() - n);

      while(it.hasNext()) {
         cb.$plus$eq(it.next());
      }

      return (ParIterable)cb.resultWithTaskSupport();
   }

   // $FF: synthetic method
   static ParIterable slice$(final ParIterableLike $this, final int unc_from, final int unc_until) {
      return $this.slice(unc_from, unc_until);
   }

   default ParIterable slice(final int unc_from, final int unc_until) {
      int from = scala.runtime.RichInt..MODULE$.max$extension(scala.Predef..MODULE$.intWrapper(scala.runtime.RichInt..MODULE$.min$extension(scala.Predef..MODULE$.intWrapper(unc_from), this.size())), 0);
      int until = scala.runtime.RichInt..MODULE$.max$extension(scala.Predef..MODULE$.intWrapper(scala.runtime.RichInt..MODULE$.min$extension(scala.Predef..MODULE$.intWrapper(unc_until), this.size())), from);
      return until - from <= package$.MODULE$.MIN_FOR_COPY() ? this.slice_sequential(from, until) : (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(new Slice(from, until, this.combinerFactory(), this.splitter()))).resultWithTaskSupport();
   }

   private ParIterable slice_sequential(final int from, final int until) {
      Combiner cb = this.newCombiner();
      int left = until - from;

      for(IterableSplitter it = this.splitter().drop(from); left > 0; --left) {
         cb.$plus$eq(it.next());
      }

      return (ParIterable)cb.resultWithTaskSupport();
   }

   // $FF: synthetic method
   static Tuple2 splitAt$(final ParIterableLike $this, final int n) {
      return $this.splitAt(n);
   }

   default Tuple2 splitAt(final int n) {
      Tuple2 result = (Tuple2)this.tasksupport().executeAndWaitResult(new SplitAt(n, this.combinerFactory(), this.combinerFactory(), this.splitter()));
      return new Tuple2(((Combiner)result._1()).resultWithTaskSupport(), ((Combiner)result._2()).resultWithTaskSupport());
   }

   // $FF: synthetic method
   static ParIterable scan$(final ParIterableLike $this, final Object z, final Function2 op) {
      return $this.scan(z, op);
   }

   default ParIterable scan(final Object z, final Function2 op) {
      return this.size() > 0 ? (ParIterable)this.tasksupport().executeAndWaitResult(this.task2ops(new CreateScanTree(0, this.size(), z, op, this.splitter())).mapResult((tree) -> (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(this.new FromScanTree(tree, z, op, this.combinerFactory(() -> this.companion().newCombiner())))).resultWithTaskSupport())) : (ParIterable)package$.MODULE$.setTaskSupport(((Builder)this.companion().newCombiner().$plus$eq(z)).result(), this.tasksupport());
   }

   // $FF: synthetic method
   static Iterable scanLeft$(final ParIterableLike $this, final Object z, final Function2 op) {
      return $this.scanLeft(z, op);
   }

   default Iterable scanLeft(final Object z, final Function2 op) {
      return (Iterable)this.seq().scanLeft(z, op);
   }

   // $FF: synthetic method
   static Iterable scanRight$(final ParIterableLike $this, final Object z, final Function2 op) {
      return $this.scanRight(z, op);
   }

   default Iterable scanRight(final Object z, final Function2 op) {
      return (Iterable)this.seq().scanRight(z, op);
   }

   // $FF: synthetic method
   static ParIterable takeWhile$(final ParIterableLike $this, final Function1 pred) {
      return $this.takeWhile(pred);
   }

   default ParIterable takeWhile(final Function1 pred) {
      CombinerFactory cbf = this.combinerFactory();
      if (cbf.doesShareCombiners()) {
         ParSeq parseqspan = (ParSeq)this.toSeq().takeWhile(pred);
         return (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(new Copy(this.combinerFactory(), parseqspan.splitter()))).resultWithTaskSupport();
      } else {
         DefaultSignalling cntx = new AtomicIndexFlag() {
            private AtomicInteger scala$collection$generic$AtomicIndexFlag$$intflag;

            public int indexFlag() {
               return AtomicIndexFlag.indexFlag$(this);
            }

            public void setIndexFlag(final int f) {
               AtomicIndexFlag.setIndexFlag$(this, f);
            }

            public void setIndexFlagIfGreater(final int f) {
               AtomicIndexFlag.setIndexFlagIfGreater$(this, f);
            }

            public void setIndexFlagIfLesser(final int f) {
               AtomicIndexFlag.setIndexFlagIfLesser$(this, f);
            }

            public AtomicInteger scala$collection$generic$AtomicIndexFlag$$intflag() {
               return this.scala$collection$generic$AtomicIndexFlag$$intflag;
            }

            public final void scala$collection$generic$AtomicIndexFlag$_setter_$scala$collection$generic$AtomicIndexFlag$$intflag_$eq(final AtomicInteger x$1) {
               this.scala$collection$generic$AtomicIndexFlag$$intflag = x$1;
            }

            public {
               AtomicIndexFlag.$init$(this);
               Statics.releaseFence();
            }
         };
         ((AtomicIndexFlag)cntx).setIndexFlag(Integer.MAX_VALUE);
         Tuple2 result = (Tuple2)this.tasksupport().executeAndWaitResult(new TakeWhile(0, pred, this.combinerFactory(), (IterableSplitter)this.delegatedSignalling2ops(this.splitter()).assign(cntx)));
         return (ParIterable)((Combiner)result._1()).resultWithTaskSupport();
      }
   }

   // $FF: synthetic method
   static Tuple2 span$(final ParIterableLike $this, final Function1 pred) {
      return $this.span(pred);
   }

   default Tuple2 span(final Function1 pred) {
      CombinerFactory cbf = this.combinerFactory();
      if (cbf.doesShareCombiners()) {
         Tuple2 var5 = this.toSeq().span(pred);
         if (var5 != null) {
            ParSeq xs = (ParSeq)var5._1();
            ParSeq ys = (ParSeq)var5._2();
            Tuple2 var4 = new Tuple2(xs, ys);
            ParSeq xs = (ParSeq)var4._1();
            ParSeq ys = (ParSeq)var4._2();
            Copy copyxs = new Copy(this.combinerFactory(), xs.splitter());
            Copy copyys = new Copy(this.combinerFactory(), ys.splitter());
            ParComposite copyall = this.task2ops(copyxs).parallel(copyys, (xr, yr) -> new Tuple2(xr, yr));
            Tuple2 result = (Tuple2)this.tasksupport().executeAndWaitResult(copyall);
            return new Tuple2(((Combiner)result._1()).resultWithTaskSupport(), ((Combiner)result._2()).resultWithTaskSupport());
         } else {
            throw new MatchError(var5);
         }
      } else {
         DefaultSignalling cntx = new AtomicIndexFlag() {
            private AtomicInteger scala$collection$generic$AtomicIndexFlag$$intflag;

            public int indexFlag() {
               return AtomicIndexFlag.indexFlag$(this);
            }

            public void setIndexFlag(final int f) {
               AtomicIndexFlag.setIndexFlag$(this, f);
            }

            public void setIndexFlagIfGreater(final int f) {
               AtomicIndexFlag.setIndexFlagIfGreater$(this, f);
            }

            public void setIndexFlagIfLesser(final int f) {
               AtomicIndexFlag.setIndexFlagIfLesser$(this, f);
            }

            public AtomicInteger scala$collection$generic$AtomicIndexFlag$$intflag() {
               return this.scala$collection$generic$AtomicIndexFlag$$intflag;
            }

            public final void scala$collection$generic$AtomicIndexFlag$_setter_$scala$collection$generic$AtomicIndexFlag$$intflag_$eq(final AtomicInteger x$1) {
               this.scala$collection$generic$AtomicIndexFlag$$intflag = x$1;
            }

            public {
               AtomicIndexFlag.$init$(this);
               Statics.releaseFence();
            }
         };
         ((AtomicIndexFlag)cntx).setIndexFlag(Integer.MAX_VALUE);
         Tuple2 result = (Tuple2)this.tasksupport().executeAndWaitResult(new Span(0, pred, this.combinerFactory(), this.combinerFactory(), (IterableSplitter)this.delegatedSignalling2ops(this.splitter()).assign(cntx)));
         return new Tuple2(((Combiner)result._1()).resultWithTaskSupport(), ((Combiner)result._2()).resultWithTaskSupport());
      }
   }

   // $FF: synthetic method
   static ParIterable dropWhile$(final ParIterableLike $this, final Function1 pred) {
      return $this.dropWhile(pred);
   }

   default ParIterable dropWhile(final Function1 pred) {
      DefaultSignalling cntx = new AtomicIndexFlag() {
         private AtomicInteger scala$collection$generic$AtomicIndexFlag$$intflag;

         public int indexFlag() {
            return AtomicIndexFlag.indexFlag$(this);
         }

         public void setIndexFlag(final int f) {
            AtomicIndexFlag.setIndexFlag$(this, f);
         }

         public void setIndexFlagIfGreater(final int f) {
            AtomicIndexFlag.setIndexFlagIfGreater$(this, f);
         }

         public void setIndexFlagIfLesser(final int f) {
            AtomicIndexFlag.setIndexFlagIfLesser$(this, f);
         }

         public AtomicInteger scala$collection$generic$AtomicIndexFlag$$intflag() {
            return this.scala$collection$generic$AtomicIndexFlag$$intflag;
         }

         public final void scala$collection$generic$AtomicIndexFlag$_setter_$scala$collection$generic$AtomicIndexFlag$$intflag_$eq(final AtomicInteger x$1) {
            this.scala$collection$generic$AtomicIndexFlag$$intflag = x$1;
         }

         public {
            AtomicIndexFlag.$init$(this);
            Statics.releaseFence();
         }
      };
      ((AtomicIndexFlag)cntx).setIndexFlag(Integer.MAX_VALUE);
      return (ParIterable)((Combiner)((Tuple2)this.tasksupport().executeAndWaitResult(new Span(0, pred, this.combinerFactory(), this.combinerFactory(), (IterableSplitter)this.delegatedSignalling2ops(this.splitter()).assign(cntx))))._2()).resultWithTaskSupport();
   }

   // $FF: synthetic method
   static void copyToArray$(final ParIterableLike $this, final Object xs) {
      $this.copyToArray(xs);
   }

   default void copyToArray(final Object xs) {
      this.copyToArray(xs, 0);
   }

   // $FF: synthetic method
   static void copyToArray$(final ParIterableLike $this, final Object xs, final int start) {
      $this.copyToArray(xs, start);
   }

   default void copyToArray(final Object xs, final int start) {
      this.copyToArray(xs, start, scala.runtime.ScalaRunTime..MODULE$.array_length(xs) - start);
   }

   // $FF: synthetic method
   static void copyToArray$(final ParIterableLike $this, final Object xs, final int start, final int len) {
      $this.copyToArray(xs, start, len);
   }

   default void copyToArray(final Object xs, final int start, final int len) {
      if (len > 0) {
         this.tasksupport().executeAndWaitResult(new CopyToArray(start, len, xs, this.splitter()));
      }
   }

   // $FF: synthetic method
   static boolean sameElements$(final ParIterableLike $this, final IterableOnce that) {
      return $this.sameElements(that);
   }

   default boolean sameElements(final IterableOnce that) {
      return this.seq().iterator().sameElements(that);
   }

   // $FF: synthetic method
   static ParIterable zip$(final ParIterableLike $this, final ParIterable that) {
      return $this.zip(that);
   }

   default ParIterable zip(final ParIterable that) {
      if (that instanceof ParSeq) {
         ParSeq var4 = (ParSeq)that;
         return (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(new Zip(this.combinerFactory(() -> this.companion().newCombiner()), this.splitter(), var4.splitter()))).resultWithTaskSupport();
      } else {
         return (ParIterable)((Builder)this.companion().newBuilder().$plus$plus$eq((IterableOnce)package$.MODULE$.setTaskSupport(this.seq().zip(that.seq()), this.tasksupport()))).result();
      }
   }

   // $FF: synthetic method
   static ParIterable zip$(final ParIterableLike $this, final Iterable that) {
      return $this.zip(that);
   }

   default ParIterable zip(final Iterable that) {
      return (ParIterable)((Builder)this.companion().newBuilder().$plus$plus$eq((IterableOnce)package$.MODULE$.setTaskSupport(this.seq().zip(that), this.tasksupport()))).result();
   }

   // $FF: synthetic method
   static ParIterable zipWithIndex$(final ParIterableLike $this) {
      return $this.zipWithIndex();
   }

   default ParIterable zipWithIndex() {
      return this.zip((ParIterable)ParRange$.MODULE$.apply(0, this.size(), 1, false));
   }

   // $FF: synthetic method
   static ParIterable zipAll$(final ParIterableLike $this, final ParIterable that, final Object thisElem, final Object thatElem) {
      return $this.zipAll(that, thisElem, thatElem);
   }

   default ParIterable zipAll(final ParIterable that, final Object thisElem, final Object thatElem) {
      ParSeq thatseq = that.toSeq();
      return (ParIterable)((Combiner)this.tasksupport().executeAndWaitResult(new ZipAll(scala.runtime.RichInt..MODULE$.max$extension(scala.Predef..MODULE$.intWrapper(this.size()), thatseq.length()), thisElem, thatElem, this.combinerFactory(() -> this.companion().newCombiner()), this.splitter(), thatseq.splitter()))).resultWithTaskSupport();
   }

   // $FF: synthetic method
   static Object toParCollection$(final ParIterableLike $this, final Function0 cbf) {
      return $this.toParCollection(cbf);
   }

   default Object toParCollection(final Function0 cbf) {
      return ((Combiner)this.tasksupport().executeAndWaitResult(new ToParCollection(this.combinerFactory(cbf), this.splitter()))).resultWithTaskSupport();
   }

   // $FF: synthetic method
   static Object toParMap$(final ParIterableLike $this, final Function0 cbf, final scala..less.colon.less ev) {
      return $this.toParMap(cbf, ev);
   }

   default Object toParMap(final Function0 cbf, final scala..less.colon.less ev) {
      return ((Combiner)this.tasksupport().executeAndWaitResult(new ToParMap(this.combinerFactory(cbf), this.splitter(), ev))).resultWithTaskSupport();
   }

   // $FF: synthetic method
   static Object toArray$(final ParIterableLike $this, final ClassTag evidence$1) {
      return $this.toArray(evidence$1);
   }

   default Object toArray(final ClassTag evidence$1) {
      Object arr = evidence$1.newArray(this.size());
      this.copyToArray(arr);
      return arr;
   }

   // $FF: synthetic method
   static List toList$(final ParIterableLike $this) {
      return $this.toList();
   }

   default List toList() {
      return this.seq().toList();
   }

   // $FF: synthetic method
   static IndexedSeq toIndexedSeq$(final ParIterableLike $this) {
      return $this.toIndexedSeq();
   }

   default IndexedSeq toIndexedSeq() {
      return this.seq().toIndexedSeq();
   }

   // $FF: synthetic method
   static Stream toStream$(final ParIterableLike $this) {
      return $this.toStream();
   }

   /** @deprecated */
   default Stream toStream() {
      return this.seq().toStream();
   }

   // $FF: synthetic method
   static Iterator toIterator$(final ParIterableLike $this) {
      return $this.toIterator();
   }

   default Iterator toIterator() {
      return this.splitter();
   }

   // $FF: synthetic method
   static Buffer toBuffer$(final ParIterableLike $this) {
      return $this.toBuffer();
   }

   default Buffer toBuffer() {
      return this.seq().toBuffer();
   }

   // $FF: synthetic method
   static ParIterable toTraversable$(final ParIterableLike $this) {
      return $this.toTraversable();
   }

   /** @deprecated */
   default ParIterable toTraversable() {
      return (ParIterable)this;
   }

   // $FF: synthetic method
   static ParIterable toIterable$(final ParIterableLike $this) {
      return $this.toIterable();
   }

   default ParIterable toIterable() {
      return (ParIterable)this;
   }

   // $FF: synthetic method
   static ParSeq toSeq$(final ParIterableLike $this) {
      return $this.toSeq();
   }

   default ParSeq toSeq() {
      return (ParSeq)this.toParCollection(() -> ParSeq$.MODULE$.newCombiner());
   }

   // $FF: synthetic method
   static scala.collection.parallel.immutable.ParSet toSet$(final ParIterableLike $this) {
      return $this.toSet();
   }

   default scala.collection.parallel.immutable.ParSet toSet() {
      return (scala.collection.parallel.immutable.ParSet)this.toParCollection(() -> scala.collection.parallel.immutable.ParSet$.MODULE$.newCombiner());
   }

   // $FF: synthetic method
   static scala.collection.parallel.immutable.ParMap toMap$(final ParIterableLike $this, final scala..less.colon.less ev) {
      return $this.toMap(ev);
   }

   default scala.collection.parallel.immutable.ParMap toMap(final scala..less.colon.less ev) {
      return (scala.collection.parallel.immutable.ParMap)this.toParMap(() -> scala.collection.parallel.immutable.ParMap$.MODULE$.newCombiner(), ev);
   }

   // $FF: synthetic method
   static Vector toVector$(final ParIterableLike $this) {
      return $this.toVector();
   }

   default Vector toVector() {
      return (Vector)this.to(scala.collection.IterableFactory..MODULE$.toFactory(scala.package..MODULE$.Vector()));
   }

   // $FF: synthetic method
   static Object to$(final ParIterableLike $this, final Factory factory) {
      return $this.to(factory);
   }

   default Object to(final Factory factory) {
      return factory.fromSpecific(this);
   }

   // $FF: synthetic method
   static int scanBlockSize$(final ParIterableLike $this) {
      return $this.scanBlockSize();
   }

   default int scanBlockSize() {
      return scala.runtime.RichInt..MODULE$.max$extension(scala.Predef..MODULE$.intWrapper(package$.MODULE$.thresholdFromSize(this.size(), this.tasksupport().parallelismLevel()) / 2), 1);
   }

   // $FF: synthetic method
   static Object $div$colon$(final ParIterableLike $this, final Object z, final Function2 op) {
      return $this.$div$colon(z, op);
   }

   default Object $div$colon(final Object z, final Function2 op) {
      return this.foldLeft(z, op);
   }

   // $FF: synthetic method
   static Object $colon$bslash$(final ParIterableLike $this, final Object z, final Function2 op) {
      return $this.$colon$bslash(z, op);
   }

   default Object $colon$bslash(final Object z, final Function2 op) {
      return this.foldRight(z, op);
   }

   // $FF: synthetic method
   static String debugInformation$(final ParIterableLike $this) {
      return $this.debugInformation();
   }

   default String debugInformation() {
      return (new StringBuilder(21)).append("Parallel collection: ").append(this.getClass()).toString();
   }

   // $FF: synthetic method
   static Seq brokenInvariants$(final ParIterableLike $this) {
      return $this.brokenInvariants();
   }

   default Seq brokenInvariants() {
      return (Seq)scala.collection.immutable.Nil..MODULE$;
   }

   // $FF: synthetic method
   static ArrayBuffer debugBuffer$(final ParIterableLike $this) {
      return $this.debugBuffer();
   }

   default ArrayBuffer debugBuffer() {
      return null;
   }

   // $FF: synthetic method
   static void debugclear$(final ParIterableLike $this) {
      $this.debugclear();
   }

   default void debugclear() {
      synchronized(this){}

      try {
         this.debugBuffer().clear();
      } catch (Throwable var3) {
         throw var3;
      }

   }

   // $FF: synthetic method
   static ArrayBuffer debuglog$(final ParIterableLike $this, final String s) {
      return $this.debuglog(s);
   }

   default ArrayBuffer debuglog(final String s) {
      synchronized(this){}

      ArrayBuffer var3;
      try {
         var3 = (ArrayBuffer)this.debugBuffer().$plus$eq(s);
      } catch (Throwable var5) {
         throw var5;
      }

      return var3;
   }

   // $FF: synthetic method
   static void printDebugBuffer$(final ParIterableLike $this) {
      $this.printDebugBuffer();
   }

   default void printDebugBuffer() {
      scala.Predef..MODULE$.println(DebugUtils$.MODULE$.buildString((append) -> {
         $anonfun$printDebugBuffer$1(this, append);
         return BoxedUnit.UNIT;
      }));
   }

   // $FF: synthetic method
   static void $anonfun$last$1(final ObjectRef lst$1, final Object x) {
      lst$1.elem = x;
   }

   // $FF: synthetic method
   static void $anonfun$printDebugBuffer$2(final Function1 append$1, final String s) {
      append$1.apply(s);
   }

   // $FF: synthetic method
   static void $anonfun$printDebugBuffer$1(final ParIterableLike $this, final Function1 append) {
      $this.debugBuffer().foreach((s) -> {
         $anonfun$printDebugBuffer$2(append, s);
         return BoxedUnit.UNIT;
      });
   }

   static void $init$(final ParIterableLike $this) {
      $this.scala$collection$parallel$ParIterableLike$$_tasksupport_$eq(package$.MODULE$.defaultTaskSupport());
   }

   // $FF: synthetic method
   private static Object $deserializeLambda$(SerializedLambda var0) {
      return Class.lambdaDeserialize<invokedynamic>(var0);
   }

   public interface BuilderOps {
      Otherwise ifIs(final Function1 isbody);

      boolean isCombiner();

      Combiner asCombiner();

      // $FF: synthetic method
      ParIterableLike scala$collection$parallel$ParIterableLike$BuilderOps$$$outer();

      static void $init$(final BuilderOps $this) {
      }

      public interface Otherwise {
         void otherwise(final Function0 notbody, final ClassTag t);
      }
   }

   public interface StrictSplitterCheckTask extends Task {
      default boolean requiresStrictSplitters() {
         return false;
      }

      // $FF: synthetic method
      ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer();

      static void $init$(final StrictSplitterCheckTask $this) {
         if ($this.requiresStrictSplitters() && !$this.scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer().isStrictSplitterCollection()) {
            throw new UnsupportedOperationException("This collection does not provide strict splitters.");
         }
      }
   }

   public interface Accessor extends StrictSplitterCheckTask {
      // $FF: synthetic method
      String scala$collection$parallel$ParIterableLike$Accessor$$super$toString();

      IterableSplitter pit();

      Accessor newSubtask(final IterableSplitter p);

      default boolean shouldSplitFurther() {
         return this.pit().shouldSplitFurther(this.scala$collection$parallel$ParIterableLike$Accessor$$$outer().repr(), this.scala$collection$parallel$ParIterableLike$Accessor$$$outer().tasksupport().parallelismLevel());
      }

      default Seq split() {
         return (Seq)this.pit().splitWithSignalling().map((x$6) -> this.newSubtask(x$6));
      }

      default void signalAbort() {
         this.pit().abort();
      }

      default String toString() {
         return (new StringBuilder(17)).append(this.getClass().getSimpleName()).append("(").append(this.pit().toString()).append(")(").append(this.result()).append(")(supername: ").append(this.scala$collection$parallel$ParIterableLike$Accessor$$super$toString()).append(")").toString();
      }

      // $FF: synthetic method
      ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer();

      static void $init$(final Accessor $this) {
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return var0.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public interface NonDivisibleTask extends StrictSplitterCheckTask {
      default boolean shouldSplitFurther() {
         return false;
      }

      default Nothing split() {
         throw new UnsupportedOperationException("Does not split.");
      }

      // $FF: synthetic method
      ParIterableLike scala$collection$parallel$ParIterableLike$NonDivisibleTask$$$outer();

      static void $init$(final NonDivisibleTask $this) {
      }
   }

   public abstract class Composite implements NonDivisibleTask {
      private final StrictSplitterCheckTask ft;
      private final StrictSplitterCheckTask st;
      private volatile Object result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      public boolean shouldSplitFurther() {
         return ParIterableLike.NonDivisibleTask.super.shouldSplitFurther();
      }

      public Nothing split() {
         return ParIterableLike.NonDivisibleTask.super.split();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void merge(final Object that) {
         Task.merge$(this, that);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public StrictSplitterCheckTask ft() {
         return this.ft;
      }

      public StrictSplitterCheckTask st() {
         return this.st;
      }

      public abstract Object combineResults(final Object fr, final Object sr);

      public Object result() {
         return this.result;
      }

      public void result_$eq(final Object x$1) {
         this.result = x$1;
      }

      public void signalAbort() {
         this.ft().signalAbort();
         this.st().signalAbort();
      }

      public void mergeSubtasks() {
         this.ft().mergeThrowables(this.st());
         if (this.throwable() == null) {
            this.result_$eq(this.combineResults(this.ft().result(), this.st().result()));
         }
      }

      public boolean requiresStrictSplitters() {
         return this.ft().requiresStrictSplitters() || this.st().requiresStrictSplitters();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Composite$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$NonDivisibleTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Composite$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Composite$$$outer();
      }

      public Composite(final StrictSplitterCheckTask ft, final StrictSplitterCheckTask st) {
         this.ft = ft;
         this.st = st;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.NonDivisibleTask.$init$(this);
            this.result = null;
         }
      }
   }

   public abstract class SeqComposite extends Composite {
      public void leaf(final Option prevr) {
         this.scala$collection$parallel$ParIterableLike$SeqComposite$$$outer().tasksupport().executeAndWaitResult(this.ft());
         this.scala$collection$parallel$ParIterableLike$SeqComposite$$$outer().tasksupport().executeAndWaitResult(this.st());
         this.mergeSubtasks();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$SeqComposite$$$outer() {
         return this.$outer;
      }

      public SeqComposite(final StrictSplitterCheckTask f, final StrictSplitterCheckTask s) {
         super(f, s);
      }
   }

   public abstract class ParComposite extends Composite {
      public void leaf(final Option prevr) {
         Function0 ftfuture = this.scala$collection$parallel$ParIterableLike$ParComposite$$$outer().tasksupport().execute(this.ft());
         this.scala$collection$parallel$ParIterableLike$ParComposite$$$outer().tasksupport().executeAndWaitResult(this.st());
         ftfuture.apply();
         this.mergeSubtasks();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$ParComposite$$$outer() {
         return this.$outer;
      }

      public ParComposite(final StrictSplitterCheckTask f, final StrictSplitterCheckTask s) {
         super(f, s);
      }
   }

   public abstract class ResultMapping implements NonDivisibleTask {
      private final StrictSplitterCheckTask inner;
      private volatile Object result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      public boolean shouldSplitFurther() {
         return ParIterableLike.NonDivisibleTask.super.shouldSplitFurther();
      }

      public Nothing split() {
         return ParIterableLike.NonDivisibleTask.super.split();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void merge(final Object that) {
         Task.merge$(this, that);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public StrictSplitterCheckTask inner() {
         return this.inner;
      }

      public Object result() {
         return this.result;
      }

      public void result_$eq(final Object x$1) {
         this.result = x$1;
      }

      public abstract Object map(final Object r);

      public void leaf(final Option prevr) {
         Object initialResult = this.scala$collection$parallel$ParIterableLike$ResultMapping$$$outer().tasksupport().executeAndWaitResult(this.inner());
         this.result_$eq(this.map(initialResult));
      }

      public void signalAbort() {
         this.inner().signalAbort();
      }

      public boolean requiresStrictSplitters() {
         return this.inner().requiresStrictSplitters();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$ResultMapping$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$NonDivisibleTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$ResultMapping$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$ResultMapping$$$outer();
      }

      public ResultMapping(final StrictSplitterCheckTask inner) {
         this.inner = inner;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.NonDivisibleTask.$init$(this);
            this.result = null;
         }
      }
   }

   public class Foreach implements Accessor {
      private final Function1 op;
      private final IterableSplitter pit;
      private volatile BoxedUnit result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void merge(final Object that) {
         Task.merge$(this, that);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public void result() {
         BoxedUnit var10000 = this.result;
      }

      public void result_$eq(final BoxedUnit x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prevr) {
         this.pit().foreach(this.op);
      }

      public Foreach newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Foreach$$$outer().new Foreach(this.op, p);
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Foreach$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Foreach$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Foreach$$$outer();
      }

      public Foreach(final Function1 op, final IterableSplitter pit) {
         this.op = op;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = BoxedUnit.UNIT;
         }
      }
   }

   public class Count implements Accessor {
      private final Function1 pred;
      private final IterableSplitter pit;
      private volatile int result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public int result() {
         return this.result;
      }

      public void result_$eq(final int x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prevr) {
         this.result_$eq(this.pit().count(this.pred));
      }

      public Count newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Count$$$outer().new Count(this.pred, p);
      }

      public void merge(final Count that) {
         this.result_$eq(this.result() + that.result());
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Count$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Count$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Count$$$outer();
      }

      public Count(final Function1 pred, final IterableSplitter pit) {
         this.pred = pred;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = 0;
         }
      }
   }

   public class Reduce implements Accessor {
      private final Function2 op;
      private final IterableSplitter pit;
      private volatile Option result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Option result() {
         return this.result;
      }

      public void result_$eq(final Option x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prevr) {
         if (this.pit().remaining() > 0) {
            this.result_$eq((Option)(new Some(this.pit().reduce(this.op))));
         }
      }

      public Reduce newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Reduce$$$outer().new Reduce(this.op, p);
      }

      public void merge(final Reduce that) {
         label28: {
            Option var10000 = this.result();
            None var2 = .MODULE$;
            if (var10000 == null) {
               if (var2 == null) {
                  break label28;
               }
            } else if (var10000.equals(var2)) {
               break label28;
            }

            label20: {
               var10000 = that.result();
               None var3 = .MODULE$;
               if (var10000 == null) {
                  if (var3 != null) {
                     break label20;
                  }
               } else if (!var10000.equals(var3)) {
                  break label20;
               }

               return;
            }

            this.result_$eq((Option)(new Some(this.op.apply(this.result().get(), that.result().get()))));
            return;
         }

         this.result_$eq(that.result());
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Reduce$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Reduce$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Reduce$$$outer();
      }

      public Reduce(final Function2 op, final IterableSplitter pit) {
         this.op = op;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = .MODULE$;
         }
      }
   }

   public class Fold implements Accessor {
      private final Object z;
      private final Function2 op;
      private final IterableSplitter pit;
      private volatile Object result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Object result() {
         return this.result;
      }

      public void result_$eq(final Object x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prevr) {
         this.result_$eq(this.pit().fold(this.z, this.op));
      }

      public Fold newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Fold$$$outer().new Fold(this.z, this.op, p);
      }

      public void merge(final Fold that) {
         this.result_$eq(this.op.apply(this.result(), that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Fold$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Fold$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Fold$$$outer();
      }

      public Fold(final Object z, final Function2 op, final IterableSplitter pit) {
         this.z = z;
         this.op = op;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class Aggregate implements Accessor {
      private final Function0 z;
      private final Function2 seqop;
      private final Function2 combop;
      private final IterableSplitter pit;
      private volatile Object result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Object result() {
         return this.result;
      }

      public void result_$eq(final Object x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prevr) {
         this.result_$eq(this.pit().foldLeft(this.z.apply(), this.seqop));
      }

      public Aggregate newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Aggregate$$$outer().new Aggregate(this.z, this.seqop, this.combop, p);
      }

      public void merge(final Aggregate that) {
         this.result_$eq(this.combop.apply(this.result(), that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Aggregate$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Aggregate$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Aggregate$$$outer();
      }

      public Aggregate(final Function0 z, final Function2 seqop, final Function2 combop, final IterableSplitter pit) {
         this.z = z;
         this.seqop = seqop;
         this.combop = combop;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class Sum implements Accessor {
      private final Numeric num;
      private final IterableSplitter pit;
      private volatile Object result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Object result() {
         return this.result;
      }

      public void result_$eq(final Object x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prevr) {
         this.result_$eq(this.pit().sum(this.num));
      }

      public Sum newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Sum$$$outer().new Sum(this.num, p);
      }

      public void merge(final Sum that) {
         this.result_$eq(this.num.plus(this.result(), that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Sum$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Sum$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Sum$$$outer();
      }

      public Sum(final Numeric num, final IterableSplitter pit) {
         this.num = num;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class Product implements Accessor {
      private final Numeric num;
      private final IterableSplitter pit;
      private volatile Object result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Object result() {
         return this.result;
      }

      public void result_$eq(final Object x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prevr) {
         this.result_$eq(this.pit().product(this.num));
      }

      public Product newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Product$$$outer().new Product(this.num, p);
      }

      public void merge(final Product that) {
         this.result_$eq(this.num.times(this.result(), that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Product$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Product$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Product$$$outer();
      }

      public Product(final Numeric num, final IterableSplitter pit) {
         this.num = num;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class Min implements Accessor {
      private final Ordering ord;
      private final IterableSplitter pit;
      private volatile Option result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Option result() {
         return this.result;
      }

      public void result_$eq(final Option x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prevr) {
         if (this.pit().remaining() > 0) {
            this.result_$eq((Option)(new Some(this.pit().min(this.ord))));
         }
      }

      public Min newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Min$$$outer().new Min(this.ord, p);
      }

      public void merge(final Min that) {
         label41: {
            Option var10000 = this.result();
            None var2 = .MODULE$;
            if (var10000 == null) {
               if (var2 == null) {
                  break label41;
               }
            } else if (var10000.equals(var2)) {
               break label41;
            }

            var10000 = that.result();
            None var3 = .MODULE$;
            if (var10000 == null) {
               if (var3 == null) {
                  return;
               }
            } else if (var10000.equals(var3)) {
               return;
            }

            this.result_$eq(this.ord.lteq(this.result().get(), that.result().get()) ? this.result() : that.result());
            return;
         }

         this.result_$eq(that.result());
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Min$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Min$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Min$$$outer();
      }

      public Min(final Ordering ord, final IterableSplitter pit) {
         this.ord = ord;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = .MODULE$;
         }
      }
   }

   public class Max implements Accessor {
      private final Ordering ord;
      private final IterableSplitter pit;
      private volatile Option result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Option result() {
         return this.result;
      }

      public void result_$eq(final Option x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prevr) {
         if (this.pit().remaining() > 0) {
            this.result_$eq((Option)(new Some(this.pit().max(this.ord))));
         }
      }

      public Max newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Max$$$outer().new Max(this.ord, p);
      }

      public void merge(final Max that) {
         label41: {
            Option var10000 = this.result();
            None var2 = .MODULE$;
            if (var10000 == null) {
               if (var2 == null) {
                  break label41;
               }
            } else if (var10000.equals(var2)) {
               break label41;
            }

            var10000 = that.result();
            None var3 = .MODULE$;
            if (var10000 == null) {
               if (var3 == null) {
                  return;
               }
            } else if (var10000.equals(var3)) {
               return;
            }

            this.result_$eq(this.ord.gteq(this.result().get(), that.result().get()) ? this.result() : that.result());
            return;
         }

         this.result_$eq(that.result());
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Max$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Max$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Max$$$outer();
      }

      public Max(final Ordering ord, final IterableSplitter pit) {
         this.ord = ord;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = .MODULE$;
         }
      }
   }

   public class Map implements Transformer {
      private final Function1 f;
      private final CombinerFactory cbf;
      private final IterableSplitter pit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().map2combiner(this.f, this.scala$collection$parallel$ParIterableLike$Map$$$outer().reuse(prev, this.cbf.apply())));
      }

      public Map newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Map$$$outer().new Map(this.f, this.cbf, p);
      }

      public void merge(final Map that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Map$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Map$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Map$$$outer();
      }

      public Map(final Function1 f, final CombinerFactory cbf, final IterableSplitter pit) {
         this.f = f;
         this.cbf = cbf;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class Collect implements Transformer {
      private final PartialFunction pf;
      private final CombinerFactory pbf;
      private final IterableSplitter pit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().collect2combiner(this.pf, this.pbf.apply()));
      }

      public Collect newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Collect$$$outer().new Collect(this.pf, this.pbf, p);
      }

      public void merge(final Collect that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Collect$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Collect$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Collect$$$outer();
      }

      public Collect(final PartialFunction pf, final CombinerFactory pbf, final IterableSplitter pit) {
         this.pf = pf;
         this.pbf = pbf;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class FlatMap implements Transformer {
      private final Function1 f;
      private final CombinerFactory pbf;
      private final IterableSplitter pit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().flatmap2combiner(this.f, this.pbf.apply()));
      }

      public FlatMap newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$FlatMap$$$outer().new FlatMap(this.f, this.pbf, p);
      }

      public void merge(final FlatMap that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$FlatMap$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$FlatMap$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$FlatMap$$$outer();
      }

      public FlatMap(final Function1 f, final CombinerFactory pbf, final IterableSplitter pit) {
         this.f = f;
         this.pbf = pbf;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class Forall implements Accessor {
      private final Function1 pred;
      private final IterableSplitter pit;
      private volatile boolean result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public boolean result() {
         return this.result;
      }

      public void result_$eq(final boolean x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         if (!this.pit().isAborted()) {
            this.result_$eq(this.pit().forall(this.pred));
         }

         if (!this.result()) {
            this.pit().abort();
         }
      }

      public Forall newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Forall$$$outer().new Forall(this.pred, p);
      }

      public void merge(final Forall that) {
         this.result_$eq(this.result() && that.result());
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Forall$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Forall$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Forall$$$outer();
      }

      public Forall(final Function1 pred, final IterableSplitter pit) {
         this.pred = pred;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = true;
         }
      }
   }

   public class Exists implements Accessor {
      private final Function1 pred;
      private final IterableSplitter pit;
      private volatile boolean result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public boolean result() {
         return this.result;
      }

      public void result_$eq(final boolean x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         if (!this.pit().isAborted()) {
            this.result_$eq(this.pit().exists(this.pred));
         }

         if (this.result()) {
            this.pit().abort();
         }
      }

      public Exists newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Exists$$$outer().new Exists(this.pred, p);
      }

      public void merge(final Exists that) {
         this.result_$eq(this.result() || that.result());
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Exists$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Exists$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Exists$$$outer();
      }

      public Exists(final Function1 pred, final IterableSplitter pit) {
         this.pred = pred;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = false;
         }
      }
   }

   public class Find implements Accessor {
      private final Function1 pred;
      private final IterableSplitter pit;
      private volatile Option result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Option result() {
         return this.result;
      }

      public void result_$eq(final Option x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         if (!this.pit().isAborted()) {
            this.result_$eq(this.pit().find(this.pred));
         }

         label18: {
            Option var10000 = this.result();
            None var2 = .MODULE$;
            if (var10000 == null) {
               if (var2 != null) {
                  break label18;
               }
            } else if (!var10000.equals(var2)) {
               break label18;
            }

            return;
         }

         this.pit().abort();
      }

      public Find newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Find$$$outer().new Find(this.pred, p);
      }

      public void merge(final Find that) {
         label14: {
            Option var10000 = this.result();
            None var2 = .MODULE$;
            if (var10000 == null) {
               if (var2 == null) {
                  break label14;
               }
            } else if (var10000.equals(var2)) {
               break label14;
            }

            return;
         }

         this.result_$eq(that.result());
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Find$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Find$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Find$$$outer();
      }

      public Find(final Function1 pred, final IterableSplitter pit) {
         this.pred = pred;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = .MODULE$;
         }
      }
   }

   public class Filter implements Transformer {
      private final Function1 pred;
      private final CombinerFactory cbf;
      private final IterableSplitter pit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().filter2combiner(this.pred, this.scala$collection$parallel$ParIterableLike$Filter$$$outer().reuse(prev, this.cbf.apply())));
      }

      public Filter newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Filter$$$outer().new Filter(this.pred, this.cbf, p);
      }

      public void merge(final Filter that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Filter$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Filter$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Filter$$$outer();
      }

      public Filter(final Function1 pred, final CombinerFactory cbf, final IterableSplitter pit) {
         this.pred = pred;
         this.cbf = cbf;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class FilterNot implements Transformer {
      private final Function1 pred;
      private final CombinerFactory cbf;
      private final IterableSplitter pit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().filterNot2combiner(this.pred, this.scala$collection$parallel$ParIterableLike$FilterNot$$$outer().reuse(prev, this.cbf.apply())));
      }

      public FilterNot newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$FilterNot$$$outer().new FilterNot(this.pred, this.cbf, p);
      }

      public void merge(final FilterNot that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$FilterNot$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$FilterNot$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$FilterNot$$$outer();
      }

      public FilterNot(final Function1 pred, final CombinerFactory cbf, final IterableSplitter pit) {
         this.pred = pred;
         this.cbf = cbf;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class Copy implements Transformer {
      private final CombinerFactory cfactory;
      private final IterableSplitter pit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq((Combiner)this.pit().copy2builder(this.scala$collection$parallel$ParIterableLike$Copy$$$outer().reuse(prev, this.cfactory.apply())));
      }

      public Copy newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Copy$$$outer().new Copy(this.cfactory, p);
      }

      public void merge(final Copy that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Copy$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Copy$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Copy$$$outer();
      }

      public Copy(final CombinerFactory cfactory, final IterableSplitter pit) {
         this.cfactory = cfactory;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class Partition implements Transformer {
      private final Function1 pred;
      private final CombinerFactory cbfTrue;
      private final CombinerFactory cbfFalse;
      private final IterableSplitter pit;
      private volatile Tuple2 result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Tuple2 result() {
         return this.result;
      }

      public void result_$eq(final Tuple2 x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().partition2combiners(this.pred, this.scala$collection$parallel$ParIterableLike$Partition$$$outer().reuse(prev.map((x$7) -> (Combiner)x$7._1()), this.cbfTrue.apply()), this.scala$collection$parallel$ParIterableLike$Partition$$$outer().reuse(prev.map((x$8) -> (Combiner)x$8._2()), this.cbfFalse.apply())));
      }

      public Partition newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$Partition$$$outer().new Partition(this.pred, this.cbfTrue, this.cbfFalse, p);
      }

      public void merge(final Partition that) {
         this.result_$eq(new Tuple2(((Combiner)this.result()._1()).combine((Combiner)that.result()._1()), ((Combiner)this.result()._2()).combine((Combiner)that.result()._2())));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Partition$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Partition$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Partition$$$outer();
      }

      public Partition(final Function1 pred, final CombinerFactory cbfTrue, final CombinerFactory cbfFalse, final IterableSplitter pit) {
         this.pred = pred;
         this.cbfTrue = cbfTrue;
         this.cbfFalse = cbfFalse;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class GroupBy implements Transformer {
      private final Function1 f;
      private final Function0 mcf;
      private final IterableSplitter pit;
      private volatile HashMapCombiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public HashMapCombiner result() {
         return this.result;
      }

      public void result_$eq(final HashMapCombiner x$1) {
         this.result = x$1;
      }

      public final void leaf(final Option prev) {
         HashMapCombiner cb = (HashMapCombiner)this.mcf.apply();

         while(this.pit().hasNext()) {
            Object elem = this.pit().next();
            cb.$plus$eq(scala.Predef.ArrowAssoc..MODULE$.$minus$greater$extension(scala.Predef..MODULE$.ArrowAssoc(this.f.apply(elem)), elem));
         }

         this.result_$eq(cb);
      }

      public GroupBy newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$GroupBy$$$outer().new GroupBy(this.f, this.mcf, p);
      }

      public void merge(final GroupBy that) {
         this.result_$eq((HashMapCombiner)this.result().combine(that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$GroupBy$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$GroupBy$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$GroupBy$$$outer();
      }

      public GroupBy(final Function1 f, final Function0 mcf, final IterableSplitter pit) {
         this.f = f;
         this.mcf = mcf;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class Take implements Transformer {
      private final int n;
      private final CombinerFactory cbf;
      private final IterableSplitter pit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().take2combiner(this.n, this.scala$collection$parallel$ParIterableLike$Take$$$outer().reuse(prev, this.cbf.apply())));
      }

      public Nothing newSubtask(final IterableSplitter p) {
         throw new UnsupportedOperationException();
      }

      public Seq split() {
         Seq pits = this.pit().splitWithSignalling();
         Seq sizes = (Seq)pits.scanLeft(BoxesRunTime.boxToInteger(0), (x$9, x$10) -> BoxesRunTime.boxToInteger($anonfun$split$2(BoxesRunTime.unboxToInt(x$9), x$10)));
         return (Seq)((IterableOps)pits.zip(sizes)).withFilter((check$ifrefutable$1) -> BoxesRunTime.boxToBoolean($anonfun$split$3(check$ifrefutable$1))).withFilter((x$11) -> BoxesRunTime.boxToBoolean($anonfun$split$4(this, x$11))).map((x$12) -> {
            if (x$12 != null) {
               IterableSplitter p = (IterableSplitter)x$12._1();
               int untilp = x$12._2$mcI$sp();
               return untilp + p.remaining() < this.n ? this.scala$collection$parallel$ParIterableLike$Take$$$outer().new Take(p.remaining(), this.cbf, p) : this.scala$collection$parallel$ParIterableLike$Take$$$outer().new Take(this.n - untilp, this.cbf, p);
            } else {
               throw new MatchError(x$12);
            }
         });
      }

      public void merge(final Take that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Take$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Take$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Take$$$outer();
      }

      // $FF: synthetic method
      public static final int $anonfun$split$2(final int x$9, final IterableSplitter x$10) {
         return x$9 + x$10.remaining();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$3(final Tuple2 check$ifrefutable$1) {
         return check$ifrefutable$1 != null;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$4(final Take $this, final Tuple2 x$11) {
         if (x$11 != null) {
            int untilp = x$11._2$mcI$sp();
            return untilp <= $this.n;
         } else {
            throw new MatchError(x$11);
         }
      }

      public Take(final int n, final CombinerFactory cbf, final IterableSplitter pit) {
         this.n = n;
         this.cbf = cbf;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class Drop implements Transformer {
      private final int n;
      private final CombinerFactory cbf;
      private final IterableSplitter pit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().drop2combiner(this.n, this.scala$collection$parallel$ParIterableLike$Drop$$$outer().reuse(prev, this.cbf.apply())));
      }

      public Nothing newSubtask(final IterableSplitter p) {
         throw new UnsupportedOperationException();
      }

      public Seq split() {
         Seq pits = this.pit().splitWithSignalling();
         Seq sizes = (Seq)pits.scanLeft(BoxesRunTime.boxToInteger(0), (x$13, x$14) -> BoxesRunTime.boxToInteger($anonfun$split$6(BoxesRunTime.unboxToInt(x$13), x$14)));
         return (Seq)((IterableOps)pits.zip((IterableOnce)sizes.tail())).withFilter((check$ifrefutable$2) -> BoxesRunTime.boxToBoolean($anonfun$split$7(check$ifrefutable$2))).withFilter((x$15) -> BoxesRunTime.boxToBoolean($anonfun$split$8(this, x$15))).map((x$16) -> {
            if (x$16 != null) {
               IterableSplitter p = (IterableSplitter)x$16._1();
               int withp = x$16._2$mcI$sp();
               return withp - p.remaining() > this.n ? this.scala$collection$parallel$ParIterableLike$Drop$$$outer().new Drop(0, this.cbf, p) : this.scala$collection$parallel$ParIterableLike$Drop$$$outer().new Drop(this.n - withp + p.remaining(), this.cbf, p);
            } else {
               throw new MatchError(x$16);
            }
         });
      }

      public void merge(final Drop that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Drop$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Drop$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Drop$$$outer();
      }

      // $FF: synthetic method
      public static final int $anonfun$split$6(final int x$13, final IterableSplitter x$14) {
         return x$13 + x$14.remaining();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$7(final Tuple2 check$ifrefutable$2) {
         return check$ifrefutable$2 != null;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$8(final Drop $this, final Tuple2 x$15) {
         if (x$15 != null) {
            int withp = x$15._2$mcI$sp();
            return withp >= $this.n;
         } else {
            throw new MatchError(x$15);
         }
      }

      public Drop(final int n, final CombinerFactory cbf, final IterableSplitter pit) {
         this.n = n;
         this.cbf = cbf;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class Slice implements Transformer {
      private final int from;
      private final int until;
      private final CombinerFactory cbf;
      private final IterableSplitter pit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().slice2combiner(this.from, this.until, this.scala$collection$parallel$ParIterableLike$Slice$$$outer().reuse(prev, this.cbf.apply())));
      }

      public Nothing newSubtask(final IterableSplitter p) {
         throw new UnsupportedOperationException();
      }

      public Seq split() {
         Seq pits = this.pit().splitWithSignalling();
         Seq sizes = (Seq)pits.scanLeft(BoxesRunTime.boxToInteger(0), (x$17, x$18) -> BoxesRunTime.boxToInteger($anonfun$split$10(BoxesRunTime.unboxToInt(x$17), x$18)));
         return (Seq)((IterableOps)pits.zip(sizes)).withFilter((check$ifrefutable$3) -> BoxesRunTime.boxToBoolean($anonfun$split$11(check$ifrefutable$3))).withFilter((x$19) -> BoxesRunTime.boxToBoolean($anonfun$split$12(this, x$19))).map((x$20) -> {
            if (x$20 != null) {
               IterableSplitter p = (IterableSplitter)x$20._1();
               int untilp = x$20._2$mcI$sp();
               int f = scala.runtime.RichInt..MODULE$.max$extension(scala.Predef..MODULE$.intWrapper(this.from), untilp) - untilp;
               int u = scala.runtime.RichInt..MODULE$.min$extension(scala.Predef..MODULE$.intWrapper(this.until), untilp + p.remaining()) - untilp;
               return this.scala$collection$parallel$ParIterableLike$Slice$$$outer().new Slice(f, u, this.cbf, p);
            } else {
               throw new MatchError(x$20);
            }
         });
      }

      public void merge(final Slice that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Slice$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Slice$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Slice$$$outer();
      }

      // $FF: synthetic method
      public static final int $anonfun$split$10(final int x$17, final IterableSplitter x$18) {
         return x$17 + x$18.remaining();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$11(final Tuple2 check$ifrefutable$3) {
         return check$ifrefutable$3 != null;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$12(final Slice $this, final Tuple2 x$19) {
         if (x$19 == null) {
            throw new MatchError(x$19);
         } else {
            IterableSplitter p = (IterableSplitter)x$19._1();
            int untilp = x$19._2$mcI$sp();
            return untilp + p.remaining() >= $this.from || untilp <= $this.until;
         }
      }

      public Slice(final int from, final int until, final CombinerFactory cbf, final IterableSplitter pit) {
         this.from = from;
         this.until = until;
         this.cbf = cbf;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class SplitAt implements Transformer {
      private final int at;
      private final CombinerFactory cbfBefore;
      private final CombinerFactory cbfAfter;
      private final IterableSplitter pit;
      private volatile Tuple2 result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Tuple2 result() {
         return this.result;
      }

      public void result_$eq(final Tuple2 x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().splitAt2combiners(this.at, this.scala$collection$parallel$ParIterableLike$SplitAt$$$outer().reuse(prev.map((x$21) -> (Combiner)x$21._1()), this.cbfBefore.apply()), this.scala$collection$parallel$ParIterableLike$SplitAt$$$outer().reuse(prev.map((x$22) -> (Combiner)x$22._2()), this.cbfAfter.apply())));
      }

      public Nothing newSubtask(final IterableSplitter p) {
         throw new UnsupportedOperationException();
      }

      public Seq split() {
         Seq pits = this.pit().splitWithSignalling();
         Seq sizes = (Seq)pits.scanLeft(BoxesRunTime.boxToInteger(0), (x$23, x$24) -> BoxesRunTime.boxToInteger($anonfun$split$14(BoxesRunTime.unboxToInt(x$23), x$24)));
         return (Seq)((IterableOps)pits.zip(sizes)).withFilter((check$ifrefutable$4) -> BoxesRunTime.boxToBoolean($anonfun$split$15(check$ifrefutable$4))).map((x$25) -> {
            if (x$25 != null) {
               IterableSplitter p = (IterableSplitter)x$25._1();
               int untilp = x$25._2$mcI$sp();
               return this.scala$collection$parallel$ParIterableLike$SplitAt$$$outer().new SplitAt(scala.runtime.RichInt..MODULE$.min$extension(scala.Predef..MODULE$.intWrapper(scala.runtime.RichInt..MODULE$.max$extension(scala.Predef..MODULE$.intWrapper(this.at), untilp)), untilp + p.remaining()) - untilp, this.cbfBefore, this.cbfAfter, p);
            } else {
               throw new MatchError(x$25);
            }
         });
      }

      public void merge(final SplitAt that) {
         this.result_$eq(new Tuple2(((Combiner)this.result()._1()).combine((Combiner)that.result()._1()), ((Combiner)this.result()._2()).combine((Combiner)that.result()._2())));
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$SplitAt$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$SplitAt$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$SplitAt$$$outer();
      }

      // $FF: synthetic method
      public static final int $anonfun$split$14(final int x$23, final IterableSplitter x$24) {
         return x$23 + x$24.remaining();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$15(final Tuple2 check$ifrefutable$4) {
         return check$ifrefutable$4 != null;
      }

      public SplitAt(final int at, final CombinerFactory cbfBefore, final CombinerFactory cbfAfter, final IterableSplitter pit) {
         this.at = at;
         this.cbfBefore = cbfBefore;
         this.cbfAfter = cbfAfter;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class TakeWhile implements Transformer {
      private final int pos;
      private final Function1 pred;
      private final CombinerFactory cbf;
      private final IterableSplitter pit;
      private volatile Tuple2 result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Tuple2 result() {
         return this.result;
      }

      public void result_$eq(final Tuple2 x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         if (this.pos < this.pit().indexFlag()) {
            this.result_$eq(this.pit().takeWhile2combiner(this.pred, this.scala$collection$parallel$ParIterableLike$TakeWhile$$$outer().reuse(prev.map((x$26) -> (Combiner)x$26._1()), this.cbf.apply())));
            if (!this.result()._2$mcZ$sp()) {
               this.pit().setIndexFlagIfLesser(this.pos);
            }
         } else {
            this.result_$eq(new Tuple2(this.scala$collection$parallel$ParIterableLike$TakeWhile$$$outer().reuse(prev.map((x$27) -> (Combiner)x$27._1()), this.cbf.apply()), BoxesRunTime.boxToBoolean(false)));
         }
      }

      public Nothing newSubtask(final IterableSplitter p) {
         throw new UnsupportedOperationException();
      }

      public Seq split() {
         Seq pits = this.pit().splitWithSignalling();
         return (Seq)((IterableOps)pits.zip((IterableOnce)pits.scanLeft(BoxesRunTime.boxToInteger(0), (x$28, x$29) -> BoxesRunTime.boxToInteger($anonfun$split$17(BoxesRunTime.unboxToInt(x$28), x$29))))).withFilter((check$ifrefutable$5) -> BoxesRunTime.boxToBoolean($anonfun$split$18(check$ifrefutable$5))).map((x$30) -> {
            if (x$30 != null) {
               IterableSplitter p = (IterableSplitter)x$30._1();
               int untilp = x$30._2$mcI$sp();
               return this.scala$collection$parallel$ParIterableLike$TakeWhile$$$outer().new TakeWhile(this.pos + untilp, this.pred, this.cbf, p);
            } else {
               throw new MatchError(x$30);
            }
         });
      }

      public void merge(final TakeWhile that) {
         if (this.result()._2$mcZ$sp()) {
            this.result_$eq(new Tuple2(((Combiner)this.result()._1()).combine((Combiner)that.result()._1()), BoxesRunTime.boxToBoolean(that.result()._2$mcZ$sp())));
         }
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$TakeWhile$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$TakeWhile$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$TakeWhile$$$outer();
      }

      // $FF: synthetic method
      public static final int $anonfun$split$17(final int x$28, final IterableSplitter x$29) {
         return x$28 + x$29.remaining();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$18(final Tuple2 check$ifrefutable$5) {
         return check$ifrefutable$5 != null;
      }

      public TakeWhile(final int pos, final Function1 pred, final CombinerFactory cbf, final IterableSplitter pit) {
         this.pos = pos;
         this.pred = pred;
         this.cbf = cbf;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class Span implements Transformer {
      private final int pos;
      private final Function1 pred;
      private final CombinerFactory cbfBefore;
      private final CombinerFactory cbfAfter;
      private final IterableSplitter pit;
      private volatile Tuple2 result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Tuple2 result() {
         return this.result;
      }

      public void result_$eq(final Tuple2 x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         if (this.pos < this.pit().indexFlag()) {
            this.result_$eq(this.pit().span2combiners(this.pred, this.cbfBefore.apply(), this.cbfAfter.apply()));
            if (((Sizing)this.result()._2()).size() > 0) {
               this.pit().setIndexFlagIfLesser(this.pos);
            }
         } else {
            this.result_$eq(new Tuple2(this.scala$collection$parallel$ParIterableLike$Span$$$outer().reuse(prev.map((x$31) -> (Combiner)x$31._2()), this.cbfBefore.apply()), this.pit().copy2builder(this.scala$collection$parallel$ParIterableLike$Span$$$outer().reuse(prev.map((x$32) -> (Combiner)x$32._2()), this.cbfAfter.apply()))));
         }
      }

      public Nothing newSubtask(final IterableSplitter p) {
         throw new UnsupportedOperationException();
      }

      public Seq split() {
         Seq pits = this.pit().splitWithSignalling();
         return (Seq)((IterableOps)pits.zip((IterableOnce)pits.scanLeft(BoxesRunTime.boxToInteger(0), (x$33, x$34) -> BoxesRunTime.boxToInteger($anonfun$split$20(BoxesRunTime.unboxToInt(x$33), x$34))))).withFilter((check$ifrefutable$6) -> BoxesRunTime.boxToBoolean($anonfun$split$21(check$ifrefutable$6))).map((x$35) -> {
            if (x$35 != null) {
               IterableSplitter p = (IterableSplitter)x$35._1();
               int untilp = x$35._2$mcI$sp();
               return this.scala$collection$parallel$ParIterableLike$Span$$$outer().new Span(this.pos + untilp, this.pred, this.cbfBefore, this.cbfAfter, p);
            } else {
               throw new MatchError(x$35);
            }
         });
      }

      public void merge(final Span that) {
         this.result_$eq(((Sizing)this.result()._2()).size() == 0 ? new Tuple2(((Combiner)this.result()._1()).combine((Combiner)that.result()._1()), that.result()._2()) : new Tuple2(this.result()._1(), ((Combiner)this.result()._2()).combine((Combiner)that.result()._1()).combine((Combiner)that.result()._2())));
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Span$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Span$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Span$$$outer();
      }

      // $FF: synthetic method
      public static final int $anonfun$split$20(final int x$33, final IterableSplitter x$34) {
         return x$33 + x$34.remaining();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$21(final Tuple2 check$ifrefutable$6) {
         return check$ifrefutable$6 != null;
      }

      public Span(final int pos, final Function1 pred, final CombinerFactory cbfBefore, final CombinerFactory cbfAfter, final IterableSplitter pit) {
         this.pos = pos;
         this.pred = pred;
         this.cbfBefore = cbfBefore;
         this.cbfAfter = cbfAfter;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class Zip implements Transformer {
      private final CombinerFactory pbf;
      private final IterableSplitter pit;
      private final SeqSplitter othpit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public SeqSplitter othpit() {
         return this.othpit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().zip2combiner(this.othpit(), this.pbf.apply()));
      }

      public Nothing newSubtask(final IterableSplitter p) {
         throw new UnsupportedOperationException();
      }

      public Seq split() {
         Seq pits = this.pit().splitWithSignalling();
         Seq sizes = (Seq)pits.map((x$36) -> BoxesRunTime.boxToInteger($anonfun$split$23(x$36)));
         Seq opits = this.othpit().psplitWithSignalling(sizes);
         return (Seq)((IterableOps)pits.zip(opits)).map((p) -> this.scala$collection$parallel$ParIterableLike$Zip$$$outer().new Zip(this.pbf, (IterableSplitter)p._1(), (SeqSplitter)p._2()));
      }

      public void merge(final Zip that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Zip$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Zip$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$Zip$$$outer();
      }

      // $FF: synthetic method
      public static final int $anonfun$split$23(final IterableSplitter x$36) {
         return x$36.remaining();
      }

      public Zip(final CombinerFactory pbf, final IterableSplitter pit, final SeqSplitter othpit) {
         this.pbf = pbf;
         this.pit = pit;
         this.othpit = othpit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class ZipAll implements Transformer {
      private final int len;
      private final Object thiselem;
      private final Object thatelem;
      private final CombinerFactory pbf;
      private final IterableSplitter pit;
      private final SeqSplitter othpit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public SeqSplitter othpit() {
         return this.othpit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.pit().zipAll2combiner(this.othpit(), this.thiselem, this.thatelem, this.pbf.apply()));
      }

      public Nothing newSubtask(final IterableSplitter p) {
         throw new UnsupportedOperationException();
      }

      public Seq split() {
         if (this.pit().remaining() <= this.len) {
            Seq pits = this.pit().splitWithSignalling();
            Seq sizes = (Seq)pits.map((x$37) -> BoxesRunTime.boxToInteger($anonfun$split$25(x$37)));
            Seq opits = this.othpit().psplitWithSignalling(sizes);
            return (Seq)((IterableOps)((IterableOps)pits.zip(opits)).zip(sizes)).map((t) -> this.scala$collection$parallel$ParIterableLike$ZipAll$$$outer().new ZipAll(t._2$mcI$sp(), this.thiselem, this.thatelem, this.pbf, (IterableSplitter)((Tuple2)t._1())._1(), (SeqSplitter)((Tuple2)t._1())._2()));
         } else {
            Seq opits = this.othpit().psplitWithSignalling(scala.runtime.ScalaRunTime..MODULE$.wrapIntArray(new int[]{this.pit().remaining()}));
            int diff = this.len - this.pit().remaining();
            return new scala.collection.immutable..colon.colon(this.scala$collection$parallel$ParIterableLike$ZipAll$$$outer().new ZipAll(this.pit().remaining(), this.thiselem, this.thatelem, this.pbf, this.pit(), (SeqSplitter)opits.apply(0)), new scala.collection.immutable..colon.colon(this.scala$collection$parallel$ParIterableLike$ZipAll$$$outer().new ZipAll(diff, this.thiselem, this.thatelem, this.pbf, scala.collection.parallel.immutable.package$.MODULE$.repetition(this.thiselem, diff).splitter(), (SeqSplitter)opits.apply(1)), scala.collection.immutable.Nil..MODULE$));
         }
      }

      public void merge(final ZipAll that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$ZipAll$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$ZipAll$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$ZipAll$$$outer();
      }

      // $FF: synthetic method
      public static final int $anonfun$split$25(final IterableSplitter x$37) {
         return x$37.remaining();
      }

      public ZipAll(final int len, final Object thiselem, final Object thatelem, final CombinerFactory pbf, final IterableSplitter pit, final SeqSplitter othpit) {
         this.len = len;
         this.thiselem = thiselem;
         this.thatelem = thatelem;
         this.pbf = pbf;
         this.pit = pit;
         this.othpit = othpit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class CopyToArray implements Accessor {
      private final int from;
      private final int len;
      private final Object array;
      private final IterableSplitter pit;
      private volatile BoxedUnit result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void merge(final Object that) {
         Task.merge$(this, that);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public void result() {
         BoxedUnit var10000 = this.result;
      }

      public void result_$eq(final BoxedUnit x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.pit().copyToArray(this.array, this.from, this.len);
      }

      public Nothing newSubtask(final IterableSplitter p) {
         throw new UnsupportedOperationException();
      }

      public Seq split() {
         Seq pits = this.pit().splitWithSignalling();
         return (Seq)((IterableOps)pits.zip((IterableOnce)pits.scanLeft(BoxesRunTime.boxToInteger(0), (x$38, x$39) -> BoxesRunTime.boxToInteger($anonfun$split$27(BoxesRunTime.unboxToInt(x$38), x$39))))).withFilter((check$ifrefutable$7) -> BoxesRunTime.boxToBoolean($anonfun$split$28(check$ifrefutable$7))).withFilter((x$40) -> BoxesRunTime.boxToBoolean($anonfun$split$29(this, x$40))).map((x$41) -> {
            if (x$41 != null) {
               IterableSplitter p = (IterableSplitter)x$41._1();
               int untilp = x$41._2$mcI$sp();
               int plen = scala.runtime.RichInt..MODULE$.min$extension(scala.Predef..MODULE$.intWrapper(p.remaining()), this.len - untilp);
               return this.scala$collection$parallel$ParIterableLike$CopyToArray$$$outer().new CopyToArray(this.from + untilp, plen, this.array, p);
            } else {
               throw new MatchError(x$41);
            }
         });
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$CopyToArray$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$CopyToArray$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$CopyToArray$$$outer();
      }

      // $FF: synthetic method
      public static final int $anonfun$split$27(final int x$38, final IterableSplitter x$39) {
         return x$38 + x$39.remaining();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$28(final Tuple2 check$ifrefutable$7) {
         return check$ifrefutable$7 != null;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$29(final CopyToArray $this, final Tuple2 x$40) {
         if (x$40 != null) {
            int untilp = x$40._2$mcI$sp();
            return untilp < $this.len;
         } else {
            throw new MatchError(x$40);
         }
      }

      public CopyToArray(final int from, final int len, final Object array, final IterableSplitter pit) {
         this.from = from;
         this.len = len;
         this.array = array;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = BoxedUnit.UNIT;
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class ToParCollection implements Transformer {
      private final CombinerFactory cbf;
      private final IterableSplitter pit;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.cbf.apply());

         while(this.pit().hasNext()) {
            this.result().$plus$eq(this.pit().next());
         }

      }

      public ToParCollection newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$ToParCollection$$$outer().new ToParCollection(this.cbf, p);
      }

      public void merge(final ToParCollection that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$ToParCollection$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$ToParCollection$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$ToParCollection$$$outer();
      }

      public ToParCollection(final CombinerFactory cbf, final IterableSplitter pit) {
         this.cbf = cbf;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class ToParMap implements Transformer {
      private final CombinerFactory cbf;
      private final IterableSplitter pit;
      private final scala..less.colon.less ev;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public Seq split() {
         return ParIterableLike.Accessor.super.split();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         this.result_$eq(this.cbf.apply());

         while(this.pit().hasNext()) {
            this.result().$plus$eq(this.ev.apply(this.pit().next()));
         }

      }

      public ToParMap newSubtask(final IterableSplitter p) {
         return this.scala$collection$parallel$ParIterableLike$ToParMap$$$outer().new ToParMap(this.cbf, p, this.ev);
      }

      public void merge(final ToParMap that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$ToParMap$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$ToParMap$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$ToParMap$$$outer();
      }

      public ToParMap(final CombinerFactory cbf, final IterableSplitter pit, final scala..less.colon.less ev) {
         this.cbf = cbf;
         this.pit = pit;
         this.ev = ev;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }
   }

   public class CreateScanTree implements Transformer {
      private final int from;
      private final int len;
      private final Object z;
      private final Function2 op;
      private final IterableSplitter pit;
      private volatile ScanTree result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      // $FF: synthetic method
      public String scala$collection$parallel$ParIterableLike$Accessor$$super$toString() {
         return super.toString();
      }

      public boolean shouldSplitFurther() {
         return ParIterableLike.Accessor.super.shouldSplitFurther();
      }

      public void signalAbort() {
         ParIterableLike.Accessor.super.signalAbort();
      }

      public String toString() {
         return ParIterableLike.Accessor.super.toString();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public ScanTree result() {
         return this.result;
      }

      public void result_$eq(final ScanTree x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         if (this.pit().remaining() <= 0) {
            this.result_$eq((ScanTree)null);
         } else {
            ArrayBuffer trees = (ArrayBuffer)scala.collection.mutable.ArrayBuffer..MODULE$.apply(scala.collection.immutable.Nil..MODULE$);
            int i = this.from;
            int until = this.from + this.len;

            for(int blocksize = this.scala$collection$parallel$ParIterableLike$CreateScanTree$$$outer().scanBlockSize(); i < until; i += blocksize) {
               trees.$plus$eq(this.scanBlock(i, scala.math.package..MODULE$.min(blocksize, this.pit().remaining())));
            }

            this.result_$eq(this.mergeTrees(trees, 0, trees.length()));
         }
      }

      private ScanTree scanBlock(final int from, final int len) {
         IterableSplitter pitdup = this.pit().dup();
         return this.scala$collection$parallel$ParIterableLike$CreateScanTree$$$outer().new ScanLeaf(pitdup, this.op, from, len, .MODULE$, this.pit().reduceLeft(len, this.op));
      }

      private ScanTree mergeTrees(final ArrayBuffer trees, final int from, final int howmany) {
         if (howmany > 1) {
            int half = howmany / 2;
            return this.scala$collection$parallel$ParIterableLike$CreateScanTree$$$outer().new ScanNode(this.mergeTrees(trees, from, half), this.mergeTrees(trees, from + half, howmany - half));
         } else {
            return (ScanTree)trees.apply(from);
         }
      }

      public Nothing newSubtask(final IterableSplitter pit) {
         throw new UnsupportedOperationException();
      }

      public Seq split() {
         Seq pits = this.pit().splitWithSignalling();
         return (Seq)((IterableOps)pits.zip((IterableOnce)pits.scanLeft(BoxesRunTime.boxToInteger(this.from), (x$42, x$43) -> BoxesRunTime.boxToInteger($anonfun$split$31(BoxesRunTime.unboxToInt(x$42), x$43))))).withFilter((check$ifrefutable$8) -> BoxesRunTime.boxToBoolean($anonfun$split$32(check$ifrefutable$8))).map((x$44) -> {
            if (x$44 != null) {
               IterableSplitter p = (IterableSplitter)x$44._1();
               int untilp = x$44._2$mcI$sp();
               return this.scala$collection$parallel$ParIterableLike$CreateScanTree$$$outer().new CreateScanTree(untilp, p.remaining(), this.z, this.op, p);
            } else {
               throw new MatchError(x$44);
            }
         });
      }

      public void merge(final CreateScanTree that) {
         if (this.result() != null) {
            if (that.result() != null) {
               this.result_$eq((ScanTree)(this.scala$collection$parallel$ParIterableLike$CreateScanTree$$$outer().new ScanNode(this.result(), that.result())));
            }
         } else {
            this.result_$eq(that.result());
         }
      }

      public boolean requiresStrictSplitters() {
         return true;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$CreateScanTree$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$Accessor$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$CreateScanTree$$$outer();
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$CreateScanTree$$$outer();
      }

      // $FF: synthetic method
      public static final int $anonfun$split$31(final int x$42, final IterableSplitter x$43) {
         return x$42 + x$43.remaining();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$split$32(final Tuple2 check$ifrefutable$8) {
         return check$ifrefutable$8 != null;
      }

      public CreateScanTree(final int from, final int len, final Object z, final Function2 op, final IterableSplitter pit) {
         this.from = from;
         this.len = len;
         this.z = z;
         this.op = op;
         this.pit = pit;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            ParIterableLike.Accessor.$init$(this);
            this.result = null;
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class FromScanTree implements StrictSplitterCheckTask {
      private final ScanTree tree;
      private final Object z;
      private final Function2 op;
      private final CombinerFactory cbf;
      private volatile Combiner result;
      private volatile Throwable throwable;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      public boolean requiresStrictSplitters() {
         return ParIterableLike.StrictSplitterCheckTask.super.requiresStrictSplitters();
      }

      public Object repr() {
         return Task.repr$(this);
      }

      public void forwardThrowable() {
         Task.forwardThrowable$(this);
      }

      public void tryLeaf(final Option lastres) {
         Task.tryLeaf$(this, lastres);
      }

      public void tryMerge(final Object t) {
         Task.tryMerge$(this, t);
      }

      public void mergeThrowables(final Task that) {
         Task.mergeThrowables$(this, that);
      }

      public void signalAbort() {
         Task.signalAbort$(this);
      }

      public Throwable throwable() {
         return this.throwable;
      }

      public void throwable_$eq(final Throwable x$1) {
         this.throwable = x$1;
      }

      public Combiner result() {
         return this.result;
      }

      public void result_$eq(final Combiner x$1) {
         this.result = x$1;
      }

      public void leaf(final Option prev) {
         Combiner cb = this.scala$collection$parallel$ParIterableLike$FromScanTree$$$outer().reuse(prev, this.cbf.apply());
         this.iterate(this.tree, cb);
         this.result_$eq(cb);
      }

      private void iterate(final ScanTree tree, final Combiner cb) {
         while(true) {
            boolean var5 = false;
            ScanLeaf var6 = null;
            if (!(tree instanceof ScanNode)) {
               label35: {
                  if (tree instanceof ScanLeaf) {
                     var5 = true;
                     var6 = (ScanLeaf)tree;
                     IterableSplitter p = var6.pit();
                     int len = var6.len();
                     Option var13 = var6.prev();
                     if (var13 instanceof Some) {
                        Some var14 = (Some)var13;
                        ScanLeaf prev = (ScanLeaf)var14.value();
                        p.scanToCombiner(len, prev.acc(), this.op, cb);
                        BoxedUnit var19 = BoxedUnit.UNIT;
                        break label35;
                     }
                  }

                  if (!var5) {
                     throw new MatchError(tree);
                  }

                  IterableSplitter p = var6.pit();
                  int len = var6.len();
                  Option var18 = var6.prev();
                  if (!.MODULE$.equals(var18)) {
                     throw new MatchError(tree);
                  }

                  cb.$plus$eq(this.z);
                  p.scanToCombiner(len, this.z, this.op, cb);
                  BoxedUnit var10000 = BoxedUnit.UNIT;
               }

               BoxedUnit var20 = BoxedUnit.UNIT;
               return;
            }

            ScanNode var8 = (ScanNode)tree;
            ScanTree left = var8.left();
            ScanTree right = var8.right();
            this.iterate(left, cb);
            cb = cb;
            tree = right;
         }
      }

      public Seq split() {
         ScanTree var2 = this.tree;
         if (var2 instanceof ScanNode) {
            ScanNode var3 = (ScanNode)var2;
            ScanTree left = var3.left();
            ScanTree right = var3.right();
            return new scala.collection.immutable..colon.colon(this.scala$collection$parallel$ParIterableLike$FromScanTree$$$outer().new FromScanTree(left, this.z, this.op, this.cbf), new scala.collection.immutable..colon.colon(this.scala$collection$parallel$ParIterableLike$FromScanTree$$$outer().new FromScanTree(right, this.z, this.op, this.cbf), scala.collection.immutable.Nil..MODULE$));
         } else {
            throw new UnsupportedOperationException("Cannot be split further");
         }
      }

      public boolean shouldSplitFurther() {
         ScanTree var2 = this.tree;
         if (var2 instanceof ScanNode) {
            return true;
         } else if (var2 instanceof ScanLeaf) {
            return false;
         } else {
            throw new MatchError(var2);
         }
      }

      public void merge(final FromScanTree that) {
         this.result_$eq(this.result().combine(that.result()));
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$FromScanTree$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$StrictSplitterCheckTask$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$FromScanTree$$$outer();
      }

      public FromScanTree(final ScanTree tree, final Object z, final Function2 op, final CombinerFactory cbf) {
         this.tree = tree;
         this.z = z;
         this.op = op;
         this.cbf = cbf;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            Task.$init$(this);
            ParIterableLike.StrictSplitterCheckTask.$init$(this);
            this.result = null;
         }
      }
   }

   public interface ScanTree {
      int beginsAt();

      void pushdown(final Object v);

      ScanLeaf leftmost();

      ScanLeaf rightmost();

      void print(final int depth);

      default int print$default$1() {
         return 0;
      }

      // $FF: synthetic method
      ParIterableLike scala$collection$parallel$ParIterableLike$ScanTree$$$outer();
   }

   public class ScanNode implements ScanTree, scala.Product, Serializable {
      private final ScanTree left;
      private final ScanTree right;
      private final ScanLeaf leftmost;
      private final ScanLeaf rightmost;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      public Iterator productElementNames() {
         return scala.Product.productElementNames$(this);
      }

      public int print$default$1() {
         return ParIterableLike.ScanTree.super.print$default$1();
      }

      public ScanTree left() {
         return this.left;
      }

      public ScanTree right() {
         return this.right;
      }

      public ScanLeaf leftmost() {
         return this.leftmost;
      }

      public ScanLeaf rightmost() {
         return this.rightmost;
      }

      public int beginsAt() {
         return this.left().beginsAt();
      }

      public void pushdown(final Object v) {
         this.left().pushdown(v);
         this.right().pushdown(v);
      }

      public void print(final int depth) {
         scala.Predef..MODULE$.println((new StringBuilder(20)).append(scala.collection.StringOps..MODULE$.$times$extension(scala.Predef..MODULE$.augmentString(" "), depth)).append("ScanNode, begins at ").append(this.beginsAt()).toString());
         this.left().print(depth + 1);
         this.right().print(depth + 1);
      }

      public ScanNode copy(final ScanTree left, final ScanTree right) {
         return this.scala$collection$parallel$ParIterableLike$ScanNode$$$outer().new ScanNode(left, right);
      }

      public ScanTree copy$default$1() {
         return this.left();
      }

      public ScanTree copy$default$2() {
         return this.right();
      }

      public String productPrefix() {
         return "ScanNode";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.left();
            case 1:
               return this.right();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return scala.runtime.ScalaRunTime..MODULE$.typedProductIterator(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof ScanNode;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "left";
            case 1:
               return "right";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.runtime.ScalaRunTime..MODULE$._hashCode(this);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         boolean var8;
         if (this != x$1) {
            label60: {
               if (x$1 instanceof ScanNode && ((ScanNode)x$1).scala$collection$parallel$ParIterableLike$ScanNode$$$outer() == this.scala$collection$parallel$ParIterableLike$ScanNode$$$outer()) {
                  label50: {
                     ScanNode var4 = (ScanNode)x$1;
                     ScanTree var10000 = this.left();
                     ScanTree var5 = var4.left();
                     if (var10000 == null) {
                        if (var5 != null) {
                           break label50;
                        }
                     } else if (!var10000.equals(var5)) {
                        break label50;
                     }

                     var10000 = this.right();
                     ScanTree var6 = var4.right();
                     if (var10000 == null) {
                        if (var6 != null) {
                           break label50;
                        }
                     } else if (!var10000.equals(var6)) {
                        break label50;
                     }

                     if (var4.canEqual(this)) {
                        break label60;
                     }
                  }
               }

               var8 = false;
               return var8;
            }
         }

         var8 = true;
         return var8;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$ScanNode$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$ScanTree$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$ScanNode$$$outer();
      }

      public ScanNode(final ScanTree left, final ScanTree right) {
         this.left = left;
         this.right = right;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            scala.Product.$init$(this);
            right.pushdown(left.rightmost().acc());
            right.leftmost().prev_$eq(new Some(left.rightmost()));
            this.leftmost = left.leftmost();
            this.rightmost = right.rightmost();
         }
      }
   }

   public class ScanNode$ implements Serializable {
      // $FF: synthetic field
      private final ParIterableLike $outer;

      public final String toString() {
         return "ScanNode";
      }

      public ScanNode apply(final ScanTree left, final ScanTree right) {
         return this.$outer.new ScanNode(left, right);
      }

      public Option unapply(final ScanNode x$0) {
         return (Option)(x$0 == null ? .MODULE$ : new Some(new Tuple2(x$0.left(), x$0.right())));
      }

      public ScanNode$() {
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
         }
      }
   }

   public class ScanLeaf implements ScanTree, scala.Product, Serializable {
      private final IterableSplitter pit;
      private final Function2 op;
      private final int from;
      private final int len;
      private Option prev;
      private Object acc;
      // $FF: synthetic field
      public final ParIterableLike $outer;

      public Iterator productElementNames() {
         return scala.Product.productElementNames$(this);
      }

      public int print$default$1() {
         return ParIterableLike.ScanTree.super.print$default$1();
      }

      public IterableSplitter pit() {
         return this.pit;
      }

      public Function2 op() {
         return this.op;
      }

      public int from() {
         return this.from;
      }

      public int len() {
         return this.len;
      }

      public Option prev() {
         return this.prev;
      }

      public void prev_$eq(final Option x$1) {
         this.prev = x$1;
      }

      public Object acc() {
         return this.acc;
      }

      public void acc_$eq(final Object x$1) {
         this.acc = x$1;
      }

      public int beginsAt() {
         return this.from();
      }

      public void pushdown(final Object v) {
         this.acc_$eq(this.op().apply(v, this.acc()));
      }

      public ScanLeaf leftmost() {
         return this;
      }

      public ScanLeaf rightmost() {
         return this;
      }

      public void print(final int depth) {
         scala.Predef..MODULE$.println((new StringBuilder(0)).append(scala.collection.StringOps..MODULE$.$times$extension(scala.Predef..MODULE$.augmentString(" "), depth)).append(this).toString());
      }

      public ScanLeaf copy(final IterableSplitter pit, final Function2 op, final int from, final int len, final Option prev, final Object acc) {
         return this.scala$collection$parallel$ParIterableLike$ScanLeaf$$$outer().new ScanLeaf(pit, op, from, len, prev, acc);
      }

      public IterableSplitter copy$default$1() {
         return this.pit();
      }

      public Function2 copy$default$2() {
         return this.op();
      }

      public int copy$default$3() {
         return this.from();
      }

      public int copy$default$4() {
         return this.len();
      }

      public Option copy$default$5() {
         return this.prev();
      }

      public Object copy$default$6() {
         return this.acc();
      }

      public String productPrefix() {
         return "ScanLeaf";
      }

      public int productArity() {
         return 6;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.pit();
            case 1:
               return this.op();
            case 2:
               return BoxesRunTime.boxToInteger(this.from());
            case 3:
               return BoxesRunTime.boxToInteger(this.len());
            case 4:
               return this.prev();
            case 5:
               return this.acc();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return scala.runtime.ScalaRunTime..MODULE$.typedProductIterator(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof ScanLeaf;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "pit";
            case 1:
               return "op";
            case 2:
               return "from";
            case 3:
               return "len";
            case 4:
               return "prev";
            case 5:
               return "acc";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         int var1 = -889275714;
         var1 = Statics.mix(var1, this.productPrefix().hashCode());
         var1 = Statics.mix(var1, Statics.anyHash(this.pit()));
         var1 = Statics.mix(var1, Statics.anyHash(this.op()));
         var1 = Statics.mix(var1, this.from());
         var1 = Statics.mix(var1, this.len());
         var1 = Statics.mix(var1, Statics.anyHash(this.prev()));
         var1 = Statics.mix(var1, Statics.anyHash(this.acc()));
         return Statics.finalizeHash(var1, 6);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         boolean var10;
         if (this != x$1) {
            label78: {
               if (x$1 instanceof ScanLeaf && ((ScanLeaf)x$1).scala$collection$parallel$ParIterableLike$ScanLeaf$$$outer() == this.scala$collection$parallel$ParIterableLike$ScanLeaf$$$outer()) {
                  ScanLeaf var4 = (ScanLeaf)x$1;
                  if (this.from() == var4.from() && this.len() == var4.len()) {
                     label68: {
                        IterableSplitter var10000 = this.pit();
                        IterableSplitter var5 = var4.pit();
                        if (var10000 == null) {
                           if (var5 != null) {
                              break label68;
                           }
                        } else if (!var10000.equals(var5)) {
                           break label68;
                        }

                        Function2 var8 = this.op();
                        Function2 var6 = var4.op();
                        if (var8 == null) {
                           if (var6 != null) {
                              break label68;
                           }
                        } else if (!var8.equals(var6)) {
                           break label68;
                        }

                        Option var9 = this.prev();
                        Option var7 = var4.prev();
                        if (var9 == null) {
                           if (var7 != null) {
                              break label68;
                           }
                        } else if (!var9.equals(var7)) {
                           break label68;
                        }

                        if (BoxesRunTime.equals(this.acc(), var4.acc()) && var4.canEqual(this)) {
                           break label78;
                        }
                     }
                  }
               }

               var10 = false;
               return var10;
            }
         }

         var10 = true;
         return var10;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$ScanLeaf$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public ParIterableLike scala$collection$parallel$ParIterableLike$ScanTree$$$outer() {
         return this.scala$collection$parallel$ParIterableLike$ScanLeaf$$$outer();
      }

      public ScanLeaf(final IterableSplitter pit, final Function2 op, final int from, final int len, final Option prev, final Object acc) {
         this.pit = pit;
         this.op = op;
         this.from = from;
         this.len = len;
         this.prev = prev;
         this.acc = acc;
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
            scala.Product.$init$(this);
         }
      }
   }

   public class ScanLeaf$ implements Serializable {
      // $FF: synthetic field
      private final ParIterableLike $outer;

      public final String toString() {
         return "ScanLeaf";
      }

      public ScanLeaf apply(final IterableSplitter pit, final Function2 op, final int from, final int len, final Option prev, final Object acc) {
         return this.$outer.new ScanLeaf(pit, op, from, len, prev, acc);
      }

      public Option unapply(final ScanLeaf x$0) {
         return (Option)(x$0 == null ? .MODULE$ : new Some(new Tuple6(x$0.pit(), x$0.op(), BoxesRunTime.boxToInteger(x$0.from()), BoxesRunTime.boxToInteger(x$0.len()), x$0.prev(), x$0.acc())));
      }

      public ScanLeaf$() {
         if (ParIterableLike.this == null) {
            throw null;
         } else {
            this.$outer = ParIterableLike.this;
            super();
         }
      }
   }

   public interface NonDivisible extends NonDivisibleTask {
   }

   public interface SignallingOps {
      DelegatedSignalling assign(final Signalling cntx);
   }

   public interface TaskOps {
      ResultMapping mapResult(final Function1 mapping);

      SeqComposite compose(final StrictSplitterCheckTask t2, final Function2 resCombiner);

      ParComposite parallel(final StrictSplitterCheckTask t2, final Function2 resCombiner);
   }

   public interface Transformer extends Accessor {
   }
}
