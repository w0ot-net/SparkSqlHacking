package scala.reflect.internal;

import java.io.Serializable;
import java.lang.invoke.SerializedLambda;
import java.util.IdentityHashMap;
import java.util.Objects;
import scala.Function0;
import scala.Function1;
import scala.Function2;
import scala.Function3;
import scala.MatchError;
import scala.Option;
import scala.PartialFunction;
import scala.Predef;
import scala.Product;
import scala.Some;
import scala.Tuple2;
import scala.Tuple3;
import scala.Tuple4;
import scala.Tuple5;
import scala.collection.AbstractIterable;
import scala.collection.Iterable;
import scala.collection.IterableFactory;
import scala.collection.IterableOnce;
import scala.collection.IterableOnceOps;
import scala.collection.IterableOps;
import scala.collection.Iterator;
import scala.collection.LinearSeqOps;
import scala.collection.MapFactory;
import scala.collection.SeqFactory;
import scala.collection.SeqOps;
import scala.collection.StrictOptimizedIterableOps;
import scala.collection.StrictOptimizedLinearSeqOps;
import scala.collection.StringOps;
import scala.collection.immutable.;
import scala.collection.immutable.ArraySeq;
import scala.collection.immutable.List;
import scala.collection.immutable.Nil;
import scala.collection.immutable.Seq;
import scala.collection.immutable.Set;
import scala.collection.immutable.SetOps;
import scala.collection.mutable.ArrayBuffer;
import scala.collection.mutable.BitSet;
import scala.collection.mutable.Builder;
import scala.collection.mutable.HashSet;
import scala.collection.mutable.LinkedHashSet;
import scala.collection.mutable.ListBuffer;
import scala.collection.mutable.Map;
import scala.collection.mutable.WeakHashMap;
import scala.math.Ordered;
import scala.ref.WeakReference;
import scala.reflect.ClassTag;
import scala.reflect.ScalaSignature;
import scala.reflect.internal.settings.MutableSettings;
import scala.reflect.internal.settings.MutableSettings$;
import scala.reflect.internal.tpe.CommonOwners;
import scala.reflect.internal.tpe.GlbLubs;
import scala.reflect.internal.tpe.TypeComparers;
import scala.reflect.internal.tpe.TypeConstraints;
import scala.reflect.internal.tpe.TypeMaps;
import scala.reflect.internal.tpe.TypeToStrings;
import scala.reflect.internal.util.Collections;
import scala.reflect.internal.util.Position;
import scala.reflect.internal.util.ReusableInstance;
import scala.reflect.internal.util.ReusableInstance$;
import scala.reflect.internal.util.Statistics;
import scala.reflect.internal.util.StatisticsStatics;
import scala.reflect.internal.util.ThreeValues$;
import scala.reflect.internal.util.WeakHashSet;
import scala.reflect.internal.util.WeakHashSet$;
import scala.runtime.AbstractFunction1;
import scala.runtime.AbstractFunction2;
import scala.runtime.BooleanRef;
import scala.runtime.BoxedUnit;
import scala.runtime.BoxesRunTime;
import scala.runtime.IntRef;
import scala.runtime.LazyRef;
import scala.runtime.Null;
import scala.runtime.ObjectRef;
import scala.runtime.ScalaRunTime;
import scala.runtime.Statics;
import scala.runtime.java8.JFunction0;
import scala.util.ChainingOps;
import scala.util.Either;
import scala.util.Left;
import scala.util.Right;
import scala.util.package;
import scala.util.control.ControlThrowable;

@ScalaSignature(
   bytes = "\u0006\u0005\u0011>h\u0001\u0004GW\u0019_\u0003\n1!\u0001\r>\u00126\bbBG\u0007\u0001\u0011\u0005Qr\u0002\u0005\n\u001b/\u0001\u0001\u0019)C\u0005\u001b3A\u0011\"$\t\u0001\u0001\u0004&I!d\t\t\u00135%\u0002A1A\u0005\u000e5-\u0002\"CG,\u0001\t\u0007IQBG\r\u0011%iY\u0006\u0001b\u0001\n\u001biIbB\u0004\u000e^\u0001AI!d\u0018\u0007\u000f5\u0005\u0004\u0001#\u0003\u000ed!9QR\r\u0005\u0005\u00025\u001d\u0004\u0002CG5\u0011\u0001\u0006K!d\u001b\t\u000f5E\u0004\u0002\"\u0001\u000et!I\u0011\u0013\u0011\u0001AB\u0013%a\u0012\n\u0005\n#\u0007\u0003\u0001\u0019)C\u0005#\u000bCq!%#\u0001\t\u0003qI\u0005C\u0004\u0012\f\u0002!\t!%$\t\u0013EM\u0005A1Q\u0005\nEU\u0005bBIX\u0001\u0011\u0005\u0011S\u0013\u0004\n#c\u0003\u0001\u0013aA\u0001#gCq!$\u0004\u0013\t\u0003iy\u0001C\u0004\u000f I1\t!d2\t\u000f5=(\u0003\"\u0011\u000e\u001a!9Q\u0012\u001f\n\u0005B5e\u0001bBH$%\u0011\u0005Sr\u0019\u0005\b\u001d\u0003\u0011B\u0011IG\r\u0011\u001dq\u0019A\u0005C!\u001b3Aqa$\u0017\u0013\t\u0003rI\u0005C\u0004\u0010\\I!\t%d8\t\u000f=u#\u0003\"\u0011\u000f\u0002\"9qr\f\n\u0005B5\r\u0007b\u0002H\u000b%\u0011\u0005cr\u0003\u0005\b\u001d7\u0011B\u0011\tH\f\u0011\u001dy\tG\u0005C!\u001d\u0003CqA$\u0007\u0013\t\u0003r9\u0002C\u0004\u000f\u001eI!\tEd\u0006\t\u000f9\u0005\"\u0003\"\u0011\u000eH\"9aR\u0005\n\u0005B5\u001d\u0007b\u0002H\u0015%\u0011\u0005c2\u0006\u0005\b\u001dW\u0013B\u0011IGd\u0011\u001dqIK\u0005C!\u001b\u000fDqA$\u0017\u0013\t\u0003j\u0019\rC\u0004\u0010BI!\t%d2\t\u000f=\r#\u0003\"\u0011\u000eH\"9a2\f\n\u0005B5U\u0006b\u0002H/%\u0011\u0005\u0013S\u0017\u0005\b\u001dK\u0012B\u0011\tH4\u0011\u001dq\u0019H\u0005C!\u001dkBqAd \u0013\t\u0003r\tIB\u0005\u0012:\u0002\u0001\n1!\u0001\u0012<\"9QR\u0002\u0019\u0005\u00025=\u0001bBI`a\u0011E\u0011\u0013\u0019\u0005\b#\u000f\u0004d\u0011CIe\u0011\u001dq\t\u0003\rC!\u001b\u000fDqAd\n1\t\u0003j9\rC\u0004\u000f$A\"\t%d2\t\u000f=5\u0003\u0007\"\u0011\u000eH\"9qR\n\u0019\u0005BE5\u0007bBH-a\u0011\u0005c\u0012\n\u0005\b\u001f7\u0002D\u0011IGp\u0011\u001dyi\u0006\rC!\u001d\u0003Cqad\u00181\t\u0003j\u0019\rC\u0004\u0010JA\"\t%d1\t\u000f=\r\u0004\u0007\"\u0011\u0012R\"9qR\u000e\u0019\u0005BE]\u0007bBH=a\u0011\u0005Sr\u0019\u0005\b\u001fw\u0002D\u0011IGd\u0011\u001dyi\b\rC!\u001b\u000fDq\u0001%@1\t\u0003\nj\u000eC\u0004\u0012\u0004A\"\t%%9\t\u000fEU\u0001\u0007\"\u0011\u000ff\"9ar\u0001\u0019\u0005B5e\u0001b\u0002H\u0006a\u0011\u0005\u0013S\u001d\u0005\b#O\u0001D\u0011IIu\u0011\u001d\tZ\u0007\rC!#[Dq!%\u00171\t\u0003j9mB\u0004\u0012r\u0002A\t)e=\u0007\u000fEU\b\u0001#!\u0012x\"9QR\r'\u0005\u0002I%\u0001bBI\f\u0019\u0012\u0005#3\u0002\u0005\b%\u001baE\u0011\tJ\b\u0011%y\t\u0002TA\u0001\n\u0003r)\u000fC\u0005\u0010\u00141\u000b\t\u0011\"\u0001\u000fJ!IqR\u0003'\u0002\u0002\u0013\u0005!S\u0003\u0005\n\u001fCa\u0015\u0011!C!\u001fGA\u0011b$\fM\u0003\u0003%\tA%\u0007\u0007\u00135U\u0005!!\u0001\u000e\u001865\u0005bBG3+\u0012\u0005Qr\u0014\u0005\b\u001bC+F\u0011AGR\u0011\u001di\u0019,\u0016C\u0001\u001bkCq!$1V\t\u0003i\u0019\rC\u0004\u000eFV#\t!d2\t\u000f5%W\u000b\"\u0001\u000eL\"9Q\u0012[+\u0005\u00025M\u0007bBGm+\u0012\u0005Q\u0012\u0004\u0005\b\u001b7,F\u0011AGd\u0011\u001dii.\u0016C\u0001\u001b?4q!d$\u0001\u0003\u0003i\t\nC\u0004\u000ef\u0001$\t!$<\t\u000f5=\b\r\"\u0001\u000e\u001a!9Q\u0012\u001f1\u0005\u00025e\u0001bBGzA\u0012\u0005Q\u0012\u0004\u0005\b\u001bk\u0004GQAG\r\u0011\u001di9\u0010\u0019C\u0003\u001b3Aq!$?a\t\u0003iI\u0002C\u0004\u000e|\u0002$\t!$\u0007\t\u000f5u\b\r\"\u0001\u000e\u001a!9Qr 1\u0005\u00025e\u0001b\u0002H\u0001A\u0012\u0005Q\u0012\u0004\u0005\b\u001d\u0007\u0001G\u0011AG\r\u0011\u001dq)\u0001\u0019C\u0001\u001b3AqAd\u0002a\t\u0003iI\u0002C\u0004\u000f\n\u0001$\t!$\u0007\t\u000f9-\u0001\r\"\u0001\u000f\u000e!9a2\u00031\u0005\u00025=\u0001b\u0002H\u000bA\u0012\u0005ar\u0003\u0005\b\u001d3\u0001G\u0011\u0001H\f\u0011\u001dqY\u0002\u0019C\u0001\u001d/AqA$\ba\t\u0003q9\u0002C\u0004\u000f \u0001$\t!d2\t\u000f9\u0005\u0002\r\"\u0001\u000eH\"9a2\u00051\u0005\u00025\u001d\u0007b\u0002H\u0013A\u0012\u0005Qr\u0019\u0005\b\u001dO\u0001G\u0011AGd\u0011\u001dqI\u0003\u0019C\u0001\u001dWAqAd+a\t\u0003i9\rC\u0004\u000f*\u0002$\t!d2\t\u000f9e\u0003\r\"\u0001\u000eD\"9qr\b1\u0005\u00025\u001d\u0007bBH!A\u0012\u0005Qr\u0019\u0005\b\u001f\u0007\u0002G\u0011AGd\u0011\u001dy)\u0005\u0019C\u0001\u001b\u0007Dqad\u0012a\t\u0003i9\rC\u0004\u0010J\u0001$\t!d1\t\u000f=-\u0003\r\"\u0005\u000eD\"9qR\n1\u0005\u00025\u001d\u0007bBH'A\u0012\u0005qr\n\u0005\b\u001f+\u0002G\u0011AGd\u0011\u001dy9\u0006\u0019C\u0003\u001b\u000fDqa$\u0017a\t\u0003qI\u0005C\u0004\u0010\\\u0001$\t!d8\t\u000f=u\u0003\r\"\u0001\u000f\u0002\"9qr\f1\u0005\u00025\r\u0007bBH1A\u0012\u0005a\u0012\u0011\u0005\b\u001fG\u0002G\u0011AH3\u0011\u001dyi\u0007\u0019C\u0001\u001f_Bqa$\u001ca\t\u0003i9\rC\u0004\u0010z\u0001$\t!d2\t\u000f=m\u0004\r\"\u0001\u000eH\"9qR\u00101\u0005\u00025\u001d\u0007bBH@A\u0012\u0015Qr\u0019\u0005\b\u001f\u0013\u0003G\u0011AGb\u0011\u001dyY\t\u0019C\u0001\u001b\u000fDqAd\u0017a\t\u0003i)\fC\u0004\u0010\u000e\u0002$\tad$\t\u000f=M\u0005\r\"\u0001\u000f\u0002\"9qR\u00131\u0005\u0002=]\u0005bBHNA\u0012\u0005QR\u0017\u0005\b\u001f;\u0003G\u0011AG[\u0011\u001dyy\n\u0019C\u0001\u001fCCqa$,a\t\u0003i)\fC\u0004\u00100\u0002$\t!$.\t\u000f=E\u0006\r\"\u0001\u00104\"9qr\u00171\u0005\u0002=e\u0006bBH_A\u0012\u0005qr\u0018\u0005\b\u001f\u0007\u0004G\u0011\u0001H\f\u0011\u001dy)\r\u0019C\u0001\u001f\u000fDqa$4a\t\u0003yy\rC\u0004\u0010T\u0002$\ta$6\t\u000f=}\u0007\r\"\u0001\u0010b\"9aR\f1\u0005\u0002=\u001d\bbBHvA\u0012\u0005qR\u001e\u0005\b\u001fk\u0004G\u0011AH|\u0011\u001dyY\u0010\u0019C\u0001\u001f{Dq\u0001%\u0001a\t\u0003\u0001\u001a\u0001C\u0004\u0011\b\u0001$\t\u0001%\u0003\t\u000fA=\u0001\r\"\u0001\u0011\u0012!9\u0001s\u00031\u0005\u0002Ae\u0001b\u0002I\fA\u0012\u0005\u0001s\u0004\u0005\b!K\u0001G\u0011\u0001I\u0014\u0011\u001d\u0001*\u0004\u0019C\u0001!o1a\u0001%\u0010a\u0001A}\u0002b\u0003I$\u0003S\u0012\t\u0011)A\u0005!\u0013B\u0001\"$\u001a\u0002j\u0011\u0005\u00013\n\u0005\t!\u001f\nI\u0007\"\u0001\u0011R!Aa2`A5\t\u0003\u0001Z\u0007C\u0004\u0011~\u0001$)\u0001e \t\u000fAM\u0005\r\"\u0001\u0011\u0016\"9\u0001s\n1\u0005\u0002A}\u0005b\u0002ISA\u0012\u0005\u0001s\u0015\u0005\b\u001dw\u0004G\u0011\u0001I^\u0011\u001d\u0001\n\r\u0019C\u0001!\u0007Dq\u0001e2a\t\u0003\u0001J\rC\u0004\u0011N\u0002$\t\u0001e4\t\u000fAM\u0007\r\"\u0001\u0011V\"9\u0001\u0013\u001c1\u0005\u0002Am\u0007b\u0002IpA\u0012\u0005\u0001\u0013\u001d\u0005\b!K\u0004G\u0011\u0001It\u0011\u001d\u0001Z\u000f\u0019C\u0001![Dq\u0001%=a\t\u0003\u0001\u001a\u0010C\u0004\u000ff\u0001$\tAd\u001a\t\u000f9M\u0004\r\"\u0001\u000fv!9ar\u00101\u0005\u00029\u0005\u0005b\u0002I|A\u0012\u0005\u0001\u0013 \u0005\b!{\u0004G\u0011\u0001I\u0000\u0011\u001d\t\u001a\u0001\u0019C\u0001#\u000bAq!%\u0003a\t#q)\u000fC\u0004\u0012\f\u0001$\tB$:\t\u000fE5\u0001\r\"\u0001\u0012\u0010!9\u0011S\u00031\u0005\u00029\u0015\bbBI\fA\u0012\u0015\u0013\u0013\u0004\u0005\b\u001dw\u0003G\u0011\u0001H_\u0011\u001d\tZ\u0002\u0019C\u0001\u001d{Cq!%\ba\t\u0003qi\fC\u0004\u0012 \u0001$\tA$0\t\u000fE\u0005\u0002\r\"\u0002\u000e\u001a!9\u00113\u00051\u0005\u00065e\u0001bBI\u0013A\u0012\u0005Q\u0012\u0004\u0005\b#O\u0001G\u0011AI\u0015\u0011\u001d\tj\u0003\u0019C\u0005#_Aq!%\u000ea\t\u0003\t:\u0004C\u0004\u0012>\u0001$\t!e\u0010\t\u000fE-\u0003\r\"\u0001\u000f\u0002\"9\u0011S\n1\u0005\u0002E=\u0003bBI-A\u0012\u0005Qr\u0019\u0005\b#7\u0002G\u0011AI/\u0011\u001d\t\u001a\u0007\u0019C\u0001#KBq!e\u001ba\t\u0003\tj\u0007C\u0004\u0012r\u0001$\t!e\u001d\t\u000f9\r\b\r\"\u0001\u000f>\"9aR\u001f1\u0005\u0002Ee\u0004bBH\u0002A\u0012\u0005\u0011S\u0010\u0004\b\u001dw\u0001\u0011\u0011\u0001H\u001f\u0011!i)'a4\u0005\u00029\u0015\u0003B\u0003H$\u0003\u001f\u0014\r\u0011\"\u0012\u000fJ!Ia\u0012KAhA\u00035a2\n\u0005\t\u001d'\ny\r\"\u0005\u000fJ\u00199aR\u0007\u0001\u0002\u00029]\u0002\u0002CG3\u00033$\tA$\u0016\t\u00119]\u0013\u0011\u001cD\u0001\u001b\u000fD\u0001B$\u0017\u0002Z\u0012\u0005S2\u0019\u0005\t\u001d7\nI\u000e\"\u0011\u000e6\"AaRLAm\t\u0003ry\u0006\u0003\u0005\u000ff\u0005eG\u0011\tH4\u0011!q\u0019(!7\u0005B9U\u0004\u0002\u0003H@\u00033$\tE$!\u0007\u000fIu\u0001!!\u0001\u0013 !AQRMAv\t\u0003\u0011:\u0003\u0003\u0005\u000fX\u0005-H\u0011AGd\u0011!iy/a;\u0005B5e\u0001\u0002CGy\u0003W$\t%$\u0007\t\u00119m\u00161\u001eC!\u001d{;qAe\u000b\u0001\u0011\u0003\u0013jCB\u0004\u00130\u0001A\tI%\r\t\u00115\u0015\u0014\u0011 C\u0001%gA\u0001B$\u0001\u0002z\u0012\u0005S\u0012\u0004\u0005\t\u001d7\nI\u0010\"\u0011\u000e6\"A\u0011SHA}\t\u0003\u0012*\u0004\u0003\u0005\u000f^\u0005eH\u0011\tJ \u0011!qY,!?\u0005B9u\u0006\u0002\u0003H\u0014\u0003s$\t%d2\t\u00119\r\u0018\u0011 C!\u001dKD!b$\u0005\u0002z\u0006\u0005I\u0011\tHs\u0011)y\u0019\"!?\u0002\u0002\u0013\u0005a\u0012\n\u0005\u000b\u001f+\tI0!A\u0005\u0002I\r\u0003BCH\u0011\u0003s\f\t\u0011\"\u0011\u0010$!QqRFA}\u0003\u0003%\tAe\u0012\t\u00159\u001d\u0013\u0011`A\u0001\n\u0003\u0012ZeB\u0004\u0013N\u0001A\tIe\u0014\u0007\u000fIE\u0003\u0001#!\u0013T!AQR\rB\r\t\u0003\u0011z\b\u0003\u0005\u000f<\neA\u0011\tH_\u0011!q\u0019O!\u0007\u0005B9\u0015\b\u0002\u0003JA\u00053!\tAe!\t\u0013I5%\u0011\u0004Q\u0001\u000eI=\u0005b\u0003JJ\u00053A)\u0019)C\u0005%+C!b$\u0005\u0003\u001a\u0005\u0005I\u0011\tHs\u0011)y\u0019B!\u0007\u0002\u0002\u0013\u0005a\u0012\n\u0005\u000b\u001f+\u0011I\"!A\u0005\u0002Iu\u0005BCH\u0011\u00053\t\t\u0011\"\u0011\u0010$!QqR\u0006B\r\u0003\u0003%\tA%)\t\u00159\u001d#\u0011DA\u0001\n\u0003\u0012ZE\u0002\u0004\u0013&\u0002\u0001%s\u0015\u0005\f\u001dS\u0011\u0019D!f\u0001\n\u0003rY\u0003C\u0006\u00130\nM\"\u0011#Q\u0001\n95\u0002\u0002CG3\u0005g!\tA%-\t\u00119%&1\u0007C!\u001b\u000fD\u0001Bd+\u00034\u0011\u0005Sr\u0019\u0005\t%?\u0012\u0019\u0004\"\u0011\u00138\"A!3\u000eB\u001a\t\u0003\u0012j\f\u0003\u0005\u0013t\tMB\u0011\tJb\u0011!\u0011jFa\r\u0005B9-\u0002\u0002CHN\u0005g!\t%$.\t\u0011Iu$1\u0007C!\u001b\u000fD\u0001Bd/\u00034\u0011\u0005cR\u0018\u0005\t\u001dG\u0014\u0019\u0004\"\u0011\u000ff\"AaR\u001fB\u001a\t\u0003\u0012:\r\u0003\u0005\u0010\u0004\tMB\u0011\tJf\u0011)\u0011zMa\r\u0002\u0002\u0013\u0005!\u0013\u001b\u0005\u000b%+\u0014\u0019$%A\u0005\u0002I]\u0007BCH\t\u0005g\t\t\u0011\"\u0011\u000ff\"Qq2\u0003B\u001a\u0003\u0003%\tA$\u0013\t\u0015=U!1GA\u0001\n\u0003\u0011J\u000f\u0003\u0006\u0010\"\tM\u0012\u0011!C!\u001fGA!b$\f\u00034\u0005\u0005I\u0011\u0001Jw\u0011)y\u0019Da\r\u0002\u0002\u0013\u0005#\u0013\u001f\u0005\u000b\u001d\u000f\u0012\u0019$!A\u0005BI-\u0003BCH\u001d\u0005g\t\t\u0011\"\u0011\u0013v\u001e9!\u0013 \u0001\t\u0002Imha\u0002JS\u0001!\u0005!S \u0005\t\u001bK\u0012I\u0007\"\u0001\u0014\u0010!QQ\u0012\u000fB5\u0003\u0003%\ti%\u0005\t\u0015MU!\u0011NA\u0001\n\u0003\u001b:BB\u0004\u0013X\u0001\t\tA%\u0017\t\u00115\u0015$\u0011\u000fC\u0001%7B\u0001B%\u0018\u0003r\u0011\u0005a2\u0006\u0005\t\u001b\u007f\u0014\t\b\"\u0011\u000e\u001a!Aq2\u0014B9\t\u0003j)\f\u0003\u0005\u0013`\tED\u0011\u0001J1\u0011!\u0011ZG!\u001d\u0005\u0002I5\u0004\u0002\u0003J:\u0005c\"\tA%\u001e\t\u0011Ie$\u0011\u000fC\u0001\u001b3A\u0001Be\u001f\u0003r\u0011\u0005Qr\u0019\u0005\t%{\u0012\t\b\"\u0001\u000eH\u001a11s\u0004\u0001C'CA1be\t\u0003\b\nU\r\u0011\"\u0001\u0014&!Y1S\u0006BD\u0005#\u0005\u000b\u0011BJ\u0014\u0011-y\tPa\"\u0003\u0016\u0004%\t!d2\t\u0017M=\"q\u0011B\tB\u0003%QR\u0012\u0005\f'c\u00119I!f\u0001\n\u0003q\t\tC\u0006\u00144\t\u001d%\u0011#Q\u0001\n5e\u0004bCJ\u001b\u0005\u000f\u0013\t\u0011)A\u0005\u001bsB\u0001\"$\u001a\u0003\b\u0012\u00051s\u0007\u0005\t\u001dw\u00139\t\"\u0011\u000f>\"Aa2\u001dBD\t\u0003r)\u000f\u0003\u0005\u000f \t\u001dE\u0011IGd\u0011!iyPa\"\u0005B5e\u0001\u0002\u0003J0\u0005\u000f#\te%\u0012\t\u0011M-#q\u0011C\u0001\u001b\u0007D\u0001B%\u001f\u0003\b\u0012\u0005S\u0012\u0004\u0005\t%w\u00129\t\"\u0011\u000eH\"AaR\u001fBD\t\u0003\u001aj\u0005\u0003\u0005\u0010\u0004\t\u001dE\u0011IJ)\u0011!\u0019*Fa\"\u0005\nM]s\u0001CJ1\u0005\u000fCIae\u0019\u0007\u0011M\u001d$q\u0011E\u0005'SB\u0001\"$\u001a\u00032\u0012\u000513\u000e\u0005\t'+\u0011\t\f\"\u0001\u0014n!A1\u0013\u000fBD\t\u0013\u0019\u001a\bC\u0006\u0014x\t\u001d\u0005R1A\u0005\n5\r\u0007bCJ=\u0005\u000fC)\u0019!C\u0005'wB1b%!\u0003\b\"\u0015\r\u0011\"\u0003\u000eH\"Q!s\u001aBD\u0003\u0003%\tae!\t\u0015IU'qQI\u0001\n\u0003\u0019z\t\u0003\u0006\u0014\u0014\n\u001d\u0015\u0013!C\u0001'+C!b%'\u0003\bF\u0005I\u0011AJN\u0011)y\tBa\"\u0002\u0002\u0013\u0005cR\u001d\u0005\u000b\u001f'\u00119)!A\u0005\u00029%\u0003BCH\u000b\u0005\u000f\u000b\t\u0011\"\u0001\u0014 \"Qq\u0012\u0005BD\u0003\u0003%\ted\t\t\u0015=5\"qQA\u0001\n\u0003\u0019\u001a\u000b\u0003\u0006\u00104\t\u001d\u0015\u0011!C!'OC!Bd\u0012\u0003\b\u0006\u0005I\u0011\tJ&\u0011)yIDa\"\u0002\u0002\u0013\u000533V\u0004\n'_\u0003\u0011\u0011!E\u0001'c3\u0011be\b\u0001\u0003\u0003E\tae-\t\u00115\u0015$\u0011\u001cC\u0001'kC!\"e\u0006\u0003Z\u0006\u0005IQ\tJ\u0006\u0011)i\tH!7\u0002\u0002\u0013\u00055s\u0017\u0005\u000b'+\u0011I.!A\u0005\u0002N\rwaBJh\u0001!\u00055\u0013\u001b\u0004\b''\u0004\u0001\u0012QJk\u0011!i)G!:\u0005\u0002M]\u0007\u0002CGx\u0005K$\t%$\u0007\t\u00119m&Q\u001dC!\u001d{C\u0001Bd9\u0003f\u0012\u0005cR\u001d\u0005\u000b\u001f#\u0011)/!A\u0005B9\u0015\bBCH\n\u0005K\f\t\u0011\"\u0001\u000fJ!QqR\u0003Bs\u0003\u0003%\ta%7\t\u0015=\u0005\"Q]A\u0001\n\u0003z\u0019\u0003\u0003\u0006\u0010.\t\u0015\u0018\u0011!C\u0001';D!Bd\u0012\u0003f\u0006\u0005I\u0011\tJ&\u000f\u001d\u0019\n\u000f\u0001EA'G4qa%:\u0001\u0011\u0003\u001b:\u000f\u0003\u0005\u000ef\tuH\u0011AJu\u0011!iyO!@\u0005B5e\u0001\u0002CI\u000b\u0005{$\tE$:\t\u00119m&Q C!\u001d{C\u0001Bd9\u0003~\u0012\u0005cR\u001d\u0005\u000b\u001f#\u0011i0!A\u0005B9\u0015\bBCH\n\u0005{\f\t\u0011\"\u0001\u000fJ!QqR\u0003B\u007f\u0003\u0003%\tae;\t\u0015=\u0005\"Q`A\u0001\n\u0003z\u0019\u0003\u0003\u0006\u0010.\tu\u0018\u0011!C\u0001'_D!Bd\u0012\u0003~\u0006\u0005I\u0011\tJ&\r\u001d\u0019\u001a\u0010AAA'kD1B$\u0005\u0004\u0016\tU\r\u0011\"\u0001\u000f\u0018!Y1S`B\u000b\u0005#\u0005\u000b\u0011BG\u001f\u0011!i)g!\u0006\u0005\u0002M}\b\u0002CGx\u0007+!\t%$\u0007\t\u00119e1Q\u0003C!\u001d/A\u0001Bd\b\u0004\u0016\u0011\u0005Sr\u0019\u0005\t\u001bc\u001c)\u0002\"\u0011\u000e\u001a!A\u0011SCB\u000b\t\u0003r)\u000f\u0003\u0005\u000f<\u000eUA\u0011\tH_\u0011!q9c!\u0006\u0005B5\u001d\u0007\u0002\u0003Hr\u0007+!\tE$:\t\u0015=E1QCA\u0001\n\u0003r)\u000f\u0003\u0006\u0010\u0014\rU\u0011\u0011!C\u0001\u001d\u0013B!b$\u0006\u0004\u0016\u0005\u0005I\u0011\u0001K\u0003\u0011)y\tc!\u0006\u0002\u0002\u0013\u0005s2\u0005\u0005\u000b\u001f[\u0019)\"!A\u0005\u0002Q%\u0001BCH\u001a\u0007+\t\t\u0011\"\u0011\u0015\u000e!Qq\u0012HB\u000b\u0003\u0003%\t\u0005&\u0005\b\u000fQU\u0001\u0001#\u0001\u0015\u0018\u0019913\u001f\u0001\t\u0002Qe\u0001\u0002CG3\u0007{!\t\u0001&\t\t\u00115E4Q\bC\u0001)GA!b%\u0006\u0004>\u0005\u0005I\u0011\u0011K\u0014\r\u0019!j\u0003\u0001\u0002\u00150!ia\u0012CB#\u0005\u0003\u0005\u000b\u0011BG\u001f\u0007/A\u0001\"$\u001a\u0004F\u0011\u0005A\u0013\u0007\u0004\b)o\u0001\u0011\u0011\u0011K\u001d\u0011-y\tpa\u0013\u0003\u0016\u0004%\t!d2\t\u0017M=21\nB\tB\u0003%QR\u0012\u0005\f\u001d#\u0019YE!f\u0001\n\u0003q9\u0002C\u0006\u0014~\u000e-#\u0011#Q\u0001\n5u\u0002\u0002CG3\u0007\u0017\"\t\u0001&\u0011\t\u0013Q%31\nQ!\nQ-\u0003\u0002CGx\u0007\u0017\"\t%$\u0007\t\u0011E\u001521\nC!\u001b3AA\u0002&\u0018\u0004L\u0001\u0007I\u0011\u0001GZ\u001b\u000fDA\u0002f\u0018\u0004L\u0001\u0007I\u0011\u0001GZ)CB\u0011\u0002&\u001a\u0004L\u0001\u0006K!$$\t\u0019Q=41\na\u0001\n\u0003a\u0019L$\u0013\t\u0019QE41\na\u0001\n\u0003a\u0019\ff\u001d\t\u0013Q]41\nQ!\n9-\u0003\u0002\u0003H\u0010\u0007\u0017\"\t%d2\t\u00115m81\nC!\u001b3A\u0001Bd\n\u0004L\u0011\u0005Sr\u0019\u0005\t\u001d+\u0019Y\u0005\"\u0011\u000f\u0018!Aq\u0012IB&\t\u0003j9\r\u0003\u0005\u0012\u0016\r-C\u0011\tHs\u0011!q\u0019oa\u0013\u0005B9\u0015\b\u0002\u0003H{\u0007\u0017\"\t\u0005f\u001f\t\u0011=\r11\nC!)\u007fB!b$\u0005\u0004L\u0005\u0005I\u0011\tHs\u0011)y\u0019ba\u0013\u0002\u0002\u0013\u0005a\u0012\n\u0005\u000b\u001f+\u0019Y%!A\u0005\u0002Q\r\u0005BCH\u0011\u0007\u0017\n\t\u0011\"\u0011\u0010$!QqRFB&\u0003\u0003%\t\u0001f\"\t\u0015=M21JA\u0001\n\u0003\"Z\t\u0003\u0006\u0010:\r-\u0013\u0011!C!)\u001fCQ\u0002f%\u0004L\t\u0005\t\u0011!C\u0001\u00015=qa\u0002KK\u0001!\u0005As\u0013\u0004\b)o\u0001\u0001\u0012\u0001KM\u0011!i)g!$\u0005\u0002Q\u0005\u0006\u0002CG9\u0007\u001b#\t\u0001f)\t\u0015MU1QRA\u0001\n\u0003#JK\u0002\u0004\u00156\u0002\u0011As\u0017\u0005\u000e\u001fc\u001c)J!A!\u0002\u0013iii!\u0014\t\u001b9E1Q\u0013B\u0001B\u0003%QRHB)\u0011!i)g!&\u0005\u0002Qe\u0006b\u0002Ka\u0001\u0011EA3\u0019\u0004\b)\u000f\u0004\u0011\u0011\u0011Ke\u0011-!\nna(\u0003\u0016\u0004%\t!d2\t\u0017QM7q\u0014B\tB\u0003%QR\u0012\u0005\f)+\u001cyJ!f\u0001\n\u0003i9\rC\u0006\u0015X\u000e}%\u0011#Q\u0001\n55\u0005\u0002CG3\u0007?#\t\u0001&7\t\u0013Q%3q\u0014Q!\nQ-\u0003\u0002CGx\u0007?#\t%$\u0007\t\u00119e1q\u0014C!\u001d/A\u0001Bd\b\u0004 \u0012\u0005Sr\u0019\u0005\t\u001f\u0003\u001ay\n\"\u0011\u000eH\"A\u0011SCBP\t\u0003r)\u000f\u0003\u0005\u000f(\r}E\u0011IGd\u0011!q\u0019oa(\u0005B9\u0015\b\u0002\u0003H{\u0007?#\t\u0005&9\t\u0011=\r1q\u0014C!)KD!b$\u0005\u0004 \u0006\u0005I\u0011\tHs\u0011)y\u0019ba(\u0002\u0002\u0013\u0005a\u0012\n\u0005\u000b\u001f+\u0019y*!A\u0005\u0002Q%\bBCH\u0011\u0007?\u000b\t\u0011\"\u0011\u0010$!QqRFBP\u0003\u0003%\t\u0001&<\t\u0015=M2qTA\u0001\n\u0003\"\n\u0010\u0003\u0006\u0010:\r}\u0015\u0011!C!)k<q\u0001&?\u0001\u0011\u0003!ZPB\u0004\u0015H\u0002A\t\u0001&@\t\u00115\u00154q\u001aC\u0001+\u000bA\u0001\"$\u001d\u0004P\u0012\u0005Qs\u0001\u0005\u000b'+\u0019y-!A\u0005\u0002VEaABK\r\u0001\t)Z\u0002C\u0007\u0016\f\r]'\u0011!Q\u0001\n555\u0011\u0015\u0005\u000e+\u001f\u00199N!A!\u0002\u0013iii!*\t\u00115\u00154q\u001bC\u0001+;1qAd\f\u0001\u0003\u0003s\t\u0004C\u0006\u000f\u001c\u000e}'Q3A\u0005\u00025\u001d\u0007b\u0003HO\u0007?\u0014\t\u0012)A\u0005\u001b\u001bC1Bd(\u0004`\nU\r\u0011\"\u0001\u000eH\"Ya\u0012UBp\u0005#\u0005\u000b\u0011BGG\u0011!i)ga8\u0005\u00029\r\u0006\u0002\u0003H,\u0007?$\t!d2\t\u00115=8q\u001cC!\u001b3A\u0001B$\u000b\u0004`\u0012\u0005c2\u0006\u0005\t\u001dS\u001by\u000e\"\u0011\u000eH\"Aa2VBp\t\u0003j9\r\u0003\u0005\u000f.\u000e}G\u0011\u0001HX\u0011!q)la8\u0005\n5e\u0001\u0002\u0003H\\\u0007?$I!$\u0007\t\u00119e6q\u001cC\u0001\u001b3A\u0001Bd/\u0004`\u0012\u0005cR\u0018\u0005\u000b\u001d\u001f\u001cy\u000e\"\u0001\r0:E\u0007B\u0003Ho\u0007?$\t\u0001d,\u000f`\"Aa2]Bp\t\u0003r)\u000f\u0003\u0005\u000fv\u000e}G\u0011\tH|\u0011!y\u0019aa8\u0005B=\u0015\u0001BCH\t\u0007?\f\t\u0011\"\u0011\u000ff\"Qq2CBp\u0003\u0003%\tA$\u0013\t\u0015=U1q\\A\u0001\n\u0003y9\u0002\u0003\u0006\u0010\"\r}\u0017\u0011!C!\u001fGA!b$\f\u0004`\u0006\u0005I\u0011AH\u0018\u0011)y\u0019da8\u0002\u0002\u0013\u0005sR\u0007\u0005\u000b\u001fs\u0019y.!A\u0005B=mraBK\u0013\u0001!\u0005Qs\u0005\u0004\b\u001d_\u0001\u0001\u0012AK\u0015\u0011!i)\u0007\"\u0007\u0005\u0002UE\u0002\u0002CK\u001a\t3!\tAd\u000b\t\u0011UUB\u0011\u0004C\u0001+oA\u0001\"f\u000f\u0005\u001a\u0011\u0005QS\b\u0005\t\u001bc\"I\u0002\"\u0001\u0016B!Q1S\u0003C\r\u0003\u0003%\t)f\u0012\u0007\rU-\u0003AAK'\u00115qY\nb\n\u0003\u0002\u0003\u0006I!$$\u0004b\"iar\u0014C\u0014\u0005\u0003\u0005\u000b\u0011BGG\u0007KD\u0001\"$\u001a\u0005(\u0011\u0005QsJ\u0004\b+/\u0002\u0001\u0012AK-\r\u001d)Z\u0006\u0001E\u0001+;B\u0001\"$\u001a\u00052\u0011\u0005Qs\f\u0005\t'+!\t\u0004\"\u0001\u0016b\u00199Q3\f\u0001\u0002\u0002U%\u0004\u0002CG3\to!\t!&\u001d\t\u001dUUDq\u0007a\u0001\u0002\u0004%\t\u0001d-\u000fh!qQs\u000fC\u001c\u0001\u0004\u0005\r\u0011\"\u0001\r4Ve\u0004\u0002DK?\to\u0001\r\u0011!Q!\n9%\u0004\u0002DK@\to\u0001\r\u0011\"\u0001\r4:%\u0003\u0002DKA\to\u0001\r\u0011\"\u0001\r4V\r\u0005\"CKD\to\u0001\u000b\u0015\u0002H&\u00119)J\tb\u000eA\u0002\u0003\u0007I\u0011\u0001GZ\u001d\u0003Ca\"f#\u00058\u0001\u0007\t\u0019!C\u0001\u0019g+j\t\u0003\u0007\u0016\u0012\u0012]\u0002\u0019!A!B\u0013iI\b\u0003\u0007\u0016\u0014\u0012]\u0002\u0019!C\u0001\u0019gsI\u0005\u0003\u0007\u0016\u0016\u0012]\u0002\u0019!C\u0001\u0019g+:\nC\u0005\u0016\u001c\u0012]\u0002\u0015)\u0003\u000fL!AaR\rC\u001c\t\u0003r9\u0007\u0003\u0005\u000ft\u0011]B\u0011\tH;\u0011!qy\bb\u000e\u0005B9\u0005\u0005\u0002CKO\to!\t!f(\t\u00119uCq\u0007C!+oC\u0001Bd\n\u00058\u0011\u0005Sr\u0019\u0005\t\u001bs$9\u0004\"\u0011\u000e\u001a!AQ3\u0018C\u001c\t#iI\u0002\u0003\u0005\u0016>\u0012]B\u0011CG[\u0011!)z\fb\u000e\u0005\u00129u\u0006\u0002\u0003H^\to!\tE$:\t\u001bU\u0005Gq\u0007B\u0001\u0002\u0003%\t\u0001AG\b\u0011\u001d)\u001a\r\u0001C\t+\u000bDq!&3\u0001\t#)Z\rC\u0004\u0016P\u0002!\t\"&5\u0007\rUU\u0007\u0001QKl\u0011-qI\u0006\"\u001d\u0003\u0016\u0004%\t%d1\t\u0017U}G\u0011\u000fB\tB\u0003%Q2\u0012\u0005\f\u001d7\"\tH!f\u0001\n\u0003j)\fC\u0006\u0016b\u0012E$\u0011#Q\u0001\n5]\u0006\u0002CG3\tc\"\t!f9\t\u00115EH\u0011\u000fC!\u001b3A\u0001b$\u0019\u0005r\u0011\u0005c\u0012\u0011\u0005\t\u001f\u000f\"\t\b\"\u0011\u000eH\"Aq\u0012\u0010C9\t\u000bj9\r\u0003\u0007\u0016l\u0012E\u0004\u0019!A!B\u0013ii\t\u0003\u0005\u0016n\u0012ED\u0011BGd\u0011!yY\b\"\u001d\u0005F5\u001d\u0007\u0002\u0003Hr\tc\"\tE$:\t\u00119UH\u0011\u000fC!+_D\u0001bd\u0001\u0005r\u0011\u0005S3\u001f\u0005\u000b%\u001f$\t(!A\u0005\u0002U]\bB\u0003Jk\tc\n\n\u0011\"\u0001\u0016~\"Q13\u0013C9#\u0003%\tA&\u0001\t\u0015=EA\u0011OA\u0001\n\u0003r)\u000f\u0003\u0006\u0010\u0014\u0011E\u0014\u0011!C\u0001\u001d\u0013B!b$\u0006\u0005r\u0005\u0005I\u0011\u0001L\u0003\u0011)y\t\u0003\"\u001d\u0002\u0002\u0013\u0005s2\u0005\u0005\u000b\u001f[!\t(!A\u0005\u0002Y%\u0001BCH\u001a\tc\n\t\u0011\"\u0011\u0017\u000e!Qar\tC9\u0003\u0003%\tEe\u0013\t\u0015=eB\u0011OA\u0001\n\u00032\nbB\u0004\u0017\u0016\u0001A\tAf\u0006\u0007\u000fUU\u0007\u0001#\u0001\u0017\u001a!AQR\rCU\t\u00031\n\u0003\u0003\u0005\u000er\u0011%F\u0011\u0001L\u0012\u0011)i\t\b\"+\u0002\u0002\u0013\u0005e3\u0006\u0005\u000b'+!I+!A\u0005\u0002ZEbA\u0002L\u001d\u0001\t1Z\u0004C\u0007\u000fZ\u0011M&\u0011!Q\u0001\n5-E1\u000f\u0005\u000e\u001d7\"\u0019L!A!\u0002\u0013i9\fb\u001e\t\u00179\rD1\u0017B\u0001B\u0003%QR\b\u0005\t\u001bK\"\u0019\f\"\u0001\u0017>!Aa\u0012\u0004CZ\t\u0003r9\u0002C\u0004\u0017H\u0001!\tA&\u0013\u0007\rY=\u0003\u0001\u0011L)\u0011-qI\u0006\"1\u0003\u0016\u0004%\t%d1\t\u0017U}G\u0011\u0019B\tB\u0003%Q2\u0012\u0005\f\u001d7\"\tM!f\u0001\n\u0003j)\fC\u0006\u0016b\u0012\u0005'\u0011#Q\u0001\n5]\u0006b\u0003H\r\t\u0003\u0014)\u001a!C!\u001d/A1B&\u0017\u0005B\nE\t\u0015!\u0003\u000e>!AQR\rCa\t\u00031Z\u0006\u0003\u0006\u0017d\u0011\u0005'\u0019!C\u0007-KB\u0011Bf\u001b\u0005B\u0002\u0006iAf\u001a\t\u0015Y5D\u0011\u0019b\u0001\n\u001b1z\u0007C\u0005\u0017v\u0011\u0005\u0007\u0015!\u0004\u0017r!Qas\u000fCa\u0005\u0004%iA&\u001a\t\u0013YeD\u0011\u0019Q\u0001\u000eY\u001d\u0004B\u0003L>\t\u0003\u0014\r\u0011\"\u0004\u0017p!IaS\u0010CaA\u00035a\u0013\u000f\u0005\u000b-\u007f\"\tM1A\u0005\u000eY\u0005\u0005\"\u0003LD\t\u0003\u0004\u000bQ\u0002LB\u000b\u001d1J\t\"1\u0005-\u0017C!B&&\u0005B\u0012\u0005Ar\u0017LL\u001111j\n\"1A\u0002\u0003\u0005\u000b\u0015\u0002LP\u0011)1*\u000b\"1A\u0002\u0013%a\u0012\n\u0005\u000b-O#\t\r1A\u0005\nY%\u0006\"\u0003LW\t\u0003\u0004\u000b\u0015\u0002H&\u0011!1z\u000b\"1\u0005\nYE\u0006\u0002\u0003L]\t\u0003$IAf/\t\u0011Y\rG\u0011\u0019C\u0005-\u000bD\u0001B&4\u0005B\u0012%asZ\u0004\t-+$\t\r#\u0003\u0017X\u001aAa\u0013\u001cCa\u0011\u00131Z\u000e\u0003\u0005\u000ef\u0011mH\u0011\u0001Lo\u001111Z\nb?A\u0002\u0003\u0005\u000b\u0015BG\u001f\u0011!i\t\bb?\u0005\u0002Y}\u0007\u0002\u0003Lr\tw$\tA&:\t\u0011Y=H\u0011\u0019C\u0005\u001b\u001fA\u0001B&=\u0005B\u0012%a3\u001f\u0005\t\u001dG$\t\r\"\u0011\u000ff\"AaS\u001fCa\t\u0003q)\u000f\u0003\u0005\u0016<\u0012\u0005G\u0011KG\r\u0011!)z\f\"1\u0005R9u\u0006\u0002\u0003H^\t\u0003$\tE$:\t\u0015I=G\u0011YA\u0001\n\u00031:\u0010\u0003\u0006\u0013V\u0012\u0005\u0017\u0013!C\u0001+{D!be%\u0005BF\u0005I\u0011\u0001L\u0001\u0011)\u0019J\n\"1\u0012\u0002\u0013\u0005as \u0005\u000b\u001f#!\t-!A\u0005B9\u0015\bBCH\n\t\u0003\f\t\u0011\"\u0001\u000fJ!QqR\u0003Ca\u0003\u0003%\taf\u0001\t\u0015=\u0005B\u0011YA\u0001\n\u0003z\u0019\u0003\u0003\u0006\u0010.\u0011\u0005\u0017\u0011!C\u0001/\u000fA!bd\r\u0005B\u0006\u0005I\u0011IL\u0006\u0011)q9\u0005\"1\u0002\u0002\u0013\u0005#3\n\u0005\u000b\u001fs!\t-!A\u0005B]=qaBL\n\u0001!\u0005qS\u0003\u0004\b-\u001f\u0002\u0001\u0012AL\f\u0011!i)'\"\f\u0005\u0002]}\u0001BCG9\u000b[\t\t\u0011\"!\u0018\"!Q1SCC\u0017\u0003\u0003%\ti&\u000b\u0007\r]5\u0002\u0001AL\u0018\u00115qY&\"\u000e\u0003\u0002\u0003\u0006I!d.\u0005H\"ia2MC\u001b\u0005\u0003\u0005\u000b\u0011BG\u001f\t\u0017D\u0001\"$\u001a\u00066\u0011\u0005q\u0013\u0007\u0004\b/s\u0001\u0011\u0011AL\u001e\u0011!i)'\"\u0010\u0005\u0002]\r\u0003BCII\u000b{\u0011\rQ\"\u0001\u0018H!AQr^C\u001f\t\u0003jI\u0002\u0003\u0005\u000fd\u0016uB\u0011\tHs\u000f\u001d9\u001a\u0006\u0001E\u0001/+2qa&\u000f\u0001\u0011\u00039:\u0006\u0003\u0005\u000ef\u0015%C\u0011AL0\u0011!i\t(\"\u0013\u0005\u0002]\u0005\u0004\u0002CJ\u000b\u000b\u0013\"\taf\u001a\u0007\u000f]E\u0004!!!\u0018t!Y\u0011\u0013SC)\u0005+\u0007I\u0011AL$\u0011-9*(\"\u0015\u0003\u0012\u0003\u0006Ia&\u0013\t\u00115\u0015T\u0011\u000bC\u0001/oB\u0001Bd\b\u0006R\u0011\u0005Sr\u0019\u0005\t\u001dG)\t\u0006\"\u0011\u000eH\"Aa2XC)\t\u0003ri\f\u0003\u0006\u0010\u0012\u0015E\u0013\u0011!C!\u001dKD!bd\u0005\u0006R\u0005\u0005I\u0011\u0001H%\u0011)y)\"\"\u0015\u0002\u0002\u0013\u0005qS\u0010\u0005\u000b\u001fC)\t&!A\u0005B=\r\u0002BCH\u0017\u000b#\n\t\u0011\"\u0001\u0018\u0002\"Qq2GC)\u0003\u0003%\te&\"\t\u0015=eR\u0011KA\u0001\n\u0003:JiB\u0004\u0018\u000e\u0002A\taf$\u0007\u000f]E\u0004\u0001#\u0001\u0018\u0012\"AQRMC8\t\u00039\u001a\n\u0003\u0005\u000er\u0015=D\u0011ALK\u0011)\u0019*\"b\u001c\u0002\u0002\u0013\u0005u3\u0015\u0004\u0007/3\u0003!af'\t\u001bEEUq\u000fB\u0001B\u0003%q\u0013JC*\u0011!i)'b\u001e\u0005\u0002]ueaBLU\u0001\u0005\u0005u3\u0016\u0005\f##+iH!f\u0001\n\u00039:\u0005C\u0006\u0018v\u0015u$\u0011#Q\u0001\n]%\u0003\u0002CG3\u000b{\"\ta&,\t\u00119}QQ\u0010C!\u001b\u000fD\u0001Bd\t\u0006~\u0011\u0005Sr\u0019\u0005\t\u001dw+i\b\"\u0011\u000f>\"Qq\u0012CC?\u0003\u0003%\tE$:\t\u0015=MQQPA\u0001\n\u0003qI\u0005\u0003\u0006\u0010\u0016\u0015u\u0014\u0011!C\u0001/gC!b$\t\u0006~\u0005\u0005I\u0011IH\u0012\u0011)yi#\" \u0002\u0002\u0013\u0005qs\u0017\u0005\u000b\u001fg)i(!A\u0005B]m\u0006BCH\u001d\u000b{\n\t\u0011\"\u0011\u0018@\u001e9q3\u0019\u0001\t\u0002]\u0015gaBLU\u0001!\u0005qs\u0019\u0005\t\u001bK*Y\n\"\u0001\u0018J\"AQ\u0012OCN\t\u00039Z\r\u0003\u0006\u0014\u0016\u0015m\u0015\u0011!CA/34aaf4\u0001\u0005]E\u0007\"DII\u000bG\u0013\t\u0011)A\u0005/\u0013*y\b\u0003\u0005\u000ef\u0015\rF\u0011ALj\r\u00199j\u000e\u0001\u0001\u0018`\"i\u0001tSCU\u0005\u0003\u0005\u000b\u0011BGG\r+BQ\u0002''\u0006*\n\u0005\t\u0015!\u0003\u000e>\u0019e\u0003\"\u0004MN\u000bS\u0013\t\u0011)A\u0005\u001b\u00173i\u0006\u0003\u0005\u000ef\u0015%F\u0011\u0001MO\u0011!i\t0\"+\u0005B5e\u0001\u0002CH1\u000bS#\t\u0005g*\t\u0011=\u001dS\u0011\u0016C!\u001b\u000f4a\u0001g,\u0001\u0001aE\u0006\"\u0004ML\u000bs\u0013\t\u0011)A\u0005\u001b\u001b3)\u0006C\u0007\u0019\u001a\u0016e&\u0011!Q\u0001\n5ub\u0011\f\u0005\t\u001bK*I\f\"\u0001\u0019H\"a\u0001tZC]\u0001\u0004\u0005\t\u0015)\u0003\u000e\u000e\"AarEC]\t\u0003j9\r\u0003\u0005\u000f\u0014\u0015eF\u0011IG\b\u0011!AJ&\"/\u0005RaE\u0007\u0002CI\u000f\u000bs#\tE$0\t\u0011EmQ\u0011\u0018C!\u001d{C\u0001Bd/\u0006:\u0012\u0005cR\u0018\u0005\t#+)I\f\"\u0011\u000ff\"i\u00014SC]\u0005\u0003\u0005\t\u0011\"\u0011\u0001\u001b\u001f1a\u0001'6\u0001\u0001a]\u0007\"\u0004ML\u000b'\u0014\t\u0011)A\u0005\u001b\u001b3)\u0006C\u0007\u0019\u001a\u0016M'\u0011!Q\u0001\n5ub\u0011\f\u0005\t\u001bK*\u0019\u000e\"\u0001\u0019Z\"A\u0001\u0014LCj\t#B\nO\u0002\u0004\u0019f\u0002\u0001\u0001t\u001d\u0005\u000e1/+iN!A!\u0002\u0013iiI\"\u0016\t\u001baeUQ\u001cB\u0001B\u0003%QR\bD-\u0011!i)'\"8\u0005\u0002a%\b\u0002CKw\u000b;$\t&d2\t\u0011aeSQ\u001cC)1c4a\u0001'.\u0001\u0001a]\u0006\"\u0004ML\u000bS\u0014\t\u0011)A\u0005\u001b\u001b3)\u0006C\u0007\u0019\u001a\u0016%(\u0011!Q\u0001\n5ub\u0011\f\u0005\t\u001bK*I\u000f\"\u0001\u0019:\"AQ\u0012_Cu\t\u0003jI\u0002\u0003\u0005\u0010b\u0015%H\u0011\tHA\u0011!y\u0019'\";\u0005Ba}\u0006\u0002\u0003H\u0014\u000bS$\t%d2\t\u0011=\u001dS\u0011\u001eC!1\u000bD\u0001\"&<\u0006j\u0012ESr\u0019\u0004\n1k\u0004\u0001\u0013aA\u00011oD\u0001\"$\u0004\u0006~\u0012\u0005Qr\u0002\u0005\r1s,i\u00101AAB\u0013%Qr\u0019\u0005\r1w,i\u00101AAB\u0013%\u0001T \u0005\u000b3\u0003)i\u00101Q\u0005\ne\r\u0001BCM\b\u000b{\u0004\r\u0015\"\u0003\u001a\u0012!a\u0011TCC\u007f\u0001\u0004\u0005\r\u0015\"\u0003\u000eH\"a\u0011tCC\u007f\u0001\u0004\u0005\r\u0015\"\u0003\u001a\u001a!A\u0001TEC\u007f\t+j9\r\u0003\u0005\u001a\u001e\u0015uH\u0011BG\b\u00115A\u001a*\"@\u0003\u0002\u0003\u0005I\u0011\t\u0001\u000e\u0010!y\u0011tDC\u007f!\u0003\r\t\u0011!C\u0005\u001b\u001f1i\u000fC\b\u001a\"\u0015u\b\u0013aA\u0001\u0002\u0013%Qr\u0019DF\r%I\u001a\u0003\u0001I\u0001\u0004\u0003I*\u0003\u0003\u0005\u000e\u000e\u0019]A\u0011AG\b\u0011!yiHb\u0006\u0005B5\u001d\u0007\u0002\u0003H\u0014\r/!\t%d2\t\u0011=\u0005cq\u0003C!\u001b\u000fD\u0001B$\u0006\u0007\u0018\u0011\u0005cr\u0003\u0005\t\u001d319\u0002\"\u0011\u000f\u0018!Aa\u0012\u0001D\f\t\u0003jI\u0002C\u0005\u0019L\u0019]A\u0011\u000b\u0001\u000eD\"Aar\u0010D\f\t\u0003r\t\t\u0003\u0005\u000f\\\u0019]A\u0011IG[\u0011!)jOb\u0006\u0005R5\u001d\u0007\u0002CHF\r/!\t%d2\t\u0011a}bq\u0003C!3SA\u0001Bd9\u0007\u0018\u0011\u0005cR\u001d\u0005\u00103_19\u0002%A\u0002\u0002\u0003%I!d2\u0002*!y\u0011\u0014\u0007D\f!\u0003\r\t\u0011!C\u0005\u001d/1Y\u000b\u0003\b\u001a4\u0019]\u0001\u0013aA\u0001\u0002\u0013%Q\u0012D6\t\u001feUbq\u0003I\u0001\u0004\u0003\u0005I\u0011BGd\r/Cq!g\u000e\u0001\t\u0013IJDB\u0005\u001a@\u0001\u0001\n1!\u0001\u001aB!AQR\u0002D \t\u0003iy\u0001\u0003\u0005\u000f\u0000\u0019}B\u0011\tHA\u0011!qYFb\u0010\u0005B5U\u0006\u0002\u0003H\u0015\r\u007f!\tEd\u000b\t\u00119%fq\bC!\u001b\u000fD\u0001Bd+\u0007@\u0011\u0005Sr\u0019\u0005\n1\u001b2y\u0004\"\u0015\u0001\u001dOB\u0011\u0002g\u0013\u0007@\u0011E\u0003!d1\t\u00119\rhq\bC!\u001dK4qaf9\u0001\u0003\u0003;*\u000fC\u0006\u0010r\u001aM#Q3A\u0005\u00025\u001d\u0007bCJ\u0018\r'\u0012\t\u0012)A\u0005\u001b\u001bC1B$\u0005\u0007T\tU\r\u0011\"\u0001\u000f\u0018!Y1S D*\u0005#\u0005\u000b\u0011BG\u001f\u0011-9jOb\u0015\u0003\u0016\u0004%\t!d1\t\u0017]=h1\u000bB\tB\u0003%Q2\u0012\u0005\t\u001bK2\u0019\u0006\"\u0001\u0018r\"AaR\u001fD*\t\u0003:J\u0010\u0003\u0005\u0010\u0004\u0019MC\u0011IL\u007f\u0011%!JEb\u0015!B\u0013!Z\u0005\u0003\u0005\u000ep\u001aMC\u0011IG\r\u0011!qIAb\u0015\u0005B5e\u0001B\u0004M\u0001\r'\u0002\r\u00111A\u0005\u00021MV2\u0019\u0005\u000f1\u00071\u0019\u00061AA\u0002\u0013\u0005A2\u0017M\u0003\u00111AJAb\u0015A\u0002\u0003\u0005\u000b\u0015BGF\u00111AZAb\u0015A\u0002\u0013\u0005A2\u0017H%\u00111AjAb\u0015A\u0002\u0013\u0005A2\u0017M\b\u0011%A\u001aBb\u0015!B\u0013qY\u0005\u0003\b\u0016v\u0019M\u0003\u0019!a\u0001\n\u0003a\u0019Ld\u001a\t\u001dU]d1\u000ba\u0001\u0002\u0004%\t\u0001d-\u0019\u0016!aQS\u0010D*\u0001\u0004\u0005\t\u0015)\u0003\u000fj!aQs\u0010D*\u0001\u0004%\t\u0001d-\u000fJ!aQ\u0013\u0011D*\u0001\u0004%\t\u0001d-\u0019\u001a!IQs\u0011D*A\u0003&a2\n\u0005\r+W4\u0019\u00061A\u0001B\u0003&QR\u0012\u0005\t\u001d'2\u0019\u0006\"\u0012\u000fJ!Aq\u0012\bD*\t\u000bBz\u0002\u0003\u0005\u0019&\u0019MC\u0011CGd\u0011!A:Cb\u0015\u0005\u0006a%\u0002\u0002\u0003M\u0017\r'\"I!d1\t\u00119uc1\u000bC#1_A\u0001\u0002g\r\u0007T\u0011%\u0001T\u0007\u0005\t1s1\u0019\u0006\"\u0003\u0019<!AQS\u001eD*\t#i9\r\u0003\u0005\u0010z\u0019MCQIGd\u0011!\t*Cb\u0015\u0005B5e\u0001\u0002CH>\r'\")%d2\t\u0011a}b1\u000bC\u00011\u0003B\u0001\u0002g\u0012\u0007T\u0011\u0005a\u0012\u0011\u0005\t1\u00132\u0019\u0006\"\u0001\u000e\u001a!Aa2\u000fD*\t\u0003r)\b\u0003\u0005\u0010B\u0019MC\u0011IGd\u0011!y\u0019Eb\u0015\u0005B5\u001d\u0007\u0002\u0003H\u000b\r'\"\tEd\u0006\t\u00119ma1\u000bC!\u001d/A\u0001b$\u0013\u0007T\u0011\u0005S2\u0019\u0005\t\u001dK1\u0019\u0006\"\u0011\u000eH\"Aa\u0012\u0004D*\t\u0003r9\u0002\u0003\u0005\u000f\u001e\u0019MC\u0011\tH\f\u0011!qIFb\u0015\u0005B5\r\u0007\"\u0003M&\r'\"\t\u0002AGb\u0011!qyHb\u0015\u0005B9\u0005\u0005\u0002\u0003H.\r'\"\t%$.\t\u0013a5c1\u000bC\t\u00019\u001d\u0004\u0002\u0003H3\r'\"\tEd\u001a\t\u0011a=c1\u000bC\u0005\u001b3A\u0001\u0002'\u0015\u0007T\u0011%aR\u001d\u0005\t1'2\u0019\u0006\"\u0003\u000f>\"A\u0011s\u0004D*\t\u0003r)\u000f\u0003\u0005\u0019V\u0019MC\u0011BG[\u0011!A:Fb\u0015\u0005\n9u\u0006\u0002\u0003M-\r'\"\t\u0002g\u0017\t\u0011a\u0005d1\u000bC\u0005\u001dKD\u0001\u0002g\u0019\u0007T\u0011%aR\u0018\u0005\t1K2\u0019\u0006\"\u0003\u000f>\"A\u0001t\rD*\t\u0013q)\u000f\u0003\u0005\u000f<\u001aMC\u0011\tH_\u0011!\t*Bb\u0015\u0005B9\u0015\b\u0002\u0003Jh\r'\"I\u0001'\u001b\t\u00119\rh1\u000bC!\u001dKD!b$\u0005\u0007T\u0005\u0005I\u0011\tHs\u0011)y\u0019Bb\u0015\u0002\u0002\u0013\u0005a\u0012\n\u0005\u000b\u001f+1\u0019&!A\u0005\u0002a\u001d\u0005BCH\u0011\r'\n\t\u0011\"\u0011\u0010$!QqR\u0006D*\u0003\u0003%\t\u0001g#\t\u0015=Mb1KA\u0001\n\u0003Bz\tC\u0007\u0019\u0014\u001aM#\u0011!A\u0001\n\u0003\u0001Qr\u0002\u0005\u000e1+3\u0019F!A\u0001\u0002\u0013\u0015\u0001!d\u0004\b\u000fe\r\u0003\u0001#\u0001\u001aF\u00199q3\u001d\u0001\t\u0002e\u001d\u0003\u0002CG3\rg$\t!g\u0014\t\u00115Ed1\u001fC\u00013#B!b%\u0006\u0007t\u0006\u0005I\u0011QM-\r\u0019I\n\u0007\u0001\u0004\u001ad!iq\u0012\u001fD~\u0005\u0003\u0005\u000b\u0011BGG\r+BQB$\u0005\u0007|\n\u0005\t\u0015!\u0003\u000e>\u0019e\u0003\"DLw\rw\u0014\t\u0011)A\u0005\u001b\u00173i\u0006\u0003\u0005\u000ef\u0019mH\u0011AM4\r\u0019I\n\b\u0001\u0004\u001at!iq\u0012_D\u0003\u0005\u0003\u0005\u000b\u0011BGG\r+BQB$\u0005\b\u0006\t\u0005\t\u0015!\u0003\u000e>\u0019e\u0003\"DLw\u000f\u000b\u0011\t\u0011)A\u0005\u001b\u00173i\u0006\u0003\u0005\u000ef\u001d\u0015A\u0011AM<\r\u0019I\n\t\u0001\u0004\u001a\u0004\"iq\u0012_D\b\u0005\u0003\u0005\u000b\u0011BGG\r+BQB$\u0005\b\u0010\t\u0005\t\u0015!\u0003\u000e>\u0019e\u0003\"DLw\u000f\u001f\u0011\t\u0011)A\u0005\u001b\u00173i\u0006\u0003\u0005\u000ef\u001d=A\u0011AMC\r\u0019Iz\t\u0001\u0004\u001a\u0012\"iq\u0012_D\r\u0005\u0003\u0005\u000b\u0011BGG\r+BQB$\u0005\b\u001a\t\u0005\t\u0015!\u0003\u000e>\u0019e\u0003\u0002CG3\u000f3!\t!g%\u0007\rem\u0005ABMO\u00115y\tp\"\t\u0003\u0002\u0003\u0006I!$$\u0007V!ia\u0012CD\u0011\u0005\u0003\u0005\u000b\u0011BG\u001f\r3B\u0001\"$\u001a\b\"\u0011\u0005\u0011t\u0014\u0004\u00073O\u0003a!'+\t\u001b=Ex\u0011\u0006B\u0001B\u0003%QR\u0012D+\u00115q\tb\"\u000b\u0003\u0002\u0003\u0006I!$\u0010\u0007Z!AQRMD\u0015\t\u0003IZ\u000b\u0003\u0005\u0011H\u001e%B\u0011IMZ\r!I:\f\u0001\u0002\r0fe\u0006\u0002CG3\u000fg!\t!g/\t\u0011A\u001dw1\u0007C!3\u007fCq!g1\u0001\t#I*\rC\u0004\u001aL\u0002!\t\"'4\t\u000feE\u0007\u0001\"\u0005\u001aT\u001a1\u0011t\u001b\u0001A33D1b$\u0018\b@\tU\r\u0011\"\u0011\u000f\u0002\"Y\u0011\u0014]D \u0005#\u0005\u000b\u0011BG=\u0011-yieb\u0010\u0003\u0016\u0004%\t%d2\t\u0017e\rxq\bB\tB\u0003%QR\u0012\u0005\t\u001bK:y\u0004\"\u0001\u001af\"IA\u0013JD A\u0003&A3\n\u0005\t\u001b_<y\u0004\"\u0011\u000e\u001a!A\u0011T^D \t\u0013iI\u0002\u0003\u0005\u001ap\u001e}B\u0011BG\r\u0011!I\npb\u0010\u0005\u00025e\u0001\u0002CH-\u000f\u007f!\tE$\u0013\t\u0011=msq\bC!\u001b?D\u0001bd\u0018\b@\u0011\u0005S2\u0019\u0005\t3g<y\u0004\"\u0002\u000eH\"AqRJD \t\u0003J*\u0010\u0003\u0005\u001az\u001e}B\u0011BM~\u0011%Izpb\u0010!B\u0013!Z\u0005\u0003\u0005\u000e~\u001e}B\u0011IG\r\u0011!Q\nab\u0010\u0005\u0002i\r\u0001\u0002\u0003H^\u000f\u007f!\tE$:\t\u0011Auxq\bC!5\u000bA\u0001\"e\u0001\b@\u0011\u0005#\u0014\u0002\u0005\t\u001dG<y\u0004\"\u0011\u000ff\"AaR_D \t\u0003Rj\u0001\u0003\u0005\u0010\u0004\u001d}B\u0011\tN\t\u0011)\u0011zmb\u0010\u0002\u0002\u0013\u0005!T\u0003\u0005\u000b%+<y$%A\u0005\u0002Mm\u0005BCJJ\u000f\u007f\t\n\u0011\"\u0001\u0014\u0016\"Qq\u0012CD \u0003\u0003%\tE$:\t\u0015=MqqHA\u0001\n\u0003qI\u0005\u0003\u0006\u0010\u0016\u001d}\u0012\u0011!C\u000157A!b$\t\b@\u0005\u0005I\u0011IH\u0012\u0011)yicb\u0010\u0002\u0002\u0013\u0005!t\u0004\u0005\u000b\u001fg9y$!A\u0005Bi\r\u0002B\u0003H$\u000f\u007f\t\t\u0011\"\u0011\u0013L!Qq\u0012HD \u0003\u0003%\tEg\n\b\u000fi-\u0002\u0001#\u0001\u001b.\u00199\u0011t\u001b\u0001\t\u0002i=\u0002\u0002CG3\u000f\u0017#\tAg\u000e\t\u00155Et1RA\u0001\n\u0003SJ\u0004\u0003\u0006\u0014\u0016\u001d-\u0015\u0011!CA5\u007f1aAg\u0012\u0001\u0001j%\u0003bCH'\u000f'\u0013)\u001a!C!\u001b\u000fD1\"g9\b\u0014\nE\t\u0015!\u0003\u000e\u000e\"AQRMDJ\t\u0003Q\n\u0006\u0003\u0005\u000ep\u001eME\u0011IG\r\u0011!y\teb%\u0005B5\u001d\u0007\u0002\u0003H\u0014\u000f'#\t%d2\t\u00119Uq1\u0013C!\u001d/A\u0001B$\u0007\b\u0014\u0012\u0005cr\u0003\u0005\t\u001d3:\u0019\n\"\u0011\u000eD\"Aa2LDJ\t\u0003j)\f\u0003\u0005\u000ff\u001dME\u0011\tH4\u0011!q\u0019hb%\u0005B9U\u0004\u0002\u0003H@\u000f'#\tE$!\t\u00119us1\u0013C!5/B\u0001Bd/\b\u0014\u0012\u0005cR\u0018\u0005\t\u001dG<\u0019\n\"\u0011\u000ff\"AaR_DJ\t\u0003RZ\u0006\u0003\u0005\u0010\u0004\u001dME\u0011\tN0\u0011)\u0011zmb%\u0002\u0002\u0013\u0005!4\r\u0005\u000b%+<\u0019*%A\u0005\u0002MU\u0005BCH\t\u000f'\u000b\t\u0011\"\u0011\u000ff\"Qq2CDJ\u0003\u0003%\tA$\u0013\t\u0015=Uq1SA\u0001\n\u0003Q:\u0007\u0003\u0006\u0010\"\u001dM\u0015\u0011!C!\u001fGA!b$\f\b\u0014\u0006\u0005I\u0011\u0001N6\u0011)y\u0019db%\u0002\u0002\u0013\u0005#t\u000e\u0005\u000b\u001d\u000f:\u0019*!A\u0005BI-\u0003BCH\u001d\u000f'\u000b\t\u0011\"\u0011\u001bt\u001d9!t\u000f\u0001\t\u0002ieda\u0002N$\u0001!\u0005!4\u0010\u0005\t\u001bK:y\r\"\u0001\u001b\u0004\"QQ\u0012ODh\u0003\u0003%\tI'\"\t\u0015MUqqZA\u0001\n\u0003SJI\u0002\u0004\u001b\u000e\u0002\u0001%t\u0012\u0005\f\u001fC:9N!f\u0001\n\u0003r\t\tC\u0006\u001b\u0018\u001e]'\u0011#Q\u0001\n5e\u0004bCH'\u000f/\u0014)\u001a!C!\u001b\u000fD1\"g9\bX\nE\t\u0015!\u0003\u000e\u000e\"AQRMDl\t\u0003QJ\n\u0003\u0005\u0010Z\u001d]G\u0011\tH%\u0011!yYfb6\u0005B5}\u0007\u0002CH/\u000f/$\tE$!\t\u0011=}sq\u001bC!\u001b\u0007D\u0001B$\u0017\bX\u0012\u0005S2\u0019\u0005\t\u001d7:9\u000e\"\u0011\u000e6\"AaRCDl\t\u0003r9\u0002\u0003\u0005\u000f\u001a\u001d]G\u0011\tH\f\u0011!y\teb6\u0005B5\u001d\u0007\u0002\u0003H3\u000f/$\tEd\u001a\t\u00119Mtq\u001bC!\u001dkB\u0001Bd \bX\u0012\u0005c\u0012\u0011\u0005\t\u001d;:9\u000e\"\u0011\u001b\"\"AarEDl\t\u0003j9\r\u0003\u0005\u000e~\u001e]G\u0011IG\r\u0011!qYkb6\u0005B5\u001d\u0007\u0002\u0003HU\u000f/$\t%d2\t\u00115Exq\u001bC!\u001b3A\u0001Bd/\bX\u0012\u0005cR\u001d\u0005\t!{<9\u000e\"\u0011\u001b&\"A\u00113ADl\t\u0003RJ\u000b\u0003\u0005\u000fd\u001e]G\u0011\tHs\u0011!q)pb6\u0005Bi5\u0006\u0002CH\u0002\u000f/$\tE'-\t\u0015I=wq[A\u0001\n\u0003Q*\f\u0003\u0006\u0013V\u001e]\u0017\u0013!C\u0001'7C!be%\bXF\u0005I\u0011AJK\u0011)y\tbb6\u0002\u0002\u0013\u0005cR\u001d\u0005\u000b\u001f'99.!A\u0005\u00029%\u0003BCH\u000b\u000f/\f\t\u0011\"\u0001\u001b<\"Qq\u0012EDl\u0003\u0003%\ted\t\t\u0015=5rq[A\u0001\n\u0003Qz\f\u0003\u0006\u00104\u001d]\u0017\u0011!C!5\u0007D!Bd\u0012\bX\u0006\u0005I\u0011\tJ&\u0011)yIdb6\u0002\u0002\u0013\u0005#tY\u0004\b5\u0017\u0004\u0001\u0012\u0001Ng\r\u001dQj\t\u0001E\u00015\u001fD\u0001\"$\u001a\t,\u0011\u0005!t\u001b\u0005\u000b\u001bcBY#!A\u0005\u0002je\u0007BCJ\u000b\u0011W\t\t\u0011\"!\u001b`\"9!4\u001d\u0001\u0005\u0006i\u0015hA\u0002Nx\u0001\u0001S\n\u0010C\u0006\u001bj\"U\"Q3A\u0005\u00029\u0005\u0005b\u0003N~\u0011k\u0011\t\u0012)A\u0005\u001bsB1Bd\b\t6\tU\r\u0011\"\u0011\u000eH\"Y!T E\u001b\u0005#\u0005\u000b\u0011BGG\u0011!i)\u0007#\u000e\u0005\u0002i}\b\u0002CId\u0011k!\tfg\u0002\t\u00115=\bR\u0007C!\u001b3A\u0001B$\u000b\t6\u0011\u0005c2\u0006\u0005\t\u001dWC)\u0004\"\u0011\u000eH\"Aa\u0012\u0016E\u001b\t\u0003j9\r\u0003\u0005\u000fZ!UB\u0011IJ>\u0011!y\t\u0005#\u000e\u0005B5\u001d\u0007\u0002CH%\u0011k!\tee\u001f\t\u0011=u\u0003R\u0007C!7\u0017A\u0001bd\u0018\t6\u0011\u000533\u0010\u0005\t\u001fGB)\u0004\"\u0011\u001c\u0010!AaR\fE\u001b\t\u0003Z*\u0002\u0003\u0005\u000ff!UB\u0011\tH4\u0011!i\t\u0010#\u000e\u0005B5e\u0001\u0002CN\r\u0011k!IAd\u0006\t\u0011mm\u0001R\u0007C\u0005\u001b3A\u0001b$\u001c\t6\u0011\u00053T\u0004\u0005\t7KA)\u0004\"\u0003\u001c(!A\u0011s\u0004E\u001b\t\u0003ri\f\u0003\u0005\u001c2!UB\u0011\u0002Hs\u0011!Y\u001a\u0004#\u000e\u0005\u00025e\u0001\u0002\u0003H^\u0011k!\tE$0\t\u0011Au\bR\u0007C!7kA\u0001\"e\u0001\t6\u0011\u00053\u0014\b\u0005\t\u001dGD)\u0004\"\u0011\u000ff\"A1T\bE\u001b\t\u0003Yz\u0004\u0003\u0005\u001c>!UB\u0011AN#\u0011!q)\u0010#\u000e\u0005Bm-\u0003\u0002CH\u0002\u0011k!\teg\u0014\t\u0015I=\u0007RGA\u0001\n\u0003Y\u001a\u0006\u0003\u0006\u0013V\"U\u0012\u0013!C\u0001'7C!be%\t6E\u0005I\u0011AJK\u0011)y\t\u0002#\u000e\u0002\u0002\u0013\u0005cR\u001d\u0005\u000b\u001f'A)$!A\u0005\u00029%\u0003BCH\u000b\u0011k\t\t\u0011\"\u0001\u001cZ!Qq\u0012\u0005E\u001b\u0003\u0003%\ted\t\t\u0015=5\u0002RGA\u0001\n\u0003Yj\u0006\u0003\u0006\u00104!U\u0012\u0011!C!7CB!Bd\u0012\t6\u0005\u0005I\u0011\tJ&\u0011)yI\u0004#\u000e\u0002\u0002\u0013\u00053TM\u0004\b7S\u0002\u0001\u0012AN6\r\u001dQz\u000f\u0001E\u00017[B\u0001\"$\u001a\t\u0014\u0012\u00051T\u000f\u0005\u000b\u001bcB\u0019*!A\u0005\u0002n]\u0004BCJ\u000b\u0011'\u000b\t\u0011\"!\u001c~\u001911\u0014\u0011\u0001A7\u0007C1b$=\t\u001c\nU\r\u0011\"\u0001\u000eH\"Y1s\u0006EN\u0005#\u0005\u000b\u0011BGG\u0011-\u0019\n\u0004c'\u0003\u0016\u0004%\tA$!\t\u0017MM\u00022\u0014B\tB\u0003%Q\u0012\u0010\u0005\t\u001bKBY\n\"\u0001\u001c\u0006\"Aq\u0012\tEN\t\u0003j9\r\u0003\u0005\u000f<\"mE\u0011\tH_\u0011!q\u0019\u000fc'\u0005B9\u0015\b\u0002\u0003H{\u00117#\te'$\t\u0011=\r\u00012\u0014C!7#C!Be4\t\u001c\u0006\u0005I\u0011ANK\u0011)\u0011*\u000ec'\u0012\u0002\u0013\u00051S\u0013\u0005\u000b''CY*%A\u0005\u0002Mm\u0005BCH\t\u00117\u000b\t\u0011\"\u0011\u000ff\"Qq2\u0003EN\u0003\u0003%\tA$\u0013\t\u0015=U\u00012TA\u0001\n\u0003YZ\n\u0003\u0006\u0010\"!m\u0015\u0011!C!\u001fGA!b$\f\t\u001c\u0006\u0005I\u0011ANP\u0011)y\u0019\u0004c'\u0002\u0002\u0013\u000534\u0015\u0005\u000b\u001d\u000fBY*!A\u0005BI-\u0003BCH\u001d\u00117\u000b\t\u0011\"\u0011\u001c(\u001eI14\u0016\u0001\u0002\u0002#\u00051T\u0016\u0004\n7\u0003\u0003\u0011\u0011!E\u00017_C\u0001\"$\u001a\tJ\u0012\u00051T\u0018\u0005\u000b#/AI-!A\u0005FI-\u0001BCG9\u0011\u0013\f\t\u0011\"!\u001c@\"Q1S\u0003Ee\u0003\u0003%\ti'2\t\u000fm5\u0007\u0001\"\u0001\u001cP\u001a11T\u001b\u0001A7/D1b'7\tV\nU\r\u0011\"\u0001\u001c\\\"Y1T\u001cEk\u0005#\u0005\u000b\u0011BI}\u0011!i)\u0007#6\u0005\u0002m}\u0007\u0002\u0003H^\u0011+$\tE$:\t\u0015I=\u0007R[A\u0001\n\u0003Y*\u000f\u0003\u0006\u0013V\"U\u0017\u0013!C\u00017SD!b$\u0005\tV\u0006\u0005I\u0011\tHs\u0011)y\u0019\u0002#6\u0002\u0002\u0013\u0005a\u0012\n\u0005\u000b\u001f+A).!A\u0005\u0002m5\bBCH\u0011\u0011+\f\t\u0011\"\u0011\u0010$!QqR\u0006Ek\u0003\u0003%\ta'=\t\u0015=M\u0002R[A\u0001\n\u0003Z*\u0010\u0003\u0006\u000fH!U\u0017\u0011!C!%\u0017B!b$\u000f\tV\u0006\u0005I\u0011IN}\u000f%Yj\u0010AA\u0001\u0012\u0003YzPB\u0005\u001cV\u0002\t\t\u0011#\u0001\u001d\u0002!AQR\rE{\t\u0003aJ\u0001\u0003\u0006\u0012\u0018!U\u0018\u0011!C#%\u0017A!\"$\u001d\tv\u0006\u0005I\u0011\u0011O\u0006\u0011)\u0019*\u0002#>\u0002\u0002\u0013\u0005Et\u0002\u0004\u00079+\u0001\u0001\th\u0006\t\u0017=E\br BK\u0002\u0013\u0005Qr\u0019\u0005\f'_AyP!E!\u0002\u0013ii\tC\u0006\u001d\u001a!}(Q3A\u0005\u00025\r\u0007b\u0003O\u000e\u0011\u007f\u0014\t\u0012)A\u0005\u001b\u0017C\u0001\"$\u001a\t\u0000\u0012\u0005AT\u0004\u0005\t\u001dwCy\u0010\"\u0011\u000ff\"Aq2 E\u0000\t\u0003b*\u0003\u0003\u0005\u000fd\"}H\u0011\tHs\u0011!q)\u0010c@\u0005Bq%\u0002\u0002CH\u0002\u0011\u007f$\t\u0005(\f\t\u0015I=\u0007r`A\u0001\n\u0003a\n\u0004\u0003\u0006\u0013V\"}\u0018\u0013!C\u0001'+C!be%\t\u0000F\u0005I\u0011AK\u007f\u0011)y\t\u0002c@\u0002\u0002\u0013\u0005cR\u001d\u0005\u000b\u001f'Ay0!A\u0005\u00029%\u0003BCH\u000b\u0011\u007f\f\t\u0011\"\u0001\u001d8!Qq\u0012\u0005E\u0000\u0003\u0003%\ted\t\t\u0015=5\u0002r`A\u0001\n\u0003aZ\u0004\u0003\u0006\u00104!}\u0018\u0011!C!9\u007fA!Bd\u0012\t\u0000\u0006\u0005I\u0011\tJ&\u0011)yI\u0004c@\u0002\u0002\u0013\u0005C4I\u0004\n9\u000f\u0002\u0011\u0011!E\u00019\u00132\u0011\u0002(\u0006\u0001\u0003\u0003E\t\u0001h\u0013\t\u00115\u0015\u0014R\u0006C\u00019\u001fB!\"e\u0006\n.\u0005\u0005IQ\tJ\u0006\u0011)i\t(#\f\u0002\u0002\u0013\u0005E\u0014\u000b\u0005\u000b'+Ii#!A\u0005\u0002r]sa\u0002O0\u0001!\u0005A\u0014\r\u0004\b9G\u0002\u0001\u0012\u0001O3\u0011!i)'#\u000f\u0005\u0002q\u001d\u0004\u0002CG9\u0013s!\t\u0001(\u001b\t\u0011MU\u0011\u0012\bC\u00019k:q\u0001(\u001f\u0001\u0011\u0003aZHB\u0004\u001d~\u0001A\t\u0001h \t\u00115\u0015\u00142\tC\u00019\u0003C\u0001b%\u0006\nD\u0011\u0005A4Q\u0004\b9\u000f\u0003\u0001\u0012\u0001OE\r\u001daZ\t\u0001E\u00019\u001bC\u0001\"$\u001a\nL\u0011\u0005At\u0012\u0005\t9#KY\u0005\"\u0002\u001d\u0014\"AA4VE&\t\u0003aj\u000b\u0003\u0005\u001d2&-C\u0011\u0001OZ\u0011!i\t(c\u0013\u0005\u0002u\u0005\u0005\u0002CG9\u0013\u0017\"\t!(\"\t\u00115E\u00142\nC\u0001;\u0017C\u0001\"(&\nL\u0011%Qt\u0013\u0005\t;+KY\u0005\"\u0003\u001e$\"Q1SCE&\u0003\u0003%\t)(+\u0007\ruE\u0006\u0001AOZ\u00115i*,#\u0019\u0003\u0002\u0003\u0006I!$$\n\u001a\"YQtWE1\u0005\u0003\u0005\u000b\u0011\u0002O`\u0011-yi&#\u0019\u0003\u0006\u0004%\tE$!\t\u0017e\u0005\u0018\u0012\rB\u0001B\u0003%Q\u0012\u0010\u0005\t\u001bKJ\t\u0007\"\u0001\u001e:\"AQ\u0012_E1\t\u0003jI\u0002\u0003\u0005\u0010b%\u0005D\u0011\tHA\r\u0019i\u001a\r\u0001\u0001\u001eF\"iQTWE9\u0005\u0003\u0005\u000b\u0011BGG\u00133C1\"h.\nr\t\u0005\t\u0015!\u0003\u001d@\"YqRLE9\u0005\u000b\u0007I\u0011\tHA\u0011-I\n/#\u001d\u0003\u0002\u0003\u0006I!$\u001f\t\u0017=%\u0013\u0012\u000fBC\u0002\u0013\u0005S2\u0019\u0005\f;\u000fL\tH!A!\u0002\u0013iY\t\u0003\u0005\u000ef%ED\u0011AOe\u0011!qY,#\u001d\u0005B9u\u0006\u0002\u0003Ou\u0013c\"\t%(6\u0007\u0013um\u0007\u0001%A\u0002\u0002uu\u0007\u0002CG\u0007\u0013\u000b#\t!d\u0004\t\u0011qE\u0016R\u0011C!\u001b3A\u0001\"%\n\n\u0006\u0012\u0005S\u0012\u0004\u0005\t%gJ)\t\"\u0011\u001e`\"AQ4CEC\t\u0003j*\u000f\u0003\u0006\u001e %\u0015\u0015\u0013!C\u00019{Dq\"(<\n\u0006B\u0005\u0019\u0011!A\u0005\nu=\u0018\u0012\u001b\u0005\u0010;kL)\t%A\u0002\u0002\u0003%I!h>\nN\u001a9A4\u0012\u0001\u0002\u0002r]\u0006bCH<\u0013/\u0013)\u001a!C\u0001\u001b\u000fD1\u0002(/\n\u0018\nE\t\u0015!\u0003\u000e\u000e\"YA4XEL\u0005#\u0007I\u0011\u0001O_\u0011-a*-c&\u0003\u0002\u0004%\t\u0001h2\t\u0017q-\u0017r\u0013B\tB\u0003&At\u0018\u0005\t\u001bKJ9\n\"\u0001\u001dN\"AarIEL\t\u0003\u0012Z\u0005\u0003\u0005\u0010:%]E\u0011\tOj\u0011!a\n,c&\u0005\u00025e\u0001\u0002CH/\u0013/#\tE$!\t\u0011=%\u0013r\u0013C!\u001b\u0007D\u0001\"$=\n\u0018\u0012\u0005S\u0012\u0004\u0005\t9/L9\n\"\u0001\u000e\u001a!AA\u0014\\EL\t\u0003i9\r\u0003\u0005\u001d\\&]E\u0011AG\r\u0011!\t*#c&\u0005B5e\u0001B\u0003Oo\u0013/\u0013\r\u0011\"\u0001\u000fJ!IAt\\ELA\u0003%a2\n\u0005\t9CL9\n\"\u0001\u001dd\"AA\u0014^EL\t\u0003aZ\u000f\u0003\u0005\u001dr&]E\u0011\u0001Oz\u0011)aZ0c&\u0012\u0002\u0013\u0005AT \u0005\t;\u0003I9\n\"\u0001\u001e\u0004!QQ\u0014BEL#\u0003%\t\u0001(@\t\u0013u-\u0011r\u0013Q!\n55\u0005\u0002CO\u0007\u0013/#)\"h\u0004\t\u0011uM\u0011r\u0013C\u0001;+A!\"h\b\n\u0018F\u0005I\u0011\u0001O\u007f\u0011!\u0011\u001a(c&\u0005\u0002u\u0005\u0002\u0002CO\u0015\u0013/#\t!h\u000b\t\u0011uE\u0012r\u0013C\u0005;gA\u0001\"h\u0010\n\u0018\u0012\u0005Q\u0014\t\u0005\t\u001fsJ9\n\"\u0011\u000eH\"Aq2PEL\t\u0003j9\r\u0003\u0005\u000f\u001a%]E\u0011\tH\f\u0011!i*%c&\u0005\nu\u001d\u0003\u0002CO&\u0013/#\tA$0\t\u0011u5\u0013r\u0013C\u0001\u001d{C\u0001\"h\u0014\n\u0018\u0012%Q\u0014\u000b\u0005\t\u001dwK9\n\"\u0011\u000f>\"AQ4KEL\t\u0003q)\u000f\u0003\u0005\u000fd&]E\u0011\tHs\u0011!i*&c&\u0005\u0002u]\u0003\u0002\u0003H{\u0013/#\t%(\u0017\t\u0011=\r\u0011r\u0013C!;;B!b$\u0005\n\u0018\u0006\u0005I\u0011\tHs\u0011)y\u0019\"c&\u0002\u0002\u0013\u0005a\u0012\n\u0005\u000b\u001f+I9*!A\u0005\u0002u\u0005\u0004BCH\u0011\u0013/\u000b\t\u0011\"\u0011\u0010$!QqRFEL\u0003\u0003%\t!(\u001a\t\u0015=M\u0012rSA\u0001\n\u0003jJ\u0007C\u0007\u001en%]%\u0011!A\u0001\n\u000b\u0001Q\u0012\u0004\u0005\u000e;cJ9J!A\u0001\u0002\u0013\u0005\u0001!h\u001d\t\u001bue\u0014r\u0013B\u0001\u0002\u0003%\t\u0001AO>\r\u0019iz\u0010\u0001!\u001f\u0002!Y\u0011S\nF\u0003\u0005+\u0007I\u0011II(\u0011-qJA#\u0002\u0003\u0012\u0003\u0006I!%\u0015\t\u00179}!R\u0001BK\u0002\u0013\u0005Sr\u0019\u0005\f5{T)A!E!\u0002\u0013ii\t\u0003\u0005\u000ef)\u0015A\u0011\u0001P\u0006\u0011!\t:M#\u0002\u0005RyM\u0001\u0002CGx\u0015\u000b!\t%$\u0007\t\u00119m&R\u0001C!\u001d{C\u0001\"e\u0017\u000b\u0006\u0011\u0005ct\u0003\u0005\t#GR)\u0001\"\u0011\u001f\u001c!A\u00113\u000eF\u0003\t\u0003rz\u0002\u0003\u0005\u0012r)\u0015A\u0011\tP\u0012\u0011!\tJF#\u0002\u0005B5\u001d\u0007\u0002\u0003H\u0015\u0015\u000b!\tEd\u000b\t\u00119-&R\u0001C!\u001b\u000fD\u0001B$+\u000b\u0006\u0011\u0005Sr\u0019\u0005\t\u001fGR)\u0001\"\u0011\u001f(!AaR\rF\u0003\t\u0003r9\u0007\u0003\u0005\u000fd*\u0015A\u0011\tHs\u0011!q)P#\u0002\u0005By5\u0002\u0002CH\u0002\u0015\u000b!\tE(\r\t\u0015I='RAA\u0001\n\u0003q*\u0004\u0003\u0006\u0013V*\u0015\u0011\u0013!C\u0001=wA!be%\u000b\u0006E\u0005I\u0011AJK\u0011)y\tB#\u0002\u0002\u0002\u0013\u0005cR\u001d\u0005\u000b\u001f'Q)!!A\u0005\u00029%\u0003BCH\u000b\u0015\u000b\t\t\u0011\"\u0001\u001f@!Qq\u0012\u0005F\u0003\u0003\u0003%\ted\t\t\u0015=5\"RAA\u0001\n\u0003q\u001a\u0005\u0003\u0006\u00104)\u0015\u0011\u0011!C!=\u000fB!Bd\u0012\u000b\u0006\u0005\u0005I\u0011\tJ&\u0011)yID#\u0002\u0002\u0002\u0013\u0005c4J\u0004\b=\u001f\u0002\u0001\u0012\u0001P)\r\u001diz\u0010\u0001E\u0001='B\u0001\"$\u001a\u000bJ\u0011\u0005a4\f\u0005\u000b\u001bcRI%!A\u0005\u0002zu\u0003BCJ\u000b\u0015\u0013\n\t\u0011\"!\u001fd!9a4\u000e\u0001\u0005\u0002y5ta\u0002P:\u0001!\u0005aT\u000f\u0004\b=o\u0002\u0001\u0012\u0001P=\u0011!i)G#\u0016\u0005\u0002ym\u0004\u0002CJ\u000b\u0015+\"\tA( \u0007\ry\u0005\u0005\u0001\u0011PB\u0011-i9Kc\u0017\u0003\u0016\u0004%\tA(\"\t\u0017y\u001d%2\fB\tB\u0003%Q\u0012\u0016\u0005\f%KRYF!f\u0001\n\u0003i9\rC\u0006\u001f\n*m#\u0011#Q\u0001\n55\u0005\u0002CG3\u00157\"\tAh#\t\u00119m&2\fC!\u001d{C!Be4\u000b\\\u0005\u0005I\u0011\u0001PJ\u0011)\u0011*Nc\u0017\u0012\u0002\u0013\u0005a\u0014\u0014\u0005\u000b''SY&%A\u0005\u0002MU\u0005BCH\t\u00157\n\t\u0011\"\u0011\u000ff\"Qq2\u0003F.\u0003\u0003%\tA$\u0013\t\u0015=U!2LA\u0001\n\u0003qj\n\u0003\u0006\u0010\")m\u0013\u0011!C!\u001fGA!b$\f\u000b\\\u0005\u0005I\u0011\u0001PQ\u0011)y\u0019Dc\u0017\u0002\u0002\u0013\u0005cT\u0015\u0005\u000b\u001d\u000fRY&!A\u0005BI-\u0003BCH\u001d\u00157\n\t\u0011\"\u0011\u001f*\u001eIaT\u0016\u0001\u0002\u0002#\u0005at\u0016\u0004\n=\u0003\u0003\u0011\u0011!E\u0001=cC\u0001\"$\u001a\u000b\u0002\u0012\u0005aT\u0017\u0005\u000b#/Q\t)!A\u0005FI-\u0001BCG9\u0015\u0003\u000b\t\u0011\"!\u001f8\"Q1S\u0003FA\u0003\u0003%\tI(0\u0007\ry\u0015\u0007\u0001\u0011Pd\u0011-\u0011*Gc#\u0003\u0016\u0004%\t!d2\t\u0017y%%2\u0012B\tB\u0003%QR\u0012\u0005\t\u001bKRY\t\"\u0001\u001fJ\"Aa2\u0018FF\t\u0003ri\f\u0003\u0006\u0013P*-\u0015\u0011!C\u0001=\u001fD!B%6\u000b\fF\u0005I\u0011AJK\u0011)y\tBc#\u0002\u0002\u0013\u0005cR\u001d\u0005\u000b\u001f'QY)!A\u0005\u00029%\u0003BCH\u000b\u0015\u0017\u000b\t\u0011\"\u0001\u001fT\"Qq\u0012\u0005FF\u0003\u0003%\ted\t\t\u0015=5\"2RA\u0001\n\u0003q:\u000e\u0003\u0006\u00104)-\u0015\u0011!C!=7D!Bd\u0012\u000b\f\u0006\u0005I\u0011\tJ&\u0011)yIDc#\u0002\u0002\u0013\u0005ct\\\u0004\n=G\u0004\u0011\u0011!E\u0001=K4\u0011B(2\u0001\u0003\u0003E\tAh:\t\u00115\u0015$2\u0016C\u0001=WD!\"e\u0006\u000b,\u0006\u0005IQ\tJ\u0006\u0011)i\tHc+\u0002\u0002\u0013\u0005eT\u001e\u0005\u000b'+QY+!A\u0005\u0002zEha\u0002P{\u0001\u0005\u0005et\u001f\u0005\f=sT)L!f\u0001\n\u0003q9\u0002C\u0006\u001f|*U&\u0011#Q\u0001\n5u\u0002b\u0003P\u007f\u0015k\u0013)\u001a!C\u0001\u001b\u000fD1Bh@\u000b6\nE\t\u0015!\u0003\u000e\u000e\"AQR\rF[\t\u0003y\n\u0001\u0003\u0005\u000f<*UF\u0011\tHs\u0011)y\tB#.\u0002\u0002\u0013\u0005cR\u001d\u0005\u000b\u001f'Q),!A\u0005\u00029%\u0003BCH\u000b\u0015k\u000b\t\u0011\"\u0001 \n!Qq\u0012\u0005F[\u0003\u0003%\ted\t\t\u0015=5\"RWA\u0001\n\u0003yj\u0001\u0003\u0006\u00104)U\u0016\u0011!C!?#A!b$\u000f\u000b6\u0006\u0005I\u0011IP\u000b\u000f\u001dyJ\u0002\u0001E\u0001?71qA(>\u0001\u0011\u0003yj\u0002\u0003\u0005\u000ef)MG\u0011AP\u0010\u0011!i\tHc5\u0005\u0002}\u0005\u0002BCJ\u000b\u0015'\f\t\u0011\"! (\u00191qt\u0006\u0001\u0003?cAQB(?\u000b\\\n\u0005\t\u0015!\u0003\u000e>)]\u0006\"\u0004P\u007f\u00157\u0014\t\u0011)A\u0005\u001b\u001bSY\f\u0003\u0005\u000ef)mG\u0011AP\u001a\r\u001dyZ\u0004AA\u0001?{A\u0001\"$\u001a\u000bd\u0012\u0005qt\b\u0005\t\u001d\u000fQ\u0019\u000f\"\u0011\u000e\u001a!Aa2\u0002Fr\r\u0003z\u001a\u0005\u0003\u0005\u000f<*\rH\u0011\tHs\u0011!q\u0019Oc9\u0005B9\u0015\b\u0002CP$\u0015G$\t!$\u0007\t\u0011}%#2\u001dC\u0001\u001d\u00033\u0011bh\u0013\u0001!\u0003\r\na(\u0014\u0007\u0013}=\u0003\u0001%A\u0012\u0002}EcaBP*\u0001\u0005\u0005qT\u000b\u0005\f\u001fCR9P!b\u0001\n\u0003r\t\tC\u0006\u001b\u0018*](\u0011!Q\u0001\n5e\u0004\u0002CG3\u0015o$\tah\u0016\t\u00119m&r\u001fC!\u001dKDqa(\u0018\u0001\t\u0013yz\u0006C\u0004 f\u0001!Iah\u001a\t\u000f}5\u0004\u0001\"\u0001 p!9qT\u000f\u0001\u0005\u0002}]\u0004bBP;\u0001\u0011\u0005qT\u0012\u0005\n?'\u0003!\u0019)C\u0005?+Cqah)\u0001\t\u0003y*\u000bC\u0005 2\u0002\t\n\u0011\"\u0001\u0017\u0000\"9q4\u0017\u0001\u0005\u0006}U\u0006bBP`\u0001\u0011\u0005q\u0014\u0019\u0005\b?\u0017\u0004A\u0011APg\u0011\u001dy:\u000e\u0001C\u0001?3Dqah6\u0001\t\u0003y\n\u000fC\u0004 f\u0002!\tah:\t\u000f}-\b\u0001\"\u0001 n\"9q\u0014\u001f\u0001\u0005\u0002}M\bbBPy\u0001\u0011\u0005q4 \u0005\b?c\u0004A\u0011\u0001Q\u0004\u0011\u001dy\n\u0010\u0001C\u0001A\u001f9q\u0001)\u0006\u0001\u0011\u0003\u0001;BB\u0004!\u001a\u0001A\t\u0001i\u0007\t\u00115\u00154\u0012\u0006C\u0001A;A\u0001\"$\u001d\f*\u0011\u0005\u0001u\u0004\u0005\t'+YI\u0003\"\u0001!(!9\u0001U\u0006\u0001\u0005\u0002\u0001>\u0002b\u0002Q\u001b\u0001\u0011\u0005\u0001u\u0007\u0005\bA\u000f\u0002A\u0011\u0001Q%\u0011\u001d\u0001\u000b\u0006\u0001C\u0001A'Bq\u0001i\u0019\u0001\t\u0003\u0001+\u0007C\u0005!r\u0001\t\n\u0011\"\u0001\u001d~\"I\u00015\u000f\u0001CB\u0013%a\u0012\n\u0005\fAk\u0002\u0001\u0019!a!\n\u0013\u0001;\bC\u0006!\u0000\u0001\u0001\r\u00111Q\u0005\n\u0001\u0006\u0005\"\u0003QC\u0001\u0001\u0007K\u0011\u0002H%\u0011%\u0001;\t\u0001a!\n\u0013\u0001K\tC\u0004!\u000e\u0002!)A$\u0013\t\u000f\u0001>\u0005\u0001\"\u0005!\u0012\u001a1\u0001U\u0014\u0001\u0001A?C1\u0002))\fL\t\u0005\t\u0015!\u0003\u000e\u001c!Y\u00015UF&\u0005\u0003\u0005\u000b\u0011BG\u000e\u0011-\u0001+kc\u0013\u0003\u0002\u0003\u0006I!d\u0007\t\u0017\u0001\u001e62\nB\u0001B\u0003%Q2\u0004\u0005\t\u001bKZY\u0005\"\u0001!*\"AQ\u0012OF&\t\u0003\u0001+L\u0002\u0004!:\u0002\u0001\u00015\u0018\u0005\fAG[IF!A!\u0002\u0013iY\u0002\u0003\u0005\u000ef-eC\u0011\u0001Q_\u0011!i\th#\u0017\u0005B\u0001\u000ewa\u0002Qd\u0001!\u0005\u0001\u0015\u001a\u0004\bA\u0017\u0004\u0001\u0012\u0001Qg\u0011!i)gc\u0019\u0005\u0002\u0001>wa\u0002Qi\u0001!\u0005\u00015\u001b\u0004\bA+\u0004\u0001\u0012\u0001Ql\u0011!i)g#\u001b\u0005\u0002\u0001fwa\u0002Qn\u0001!\u0005\u0001U\u001c\u0004\bA?\u0004\u0001\u0012\u0001Qq\u0011!i)gc\u001c\u0005\u0002\u0001\u000e\bb\u0002Qs\u0001\u0011\u0005\u0001u\u001d\u0005\bA_\u0004A\u0011\u0001Qy\u0011\u001d\u0001;\u0010\u0001C\u0001AsDq!i\u0001\u0001\t\u0003\t+\u0001C\u0004\"\u0010\u0001!\t!)\u0005\t\u000f\u0005n\u0001\u0001\"\u0001\"\u001e!9\u0011\u0015\u0005\u0001\u0005\u0002\u0005\u000e\u0002bBQ\u0014\u0001\u0011\u0005\u0011\u0015\u0006\u0005\bC[\u0001A\u0011AQ\u0018\u0011\u001d\tk\u0003\u0001C\u0001CkAq!)\u000f\u0001\t\u0003\t[\u0004C\u0004\"@\u0001!\t!)\u0011\t\u000f\u0005\u0016\u0003\u0001\"\u0001\"H!9\u0011u\u000b\u0001\u0005\u0002\u0005f\u0003bBQ/\u0001\u0011\u0005\u0011u\f\u0004\u0007CO\u0002\u0001!)\u001b\t\u00115\u00154\u0012\u0013C\u0001CsB\u0011\") \u0001\u0005\u0004%\t!i \u0007\r\u0005\u0006\u0005\u0001AQB\u0011!i)gc&\u0005\u0002\u0005\u0016\u0005bBQE\u0001\u0011\u0005\u00115\u0012\u0005\bC#\u0003A\u0011BQJ\u0011\u001d\tk\n\u0001C\u0005C?Cq!i)\u0001\t\u0013\t+\u000bC\u0004\u000ft\u0001!I!i+\t\u000f\u0005>\u0006\u0001\"\u0001\"2\"9\u00115\u0018\u0001\u0005\u0006\u0005v\u0006bBQb\u0001\u0011\u0005\u0011U\u0019\u0005\bC\u001f\u0004A\u0011AQi\u0011%\t[\u000e\u0001a!\n\u0013qI\u0005C\u0005\"^\u0002\u0001\r\u0015\"\u0003\"`\"9\u00115\u001d\u0001\u0005\u00029%\u0003bBQs\u0001\u0011\u0005\u0011u\u001d\u0005\nCW\u0004!\u0019)C\u0005C[Dq!)>\u0001\t\u0003\tk\u000fC\u0004\"x\u0002!)!)?\t\u000f\u0005~\b\u0001\"\u0001#\u0002!9!U\u0001\u0001\u0005\u0002\t\u001e\u0001b\u0002R\u0006\u0001\u0011\u0005!U\u0002\u0005\bE#\u0001AQ\u0001R\n\u0011\u001d\u0011K\u0002\u0001C\u0001E7AqAi\b\u0001\t\u0003\u0011\u000b\u0003C\u0004#&\u0001!IAi\n\t\u000f\t.\u0002\u0001\"\u0002#.!9!5\u0007\u0001\u0005\n\tV\u0002b\u0002R\u001d\u0001\u0011%!5\b\u0005\bE\u007f\u0001A\u0011\u0002R!\u0011\u001d\u0011+\u0005\u0001C\u0005E\u000fBqA)\u0014\u0001\t\u0003\u0011{\u0005C\u0004#T\u0001!\tA)\u0016\t\u000f\t~\u0003\u0001\"\u0001#b!I!u\f\u0001\u0005\u00121=&\u0015\u000e\u0005\bE{\u0002AQ\u0001R@\u0011%\u0011K\t\u0001C\t\u0019_\u0013[\tC\u0004#\u0012\u0002!\tAi%\t\u000f\tv\u0005\u0001\"\u0001# \"9!5\u0015\u0001\u0005\u0002\t\u0016\u0006\u0002\u0003RV\u0001\u0001&IA),\t\u000f\tF\u0006\u0001\"\u0002#4\"9!u\u0019\u0001\u0005\u0006\t&\u0007\"\u0003Rj\u0001E\u0005IQ\u0001O\u007f\u0011\u001d\u0011+\u000e\u0001C\u0001E/DqA);\u0001\t\u0003\u0011[\u000fC\u0004#j\u0002!\tAi=\t\u000f\tv\b\u0001\"\u0001#\u0000\"915\u0001\u0001\u0005\u0002\r\u0016aABR\u0005\u0001\u0001\u0019[\u0001C\u0006 \u0002.](\u00111A\u0005\u0002\rN\u0001bCR\u000b\u0017o\u0014\t\u0019!C\u0001G/A1bi\u0007\fx\n\u0005\t\u0015)\u0003 \u0004\"YATUF|\u0005\u000b\u0007I\u0011\u0001H_\u0011-\u0019kbc>\u0003\u0002\u0003\u0006IAd0\t\u00115\u00154r\u001fC\u0001G?A\u0001\"$\u001a\fx\u0012\u00051u\u0005\u0005\tGWY9\u0010\"\u0012$.\u0019115\u0007\u0001AGkA1B$\u0005\r\n\tU\r\u0011\"\u0001\u000f\u0018!Y1S G\u0005\u0005#\u0005\u000b\u0011BG\u001f\u0011!i)\u0007$\u0003\u0005\u0002\r^\u0002B\u0003Jh\u0019\u0013\t\t\u0011\"\u0001$>!Q!S\u001bG\u0005#\u0003%\tAf@\t\u0015=EA\u0012BA\u0001\n\u0003r)\u000f\u0003\u0006\u0010\u00141%\u0011\u0011!C\u0001\u001d\u0013B!b$\u0006\r\n\u0005\u0005I\u0011AR!\u0011)y\t\u0003$\u0003\u0002\u0002\u0013\u0005s2\u0005\u0005\u000b\u001f[aI!!A\u0005\u0002\r\u0016\u0003BCH\u001a\u0019\u0013\t\t\u0011\"\u0011$J!Qar\tG\u0005\u0003\u0003%\tEe\u0013\t\u0015=eB\u0012BA\u0001\n\u0003\u001akeB\u0005$R\u0001\t\t\u0011#\u0001$T\u0019I15\u0007\u0001\u0002\u0002#\u00051U\u000b\u0005\t\u001bKb9\u0003\"\u0001$Z!Q\u0011s\u0003G\u0014\u0003\u0003%)Ee\u0003\t\u00155EDrEA\u0001\n\u0003\u001b[\u0006\u0003\u0006\u0014\u00161\u001d\u0012\u0011!CAG?2aai\u0019\u0001\u0001\r\u0016\u0004bCPo\u0019c\u0011\t\u0011)A\u0005\u001b\u0017C\u0001\"$\u001a\r2\u0011\u00051u\r\u0004\u0007G[\u0002\u0001ai\u001c\t\u0017q\u0015Fr\u0007B\u0001B\u0003%ar\u0018\u0005\t\u001bKb9\u0004\"\u0001$r!AQR\rG\u001c\t\u0003\u0019;\bC\u0005$~\u0001\u0001\r\u0015\"\u0003\u000f>\"I1u\u0010\u0001AB\u0013%1\u0015\u0011\u0005\bG\u000b\u0003A\u0011\u0003H_\u0011\u001d\u0019;\t\u0001C\tG\u0013Cqa)$\u0001\t#\u0019{\tC\u0004$(\u0002!\ta)+\t\u000f\r\u001e\u0006\u0001\"\u0001$4\"91U\u0018\u0001\u0005\u0002\r~\u0006bBRf\u0001\u0011\u00051U\u001a\u0005\bG#\u0004A\u0011ARj\u0011\u001d\u0019;\u000e\u0001C\u0001G3Dqai8\u0001\t\u000b\u0019\u000b\u000fC\u0004$f\u0002!\tai:\t\u000f\r.\b\u0001\"\u0001$n\"91\u0015\u001f\u0001\u0005\u0002\rN\bb\u0002S\u0001\u0001\u0011\u0005A5\u0001\u0004\u0007I\u0013\u0001\u0001\u0001j\u0003\t\u0017\u00116Ar\fB\u0001B\u0003%1U \u0005\t\u001bKby\u0006\"\u0001%\u0010!QAU\u0003G0\u0001\u0004%I!$\u0007\t\u0015\u0011^Ar\fa\u0001\n\u0013!K\u0002C\u0005%\u001e1}\u0003\u0015)\u0003\u000e\u001c!QAu\u0004G0\u0005\u0004%I\u0001*\t\t\u0013\u00116Br\fQ\u0001\n\u0011\u000e\u0002\u0002\u0003S\u0018\u0019?\"\t\u0001*\r\t\u0011\u0011>Br\fC\u0001IwA\u0001\u0002j\u0010\r`\u0011EA\u0015\t\u0005\t\u001bcby\u0006\"\u0001%F!IA\u0015\n\u0001C\u0002\u0013\u0005A5\n\u0005\fI\u001f\u0002!\u0019!C\u0001\u0019o#\u000b\u0006C\u0006%T\u0001\u0011\r\u0011\"\u0001\r8\u0012F\u0003\"\u0003S+\u0001\u0011\u0015Ar\u0017S,\u0011%!k\u0006\u0001C\u0003\u0019o#{\u0006C\u0005%f\u0001!)\u0001d.%h!YA5\u000e\u0001C\u0002\u0013\u0005Ar\u0017S)\u0011\u001d!k\u0007\u0001C\u0003I_B\u0011\u0002j\u001d\u0001\t\u0003a9\f*\u001e\t\u000f\u0011f\u0004\u0001\"\u0003%|!IA\u0015\u0011\u0001C\u0002\u0013\rA5\u0011\u0005\nI\u001b\u0003!\u0019!C\u0002I\u001fC\u0011\u0002j%\u0001\u0005\u0004%\u0019\u0001*&\t\u0013\u0011f\u0005A1A\u0005\u0004\u0011n\u0005\"\u0003SP\u0001\t\u0007I1\u0001SQ\u0011%!+\u000b\u0001b\u0001\n\u0007!;\u000bC\u0005%,\u0002\u0011\r\u0011b\u0001%.\"IA\u0015\u0017\u0001C\u0002\u0013\rA5\u0017\u0005\nIo\u0003!\u0019!C\u0002IsC\u0011\u0002*0\u0001\u0005\u0004%\u0019\u0001j0\t\u0013\u0011\u000e\u0007A1A\u0005\u0004\u0011\u0016\u0007\"\u0003Se\u0001\t\u0007I1\u0001Sf\u0011%!{\r\u0001b\u0001\n\u0007!\u000b\u000eC\u0005%V\u0002\u0011\r\u0011b\u0001%X\"IA5\u001c\u0001C\u0002\u0013\rAU\u001c\u0005\nIC\u0004!\u0019!C\u0002IGD\u0011\u0002j:\u0001\u0005\u0004%\u0019\u0001*;\u0003\u000bQK\b/Z:\u000b\t1EF2W\u0001\tS:$XM\u001d8bY*!AR\u0017G\\\u0003\u001d\u0011XM\u001a7fGRT!\u0001$/\u0002\u000bM\u001c\u0017\r\\1\u0004\u0001M)\u0002\u0001d0\rH2EGR\u001cGr\u0019Sdy\u000f$>\r|6\u0005\u0001\u0003\u0002Ga\u0019\u0007l!\u0001d.\n\t1\u0015Gr\u0017\u0002\u0007\u0003:L(+\u001a4\u0011\t1%GrZ\u0007\u0003\u0019\u0017TA\u0001$4\r4\u0006\u0019\u0011\r]5\n\t15F2\u001a\t\u0005\u0019'dI.\u0004\u0002\rV*!Ar\u001bGX\u0003\r!\b/Z\u0005\u0005\u00197d)NA\u0007UsB,7i\\7qCJ,'o\u001d\t\u0005\u0019'dy.\u0003\u0003\rb2U'!\u0004+za\u0016$vn\u0015;sS:<7\u000f\u0005\u0003\rT2\u0015\u0018\u0002\u0002Gt\u0019+\u0014AbQ8n[>twj\u001e8feN\u0004B\u0001d5\rl&!AR\u001eGk\u0005\u001d9EN\u0019'vEN\u0004B\u0001d5\rr&!A2\u001fGk\u0005!!\u0016\u0010]3NCB\u001c\b\u0003\u0002Gj\u0019oLA\u0001$?\rV\nyA+\u001f9f\u0007>t7\u000f\u001e:bS:$8\u000f\u0005\u0003\rT2u\u0018\u0002\u0002G\u0000\u0019+\u00141BR5oI6+WNY3sgB!Q2AG\u0005\u001b\ti)A\u0003\u0003\u000e\b1=\u0016\u0001B;uS2LA!d\u0003\u000e\u0006\tY1i\u001c7mK\u000e$\u0018n\u001c8t\u0003\u0019!\u0013N\\5uIQ\u0011Q\u0012\u0003\t\u0005\u0019\u0003l\u0019\"\u0003\u0003\u000e\u00161]&\u0001B+oSR\fQ\"\u001a=qY\u0006LgnU<ji\u000eDWCAG\u000e!\u0011a\t-$\b\n\t5}Ar\u0017\u0002\b\u0005>|G.Z1o\u0003E)\u0007\u0010\u001d7bS:\u001cv/\u001b;dQ~#S-\u001d\u000b\u0005\u001b#i)\u0003C\u0005\u000e(\r\t\t\u00111\u0001\u000e\u001c\u0005\u0019\u0001\u0010J\u0019\u0002\u001d\u0015l\u0007\u000f^=Ts6\u0014w\u000e\\*fiV\u0011QR\u0006\t\u0007\u001b_iI$$\u0010\u000e\u00055E\"\u0002BG\u001a\u001bk\t\u0011\"[7nkR\f'\r\\3\u000b\t5]BrW\u0001\u000bG>dG.Z2uS>t\u0017\u0002BG\u001e\u001bc\u00111aU3u!\u0011iy$$\u0011\u000e\u0003\u0001IA!d\u0011\u000eF\t11+_7c_2LA!d\u0012\r0\n91+_7c_2\u001c\bf\u0001\u0003\u000eLA!QRJG*\u001b\tiyE\u0003\u0003\u000eR1]\u0016AC1o]>$\u0018\r^5p]&!QRKG(\u0005\u0019)h.^:fI\u0006Y!M]3bW\u000eK8\r\\3tQ\r)Q2J\u0001\u000fg\"\f'\u000f]3s'.|G.Z7t\u0003E\u0019XOY:u)f\u0004X-T1q\u0007\u0006\u001c\u0007.\u001a\t\u0004\u001b\u007fA!!E:vEN$H+\u001f9f\u001b\u0006\u00048)Y2iKN\u0019\u0001\u0002d0\u0002\rqJg.\u001b;?)\tiy&\u0001\u0004dC\u000eDW\r\u001a\t\u0005\u001b\u007fii'\u0003\u0003\u000ep1E(\u0001D*vEN$H+\u001f9f\u001b\u0006\u0004\u0018!B1qa2LHCBG6\u001bkj9\tC\u0004\u000ex-\u0001\r!$\u001f\u0002\t\u0019\u0014x.\u001c\t\u0007\u001bwj\t)$\u0010\u000f\t1\u0005WRP\u0005\u0005\u001b\u007fb9,A\u0004qC\u000e\\\u0017mZ3\n\t5\rUR\u0011\u0002\u0005\u0019&\u001cHO\u0003\u0003\u000e\u00001]\u0006bBGE\u0017\u0001\u0007Q2R\u0001\u0003i>\u0004b!d\u001f\u000e\u000265\u0005cAG A\n!A+\u001f9f'\u0015\u0001W2SGr!\riy$\u0016\u0002\f)f\u0004X-\u00119j\u00136\u0004HnE\u0002V\u001b3\u0003B!d\u0010\u000e\u001c&!QR\u0014Gh\u0005\u001d!\u0016\u0010]3Ba&$\"!d%\u0002\u0017\u0011,7\r\\1sCRLwN\u001c\u000b\u0005\u001b{i)\u000bC\u0004\u000e(^\u0003\r!$+\u0002\t9\fW.\u001a\t\u0005\u001b\u007fiY+\u0003\u0003\u000e.6=&\u0001\u0002(b[\u0016LA!$-\r0\n)a*Y7fg\u0006aA-Z2mCJ\fG/[8ogV\u0011Qr\u0017\t\u0005\u001b\u007fiI,\u0003\u0003\u000e<6u&!B*d_B,\u0017\u0002BG`\u0019_\u0013aaU2pa\u0016\u001c\u0018!\u0004;za\u0016\f%oZ;nK:$8/\u0006\u0002\u000e\f\u00069QM]1tkJ,WCAGG\u0003E\u0019XOY:uSR,H/Z*z[\n|Gn\u001d\u000b\u0007\u001b\u001bki-d4\t\u000f5]4\f1\u0001\u000ez!9Q\u0012R.A\u00025e\u0014aD:vEN$\u0018\u000e^;uKRK\b/Z:\u0015\r55UR[Gl\u0011\u001di9\b\u0018a\u0001\u001bsBq!$#]\u0001\u0004iY)\u0001\u0007jgN\u0003H.[2fC\ndW-A\u0005d_6\u0004\u0018M\\5p]\u0006Q\u0001/\u0019:b[2K7\u000f^:\u0016\u00055\u0005\bCBG>\u001b\u0003kI\b\u0005\u0004\u000e@5\u0015XRR\u0005\u0005\u001bOlIOA\u0006B]:|G/\u0019;bE2,\u0017\u0002BGv\u0019_\u0013q\"\u00118o_R\fG/[8o\u0013:4wn\u001d\u000b\u0003\u001b\u001b\u000b\u0011\"[:Ue&4\u0018.\u00197\u0002\u001d%\u001c\b*[4iKJ\\\u0015N\u001c3fI\u0006iA/Y6fgRK\b/Z!sON\f\u0001\"[:Ti\u0006\u0014G.Z\u0001\u000bSN4v\u000e\\1uS2,\u0017AF5t'R\u0014Xo\u0019;ve\u0006d'+\u001a4j]\u0016lWM\u001c;\u0002-%\u001c\u0018*\\7fI&\fG/\u001a7z\t\u0016\u0004XM\u001c3f]R\fQ#[:EKB,g\u000eZ3oi6+G\u000f[8e)f\u0004X-\u0001\u0006jg^KG\u000eZ2be\u0012\fq![:FeJ|'/A\u0006jg\u0016\u0013(o\u001c8f_V\u001c\u0018aC5t\r&t\u0017\r\u001c+za\u0016\f!\"[:D_6\u0004H.\u001a;f\u0003EI7o\u00155po\u0006\u001b\u0018J\u001c4jqRK\b/Z\u0001\tG>l\u0007\u000f\\3uKR!Q\u0012\u0003H\b\u0011\u001dq\t\u0002\u001da\u0001\u001b{\t1a]=n\u0003]1wN]2f\t&\u0014Xm\u0019;TkB,'o\u00197bgN,7/\u0001\u0006uKJl7+_7c_2,\"!$\u0010\u0002\u0015QL\b/Z*z[\n|G.\u0001\tuKJl7+_7c_2$\u0015N]3di\u0006\u0001B/\u001f9f'fl'm\u001c7ESJ,7\r^\u0001\u000bk:$WM\u001d7zS:<\u0017!B<jI\u0016t\u0017a\u00023fG>t7\u000f^\u0001\u000bif\u0004Xm\u00144UQ&\u001c\u0018A\u00028beJ|w/\u0001\u0004c_VtGm]\u000b\u0003\u001d[\u0001B!d\u0010\u0004`\nQA+\u001f9f\u0005>,h\u000eZ:\u0014\u0015\r}g2\u0007HB\u001d\u007fqI\t\u0005\u0003\u000e@\u0005e'aB*vERK\b/Z\n\u0005\u00033tI\u0004\u0005\u0003\u000e@\u0005='AC+oSF,X\rV=qKN1\u0011qZGG\u001d\u007f\u0001B\u0001$1\u000fB%!a2\tG\\\u0005\u001d\u0001&o\u001c3vGR$\"A$\u000f\u0002\u0011!\f7\u000f[\"pI\u0016,\"Ad\u0013\u0011\t1\u0005gRJ\u0005\u0005\u001d\u001fb9LA\u0002J]R\f\u0011\u0002[1tQ\u000e{G-\u001a\u0011\u0002\u001f\r|W\u000e];uK\"\u000b7\u000f[\"pI\u0016$\"Ad\r\u0002\u0013M,\b/\u001a:usB,\u0017a\u00029be\u0016tGo]\u0001\u0006I\u0016\u001cGn]\u0001\tE\u0006\u001cX\rV=qKR!QR\u0012H1\u0011!q\u0019'a9A\u00025u\u0012!B2mCjT\u0018a\u00032bg\u0016$\u0016\u0010]3TKF,\"A$\u001b\u0011\t5}b2N\u0005\u0005\u001d[ryGA\u0006CCN,G+\u001f9f'\u0016\f\u0018\u0002\u0002H9\u0019_\u0013ABQ1tKRK\b/Z*fcN\f\u0001CY1tKRK\b/Z*fc\u0012+\u0007\u000f\u001e5\u0016\u00059]\u0004\u0003\u0002H=\u001dwj!\u0001d,\n\t9uDr\u0016\u0002\u0006\t\u0016\u0004H\u000f[\u0001\fE\u0006\u001cXm\u00117bgN,7/\u0006\u0002\u000ezA!Qr\bHC\u0013\u0011q9\td4\u0003\u001bQK\b/\u001a\"pk:$7/\u00119j!\u0011qYId&\u000f\t95UR\u0010\b\u0005\u001d\u001fs)*\u0004\u0002\u000f\u0012*!a2\u0013G^\u0003\u0019a$o\\8u}%\u0011A\u0012X\u0005\u0005\u001d3k)I\u0001\u0007TKJL\u0017\r\\5{C\ndW-\u0001\u0002m_\u0006\u0019An\u001c\u0011\u0002\u0005!L\u0017a\u00015jAQ1aR\u0006HS\u001dOC\u0001Bd'\u0004j\u0002\u0007QR\u0012\u0005\t\u001d?\u001bI\u000f1\u0001\u000e\u000e\u0006QQ\u000f\u001d9fe\n{WO\u001c3\u0002\u00151|w/\u001a:C_VtG-\u0001\u0007d_:$\u0018-\u001b8t)f\u0004X\r\u0006\u0003\u000e\u001c9E\u0006\u0002\u0003HZ\u0007k\u0004\r!$$\u0002\tQD\u0017\r^\u0001\u0010K6\u0004H/\u001f'po\u0016\u0014(i\\;oI\u0006yQ-\u001c9usV\u0003\b/\u001a:C_VtG-A\u0007jg\u0016k\u0007\u000f^=C_VtGm]\u0001\rg\u00064W\rV8TiJLgnZ\u000b\u0003\u001d\u007f\u0003BA$1\u000fJ:!a2\u0019Hc!\u0011qy\td.\n\t9\u001dGrW\u0001\u0007!J,G-\u001a4\n\t9-gR\u001a\u0002\u0007'R\u0014\u0018N\\4\u000b\t9\u001dGrW\u0001\u000eg\u000e\fG.\u0019(pi\u0006$\u0018n\u001c8\u0015\t9}f2\u001b\u0005\t\u001d+\u001cy\u00101\u0001\u000fX\u0006QA/\u001f9f'R\u0014\u0018N\\4\u0011\u00111\u0005g\u0012\\GG\u001d\u007fKAAd7\r8\nIa)\u001e8di&|g.M\u0001\rgR\f'OT8uCRLwN\u001c\u000b\u0005\u001d\u007fs\t\u000f\u0003\u0005\u000fV\u0012\u0005\u0001\u0019\u0001Hl\u0003\u0011Y\u0017N\u001c3\u0016\u00059\u001d\b\u0003\u0002Hu\u001dgl!Ad;\u000b\t95hr^\u0001\u0005Y\u0006twM\u0003\u0002\u000fr\u0006!!.\u0019<b\u0013\u0011qYMd;\u0002\u000f5\f\u0007o\u0014<feR!QR\u0012H}\u0011!qY\u0010\"\u0002A\u00029u\u0018aA7baB!Qr\bH\u0000\u0013\u0011y\t\u0001$=\u0003\u000fQK\b/Z'ba\u0006Aam\u001c7e\u001fZ,'\u000f\u0006\u0003\u000e\u0012=\u001d\u0001\u0002CH\u0005\t\u000f\u0001\rad\u0003\u0002\r\u0019|G\u000eZ3s!\u0011iyd$\u0004\n\t==A\u0012\u001f\u0002\u000b)f\u0004XMR8mI\u0016\u0014\u0018!\u00049s_\u0012,8\r\u001e)sK\u001aL\u00070\u0001\u0007qe>$Wo\u0019;Be&$\u00180\u0001\bqe>$Wo\u0019;FY\u0016lWM\u001c;\u0015\t=eqr\u0004\t\u0005\u0019\u0003|Y\"\u0003\u0003\u0010\u001e1]&aA!os\"QQr\u0005C\u0007\u0003\u0003\u0005\rAd\u0013\u0002\u001fA\u0014x\u000eZ;di&#XM]1u_J,\"a$\n\u0011\r=\u001dr\u0012FH\r\u001b\ti)$\u0003\u0003\u0010,5U\"\u0001C%uKJ\fGo\u001c:\u0002\u0011\r\fg.R9vC2$B!d\u0007\u00102!QQr\u0005C\t\u0003\u0003\u0005\ra$\u0007\u0002%A\u0014x\u000eZ;di\u0016cW-\\3oi:\u000bW.\u001a\u000b\u0005\u001dO|9\u0004\u0003\u0006\u000e(\u0011M\u0011\u0011!a\u0001\u001d\u0017\na!Z9vC2\u001cH\u0003BG\u000e\u001f{A!\"d\n\u0005\u0016\u0005\u0005\t\u0019AH\r\u0003-1\u0017N]:u!\u0006\u0014XM\u001c;\u0002\rA\u0014XMZ5y\u00031\u0001(/\u001a4jq\u0012K'/Z2u\u0003-\u0001(/\u001a4jq\u000eC\u0017-\u001b8\u0002\u001fQL\b/Z\"p]N$(/^2u_J\f\u0001\u0002^=qK\u0006\u0013xm]\u0001\nIVlW._!sON\f!B]3tk2$H+\u001f9f)\u0011iii$\u0015\t\u0011=M\u0013q\u0002a\u0001\u001b\u0017\u000bq!Y2uk\u0006d7/\u0001\u0007sKN,H\u000e^!qaJ|\u00070A\bgS:\fGNU3tk2$H+\u001f9f\u0003E\u0001\u0018M]1n'\u0016\u001cG/[8o\u0007>,h\u000e^\u0001\ba\u0006\u0014\u0018-\\:t\u0003\u0019\u0001\u0018M]1ng\u0006Q\u0001/\u0019:b[RK\b/Z:\u0002\u0015QL\b/\u001a)be\u0006l7/A\u000bj]N$\u0018M\u001c;jCR,G+\u001f9f!\u0006\u0014\u0018-\\:\u0015\r55urMH6\u0011!yI'a\bA\u00025e\u0014a\u00024pe6\fGn\u001d\u0005\t\u001f'\ny\u00021\u0001\u000e\f\u0006!2o[8mK6L'0Z#ySN$XM\u001c;jC2$b!$$\u0010r=U\u0004\u0002CH:\u0003C\u0001\r!$\u0010\u0002\u000b=<h.\u001a:\t\u0011=]\u0014\u0011\u0005a\u0001\u0019\u007f\u000baa\u001c:jO&t\u0017!\u00038pe6\fG.\u001b>f\u0003%)G/Y#ya\u0006tG-A\u0004eK\u0006d\u0017.Y:\u0002\u0019\u0011,\u0017\r\\5bg^KG-\u001a8)\t\u0005-r2\u0011\t\u0005\u001b\u001bz))\u0003\u0003\u0010\b6=#a\u0002;bS2\u0014XmY\u0001\u0012I\u0016\fG.[1t/&$WM\\\"iC&t\u0017A\u00032fi\u0006\u0014V\rZ;dK\u0006!A-Z2m)\u0011iid$%\t\u00115\u001d\u00161\u0007a\u0001\u001bS\u000bqB\\8o!JLg/\u0019;f\t\u0016\u001cGn]\u0001\u000f]>t\u0007K]5wCR,G)Z2m)\u0011iid$'\t\u00115\u001d\u0016q\u0007a\u0001\u001bS\u000bq!\\3nE\u0016\u00148/A\to_:\u0004&/\u001b<bi\u0016lU-\u001c2feN\f!D\\8o!JLg/\u0019;f\u001b\u0016l'-\u001a:t\u0003\u0012l\u0017\u000e\u001e;j]\u001e$B!d.\u0010$\"AqRUA\u001f\u0001\u0004y9+A\u0003bI6LG\u000f\u0005\u0003\rB>%\u0016\u0002BHV\u0019o\u0013A\u0001T8oO\u0006y\u0011.\u001c9mS\u000eLG/T3nE\u0016\u00148/A\beK\u001a,'O]3e\u001b\u0016l'-\u001a:t\u0003\u0019iW-\u001c2feR!QRHH[\u0011!i9+a\u0011A\u00025%\u0016\u0001\u00058p]B\u0013\u0018N^1uK6+WNY3s)\u0011iidd/\t\u00115\u001d\u0016Q\ta\u0001\u001bS\u000b1\u0003[1t\u001d>t\u0007K]5wCR,W*Z7cKJ$B!d\u0007\u0010B\"AQrUA$\u0001\u0004iI+A\u0007qC\u000e\\\u0017mZ3PE*,7\r^\u0001\u001a]>t\u0007K]5wCR,W*Z7cKJ\fE-\\5ui&tw\r\u0006\u0004\u000e>=%w2\u001a\u0005\t\u001bO\u000bY\u00051\u0001\u000e*\"AqRUA&\u0001\u0004y9+\u0001\bo_:dunY1m\u001b\u0016l'-\u001a:\u0015\t5ur\u0012\u001b\u0005\t\u001bO\u000bi\u00051\u0001\u000e*\u0006\u0019R.Z7cKJ\u001c()Y:fI>sg\t\\1hgR1QrWHl\u001f7D\u0001b$7\u0002P\u0001\u0007qrU\u0001\u000eKb\u001cG.\u001e3fI\u001ac\u0017mZ:\t\u0011=u\u0017q\na\u0001\u001fO\u000bQB]3rk&\u0014X\r\u001a$mC\u001e\u001c\u0018!E7f[\n,'OQ1tK\u0012|eNT1nKR1QRHHr\u001fKD\u0001\"d*\u0002R\u0001\u0007Q\u0012\u0016\u0005\t\u001f3\f\t\u00061\u0001\u0010(R!QRRHu\u0011!q\u0019'a\u0015A\u00025u\u0012AC1t'\u0016,gN\u0012:p[R1QRRHx\u001fgD\u0001b$=\u0002V\u0001\u0007QRR\u0001\u0004aJ,\u0007\u0002\u0003H2\u0003+\u0002\r!$\u0010\u0002\u00155,WNY3s\u0013:4w\u000e\u0006\u0003\u000e\u000e>e\b\u0002\u0003H\t\u0003/\u0002\r!$\u0010\u0002\u00155,WNY3s)f\u0004X\r\u0006\u0003\u000e\u000e>}\b\u0002\u0003H\t\u00033\u0002\r!$\u0010\u0002#\r|W\u000e];uK6+WNY3s)f\u0004X\r\u0006\u0003\u000e\u000eB\u0015\u0001\u0002\u0003H\t\u00037\u0002\r!$\u0010\u0002\u000bM,(m\u001d;\u0015\r55\u00053\u0002I\u0007\u0011!i9(!\u0018A\u00025e\u0004\u0002CGE\u0003;\u0002\r!d#\u0002\u0011M,(m\u001d;Ts6$b!$$\u0011\u0014AU\u0001\u0002CG<\u0003?\u0002\r!$\u001f\t\u00115%\u0015q\fa\u0001\u001bs\n\u0011b];cgR$\u0006.[:\u0015\r55\u00053\u0004I\u000f\u0011!i9(!\u0019A\u00025u\u0002\u0002CGE\u0003C\u0002\r!$$\u0015\r55\u0005\u0013\u0005I\u0012\u0011!i9(a\u0019A\u00025u\u0002\u0002CGE\u0003G\u0002\r!$\u0010\u0002\u001fM,(m\u001d;UQ&\u001c\u0018I\u001c3Ts6$\"\"$$\u0011*A-\u0002S\u0006I\u0019\u0011!i9(!\u001aA\u00025u\u0002\u0002CGE\u0003K\u0002\r!$$\t\u0011A=\u0012Q\ra\u0001\u001bs\n\u0001b]=ng\u001a\u0013x.\u001c\u0005\t!g\t)\u00071\u0001\u000ez\u000511/_7t)>\f!b^5uQ\u001aKG\u000e^3s)\u0011\u0001J\u0004e\u001f\u0011\tAm\u0012\u0011N\u0007\u0002A\n\u0001b)\u001b7uKJl\u0015\r\u001d$pe\u0016\f7\r[\n\u0005\u0003S\u0002\n\u0005\u0005\u0003\u000e@A\r\u0013\u0002\u0002I#\u0019c\u00141CR5mi\u0016\u0014H+\u001f9f\u0007>dG.Z2u_J\f\u0011\u0001\u001d\t\t\u0019\u0003tI.$$\u000e\u001cQ!\u0001\u0013\bI'\u0011!\u0001:%!\u001cA\u0002A%\u0013a\u00024pe\u0016\f7\r[\u000b\u0005!'\u0002z\u0006\u0006\u0003\u000e\u0012AU\u0003\u0002\u0003I,\u0003_\u0002\r\u0001%\u0017\u0002\u0003\u0019\u0004\u0002\u0002$1\u000fZ65\u00053\f\t\u0005!;\u0002z\u0006\u0004\u0001\u0005\u0011A\u0005\u0014q\u000eb\u0001!G\u0012\u0011!V\t\u0005!KzI\u0002\u0005\u0003\rBB\u001d\u0014\u0002\u0002I5\u0019o\u0013qAT8uQ&tw-\u0006\u0003\u0011nAMD\u0003\u0002I8!o\u0002b!d\u001f\u000e\u0002BE\u0004\u0003\u0002I/!g\"\u0001\u0002%\u001e\u0002r\t\u0007\u00013\r\u0002\u0002)\"A\u0001sKA9\u0001\u0004\u0001J\b\u0005\u0005\rB:eWR\u0012I9\u0011!\u0001:%a\u001aA\u0002A%\u0013AB8s\u000b2\u001cX\r\u0006\u0003\u000e\u000eB\u0005\u0005\"\u0003IB\u0003g\"\t\u0019\u0001IC\u0003\r\tG\u000e\u001e\t\u0007\u0019\u0003\u0004:)$$\n\tA%Er\u0017\u0002\ty\tLh.Y7f}!\"\u00111\u000fIG!\u0011a\t\re$\n\tAEEr\u0017\u0002\u0007S:d\u0017N\\3\u0002\t\u0019Lg\u000e\u001a\u000b\u0005!/\u0003j\n\u0005\u0004\rBBeURR\u0005\u0005!7c9L\u0001\u0004PaRLwN\u001c\u0005\t!\u000f\n)\b1\u0001\u0011JQ!Q\u0012\u0003IQ\u0011!\u0001:&a\u001eA\u0002A\r\u0006\u0003\u0003Ga\u001d3li)$\u0005\u0002\u000f\r|G\u000e\\3diV!\u0001\u0013\u0016IX)\u0011\u0001Z\u000b%-\u0011\r5mT\u0012\u0011IW!\u0011\u0001j\u0006e,\u0005\u0011AU\u0014\u0011\u0010b\u0001!GB\u0001\u0002e-\u0002z\u0001\u0007\u0001SW\u0001\u0003a\u001a\u0004\u0002\u0002$1\u0011865\u0005SV\u0005\u0005!sc9LA\bQCJ$\u0018.\u00197Gk:\u001cG/[8o)\u0011ii\t%0\t\u0011A]\u00131\u0010a\u0001!\u007f\u0003\u0002\u0002$1\u000fZ65URR\u0001\u0007KbL7\u000f^:\u0015\t5m\u0001S\u0019\u0005\t!\u000f\ni\b1\u0001\u0011J\u0005A1m\u001c8uC&t7\u000f\u0006\u0003\u000e\u001cA-\u0007\u0002\u0003H\t\u0003\u007f\u0002\r!$\u0010\u0002!\u0011bWm]:%G>dwN\u001c\u0013mKN\u001cH\u0003BG\u000e!#D\u0001Bd-\u0002\u0002\u0002\u0007QRR\u0001\u000f[\u0006$8\r[3t!\u0006$H/\u001a:o)\u0011iY\u0002e6\t\u00119M\u00161\u0011a\u0001\u001b\u001b\u000bQc\u001d;bi~#C.Z:tI\r|Gn\u001c8%Y\u0016\u001c8\u000f\u0006\u0003\u000e\u001cAu\u0007\u0002\u0003HZ\u0003\u000b\u0003\r!$$\u0002+],\u0017m[0%Y\u0016\u001c8\u000fJ2pY>tG\u0005\\3tgR!Q2\u0004Ir\u0011!q\u0019,a\"A\u000255\u0015\u0001\u0004\u0013fc\u0012\u001aw\u000e\\8oI\u0015\fH\u0003BG\u000e!SD\u0001Bd-\u0002\n\u0002\u0007QRR\u0001\b[\u0006$8\r[3t)\u0011iY\u0002e<\t\u00119M\u00161\u0012a\u0001\u001b\u001b\u000ba\u0002\\8pg\u0016d\u00170T1uG\",7\u000f\u0006\u0003\u000e\u001cAU\b\u0002\u0003HZ\u0003\u001b\u0003\r!$$\u0002\u001b\t\f7/\u001a+za\u0016Le\u000eZ3y)\u0011qY\u0005e?\t\u00119E\u0011Q\u0013a\u0001\u001b{\t\u0011b\u00197p]\u0016LeNZ8\u0015\t55\u0015\u0013\u0001\u0005\t\u001fg\n9\n1\u0001\u000e>\u00059\u0011\r^(x]\u0016\u0014H\u0003BGG#\u000fA\u0001bd\u001d\u0002\u001a\u0002\u0007QRH\u0001\r_\nTWm\u0019;Qe\u00164\u0017\u000e_\u0001\u000ea\u0006\u001c7.Y4f!J,g-\u001b=\u0002\u0015Q\u0014\u0018.\u001c)sK\u001aL\u0007\u0010\u0006\u0003\u000fhFE\u0001\u0002CI\n\u0003?\u0003\rAd0\u0002\u0007M$(/\u0001\u0007qe\u00164\u0017\u000e_*ue&tw-\u0001\u0005u_N#(/\u001b8h)\tqy,\u0001\u0007u_2{gnZ*ue&tw-\u0001\neSJ,7\r^(cU\u0016\u001cGo\u0015;sS:<\u0017!\u00058b[\u0016\fe\u000eZ!sON\u001cFO]5oO\u0006)\u0011n]!os\u0006I\u0011n\u001d(pi\"LgnZ\u0001\tSN<%o\\;oI\u0006!An\\1e)\u0011i\t\"e\u000b\t\u00119E\u00111\u0017a\u0001\u001b{\t\u0001BZ5oI\u0012+7\r\u001c\u000b\u0007\u001b{\t\n$e\r\t\u00115\u001d\u0016Q\u0017a\u0001\u001bSC\u0001b$7\u00026\u0002\u0007qrU\u0001\fM&tG-T3nE\u0016\u00148\u000f\u0006\u0004\u000e8Fe\u00123\b\u0005\t\u001f3\f9\f1\u0001\u0010(\"AqR\\A\\\u0001\u0004y9+\u0001\u0006gS:$W*Z7cKJ$\"\"$\u0010\u0012BE\r\u0013SII$\u0011!i9+!/A\u00025%\u0006\u0002CHm\u0003s\u0003\rad*\t\u0011=u\u0017\u0011\u0018a\u0001\u001fOC\u0001\"%\u0013\u0002:\u0002\u0007Q2D\u0001\u000bgR\f'\r\\3P]2L\u0018!H:l_2,Wn]#yG\u0016\u0004H/T3uQ>$G+\u001f9f!\u0006\u0014\u0018-\\:\u0002\u0017\u0005tgn\u001c;bi&|gn]\u000b\u0003##\u0002b!d\u001f\u000e\u0002FM\u0003\u0003BG #+JA!e\u0016\u000ej\nq\u0011I\u001c8pi\u0006$\u0018n\u001c8J]\u001a|\u0017AE<ji\"|W\u000f^!o]>$\u0018\r^5p]N\f\u0011CZ5mi\u0016\u0014\u0018I\u001c8pi\u0006$\u0018n\u001c8t)\u0011ii)e\u0018\t\u0011A\u001d\u0013\u0011\u0019a\u0001#C\u0002\u0002\u0002$1\u000fZFMS2D\u0001\u000fg\u0016$\u0018I\u001c8pi\u0006$\u0018n\u001c8t)\u0011ii)e\u001a\t\u0011E%\u00141\u0019a\u0001##\na!\u00198o_R\u001c\u0018aD<ji\"\feN\\8uCRLwN\\:\u0015\t55\u0015s\u000e\u0005\t#S\n)\r1\u0001\u0012R\u0005qq/\u001b;i\u0003:tw\u000e^1uS>tG\u0003BGG#kB\u0001\"e\u001e\u0002H\u0002\u0007\u00113K\u0001\u0005C:tw\u000e\u0006\u0003\u000e\u000eFm\u0004\u0002\u0003H~\u0003\u0017\u0004\rA$@\u0015\t5E\u0011s\u0010\u0005\t\u001f\u0013\ti\r1\u0001\u0010\f\u0005\u0019rl]6pY\u0016l\u0017N_1uS>tG*\u001a<fY\u00069rl]6pY\u0016l\u0017N_1uS>tG*\u001a<fY~#S-\u001d\u000b\u0005\u001b#\t:\tC\u0005\u000e(5\t\t\u00111\u0001\u000fL\u0005\u00112o[8mK6L'0\u0019;j_:dUM^3m\u0003Y\u00198n\u001c7f[&T\u0018\r^5p]2+g/\u001a7`I\u0015\fH\u0003BG\t#\u001fCq!%%\u0010\u0001\u0004qY%A\u0003wC2,X-\u0001\u000b`S:$XM]:fGRLwN\\,ji:,7o]\u000b\u0003#/\u0003\u0002\"%'\u0012 6-\u00153U\u0007\u0003#7SA!%(\u000e6\u00059Q.\u001e;bE2,\u0017\u0002BIQ#7\u00131bV3bW\"\u000b7\u000f['baB1\u0011SUIV\u001b\u001bk!!e*\u000b\tE%FrW\u0001\u0004e\u00164\u0017\u0002BIW#O\u0013QbV3bWJ+g-\u001a:f]\u000e,\u0017aE5oi\u0016\u00148/Z2uS>tw+\u001b;oKN\u001c(aD*j[BdW\rV=qKB\u0013x\u000e_=\u0014\u0007Iii\t\u0006\u0003\u000e\u000eF]\u0006b\u0002H2Y\u0001\u0007QR\b\u0002\u0014%\u0016<(/\u00199qS:<G+\u001f9f!J|\u00070_\n\u0006a55\u0015S\u0018\t\u0004\u001b\u007f\u0011\u0012aC7bs\n,'+Z<sCB$B!$$\u0012D\"9\u0011S\u0019\u001aA\u000255\u0015!\u00028foR\u0004\u0018A\u0002:foJ\f\u0007\u000f\u0006\u0003\u000e\u000eF-\u0007bBIcg\u0001\u0007QR\u0012\u000b\u0005\u001b\u001b\u000bz\rC\u0004\u0010Ta\u0002\r!d#\u0015\r55\u00153[Ik\u0011\u001dyIG\u0010a\u0001\u001bsBqad\u0015?\u0001\u0004iY\t\u0006\u0004\u000e\u000eFe\u00173\u001c\u0005\b\u001fgz\u0004\u0019AG\u001f\u0011\u001dy9h\u0010a\u0001\u0019\u007f#B!$$\u0012`\"9q2O\"A\u00025uB\u0003BGG#GDqad\u001dE\u0001\u0004ii\u0004\u0006\u0003\u000e\u0012E\u001d\bb\u0002H\t\u000f\u0002\u0007QR\b\u000b\u0005\u001b#\tZ\u000fC\u0004\u000f\u0012!\u0003\r!$\u0010\u0015\t55\u0015s\u001e\u0005\b#SJ\u0005\u0019AI)\u00039)f.\\1qa\u0006\u0014G.\u001a+sK\u0016\u00042!d\u0010M\u00059)f.\\1qa\u0006\u0014G.\u001a+sK\u0016\u001c\u0012\u0002TI}%\u0007qyD$#\u0011\t5}\u00123`\u0005\u0005#{\fzP\u0001\u0003Ue\u0016,\u0017\u0002\u0002J\u0001\u0019_\u0013Q\u0001\u0016:fKN\u0004B!d\u0010\u0013\u0006%!!sAI\u0000\u0005!!VM]7Ue\u0016,GCAIz)\tq9/A\u0004ua\u0016|F%Z9\u0015\t5E!\u0013\u0003\u0005\b%'y\u0005\u0019AGG\u0003\u0005!H\u0003BH\r%/A\u0011\"d\nS\u0003\u0003\u0005\rAd\u0013\u0015\t5m!3\u0004\u0005\n\u001bO!\u0016\u0011!a\u0001\u001f3\u0011QbU5oO2,Go\u001c8UsB,7\u0003CAv\u001dg\tjL%\t\u0011\t5}\"3E\u0005\u0005%KayM\u0001\tTS:<G.\u001a;p]RK\b/Z!qSR\u0011!\u0013\u0006\t\u0005\u001b\u007f\tY/A\u0005FeJ|'\u000fV=qKB!QrHA}\u0005%)%O]8s)f\u0004Xm\u0005\u0005\u0002z65er\bHE)\t\u0011j\u0003\u0006\u0006\u000e>I]\"\u0013\bJ\u001e%{A\u0001\"d*\u0003\u0002\u0001\u0007Q\u0012\u0016\u0005\t\u001f3\u0014\t\u00011\u0001\u0010(\"AqR\u001cB\u0001\u0001\u0004y9\u000b\u0003\u0005\u0012J\t\u0005\u0001\u0019AG\u000e)\u0011iiI%\u0011\t\u00119\r$1\u0001a\u0001\u001b{!Ba$\u0007\u0013F!QQr\u0005B\b\u0003\u0003\u0005\rAd\u0013\u0015\t5m!\u0013\n\u0005\u000b\u001bO\u0011\u0019\"!AA\u0002=eAC\u0001H&\u000319\u0016\u000e\u001c3dCJ$G+\u001f9f!\u0011iyD!\u0007\u0003\u0019]KG\u000eZ2be\u0012$\u0016\u0010]3\u0014\u0011\te!S\u000bH \u001d\u0013\u0003B!d\u0010\u0003r\tI\u0001K]8u_RK\b/Z\n\u0005\u0005cji\t\u0006\u0002\u0013V\u0005AAo\u001c\"pk:$7/A\u0006jg6\u000bGo\u00195fI\nKHCBG\u000e%G\u0012:\u0007\u0003\u0005\u0013f\tm\u0004\u0019AGG\u0003\t!\b\u000f\u0003\u0005\u0013j\tm\u0004\u0019\u0001H<\u0003\u0015!W\r\u001d;i\u0003!\u0019\u0017M\\'bi\u000eDGCBG\u000e%_\u0012\n\b\u0003\u0005\u0013f\tu\u0004\u0019AGG\u0011!\u0011JG! A\u00029]\u0014\u0001\u0006:fO&\u001cH/\u001a:UsB,W)];bY&$\u0018\u0010\u0006\u0003\u000e\u001cI]\u0004\u0002\u0003J3\u0005\u007f\u0002\r!$$\u0002'\u0015D\b/Z2ug\u001a+hn\u0019;j_:$\u0016\u0010]3\u0002\u001d\u0005\u001ch)\u001e8di&|g\u000eV=qK\u0006iAo\u001c,be&\fg\u000e\u001e+za\u0016$\"Ae\u0014\u0002\u0011\u0019LG\u000e\u001c'jgR$BA%\"\u0013\nB1Q2PGA%\u000fsA!d\u0010\u0003\u0018!A!3\u0012B\u0011\u0001\u0004qY%A\u0001o\u0003I1\u0015\u000e\u001c7MSN$8)Y2iK2KW.\u001b;\u0010\u0005IEU$\u0001\u0011\u0002\u001b\u0019KG\u000e\u001c'jgR\u001c\u0015m\u00195f+\t\u0011:\n\u0005\u0004\rBJe%SQ\u0005\u0005%7c9LA\u0003BeJ\f\u0017\u0010\u0006\u0003\u0010\u001aI}\u0005BCG\u0014\u0005W\t\t\u00111\u0001\u000fLQ!Q2\u0004JR\u0011)i9Ca\f\u0002\u0002\u0003\u0007q\u0012\u0004\u0002\u0014\u0005>,h\u000eZ3e/&dGmY1sIRK\b/Z\n\u000b\u0005g\u0011*F%+\u000f@9%\u0005\u0003BG %WKAA%,\rP\n1\"i\\;oI\u0016$w+\u001b7eG\u0006\u0014H\rV=qK\u0006\u0003\u0018.A\u0004c_VtGm\u001d\u0011\u0015\tIM&S\u0017\t\u0005\u001b\u007f\u0011\u0019\u0004\u0003\u0005\u000f*\te\u0002\u0019\u0001H\u0017)\u0019iYB%/\u0013<\"A!S\rB \u0001\u0004ii\t\u0003\u0005\u0013j\t}\u0002\u0019\u0001H<)\u0019iYBe0\u0013B\"A!S\rB!\u0001\u0004ii\t\u0003\u0005\u0013j\t\u0005\u0003\u0019\u0001H<)\u0011iYB%2\t\u0011I\u0015$1\ta\u0001\u001b\u001b#B!$$\u0013J\"Aa2 B(\u0001\u0004qi\u0010\u0006\u0003\u000e\u0012I5\u0007\u0002CH\u0005\u0005#\u0002\rad\u0003\u0002\t\r|\u0007/\u001f\u000b\u0005%g\u0013\u001a\u000e\u0003\u0006\u000f*\tM\u0003\u0013!a\u0001\u001d[\tabY8qs\u0012\"WMZ1vYR$\u0013'\u0006\u0002\u0013Z*\"aR\u0006JnW\t\u0011j\u000e\u0005\u0003\u0013`J\u0015XB\u0001Jq\u0015\u0011\u0011\u001a/d\u0014\u0002\u0013Ut7\r[3dW\u0016$\u0017\u0002\u0002Jt%C\u0014\u0011#\u001e8dQ\u0016\u001c7.\u001a3WCJL\u0017M\\2f)\u0011yIBe;\t\u00155\u001d\"1LA\u0001\u0002\u0004qY\u0005\u0006\u0003\u000e\u001cI=\bBCG\u0014\u0005?\n\t\u00111\u0001\u0010\u001aQ!ar\u001dJz\u0011)i9C!\u0019\u0002\u0002\u0003\u0007a2\n\u000b\u0005\u001b7\u0011:\u0010\u0003\u0006\u000e(\t\u0015\u0014\u0011!a\u0001\u001f3\t1CQ8v]\u0012,GmV5mI\u000e\f'\u000f\u001a+za\u0016\u0004B!d\u0010\u0003jM1!\u0011\u000eJ\u0000'\u000b\u0001B!d\u0010\u0014\u0002%!13\u0001Gh\u0005q\u0011u.\u001e8eK\u0012<\u0016\u000e\u001c3dCJ$G+\u001f9f\u000bb$(/Y2u_J\u0004Bae\u0002\u0014\u000e5\u00111\u0013\u0002\u0006\u0005'\u0017qy/\u0001\u0002j_&!a\u0012TJ\u0005)\t\u0011Z\u0010\u0006\u0003\u00134NM\u0001\u0002\u0003H\u0015\u0005[\u0002\rA$\f\u0002\u000fUt\u0017\r\u001d9msR!1\u0013DJ\u000e!\u0019a\t\r%'\u000f.!Q1S\u0004B8\u0003\u0003\u0005\rAe-\u0002\u0007a$\u0003G\u0001\nPm\u0016\u0014Hn\\1eK\u0012\f%o\u001a)s_R|7C\u0003BD%+\njLd\u0010\u000f\n\u00061\u0011M]4JIb,\"ae\n\u0011\u00115m4\u0013\u0006H&\u001bSKAae\u000b\u000e\u0006\n1Q)\u001b;iKJ\fq!\u0019:h\u0013\u0012D\b%\u0001\u0003qe\u0016\u0004\u0013\u0001D1mi\u0016\u0014h.\u0019;jm\u0016\u001c\u0018!D1mi\u0016\u0014h.\u0019;jm\u0016\u001c\b%\u0001\u0006pe&<WK\u001c3fiN$\u0002b%\u000f\u0014@M\u000533\t\u000b\u0005'w\u0019j\u0004\u0005\u0003\u000e@\t\u001d\u0005\u0002CJ\u001b\u0005/\u0003\r!$\u001f\t\u0011M\r\"q\u0013a\u0001'OA\u0001b$=\u0003\u0018\u0002\u0007QR\u0012\u0005\t'c\u00119\n1\u0001\u000ezQ1Q2DJ$'\u0013B\u0001B%\u001a\u0003\"\u0002\u0007QR\u0012\u0005\t%S\u0012\t\u000b1\u0001\u000fx\u0005i\u0001n\u001c4QCJ\fW\u000eV=qKN$B!$$\u0014P!Aa2 BU\u0001\u0004qi\u0010\u0006\u0003\u000e\u0012MM\u0003\u0002CH\u0005\u0005W\u0003\rad\u0003\u0002\tM\fW.\u001a\u000b\u0007\u001b7\u0019Jf%\u0018\t\u0011Mm#Q\u0016a\u0001\u001b\u001b\u000b\u0011\u0001\u001f\u0005\t'?\u0012i\u000b1\u0001\u000e\u000e\u0006\t\u00110\u0001\u0006QCJ\fW.\u0011;JIb\u0004Ba%\u001a\u000326\u0011!q\u0011\u0002\u000b!\u0006\u0014\u0018-\\!u\u0013\u0012D8\u0003\u0002BY\u0019\u007f#\"ae\u0019\u0015\tA]5s\u000e\u0005\t\u001f;\u0012)\f1\u0001\u000ez\u00051Ao\\,jY\u0012$B!$$\u0014v!A!S\rB\\\u0001\u0004ii)A\btC6,G+\u001f9fg\u001a{G\u000eZ3e\u0003I\u0019\u0018-\\3UsB,7OR8mI\u0016$7+Y7\u0016\u0005Mu\u0004CBG\u0018'\u007fji)\u0003\u0003\u000e\u00046E\u0012a\u00029s_R|G\u000b\u001d\u000b\t'\u000b\u001bJie#\u0014\u000eR!13HJD\u0011!\u0019*Da0A\u00025e\u0004BCJ\u0012\u0005\u007f\u0003\n\u00111\u0001\u0014(!Qq\u0012\u001fB`!\u0003\u0005\r!$$\t\u0015ME\"q\u0018I\u0001\u0002\u0004iI(\u0006\u0002\u0014\u0012*\"1s\u0005Jn\u00039\u0019w\u000e]=%I\u00164\u0017-\u001e7uII*\"ae&+\t55%3\\\u0001\u000fG>\u0004\u0018\u0010\n3fM\u0006,H\u000e\u001e\u00134+\t\u0019jJ\u000b\u0003\u000ezImG\u0003BH\r'CC!\"d\n\u0003L\u0006\u0005\t\u0019\u0001H&)\u0011iYb%*\t\u00155\u001d\"qZA\u0001\u0002\u0004yI\u0002\u0006\u0003\u000fhN%\u0006BCG\u0014\u0005#\f\t\u00111\u0001\u000fLQ!Q2DJW\u0011)i9C!6\u0002\u0002\u0003\u0007q\u0012D\u0001\u0013\u001fZ,'\u000f\\8bI\u0016$\u0017I]4Qe>$x\u000e\u0005\u0003\u000e@\te7C\u0002Bm\u0019\u007f\u001b*\u0001\u0006\u0002\u00142RA1\u0013XJ_'\u007f\u001b\n\r\u0006\u0003\u0014<Mm\u0006\u0002CJ\u001b\u0005?\u0004\r!$\u001f\t\u0011M\r\"q\u001ca\u0001'OA\u0001b$=\u0003`\u0002\u0007QR\u0012\u0005\t'c\u0011y\u000e1\u0001\u000ezQ!1SYJg!\u0019a\t\r%'\u0014HBQA\u0012YJe'Oii)$\u001f\n\tM-Gr\u0017\u0002\u0007)V\u0004H.Z\u001a\t\u0015Mu!\u0011]A\u0001\u0002\u0004\u0019Z$\u0001\u0004O_RK\b/\u001a\t\u0005\u001b\u007f\u0011)O\u0001\u0004O_RK\b/Z\n\t\u0005KliId\u0010\u000f\nR\u00111\u0013\u001b\u000b\u0005\u001f3\u0019Z\u000e\u0003\u0006\u000e(\tM\u0018\u0011!a\u0001\u001d\u0017\"B!d\u0007\u0014`\"QQr\u0005B|\u0003\u0003\u0005\ra$\u0007\u0002\u00119{\u0007K]3gSb\u0004B!d\u0010\u0003~\nAaj\u001c)sK\u001aL\u0007p\u0005\u0005\u0003~65er\bHE)\t\u0019\u001a\u000f\u0006\u0003\u0010\u001aM5\bBCG\u0014\u0007\u001b\t\t\u00111\u0001\u000fLQ!Q2DJy\u0011)i9c!\u0005\u0002\u0002\u0003\u0007q\u0012\u0004\u0002\t)\"L7\u000fV=qKNQ1Q\u0003J\u0015'otyD$#\u0011\t5}2\u0013`\u0005\u0005'wdyMA\u0006UQ&\u001cH+\u001f9f\u0003BL\u0017\u0001B:z[\u0002\"B\u0001&\u0001\u0015\u0004A!QrHB\u000b\u0011!q\tba\u0007A\u00025uB\u0003BH\r)\u000fA!\"d\n\u00042\u0005\u0005\t\u0019\u0001H&)\u0011iY\u0002f\u0003\t\u00155\u001d2QGA\u0001\u0002\u0004yI\u0002\u0006\u0003\u000fhR=\u0001BCG\u0014\u0007o\t\t\u00111\u0001\u000fLQ!Q2\u0004K\n\u0011)i9c!\u000f\u0002\u0002\u0003\u0007q\u0012D\u0001\t)\"L7\u000fV=qKB!QrHB\u001f'\u0019\u0019i\u0004f\u0007\u0014\u0006A!Qr\bK\u000f\u0013\u0011!z\u0002d4\u0003#QC\u0017n\u001d+za\u0016,\u0005\u0010\u001e:bGR|'\u000f\u0006\u0002\u0015\u0018Q!QR\u0012K\u0013\u0011!q\tb!\u0011A\u00025uB\u0003\u0002K\u0015)W\u0001b\u0001$1\u0011\u001a6u\u0002BCJ\u000f\u0007\u0007\n\t\u00111\u0001\u0015\u0002\tqQK\\5rk\u0016$\u0006.[:UsB,7\u0003BB#)\u0003!B\u0001f\r\u00156A!QrHB#\u0011!q\tb!\u0013A\u00025u\"AC*j]\u001edW\rV=qKNQ11\nJ\u0015)wqyD$#\u0011\t5}BSH\u0005\u0005)\u007fayMA\u0007TS:<G.\u001a+za\u0016\f\u0005/\u001b\u000b\u0007)\u0007\"*\u0005f\u0012\u0011\t5}21\n\u0005\t\u001fc\u001c)\u00061\u0001\u000e\u000e\"Aa\u0012CB+\u0001\u0004ii$A\u0004ue&4\u0018.\u00197\u0011\tQ5Cs\u000b\b\u0005)\u001f\"\u001aF\u0004\u0003\u000fzQE\u0013\u0002BG\u0004\u0019_KA\u0001&\u0016\u000e\u0006\u0005YA\u000b\u001b:fKZ\u000bG.^3t\u0013\u0011!J\u0006f\u0017\u0003\u0015QC'/Z3WC2,XM\u0003\u0003\u0015V5\u0015\u0011aD;oI\u0016\u0014H._5oO\u000e\u000b7\r[3\u0002'UtG-\u001a:ms&twmQ1dQ\u0016|F%Z9\u0015\t5EA3\r\u0005\u000b\u001bO\u0019y&!AA\u000255\u0015\u0001E;oI\u0016\u0014H._5oO\u000e\u000b7\r[3!Q\u0011\u0019\t\u0007&\u001b\u0011\t1\u0005G3N\u0005\u0005)[b9L\u0001\u0005w_2\fG/\u001b7f\u0003A)h\u000eZ3sYfLgn\u001a)fe&|G-\u0001\u000bv]\u0012,'\u000f\\=j]\u001e\u0004VM]5pI~#S-\u001d\u000b\u0005\u001b#!*\b\u0003\u0006\u000e(\r\u0015\u0014\u0011!a\u0001\u001d\u0017\n\u0011#\u001e8eKJd\u00170\u001b8h!\u0016\u0014\u0018n\u001c3!Q\u0011\u00199\u0007&\u001b\u0015\t55ES\u0010\u0005\t\u001dw\u001c9\b1\u0001\u000f~R!Q\u0012\u0003KA\u0011!yIa!\u001fA\u0002=-A\u0003BH\r)\u000bC!\"d\n\u0004\u0000\u0005\u0005\t\u0019\u0001H&)\u0011iY\u0002&#\t\u00155\u001d21QA\u0001\u0002\u0004yI\u0002\u0006\u0003\u000fhR5\u0005BCG\u0014\u0007\u000b\u000b\t\u00111\u0001\u000fLQ!Q2\u0004KI\u0011)i9ca\"\u0002\u0002\u0003\u0007q\u0012D\u00019g\u000e\fG.\u0019\u0013sK\u001adWm\u0019;%S:$XM\u001d8bY\u0012\"\u0016\u0010]3tI\u0011JgN^1mS\u0012\fG/Z*j]\u001edW\rV=qK\u000e\u000b7\r[3t\u0003)\u0019\u0016N\\4mKRK\b/\u001a\t\u0005\u001b\u007f\u0019ii\u0005\u0004\u0004\u000eRm5S\u0001\t\u0005\u001b\u007f!j*\u0003\u0003\u0015 2='aE*j]\u001edW\rV=qK\u0016CHO]1di>\u0014HC\u0001KL)\u0019ii\t&*\u0015(\"Aq\u0012_BI\u0001\u0004ii\t\u0003\u0005\u000f\u0012\rE\u0005\u0019AG\u001f)\u0011!Z\u000bf-\u0011\r1\u0005\u0007\u0013\u0014KW!!a\t\rf,\u000e\u000e6u\u0012\u0002\u0002KY\u0019o\u0013a\u0001V;qY\u0016\u0014\u0004BCJ\u000f\u0007'\u000b\t\u00111\u0001\u0015D\t\u0001RK\\5rk\u0016\u001c\u0016N\\4mKRK\b/Z\n\u0005\u0007+#\u001a\u0005\u0006\u0004\u0015<RuFs\u0018\t\u0005\u001b\u007f\u0019)\n\u0003\u0005\u0010r\u000em\u0005\u0019AGG\u0011!q\tba'A\u00025u\u0012\u0001\b3fM&tW-\u00168eKJd\u00170\u001b8h\u001f\u001a\u001c\u0016N\\4mKRK\b/\u001a\u000b\u0005\u001b#!*\r\u0003\u0005\rX\u000eu\u0005\u0019\u0001K\"\u0005%\u0019V\u000f]3s)f\u0004Xm\u0005\u0006\u0004 J%B3\u001aH \u001d\u0013\u0003B!d\u0010\u0015N&!As\u001aGh\u00051\u0019V\u000f]3s)f\u0004X-\u00119j\u0003\u001d!\b.[:ua\u0016\f\u0001\u0002\u001e5jgR\u0004X\rI\u0001\tgV\u0004XM\u001d;qK\u0006I1/\u001e9feR\u0004X\r\t\u000b\u0007)7$j\u000ef8\u0011\t5}2q\u0014\u0005\t)#\u001cI\u000b1\u0001\u000e\u000e\"AAS[BU\u0001\u0004ii\t\u0006\u0003\u000e\u000eR\r\b\u0002\u0003H~\u0007w\u0003\rA$@\u0015\t5EAs\u001d\u0005\t\u001f\u0013\u0019i\f1\u0001\u0010\fQ!q\u0012\u0004Kv\u0011)i9ca1\u0002\u0002\u0003\u0007a2\n\u000b\u0005\u001b7!z\u000f\u0003\u0006\u000e(\r\u001d\u0017\u0011!a\u0001\u001f3!BAd:\u0015t\"QQrEBe\u0003\u0003\u0005\rAd\u0013\u0015\t5mAs\u001f\u0005\u000b\u001bO\u0019Y-!AA\u0002=e\u0011!C*va\u0016\u0014H+\u001f9f!\u0011iyda4\u0014\r\r=Gs`J\u0003!\u0011iy$&\u0001\n\tU\rAr\u001a\u0002\u0013'V\u0004XM\u001d+za\u0016,\u0005\u0010\u001e:bGR|'\u000f\u0006\u0002\u0015|R1QRRK\u0005+\u001bA\u0001\"f\u0003\u0004T\u0002\u0007QRR\u0001\u0007i\"L7\u000f\u001e9\t\u0011U=11\u001ba\u0001\u001b\u001b\u000bqa];qKJ$\b\u000f\u0006\u0003\u0016\u0014U]\u0001C\u0002Ga!3+*\u0002\u0005\u0005\rBR=VRRGG\u0011)\u0019jb!6\u0002\u0002\u0003\u0007A3\u001c\u0002\u0010+:L\u0017/^3TkB,'\u000fV=qKN!1q\u001bKn)\u0019)z\"&\t\u0016$A!QrHBl\u0011!)Za!8A\u000255\u0005\u0002CK\b\u0007;\u0004\r!$$\u0002\u0015QK\b/\u001a\"pk:$7\u000f\u0005\u0003\u000e@\u0011e1C\u0002C\r+W\u0019*\u0001\u0005\u0003\u000e@U5\u0012\u0002BK\u0018\u0019\u001f\u00141\u0003V=qK\n{WO\u001c3t\u000bb$(/Y2u_J$\"!f\n\u0002\u000b\u0015l\u0007\u000f^=\u0002\u000bU\u0004\b/\u001a:\u0015\t95R\u0013\b\u0005\t\u001d?#y\u00021\u0001\u000e\u000e\u0006)An\\<feR!aRFK \u0011!qY\n\"\tA\u000255EC\u0002H\u0017+\u0007**\u0005\u0003\u0005\u000f\u001c\u0012\r\u0002\u0019AGG\u0011!qy\nb\tA\u000255E\u0003BK\n+\u0013B!b%\b\u0005&\u0005\u0005\t\u0019\u0001H\u0017\u0005A)f.[9vKRK\b/\u001a\"pk:$7o\u0005\u0003\u0005(95BCBK)+'**\u0006\u0005\u0003\u000e@\u0011\u001d\u0002\u0002\u0003HN\t[\u0001\r!$$\t\u00119}EQ\u0006a\u0001\u001b\u001b\u000bAbQ8na>,h\u000e\u001a+za\u0016\u0004B!d\u0010\u00052\ta1i\\7q_VtG\rV=qKN!A\u0011\u0007G`)\t)J\u0006\u0006\u0003\u0016dU\u001d\u0004C\u0002Ga!3+*\u0007\u0005\u0006\rBN%W2RG\\\u001b{A\u0001B%\u001a\u00056\u0001\u0007QRR\n\u0007\toii)f\u001b\u0011\t5}RSN\u0005\u0005+_byMA\bD_6\u0004x.\u001e8e)f\u0004X-\u00119j)\t)\u001a\b\u0005\u0003\u000e@\u0011]\u0012\u0001\u00052bg\u0016$\u0016\u0010]3TKF\u001c\u0015m\u00195f\u0003Q\u0011\u0017m]3UsB,7+Z9DC\u000eDWm\u0018\u0013fcR!Q\u0012CK>\u0011)i9\u0003\"\u0010\u0002\u0002\u0003\u0007a\u0012N\u0001\u0012E\u0006\u001cX\rV=qKN+\u0017oQ1dQ\u0016\u0004\u0013!\u00052bg\u0016$\u0016\u0010]3TKF\u0004VM]5pI\u0006)\"-Y:f)f\u0004XmU3r!\u0016\u0014\u0018n\u001c3`I\u0015\fH\u0003BG\t+\u000bC!\"d\n\u0005D\u0005\u0005\t\u0019\u0001H&\u0003I\u0011\u0017m]3UsB,7+Z9QKJLw\u000e\u001a\u0011\u0002!\t\f7/Z\"mCN\u001cXm]\"bG\",\u0017\u0001\u00062bg\u0016\u001cE.Y:tKN\u001c\u0015m\u00195f?\u0012*\u0017\u000f\u0006\u0003\u000e\u0012U=\u0005BCG\u0014\t\u0013\n\t\u00111\u0001\u000ez\u0005\t\"-Y:f\u00072\f7o]3t\u0007\u0006\u001c\u0007.\u001a\u0011\u0002#\t\f7/Z\"mCN\u001cXm\u001d)fe&|G-A\u000bcCN,7\t\\1tg\u0016\u001c\b+\u001a:j_\u0012|F%Z9\u0015\t5EQ\u0013\u0014\u0005\u000b\u001bO!y%!AA\u00029-\u0013A\u00052bg\u0016\u001cE.Y:tKN\u0004VM]5pI\u0002\nA!\\3n_V!Q\u0013UKT)\u0011)\u001a+&-\u0015\tU\u0015V3\u0016\t\u0005!;*:\u000b\u0002\u0005\u0016*\u0012e#\u0019\u0001I2\u0005\u0005\t\u0005\u0002CKW\t3\u0002\r!f,\u0002\u0007=\u0004(\u0007\u0005\u0005\rB:eWRRKS\u0011%)\u001a\f\"\u0017\u0005\u0002\u0004)*,A\u0002paF\u0002b\u0001$1\u0011\bV\u0015F\u0003BGG+sC\u0001B$\u0005\u0005\\\u0001\u0007QRH\u0001\u0011g\"|W\u000f\u001c3G_J\u001cWmU2pa\u0016\f\u0011\"\u001b8ji\u0012+7\r\\:\u0002\u0017M\u001cw\u000e]3TiJLgnZ\u0001<g\u000e\fG.\u0019\u0013sK\u001adWm\u0019;%S:$XM\u001d8bY\u0012\"\u0016\u0010]3tI\u0011JgN^1mS\u0012\fG/\u001a3D_6\u0004x.\u001e8e)f\u0004XmQ1dQ\u0016\u001c\u0018AE2p[B,H/\u001a\"bg\u0016\u001cE.Y:tKN$B!$\u001f\u0016H\"AAr\u001bC6\u0001\u0004ii)A\u0010eK\u001aLg.\u001a\"bg\u0016$\u0016\u0010]3TKF|emQ8na>,h\u000e\u001a+za\u0016$B!$\u0005\u0016N\"AAr\u001bC7\u0001\u0004)\u001a(A\u0010eK\u001aLg.\u001a\"bg\u0016\u001cE.Y:tKN|emQ8na>,h\u000e\u001a+za\u0016$B!$\u0005\u0016T\"AAr\u001bC8\u0001\u0004)\u001aHA\u0006SK\u001aLg.\u001a3UsB,7C\u0003C9+g*JNd\u0010\u000f\nB!QrHKn\u0013\u0011)j\u000ed4\u0003\u001dI+g-\u001b8fIRK\b/Z!qS\u0006A\u0001/\u0019:f]R\u001c\b%\u0001\u0004eK\u000ed7\u000f\t\u000b\u0007+K,:/&;\u0011\t5}B\u0011\u000f\u0005\t\u001d3\"Y\b1\u0001\u000e\f\"Aa2\fC>\u0001\u0004i9,\u0001\u0006o_Jl\u0017\r\\5{K\u0012\fQB\\8s[\u0006d\u0017N_3J[BdG\u0003BGG+cD\u0001Bd?\u0005\u000e\u0002\u0007aR \u000b\u0005\u001b#)*\u0010\u0003\u0005\u0010\n\u0011=\u0005\u0019AH\u0006)\u0019)*/&?\u0016|\"Qa\u0012\fCI!\u0003\u0005\r!d#\t\u00159mC\u0011\u0013I\u0001\u0002\u0004i9,\u0006\u0002\u0016\u0000*\"Q2\u0012Jn+\t1\u001aA\u000b\u0003\u000e8JmG\u0003BH\r-\u000fA!\"d\n\u0005\u001c\u0006\u0005\t\u0019\u0001H&)\u0011iYBf\u0003\t\u00155\u001dBqTA\u0001\u0002\u0004yI\u0002\u0006\u0003\u000fhZ=\u0001BCG\u0014\tC\u000b\t\u00111\u0001\u000fLQ!Q2\u0004L\n\u0011)i9\u0003\"*\u0002\u0002\u0003\u0007q\u0012D\u0001\f%\u00164\u0017N\\3e)f\u0004X\r\u0005\u0003\u000e@\u0011%6C\u0002CU-7\u0019*\u0001\u0005\u0003\u000e@Yu\u0011\u0002\u0002L\u0010\u0019\u001f\u0014ACU3gS:,G\rV=qK\u0016CHO]1di>\u0014HC\u0001L\f)!)*O&\n\u0017(Y%\u0002\u0002\u0003H-\t[\u0003\r!d#\t\u00119mCQ\u0016a\u0001\u001boC\u0001Bd\u0019\u0005.\u0002\u0007QR\b\u000b\u0007+K4jCf\f\t\u00119eCq\u0016a\u0001\u001b\u0017C\u0001Bd\u0017\u00050\u0002\u0007Qr\u0017\u000b\u0005-g1:\u0004\u0005\u0004\rBBeeS\u0007\t\t\u0019\u0003$z+d#\u000e8\"Q1S\u0004CY\u0003\u0003\u0005\r!&:\u0003\u0019I+g-\u001b8fIRK\b/\u001a\u0019\u0014\t\u0011MVS\u001d\u000b\t-\u007f1\nEf\u0011\u0017FA!Qr\bCZ\u0011!qI\u0006b/A\u00025-\u0005\u0002\u0003H.\tw\u0003\r!d.\t\u00119\rD1\u0018a\u0001\u001b{\t\u0011C^1mS\u0012\fG/Z\"mCN\u001c\u0018J\u001c4p)\u0011i\tBf\u0013\t\u0011I\u0015Dq\u0018a\u0001-\u001b\u0002B!d\u0010\u0005B\ni1\t\\1tg&sgm\u001c+za\u0016\u001c\"\u0002\"1\u0016tYMcr\bHE!\u0011iyD&\u0016\n\tY]Cr\u001a\u0002\u0011\u00072\f7o]%oM>$\u0016\u0010]3Ba&\f1\u0002^=qKNKXNY8mAQAaS\nL/-?2\n\u0007\u0003\u0005\u000fZ\u0011=\u0007\u0019AGF\u0011!qY\u0006b4A\u00025]\u0006\u0002\u0003H\r\t\u001f\u0004\r!$\u0010\u0002\u00199{g.\u0012=qC:\u001c\u0018N^3\u0016\u0005Y\u001dtB\u0001L5;\u0005\u0001\u0011!\u0004(p]\u0016C\b/\u00198tSZ,\u0007%A\u0005FqB\fgn]5wKV\u0011a\u0013O\b\u0003-gj\u0012!A\u0001\u000b\u000bb\u0004\u0018M\\:jm\u0016\u0004\u0013!D+o\u0013:LG/[1mSj,G-\u0001\bV]&s\u0017\u000e^5bY&TX\r\u001a\u0011\u0002\u0019%s\u0017\u000e^5bY&T\u0018N\\4\u0002\u001b%s\u0017\u000e^5bY&T\u0018N\\4!\u0003-Ie.\u001b;jC2L'0\u001a3\u0016\u0005Y\ruB\u0001LC;\u0005\u0011\u0011\u0001D%oSRL\u0017\r\\5{K\u0012\u0004#A\u0002*fM6\u000b\u0007\u000f\u0005\u0005\u000fBZ5UR\bLI\u0013\u00111zI$4\u0003\u00075\u000b\u0007\u000f\u0005\u0004\u000fBZMURH\u0005\u0005\u001bwqi-A\u0007fqB\fgn]5wKJ+gm\u001d\u000b\u0005-#3J\n\u0003\u0005\u0017\u001c\u0012\u001d\b\u0019AG\u001f\u0003\u0019!\b/\u0019:b[\u0006!!/\u001a4t!\u0019a\tM%'\u0017\"B!a3\u0015Cs\u001b\t!\t-A\u0003ti\u0006$X-A\u0005ti\u0006$Xm\u0018\u0013fcR!Q\u0012\u0003LV\u0011)i9\u0003\"<\u0002\u0002\u0003\u0007a2J\u0001\u0007gR\fG/\u001a\u0011\u0002\u000f\u001d,GOU3ggR1a\u0013\u0013LZ-oC\u0001B&.\u0005r\u0002\u0007a2J\u0001\u0006o\"L7\r\u001b\u0005\t\u001bo\"\t\u00101\u0001\u000e>\u00051\u0011\r\u001a3SK\u001a$\u0002\"$\u0005\u0017>Z}f\u0013\u0019\u0005\t-k#\u0019\u00101\u0001\u000fL!AQr\u000fCz\u0001\u0004ii\u0004\u0003\u0005\u000e\n\u0012M\b\u0019AG\u001f\u0003\u001d\tG\r\u001a*fMN$\u0002\"$\u0005\u0017HZ%g3\u001a\u0005\t-k#)\u00101\u0001\u000fL!AQr\u000fC{\u0001\u0004ii\u0004\u0003\u0005\u000e\n\u0012U\b\u0019\u0001LI\u0003%\u0019G.Y:t\u0013:4w\u000e\u0006\u0003\u0017NYE\u0007\u0002\u0003LN\to\u0004\r!$\u0010)\t\u0011]x2Q\u0001\nK:$XM\u001d*fMN\u0004BAf)\u0005|\nIQM\u001c;feJ+gm]\n\u0005\twti\u0010\u0006\u0002\u0017XR!QR\u0012Lq\u0011!\u0011*'\"\u0001A\u000255\u0015!B3oi\u0016\u0014HCBG\t-O4Z\u000f\u0003\u0005\u0017j\u0016\r\u0001\u0019AG\u001f\u0003\u001d!\b/\u0019:b[BB\u0001B&<\u0006\u0004\u0001\u0007QRR\u0001\u0007a\u0006\u0014XM\u001c;\u0002\u0017\r|W\u000e];uKJ+gm]\u0001\naJ|\u0007/Y4bi\u0016$\"!d\u0007\u0002#\u0019|'/\\1ui\u0016$Gk\\*ue&tw\r\u0006\u0005\u0017NYeh3 L\u007f\u0011)qI&b\u0005\u0011\u0002\u0003\u0007Q2\u0012\u0005\u000b\u001d7*\u0019\u0002%AA\u00025]\u0006B\u0003H\r\u000b'\u0001\n\u00111\u0001\u000e>U\u0011q\u0013\u0001\u0016\u0005\u001b{\u0011Z\u000e\u0006\u0003\u0010\u001a]\u0015\u0001BCG\u0014\u000b?\t\t\u00111\u0001\u000fLQ!Q2DL\u0005\u0011)i9#b\t\u0002\u0002\u0003\u0007q\u0012\u0004\u000b\u0005\u001dO<j\u0001\u0003\u0006\u000e(\u0015\u0015\u0012\u0011!a\u0001\u001d\u0017\"B!d\u0007\u0018\u0012!QQrEC\u0015\u0003\u0003\u0005\ra$\u0007\u0002\u001b\rc\u0017m]:J]\u001a|G+\u001f9f!\u0011iy$\"\f\u0014\r\u00155r\u0013DJ\u0003!\u0011iydf\u0007\n\t]uAr\u001a\u0002\u0017\u00072\f7o]%oM>$\u0016\u0010]3FqR\u0014\u0018m\u0019;peR\u0011qS\u0003\u000b\t-\u001b:\u001ac&\n\u0018(!Aa\u0012LC\u0019\u0001\u0004iY\t\u0003\u0005\u000f\\\u0015E\u0002\u0019AG\\\u0011!qI\"\"\rA\u00025uB\u0003BK2/WA!b%\b\u00064\u0005\u0005\t\u0019\u0001L'\u0005Q\u0001\u0016mY6bO\u0016\u001cE.Y:t\u0013:4w\u000eV=qKN!QQ\u0007L')\u00199\u001ad&\u000e\u00188A!QrHC\u001b\u0011!qY&b\u000fA\u00025]\u0006\u0002\u0003H2\u000bw\u0001\r!$\u0010\u0003\u0019\r{gn\u001d;b]R$\u0016\u0010]3\u0014\r\u0015u\"\u0013FL\u001f!\u0011iydf\u0010\n\t]\u0005Cr\u001a\u0002\u0010\u0007>t7\u000f^1oiRK\b/Z!qSR\u0011qS\t\t\u0005\u001b\u007f)i$\u0006\u0002\u0018JA!QrHL&\u0013\u00119jef\u0014\u0003\u0011\r{gn\u001d;b]RLAa&\u0015\r0\nI1i\u001c8ti\u0006tGo]\u0001\r\u0007>t7\u000f^1oiRK\b/\u001a\t\u0005\u001b\u007f)Ie\u0005\u0003\u0006J]e\u0003\u0003BG /7JAa&\u0018\rP\n)2i\u001c8ti\u0006tG\u000fV=qK\u0016CHO]1di>\u0014HCAL+)\u00119*ef\u0019\t\u0011]\u0015TQ\na\u0001/\u0013\n\u0011a\u0019\u000b\u0005/S:z\u0007\u0005\u0004\rB^-t\u0013J\u0005\u0005/[b9L\u0001\u0003T_6,\u0007\u0002\u0003Gl\u000b\u001f\u0002\ra&\u0012\u0003)\u0019{G\u000eZ1cY\u0016\u001cuN\\:uC:$H+\u001f9f'!)\tf&\u0012\u000f@9%\u0015A\u0002<bYV,\u0007\u0005\u0006\u0003\u0018z]m\u0004\u0003BG \u000b#B\u0001\"%%\u0006X\u0001\u0007q\u0013\n\u000b\u0005\u001f39z\b\u0003\u0006\u000e(\u0015\r\u0014\u0011!a\u0001\u001d\u0017\"B!d\u0007\u0018\u0004\"QQrEC4\u0003\u0003\u0005\ra$\u0007\u0015\t9\u001dxs\u0011\u0005\u000b\u001bO)I'!AA\u00029-C\u0003BG\u000e/\u0017C!\"d\n\u0006l\u0005\u0005\t\u0019AH\r\u0003Q1u\u000e\u001c3bE2,7i\u001c8ti\u0006tG\u000fV=qKB!QrHC8'\u0019)y\u0007d0\u0014\u0006Q\u0011qs\u0012\u000b\u0005//;\n\u000b\u0005\u0003\u000e@\u0015]$AE+oSF,XmQ8ogR\fg\u000e\u001e+za\u0016\u001cB!b\u001e\u0018zQ!qsSLP\u0011!\t\n*b\u001fA\u0002]%\u0003\u0002CII\u000bg\u0002\ra&\u0013\u0015\t]\u0015vs\u0015\t\u0007\u0019\u0003\u0004Jj&\u0013\t\u0015MuQQOA\u0001\u0002\u00049JHA\u0006MSR,'/\u00197UsB,7\u0003CC?/\u000bryD$#\u0015\t]=v\u0013\u0017\t\u0005\u001b\u007f)i\b\u0003\u0005\u0012\u0012\u0016\r\u0005\u0019AL%)\u0011yIb&.\t\u00155\u001dRqRA\u0001\u0002\u0004qY\u0005\u0006\u0003\u000e\u001c]e\u0006BCG\u0014\u000b'\u000b\t\u00111\u0001\u0010\u001aQ!ar]L_\u0011)i9#\"&\u0002\u0002\u0003\u0007a2\n\u000b\u0005\u001b79\n\r\u0003\u0006\u000e(\u0015]\u0015\u0011!a\u0001\u001f3\t1\u0002T5uKJ\fG\u000eV=qKB!QrHCN'\u0019)Y\nd0\u0014\u0006Q\u0011qS\u0019\u000b\u0005/\u001b<:\u000e\u0005\u0003\u000e@\u0015\r&!E+oSF,X\rT5uKJ\fG\u000eV=qKN!Q1ULX)\u00119jm&6\t\u0011EEUq\u0015a\u0001/\u0013B\u0001\"%%\u0006 \u0002\u0007q\u0013\n\u000b\u0005/K;Z\u000e\u0003\u0006\u0014\u001e\u0015\u0005\u0016\u0011!a\u0001/_\u00131\"\u0011:hgRK\b/\u001a*fMN!Q\u0011VLq!\u0011iyDb\u0015\u0003\u000fQK\b/\u001a*fMNQa1\u000bH\u001d/OtyD$#\u0011\t5}r\u0013^\u0005\u0005/WdyM\u0001\u0006UsB,'+\u001a4Ba&\fA!\u0019:hg\u0006)\u0011M]4tAQAq\u0013]Lz/k<:\u0010\u0003\u0005\u0010r\u001a\u0005\u0004\u0019AGG\u0011!q\tB\"\u0019A\u00025u\u0002\u0002CLw\rC\u0002\r!d#\u0015\t55u3 \u0005\t\u001dw4\u0019\u00071\u0001\u000f~R!Q\u0012CL\u0000\u0011!yIA\"\u001aA\u0002=-\u0011\u0001\u00049be\u0016tGo]\"bG\",\u0017\u0001\u00059be\u0016tGo]\"bG\",w\fJ3r)\u0011i\t\u0002g\u0002\t\u00155\u001dbqNA\u0001\u0002\u0004iY)A\u0007qCJ,g\u000e^:DC\u000eDW\rI\u0001\u000ea\u0006\u0014XM\u001c;t!\u0016\u0014\u0018n\u001c3\u0002#A\f'/\u001a8ugB+'/[8e?\u0012*\u0017\u000f\u0006\u0003\u000e\u0012aE\u0001BCG\u0014\rk\n\t\u00111\u0001\u000fL\u0005q\u0001/\u0019:f]R\u001c\b+\u001a:j_\u0012\u0004C\u0003BG\t1/A!\"d\n\u0007|\u0005\u0005\t\u0019\u0001H5)\u0011i\t\u0002g\u0007\t\u00155\u001db\u0011QA\u0001\u0002\u0004qY\u0005\u000b\u0003\u0007\u0006R%D\u0003BG\u000e1CA\u0001\u0002g\t\u0007\n\u0002\u0007q\u0012D\u0001\u0006_RDWM]\u0001\re\u0016d\u0017\r^5wK&sgm\\\u0001\u000be\u0016d\u0017\r^5wSj,G\u0003BGG1WA\u0001B%\u001a\u0007\u000e\u0002\u0007QRR\u0001\u000eCJ<7o\u0014:Ek6l\u0017.Z:\u0015\t55\u0005\u0014\u0007\u0005\t\u001dG2\t\n1\u0001\u000e>\u0005I\"-Y:f)f\u0004Xm\u00144O_:\u001cE.Y:t)f\u0004XMU3g)\u0011ii\tg\u000e\t\u00119\rd1\u0013a\u0001\u001b{\tqDY1tKRK\b/Z(g\u001d>t7\t\\1tgRK\b/\u001a*fM2{wmZ3e)\u0011ii\t'\u0010\t\u00119\rdQ\u0013a\u0001\u001b{\t1bY8fm>dg/Z*z[R!QR\bM\"\u0011!A*Eb(A\u000255\u0015\u0001\u00029sKF\nQ#\u001b8ji&\fG.\u001b>fIRK\b/\u001a)be\u0006l7/A\nusB,\u0007+\u0019:b[Nl\u0015\r^2i\u0003J<7/A\u0006qCJ,g\u000e^:J[Bd\u0017a\u00042bg\u0016$\u0016\u0010]3TKFLU\u000e\u001d7\u0002\u001d9,W\rZ:Qe\u0016\u001cFO]5oO\u0006I\u0001O]3TiJLgnZ\u0001\u000bCJ<7o\u0015;sS:<\u0017a\u0004:fM&tW-\\3oi\u0012+7\r\\:\u0002!I,g-\u001b8f[\u0016tGo\u0015;sS:<\u0017\u0001\u00044j]&\u001c\b\u000e\u0015:fM&DH\u0003\u0002Ht1;B\u0001\u0002g\u0018\u0007P\u0002\u0007arX\u0001\u0005e\u0016\u001cH/\u0001\u0007o_\u0006\u0013xm]*ue&tw-A\bukBdW\rV=qKN#(/\u001b8h\u0003=IgNZ5y)f\u0004Xm\u0015;sS:<\u0017AD2vgR|W\u000eV8TiJLgnZ\u000b\u00031W\u0002B\u0001$1\u0019n%!\u0001t\u000eG\\\u0005\u0011qU\u000f\u001c7)\u0019\u0019u\u00074\u000fM=1wBz\b'!\u0011\t1\u0005\u0007TO\u0005\u00051ob9L\u0001\u0006eKB\u0014XmY1uK\u0012\fq!\\3tg\u0006<W-\t\u0002\u0019~\u0005\u00113+\u001e9qe\u0016\u001c8/\u001b8hA\r\f7/\u001a\u0011dY\u0006\u001c8\u000fI2paf\u0004S.\u001a;i_\u0012\fQa]5oG\u0016\f#\u0001g!\u0002\u000f\u0019|'/\u001a<fe\"\"aQ\\G&)\u0011yI\u0002'#\t\u00155\u001dbQ]A\u0001\u0002\u0004qY\u0005\u0006\u0003\u000e\u001ca5\u0005BCG\u0014\rS\f\t\u00111\u0001\u0010\u001aQ!ar\u001dMI\u0011)i9Cb;\u0002\u0002\u0003\u0007a2J\u00016g\u000e\fG.\u0019\u0013sK\u001adWm\u0019;%S:$XM\u001d8bY\u0012\"\u0016\u0010]3tI\u0011JgN^1mS\u0012\fG/\u001a+za\u0016\u0014VMZ\"bG\",7/\u0001\u0018tG\u0006d\u0017\r\n:fM2,7\r\u001e\u0013j]R,'O\\1mIQK\b/Z:%I\u0011,g-\u001b8f\u001d>\u0014X.\u00197ju\u0016$\u0017\u0001\u00029sKB\nAa]=na\u0005)\u0011M]4taQA\u0001t\u0014MQ1GC*\u000b\u0005\u0003\u000e@\u0015%\u0006\u0002\u0003ML\u000bc\u0003\r!$$\t\u0011aeU\u0011\u0017a\u0001\u001b{A\u0001\u0002g'\u00062\u0002\u0007Q2R\u000b\u00031S\u0003B!d\f\u0019,*!\u0001TVG\u0019\u0003\rq\u0015\u000e\u001c\u0002\u000e\u001b>$W\u000f\\3UsB,'+\u001a4\u0014\t\u0015e\u00064\u0017\t\u0005\u001b\u007f)IOA\u0007O_\u0006\u0013xm\u001d+za\u0016\u0014VMZ\n\u0005\u000bS<\n\u000f\u0006\u0004\u00194bm\u0006T\u0018\u0005\t1/+y\u000f1\u0001\u000e\u000e\"A\u0001\u0014TCx\u0001\u0004ii\u0004\u0006\u0004\u000e\u000eb\u0005\u00074\u0019\u0005\t\u001fS*)\u00101\u0001\u000ez!Aq2KC{\u0001\u0004iY)\u0006\u0002\u00194R1\u0001\u0014\u001aMf1\u001b\u0004B!d\u0010\u0006:\"A\u0001tSC`\u0001\u0004ii\t\u0003\u0005\u0019\u001a\u0016}\u0006\u0019AG\u001f\u00035q\u0017M\u001d:po\u0016$7)Y2iKR!ar\u001dMj\u0011!Az&b2A\u00029}&A\u0004)bG.\fw-\u001a+za\u0016\u0014VMZ\n\u0005\u000b'DJ\r\u0006\u0004\u0019\\bu\u0007t\u001c\t\u0005\u001b\u007f)\u0019\u000e\u0003\u0005\u0019\u0018\u0016e\u0007\u0019AGG\u0011!AJ*\"7A\u00025uB\u0003\u0002Ht1GD\u0001\u0002g\u0018\u0006\\\u0002\u0007ar\u0018\u0002\u0012%\u00164\u0017N\\3nK:$H+\u001f9f%\u001647\u0003BCo1g#b\u0001g;\u0019nb=\b\u0003BG \u000b;D\u0001\u0002g&\u0006d\u0002\u0007QR\u0012\u0005\t13+\u0019\u000f1\u0001\u000e>Q!ar\u001dMz\u0011!Az&b:A\u00029}&a\u0004(p]\u000ec\u0017m]:UsB,'+\u001a4\u0014\t\u0015ux\u0013]\u0001\u0012e\u0016d\u0017\r^5wK&sgm\\\"bG\",\u0017!\u0006:fY\u0006$\u0018N^3J]\u001a|7)Y2iK~#S-\u001d\u000b\u0005\u001b#Az\u0010\u0003\u0006\u000e(\u0019\r\u0011\u0011!a\u0001\u001b\u001b\u000bqD]3mCRLg/Z%oM>\u001c\u0015m\u00195f-\u0006d\u0017\u000e\u001a$peB+'/[8e+\tI*\u0001\u0005\u0003\u000e@e\u001d\u0011\u0002BM\u00053\u0017\u0011a\u0001U3sS>$\u0017\u0002BM\u0007\u0019_\u00131bU=nE>dG+\u00192mK\u0006\u0019#/\u001a7bi&4X-\u00138g_\u000e\u000b7\r[3WC2LGMR8s!\u0016\u0014\u0018n\u001c3`I\u0015\fH\u0003BG\t3'A!\"d\n\u0007\b\u0005\u0005\t\u0019AM\u0003\u0003\u0001\u0012X\r\\1uSZ,\u0017J\u001c4p\u0007\u0006\u001c\u0007.\u001a,bY&$gi\u001c:Ts6LeNZ8\u0002II,G.\u0019;jm\u0016LeNZ8DC\u000eDWMV1mS\u00124uN]*z[&sgm\\0%KF$B!$\u0005\u001a\u001c!QQr\u0005D\u0006\u0003\u0003\u0005\r!$$\u0002)Y\fG.\u001b3bi\u0016\u0014V\r\\1uSZ,\u0017J\u001c4p\u0003u\u0019X\u000f]3sI%tg/\u00197jI\u0006$X\rV=qKJ+gmQ1dQ\u0016\u001c\u0018AE:va\u0016\u0014HE]3mCRLg/Z%oM>\u0014A\"\u00117jCN$\u0016\u0010]3SK\u001a\u001cbAb\u0006\u0018bf\u001d\u0002\u0003BG \u000b{$B!$\u0010\u001a,!A\u0011T\u0006D\u0019\u0001\u0004ii)\u0001\u0004oK^\u0004&/Z\u0001\u000egV\u0004XM\u001d\u0013eK\u0006d\u0017.Y:\u0002!M,\b/\u001a:%i\u0016\u0014XnU=nE>d\u0017!D:va\u0016\u0014H%[:FeJ|'/A\ntkB,'\u000f\n8pe6\fG.\u001b>f\u00136\u0004H.\u0001\bf[\n,G\rZ3e'fl'm\u001c7\u0015\r5u\u00124HM\u001f\u0011!\u0011*G\"\u0010A\u000255\u0005\u0002CGT\r{\u0001\r!$+\u0003\u001f\u0005\u00137\u000f\u001e:bGR$\u0016\u0010]3SK\u001a\u001cbAb\u0010\u0018bf\u001d\u0012a\u0002+za\u0016\u0014VM\u001a\t\u0005\u001b\u007f1\u0019p\u0005\u0004\u0007tf%3S\u0001\t\u0005\u001b\u007fIZ%\u0003\u0003\u001aN1='\u0001\u0005+za\u0016\u0014VMZ#yiJ\f7\r^8s)\tI*\u0005\u0006\u0005\u000e\u000efM\u0013TKM,\u0011!y\tPb>A\u000255\u0005\u0002\u0003H\t\ro\u0004\r!$\u0010\t\u0011]5hq\u001fa\u0001\u001b\u0017#B!g\u0017\u001a`A1A\u0012\u0019IM3;\u0002\"\u0002$1\u0014J65URHGF\u0011)\u0019jB\"?\u0002\u0002\u0003\u0007q\u0013\u001d\u0002\u0011\u00032L\u0017m]!sON$\u0016\u0010]3SK\u001a\u001cbAb?\u0019 f\u0015\u0004\u0003BG \r/!\u0002\"'\u001b\u001ale5\u0014t\u000e\t\u0005\u001b\u007f1Y\u0010\u0003\u0005\u0010r\u001e\r\u0001\u0019AGG\u0011!q\tbb\u0001A\u00025u\u0002\u0002CLw\u000f\u0007\u0001\r!d#\u0003'\u0005\u00137\u000f\u001e:bGR\f%oZ:UsB,'+\u001a4\u0014\r\u001d\u0015\u0001tTM;!\u0011iyDb\u0010\u0015\u0011ee\u00144PM?3\u007f\u0002B!d\u0010\b\u0006!Aq\u0012_D\u0007\u0001\u0004ii\t\u0003\u0005\u000f\u0012\u001d5\u0001\u0019AG\u001f\u0011!9jo\"\u0004A\u00025-%\u0001E\"mCN\u001c\u0018I]4t)f\u0004XMU3g'\u00119y\u0001g(\u0015\u0011e\u001d\u0015\u0014RMF3\u001b\u0003B!d\u0010\b\u0010!Aq\u0012_D\f\u0001\u0004ii\t\u0003\u0005\u000f\u0012\u001d]\u0001\u0019AG\u001f\u0011!9job\u0006A\u00025-%AE!mS\u0006\u001chj\\!sON$\u0016\u0010]3SK\u001a\u001cba\"\u0007\u00194f\u0015DCBMK3/KJ\n\u0005\u0003\u000e@\u001de\u0001\u0002CHy\u000f?\u0001\r!$$\t\u00119Eqq\u0004a\u0001\u001b{\u0011Q#\u00112tiJ\f7\r\u001e(p\u0003J<7\u000fV=qKJ+gm\u0005\u0004\b\"aM\u0016T\u000f\u000b\u00073CK\u001a+'*\u0011\t5}r\u0011\u0005\u0005\t\u001fc<9\u00031\u0001\u000e\u000e\"Aa\u0012CD\u0014\u0001\u0004iiD\u0001\nDY\u0006\u001c8OT8Be\u001e\u001cH+\u001f9f%\u001647\u0003BD\u00151g#b!',\u001a0fE\u0006\u0003BG \u000fSA\u0001b$=\b0\u0001\u0007QR\u0012\u0005\t\u001d#9y\u00031\u0001\u000e>Q!Q2DM[\u0011!AJj\"\rA\u00025u\"\u0001E(cU\u0016\u001cG\u000f\u00169f\u0015\u00064\u0018MU3g'\u00119\u0019\u0004g-\u0015\u0005eu\u0006\u0003BG \u000fg!B!d\u0007\u001aB\"A\u0001\u0014TD\u001c\u0001\u0004ii$\u0001\teK\u001aLg.\u001a(pe6\fG.\u001b>fIR!Q\u0012CMd\u0011!IJm\"\u000fA\u0002]\u0005\u0018A\u0001;s\u0003Y!WMZ5oKB\u000b'/\u001a8ug>3G+\u001f9f%\u00164G\u0003BG\t3\u001fD\u0001\u0002d6\b<\u0001\u0007q\u0013]\u0001\u001bI\u00164\u0017N\\3CCN,G+\u001f9f'\u0016\fxJ\u001a+za\u0016\u0014VM\u001a\u000b\u0005\u001b#I*\u000e\u0003\u0005\rX\u001eu\u0002\u0019ALq\u0005)iU\r\u001e5pIRK\b/Z\n\u000b\u000f\u007fii)g7\u000f@9%\u0005\u0003BG 3;LA!g8\rP\niQ*\u001a;i_\u0012$\u0016\u0010]3Ba&\fq\u0001]1sC6\u001c\b%A\u0006sKN,H\u000e\u001e+za\u0016\u0004CCBMt3SLZ\u000f\u0005\u0003\u000e@\u001d}\u0002\u0002CH/\u000f\u0013\u0002\r!$\u001f\t\u0011=5s\u0011\na\u0001\u001b\u001b\u000bq\"[:Ue&4\u0018.\u00197SKN,H\u000e^\u0001\u0011CJ,GK]5wS\u0006d\u0007+\u0019:b[N\f!\"[:J[Bd\u0017nY5u\u0003]\u0011Xm];miRK\b/Z(x]B\u000b'/Y7UsB,7\u000f\u0006\u0003\u000e\u000ef]\b\u0002CH*\u000f;\u0002\r!d#\u0002\u0017I,7/\u001e7u)f\u0004X\r\r\u000b\u0005\u001b\u001bKj\u0010\u0003\u0005\u0010T\u001d}\u0003\u0019AGF\u0003%I7\u000fZ3q[\u0016$\b.A\u0006baB\u0014x\u000e_5nCR,WCAMt)\u0011iiIg\u0002\t\u0011=Mt\u0011\u000ea\u0001\u001b{!B!$$\u001b\f!Aq2OD6\u0001\u0004ii\u0004\u0006\u0003\u000e\u000ej=\u0001\u0002\u0003H~\u000f_\u0002\rA$@\u0015\t5E!4\u0003\u0005\t\u001f\u00139\t\b1\u0001\u0010\fQ1\u0011t\u001dN\f53A!b$\u0018\btA\u0005\t\u0019AG=\u0011)yieb\u001d\u0011\u0002\u0003\u0007QR\u0012\u000b\u0005\u001f3Qj\u0002\u0003\u0006\u000e(\u001du\u0014\u0011!a\u0001\u001d\u0017\"B!d\u0007\u001b\"!QQrEDA\u0003\u0003\u0005\ra$\u0007\u0015\t9\u001d(T\u0005\u0005\u000b\u001bO9\u0019)!AA\u00029-C\u0003BG\u000e5SA!\"d\n\b\b\u0006\u0005\t\u0019AH\r\u0003)iU\r\u001e5pIRK\b/\u001a\t\u0005\u001b\u007f9Yi\u0005\u0004\b\fjE2S\u0001\t\u0005\u001b\u007fQ\u001a$\u0003\u0003\u001b61='aE'fi\"|G\rV=qK\u0016CHO]1di>\u0014HC\u0001N\u0017)\u0019I:Og\u000f\u001b>!AqRLDH\u0001\u0004iI\b\u0003\u0005\u0010N\u001d=\u0005\u0019AGG)\u0011Q\nE'\u0012\u0011\r1\u0005\u0007\u0013\u0014N\"!!a\t\rf,\u000ez55\u0005BCJ\u000f\u000f#\u000b\t\u00111\u0001\u001ah\n\tb*\u001e7mCJLX*\u001a;i_\u0012$\u0016\u0010]3\u0014\u0015\u001dMUR\u0012N&\u001d\u007fqI\t\u0005\u0003\u000e@i5\u0013\u0002\u0002N(\u0019\u001f\u0014ACT;mY\u0006\u0014\u00180T3uQ>$G+\u001f9f\u0003BLG\u0003\u0002N*5+\u0002B!d\u0010\b\u0014\"AqRJDM\u0001\u0004ii\t\u0006\u0003\u000e\u000eje\u0003\u0002\u0003H2\u000f_\u0003\r!$\u0010\u0015\t55%T\f\u0005\t\u001dw<)\f1\u0001\u000f~R!Q\u0012\u0003N1\u0011!yIab.A\u0002=-A\u0003\u0002N*5KB!b$\u0014\b:B\u0005\t\u0019AGG)\u0011yIB'\u001b\t\u00155\u001dr\u0011YA\u0001\u0002\u0004qY\u0005\u0006\u0003\u000e\u001ci5\u0004BCG\u0014\u000f\u000b\f\t\u00111\u0001\u0010\u001aQ!ar\u001dN9\u0011)i9cb2\u0002\u0002\u0003\u0007a2\n\u000b\u0005\u001b7Q*\b\u0003\u0006\u000e(\u001d-\u0017\u0011!a\u0001\u001f3\t\u0011CT;mY\u0006\u0014\u00180T3uQ>$G+\u001f9f!\u0011iydb4\u0014\r\u001d='TPJ\u0003!\u0011iyDg \n\ti\u0005Er\u001a\u0002\u001b\u001dVdG.\u0019:z\u001b\u0016$\bn\u001c3UsB,W\t\u001f;sC\u000e$xN\u001d\u000b\u00035s\"BAg\u0015\u001b\b\"AqRJDj\u0001\u0004ii\t\u0006\u0003\u0011\u0018j-\u0005BCJ\u000f\u000f+\f\t\u00111\u0001\u001bT\tA\u0001k\u001c7z)f\u0004Xm\u0005\u0006\bX65%\u0014\u0013H \u001d\u0013\u0003B!d\u0010\u001b\u0014&!!T\u0013Gh\u0005-\u0001v\u000e\\=UsB,\u0017\t]5\u0002\u0017QL\b/\u001a)be\u0006l7\u000f\t\u000b\u000757SjJg(\u0011\t5}rq\u001b\u0005\t\u001fC:\t\u000f1\u0001\u000ez!AqRJDq\u0001\u0004ii\t\u0006\u0003\u000e\u000ej\r\u0006\u0002\u0003H2\u000fw\u0004\r!$\u0010\u0015\tim%t\u0015\u0005\t\u001fgBI\u00011\u0001\u000e>Q!QR\u0012NV\u0011!y\u0019\bc\u0003A\u00025uB\u0003BGG5_C\u0001Bd?\t\u0010\u0001\u0007aR \u000b\u0005\u001b#Q\u001a\f\u0003\u0005\u0010\n!E\u0001\u0019AH\u0006)\u0019QZJg.\u001b:\"Qq\u0012\rE\n!\u0003\u0005\r!$\u001f\t\u0015=5\u00032\u0003I\u0001\u0002\u0004ii\t\u0006\u0003\u0010\u001aiu\u0006BCG\u0014\u0011;\t\t\u00111\u0001\u000fLQ!Q2\u0004Na\u0011)i9\u0003#\t\u0002\u0002\u0003\u0007q\u0012\u0004\u000b\u0005\u001dOT*\r\u0003\u0006\u000e(!\r\u0012\u0011!a\u0001\u001d\u0017\"B!d\u0007\u001bJ\"QQr\u0005E\u0014\u0003\u0003\u0005\ra$\u0007\u0002\u0011A{G.\u001f+za\u0016\u0004B!d\u0010\t,M1\u00012\u0006Ni'\u000b\u0001B!d\u0010\u001bT&!!T\u001bGh\u0005E\u0001v\u000e\\=UsB,W\t\u001f;sC\u000e$xN\u001d\u000b\u00035\u001b$bAg'\u001b\\ju\u0007\u0002CH1\u0011_\u0001\r!$\u001f\t\u0011=5\u0003r\u0006a\u0001\u001b\u001b#BA'\u0011\u001bb\"Q1S\u0004E\u0019\u0003\u0003\u0005\rAg'\u0002%9,w/\u0012=jgR,g\u000e^5bYRK\b/\u001a\u000b\u0007\u001b\u001bS:Og;\t\u0011i%\b2\u0007a\u0001\u001bs\n!\"];b]RLg-[3e\u0011!qy\u0002c\rA\u000255\u0005\u0006\u0002E\u001a\u001f\u0007\u0013q\"\u0012=jgR,g\u000e^5bYRK\b/Z\n\r\u0011kiiIg=\u001bv:}b\u0012\u0012\t\u0004\u001b\u007f\u0001\u0004\u0003BG 5oLAA'?\rP\n\u0011R\t_5ti\u0016tG/[1m)f\u0004X-\u00119j\u0003-\tX/\u00198uS\u001aLW\r\u001a\u0011\u0002\u0017UtG-\u001a:ms&tw\r\t\u000b\u00077\u0003Y\u001aa'\u0002\u0011\t5}\u0002R\u0007\u0005\t5SDy\u00041\u0001\u000ez!Aar\u0004E \u0001\u0004ii\t\u0006\u0003\u000e\u000en%\u0001\u0002CIc\u0011\u0003\u0002\r!$$\u0016\u0005m5\u0001CBG\u0018'\u007fji\u0004\u0006\u0004\u000e\u000enE14\u0003\u0005\t\u001fSB)\u00061\u0001\u000ez!Aq2\u000bE+\u0001\u0004iY\t\u0006\u0003\u000e\u000en]\u0001\u0002\u0003H2\u0011/\u0002\r!$\u0010\u0002\u001fE,\u0018M\u001c;jM&,'oT<oKJ\fQ#[:TiJ\f\u0017n\u001a5u\u0003B\u0004H.[2bi&|g\u000e\u0006\u0004\u000e\u000en}14\u0005\u0005\t7CA\t\u00071\u0001\u000e>\u00051qn\u001e8feBB\u0001bd\u001e\tb\u0001\u0007ArX\u0001\u0013o&dGmY1sI\u0006\u0013xm]*ue&tw\r\u0006\u0004\u001c*m-2t\u0006\t\u0007\u001bwj\tId0\t\u0011m5\u00022\ra\u0001-#\u000bA!]:fi\"AqS\u001eE2\u0001\u0004iY)\u0001\nfq&\u001cH/\u001a8uS\u0006d7\t\\1vg\u0016\u001c\u0018\u0001H5t%\u0016\u0004(/Z:f]R\f'\r\\3XSRDw+\u001b7eG\u0006\u0014Hm\u001d\u000b\u0005\u001b\u001b[:\u0004\u0003\u0005\u0010t!5\u0004\u0019AG\u001f)\u0011iiig\u000f\t\u0011=M\u0004r\u000ea\u0001\u001b{\tAb^5uQRK\b/\u001a,beN$B!d\u0007\u001cB!A14\tE:\u0001\u0004\u0001J%\u0001\u0002paR1Q2DN$7\u0013B\u0001bg\u0011\tv\u0001\u0007\u0001\u0013\n\u0005\t%SB)\b1\u0001\u000fxQ!QRRN'\u0011!qY\u0010c\u001eA\u00029uH\u0003BG\t7#B\u0001b$\u0003\tz\u0001\u0007q2\u0002\u000b\u00077\u0003Y*fg\u0016\t\u0015i%\b2\u0010I\u0001\u0002\u0004iI\b\u0003\u0006\u000f !m\u0004\u0013!a\u0001\u001b\u001b#Ba$\u0007\u001c\\!QQr\u0005EC\u0003\u0003\u0005\rAd\u0013\u0015\t5m1t\f\u0005\u000b\u001bOAI)!AA\u0002=eA\u0003\u0002Ht7GB!\"d\n\t\f\u0006\u0005\t\u0019\u0001H&)\u0011iYbg\u001a\t\u00155\u001d\u0002rRA\u0001\u0002\u0004yI\"A\bFq&\u001cH/\u001a8uS\u0006dG+\u001f9f!\u0011iy\u0004c%\u0014\r!M5tNJ\u0003!\u0011iyd'\u001d\n\tmMDr\u001a\u0002\u0019\u000bbL7\u000f^3oi&\fG\u000eV=qK\u0016CHO]1di>\u0014HCAN6)\u0019Y\na'\u001f\u001c|!A!\u0014\u001eEL\u0001\u0004iI\b\u0003\u0005\u000f !]\u0005\u0019AGG)\u0011Q\neg \t\u0015Mu\u0001\u0012TA\u0001\u0002\u0004Y\nA\u0001\bPm\u0016\u0014Hn\\1eK\u0012$\u0016\u0010]3\u0014\u0011!mUR\u0012H \u001d\u0013#bag\"\u001c\nn-\u0005\u0003BG \u00117C\u0001b$=\t&\u0002\u0007QR\u0012\u0005\t'cA)\u000b1\u0001\u000ezQ!QRRNH\u0011!qY\u0010#,A\u00029uH\u0003BG\t7'C\u0001b$\u0003\t0\u0002\u0007q2\u0002\u000b\u00077\u000f[:j''\t\u0015=E\b\u0012\u0017I\u0001\u0002\u0004ii\t\u0003\u0006\u00142!E\u0006\u0013!a\u0001\u001bs\"Ba$\u0007\u001c\u001e\"QQr\u0005E^\u0003\u0003\u0005\rAd\u0013\u0015\t5m1\u0014\u0015\u0005\u000b\u001bOAy,!AA\u0002=eA\u0003\u0002Ht7KC!\"d\n\tB\u0006\u0005\t\u0019\u0001H&)\u0011iYb'+\t\u00155\u001d\u0002RYA\u0001\u0002\u0004yI\"\u0001\bPm\u0016\u0014Hn\\1eK\u0012$\u0016\u0010]3\u0011\t5}\u0002\u0012Z\n\u0007\u0011\u0013\\\nl%\u0002\u0011\u0015mM6\u0014XGG\u001bsZ:)\u0004\u0002\u001c6*!1t\u0017G\\\u0003\u001d\u0011XO\u001c;j[\u0016LAag/\u001c6\n\t\u0012IY:ue\u0006\u001cGOR;oGRLwN\u001c\u001a\u0015\u0005m5FCBND7\u0003\\\u001a\r\u0003\u0005\u0010r\"=\u0007\u0019AGG\u0011!\u0019\n\u0004c4A\u00025eD\u0003BNd7\u0017\u0004b\u0001$1\u0011\u001an%\u0007\u0003\u0003Ga)_ki)$\u001f\t\u0015Mu\u0001\u0012[A\u0001\u0002\u0004Y:)\u0001\bpm\u0016\u0014Hn\\1eK\u0012$\u0016\u0010]3\u0015\r555\u0014[Nj\u0011!y\t\u0010c5A\u000255\u0005\u0002CJ\u0019\u0011'\u0004\r!$\u001f\u0003\u0015%k\u0007o\u001c:u)f\u0004Xm\u0005\u0005\tV65er\bHE\u0003\u0011)\u0007\u0010\u001d:\u0016\u0005Ee\u0018!B3yaJ\u0004C\u0003BNq7G\u0004B!d\u0010\tV\"A1\u0014\u001cEn\u0001\u0004\tJ\u0010\u0006\u0003\u001cbn\u001d\bBCNm\u0011?\u0004\n\u00111\u0001\u0012zV\u001114\u001e\u0016\u0005#s\u0014Z\u000e\u0006\u0003\u0010\u001am=\bBCG\u0014\u0011O\f\t\u00111\u0001\u000fLQ!Q2DNz\u0011)i9\u0003c;\u0002\u0002\u0003\u0007q\u0012\u0004\u000b\u0005\u001dO\\:\u0010\u0003\u0006\u000e(!5\u0018\u0011!a\u0001\u001d\u0017\"B!d\u0007\u001c|\"QQr\u0005Ey\u0003\u0003\u0005\ra$\u0007\u0002\u0015%k\u0007o\u001c:u)f\u0004X\r\u0005\u0003\u000e@!U8C\u0002E{9\u0007\u0019*\u0001\u0005\u0005\u001c4r\u0015\u0011\u0013`Nq\u0013\u0011a:a'.\u0003#\u0005\u00137\u000f\u001e:bGR4UO\\2uS>t\u0017\u0007\u0006\u0002\u001c\u0000R!1\u0014\u001dO\u0007\u0011!YJ\u000ec?A\u0002EeH\u0003\u0002O\t9'\u0001b\u0001$1\u0011\u001aFe\bBCJ\u000f\u0011{\f\t\u00111\u0001\u001cb\na\u0011I\u001c;j!>d\u0017\u0010V=qKNA\u0001r`GG\u001d\u007fqI)A\u0003uCJ<7/\u0001\u0004uCJ<7\u000f\t\u000b\u00079?a\n\u0003h\t\u0011\t5}\u0002r \u0005\t\u001fcLI\u00011\u0001\u000e\u000e\"AA\u0014DE\u0005\u0001\u0004iY\t\u0006\u0003\u000e\u000er\u001d\u0002\u0002\u0003H\t\u0013\u001b\u0001\r!$\u0010\u0015\t55E4\u0006\u0005\t\u001dwL\t\u00021\u0001\u000f~R!Q\u0012\u0003O\u0018\u0011!yI!c\u0005A\u0002=-AC\u0002O\u00109ga*\u0004\u0003\u0006\u0010r&U\u0001\u0013!a\u0001\u001b\u001bC!\u0002(\u0007\n\u0016A\u0005\t\u0019AGF)\u0011yI\u0002(\u000f\t\u00155\u001d\u0012rDA\u0001\u0002\u0004qY\u0005\u0006\u0003\u000e\u001cqu\u0002BCG\u0014\u0013G\t\t\u00111\u0001\u0010\u001aQ!ar\u001dO!\u0011)i9##\n\u0002\u0002\u0003\u0007a2\n\u000b\u0005\u001b7a*\u0005\u0003\u0006\u000e(%%\u0012\u0011!a\u0001\u001f3\tA\"\u00118uSB{G.\u001f+za\u0016\u0004B!d\u0010\n.M1\u0011R\u0006O''\u000b\u0001\"bg-\u001c:65U2\u0012O\u0010)\taJ\u0005\u0006\u0004\u001d qMCT\u000b\u0005\t\u001fcL\u0019\u00041\u0001\u000e\u000e\"AA\u0014DE\u001a\u0001\u0004iY\t\u0006\u0003\u001dZqu\u0003C\u0002Ga!3cZ\u0006\u0005\u0005\rBR=VRRGF\u0011)\u0019j\"#\u000e\u0002\u0002\u0003\u0007AtD\u0001\u000e\u0011\u0006\u001cH+\u001f9f\u001b\u0016l'-\u001a:\u0011\t5}\u0012\u0012\b\u0002\u000e\u0011\u0006\u001cH+\u001f9f\u001b\u0016l'-\u001a:\u0014\t%eBr\u0018\u000b\u00039C\"b!$$\u001dlqM\u0004\u0002CGT\u0013{\u0001\r\u0001(\u001c\u0011\t5}BtN\u0005\u00059cjyK\u0001\u0005UsB,g*Y7f\u0011!\u0011*'#\u0010A\u000255E\u0003BG\u000e9oB\u0001B%\u001a\n@\u0001\u0007QRR\u0001\r\u0003J\u0014\u0018-\u001f+za\u0016\u0014VM\u001a\t\u0005\u001b\u007fI\u0019E\u0001\u0007BeJ\f\u0017\u0010V=qKJ+gm\u0005\u0003\nD1}FC\u0001O>)\u0011\u0001:\n(\"\t\u0011I\u0015\u0014r\ta\u0001\u001b\u001b\u000bq\u0001V=qKZ\u000b'\u000f\u0005\u0003\u000e@%-#a\u0002+za\u00164\u0016M]\n\u0007\u0013\u0017byl%\u0002\u0015\u0005q%\u0015!\u0002;sC\u000e,W\u0003\u0002OK97#b\u0001h&\u001d r\rF\u0003\u0002OM9;\u0003B\u0001%\u0018\u001d\u001c\u0012A\u0001SOE(\u0005\u0004\u0001\u001a\u0007\u0003\u0005\u0012\u0012&=\u0003\u0019\u0001OM\u0011!a\n+c\u0014A\u00029}\u0016AB1di&|g\u000eC\u0005\u001d&&=C\u00111\u0001\u001d(\u0006\u0019Qn]4\u0011\r1\u0005\u0007s\u0011H`Q\u0011Iy\u0005%$\u0002#A\u0014Xm\u00197vI\u0016\u001cx+\u001b3f]&tw\r\u0006\u0003\u000e\u001cq=\u0006\u0002\u0003J3\u0013#\u0002\r!$$\u0002\u0017UtGo\\;dQ\u0006\u0014G.\u001a\u000b\u00059kkz\b\u0005\u0003\u000e@%]5\u0003CEL\u001b\u001bsyD$#\u0002\u000f=\u0014\u0018nZ5oA\u000511m\u001c8tiJ,\"\u0001h0\u0011\t5}B\u0014Y\u0005\u00059\u0007d9P\u0001\bUsB,7i\u001c8tiJ\f\u0017N\u001c;\u0002\u0015\r|gn\u001d;s?\u0012*\u0017\u000f\u0006\u0003\u000e\u0012q%\u0007BCG\u0014\u0013?\u000b\t\u00111\u0001\u001d@\u000691m\u001c8tiJ\u0004CC\u0002O[9\u001fd\n\u000e\u0003\u0005\u0010x%\r\u0006\u0019AGG\u0011!aZ,c)A\u0002q}F\u0003BG\u000e9+D\u0001\u0002g\t\n(\u0002\u0007q\u0012D\u0001\nS:\u001cHOV1mS\u0012\fA!\u001b8ti\u0006\u0001\u0012N\\:u/&$\b.\u001b8C_VtGm]\u0001\u0006Y\u00164X\r\\\u0001\u0007Y\u00164X\r\u001c\u0011\u0002\u0013\u0005\u0004\b\u000f\\=Be\u001e\u001cH\u0003\u0002O[9KD\u0001\u0002h:\n>\u0002\u0007Q2R\u0001\b]\u0016<\u0018I]4t\u0003\u001d\u0019X\r^%ogR$B\u0001(<\u001dp6\u0011\u0011r\u0013\u0005\t%KJy\f1\u0001\u000e\u000e\u0006Q\u0011\r\u001a3M_\n{WO\u001c3\u0015\r5EAT\u001fO|\u0011!\u0011*'#1A\u000255\u0005B\u0003O}\u0013\u0003\u0004\n\u00111\u0001\u000e\u001c\u0005q\u0011n\u001d(v[\u0016\u0014\u0018n\u0019\"pk:$\u0017\u0001F1eI2{'i\\;oI\u0012\"WMZ1vYR$#'\u0006\u0002\u001d\u0000*\"Q2\u0004Jn\u0003)\tG\r\u001a%j\u0005>,h\u000e\u001a\u000b\u0007\u001b#i*!h\u0002\t\u0011I\u0015\u0014R\u0019a\u0001\u001b\u001bC!\u0002(?\nFB\u0005\t\u0019AG\u000e\u0003Q\tG\r\u001a%j\u0005>,h\u000e\u001a\u0013eK\u001a\fW\u000f\u001c;%e\u0005Qql];ta\u0016tG-\u001a3\u0002#MD\u0017M]3t\u0007>t7\u000f\u001e:bS:$8\u000f\u0006\u0003\u000e\u001cuE\u0001\u0002\u0003M\u0012\u0013\u0017\u0004\r!$$\u0002\u001bI,w-[:uKJ\u0014u.\u001e8e)!iY\"h\u0006\u001e\u001auu\u0001\u0002\u0003J3\u0013\u001b\u0004\r!$$\t\u0011um\u0011R\u001aa\u0001\u001b7\tA\"[:M_^,'OQ8v]\u0012D!\u0002(?\nNB\u0005\t\u0019AG\u000e\u0003]\u0011XmZ5ti\u0016\u0014(i\\;oI\u0012\"WMZ1vYR$3\u0007\u0006\u0004\u000e\u001cu\rRT\u0005\u0005\t%KJ\t\u000e1\u0001\u000e\u000e\"AQtEEi\u0001\u0004iY\"\u0001\u0006usB,g+\u0019:M\u0011N\u000bQC]3hSN$XM\u001d+za\u0016\u001cV\r\\3di&|g\u000e\u0006\u0004\u000e\u001cu5Rt\u0006\u0005\t\u001d#I\u0019\u000e1\u0001\u000e>!A!SMEj\u0001\u0004ii)A\u0006v]J,G.\u0019;bE2,G\u0003BO\u001b;{\u0001b!d\u001f\u000e\u0002v]\u0002\u0003BG ;sIA!h\u000f\u000eF\tQA+\u001f9f'.|G.Z7\t\u0011I\u0015\u0014R\u001ba\u0001\u001b\u001b\u000b1\"[:SK2\fG/\u00192mKR!Q2DO\"\u0011!\u0011*'c6A\u000255\u0015\u0001\u0004;qCJ\fWn](g'flG\u0003\u0002H`;\u0013B\u0001B$\u0005\n`\u0002\u0007QRH\u0001\u000b_JLw-\u001b8OC6,\u0017AD8sS\u001eLg\u000eT8dCRLwN\\\u0001\fY\u00164X\r\\*ue&tw-\u0006\u0002\u0010\u001a\u0005aqN]5hS:\u001cFO]5oO\u0006i1\r\\8oK&sG/\u001a:oC2,\"\u0001(.\u0015\t55U4\f\u0005\t\u001dwLy\u000f1\u0001\u000f~R!Q\u0012CO0\u0011!yI!#=A\u0002=-A\u0003BH\r;GB!\"d\n\nx\u0006\u0005\t\u0019\u0001H&)\u0011iY\"h\u001a\t\u00155\u001d\u00122`A\u0001\u0002\u0004yI\u0002\u0006\u0003\u000fhv-\u0004BCG\u0014\u0013{\f\t\u00111\u0001\u000fL\u000593oY1mC\u0012\u0012XM\u001a7fGR$\u0013N\u001c;fe:\fG\u000e\n+za\u0016\u001cH\u0005J:vgB,g\u000eZ3eQ\u0011Iypd!\u0002WM\u001c\u0017\r\\1%e\u00164G.Z2uI%tG/\u001a:oC2$C+\u001f9fg\u0012\"3/^:qK:$W\rZ0%KF$B!$\u0005\u001ev!AQt\u000fF\u0001\u0001\u0004iY\"A\u0001c\u0003-\u001a8-\u00197bII,g\r\\3di\u0012Jg\u000e^3s]\u0006dG\u0005V=qKN$C\u0005\\5oWN+8\u000f]3oI\u0016$G\u0003BG\t;{B\u0001bd\u001e\u000b\u0004\u0001\u0007AT\u0017\u0005\t-7K\u0019\u00061\u0001\u000e>Q!ATWOB\u0011!1Z*#\u0016A\u00025uBC\u0002O[;\u000fkJ\t\u0003\u0005\u0010x%]\u0003\u0019AGG\u0011!aZ,c\u0016A\u0002q}FC\u0003O[;\u001bkz)(%\u001e\u0014\"AqrOE-\u0001\u0004ii\t\u0003\u0005\u001d<&e\u0003\u0019\u0001O`\u0011!9j/#\u0017A\u00025-\u0005\u0002CH/\u00133\u0002\r!$\u001f\u0002\u001b\r\u0014X-\u0019;f)f\u0004XMV1s)1a*,('\u001e\u001cvuUtTOQ\u0011!y9(c\u0017A\u000255\u0005\u0002\u0003O^\u00137\u0002\r\u0001h0\t\u0011]5\u00182\fa\u0001\u001b\u0017C\u0001b$\u0018\n\\\u0001\u0007Q\u0012\u0010\u0005\t9cKY\u00061\u0001\u000e\u001cQ1ATWOS;OC\u0001Bf'\n^\u0001\u0007QR\b\u0005\t9cKi\u00061\u0001\u000e\u001cQ!Q4VOX!\u0019a\t\r%'\u001e.BAA\u0012\u0019KX\u001b\u001bcz\f\u0003\u0006\u0014\u001e%}\u0013\u0011!a\u00019k\u0013\u0011\u0002S&UsB,g+\u0019:\u0014\t%\u0005DTW\u0001\b?>\u0014\u0018nZ5o\u0003\u001dy6m\u001c8tiJ$\u0002\"h/\u001e>v}V\u0014\u0019\t\u0005\u001b\u007fI\t\u0007\u0003\u0005\u001e6&-\u0004\u0019AGG\u0011!i:,c\u001bA\u0002q}\u0006\u0002CH/\u0013W\u0002\r!$\u001f\u0003\u001d\u0005\u0003\b\u000f\\5fIRK\b/\u001a,beN!\u0011\u0012\u000fO[\u0003%!\u0018\u0010]3Be\u001e\u001c\b\u0005\u0006\u0006\u001eLv5WtZOi;'\u0004B!d\u0010\nr!AQTWE@\u0001\u0004ii\t\u0003\u0005\u001e8&}\u0004\u0019\u0001O`\u0011!yi&c A\u00025e\u0004\u0002CH%\u0013\u007f\u0002\r!d#\u0015\tu]W\u0014\\\u0007\u0003\u0013cB\u0001B%\u001a\n\u0004\u0002\u0007QR\u0012\u0002\u0013+:$x.^2iC\ndW\rV=qKZ\u000b'o\u0005\u0003\n\u0006rUFCBG\u000e;Cl\u001a\u000f\u0003\u0005\u0013f%5\u0005\u0019AGG\u0011!i:##$A\u00025mA\u0003CG\u000e;OlJ/h;\t\u0011I\u0015\u0014r\u0012a\u0001\u001b\u001bC\u0001\"h\u0007\n\u0010\u0002\u0007Q2\u0004\u0005\u000b9sLy\t%AA\u00025m\u0011AG:va\u0016\u0014HE]3hSN$XM\u001d+za\u0016,\u0015/^1mSRLHCBG\u000e;cl\u001a\u0010\u0003\u0005\u0013f%M\u0005\u0019AGG\u0011!i:#c%A\u00025m\u0011aE:va\u0016\u0014HE]3hSN$XM\u001d\"pk:$G\u0003CG\u000e;slZ0(@\t\u0011I\u0015\u0014R\u0013a\u0001\u001b\u001bC\u0001\"h\u0007\n\u0016\u0002\u0007Q2\u0004\u0005\u000b9sL)\n%AA\u00025m!!D!o]>$\u0018\r^3e)f\u0004Xm\u0005\u0007\u000b\u000655%4\u001fP\u0002\u001d\u007fqI\t\u0005\u0003\u000e@y\u0015\u0011\u0002\u0002P\u0004\u0019\u001f\u0014\u0001#\u00118o_R\fG/\u001a3UsB,\u0017\t]5\u0002\u0019\u0005tgn\u001c;bi&|gn\u001d\u0011\u0015\ry5at\u0002P\t!\u0011iyD#\u0002\t\u0011E5#r\u0002a\u0001##B\u0001Bd\b\u000b\u0010\u0001\u0007QR\u0012\u000b\u0005=\u001bq*\u0002\u0003\u0005\u0013f)E\u0001\u0019AGG)\u0011iiI(\u0007\t\u0011A\u001d#r\u0003a\u0001#C\"B!$$\u001f\u001e!A\u0011\u0013\u000eF\r\u0001\u0004\t\n\u0006\u0006\u0003\u000e\u000ez\u0005\u0002\u0002CI5\u00157\u0001\r!%\u0015\u0015\t55eT\u0005\u0005\t#oRi\u00021\u0001\u0012TQ1QR\u0012P\u0015=WA\u0001b$\u001b\u000b(\u0001\u0007Q\u0012\u0010\u0005\t\u001f'R9\u00031\u0001\u000e\fR!QR\u0012P\u0018\u0011!qYP#\fA\u00029uH\u0003BG\t=gA\u0001b$\u0003\u000b0\u0001\u0007q2\u0002\u000b\u0007=\u001bq:D(\u000f\t\u0015E5#\u0012\u0007I\u0001\u0002\u0004\t\n\u0006\u0003\u0006\u000f )E\u0002\u0013!a\u0001\u001b\u001b+\"A(\u0010+\tEE#3\u001c\u000b\u0005\u001f3q\n\u0005\u0003\u0006\u000e()m\u0012\u0011!a\u0001\u001d\u0017\"B!d\u0007\u001fF!QQr\u0005F \u0003\u0003\u0005\ra$\u0007\u0015\t9\u001dh\u0014\n\u0005\u000b\u001bOQ\t%!AA\u00029-C\u0003BG\u000e=\u001bB!\"d\n\u000bF\u0005\u0005\t\u0019AH\r\u00035\teN\\8uCR,G\rV=qKB!Qr\bF%'\u0019QIE(\u0016\u0014\u0006A!Qr\bP,\u0013\u0011qJ\u0006d4\u0003-\u0005sgn\u001c;bi\u0016$G+\u001f9f\u000bb$(/Y2u_J$\"A(\u0015\u0015\ry5at\fP1\u0011!\tjE#\u0014A\u0002EE\u0003\u0002\u0003H\u0010\u0015\u001b\u0002\r!$$\u0015\ty\u0015d\u0014\u000e\t\u0007\u0019\u0003\u0004JJh\u001a\u0011\u00111\u0005GsVI)\u001b\u001bC!b%\b\u000bP\u0005\u0005\t\u0019\u0001P\u0007\u00035\tgN\\8uCR,G\rV=qKR1QR\u0012P8=cB\u0001\"%\u001b\u000bR\u0001\u0007\u0011\u0013\u000b\u0005\t\u001d?Q\t\u00061\u0001\u000e\u000e\u000692\u000b^1uS\u000e\fG\u000e\\=B]:|G/\u0019;fIRK\b/\u001a\t\u0005\u001b\u007fQ)FA\fTi\u0006$\u0018nY1mYf\feN\\8uCR,G\rV=qKN!!R\u000bG`)\tq*\b\u0006\u0003\u001ffy}\u0004\u0002\u0003J3\u00153\u0002\r!$$\u0003\u00139\u000bW.\u001a3UsB,7\u0003\u0003F.\u001b\u001bsyD$#\u0016\u00055%\u0016!\u00028b[\u0016\u0004\u0013a\u0001;qAQ1aT\u0012PH=#\u0003B!d\u0010\u000b\\!AQr\u0015F3\u0001\u0004iI\u000b\u0003\u0005\u0013f)\u0015\u0004\u0019AGG)\u0019qjI(&\u001f\u0018\"QQr\u0015F5!\u0003\u0005\r!$+\t\u0015I\u0015$\u0012\u000eI\u0001\u0002\u0004ii)\u0006\u0002\u001f\u001c*\"Q\u0012\u0016Jn)\u0011yIBh(\t\u00155\u001d\"2OA\u0001\u0002\u0004qY\u0005\u0006\u0003\u000e\u001cy\r\u0006BCG\u0014\u0015o\n\t\u00111\u0001\u0010\u001aQ!ar\u001dPT\u0011)i9C#\u001f\u0002\u0002\u0003\u0007a2\n\u000b\u0005\u001b7qZ\u000b\u0003\u0006\u000e()u\u0014\u0011!a\u0001\u001f3\t\u0011BT1nK\u0012$\u0016\u0010]3\u0011\t5}\"\u0012Q\n\u0007\u0015\u0003s\u001al%\u0002\u0011\u0015mM6\u0014XGU\u001b\u001bsj\t\u0006\u0002\u001f0R1aT\u0012P]=wC\u0001\"d*\u000b\b\u0002\u0007Q\u0012\u0016\u0005\t%KR9\t1\u0001\u000e\u000eR!at\u0018Pb!\u0019a\t\r%'\u001fBBAA\u0012\u0019KX\u001bSki\t\u0003\u0006\u0014\u001e)%\u0015\u0011!a\u0001=\u001b\u0013ABU3qK\u0006$X\r\u001a+za\u0016\u001c\u0002Bc#\u000e\u000e:}b\u0012\u0012\u000b\u0005=\u0017tj\r\u0005\u0003\u000e@)-\u0005\u0002\u0003J3\u0015#\u0003\r!$$\u0015\ty-g\u0014\u001b\u0005\u000b%KR)\n%AA\u000255E\u0003BH\r=+D!\"d\n\u000b\u001e\u0006\u0005\t\u0019\u0001H&)\u0011iYB(7\t\u00155\u001d\"\u0012UA\u0001\u0002\u0004yI\u0002\u0006\u0003\u000fhzu\u0007BCG\u0014\u0015G\u000b\t\u00111\u0001\u000fLQ!Q2\u0004Pq\u0011)i9Cc*\u0002\u0002\u0003\u0007q\u0012D\u0001\r%\u0016\u0004X-\u0019;fIRK\b/\u001a\t\u0005\u001b\u007fQYk\u0005\u0004\u000b,z%8S\u0001\t\t7gc*!$$\u001fLR\u0011aT\u001d\u000b\u0005=\u0017tz\u000f\u0003\u0005\u0013f)E\u0006\u0019AGG)\u0011\u0001:Jh=\t\u0015Mu!2WA\u0001\u0002\u0004qZMA\bFe\u0006\u001cX\r\u001a,bYV,G+\u001f9f'!Q)L$\u000f\u000f@9%\u0015A\u0003<bYV,7\t\\1{u\u0006Ya/\u00197vK\u000ec\u0017M\u001f>!\u0003A)'/Y:fIVsG-\u001a:ms&tw-A\tfe\u0006\u001cX\rZ+oI\u0016\u0014H._5oO\u0002\"bah\u0001 \u0006}\u001d\u0001\u0003BG \u0015kC\u0001B(?\u000b@\u0002\u0007QR\b\u0005\t={Ty\f1\u0001\u000e\u000eR!q\u0012DP\u0006\u0011)i9Cc2\u0002\u0002\u0003\u0007a2\n\u000b\u0005\u001b7yz\u0001\u0003\u0006\u000e()-\u0017\u0011!a\u0001\u001f3!BAd: \u0014!QQr\u0005Fg\u0003\u0003\u0005\rAd\u0013\u0015\t5mqt\u0003\u0005\u000b\u001bOQy-!AA\u0002=e\u0011aD#sCN,GMV1mk\u0016$\u0016\u0010]3\u0011\t5}\"2[\n\u0007\u0015'dyl%\u0002\u0015\u0005}mACBGG?Gy*\u0003\u0003\u0005\u001fz*]\u0007\u0019AG\u001f\u0011!qjPc6A\u000255E\u0003BP\u0015?[\u0001b\u0001$1\u0011\u001a~-\u0002\u0003\u0003Ga)_ki$$$\t\u0015Mu!\u0012\\A\u0001\u0002\u0004y\u001aAA\u000bV]&\fX/Z#sCN,GMV1mk\u0016$\u0016\u0010]3\u0014\t)mw4\u0001\u000b\u0007?ky:d(\u000f\u0011\t5}\"2\u001c\u0005\t=sT\t\u000f1\u0001\u000e>!AaT Fq\u0001\u0004iiI\u0001\u0005MCjLH+\u001f9f'\u0011Q\u0019/$$\u0015\u0005}\u0005\u0003\u0003BG \u0015G$B!$\u0005 F!Aa\u0012\u0003Fu\u0001\u0004ii$A\njg*\u000bg/\u0019,be\u0006\u0014xm]'fi\"|G-\u0001\u000bkCZ\fG\u000b\u001b:po:,\u0005pY3qi&|gn\u001d\u0002\u0016\r2\fw-Q4o_N$\u0018nY\"p[BdW\r^3s'\u0011Q\u0019p(\u0011\u0003-\u0019c\u0017mZ!tg&<g.\u001b8h\u0007>l\u0007\u000f\\3uKJ\u001cBA#> B\taA*\u0019>z!>d\u0017\u0010V=qKN!!r_P!)\u0011yJfh\u0017\u0011\t5}\"r\u001f\u0005\t\u001fCRi\u00101\u0001\u000ez\u00051!/\u001a2j]\u0012$b!$\u0010 b}\r\u0004\u0002CHy\u0017\u0003\u0001\r!$$\t\u00119E1\u0012\u0001a\u0001\u001b{\t1B]3n_Z,7+\u001e9feR1QRRP5?WB\u0001B%\u001a\f\u0004\u0001\u0007QR\u0012\u0005\t\u001d#Y\u0019\u00011\u0001\u000e>\u0005Q1/\u001b8hY\u0016$\u0016\u0010]3\u0015\r55u\u0014OP:\u0011!y\tp#\u0002A\u000255\u0005\u0002\u0003H\t\u0017\u000b\u0001\r!$\u0010\u0002\u0017I,g-\u001b8fIRK\b/\u001a\u000b\u000b\u001b\u001b{Jhh\u001f ~}}\u0004\u0002\u0003H-\u0017\u000f\u0001\r!d#\t\u0011=M4r\u0001a\u0001\u001b{A\u0001Bd\u0017\f\b\u0001\u0007Qr\u0017\u0005\t?\u0003[9\u00011\u0001 \u0004\u0006\u0019\u0001o\\:\u0011\t5}rTQ\u0005\u0005?\u000f{JI\u0001\u0005Q_NLG/[8o\u0013\u0011yZ\td,\u0003\u0013A{7/\u001b;j_:\u001cHCBGG?\u001f{\n\n\u0003\u0005\u000fZ-%\u0001\u0019AGF\u0011!y\u0019h#\u0003A\u00025u\u0012AE2paf\u0014VMZ5oK\u0012$\u0016\u0010]3T'6+\"ah&\u0011\r5\rq\u0014TPO\u0013\u0011yZ*$\u0002\u0003!I+Wo]1cY\u0016Len\u001d;b]\u000e,\u0007\u0003BG ??KAa()\rr\nY1+\u001e2tiNKX.T1q\u0003=\u0019w\u000e]=SK\u001aLg.\u001a3UsB,GCCGG?O{Zk(, 0\"Aq\u0014VF\u0007\u0001\u0004)*/\u0001\u0005pe&<\u0017N\\1m\u0011!qIf#\u0004A\u00025-\u0005\u0002\u0003H.\u0017\u001b\u0001\r!d.\t\u0015=M4R\u0002I\u0001\u0002\u0004ii$A\rd_BL(+\u001a4j]\u0016$G+\u001f9fI\u0011,g-Y;mi\u0012\"\u0014a\u0002;za\u0016\u0014VM\u001a\u000b\t\u001b\u001b{:l(/ <\"Aq\u0012_F\t\u0001\u0004ii\t\u0003\u0005\u000f\u0012-E\u0001\u0019AG\u001f\u0011!9jo#\u0005A\u00025-\u0005\u0006BF\t\u001f\u0007\u000b1bY8qsRK\b/\u001a*fMRQQRRPb?\u000b|:m(3\t\u0011I\u001542\u0003a\u0001\u001b\u001bC\u0001b$=\f\u0014\u0001\u0007QR\u0012\u0005\t\u001d#Y\u0019\u00021\u0001\u000e>!AqS^F\n\u0001\u0004iY)\u0001\bd_BLX*\u001a;i_\u0012$\u0016\u0010]3\u0015\u001155utZPi?'D\u0001B%\u001a\f\u0016\u0001\u0007QR\u0012\u0005\t\u001f;Z)\u00021\u0001\u000ez!AqT[F\u000b\u0001\u0004ii)\u0001\u0004sKN$\b/Z\u0001\u0011S:$XM]:fGRLwN\u001c+za\u0016$b!$$ \\~}\u0007\u0002CPo\u0017/\u0001\r!d#\u0002\u0007Q\u00048\u000f\u0003\u0005\u0010t-]\u0001\u0019AG\u001f)\u0011iiih9\t\u0011}u7\u0012\u0004a\u0001\u001b\u0017\u000bq$\u001b8uKJ\u001cXm\u0019;j_:$\u0016\u0010]3G_Jd\u0015M_=CCN,G+\u001f9f)\u0011iii(;\t\u0011}u72\u0004a\u0001\u001b\u0017\u000b\u0011%[:J]R,'o]3di&|g\u000eV=qK\u001a{'\u000fT1{s\n\u000b7/\u001a+za\u0016$B!d\u0007 p\"A!SMF\u000f\u0001\u0004)*/A\u0006baBd\u0017.\u001a3UsB,GCBGG?k|J\u0010\u0003\u0005 x.}\u0001\u0019AGG\u0003\u0015!\u0018pY8o\u0011!9joc\bA\u00025-ECBGG?{|z\u0010\u0003\u0005 x.\u0005\u0002\u0019AGG\u0011!9jo#\tA\u0002\u0001\u0006\u0001C\u0002GaA\u0007ii)\u0003\u0003!\u00061]&A\u0003\u001fsKB,\u0017\r^3e}Q1QR\u0012Q\u0005A\u001bA\u0001\u0002i\u0003\f$\u0001\u0007QRH\u0001\tif\u001cwN\\*z[\"AqS^F\u0012\u0001\u0004iY\t\u0006\u0004\u000e\u000e\u0002F\u00015\u0003\u0005\tA\u0017Y)\u00031\u0001\u000e>!AqS^F\u0013\u0001\u0004\u0001\u000b!A\u0006HK:\u0004v\u000e\\=UsB,\u0007\u0003BG \u0017S\u00111bR3o!>d\u0017\u0010V=qKN!1\u0012\u0006G`)\t\u0001;\u0002\u0006\u0004\u000e\u000e\u0002\u0006\u0002U\u0005\u0005\tAGYi\u00031\u0001\u000ez\u00059A\u000f]1sC6\u001c\b\u0002\u0003Gl\u0017[\u0001\r!$$\u0015\t\u0001&\u00025\u0006\t\u0007\u0019\u0003<ZGg\u0011\t\u00111]7r\u0006a\u0001\u001b\u001b\u000b1bZ3o!>d\u0017\u0010V=qKR1QR\u0012Q\u0019AgA\u0001b$\u0018\f2\u0001\u0007Q\u0012\u0010\u0005\t\u0019/\\\t\u00041\u0001\u000e\u000e\u0006A\u0001o\u001c7z)f\u0004X\r\u0006\u0004\u000e\u000e\u0002f\u00025\b\u0005\t\u001f;Z\u0019\u00041\u0001\u000ez!AAr[F\u001a\u0001\u0004ii\t\u000b\u0007\f4aM\u0004\u0014\u0010Q 1\u007f\u0002\u001b%\t\u0002!B\u0005aRo]3!O\u0016t\u0007k\u001c7z)f\u0004X\r\u000b\u0018/]%\u0002\u0013N\\:uK\u0006$\u0017E\u0001Q#\u0003\u0019\u0011d&\r\u0019/a\u00059A/\u001f9f\rVtGCBGGA\u0017\u0002k\u0005\u0003\u0005 ^.U\u0002\u0019AG=\u0011!\u0001{e#\u000eA\u000255\u0015\u0001\u00022pIf\f\u0011#\u001a=uK:\u001c\u0018n\u001c8NKRD\u0017J\u001c4p))ii\t)\u0016!Z\u0001v\u0003\u0015\r\u0005\tA/Z9\u00041\u0001\u000e>\u0005a1-\u001e:sK:$xj\u001e8fe\"A\u00015LF\u001c\u0001\u0004ii$A\u0007fqR,gn]5p]6+G\u000f\u001b\u0005\tA?Z9\u00041\u0001\u000e\u000e\u0006AqN]5h\u0013:4w\u000e\u0003\u0005\u000fd-]\u0002\u0019AG\u001f\u0003Y)\u00070[:uK:$\u0018.\u00197BEN$(/Y2uS>tG\u0003CGGAO\u0002K\u0007)\u001c\t\u0011\u0001\u000e2\u0012\ba\u0001\u001bsB\u0001\u0002i\u001b\f:\u0001\u0007QRR\u0001\u0005iB,\u0007\u0007\u0003\u0006!p-e\u0002\u0013!a\u0001\u001b7\tAB\u001a7jaZ\u000b'/[1oG\u0016\f\u0001%\u001a=jgR,g\u000e^5bY\u0006\u00137\u000f\u001e:bGRLwN\u001c\u0013eK\u001a\fW\u000f\u001c;%g\u00051\u0012N\\5uS\u0006dWK\\5rk\u0016\u001c8)\u00199bG&$\u00180A\u0004v]&\fX/Z:\u0016\u0005\u0001f\u0004CBG\u0002Awji)\u0003\u0003!~5\u0015!aC,fC.D\u0015m\u001d5TKR\f1\"\u001e8jcV,7o\u0018\u0013fcR!Q\u0012\u0003QB\u0011)i9c#\u0011\u0002\u0002\u0003\u0007\u0001\u0015P\u0001\fk:L\u0017/^3Sk:LE-A\bv]&\fX/\u001a*v]&#w\fJ3r)\u0011i\t\u0002i#\t\u00155\u001d2RIA\u0001\u0002\u0004qY%\u0001\ni_^l\u0015M\\=V]&\fX/\u001a+za\u0016\u001c\u0018AB;oSF,X-\u0006\u0003!\u0014\u0002^E\u0003\u0002QKA7\u0003B\u0001%\u0018!\u0018\u0012A\u0001SOF%\u0005\u0004\u0001K*\u0005\u0003\u0011f55\u0005\u0002\u0003J3\u0017\u0013\u0002\r\u0001)&\u0003\u001bQK\b/Z+ooJ\f\u0007\u000f]3s'\u0019YY\u0005d0\u0011@\u0006!\u0001o\u001c7z\u0003-)\u00070[:uK:$\u0018.\u00197\u0002\u0013\u0005tgn\u001c;bi\u0016$\u0017a\u00028vY2\f'/\u001f\u000b\u000bAW\u0003k\u000bi,!2\u0002N\u0006\u0003BG \u0017\u0017B\u0001\u0002))\fV\u0001\u0007Q2\u0004\u0005\tAG[)\u00061\u0001\u000e\u001c!A\u0001UUF+\u0001\u0004iY\u0002\u0003\u0005!(.U\u0003\u0019AG\u000e)\u0011ii\ti.\t\u0011I\u00154r\u000ba\u0001\u001b\u001b\u0013ab\u00117bgN,fn\u001e:baB,'o\u0005\u0003\fZ\u0001.F\u0003\u0002Q`A\u0003\u0004B!d\u0010\fZ!A\u00015UF/\u0001\u0004iY\u0002\u0006\u0003\u000e\u000e\u0002\u0016\u0007\u0002\u0003J3\u0017?\u0002\r!$$\u0002\u001bUtwO]1q)>\u001cE.Y:t!\u0011iydc\u0019\u0003\u001bUtwO]1q)>\u001cE.Y:t'\u0011Y\u0019\u0007i0\u0015\u0005\u0001&\u0017aE;ooJ\f\u0007\u000fV8Ti\u0006\u0014G.Z\"mCN\u001c\b\u0003BG \u0017S\u00121#\u001e8xe\u0006\u0004Hk\\*uC\ndWm\u00117bgN\u001cBa#\u001b!@R\u0011\u00015[\u0001\u0013k:<(/\u00199Xe\u0006\u0004\b/\u001a:UsB,7\u000f\u0005\u0003\u000e@-=$AE;ooJ\f\u0007o\u0016:baB,'\u000fV=qKN\u001cBac\u001c!,R\u0011\u0001U\\\u0001\u000fK2,W.\u001a8u\u000bb$(/Y2u)\u0019ii\t);!n\"A\u00015^F:\u0001\u0004ii$A\u0005d_:$\u0018-\u001b8fe\"A!SMF:\u0001\u0004ii)\u0001\u000bfY\u0016lWM\u001c;FqR\u0014\u0018m\u0019;PaRLwN\u001c\u000b\u0007!/\u0003\u001b\u0010)>\t\u0011\u0001.8R\u000fa\u0001\u001b{A\u0001B%\u001a\fv\u0001\u0007QRR\u0001\fK2,W.\u001a8u)\u0016\u001cH\u000f\u0006\u0004!|\u0002~\u0018\u0015\u0001\u000b\u0005\u001b7\u0001k\u0010\u0003\u0005\u0011X-]\u0004\u0019\u0001I%\u0011!\u0001[oc\u001eA\u00025u\u0002\u0002\u0003J3\u0017o\u0002\r!$$\u0002!\u0015dW-\\3oiR\u0013\u0018M\\:g_JlGCBQ\u0004C\u0017\tk\u0001\u0006\u0003\u000e\u000e\u0006&\u0001\u0002\u0003I,\u0017s\u0002\r\u0001e0\t\u0011\u0001.8\u0012\u0010a\u0001\u001b{A\u0001B%\u001a\fz\u0001\u0007QRR\u0001\u001ciJ\fgn\u001d9be\u0016tGo\u00155bY2|w\u000f\u0016:b]N4wN]7\u0015\r\u0005N\u0011uCQ\r)\u0011ii))\u0006\t\u0011A]32\u0010a\u0001!\u007fC\u0001\u0002i;\f|\u0001\u0007QR\b\u0005\t%KZY\b1\u0001\u000e\u000e\u0006\t\"/\u001a9bG.,\u00050[:uK:$\u0018.\u00197\u0015\t55\u0015u\u0004\u0005\t%KZi\b1\u0001\u000e\u000e\u0006\u00192m\u001c8uC&t7/\u0012=jgR,g\u000e^5bYR!Q2DQ\u0013\u0011!a9nc A\u000255\u0015AE3ySN$XM\u001c;jC2\u001c\u0018J\u001c+za\u0016$B!$\u001f\",!AAr[FA\u0001\u0004ii)\u0001\rusB,\u0007+\u0019:b[N$v.\u0012=jgR,g\u000e^5bYN$b!$\u001f\"2\u0005N\u0002\u0002\u0003H2\u0017\u0007\u0003\r!$\u0010\t\u0011\u0001\u000e22\u0011a\u0001\u001bs\"B!$\u001f\"8!Aa2MFC\u0001\u0004ii$\u0001\njgJ\u000bw/\u00134XSRDw.\u001e;Be\u001e\u001cH\u0003BG\u000eC{A\u0001B$\u0005\f\b\u0002\u0007QRH\u0001\nSN\u0014\u0016m\u001e+za\u0016$B!d\u0007\"D!A!SMFE\u0001\u0004ii)A\u0003jgJ\u000bw\u000f\u0006\u0004\u000e\u001c\u0005&\u00135\n\u0005\t\u001d#YY\t1\u0001\u000e>!AqS^FF\u0001\u0004iY\t\u000b\u0007\f\fbM\u0004\u0014PQ(1\u007f\n\u001b&\t\u0002\"R\u0005iQo]3!SN\u0014\u0016m\u001e+za\u0016\f#!)\u0016\u0002\rIr\u0013\u0007\r\u00182\u0003=\u0019\u0018N\\4mKR|gNQ8v]\u0012\u001cH\u0003\u0002H\u0017C7B\u0001Bd(\f\u000e\u0002\u0007QRR\u0001\u0011]\u0016\u001cH/\u001a3NK6\u0014WM\u001d+za\u0016$\u0002\"$$\"b\u0005\u000e\u0014U\r\u0005\t\u001d#Yy\t1\u0001\u000e>!Aq\u0012_FH\u0001\u0004ii\t\u0003\u0005\u0010t-=\u0005\u0019AG\u001f\u0005Mi\u0015n]:j]\u001e\fE.[1t\u0007>tGO]8m'\u0011Y\t*i\u001b\u0011\t\u00056\u0014UO\u0007\u0003C_RA!)\u001d\"t\u000591m\u001c8ue>d'\u0002BG\u0004\u0019oKA!i\u001e\"p\t\u00012i\u001c8ue>dG\u000b\u001b:po\u0006\u0014G.\u001a\u000b\u0003Cw\u0002B!d\u0010\f\u0012\u0006)R.[:tS:<\u0017\t\\5bg\u0016C8-\u001a9uS>tWCAQ>\u0005Ii\u0015n]:j]\u001e$\u0016\u0010]3D_:$(o\u001c7\u0014\t-]\u00155\u000e\u000b\u0003C\u000f\u0003B!d\u0010\f\u0018\u0006AA.\u001e2EKB$\b\u000e\u0006\u0003\u000fx\u00056\u0005\u0002CQH\u00177\u0003\r!d#\u0002\u0005Q\u001c\u0018A\u00047vE\u0012+\u0007\u000f\u001e5BI*,8\u000f\u001e\u000b\u0007\u001do\n+*)'\t\u0011\u0005^5R\u0014a\u0001\u001do\n!\u0001\u001e3\t\u0011\u0005n5R\u0014a\u0001\u001do\n!A\u00193\u0002\u001b%tgm\u001c+za\u0016$U\r\u001d;i)\u0011q9())\t\u00119E1r\u0014a\u0001\u001b{\tAb]=n)f\u0004X\rR3qi\"$BAd\u001e\"(\"A\u0011\u0015VFQ\u0001\u0004iI(\u0001\u0003ts6\u001cH\u0003\u0002H<C[C\u0001b(8\f$\u0002\u0007Q2R\u0001\fSN\u0004v\u000e];mCR,G\r\u0006\u0004\u000e\u001c\u0005N\u0016u\u0017\u0005\tCk[)\u000b1\u0001\u000e\u000e\u0006\u0019A\u000f]\u0019\t\u0011\u0005f6R\u0015a\u0001\u001b\u001b\u000b1\u0001\u001e93\u00035qwN]7bY&TX\r\u00157vgR!QRRQ`\u0011!\u0011*gc*A\u000255\u0005\u0006BFT\u001f\u0007\u000b1\"[:TC6,G+\u001f9fgR1Q2DQdC\u0017D\u0001\")3\f*\u0002\u0007Q2R\u0001\u0005iB\u001c\u0018\u0007\u0003\u0005\"N.%\u0006\u0019AGF\u0003\u0011!\bo\u001d\u001a\u0002#%\u001c8+Y7f'fl'm\u001c7UsB,7\u000f\u0006\u0004\u000e\u001c\u0005N\u0017u\u001b\u0005\tC+\\Y\u000b1\u0001\u000ez\u0005)1/_7tc!A\u0011\u0015\\FV\u0001\u0004iI(A\u0003ts6\u001c('A\n`E\u0006\u001cX\r^=qKJ+7-\u001e:tS>t7/A\f`E\u0006\u001cX\r^=qKJ+7-\u001e:tS>t7o\u0018\u0013fcR!Q\u0012CQq\u0011)i9cc,\u0002\u0002\u0003\u0007a2J\u0001\u0013E\u0006\u001cX\r^=qKJ+7-\u001e:tS>t7/\u0001\fcCN,G/\u001f9f%\u0016\u001cWO]:j_:\u001cx\fJ3r)\u0011i\t\");\t\u0011EE52\u0017a\u0001\u001d\u0017\n\u0011c\u00189f]\u0012Lgn\u001a\"bg\u0016$\u0016\u0010]3t+\t\t{\u000f\u0005\u0004\u0012\u001a\u0006FXRR\u0005\u0005Cg\fZJA\u0004ICND7+\u001a;\u0002!A,g\u000eZ5oO\n\u000b7/\u001a+za\u0016\u001c\u0018AH5t\u000b2Lw-\u001b2mK\u001a{'\u000f\u0015:fM&DXK\\5gS\u000e\fG/[8o)\u0011iY\"i?\t\u0011I\u00154\u0012\u0018a\u0001\u001b\u001bCCa#/\u0010\u0004\u0006\t\u0012n]#se>\u0014xJ],jY\u0012\u001c\u0017M\u001d3\u0015\t5m!5\u0001\u0005\t%KZY\f1\u0001\u000e\u000e\u0006a\u0011n]*j]\u001edW\rV=qKR!Q2\u0004R\u0005\u0011!\u0011*g#0A\u000255\u0015AD5t\u0007>t7\u000f^1oiRK\b/\u001a\u000b\u0005\u001b7\u0011{\u0001\u0003\u0005\u0013f-}\u0006\u0019AGG\u0003EI7/\u0012=jgR,g\u000e^5bYRK\b/\u001a\u000b\u0005\u001b7\u0011+\u0002\u0003\u0005\u0013f-\u0005\u0007\u0019AGGQ\u0011Y\tmd!\u0002)%\u001c\u0018*\u001c9mS\u000eLG/T3uQ>$G+\u001f9f)\u0011iYB)\b\t\u0011I\u001542\u0019a\u0001\u001b\u001b\u000b!#[:Vg\u0016\f'\r\\3BgRK\b/Z!sOR!Q2\u0004R\u0012\u0011!\u0011*g#2A\u000255\u0015aC5t\u0011.#\u0016\u0010]3SK\u001a$B!d\u0007#*!A!SMFd\u0001\u0004ii)A\njgV\u001bX-\u00192mK\u0006\u001bH+\u001f9f\u0003J<7\u000f\u0006\u0003\u000e\u001c\t>\u0002\u0002CPo\u0017\u0013\u0004\r!d#)\t-%w2Q\u0001\u001cSNLe\u000e^3s]\u0006dG+\u001f9f+N,G-Q:UsB,\u0017I]4\u0015\t5m!u\u0007\u0005\t%KZY\r1\u0001\u000e\u000e\u0006\t\u0012n]!mo\u0006L8OV1mk\u0016$\u0016\u0010]3\u0015\t5m!U\b\u0005\t%KZi\r1\u0001\u000e\u000e\u0006!\u0012n]!mo\u0006L8OT8o-\u0006dW/\u001a+za\u0016$B!d\u0007#D!A!SMFh\u0001\u0004ii)A\njgZ\u000bG.^3FYN,gj\u001c8WC2,X\r\u0006\u0003\u000e\u001c\t&\u0003\u0002\u0003J3\u0017#\u0004\r!$$)\t-Ew2Q\u0001\u0019SNtuN\u001c*fM&tW-\\3oi\u000ec\u0017m]:UsB,G\u0003BG\u000eE#B\u0001\u0002d6\fT\u0002\u0007QRR\u0001\nSN\u001cVOY!sON$\"\"d\u0007#X\tf#5\fR/\u0011!\tKm#6A\u00025-\u0005\u0002CQg\u0017+\u0004\r!d#\t\u0011\u0001\u000e2R\u001ba\u0001\u001bsB\u0001B%\u001b\fV\u0002\u0007arO\u0001\u000fgB,7-[1mSj,7oU=n)!iYBi\u0019#f\t\u001e\u0004\u0002\u0003J3\u0017/\u0004\r!$$\t\u00119E1r\u001ba\u0001\u001b{A\u0001B%\u001b\fX\u0002\u0007ar\u000f\u000b\r\u001b7\u0011[Gi\u001c#t\t^$5\u0010\u0005\tE[ZI\u000e1\u0001\u000e\u000e\u0006)\u0001O]3M_\"A!\u0015OFm\u0001\u0004ii$A\u0003ts6du\u000e\u0003\u0005#v-e\u0007\u0019AGG\u0003\u0015\u0001(/\u001a%j\u0011!\u0011Kh#7A\u00025u\u0012!B:z[\"K\u0007\u0002\u0003J5\u00173\u0004\rAd\u001e\u0002\u00175\fGo\u00195fgRK\b/\u001a\u000b\t\u001b7\u0011\u000bIi!#\u0006\"A\u0011UWFn\u0001\u0004ii\t\u0003\u0005\":.m\u0007\u0019AGG\u0011!\u0011;ic7A\u00025m\u0011!E1mo\u0006L8/T1uG\"\u001c\u0016.\u001c9mK\u0006qQ.\u0019;dQ&tw\rU1sC6\u001cHCBG\u000eE\u001b\u0013{\t\u0003\u0005\"V.u\u0007\u0019AG=\u0011!\tKn#8A\u00025e\u0014AD5t/&$\b.\u001b8C_VtGm\u001d\u000b\u000b\u001b7\u0011+Ji&#\u001a\nn\u0005\u0002CHy\u0017?\u0004\r!$$\t\u0011=M4r\u001ca\u0001\u001b{A\u0001\u0002i\t\f`\u0002\u0007Q\u0012\u0010\u0005\t93Yy\u000e1\u0001\u000e\f\u0006\u0011R\r\\5n\u0003:|g._7pkN\u001cE.Y:t)\u0011iiI))\t\u0011IM1\u0012\u001da\u0001\u001b\u001b\u000ba\u0002^=qKZ\u000b'o]%o)f\u0004X\r\u0006\u0003#(\n&\u0006CBG>\u001b\u0003c*\f\u0003\u0005\u0013f-\r\b\u0019AGG\u0003E!\u0018\u0010]3WCJ\u001c\u0018J\u001c+za\u0016\u0014VM\u001e\u000b\u0005EO\u0013{\u000b\u0003\u0005\u0013f-\u0015\b\u0019AGG\u0003I\u0019Xo\u001d9f]\u0012Lgn\u001a+za\u00164\u0016M]:\u0016\t\tV&5\u0018\u000b\u0005Eo\u0013\u000b\r\u0006\u0003#:\nv\u0006\u0003\u0002I/Ew#\u0001\u0002%\u001e\fh\n\u0007\u00013\r\u0005\n7\u0007Z9\u000f\"a\u0001E\u007f\u0003b\u0001$1\u0011\b\nf\u0006\u0002\u0003Rb\u0017O\u0004\rAi*\u0002\u0007Q48\u000f\u000b\u0003\fhB5\u0015\u0001H:ue&\u0004X\t_5ti\u0016tG/[1mg\u0006sG\rV=qKZ\u000b'o\u001d\u000b\u0007E\u0017\u0014kMi4\u0011\u00111\u0005GsVGF\u001bsB\u0001\"i$\fj\u0002\u0007Q2\u0012\u0005\u000bE#\\I\u000f%AA\u00025m\u0011AE3ya\u0006tG\rT1{s\n\u000b7/\u001a+za\u0016\fae\u001d;sSB,\u00050[:uK:$\u0018.\u00197t\u0003:$G+\u001f9f-\u0006\u00148\u000f\n3fM\u0006,H\u000e\u001e\u00133\u0003IiWM]4f!J,g-\u001b=B]\u0012\f%oZ:\u0015\u001155%\u0015\u001cRoEOD\u0001Bi7\fn\u0002\u0007Q2R\u0001\u0005iB\u001c\b\u0007\u0003\u0005#`.5\b\u0019\u0001Rq\u0003!1\u0018M]5b]\u000e,\u0007\u0003\u0002H=EGLAA):\r0\nAa+\u0019:jC:\u001cW\r\u0003\u0005\u0013j-5\b\u0019\u0001H<\u0003%\tG\rZ'f[\n,'\u000f\u0006\u0005\u000e\u0012\t6(u\u001eRy\u0011!)Zac<A\u000255\u0005\u0002\u0003J3\u0017_\u0004\r!$$\t\u00119E1r\u001ea\u0001\u001b{!\"\"$\u0005#v\n^(\u0015 R~\u0011!)Za#=A\u000255\u0005\u0002\u0003J3\u0017c\u0004\r!$$\t\u00119E1\u0012\u001fa\u0001\u001b{A\u0001B%\u001b\fr\u0002\u0007arO\u0001\u0016SNT\u0015M^1WCJ\f'oZ:B]\u000e,7\u000f^8s)\u0011iYb)\u0001\t\u00119\r42\u001fa\u0001\u001b{\t\u0011$\u001b8iKJLGo\u001d&bm\u00064\u0016M]!sONlU\r\u001e5pIR!Q2DR\u0004\u0011!q\u0019g#>A\u00025u\"!\u0003+za\u0016,%O]8s'\u0011Y9p)\u0004\u0011\t5m4uB\u0005\u0005G#i)IA\u0005UQJ|w/\u00192mKV\u0011q4Q\u0001\ba>\u001cx\fJ3r)\u0011i\tb)\u0007\t\u00155\u001d22`A\u0001\u0002\u0004y\u001a)\u0001\u0003q_N\u0004\u0013\u0001B7tO\u0002\"ba)\t$$\r\u0016\u0002\u0003BG \u0017oD\u0001b(!\r\u0004\u0001\u0007q4\u0011\u0005\t9Kc\u0019\u00011\u0001\u000f@R!1\u0015ER\u0015\u0011!a*\u000b$\u0002A\u00029}\u0016\u0001\u00054jY2Len\u0015;bG.$&/Y2f)\t\u0019{\u0003\u0005\u0003\u000fj\u000eF\u0012\u0002BR\t\u001dW\u0014!DU3d_Z,'/\u00192mK\u000eK8\r\\5d%\u00164WM]3oG\u0016\u001c\u0002\u0002$\u0003$\"9}b\u0012\u0012\u000b\u0005Gs\u0019[\u0004\u0005\u0003\u000e@1%\u0001\u0002\u0003H\t\u0019\u001f\u0001\r!$\u0010\u0015\t\rf2u\b\u0005\u000b\u001d#a\t\u0002%AA\u00025uB\u0003BH\rG\u0007B!\"d\n\r\u001a\u0005\u0005\t\u0019\u0001H&)\u0011iYbi\u0012\t\u00155\u001dBRDA\u0001\u0002\u0004yI\u0002\u0006\u0003\u000fh\u000e.\u0003BCG\u0014\u0019?\t\t\u00111\u0001\u000fLQ!Q2DR(\u0011)i9\u0003d\t\u0002\u0002\u0003\u0007q\u0012D\u0001\u001b%\u0016\u001cwN^3sC\ndWmQ=dY&\u001c'+\u001a4fe\u0016t7-\u001a\t\u0005\u001b\u007fa9c\u0005\u0004\r(\r^3S\u0001\t\t7gc*!$\u0010$:Q\u001115\u000b\u000b\u0005Gs\u0019k\u0006\u0003\u0005\u000f\u001215\u0002\u0019AG\u001f)\u0011!Jc)\u0019\t\u0015MuArFA\u0001\u0002\u0004\u0019KD\u0001\u0007O_\u000e{W.\\8o)f\u0004Xm\u0005\u0003\r2\u0005.D\u0003BR5GW\u0002B!d\u0010\r2!AqT\u001cG\u001b\u0001\u0004iYIA\u0007NC24wN]7fIRK\b/Z\n\u0005\u0019o\u0019\u000b\u0003\u0006\u0003$t\rV\u0004\u0003BG \u0019oA\u0001\u0002(*\r<\u0001\u0007ar\u0018\u000b\u0007Gg\u001aKhi\u001f\t\u0011=EHR\ba\u0001\u001b\u001bC\u0001B%\u001a\r>\u0001\u0007arX\u0001\b?&tG-\u001a8u\u0003-y\u0016N\u001c3f]R|F%Z9\u0015\t5E15\u0011\u0005\u000b\u001bOa\t%!AA\u00029}\u0016AB5oI\u0016tG/\u0001\u0006j]\u0012,g\u000e^0%KF$B!$\u0005$\f\"A\u0011\u0013\u0013G#\u0001\u0004qy,A\u0004fqBd\u0017-\u001b8\u0016\t\rF5u\u0014\u000b\u000b\u001b7\u0019\u001bj)&$\"\u000e\u000e\u0006\u0002CN\"\u0019\u000f\u0002\rAd0\t\u0011A\u001dCr\ta\u0001G/\u0003\"\u0002$1$\u001a655UTG\u000e\u0013\u0011\u0019[\nd.\u0003\u0013\u0019+hn\u0019;j_:\u0014\u0004\u0003\u0002I/G?#\u0001\u0002%\u001e\rH\t\u0007\u00013\r\u0005\tCkc9\u00051\u0001\u000e\u000e\"A1U\u0015G$\u0001\u0004\u0019k*\u0001\u0003be\u001e\u0014\u0014\u0001D3ya2\f\u0017N\u001c+za\u0016\u001cHCBG\tGW\u001b{\u000b\u0003\u0005$.2%\u0003\u0019AGG\u0003\u00151w.\u001e8e\u0011!\u0019\u000b\f$\u0013A\u000255\u0015\u0001\u0003:fcVL'/\u001a3\u0015\u00115E1UWR]GwC\u0001bg\u0011\rL\u0001\u00071u\u0017\t\u000b\u0019\u0003\u001cK*$$\u000e\u000e>e\u0001\u0002CRW\u0019\u0017\u0002\r!$$\t\u0011\rFF2\na\u0001\u001b\u001b\u000b!c^5uQRK\b/Z:FqBd\u0017-\u001b8fIV!1\u0015YRc)\u0011\u0019\u001bmi2\u0011\tAu3U\u0019\u0003\t+SciE1\u0001\u0011d!I14\tG'\t\u0003\u00071\u0015\u001a\t\u0007\u0019\u0003\u0004:ii1\u0002%%\u001cXK\u001c2pk:$W\rZ$f]\u0016\u0014\u0018n\u0019\u000b\u0005\u001b7\u0019{\r\u0003\u0005\u0013f1=\u0003\u0019AGG\u0003AI7OQ8v]\u0012,GmR3oKJL7\r\u0006\u0003\u000e\u001c\rV\u0007\u0002\u0003J3\u0019#\u0002\r!$$\u0002\u001f\u0005$GmU3sS\u0006d\u0017N_1cY\u0016$B!d#$\\\"A1U\u001cG*\u0001\u0004\u0001\u000b!\u0001\u0002qg\u0006yQO\\2iK\u000e\\W\r\u001a\"pk:$7\u000f\u0006\u0003\u000e\u000e\u000e\u000e\b\u0002\u0003J3\u0019+\u0002\r!$$\u0002#9|g\u000e\u0016:jm&\fG.T3nE\u0016\u00148\u000f\u0006\u0003\u000e8\u000e&\b\u0002\u0003H2\u0019/\u0002\r!$\u0010\u0002#%l\u0007o\u001c:uC\ndW-T3nE\u0016\u00148\u000f\u0006\u0003\u000e8\u000e>\b\u0002CHy\u00193\u0002\r!$$\u0002/%tg/\u00197jI\u0006$X\r\u0016:fKR\u0003XmQ1dQ\u0016\u001cHCBG\tGk\u001cK\u0010\u0003\u0005$x2m\u0003\u0019AI}\u0003\u0011!(/Z3\t\u0011\rnH2\fa\u0001G{\f1\"\u001e9eCR,GmU=ngB1qrER\u0000\u001b{IA!d\u000f\u000e6\u0005\u0001\u0012N\u001c<bY&$\u0017\r^3DC\u000eDWm\u001d\u000b\u0007\u001b#!+\u0001j\u0002\t\u0011IMAR\fa\u0001\u001b\u001bC\u0001bi?\r^\u0001\u00071U \u0002\u0015\u0013:4\u0018\r\\5eCR,G+\u001f9f\u0007\u0006\u001c\u0007.Z:\u0014\t1}s2B\u0001\u000fG\"\fgnZ3e'fl'm\u001c7t)\u0011!\u000b\u0002j\u0005\u0011\t5}Br\f\u0005\tI\u001ba\u0019\u00071\u0001$~\u0006\u0019!/Z:\u0002\u000fI,7o\u0018\u0013fcR!Q\u0012\u0003S\u000e\u0011)i9\u0003d\u001a\u0002\u0002\u0003\u0007Q2D\u0001\u0005e\u0016\u001c\b%\u0001\u0003tK\u0016tWC\u0001S\u0012!!!+\u0003*\u000b\u000e\u000e6mQB\u0001S\u0014\u0015\u0011i9Ad<\n\t\u0011.Bu\u0005\u0002\u0010\u0013\u0012,g\u000e^5us\"\u000b7\u000f['ba\u0006)1/Z3oA\u0005Q\u0011N\u001c<bY&$\u0017\r^3\u0015\t5EA5\u0007\u0005\t?;dy\u00071\u0001%6A1Q2\u0010S\u001c\u001b\u001bKA\u0001*\u000f\u000e\u0006\nA\u0011\n^3sC\ndW\r\u0006\u0003\u000e\u0012\u0011v\u0002\u0002\u0003J3\u0019c\u0002\r!$$\u0002\u001d%tg/\u00197jI\u0006$X-S7qYR!Q2\u0004S\"\u0011!\u0011*\u0007d\u001dA\u000255E\u0003BG\tI\u000fB\u0001B%\u001a\rv\u0001\u0007QRR\u0001\u000bg\"|'\u000f\u001e5b]\u0012\u001cXC\u0001S'!\u0019iy#$\u000f\u000fh\u0006\u0019B/\u001f9f\u0007>tG/Y5ogRK\b/\u001a,beV\u0011\u0001\u0013J\u0001\u001cif\u0004X-S:Tk\n$\u0016\u0010]3PMN+'/[1mSj\f'\r\\3\u0002\u001bQL\b/Z%t\u001d>$\b.\u001b8h)\u0011iY\u0002*\u0017\t\u0011I\u0015DR\u0010a\u0001\u001b\u001bCC\u0001$ \u0010\u0004\u0006)B/\u001f9f\u0013N\fe._(s\u0015\u00064\u0018m\u00142kK\u000e$H\u0003BG\u000eICB\u0001B%\u001a\r\u0000\u0001\u0007QR\u0012\u0015\u0005\u0019\u007fz\u0019)\u0001\tusB,\u0017j]!os\u0016C\u0018m\u0019;msR!Q2\u0004S5\u0011!\u0011*\u0007$!A\u000255\u0015A\u0005;za\u0016L5\u000fS5hQ\u0016\u00148*\u001b8eK\u0012\f\u0011\u0002^=qK\u0012+\u0007\u000f\u001e5\u0015\t9]D\u0015\u000f\u0005\t%Kb)\t1\u0001\u000e\u000e\u0006AQ.\u0019=EKB$\b\u000e\u0006\u0003\u000fx\u0011^\u0004\u0002CPo\u0019\u000f\u0003\r!d#\u0002\u001f\u0005\u0014X\r\u0016:jm&\fG\u000eV=qKN$B!d\u0007%~!AqT\u001cGE\u0001\u0004iY\t\u000b\u0003\r\n>\r\u0015\u0001E!o]>$\u0018\r^3e)f\u0004X\rV1h+\t!+\t\u0005\u0004%\b\u0012&eTB\u0007\u0003\u0019gKA\u0001j#\r4\nA1\t\\1tgR\u000bw-\u0001\fC_VtG-\u001a3XS2$7-\u0019:e)f\u0004X\rV1h+\t!\u000b\n\u0005\u0004%\b\u0012&%3W\u0001\u0011\u00072\f7o]%oM>$\u0016\u0010]3UC\u001e,\"\u0001j&\u0011\r\u0011\u001eE\u0015\u0012L'\u0003=\u0019u.\u001c9pk:$G+\u001f9f)\u0006<WC\u0001SO!\u0019!;\t*#\u0016t\u0005y1i\u001c8ti\u0006tG\u000fV=qKR\u000bw-\u0006\u0002%$B1Au\u0011SE/\u000b\n!#\u0012=jgR,g\u000e^5bYRK\b/\u001a+bOV\u0011A\u0015\u0016\t\u0007I\u000f#Ki'\u0001\u0002\u001b5+G\u000f[8e)f\u0004X\rV1h+\t!{\u000b\u0005\u0004%\b\u0012&\u0015t]\u0001\u0015\u001dVdG.\u0019:z\u001b\u0016$\bn\u001c3UsB,G+Y4\u0016\u0005\u0011V\u0006C\u0002SDI\u0013S\u001a&A\u0006Q_2LH+\u001f9f)\u0006<WC\u0001S^!\u0019!;\t*#\u001b\u001c\u0006q!+\u001a4j]\u0016$G+\u001f9f)\u0006<WC\u0001Sa!\u0019!;\t*#\u0016f\u0006\u00012+\u001b8hY\u0016$xN\u001c+za\u0016$\u0016mZ\u000b\u0003I\u000f\u0004b\u0001j\"%\nJ%\u0012!D*j]\u001edW\rV=qKR\u000bw-\u0006\u0002%NB1Au\u0011SE)\u0007\nAbU;qKJ$\u0016\u0010]3UC\u001e,\"\u0001j5\u0011\r\u0011\u001eE\u0015\u0012Kn\u0003-!\u0006.[:UsB,G+Y4\u0016\u0005\u0011f\u0007C\u0002SDI\u0013#\n!A\u0007UsB,'i\\;oIN$\u0016mZ\u000b\u0003I?\u0004b\u0001j\"%\n:5\u0012A\u0003+za\u0016\u0014VM\u001a+bOV\u0011AU\u001d\t\u0007I\u000f#Ki&9\u0002\u0011QK\b/\u001a+bO\u001e,\"\u0001j;\u0011\r\u0011\u001eE\u0015RGG!\u0011qI(g\u0003"
)
public interface Types extends scala.reflect.api.Types, TypeComparers, TypeToStrings, CommonOwners, GlbLubs, TypeMaps, TypeConstraints, scala.reflect.internal.tpe.FindMembers, Collections {
   substTypeMapCache$ scala$reflect$internal$Types$$substTypeMapCache();

   UnmappableTree$ UnmappableTree();

   ErrorType$ ErrorType();

   WildcardType$ WildcardType();

   BoundedWildcardType$ BoundedWildcardType();

   OverloadedArgProto$ OverloadedArgProto();

   NoType$ NoType();

   NoPrefix$ NoPrefix();

   ThisType$ ThisType();

   SingleType$ SingleType();

   SuperType$ SuperType();

   TypeBounds$ TypeBounds();

   CompoundType$ CompoundType();

   RefinedType$ RefinedType();

   ClassInfoType$ ClassInfoType();

   ConstantType$ ConstantType();

   FoldableConstantType$ FoldableConstantType();

   LiteralType$ LiteralType();

   TypeRef$ TypeRef();

   MethodType$ MethodType();

   NullaryMethodType$ NullaryMethodType();

   PolyType$ PolyType();

   ExistentialType$ ExistentialType();

   OverloadedType$ OverloadedType();

   ImportType$ ImportType();

   AntiPolyType$ AntiPolyType();

   HasTypeMember$ HasTypeMember();

   ArrayTypeRef$ ArrayTypeRef();

   TypeVar$ TypeVar();

   AnnotatedType$ AnnotatedType();

   StaticallyAnnotatedType$ StaticallyAnnotatedType();

   NamedType$ NamedType();

   RepeatedType$ RepeatedType();

   ErasedValueType$ ErasedValueType();

   GenPolyType$ GenPolyType();

   unwrapToClass$ unwrapToClass();

   unwrapToStableClass$ unwrapToStableClass();

   unwrapWrapperTypes$ unwrapWrapperTypes();

   RecoverableCyclicReference$ RecoverableCyclicReference();

   void scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$emptySymbolSet_$eq(final Set x$1);

   void scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$breakCycles_$eq(final boolean x$1);

   void scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$sharperSkolems_$eq(final boolean x$1);

   void scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$_intersectionWitness_$eq(final WeakHashMap x$1);

   void scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$copyRefinedTypeSSM_$eq(final ReusableInstance x$1);

   void scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$initialUniquesCapacity_$eq(final int x$1);

   void scala$reflect$internal$Types$_setter_$missingAliasException_$eq(final MissingAliasControl x$1);

   void scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$_pendingBaseTypes_$eq(final HashSet x$1);

   void scala$reflect$internal$Types$_setter_$shorthands_$eq(final Set x$1);

   void scala$reflect$internal$Types$_setter_$typeContainsTypeVar_$eq(final Function1 x$1);

   void scala$reflect$internal$Types$_setter_$typeIsSubTypeOfSerializable_$eq(final Function1 x$1);

   void scala$reflect$internal$Types$_setter_$typeIsHigherKinded_$eq(final Function1 x$1);

   void scala$reflect$internal$Types$_setter_$AnnotatedTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$BoundedWildcardTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$ClassInfoTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$CompoundTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$ConstantTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$ExistentialTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$MethodTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$NullaryMethodTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$PolyTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$RefinedTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$SingletonTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$SingleTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$SuperTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$ThisTypeTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$TypeBoundsTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$TypeRefTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Types$_setter_$TypeTagg_$eq(final ClassTag x$1);

   boolean scala$reflect$internal$Types$$explainSwitch();

   void scala$reflect$internal$Types$$explainSwitch_$eq(final boolean x$1);

   Set scala$reflect$internal$Types$$emptySymbolSet();

   boolean scala$reflect$internal$Types$$breakCycles();

   boolean scala$reflect$internal$Types$$sharperSkolems();

   int scala$reflect$internal$Types$$_skolemizationLevel();

   void scala$reflect$internal$Types$$_skolemizationLevel_$eq(final int x$1);

   // $FF: synthetic method
   static int skolemizationLevel$(final Types $this) {
      return $this.skolemizationLevel();
   }

   default int skolemizationLevel() {
      return this.scala$reflect$internal$Types$$_skolemizationLevel();
   }

   // $FF: synthetic method
   static void skolemizationLevel_$eq$(final Types $this, final int value) {
      $this.skolemizationLevel_$eq(value);
   }

   default void skolemizationLevel_$eq(final int value) {
      this.scala$reflect$internal$Types$$_skolemizationLevel_$eq(value);
   }

   WeakHashMap scala$reflect$internal$Types$$_intersectionWitness();

   // $FF: synthetic method
   static WeakHashMap intersectionWitness$(final Types $this) {
      return $this.intersectionWitness();
   }

   default WeakHashMap intersectionWitness() {
      return this.scala$reflect$internal$Types$$_intersectionWitness();
   }

   // $FF: synthetic method
   static void defineUnderlyingOfSingleType$(final Types $this, final SingleType tpe) {
      $this.defineUnderlyingOfSingleType(tpe);
   }

   default void defineUnderlyingOfSingleType(final SingleType tpe) {
      int period = tpe.underlyingPeriod();
      if (period != ((SymbolTable)this).currentPeriod()) {
         tpe.underlyingPeriod_$eq(((SymbolTable)this).currentPeriod());
         if (!((SymbolTable)this).isValid(period)) {
            Type var7;
            label34: {
               label33: {
                  Symbols.Symbol var10001 = tpe.sym();
                  Symbols.NoSymbol var3 = ((Symbols)this).NoSymbol();
                  if (var10001 == null) {
                     if (var3 == null) {
                        break label33;
                     }
                  } else if (var10001.equals(var3)) {
                     break label33;
                  }

                  Type result = tpe.pre().memberType(tpe.sym()).resultType();
                  var7 = ((Definitions)this).definitions().isScalaRepeatedParamType(result) ? ((Definitions)this).definitions().repeatedToSeq(result) : result;
                  break label34;
               }

               var7 = this.ThisType().apply(((Mirrors.RootsBase)((scala.reflect.api.Mirrors)this).rootMirror()).RootClass());
            }

            tpe.underlyingCache_$eq(var7);
            SymbolTable var10000 = (SymbolTable)this;
            boolean assert_assertion = tpe.underlyingCache() != tpe;
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(tpe);
            }
         }
      }
   }

   // $FF: synthetic method
   static List computeBaseClasses$(final Types $this, final Type tpe) {
      return $this.computeBaseClasses(tpe);
   }

   default List computeBaseClasses(final Type tpe) {
      List parents = tpe.parents();
      Object var10000;
      if (!parents.isEmpty() && !(parents.head() instanceof PackageTypeRef)) {
         Type superclazz = (Type)parents.head();
         List mixins = (List)parents.tail();
         List sbcs = superclazz.baseClasses();

         ObjectRef bcs;
         for(bcs = new ObjectRef(sbcs); !mixins.isEmpty(); mixins = (List)mixins.tail()) {
            List addMixinBaseClasses$1_mbcs = ((Type)mixins.head()).baseClasses();
            Types addMixinBaseClasses$1_this = this;

            Object var26;
            while(true) {
               if (addMixinBaseClasses$1_mbcs.isEmpty()) {
                  var26 = (List)bcs.elem;
                  break;
               }

               label53: {
                  Symbols.Symbol addMixinBaseClasses$1_isNew$1_clazz = (Symbols.Symbol)addMixinBaseClasses$1_mbcs.head();
                  if (superclazz.baseTypeIndex(addMixinBaseClasses$1_isNew$1_clazz) < 0) {
                     List addMixinBaseClasses$1_isNew$1_p;
                     for(addMixinBaseClasses$1_isNew$1_p = (List)bcs.elem; addMixinBaseClasses$1_isNew$1_p != sbcs; addMixinBaseClasses$1_isNew$1_p = (List)addMixinBaseClasses$1_isNew$1_p.tail()) {
                        var26 = addMixinBaseClasses$1_isNew$1_p.head();
                        if (var26 == null) {
                           if (addMixinBaseClasses$1_isNew$1_clazz == null) {
                              break;
                           }
                        } else if (var26.equals(addMixinBaseClasses$1_isNew$1_clazz)) {
                           break;
                        }
                     }

                     if (addMixinBaseClasses$1_isNew$1_p == sbcs) {
                        var23 = true;
                        break label53;
                     }
                  }

                  var23 = false;
               }

               Object var17 = null;
               Object var19 = null;
               if (var23) {
                  Symbols.Symbol var11 = (Symbols.Symbol)addMixinBaseClasses$1_mbcs.head();
                  List var25 = addMixinBaseClasses$1_this.addMixinBaseClasses$1((List)addMixinBaseClasses$1_mbcs.tail(), bcs, superclazz, sbcs);
                  if (var25 == null) {
                     throw null;
                  }

                  List addMixinBaseClasses$1_$colon$colon_this = var25;
                  var26 = new .colon.colon(var11, addMixinBaseClasses$1_$colon$colon_this);
                  Object var21 = null;
                  break;
               }

               SymbolTable var24 = (SymbolTable)addMixinBaseClasses$1_this;
               addMixinBaseClasses$1_mbcs = (List)addMixinBaseClasses$1_mbcs.tail();
               addMixinBaseClasses$1_this = var24;
            }

            Object var15 = null;
            Object var16 = null;
            Object var18 = null;
            Object var20 = null;
            Object var22 = null;
            bcs.elem = var26;
         }

         var10000 = (List)bcs.elem;
      } else {
         var10000 = scala.collection.immutable.Nil..MODULE$;
      }

      List baseTail = (List)var10000;
      Symbols.Symbol var8 = tpe.typeSymbol();
      return baseTail.$colon$colon(var8);
   }

   // $FF: synthetic method
   static void defineBaseTypeSeqOfCompoundType$(final Types $this, final CompoundType tpe) {
      $this.defineBaseTypeSeqOfCompoundType(tpe);
   }

   default void defineBaseTypeSeqOfCompoundType(final CompoundType tpe) {
      int period = tpe.baseTypeSeqPeriod();
      if (period != ((SymbolTable)this).currentPeriod()) {
         tpe.baseTypeSeqPeriod_$eq(((SymbolTable)this).currentPeriod());
         if (!((SymbolTable)this).isValidForBaseClasses(period)) {
            if (tpe.parents().exists(this.typeContainsTypeVar())) {
               Map tvarFor = (Map)scala.collection.mutable.Map..MODULE$.empty();
               TypeMaps.TypeMap varToParam = (SymbolTable)this.new TypeMap(tvarFor) {
                  // $FF: synthetic field
                  private final SymbolTable $outer;
                  private final Map tvarFor$1;

                  public Type apply(final Type tp) {
                     if (!(tp instanceof TypeVar)) {
                        return tp.mapOver(this);
                     } else {
                        TypeVar var2 = (TypeVar)tp;
                        SymbolTable var10000 = this.$outer;
                        Type var10001 = var2.origin().typeSymbol().typeConstructor();
                        List var10002 = var2.typeArgs();
                        if (var10002 == null) {
                           throw null;
                        } else {
                           List mapConserve_this = var10002;
                           List mapConserve_loop$3_pending = mapConserve_this;
                           List mapConserve_loop$3_unchanged = mapConserve_this;
                           .colon.colon mapConserve_loop$3_mappedLast = null;
                           List mapConserve_loop$3_mappedHead = null;

                           while(!mapConserve_loop$3_pending.isEmpty()) {
                              Object mapConserve_loop$3_head0 = mapConserve_loop$3_pending.head();
                              Object mapConserve_loop$3_head1 = this.apply((Type)mapConserve_loop$3_head0);
                              if (mapConserve_loop$3_head1 == mapConserve_loop$3_head0) {
                                 mapConserve_loop$3_pending = (List)mapConserve_loop$3_pending.tail();
                                 mapConserve_loop$3_unchanged = mapConserve_loop$3_unchanged;
                                 mapConserve_loop$3_mappedLast = mapConserve_loop$3_mappedLast;
                                 mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead;
                              } else {
                                 List mapConserve_loop$3_xc = mapConserve_loop$3_unchanged;
                                 List mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_mappedHead;

                                 .colon.colon mapConserve_loop$3_mappedLast1;
                                 for(mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_mappedLast; mapConserve_loop$3_xc != mapConserve_loop$3_pending; mapConserve_loop$3_xc = (List)mapConserve_loop$3_xc.tail()) {
                                    .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_xc.head(), scala.collection.immutable.Nil..MODULE$);
                                    if (mapConserve_loop$3_mappedHead1 == null) {
                                       mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                                    }

                                    if (mapConserve_loop$3_mappedLast1 != null) {
                                       mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                                    }

                                    mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_next;
                                 }

                                 .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_head1, scala.collection.immutable.Nil..MODULE$);
                                 if (mapConserve_loop$3_mappedHead1 == null) {
                                    mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                                 }

                                 if (mapConserve_loop$3_mappedLast1 != null) {
                                    mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                                 }

                                 List mapConserve_loop$3_tail0 = (List)mapConserve_loop$3_pending.tail();
                                 mapConserve_loop$3_pending = mapConserve_loop$3_tail0;
                                 mapConserve_loop$3_unchanged = mapConserve_loop$3_tail0;
                                 mapConserve_loop$3_mappedLast = mapConserve_loop$3_next;
                                 mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead1;
                              }
                           }

                           Object var32;
                           if (mapConserve_loop$3_mappedHead == null) {
                              var32 = mapConserve_loop$3_unchanged;
                           } else {
                              mapConserve_loop$3_mappedLast.next_$eq(mapConserve_loop$3_unchanged);
                              var32 = mapConserve_loop$3_mappedHead;
                           }

                           mapConserve_loop$3_mappedHead = null;
                           Object var21 = null;
                           Object var22 = null;
                           Object var23 = null;
                           Object var24 = null;
                           Object var25 = null;
                           Object var26 = null;
                           Object var27 = null;
                           Object var28 = null;
                           Object var29 = null;
                           Object var30 = null;
                           Object var31 = null;
                           List mapConserve_result = (List)var32;
                           Statics.releaseFence();
                           var32 = mapConserve_result;
                           Object var18 = null;
                           mapConserve_result = null;
                           Type toOrigin = var10000.appliedType((Type)var10001, (List)var32);
                           this.tvarFor$1.update(toOrigin, var2);
                           return toOrigin;
                        }
                     }
                  }

                  public {
                     if (Types.this == null) {
                        throw null;
                     } else {
                        this.$outer = Types.this;
                        this.tvarFor$1 = tvarFor$1;
                     }
                  }
               };
               Type tpWithoutTypeVars = this.copyRefinedType((RefinedType)tpe, tpe.parents().map(varToParam), varToParam.mapOver(tpe.decls()), this.copyRefinedType$default$4());
               TypeMaps.TypeMap paramToVar = (SymbolTable)this.new TypeMap(tvarFor) {
                  private final scala.collection.immutable.Map paramToVarMap;

                  public scala.collection.immutable.Map paramToVarMap() {
                     return this.paramToVarMap;
                  }

                  public Type apply(final Type tp) {
                     if (tp instanceof TypeRef) {
                        TypeRef var2 = (TypeRef)tp;
                        return (Type)this.paramToVarMap().getOrElse(var2, () -> this.mapOver(tp));
                     } else {
                        return tp.mapOver(this);
                     }
                  }

                  public {
                     this.paramToVarMap = tvarFor$1.toMap(scala..less.colon.less..MODULE$.refl());
                  }

                  // $FF: synthetic method
                  private static Object $deserializeLambda$(SerializedLambda var0) {
                     return var0.lambdaDeserialize<invokedynamic>(var0);
                  }
               };
               tpe.baseTypeSeqCache_$eq(tpWithoutTypeVars.baseTypeSeq().lateMap(paramToVar));
            } else {
               MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
               MutableSettings$ var53 = MutableSettings$.MODULE$;
               MutableSettings SettingsOps_settings = ((SymbolTable)this).settings();
               MutableSettings var54 = SettingsOps_settings;
               SettingsOps_settings = null;
               MutableSettings areStatisticsEnabled$extension_$this = var54;
               boolean var55 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
               areStatisticsEnabled$extension_$this = null;
               if (var55) {
                  Statistics var56 = ((SymbolTable)this).statistics();
                  Statistics.SubCounter incCounter_c = ((TypesStats)((SymbolTable)this).statistics()).compoundBaseTypeSeqCount();
                  if (var56 == null) {
                     throw null;
                  }

                  Statistics incCounter_this = var56;
                  MutableSettings.SettingsOps$ var57 = MutableSettings.SettingsOps$.MODULE$;
                  MutableSettings$ var58 = MutableSettings$.MODULE$;
                  MutableSettings incCounter_enabled_SettingsOps_settings = incCounter_this.scala$reflect$internal$util$Statistics$$settings;
                  MutableSettings var59 = incCounter_enabled_SettingsOps_settings;
                  incCounter_enabled_SettingsOps_settings = null;
                  MutableSettings incCounter_enabled_areStatisticsEnabled$extension_$this = var59;
                  boolean var60 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(incCounter_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
                  incCounter_enabled_areStatisticsEnabled$extension_$this = null;
                  if (var60 && incCounter_c != null) {
                     ((Statistics.Counter)incCounter_c).value_$eq(((Statistics.Counter)incCounter_c).value() + 1);
                  }

                  Object var36 = null;
                  Object var37 = null;
               }

               MutableSettings.SettingsOps$ var61 = MutableSettings.SettingsOps$.MODULE$;
               MutableSettings$ var62 = MutableSettings$.MODULE$;
               MutableSettings SettingsOps_settings = ((SymbolTable)this).settings();
               MutableSettings var63 = SettingsOps_settings;
               SettingsOps_settings = null;
               MutableSettings areStatisticsEnabled$extension_$this = var63;
               boolean var64 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
               areStatisticsEnabled$extension_$this = null;
               Tuple2 var65;
               if (var64) {
                  Statistics var66 = ((SymbolTable)this).statistics();
                  Statistics.TimerStack pushTimer_timers = ((TypesStats)((SymbolTable)this).statistics()).typeOpsStack();
                  if (var66 == null) {
                     throw null;
                  }

                  Statistics pushTimer_this = var66;
                  MutableSettings.SettingsOps$ var67 = MutableSettings.SettingsOps$.MODULE$;
                  MutableSettings$ var68 = MutableSettings$.MODULE$;
                  MutableSettings pushTimer_enabled_SettingsOps_settings = pushTimer_this.scala$reflect$internal$util$Statistics$$settings;
                  MutableSettings var69 = pushTimer_enabled_SettingsOps_settings;
                  pushTimer_enabled_SettingsOps_settings = null;
                  MutableSettings pushTimer_enabled_areStatisticsEnabled$extension_$this = var69;
                  boolean var70 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(pushTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
                  pushTimer_enabled_areStatisticsEnabled$extension_$this = null;
                  var65 = var70 && pushTimer_timers != null ? pushTimer_timers.push($anonfun$defineBaseTypeSeqOfCompoundType$1(this)) : null;
                  Object var41 = null;
                  Object var42 = null;
               } else {
                  var65 = null;
               }

               Tuple2 start = var65;

               try {
                  tpe.baseTypeSeqCache_$eq(((BaseTypeSeqs)this).undetBaseTypeSeq());
                  tpe.baseTypeSeqCache_$eq(tpe.typeSymbol().isRefinementClass() ? (BaseTypeSeqs.BaseTypeSeq)tpe.memo(() -> ((BaseTypeSeqs)this).compoundBaseTypeSeq(tpe), (x$15) -> x$15.baseTypeSeq().updateHead(tpe.typeSymbol().tpe_$times())) : ((BaseTypeSeqs)this).compoundBaseTypeSeq(tpe));
               } finally {
                  MutableSettings.SettingsOps$ var71 = MutableSettings.SettingsOps$.MODULE$;
                  MutableSettings$ var72 = MutableSettings$.MODULE$;
                  MutableSettings SettingsOps_settings = ((SymbolTable)this).settings();
                  MutableSettings var73 = SettingsOps_settings;
                  SettingsOps_settings = null;
                  MutableSettings areStatisticsEnabled$extension_$this = var73;
                  boolean var74 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
                  areStatisticsEnabled$extension_$this = null;
                  if (var74) {
                     Statistics var75 = ((SymbolTable)this).statistics();
                     Statistics.TimerStack popTimer_timers = ((TypesStats)((SymbolTable)this).statistics()).typeOpsStack();
                     if (var75 == null) {
                        throw null;
                     }

                     Statistics popTimer_this = var75;
                     MutableSettings.SettingsOps$ var76 = MutableSettings.SettingsOps$.MODULE$;
                     MutableSettings$ var77 = MutableSettings$.MODULE$;
                     MutableSettings popTimer_enabled_SettingsOps_settings = popTimer_this.scala$reflect$internal$util$Statistics$$settings;
                     MutableSettings var78 = popTimer_enabled_SettingsOps_settings;
                     popTimer_enabled_SettingsOps_settings = null;
                     MutableSettings popTimer_enabled_areStatisticsEnabled$extension_$this = var78;
                     boolean var79 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(popTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
                     popTimer_enabled_areStatisticsEnabled$extension_$this = null;
                     if (var79 && popTimer_timers != null) {
                        popTimer_timers.pop(start);
                     }

                     Object var46 = null;
                     Object var47 = null;
                  }

               }
            }
         }
      }

      if (tpe.baseTypeSeqCache() == ((BaseTypeSeqs)this).undetBaseTypeSeq()) {
         throw (SymbolTable)this.new TypeError((new StringBuilder(37)).append("illegal cyclic inheritance involving ").append(tpe.typeSymbol()).toString());
      }
   }

   // $FF: synthetic method
   static void defineBaseClassesOfCompoundType$(final Types $this, final CompoundType tpe) {
      $this.defineBaseClassesOfCompoundType(tpe);
   }

   default void defineBaseClassesOfCompoundType(final CompoundType tpe) {
      int period = tpe.baseClassesPeriod();
      if (period != ((SymbolTable)this).currentPeriod()) {
         tpe.baseClassesPeriod_$eq(((SymbolTable)this).currentPeriod());
         if (!((SymbolTable)this).isValidForBaseClasses(period)) {
            MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var37 = MutableSettings$.MODULE$;
            MutableSettings SettingsOps_settings = ((SymbolTable)this).settings();
            MutableSettings var38 = SettingsOps_settings;
            SettingsOps_settings = null;
            MutableSettings areStatisticsEnabled$extension_$this = var38;
            boolean var39 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            areStatisticsEnabled$extension_$this = null;
            Tuple2 var40;
            if (var39) {
               Statistics var41 = ((SymbolTable)this).statistics();
               Statistics.TimerStack pushTimer_timers = ((TypesStats)((SymbolTable)this).statistics()).typeOpsStack();
               if (var41 == null) {
                  throw null;
               }

               Statistics pushTimer_this = var41;
               MutableSettings.SettingsOps$ var42 = MutableSettings.SettingsOps$.MODULE$;
               MutableSettings$ var43 = MutableSettings$.MODULE$;
               MutableSettings pushTimer_enabled_SettingsOps_settings = pushTimer_this.scala$reflect$internal$util$Statistics$$settings;
               MutableSettings var44 = pushTimer_enabled_SettingsOps_settings;
               pushTimer_enabled_SettingsOps_settings = null;
               MutableSettings pushTimer_enabled_areStatisticsEnabled$extension_$this = var44;
               boolean var45 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(pushTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
               pushTimer_enabled_areStatisticsEnabled$extension_$this = null;
               var40 = var45 && pushTimer_timers != null ? pushTimer_timers.push($anonfun$defineBaseClassesOfCompoundType$1(this)) : null;
               Object var26 = null;
               Object var27 = null;
            } else {
               var40 = null;
            }

            Tuple2 start = var40;

            try {
               tpe.baseClassesCache_$eq((List)null);
               tpe.baseClassesCache_$eq((List)tpe.memo(() -> this.computeBaseClasses(tpe), (x$16) -> {
                  Symbols.Symbol var2 = tpe.typeSymbol();
                  List var10000 = (List)x$16.baseClasses().tail();
                  if (var10000 == null) {
                     throw null;
                  } else {
                     List $colon$colon_this = var10000;
                     return new .colon.colon(var2, $colon$colon_this);
                  }
               }));
            } finally {
               MutableSettings.SettingsOps$ var46 = MutableSettings.SettingsOps$.MODULE$;
               MutableSettings$ var47 = MutableSettings$.MODULE$;
               MutableSettings SettingsOps_settings = ((SymbolTable)this).settings();
               MutableSettings var48 = SettingsOps_settings;
               SettingsOps_settings = null;
               MutableSettings areStatisticsEnabled$extension_$this = var48;
               boolean var49 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
               areStatisticsEnabled$extension_$this = null;
               if (var49) {
                  Statistics var50 = ((SymbolTable)this).statistics();
                  Statistics.TimerStack popTimer_timers = ((TypesStats)((SymbolTable)this).statistics()).typeOpsStack();
                  if (var50 == null) {
                     throw null;
                  }

                  Statistics popTimer_this = var50;
                  MutableSettings.SettingsOps$ var51 = MutableSettings.SettingsOps$.MODULE$;
                  MutableSettings$ var52 = MutableSettings$.MODULE$;
                  MutableSettings popTimer_enabled_SettingsOps_settings = popTimer_this.scala$reflect$internal$util$Statistics$$settings;
                  MutableSettings var53 = popTimer_enabled_SettingsOps_settings;
                  popTimer_enabled_SettingsOps_settings = null;
                  MutableSettings popTimer_enabled_areStatisticsEnabled$extension_$this = var53;
                  boolean var54 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(popTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
                  popTimer_enabled_areStatisticsEnabled$extension_$this = null;
                  if (var54 && popTimer_timers != null) {
                     popTimer_timers.pop(start);
                  }

                  Object var31 = null;
                  Object var32 = null;
               }

            }
         }
      }

      if (tpe.baseClassesCache() == null) {
         throw (SymbolTable)this.new TypeError((new StringBuilder(35)).append("illegal cyclic reference involving ").append(tpe.typeSymbol()).toString());
      }
   }

   // $FF: synthetic method
   static void validateClassInfo$(final Types $this, final ClassInfoType tp) {
      $this.validateClassInfo(tp);
   }

   default void validateClassInfo(final ClassInfoType tp) {
   }

   // $FF: synthetic method
   static Symbols.Symbol scala$reflect$internal$Types$$embeddedSymbol$(final Types $this, final Type tp, final Names.Name name) {
      return $this.scala$reflect$internal$Types$$embeddedSymbol(tp, name);
   }

   default Symbols.Symbol scala$reflect$internal$Types$$embeddedSymbol(final Type tp, final Names.Name name) {
      if (tp.typeSymbol().isRefinementClass()) {
         return tp.normalize().decls().lookup(name);
      } else {
         ((SymbolTable)this).debuglog(() -> (new StringBuilder(34)).append("no embedded symbol ").append(name).append(" found in ").append(((scala.reflect.api.Printers)this).showRaw(tp, ((scala.reflect.api.Printers)this).showRaw$default$2(), ((scala.reflect.api.Printers)this).showRaw$default$3(), ((scala.reflect.api.Printers)this).showRaw$default$4(), ((scala.reflect.api.Printers)this).showRaw$default$5(), ((scala.reflect.api.Printers)this).showRaw$default$6(), ((scala.reflect.api.Printers)this).showRaw$default$7())).append(" --> ").append(tp.normalize().decls().lookup(name)).toString());
         return ((Symbols)this).NoSymbol();
      }
   }

   // $FF: synthetic method
   static void defineNormalized$(final Types $this, final TypeRef tr) {
      $this.defineNormalized(tr);
   }

   default void defineNormalized(final TypeRef tr) {
      tr.scala$reflect$internal$Types$$defineNormalized();
   }

   // $FF: synthetic method
   static void defineParentsOfTypeRef$(final Types $this, final TypeRef tpe) {
      $this.defineParentsOfTypeRef(tpe);
   }

   default void defineParentsOfTypeRef(final TypeRef tpe) {
      int period = tpe.parentsPeriod();
      if (period != ((SymbolTable)this).currentPeriod()) {
         tpe.parentsPeriod_$eq(((SymbolTable)this).currentPeriod());
         if (!((SymbolTable)this).isValidForBaseClasses(period)) {
            tpe.parentsCache_$eq(tpe.parentsImpl());
         } else if (tpe.parentsCache() == null) {
            tpe.parentsCache_$eq(new .colon.colon(((Definitions)this).definitions().AnyTpe(), scala.collection.immutable.Nil..MODULE$));
         }
      }
   }

   // $FF: synthetic method
   static void defineBaseTypeSeqOfTypeRef$(final Types $this, final TypeRef tpe) {
      $this.defineBaseTypeSeqOfTypeRef(tpe);
   }

   default void defineBaseTypeSeqOfTypeRef(final TypeRef tpe) {
      int period = tpe.baseTypeSeqPeriod();
      if (period != ((SymbolTable)this).currentPeriod()) {
         tpe.baseTypeSeqPeriod_$eq(((SymbolTable)this).currentPeriod());
         if (!((SymbolTable)this).isValidForBaseClasses(period)) {
            MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var50 = MutableSettings$.MODULE$;
            MutableSettings SettingsOps_settings = ((SymbolTable)this).settings();
            MutableSettings var51 = SettingsOps_settings;
            SettingsOps_settings = null;
            MutableSettings areStatisticsEnabled$extension_$this = var51;
            boolean var52 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            areStatisticsEnabled$extension_$this = null;
            if (var52) {
               Statistics var53 = ((SymbolTable)this).statistics();
               Statistics.SubCounter incCounter_c = ((TypesStats)((SymbolTable)this).statistics()).typerefBaseTypeSeqCount();
               if (var53 == null) {
                  throw null;
               }

               Statistics incCounter_this = var53;
               MutableSettings.SettingsOps$ var54 = MutableSettings.SettingsOps$.MODULE$;
               MutableSettings$ var55 = MutableSettings$.MODULE$;
               MutableSettings incCounter_enabled_SettingsOps_settings = incCounter_this.scala$reflect$internal$util$Statistics$$settings;
               MutableSettings var56 = incCounter_enabled_SettingsOps_settings;
               incCounter_enabled_SettingsOps_settings = null;
               MutableSettings incCounter_enabled_areStatisticsEnabled$extension_$this = var56;
               boolean var57 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(incCounter_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
               incCounter_enabled_areStatisticsEnabled$extension_$this = null;
               if (var57 && incCounter_c != null) {
                  ((Statistics.Counter)incCounter_c).value_$eq(((Statistics.Counter)incCounter_c).value() + 1);
               }

               Object var33 = null;
               Object var34 = null;
            }

            MutableSettings.SettingsOps$ var58 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var59 = MutableSettings$.MODULE$;
            MutableSettings SettingsOps_settings = ((SymbolTable)this).settings();
            MutableSettings var60 = SettingsOps_settings;
            SettingsOps_settings = null;
            MutableSettings areStatisticsEnabled$extension_$this = var60;
            boolean var61 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            areStatisticsEnabled$extension_$this = null;
            Tuple2 var62;
            if (var61) {
               Statistics var63 = ((SymbolTable)this).statistics();
               Statistics.TimerStack pushTimer_timers = ((TypesStats)((SymbolTable)this).statistics()).typeOpsStack();
               if (var63 == null) {
                  throw null;
               }

               Statistics pushTimer_this = var63;
               MutableSettings.SettingsOps$ var64 = MutableSettings.SettingsOps$.MODULE$;
               MutableSettings$ var65 = MutableSettings$.MODULE$;
               MutableSettings pushTimer_enabled_SettingsOps_settings = pushTimer_this.scala$reflect$internal$util$Statistics$$settings;
               MutableSettings var66 = pushTimer_enabled_SettingsOps_settings;
               pushTimer_enabled_SettingsOps_settings = null;
               MutableSettings pushTimer_enabled_areStatisticsEnabled$extension_$this = var66;
               boolean var67 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(pushTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
               pushTimer_enabled_areStatisticsEnabled$extension_$this = null;
               var62 = var67 && pushTimer_timers != null ? pushTimer_timers.push($anonfun$defineBaseTypeSeqOfTypeRef$1(this)) : null;
               Object var38 = null;
               Object var39 = null;
            } else {
               var62 = null;
            }

            Tuple2 start = var62;

            try {
               tpe.baseTypeSeqCache_$eq(((BaseTypeSeqs)this).undetBaseTypeSeq());
               tpe.baseTypeSeqCache_$eq(tpe.baseTypeSeqImpl());
            } finally {
               MutableSettings.SettingsOps$ var68 = MutableSettings.SettingsOps$.MODULE$;
               MutableSettings$ var69 = MutableSettings$.MODULE$;
               MutableSettings SettingsOps_settings = ((SymbolTable)this).settings();
               MutableSettings var70 = SettingsOps_settings;
               SettingsOps_settings = null;
               MutableSettings areStatisticsEnabled$extension_$this = var70;
               boolean var71 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
               areStatisticsEnabled$extension_$this = null;
               if (var71) {
                  Statistics var72 = ((SymbolTable)this).statistics();
                  Statistics.TimerStack popTimer_timers = ((TypesStats)((SymbolTable)this).statistics()).typeOpsStack();
                  if (var72 == null) {
                     throw null;
                  }

                  Statistics popTimer_this = var72;
                  MutableSettings.SettingsOps$ var73 = MutableSettings.SettingsOps$.MODULE$;
                  MutableSettings$ var74 = MutableSettings$.MODULE$;
                  MutableSettings popTimer_enabled_SettingsOps_settings = popTimer_this.scala$reflect$internal$util$Statistics$$settings;
                  MutableSettings var75 = popTimer_enabled_SettingsOps_settings;
                  popTimer_enabled_SettingsOps_settings = null;
                  MutableSettings popTimer_enabled_areStatisticsEnabled$extension_$this = var75;
                  boolean var76 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(popTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
                  popTimer_enabled_areStatisticsEnabled$extension_$this = null;
                  if (var76 && popTimer_timers != null) {
                     popTimer_timers.pop(start);
                  }

                  Object var43 = null;
                  Object var44 = null;
               }

            }
         }
      }

      BaseTypeSeqs.BaseTypeSeq var77 = tpe.baseTypeSeqCache();
      BaseTypeSeqs.BaseTypeSeq var5 = ((BaseTypeSeqs)this).undetBaseTypeSeq();
      if (var77 == null) {
         if (var5 != null) {
            return;
         }
      } else if (!var77.equals(var5)) {
         return;
      }

      throw (SymbolTable)this.new TypeError((new StringBuilder(37)).append("illegal cyclic inheritance involving ").append(tpe.sym()).toString());
   }

   default Type newExistentialType(final List quantified, final Type underlying) {
      while(!quantified.isEmpty()) {
         if (!(underlying instanceof ExistentialType)) {
            return (SymbolTable)this.new ExistentialType(quantified, underlying);
         }

         ExistentialType var3 = (ExistentialType)underlying;
         List qs = var3.quantified();
         Type restpe = var3.underlying();
         SymbolTable var10000 = (SymbolTable)this;
         List var10001 = qs.$colon$colon$colon(quantified);
         underlying = restpe;
         quantified = var10001;
         this = var10000;
      }

      return underlying;
   }

   // $FF: synthetic method
   static Type overloadedType$(final Types $this, final Type pre, final List alternatives) {
      return $this.overloadedType(pre, alternatives);
   }

   default Type overloadedType(final Type pre, final List alternatives) {
      if (scala.collection.immutable.Nil..MODULE$.equals(alternatives)) {
         return this.NoType();
      } else {
         if (alternatives instanceof .colon.colon) {
            .colon.colon var3 = (.colon.colon)alternatives;
            Symbols.Symbol alt = (Symbols.Symbol)var3.head();
            List var5 = var3.next$access$1();
            if (scala.collection.immutable.Nil..MODULE$.equals(var5)) {
               return pre.memberType(alt);
            }
         }

         return (SymbolTable)this.new OverloadedType(pre, alternatives);
      }
   }

   // $FF: synthetic method
   static Type annotatedType$(final Types $this, final List annots, final Type underlying) {
      return $this.annotatedType(annots, underlying);
   }

   default Type annotatedType(final List annots, final Type underlying) {
      return (Type)(annots.isEmpty() ? underlying : (SymbolTable)this.new AnnotatedType(annots, underlying));
   }

   private Symbols.Symbol rebind(final Type pre, final Symbols.Symbol sym) {
      if (sym.isOverridableMember()) {
         Symbols.Symbol var10000 = sym.owner();
         Symbols.Symbol var3 = pre.typeSymbol();
         if (var10000 == null) {
            if (var3 == null) {
               return sym;
            }
         } else if (var10000.equals(var3)) {
            return sym;
         }

         var10000 = pre.nonPrivateMember(sym.name()).suchThat((symx) -> BoxesRunTime.boxToBoolean($anonfun$rebind$1(this, symx)));
         if (var10000 == null) {
            throw null;
         } else {
            Symbols.Symbol orElse_this = var10000;
            if (orElse_this != orElse_this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) {
               return orElse_this;
            } else {
               return sym;
            }
         }
      } else {
         return sym;
      }
   }

   private Type removeSuper(final Type tp, final Symbols.Symbol sym) {
      if (tp instanceof SuperType) {
         Type thistp = ((SuperType)tp).thistpe();
         return !sym.isEffectivelyFinal() && !sym.isDeferred() ? tp : thistp;
      } else {
         return tp;
      }
   }

   // $FF: synthetic method
   static Type singleType$(final Types $this, final Type pre, final Symbols.Symbol sym) {
      return $this.singleType(pre, sym);
   }

   default Type singleType(final Type pre, final Symbols.Symbol sym) {
      if (((SymbolTable)this).phase().erasedTypes()) {
         if (sym == null) {
            throw null;
         } else {
            return sym.tpe_$times().resultType();
         }
      } else if (sym.isRootPackage()) {
         return this.ThisType().apply(sym.moduleClass());
      } else {
         Symbols.Symbol sym1 = this.rebind(pre, sym);
         Type pre1 = this.removeSuper(pre, sym1);
         if (pre1 != pre) {
            sym1 = this.rebind(pre1, sym1);
         }

         return this.SingleType().apply(pre1, sym1);
      }
   }

   // $FF: synthetic method
   static Type refinedType$(final Types $this, final List parents, final Symbols.Symbol owner, final Scopes.Scope decls, final Position pos) {
      return $this.refinedType(parents, owner, decls, pos);
   }

   default Type refinedType(final List parents, final Symbols.Symbol owner, final Scopes.Scope decls, final Position pos) {
      if (((SymbolTable)this).phase().erasedTypes()) {
         return parents.isEmpty() ? ((Definitions)this).definitions().ObjectTpe() : (Type)parents.head();
      } else if (owner == null) {
         throw null;
      } else {
         Symbols.RefinementClassSymbol clazz = owner.createRefinementClassSymbol(pos, 0L);
         RefinedType result = this.RefinedType().apply(parents, decls, clazz);
         clazz.setInfo(result);
         return result;
      }
   }

   // $FF: synthetic method
   static Type refinedType$(final Types $this, final List parents, final Symbols.Symbol owner) {
      return $this.refinedType(parents, owner);
   }

   default Type refinedType(final List parents, final Symbols.Symbol owner) {
      return this.refinedType(parents, owner, ((Scopes)this).newScope(), owner.pos());
   }

   ReusableInstance scala$reflect$internal$Types$$copyRefinedTypeSSM();

   // $FF: synthetic method
   static Type copyRefinedType$(final Types $this, final RefinedType original, final List parents, final Scopes.Scope decls, final Symbols.Symbol owner) {
      return $this.copyRefinedType(original, parents, decls, owner);
   }

   default Type copyRefinedType(final RefinedType original, final List parents, final Scopes.Scope decls, final Symbols.Symbol owner) {
      if (parents == original.parents() && decls == original.decls() && owner == null) {
         return original;
      } else {
         Symbols.Symbol newOwner = owner != null ? owner : original.typeSymbol().owner();
         Type result = this.isIntersectionTypeForLazyBaseType(original) ? this.intersectionTypeForLazyBaseType(parents) : this.refinedType(parents, newOwner);
         if (!decls.isEmpty()) {
            List syms1 = decls.toList();
            if (syms1 == null) {
               throw null;
            }

            for(List foreach_these = syms1; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               Symbols.Symbol var15 = (Symbols.Symbol)foreach_these.head();
               $anonfun$copyRefinedType$1(result, var15);
            }

            Object var19 = null;
            List syms2 = result.decls().toList();
            Type resultThis = result.typeSymbol().thisType();
            TypeMaps.SubstThisMap substThisMap = (SymbolTable)this.new SubstThisMap(original.typeSymbol(), resultThis);
            ReusableInstance var10000 = this.scala$reflect$internal$Types$$copyRefinedTypeSSM();
            if (var10000 == null) {
               throw null;
            }

            ReusableInstance using_this = var10000;
            if (using_this.scala$reflect$internal$util$ReusableInstance$$cache == null) {
               TypeMaps.SubstSymMap var16 = (TypeMaps.SubstSymMap)using_this.scala$reflect$internal$util$ReusableInstance$$make.apply();
               $anonfun$copyRefinedType$2(syms1, syms2, substThisMap, var16);
            } else {
               int var22 = using_this.scala$reflect$internal$util$ReusableInstance$$taken;
               ArrayBuffer var10001 = using_this.scala$reflect$internal$util$ReusableInstance$$cache;
               if (var10001 == null) {
                  throw null;
               }

               if (var22 == SeqOps.size$(var10001)) {
                  ArrayBuffer var23 = using_this.scala$reflect$internal$util$ReusableInstance$$cache;
                  Object using_$plus$eq_elem = using_this.scala$reflect$internal$util$ReusableInstance$$make.apply();
                  if (var23 == null) {
                     throw null;
                  }

                  var23.addOne(using_$plus$eq_elem);
                  using_$plus$eq_elem = null;
               }

               ++using_this.scala$reflect$internal$util$ReusableInstance$$taken;

               try {
                  TypeMaps.SubstSymMap var21 = (TypeMaps.SubstSymMap)using_this.scala$reflect$internal$util$ReusableInstance$$cache.apply(using_this.scala$reflect$internal$util$ReusableInstance$$taken - 1);
                  $anonfun$copyRefinedType$2(syms1, syms2, substThisMap, var21);
               } finally {
                  --using_this.scala$reflect$internal$util$ReusableInstance$$taken;
               }
            }
         }

         return result;
      }
   }

   // $FF: synthetic method
   static Symbols.Symbol copyRefinedType$default$4$(final Types $this) {
      return $this.copyRefinedType$default$4();
   }

   default Symbols.Symbol copyRefinedType$default$4() {
      return null;
   }

   default Type typeRef(final Type pre, final Symbols.Symbol sym, final List args) {
      while(true) {
         Symbols.Symbol sym1 = sym.isAbstractType() ? ((Types)this).rebind(pre, sym) : sym;
         if (sym1.isAliasType() && ((Types)this).sameLength(sym1.info().typeParams(), args) && !sym1.lockOK()) {
            throw (SymbolTable)this.new RecoverableCyclicReference(sym1);
         }

         Type var10000;
         label38: {
            if (pre instanceof SuperType) {
               SuperType var6 = (SuperType)pre;
               if (sym1.isEffectivelyFinal() || sym1.isDeferred()) {
                  var10000 = var6.thistpe();
                  break label38;
               }
            }

            var10000 = pre;
         }

         Type pre1 = var10000;
         if (pre == pre1) {
            return ((Types)this).TypeRef().apply(pre, sym1, args);
         }

         if (sym1.isAbstractType() && !sym1.isClass()) {
            SymbolTable var8 = (SymbolTable)this;
            Symbols.Symbol var10002 = ((Types)this).rebind(pre1, sym1);
            args = args;
            sym = var10002;
            pre = pre1;
            this = var8;
         } else {
            SymbolTable var7 = (SymbolTable)this;
            args = args;
            sym = sym1;
            pre = pre1;
            this = var7;
         }
      }
   }

   // $FF: synthetic method
   static Type copyTypeRef$(final Types $this, final Type tp, final Type pre, final Symbols.Symbol sym, final List args) {
      return $this.copyTypeRef(tp, pre, sym, args);
   }

   default Type copyTypeRef(final Type tp, final Type pre, final Symbols.Symbol sym, final List args) {
      if (tp instanceof TypeRef) {
         TypeRef var5 = (TypeRef)tp;
         Type pre0 = var5.pre();
         Symbols.Symbol sym0 = var5.sym();
         if (pre == null) {
            if (pre0 != null) {
               return this.typeRef(pre, sym, args);
            }
         } else if (!pre.equals(pre0)) {
            return this.typeRef(pre, sym, args);
         }

         Names.Name var10000 = sym0.name();
         Names.Name var8 = sym.name();
         if (var10000 == null) {
            if (var8 != null) {
               return this.typeRef(pre, sym, args);
            }
         } else if (!var10000.equals(var8)) {
            return this.typeRef(pre, sym, args);
         }

         if (sym.isAliasType() && this.sameLength(sym.info().typeParams(), args) && !sym.lockOK()) {
            throw (SymbolTable)this.new RecoverableCyclicReference(sym);
         } else if (args == scala.collection.immutable.Nil..MODULE$ && pre == this.NoPrefix()) {
            return sym.tpeHK();
         } else {
            return this.TypeRef().apply(pre, sym, args);
         }
      } else {
         return this.typeRef(pre, sym, args);
      }
   }

   // $FF: synthetic method
   static Type copyMethodType$(final Types $this, final Type tp, final List params, final Type restpe) {
      return $this.copyMethodType(tp, params, restpe);
   }

   default Type copyMethodType(final Type tp, final List params, final Type restpe) {
      return (SymbolTable)this.new MethodType(params, restpe);
   }

   // $FF: synthetic method
   static Type intersectionType$(final Types $this, final List tps, final Symbols.Symbol owner) {
      return $this.intersectionType(tps, owner);
   }

   default Type intersectionType(final List tps, final Symbols.Symbol owner) {
      if (tps instanceof .colon.colon) {
         .colon.colon var3 = (.colon.colon)tps;
         Type tp = (Type)var3.head();
         List var5 = var3.next$access$1();
         if (scala.collection.immutable.Nil..MODULE$.equals(var5)) {
            return tp;
         }
      }

      return this.refinedType(tps, owner);
   }

   // $FF: synthetic method
   static Type intersectionType$(final Types $this, final List tps) {
      return $this.intersectionType(tps);
   }

   default Type intersectionType(final List tps) {
      if (tps instanceof .colon.colon) {
         .colon.colon var2 = (.colon.colon)tps;
         Type tp = (Type)var2.head();
         List var4 = var2.next$access$1();
         if (scala.collection.immutable.Nil..MODULE$.equals(var4)) {
            return tp;
         }
      }

      return this.refinedType(tps, this.commonOwner(tps));
   }

   // $FF: synthetic method
   static Type intersectionTypeForLazyBaseType$(final Types $this, final List tps) {
      return $this.intersectionTypeForLazyBaseType(tps);
   }

   default Type intersectionTypeForLazyBaseType(final List tps) {
      if (tps instanceof .colon.colon) {
         .colon.colon var2 = (.colon.colon)tps;
         Type tp = (Type)var2.head();
         List var4 = var2.next$access$1();
         if (scala.collection.immutable.Nil..MODULE$.equals(var4)) {
            return tp;
         }
      }

      return this.RefinedType().apply(tps, ((Scopes)this).newScope(), ((Type)tps.head()).typeSymbolDirect());
   }

   // $FF: synthetic method
   static boolean isIntersectionTypeForLazyBaseType$(final Types $this, final RefinedType tp) {
      return $this.isIntersectionTypeForLazyBaseType(tp);
   }

   default boolean isIntersectionTypeForLazyBaseType(final RefinedType tp) {
      List var2 = tp.parents();
      if (var2 instanceof .colon.colon) {
         Type head = (Type)((.colon.colon)var2).head();
         return tp.typeSymbolDirect() == head.typeSymbolDirect();
      } else {
         return false;
      }
   }

   // $FF: synthetic method
   static Type appliedType$(final Types $this, final Type tycon, final List args) {
      return $this.appliedType(tycon, args);
   }

   default Type appliedType(final Type tycon, final List args) {
      if (args.isEmpty()) {
         return tycon;
      } else {
         boolean var3 = false;
         TypeRef var4 = null;
         if (tycon instanceof TypeRef) {
            var3 = true;
            var4 = (TypeRef)tycon;
            Type pre = var4.pre();
            Symbols.Symbol sym = var4.sym();
            boolean var38;
            if (((Definitions)this).definitions().NothingClass().equals(sym)) {
               var38 = true;
            } else {
               label107: {
                  label95: {
                     Symbols.ClassSymbol var10000 = ((Definitions)this).definitions().AnyClass();
                     if (var10000 == null) {
                        if (sym == null) {
                           break label95;
                        }
                     } else if (var10000.equals(sym)) {
                        break label95;
                     }

                     var38 = false;
                     break label107;
                  }

                  var38 = true;
               }
            }

            if (var38) {
               return this.copyTypeRef(tycon, pre, sym, scala.collection.immutable.Nil..MODULE$);
            }
         }

         if (var3) {
            Type pre = var4.pre();
            Symbols.Symbol sym = var4.sym();
            List var9 = var4.args();
            if (scala.collection.immutable.Nil..MODULE$.equals(var9)) {
               return this.copyTypeRef(tycon, pre, sym, args);
            }
         }

         if (var3) {
            Type pre = var4.pre();
            Symbols.Symbol sym = var4.sym();
            List bogons = var4.args();
            ((SymbolTable)this).devWarning(() -> (new StringBuilder(31)).append("Dropping ").append(bogons).append(" from ").append(tycon).append(" in appliedType.").toString());
            return this.copyTypeRef(tycon, pre, sym, args);
         } else if (tycon instanceof PolyType) {
            PolyType var13 = (PolyType)tycon;
            List tparams = var13.typeParams();
            return var13.resultType().instantiateTypeParams(tparams, args);
         } else if (tycon instanceof ExistentialType) {
            ExistentialType var15 = (ExistentialType)tycon;
            List tparams = var15.quantified();
            Type restpe = var15.underlying();
            return this.newExistentialType(tparams, this.appliedType(restpe, args));
         } else if (tycon instanceof SingletonType) {
            SingletonType var18 = (SingletonType)tycon;
            return this.appliedType(var18.widen(), args);
         } else if (tycon instanceof RefinedType) {
            RefinedType var19 = (RefinedType)tycon;
            List parents = var19.parents();
            Scopes.Scope decls = var19.decls();
            RefinedType var39 = new RefinedType;
            SymbolTable var10002 = (SymbolTable)this;
            if (parents == null) {
               throw null;
            } else {
               Object var10003;
               if (parents == scala.collection.immutable.Nil..MODULE$) {
                  var10003 = scala.collection.immutable.Nil..MODULE$;
               } else {
                  Type var32 = (Type)parents.head();
                  .colon.colon map_h = new .colon.colon(this.appliedType(var32, args), scala.collection.immutable.Nil..MODULE$);
                  .colon.colon map_t = map_h;

                  for(List map_rest = (List)parents.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                     var32 = (Type)map_rest.head();
                     .colon.colon map_nx = new .colon.colon(this.appliedType(var32, args), scala.collection.immutable.Nil..MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var10003 = map_h;
               }

               Object var33 = null;
               Object var34 = null;
               Object var35 = null;
               Object var36 = null;
               var39.<init>((List)var10003, decls);
               return var39;
            }
         } else if (tycon instanceof TypeBounds) {
            TypeBounds var22 = (TypeBounds)tycon;
            Type lo = var22.lo();
            Type hi = var22.hi();
            return this.TypeBounds().apply(this.appliedType(lo, args), this.appliedType(hi, args));
         } else if (tycon instanceof TypeVar) {
            return ((TypeVar)tycon).applyArgs(args);
         } else if (tycon instanceof AnnotatedType) {
            AnnotatedType var25 = (AnnotatedType)tycon;
            List annots = var25.annotations();
            Type underlying = var25.underlying();
            return (SymbolTable)this.new AnnotatedType(annots, this.appliedType(underlying, args));
         } else if (this.ErrorType().equals(tycon) ? true : this.WildcardType().equals(tycon)) {
            return tycon;
         } else {
            throw ((Reporting)this).abort(((TypeDebugging)this).debugString(tycon));
         }
      }
   }

   // $FF: synthetic method
   static Type appliedType$(final Types $this, final Type tycon, final Seq args) {
      return $this.appliedType(tycon, args);
   }

   default Type appliedType(final Type tycon, final Seq args) {
      return this.appliedType(tycon, args.toList());
   }

   // $FF: synthetic method
   static Type appliedType$(final Types $this, final Symbols.Symbol tyconSym, final List args) {
      return $this.appliedType(tyconSym, args);
   }

   default Type appliedType(final Symbols.Symbol tyconSym, final List args) {
      return this.appliedType(tyconSym.typeConstructor(), args);
   }

   // $FF: synthetic method
   static Type appliedType$(final Types $this, final Symbols.Symbol tyconSym, final Seq args) {
      return $this.appliedType(tyconSym, args);
   }

   default Type appliedType(final Symbols.Symbol tyconSym, final Seq args) {
      return this.appliedType(tyconSym.typeConstructor(), args.toList());
   }

   // $FF: synthetic method
   static Type genPolyType$(final Types $this, final List params, final Type tpe) {
      return $this.genPolyType(params, tpe);
   }

   default Type genPolyType(final List params, final Type tpe) {
      return this.GenPolyType().apply(params, tpe);
   }

   // $FF: synthetic method
   static Type polyType$(final Types $this, final List params, final Type tpe) {
      return $this.polyType(params, tpe);
   }

   /** @deprecated */
   default Type polyType(final List params, final Type tpe) {
      return this.GenPolyType().apply(params, tpe);
   }

   // $FF: synthetic method
   static Type typeFun$(final Types $this, final List tps, final Type body) {
      return $this.typeFun(tps, body);
   }

   default Type typeFun(final List tps, final Type body) {
      return (SymbolTable)this.new PolyType(tps, body);
   }

   // $FF: synthetic method
   static Type extensionMethInfo$(final Types $this, final Symbols.Symbol currentOwner, final Symbols.Symbol extensionMeth, final Type origInfo, final Symbols.Symbol clazz) {
      return $this.extensionMethInfo(currentOwner, extensionMeth, origInfo, clazz);
   }

   default Type extensionMethInfo(final Symbols.Symbol currentOwner, final Symbols.Symbol extensionMeth, final Type origInfo, final Symbols.Symbol clazz) {
      Type var5 = origInfo.cloneInfo(extensionMeth);
      if (var5 != null) {
         Some var6 = this.GenPolyType().unapply(var5);
         if (!var6.isEmpty()) {
            List tparamsFromMethod = (List)((Tuple2)var6.value())._1();
            Type methodResult = (Type)((Tuple2)var6.value())._2();
            List var10000 = ((Symbols)this).cloneSymbolsAtOwner(clazz.typeParams(), extensionMeth);
            if (var10000 == null) {
               throw null;
            }

            List map_this = var10000;
            Object var42;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               var42 = scala.collection.immutable.Nil..MODULE$;
            } else {
               .colon.colon map_h = new .colon.colon(((Symbols.Symbol)map_this.head()).resetFlag(196608L), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  .colon.colon map_nx = new .colon.colon(((Symbols.Symbol)map_rest.head()).resetFlag(196608L), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var42 = map_h;
            }

            Object var31 = null;
            Object var32 = null;
            Object var33 = null;
            Object var34 = null;
            Object var35 = null;
            List tparamsFromClass = (List)var42;
            Object var10002;
            if (tparamsFromClass == scala.collection.immutable.Nil..MODULE$) {
               var10002 = scala.collection.immutable.Nil..MODULE$;
            } else {
               .colon.colon map_h = new .colon.colon(((Symbols.Symbol)tparamsFromClass.head()).tpeHK(), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)tparamsFromClass.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  .colon.colon map_nx = new .colon.colon(((Symbols.Symbol)map_rest.head()).tpeHK(), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var10002 = map_h;
            }

            Object var36 = null;
            Object var37 = null;
            Object var38 = null;
            Object var39 = null;
            Type thisParamType = this.appliedType((Symbols.Symbol)clazz, (List)var10002);
            Names.TermName var43 = ((StdNames)this).nme().SELF();
            Position var10001 = extensionMeth.pos();
            long newValueParameter_newFlags = 0L;
            Position newValueParameter_pos = var10001;
            Names.TermName newValueParameter_name = var43;
            Symbols.TermSymbol var44 = extensionMeth.newTermSymbol(newValueParameter_name, newValueParameter_pos, 8192L | newValueParameter_newFlags);
            newValueParameter_name = null;
            newValueParameter_pos = null;
            Symbols.TermSymbol thisParam = (Symbols.TermSymbol)var44.setInfo(thisParamType);
            MethodType resultType = (SymbolTable)this.new MethodType(new .colon.colon(thisParam, scala.collection.immutable.Nil..MODULE$), ((Definitions)this).definitions().dropNullaryMethod(methodResult));
            Type selfParamType = this.singleType(currentOwner.companionModule().thisType(), thisParam);
            List tparams = tparamsFromClass.$colon$colon$colon(tparamsFromMethod);
            if (tparams == null) {
               throw null;
            }

            for(List foreach_these = tparams; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               Symbols.Symbol var29 = (Symbols.Symbol)foreach_these.head();
               $anonfun$extensionMethInfo$3(clazz, tparamsFromClass, var29);
            }

            Object var30 = null;
            return this.GenPolyType().apply(tparams, fixres$1(resultType, clazz, selfParamType, tparamsFromClass));
         }
      }

      throw new MatchError(var5);
   }

   // $FF: synthetic method
   static Type existentialAbstraction$(final Types $this, final List tparams, final Type tpe0, final boolean flipVariance) {
      return $this.existentialAbstraction(tparams, tpe0, flipVariance);
   }

   default Type existentialAbstraction(final List tparams, final Type tpe0, final boolean flipVariance) {
      if (!tparams.isEmpty() && tpe0 != this.NoType()) {
         Type tpe = this.normalizeAliases().apply(tpe0);
         TypeMaps.ExistentialExtrapolation extrapolation = (SymbolTable)this.new ExistentialExtrapolation(tparams);
         if (flipVariance) {
            extrapolation.variance_$eq(Variance$.MODULE$.Contravariant());
         }

         Type tpe1 = extrapolation.extrapolate(tpe);
         return this.newExistentialType(this.transitiveReferredFrom$1(tpe1, tparams), tpe1);
      } else {
         return tpe0;
      }
   }

   // $FF: synthetic method
   static boolean existentialAbstraction$default$3$(final Types $this) {
      return $this.existentialAbstraction$default$3();
   }

   default boolean existentialAbstraction$default$3() {
      return false;
   }

   int scala$reflect$internal$Types$$initialUniquesCapacity();

   WeakHashSet scala$reflect$internal$Types$$uniques();

   void scala$reflect$internal$Types$$uniques_$eq(final WeakHashSet x$1);

   int scala$reflect$internal$Types$$uniqueRunId();

   void scala$reflect$internal$Types$$uniqueRunId_$eq(final int x$1);

   // $FF: synthetic method
   static int howManyUniqueTypes$(final Types $this) {
      return $this.howManyUniqueTypes();
   }

   default int howManyUniqueTypes() {
      return this.scala$reflect$internal$Types$$uniques() == null ? 0 : this.scala$reflect$internal$Types$$uniques().size();
   }

   // $FF: synthetic method
   static Type unique$(final Types $this, final Type tp) {
      return $this.unique(tp);
   }

   default Type unique(final Type tp) {
      if (this.scala$reflect$internal$Types$$uniqueRunId() != ((SymbolTable)this).currentRunId()) {
         this.scala$reflect$internal$Types$$uniques_$eq(WeakHashSet$.MODULE$.apply(this.scala$reflect$internal$Types$$initialUniquesCapacity(), WeakHashSet$.MODULE$.defaultLoadFactor()));
         this.scala$reflect$internal$Types$$uniqueRunId_$eq(((SymbolTable)this).currentRunId());
      }

      return (Type)this.scala$reflect$internal$Types$$uniques().findEntryOrUpdate(tp);
   }

   // $FF: synthetic method
   static Type elementExtract$(final Types $this, final Symbols.Symbol container, final Type tp) {
      return $this.elementExtract(container, tp);
   }

   default Type elementExtract(final Symbols.Symbol container, final Type tp) {
      SymbolTable var10000 = (SymbolTable)this;
      boolean assert_assertion = !container.isAliasType();
      SymbolTable assert_this = var10000;
      if (!assert_assertion) {
         throw assert_this.throwAssertionError(container);
      } else {
         Type var3 = this.unwrapWrapperTypes().apply(tp.baseType(container)).dealiasWiden();
         if (var3 instanceof TypeRef) {
            TypeRef var4 = (TypeRef)var3;
            Symbols.Symbol var5 = var4.sym();
            List var6 = var4.args();
            if (container.equals(var5) && var6 instanceof .colon.colon) {
               .colon.colon var7 = (.colon.colon)var6;
               Type arg = (Type)var7.head();
               List var9 = var7.next$access$1();
               if (scala.collection.immutable.Nil..MODULE$.equals(var9)) {
                  return arg;
               }
            }
         }

         return this.NoType();
      }
   }

   // $FF: synthetic method
   static Option elementExtractOption$(final Types $this, final Symbols.Symbol container, final Type tp) {
      return $this.elementExtractOption(container, tp);
   }

   default Option elementExtractOption(final Symbols.Symbol container, final Type tp) {
      Type var3 = this.elementExtract(container, tp);
      return (Option)(this.NoType().equals(var3) ? scala.None..MODULE$ : new Some(var3));
   }

   // $FF: synthetic method
   static boolean elementTest$(final Types $this, final Symbols.Symbol container, final Type tp, final Function1 f) {
      return $this.elementTest(container, tp, f);
   }

   default boolean elementTest(final Symbols.Symbol container, final Type tp, final Function1 f) {
      Type var4 = this.elementExtract(container, tp);
      return this.NoType().equals(var4) ? false : BoxesRunTime.unboxToBoolean(f.apply(var4));
   }

   // $FF: synthetic method
   static Type elementTransform$(final Types $this, final Symbols.Symbol container, final Type tp, final Function1 f) {
      return $this.elementTransform(container, tp, f);
   }

   default Type elementTransform(final Symbols.Symbol container, final Type tp, final Function1 f) {
      Type var4 = this.elementExtract(container, tp);
      return (Type)(this.NoType().equals(var4) ? this.NoType() : (Type)f.apply(var4));
   }

   // $FF: synthetic method
   static Type transparentShallowTransform$(final Types $this, final Symbols.Symbol container, final Type tp, final Function1 f) {
      return $this.transparentShallowTransform(container, tp, f);
   }

   default Type transparentShallowTransform(final Symbols.Symbol container, final Type tp, final Function1 f) {
      if (tp instanceof AnnotatedType) {
         AnnotatedType var4 = (AnnotatedType)tp;
         Type loop$2_underlying = var4.underlying();
         Type loop$2_x$1 = this.loop$2(loop$2_underlying, container, f);
         List loop$2_x$2 = var4.copy$default$1();
         return var4.copy(loop$2_x$2, loop$2_x$1);
      } else if (tp instanceof ExistentialType) {
         ExistentialType var8 = (ExistentialType)tp;
         Type loop$2_underlying = var8.underlying();
         Type loop$2_x$3 = this.loop$2(loop$2_underlying, container, f);
         List loop$2_x$4 = var8.copy$default$1();
         return var8.copy(loop$2_x$4, loop$2_x$3);
      } else if (tp instanceof PolyType) {
         PolyType var12 = (PolyType)tp;
         Type loop$2_resultType = var12.resultType();
         Type loop$2_x$5 = this.loop$2(loop$2_resultType, container, f);
         List loop$2_x$6 = var12.copy$default$1();
         return var12.copy(loop$2_x$6, loop$2_x$5);
      } else if (tp instanceof NullaryMethodType) {
         NullaryMethodType var16 = (NullaryMethodType)tp;
         Type loop$2_resultType = var16.resultType();
         return var16.copy(this.loop$2(loop$2_resultType, container, f));
      } else {
         Type var10000 = this.elementTransform(container, tp, (el) -> this.appliedType((Symbols.Symbol)container$2, (Seq)scala.runtime.ScalaRunTime..MODULE$.wrapRefArray(new Type[]{(Type)f$2.apply(el)})));
         if (var10000 == null) {
            throw null;
         } else {
            Type loop$2_orElse_this = var10000;
            return loop$2_orElse_this != loop$2_orElse_this.scala$reflect$internal$Types$Type$$$outer().NoType() ? loop$2_orElse_this : (Type)f.apply(tp);
         }
      }
   }

   // $FF: synthetic method
   static Type repackExistential$(final Types $this, final Type tp) {
      return $this.repackExistential(tp);
   }

   default Type repackExistential(final Type tp) {
      NoType$ var2 = this.NoType();
      if (tp == null) {
         if (var2 == null) {
            return tp;
         }
      } else if (tp.equals(var2)) {
         return tp;
      }

      return this.existentialAbstraction(this.existentialsInType(tp), tp, this.existentialAbstraction$default$3());
   }

   // $FF: synthetic method
   static boolean containsExistential$(final Types $this, final Type tpe) {
      return $this.containsExistential(tpe);
   }

   default boolean containsExistential(final Type tpe) {
      return tpe.exists((x$60) -> BoxesRunTime.boxToBoolean($anonfun$containsExistential$1(x$60)));
   }

   // $FF: synthetic method
   static List existentialsInType$(final Types $this, final Type tpe) {
      return $this.existentialsInType(tpe);
   }

   default List existentialsInType(final Type tpe) {
      return tpe.withFilter((x$61) -> BoxesRunTime.boxToBoolean($anonfun$existentialsInType$1(x$61))).map((x$62) -> x$62.typeSymbol());
   }

   // $FF: synthetic method
   static List typeParamsToExistentials$(final Types $this, final Symbols.Symbol clazz, final List tparams) {
      return $this.typeParamsToExistentials(clazz, tparams);
   }

   default List typeParamsToExistentials(final Symbols.Symbol clazz, final List tparams) {
      if (tparams == null) {
         throw null;
      } else {
         Object var10000;
         if (tparams == scala.collection.immutable.Nil..MODULE$) {
            var10000 = scala.collection.immutable.Nil..MODULE$;
         } else {
            Symbols.Symbol var9 = (Symbols.Symbol)tparams.head();
            .colon.colon map_h = new .colon.colon($anonfun$typeParamsToExistentials$1(clazz, var9), scala.collection.immutable.Nil..MODULE$);
            .colon.colon map_t = map_h;

            for(List map_rest = (List)tparams.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               var9 = (Symbols.Symbol)map_rest.head();
               .colon.colon map_nx = new .colon.colon($anonfun$typeParamsToExistentials$1(clazz, var9), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            var10000 = map_h;
         }

         Object var10 = null;
         Object var11 = null;
         Object var12 = null;
         Object var13 = null;
         List eparams = (List)var10000;

         for(List foreach_these = eparams; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
            Symbols.TypeSymbol var15 = (Symbols.TypeSymbol)((Symbols.TypeSymbol)foreach_these.head()).substInfo(tparams, eparams);
         }

         return eparams;
      }
   }

   // $FF: synthetic method
   static List typeParamsToExistentials$(final Types $this, final Symbols.Symbol clazz) {
      return $this.typeParamsToExistentials(clazz);
   }

   default List typeParamsToExistentials(final Symbols.Symbol clazz) {
      return this.typeParamsToExistentials(clazz, clazz.typeParams());
   }

   // $FF: synthetic method
   static boolean isRawIfWithoutArgs$(final Types $this, final Symbols.Symbol sym) {
      return $this.isRawIfWithoutArgs(sym);
   }

   default boolean isRawIfWithoutArgs(final Symbols.Symbol sym) {
      return sym.isClass() && !sym.typeParams().isEmpty() && sym.isJavaDefined();
   }

   // $FF: synthetic method
   static boolean isRawType$(final Types $this, final Type tp) {
      return $this.isRawType(tp);
   }

   default boolean isRawType(final Type tp) {
      if (!((SymbolTable)this).phase().erasedTypes()) {
         boolean var10000;
         label16: {
            if (tp instanceof TypeRef) {
               TypeRef var2 = (TypeRef)tp;
               Symbols.Symbol sym = var2.sym();
               List var4 = var2.args();
               if (scala.collection.immutable.Nil..MODULE$.equals(var4)) {
                  var10000 = this.isRawIfWithoutArgs(sym);
                  break label16;
               }
            }

            var10000 = false;
         }

         if (var10000) {
            return true;
         }
      }

      return false;
   }

   // $FF: synthetic method
   static boolean isRaw$(final Types $this, final Symbols.Symbol sym, final List args) {
      return $this.isRaw(sym, args);
   }

   /** @deprecated */
   default boolean isRaw(final Symbols.Symbol sym, final List args) {
      return !((SymbolTable)this).phase().erasedTypes() && args.isEmpty() && this.isRawIfWithoutArgs(sym);
   }

   // $FF: synthetic method
   static TypeBounds singletonBounds$(final Types $this, final Type hi) {
      return $this.singletonBounds(hi);
   }

   default TypeBounds singletonBounds(final Type hi) {
      TypeBounds$ var10000 = this.TypeBounds();
      List var10002 = ((Definitions)this).definitions().ListOfSingletonClassTpe();
      if (var10002 == null) {
         throw null;
      } else {
         List $colon$colon_this = var10002;
         .colon.colon var4 = new .colon.colon(hi, $colon$colon_this);
         Object var3 = null;
         return var10000.upper(this.intersectionType(var4));
      }
   }

   // $FF: synthetic method
   static Type nestedMemberType$(final Types $this, final Symbols.Symbol sym, final Type pre, final Symbols.Symbol owner) {
      return $this.nestedMemberType(sym, pre, owner);
   }

   default Type nestedMemberType(final Symbols.Symbol sym, final Type pre, final Symbols.Symbol owner) {
      Type result;
      boolean var7;
      SymbolTable var10000;
      label27: {
         result = loop$3(sym.tpeHK(), owner, pre);
         var10000 = (SymbolTable)this;
         if (!sym.isTerm()) {
            label26: {
               Symbols.Symbol var10001 = result.typeSymbol();
               if (var10001 != null) {
                  if (var10001.equals(sym)) {
                     break label26;
                  }
               }

               var7 = false;
               break label27;
            }
         }

         var7 = true;
      }

      boolean assert_assertion = var7;
      SymbolTable assert_this = var10000;
      if (!assert_assertion) {
         throw assert_this.throwAssertionError($anonfun$nestedMemberType$1(result, sym));
      } else {
         return result;
      }
   }

   MissingAliasControl missingAliasException();

   // $FF: synthetic method
   static int lubDepth$(final Types $this, final List ts) {
      return $this.lubDepth(ts);
   }

   default int lubDepth(final List ts) {
      int td = this.maxDepth(ts);
      int bd = this.baseTypeSeqDepth(ts);
      return this.lubDepthAdjust(td, Depth$.MODULE$.max$extension(td, bd));
   }

   private int lubDepthAdjust(final int td, final int bd) {
      Depth var10000 = new Depth(bd);
      byte apply_depth = 3;
      Depth$ apply_this = Depth$.MODULE$;
      int var10003 = apply_depth < -3 ? apply_this.AnyDepth() : apply_depth;
      Object var9 = null;
      if (Ordered.$less$eq$(var10000, new Depth(var10003))) {
         return bd;
      } else {
         var10000 = new Depth(bd);
         byte apply_depth = 5;
         Depth$ apply_this = Depth$.MODULE$;
         var10003 = apply_depth < -3 ? apply_this.AnyDepth() : apply_depth;
         Object var10 = null;
         if (Ordered.$less$eq$(var10000, new Depth(var10003))) {
            return Depth$.MODULE$.max$extension(td, Depth$.MODULE$.decr$extension(bd, 1));
         } else {
            var10000 = new Depth(bd);
            byte apply_depth = 7;
            Depth$ apply_this = Depth$.MODULE$;
            var10003 = apply_depth < -3 ? apply_this.AnyDepth() : apply_depth;
            Object var11 = null;
            return Ordered.$less$eq$(var10000, new Depth(var10003)) ? Depth$.MODULE$.max$extension(td, Depth$.MODULE$.decr$extension(bd, 2)) : Depth$.MODULE$.max$extension(Depth$.MODULE$.decr$extension(td, 1), Depth$.MODULE$.decr$extension(bd, 3));
         }
      }
   }

   private int infoTypeDepth(final Symbols.Symbol sym) {
      return this.typeDepth(sym.info());
   }

   private int symTypeDepth(final List syms) {
      Depth$ maximumBy_this = Depth$.MODULE$;
      List maximumBy_ys = syms;

      int maximumBy_mm;
      for(maximumBy_mm = maximumBy_this.Zero(); !maximumBy_ys.isEmpty(); maximumBy_ys = (List)maximumBy_ys.tail()) {
         Symbols.Symbol var5 = (Symbols.Symbol)maximumBy_ys.head();
         maximumBy_mm = maximumBy_this.max$extension(maximumBy_mm, $anonfun$symTypeDepth$1(this, var5));
      }

      return maximumBy_mm;
   }

   private int baseTypeSeqDepth(final List tps) {
      Depth$ maximumBy_this = Depth$.MODULE$;
      List maximumBy_ys = tps;

      int maximumBy_mm;
      for(maximumBy_mm = maximumBy_this.Zero(); !maximumBy_ys.isEmpty(); maximumBy_ys = (List)maximumBy_ys.tail()) {
         maximumBy_mm = maximumBy_this.max$extension(maximumBy_mm, ((Type)maximumBy_ys.head()).baseTypeSeqDepth());
      }

      return maximumBy_mm;
   }

   // $FF: synthetic method
   static boolean isPopulated$(final Types $this, final Type tp1, final Type tp2) {
      return $this.isPopulated(tp1, tp2);
   }

   default boolean isPopulated(final Type tp1, final Type tp2) {
      return this.check$1(tp1, tp2) && this.check$1(tp2, tp1);
   }

   // $FF: synthetic method
   static Type normalizePlus$(final Types $this, final Type tp) {
      return $this.normalizePlus(tp);
   }

   default Type normalizePlus(final Type tp) {
      while(!((Types)this).isRawType(tp)) {
         Type var2 = tp.normalize();
         if (var2 instanceof SingleType) {
            SingleType var3 = (SingleType)var2;
            if (var3.typeSymbol().isModuleClass()) {
               return var3.underlying().normalize();
            }
         }

         if (var2 instanceof ThisType) {
            ThisType var4 = (ThisType)var2;
            if (var4.sym().isModuleClass()) {
               SymbolTable var10000 = (SymbolTable)this;
               tp = var4.underlying();
               this = var10000;
               continue;
            }
         }

         return var2;
      }

      return ((Types)this).rawToExistential().apply(tp);
   }

   // $FF: synthetic method
   static boolean isSameTypes$(final Types $this, final List tps1, final List tps2) {
      return $this.isSameTypes(tps1, tps2);
   }

   default boolean isSameTypes(final List tps1, final List tps2) {
      List i = tps1;

      List j;
      for(j = tps2; !i.isEmpty() && !j.isEmpty(); j = (List)j.tail()) {
         if (!((Type)i.head()).$eq$colon$eq((Type)j.head())) {
            return false;
         }

         i = (List)i.tail();
      }

      return i.isEmpty() && j.isEmpty();
   }

   // $FF: synthetic method
   static boolean isSameSymbolTypes$(final Types $this, final List syms1, final List syms2) {
      return $this.isSameSymbolTypes(syms1, syms2);
   }

   default boolean isSameSymbolTypes(final List syms1, final List syms2) {
      List i = syms1;

      List j;
      for(j = syms2; !i.isEmpty() && !j.isEmpty(); j = (List)j.tail()) {
         Symbols.Symbol var10000 = (Symbols.Symbol)i.head();
         if (var10000 == null) {
            throw null;
         }

         Type var5 = var10000.tpe_$times();
         Symbols.Symbol var10001 = (Symbols.Symbol)j.head();
         if (var10001 == null) {
            throw null;
         }

         if (!var5.$eq$colon$eq(var10001.tpe_$times())) {
            return false;
         }

         i = (List)i.tail();
      }

      return i.isEmpty() && j.isEmpty();
   }

   int scala$reflect$internal$Types$$_basetypeRecursions();

   void scala$reflect$internal$Types$$_basetypeRecursions_$eq(final int x$1);

   // $FF: synthetic method
   static int basetypeRecursions$(final Types $this) {
      return $this.basetypeRecursions();
   }

   default int basetypeRecursions() {
      return this.scala$reflect$internal$Types$$_basetypeRecursions();
   }

   // $FF: synthetic method
   static void basetypeRecursions_$eq$(final Types $this, final int value) {
      $this.basetypeRecursions_$eq(value);
   }

   default void basetypeRecursions_$eq(final int value) {
      this.scala$reflect$internal$Types$$_basetypeRecursions_$eq(value);
   }

   HashSet scala$reflect$internal$Types$$_pendingBaseTypes();

   // $FF: synthetic method
   static HashSet pendingBaseTypes$(final Types $this) {
      return $this.pendingBaseTypes();
   }

   default HashSet pendingBaseTypes() {
      return this.scala$reflect$internal$Types$$_pendingBaseTypes();
   }

   // $FF: synthetic method
   static boolean isEligibleForPrefixUnification$(final Types $this, final Type tp) {
      return $this.isEligibleForPrefixUnification(tp);
   }

   default boolean isEligibleForPrefixUnification(final Type tp) {
      while(true) {
         if (tp instanceof SingleType) {
            SingleType var2 = (SingleType)tp;
            Type pre = var2.pre();
            if (var2.sym().hasFlag(16384L)) {
               return false;
            }

            SymbolTable var6 = (SymbolTable)this;
            tp = pre;
            this = var6;
         } else {
            if (tp instanceof TypeVar) {
               TypeVar var4 = (TypeVar)tp;
               TypeConstraints.TypeConstraint constr = var4.constr();
               if (var4.instValid()) {
                  SymbolTable var10000 = (SymbolTable)this;
                  tp = constr.inst();
                  this = var10000;
                  continue;
               }

               return true;
            }

            if (tp instanceof RefinedType) {
               return true;
            }

            if (tp instanceof ThisType) {
               return ((ThisType)tp).sym().hasSelfType();
            }

            return false;
         }
      }
   }

   // $FF: synthetic method
   static boolean isErrorOrWildcard$(final Types $this, final Type tp) {
      return $this.isErrorOrWildcard(tp);
   }

   default boolean isErrorOrWildcard(final Type tp) {
      return tp == this.ErrorType() || tp == this.WildcardType();
   }

   // $FF: synthetic method
   static boolean isSingleType$(final Types $this, final Type tp) {
      return $this.isSingleType(tp);
   }

   default boolean isSingleType(final Type tp) {
      if (tp instanceof ThisType ? true : (tp instanceof SuperType ? true : tp instanceof SingleType)) {
         return true;
      } else {
         return tp instanceof LiteralType;
      }
   }

   // $FF: synthetic method
   static boolean isConstantType$(final Types $this, final Type tp) {
      return $this.isConstantType(tp);
   }

   default boolean isConstantType(final Type tp) {
      return tp instanceof FoldableConstantType;
   }

   // $FF: synthetic method
   static boolean isExistentialType$(final Types $this, final Type tp) {
      return $this.isExistentialType(tp);
   }

   default boolean isExistentialType(final Type tp) {
      while(!(tp instanceof ExistentialType)) {
         if (tp == null || tp.dealias() == tp) {
            return false;
         }

         SymbolTable var10000 = (SymbolTable)this;
         tp = tp.dealias();
         this = var10000;
      }

      return true;
   }

   // $FF: synthetic method
   static boolean isImplicitMethodType$(final Types $this, final Type tp) {
      return $this.isImplicitMethodType(tp);
   }

   default boolean isImplicitMethodType(final Type tp) {
      return tp instanceof MethodType ? ((MethodType)tp).isImplicit() : false;
   }

   // $FF: synthetic method
   static boolean isUseableAsTypeArg$(final Types $this, final Type tp) {
      return $this.isUseableAsTypeArg(tp);
   }

   default boolean isUseableAsTypeArg(final Type tp) {
      return this.isInternalTypeUsedAsTypeArg(tp) || this.isHKTypeRef(tp) || this.isValueElseNonValue(tp);
   }

   private boolean isHKTypeRef(final Type tp) {
      if (tp instanceof TypeRef) {
         List var2 = ((TypeRef)tp).args();
         if (scala.collection.immutable.Nil..MODULE$.equals(var2)) {
            return tp.isHigherKinded();
         }
      }

      return false;
   }

   // $FF: synthetic method
   static boolean isUseableAsTypeArgs$(final Types $this, final List tps) {
      return $this.isUseableAsTypeArgs(tps);
   }

   default boolean isUseableAsTypeArgs(final List tps) {
      while(!scala.collection.immutable.Nil..MODULE$.equals(tps)) {
         if (tps instanceof .colon.colon) {
            .colon.colon var2 = (.colon.colon)tps;
            Type x = (Type)var2.head();
            List xs = var2.next$access$1();
            if (((Types)this).isUseableAsTypeArg(x)) {
               SymbolTable var10000 = (SymbolTable)this;
               tps = xs;
               this = var10000;
               continue;
            }

            return false;
         }

         throw new MatchError(tps);
      }

      return true;
   }

   private boolean isInternalTypeUsedAsTypeArg(final Type tp) {
      if (this.ErrorType().equals(tp)) {
         return true;
      } else if (tp instanceof ProtoType) {
         return true;
      } else {
         return tp instanceof TypeVar;
      }
   }

   private boolean isAlwaysValueType(final Type tp) {
      if (tp instanceof RefinedType) {
         return true;
      } else if (tp instanceof ExistentialType) {
         return true;
      } else {
         if (tp instanceof ConstantType) {
            ConstantType var2 = (ConstantType)tp;
            if (!this.ConstantType().unapply(var2).isEmpty()) {
               return true;
            }
         }

         return false;
      }
   }

   private boolean isAlwaysNonValueType(final Type tp) {
      if (tp instanceof OverloadedType) {
         return true;
      } else if (tp instanceof NullaryMethodType) {
         return true;
      } else if (tp instanceof MethodType) {
         return true;
      } else {
         return tp instanceof PolyType && ((PolyType)tp).resultType() instanceof MethodType;
      }
   }

   private boolean isValueElseNonValue(final Type tp) {
      while(true) {
         boolean var2 = false;
         TypeRef var3 = null;
         if (((Types)this).isAlwaysValueType(tp)) {
            return true;
         }

         if (((Types)this).isAlwaysNonValueType(tp)) {
            return false;
         }

         if (!(tp instanceof AnnotatedType)) {
            if (tp instanceof SingleType) {
               return ((SingleType)tp).sym().isValue();
            }

            if (tp instanceof TypeRef) {
               var2 = true;
               var3 = (TypeRef)tp;
               if (tp.isHigherKinded()) {
                  return false;
               }
            }

            if (tp instanceof ThisType) {
               if (!((ThisType)tp).sym().isPackageClass()) {
                  return true;
               }

               return false;
            }

            if (var2) {
               if (!var3.sym().isPackageClass()) {
                  return true;
               }

               return false;
            }

            if (tp instanceof PolyType) {
               return true;
            }

            throw new IllegalArgumentException((new StringBuilder(47)).append("isValueElseNonValue called with third-way type ").append(tp).toString());
         }

         Type underlying = ((AnnotatedType)tp).underlying();
         SymbolTable var10000 = (SymbolTable)this;
         tp = underlying;
         this = var10000;
      }
   }

   // $FF: synthetic method
   static boolean isNonRefinementClassType$(final Types $this, final Type tpe) {
      return $this.isNonRefinementClassType(tpe);
   }

   default boolean isNonRefinementClassType(final Type tpe) {
      if (tpe instanceof SingleType) {
         return ((SingleType)tpe).sym().isModuleClass();
      } else if (tpe instanceof TypeRef) {
         Symbols.Symbol sym = ((TypeRef)tpe).sym();
         return sym.isClass() && !sym.isRefinementClass();
      } else {
         return this.ErrorType().equals(tpe);
      }
   }

   // $FF: synthetic method
   static boolean isSubArgs$(final Types $this, final List tps1, final List tps2, final List tparams, final int depth) {
      return $this.isSubArgs(tps1, tps2, tparams, depth);
   }

   default boolean isSubArgs(final List tps1, final List tps2, final List tparams, final int depth) {
      Function3 corresponds3_f = (t1, t2, tparam) -> BoxesRunTime.boxToBoolean($anonfun$isSubArgs$1(this, depth, t1, t2, tparam));
      List corresponds3_xs3 = tparams;
      List corresponds3_xs2 = tps2;
      List corresponds3_xs1 = tps1;

      while(true) {
         if (corresponds3_xs1.isEmpty()) {
            if (corresponds3_xs2.isEmpty() && corresponds3_xs3.isEmpty()) {
               return true;
            }

            return false;
         }

         if (corresponds3_xs2.isEmpty() || corresponds3_xs3.isEmpty()) {
            break;
         }

         Object var10000 = corresponds3_xs1.head();
         Object var10001 = corresponds3_xs2.head();
         Symbols.Symbol var11 = (Symbols.Symbol)corresponds3_xs3.head();
         Type var10 = (Type)var10001;
         Type var9 = (Type)var10000;
         if (!$anonfun$isSubArgs$1(this, depth, var9, var10, var11)) {
            break;
         }

         List var12 = (List)corresponds3_xs1.tail();
         List var13 = (List)corresponds3_xs2.tail();
         List var10002 = (List)corresponds3_xs3.tail();
         corresponds3_f = corresponds3_f;
         corresponds3_xs3 = var10002;
         corresponds3_xs2 = var13;
         corresponds3_xs1 = var12;
      }

      return false;
   }

   // $FF: synthetic method
   static boolean specializesSym$(final Types $this, final Type tp, final Symbols.Symbol sym, final int depth) {
      return $this.specializesSym(tp, sym, depth);
   }

   default boolean specializesSym(final Type tp, final Symbols.Symbol sym, final int depth) {
      boolean var6;
      label32: {
         label31: {
            Type var10000 = sym.info();
            WildcardType$ var5 = this.WildcardType();
            if (var10000 == null) {
               if (var5 == null) {
                  break label31;
               }
            } else if (var10000.equals(var5)) {
               break label31;
            }

            var6 = false;
            break label32;
         }

         var6 = true;
      }

      boolean isHasMember = var6;
      if (!tp.typeSymbol().isBottomSubClass(sym.owner())) {
         if (isHasMember) {
            if (tp.hasNonPrivateMember(sym.name())) {
               return true;
            }
         } else if (this.specializedBy$1(tp.nonPrivateMember(sym.name()), sym, tp, depth)) {
            return true;
         }

         return false;
      } else {
         return true;
      }
   }

   // $FF: synthetic method
   static boolean specializesSym$(final Types $this, final Type preLo, final Symbols.Symbol symLo, final Type preHi, final Symbols.Symbol symHi, final int depth) {
      return $this.specializesSym(preLo, symLo, preHi, symHi, depth);
   }

   default boolean specializesSym(final Type preLo, final Symbols.Symbol symLo, final Type preHi, final Symbols.Symbol symHi, final int depth) {
      if (symHi.isAliasType() || symHi.isTerm() || symHi.isAbstractType()) {
         label97: {
            Type symHiInfo = symHi.info();
            if (symHi.isTerm()) {
               WildcardType$ var7 = this.WildcardType();
               if (symHiInfo == null) {
                  if (var7 == null) {
                     break label97;
                  }
               } else if (symHiInfo.equals(var7)) {
                  break label97;
               }
            }

            SymbolTable var10000 = (SymbolTable)this;
            boolean require_requirement = symLo != ((Symbols)this).NoSymbol() && symHi != ((Symbols)this).NoSymbol();
            SymbolTable require_this = var10000;
            if (!require_requirement) {
               throw require_this.throwRequirementError($anonfun$specializesSym$2(preLo, symLo, preHi, symHi, depth));
            }

            Type tpHi = symHiInfo.asSeenFrom(preHi, symHi.owner()).substThis(preHi.typeSymbol(), preLo);
            Type tpLo = preLo.memberType(symLo);
            ((SymbolTable)this).debuglog(() -> (new StringBuilder(24)).append("specializesSymHi: ").append(preHi).append(" . ").append(symHi).append(" : ").append(tpHi).toString());
            ((SymbolTable)this).debuglog(() -> (new StringBuilder(24)).append("specializesSymLo: ").append(preLo).append(" . ").append(symLo).append(" : ").append(tpLo).toString());
            if (symHi.isTerm()) {
               if (this.isSubType(tpLo, tpHi, depth) && (!symHi.isStable() || symLo.isStable()) && (!symLo.hasVolatileType() || symHi.hasVolatileType() || tpHi.isWildcard())) {
                  return true;
               }

               return false;
            } else {
               if (symHi.isAbstractType()) {
                  if (tpHi.bounds().containsType(tpLo)) {
                     var10000 = (Kinds)this;
                     List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
                     .colon.colon var10001 = new .colon.colon(symHi, $colon$colon_this);
                     $colon$colon_this = null;
                     List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
                     .colon.colon var10002 = new .colon.colon(tpLo, $colon$colon_this);
                     $colon$colon_this = null;
                     if (var10000.kindsConform(var10001, var10002, preLo, symLo.owner())) {
                        return true;
                     }

                     return false;
                  }
               } else if (tpLo.$eq$colon$eq(tpHi)) {
                  return true;
               }

               return false;
            }
         }

         if (!symHi.isStable() || symLo.isStable()) {
            return true;
         }
      }

      return false;
   }

   default boolean matchesType(final Type tp1, final Type tp2, final boolean alwaysMatchSimple) {
      while(true) {
         if (tp1 instanceof MethodType) {
            MethodType var4 = (MethodType)tp1;
            List params1 = var4.params();
            Type res1 = var4.resultType();
            if (tp2 instanceof MethodType) {
               MethodType var7 = (MethodType)tp2;
               List params2 = var7.params();
               Type res2 = var7.resultType();
               if (var4.isImplicit() == var7.isImplicit() && ((Types)this).matchingParams(params1, params2) && ((Types)this).matchesQuantified$1(params1, params2, res1, res2, alwaysMatchSimple)) {
                  return true;
               }

               return false;
            }

            if (tp2 instanceof NullaryMethodType) {
               Type res2 = ((NullaryMethodType)tp2).resultType();
               if (params1.isEmpty()) {
                  SymbolTable var56 = (SymbolTable)this;
                  alwaysMatchSimple = alwaysMatchSimple;
                  tp2 = res2;
                  tp1 = res1;
                  this = var56;
               } else {
                  SymbolTable var55 = (SymbolTable)this;
                  alwaysMatchSimple = alwaysMatchSimple;
                  tp2 = res2;
                  tp1 = tp1;
                  this = var55;
               }
            } else if (tp2 instanceof ExistentialType) {
               Type res2 = ((ExistentialType)tp2).underlying();
               if (!alwaysMatchSimple) {
                  return false;
               }

               SymbolTable var54 = (SymbolTable)this;
               alwaysMatchSimple = true;
               tp2 = res2;
               tp1 = tp1;
               this = var54;
            } else {
               if (tp2 instanceof TypeRef) {
                  TypeRef var12 = (TypeRef)tp2;
                  Symbols.Symbol sym = var12.sym();
                  List var14 = var12.args();
                  if (scala.collection.immutable.Nil..MODULE$.equals(var14)) {
                     if (params1.isEmpty() && sym.isModuleClass()) {
                        SymbolTable var53 = (SymbolTable)this;
                        alwaysMatchSimple = alwaysMatchSimple;
                        tp2 = tp2;
                        tp1 = res1;
                        this = var53;
                        continue;
                     }

                     return false;
                  }
               }

               return false;
            }
         } else if (tp1 instanceof NullaryMethodType) {
            Type res1 = ((NullaryMethodType)tp1).resultType();
            if (tp2 instanceof MethodType) {
               MethodType var16 = (MethodType)tp2;
               List var17 = var16.params();
               Type res2 = var16.resultType();
               if (scala.collection.immutable.Nil..MODULE$.equals(var17)) {
                  SymbolTable var52 = (SymbolTable)this;
                  alwaysMatchSimple = alwaysMatchSimple;
                  tp2 = res2;
                  tp1 = res1;
                  this = var52;
                  continue;
               }
            }

            if (tp2 instanceof NullaryMethodType) {
               Type res2 = ((NullaryMethodType)tp2).resultType();
               SymbolTable var51 = (SymbolTable)this;
               alwaysMatchSimple = alwaysMatchSimple;
               tp2 = res2;
               tp1 = res1;
               this = var51;
            } else if (tp2 instanceof ExistentialType) {
               Type res2 = ((ExistentialType)tp2).underlying();
               if (!alwaysMatchSimple) {
                  return false;
               }

               SymbolTable var50 = (SymbolTable)this;
               alwaysMatchSimple = true;
               tp2 = res2;
               tp1 = tp1;
               this = var50;
            } else {
               if (tp2 instanceof TypeRef) {
                  TypeRef var21 = (TypeRef)tp2;
                  Symbols.Symbol sym = var21.sym();
                  List var23 = var21.args();
                  if (scala.collection.immutable.Nil..MODULE$.equals(var23) && sym.isModuleClass()) {
                     SymbolTable var49 = (SymbolTable)this;
                     alwaysMatchSimple = alwaysMatchSimple;
                     tp2 = tp2;
                     tp1 = res1;
                     this = var49;
                     continue;
                  }
               }

               SymbolTable var48 = (SymbolTable)this;
               alwaysMatchSimple = alwaysMatchSimple;
               tp2 = tp2;
               tp1 = res1;
               this = var48;
            }
         } else if (tp1 instanceof PolyType) {
            PolyType var24 = (PolyType)tp1;
            List tparams1 = var24.typeParams();
            Type res1 = var24.resultType();
            if (tp2 instanceof PolyType) {
               PolyType var27 = (PolyType)tp2;
               List tparams2 = var27.typeParams();
               Type res2 = var27.resultType();
               if (!tparams1.corresponds(tparams2, (x$66, x$67) -> BoxesRunTime.boxToBoolean($anonfun$matchesType$1(x$66, x$67)))) {
                  return ((Types)this).matchesQuantified$1(tparams1, tparams2, res1, res2, alwaysMatchSimple);
               }

               SymbolTable var47 = (SymbolTable)this;
               alwaysMatchSimple = alwaysMatchSimple;
               tp2 = res2;
               tp1 = res1;
               this = var47;
            } else {
               if (tp2 instanceof ExistentialType) {
                  Type res2 = ((ExistentialType)tp2).underlying();
                  if (alwaysMatchSimple) {
                     SymbolTable var46 = (SymbolTable)this;
                     alwaysMatchSimple = true;
                     tp2 = res2;
                     tp1 = tp1;
                     this = var46;
                     continue;
                  }

                  return false;
               }

               return false;
            }
         } else if (tp1 instanceof ExistentialType) {
            ExistentialType var31 = (ExistentialType)tp1;
            List tparams1 = var31.quantified();
            Type res1 = var31.underlying();
            if (tp2 instanceof ExistentialType) {
               ExistentialType var34 = (ExistentialType)tp2;
               List tparams2 = var34.quantified();
               Type res2 = var34.underlying();
               return ((Types)this).matchesQuantified$1(tparams1, tparams2, res1, res2, alwaysMatchSimple);
            }

            if (!alwaysMatchSimple) {
               return ((Types)this).lastTry$1(tp2, alwaysMatchSimple, tp1);
            }

            SymbolTable var45 = (SymbolTable)this;
            alwaysMatchSimple = true;
            tp2 = tp2;
            tp1 = res1;
            this = var45;
         } else {
            if (tp1 instanceof TypeRef) {
               TypeRef var37 = (TypeRef)tp1;
               Symbols.Symbol sym = var37.sym();
               List var39 = var37.args();
               if (scala.collection.immutable.Nil..MODULE$.equals(var39) && sym.isModuleClass()) {
                  if (tp2 instanceof MethodType) {
                     MethodType var40 = (MethodType)tp2;
                     List var41 = var40.params();
                     Type res2 = var40.resultType();
                     if (scala.collection.immutable.Nil..MODULE$.equals(var41)) {
                        SymbolTable var44 = (SymbolTable)this;
                        alwaysMatchSimple = alwaysMatchSimple;
                        tp2 = res2;
                        tp1 = tp1;
                        this = var44;
                        continue;
                     }
                  }

                  if (tp2 instanceof NullaryMethodType) {
                     Type res2 = ((NullaryMethodType)tp2).resultType();
                     SymbolTable var10000 = (SymbolTable)this;
                     alwaysMatchSimple = alwaysMatchSimple;
                     tp2 = res2;
                     tp1 = tp1;
                     this = var10000;
                     continue;
                  }

                  return ((Types)this).lastTry$1(tp2, alwaysMatchSimple, tp1);
               }
            }

            return ((Types)this).lastTry$1(tp2, alwaysMatchSimple, tp1);
         }
      }
   }

   // $FF: synthetic method
   static boolean matchingParams$(final Types $this, final List syms1, final List syms2) {
      return $this.matchingParams(syms1, syms2);
   }

   default boolean matchingParams(final List syms1, final List syms2) {
      if (scala.collection.immutable.Nil..MODULE$.equals(syms1)) {
         return syms2.isEmpty();
      } else if (syms1 instanceof .colon.colon) {
         .colon.colon var3 = (.colon.colon)syms1;
         Symbols.Symbol sym1 = (Symbols.Symbol)var3.head();
         List rest1 = var3.next$access$1();
         if (scala.collection.immutable.Nil..MODULE$.equals(syms2)) {
            return false;
         } else if (syms2 instanceof .colon.colon) {
            .colon.colon var6 = (.colon.colon)syms2;
            Symbols.Symbol sym2 = (Symbols.Symbol)var6.head();
            List rest2 = var6.next$access$1();
            if (sym1 == null) {
               throw null;
            } else {
               Type tp1 = sym1.tpe_$times();
               if (sym2 == null) {
                  throw null;
               } else {
                  Type tp2 = sym2.tpe_$times();
                  return tp1.$eq$colon$eq(tp2) && this.matchingParams(rest1, rest2);
               }
            }
         } else {
            throw new MatchError(syms2);
         }
      } else {
         throw new MatchError(syms1);
      }
   }

   // $FF: synthetic method
   static boolean isWithinBounds$(final Types $this, final Type pre, final Symbols.Symbol owner, final List tparams, final List targs) {
      return $this.isWithinBounds(pre, owner, tparams, targs);
   }

   default boolean isWithinBounds(final Type pre, final Symbols.Symbol owner, final List tparams, final List targs) {
      if (targs == null) {
         throw null;
      } else {
         List exists_these = targs;

         boolean var10000;
         while(true) {
            if (exists_these.isEmpty()) {
               var10000 = false;
               break;
            }

            if ($anonfun$isWithinBounds$1((Type)exists_these.head())) {
               var10000 = true;
               break;
            }

            exists_these = (List)exists_these.tail();
         }

         Object var12 = null;
         if (!var10000) {
            return tparams.corresponds(targs, (tparam, targ) -> BoxesRunTime.boxToBoolean($anonfun$isWithinBounds$4(pre, owner, tparams, targs, tparam, targ)));
         } else {
            Object var17;
            if (tparams == scala.collection.immutable.Nil..MODULE$) {
               var17 = scala.collection.immutable.Nil..MODULE$;
            } else {
               .colon.colon mapList_head = new .colon.colon(instantiatedBound$1((Symbols.Symbol)tparams.head(), pre, owner, tparams, targs), scala.collection.immutable.Nil..MODULE$);
               .colon.colon mapList_tail = mapList_head;

               for(List mapList_rest = (List)tparams.tail(); mapList_rest != scala.collection.immutable.Nil..MODULE$; mapList_rest = (List)mapList_rest.tail()) {
                  .colon.colon mapList_next = new .colon.colon(instantiatedBound$1((Symbols.Symbol)mapList_rest.head(), pre, owner, tparams, targs), scala.collection.immutable.Nil..MODULE$);
                  mapList_tail.next_$eq(mapList_next);
                  mapList_tail = mapList_next;
               }

               Statics.releaseFence();
               var17 = mapList_head;
            }

            Object var13 = null;
            Object var14 = null;
            Object var15 = null;
            Object var16 = null;
            List bounds = (List)var17;
            List var11 = ((AnnotationCheckers)this).adaptBoundsToAnnotations(bounds, tparams, targs);
            return var11.corresponds(targs, (x$69, x$70) -> BoxesRunTime.boxToBoolean($anonfun$isWithinBounds$3(x$69, x$70)));
         }
      }
   }

   // $FF: synthetic method
   static Type elimAnonymousClass$(final Types $this, final Type t) {
      return $this.elimAnonymousClass(t);
   }

   default Type elimAnonymousClass(final Type t) {
      if (t instanceof TypeRef) {
         TypeRef var2 = (TypeRef)t;
         Type pre = var2.pre();
         Symbols.Symbol clazz = var2.sym();
         List var5 = var2.args();
         if (scala.collection.immutable.Nil..MODULE$.equals(var5) && clazz.isAnonymousClass()) {
            return clazz.classBound().asSeenFrom(pre, clazz.owner());
         }
      }

      return t;
   }

   // $FF: synthetic method
   static List typeVarsInType$(final Types $this, final Type tp) {
      return $this.typeVarsInType(tp);
   }

   default List typeVarsInType(final Type tp) {
      return this.scala$reflect$internal$Types$$typeVarsInTypeRev(tp).reverse();
   }

   // $FF: synthetic method
   static List scala$reflect$internal$Types$$typeVarsInTypeRev$(final Types $this, final Type tp) {
      return $this.scala$reflect$internal$Types$$typeVarsInTypeRev(tp);
   }

   default List scala$reflect$internal$Types$$typeVarsInTypeRev(final Type tp) {
      U create_e = (U)scala.collection.immutable.Nil..MODULE$;
      ObjectRef var10000 = new ObjectRef(create_e);
      create_e = (U)null;
      ObjectRef tvs = var10000;
      tp.foreach((x0$1) -> {
         $anonfun$typeVarsInTypeRev$1(tvs, x0$1);
         return BoxedUnit.UNIT;
      });
      return (List)tvs.elem;
   }

   // $FF: synthetic method
   static Object suspendingTypeVars$(final Types $this, final List tvs, final Function0 op) {
      return $this.suspendingTypeVars(tvs, op);
   }

   default Object suspendingTypeVars(final List tvs, final Function0 op) {
      BitSet bitSetByPredicate_bs = new BitSet();
      List bitSetByPredicate_ys = tvs;

      for(int bitSetByPredicate_i = 0; !bitSetByPredicate_ys.isEmpty(); ++bitSetByPredicate_i) {
         if (((TypeVar)bitSetByPredicate_ys.head()).scala$reflect$internal$Types$$suspended()) {
            bitSetByPredicate_bs.add(bitSetByPredicate_i);
         }

         bitSetByPredicate_ys = (List)bitSetByPredicate_ys.tail();
      }

      Object var19 = null;
      Object var20 = null;
      BitSet saved = bitSetByPredicate_bs;
      if (tvs == null) {
         throw null;
      } else {
         for(List foreach_these = tvs; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
            ((TypeVar)foreach_these.head()).scala$reflect$internal$Types$$suspended_$eq(true);
         }

         Object var17 = null;

         Object var21;
         try {
            var21 = op.apply();
         } finally {
            int index = 0;
            List sss = tvs;

            while(true) {
               Nil var7 = scala.collection.immutable.Nil..MODULE$;
               if (sss != null) {
                  if (sss.equals(var7)) {
                     ;
                  }
               }

               TypeVar var10001 = (TypeVar)sss.head();
               Object apply_elem = index;
               boolean var10002 = saved.contains(apply_elem);
               apply_elem = null;
               var10001.scala$reflect$internal$Types$$suspended_$eq(var10002);
               ++index;
               sss = (List)sss.tail();
            }
         }

         return var21;
      }
   }

   // $FF: synthetic method
   static Tuple2 stripExistentialsAndTypeVars$(final Types $this, final List ts, final boolean expandLazyBaseType) {
      return $this.stripExistentialsAndTypeVars(ts, expandLazyBaseType);
   }

   default Tuple2 stripExistentialsAndTypeVars(final List ts, final boolean expandLazyBaseType) {
      if (ts == null) {
         throw null;
      } else {
         List exists_these = ts;

         boolean var10000;
         while(true) {
            if (exists_these.isEmpty()) {
               var10000 = false;
               break;
            }

            if ($anonfun$stripExistentialsAndTypeVars$1((Type)exists_these.head())) {
               var10000 = true;
               break;
            }

            exists_these = (List)exists_these.tail();
         }

         Object var9 = null;
         if (!var10000) {
            return new Tuple2(ts, scala.collection.immutable.Nil..MODULE$);
         } else {
            ListBuffer tparams = (ListBuffer)IterableFactory.apply$(scala.collection.mutable.ListBuffer..MODULE$, scala.collection.immutable.Nil..MODULE$);
            ListBuffer stripped = (ListBuffer)IterableFactory.apply$(scala.collection.mutable.ListBuffer..MODULE$, scala.collection.immutable.Nil..MODULE$);

            for(List foreach_these = ts; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               Type var7 = (Type)foreach_these.head();
               $anonfun$stripExistentialsAndTypeVars$4(this, expandLazyBaseType, ts, stripped, tparams, var7);
            }

            Object var8 = null;
            return new Tuple2(stripped.toList(), tparams.toList());
         }
      }
   }

   // $FF: synthetic method
   static boolean stripExistentialsAndTypeVars$default$2$(final Types $this) {
      return $this.stripExistentialsAndTypeVars$default$2();
   }

   default boolean stripExistentialsAndTypeVars$default$2() {
      return false;
   }

   // $FF: synthetic method
   static Type mergePrefixAndArgs$(final Types $this, final List tps0, final int variance, final int depth) {
      return $this.mergePrefixAndArgs(tps0, variance, depth);
   }

   default Type mergePrefixAndArgs(final List tps0, final int variance, final int depth) {
      Tuple2 var4 = this.stripExistentialsAndTypeVars(tps0, true);
      if (var4 == null) {
         throw new MatchError((Object)null);
      } else {
         List tparams;
         Object var144;
         label318: {
            List tps = (List)var4._1();
            tparams = (List)var4._2();
            boolean var8 = false;
            .colon.colon var9 = null;
            if (tps instanceof .colon.colon) {
               var8 = true;
               var9 = (.colon.colon)tps;
               Type tp = (Type)var9.head();
               List var11 = var9.next$access$1();
               if (scala.collection.immutable.Nil..MODULE$.equals(var11)) {
                  var144 = tp;
                  break label318;
               }
            }

            if (var8) {
               Type var12 = (Type)var9.head();
               if (var12 instanceof TypeRef) {
                  Symbols.Symbol sym = ((TypeRef)var12).sym();
                  if (tps == null) {
                     throw null;
                  }

                  if (tps == scala.collection.immutable.Nil..MODULE$) {
                     var144 = scala.collection.immutable.Nil..MODULE$;
                  } else {
                     .colon.colon map_h = new .colon.colon(((Type)tps.head()).prefix(), scala.collection.immutable.Nil..MODULE$);
                     .colon.colon map_t = map_h;

                     for(List map_rest = (List)tps.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                        .colon.colon map_nx = new .colon.colon(((Type)map_rest.head()).prefix(), scala.collection.immutable.Nil..MODULE$);
                        map_t.next_$eq(map_nx);
                        map_t = map_nx;
                     }

                     Statics.releaseFence();
                     var144 = map_h;
                  }

                  Object var81 = null;
                  Object var82 = null;
                  Object var83 = null;
                  Object var84 = null;
                  List pres = (List)var144;
                  Type pre = Variance$.MODULE$.isPositive$extension(variance) ? this.lub(pres, depth) : this.glb(pres, depth);
                  if (tps == scala.collection.immutable.Nil..MODULE$) {
                     var144 = scala.collection.immutable.Nil..MODULE$;
                  } else {
                     .colon.colon map_h = new .colon.colon($anonfun$mergePrefixAndArgs$2((Type)tps.head()), scala.collection.immutable.Nil..MODULE$);
                     .colon.colon map_t = map_h;

                     for(List map_rest = (List)tps.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                        .colon.colon map_nx = new .colon.colon($anonfun$mergePrefixAndArgs$2((Type)map_rest.head()), scala.collection.immutable.Nil..MODULE$);
                        map_t.next_$eq(map_nx);
                        map_t = map_nx;
                     }

                     Statics.releaseFence();
                     var144 = map_h;
                  }

                  Object var85 = null;
                  Object var86 = null;
                  Object var87 = null;
                  Object var88 = null;
                  List argss = (List)var144;
                  ListBuffer capturedParams = new ListBuffer();

                  try {
                     label250: {
                        Symbols.ClassSymbol var18 = ((Definitions)this).definitions().ArrayClass();
                        if (sym == null) {
                           if (var18 != null) {
                              break label250;
                           }
                        } else if (!sym.equals(var18)) {
                           break label250;
                        }

                        if (((SymbolTable)this).phase().erasedTypes()) {
                           List exists_these = argss;

                           while(true) {
                              if (exists_these.isEmpty()) {
                                 var147 = false;
                                 break;
                              }

                              if (((List)exists_these.head()).isEmpty()) {
                                 var147 = true;
                                 break;
                              }

                              exists_these = (List)exists_these.tail();
                           }

                           exists_these = null;
                           if (var147) {
                              var144 = this.NoType();
                           } else {
                              Type argH = (Type)((IterableOps)argss.head()).head();
                              List var148 = (List)argss.tail();
                              if (var148 == null) {
                                 throw null;
                              }

                              List forall_these = var148;

                              while(true) {
                                 if (forall_these.isEmpty()) {
                                    var149 = true;
                                    break;
                                 }

                                 List var51 = (List)forall_these.head();
                                 if (!$anonfun$mergePrefixAndArgs$4(argH, var51)) {
                                    var149 = false;
                                    break;
                                 }

                                 forall_these = (List)forall_these.tail();
                              }

                              Object var90 = null;
                              if (var149) {
                                 var144 = this.typeRef(pre, sym, new .colon.colon(argH, scala.collection.immutable.Nil..MODULE$));
                              } else {
                                 List exists_these = argss;

                                 while(true) {
                                    if (exists_these.isEmpty()) {
                                       var150 = false;
                                       break;
                                    }

                                    List var52 = (List)exists_these.head();
                                    if ($anonfun$mergePrefixAndArgs$5(this, var52)) {
                                       var150 = true;
                                       break;
                                    }

                                    exists_these = (List)exists_these.tail();
                                 }

                                 exists_these = null;
                                 if (var150) {
                                    var144 = ((Definitions)this).definitions().ObjectTpe();
                                 } else {
                                    .colon.colon var10003 = new .colon.colon;
                                    Object var10006;
                                    if (argss == scala.collection.immutable.Nil..MODULE$) {
                                       var10006 = scala.collection.immutable.Nil..MODULE$;
                                    } else {
                                       .colon.colon map_h = new .colon.colon((Type)((List)argss.head()).head(), scala.collection.immutable.Nil..MODULE$);
                                       .colon.colon map_t = map_h;

                                       for(List map_rest = (List)argss.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                                          .colon.colon map_nx = new .colon.colon((Type)((List)map_rest.head()).head(), scala.collection.immutable.Nil..MODULE$);
                                          map_t.next_$eq(map_nx);
                                          map_t = map_nx;
                                       }

                                       Statics.releaseFence();
                                       var10006 = map_h;
                                    }

                                    Object var92 = null;
                                    Object var93 = null;
                                    Object var94 = null;
                                    Object var95 = null;
                                    var10003.<init>(this.lub((List)var10006), scala.collection.immutable.Nil..MODULE$);
                                    var144 = this.typeRef(pre, sym, var10003);
                                 }
                              }
                           }
                           break label318;
                        }
                     }

                     Option var20 = this.transposeSafe(argss);
                     if (scala.None..MODULE$.equals(var20)) {
                        ((SymbolTable)this).debuglog(() -> (new StringBuilder(41)).append("transposed irregular matrix!? tps=").append(tps).append(" argss=").append(argss).toString());
                        var144 = this.NoType();
                     } else {
                        if (!(var20 instanceof Some)) {
                           throw new MatchError(var20);
                        }

                        List argsst = (List)((Some)var20).value();
                        int var78 = 0;
                        List map2_xs1 = sym.typeParams();
                        ListBuffer map2_lb = new ListBuffer();
                        List map2_ys1 = map2_xs1;

                        for(List map2_ys2 = argsst; !map2_ys1.isEmpty() && !map2_ys2.isEmpty(); map2_ys2 = (List)map2_ys2.tail()) {
                           var144 = map2_ys1.head();
                           List var54 = (List)map2_ys2.head();
                           Symbols.Symbol var53 = (Symbols.Symbol)var144;
                           List $anonfun$mergePrefixAndArgs$8_as = (List)var54.distinct();
                           if ($anonfun$mergePrefixAndArgs$8_as == null) {
                              throw null;
                           }

                           if (SeqOps.size$($anonfun$mergePrefixAndArgs$8_as) == 1) {
                              var144 = (Type)$anonfun$mergePrefixAndArgs$8_as.head();
                           } else if (Depth$.MODULE$.isZero$extension(depth)) {
                              ((SymbolTable)this).log(() -> {
                                 StringOps var10000 = scala.collection.StringOps..MODULE$;
                                 ScalaRunTime var10002 = scala.runtime.ScalaRunTime..MODULE$;
                                 Object[] var10003 = new Object[2];
                                 String mkString_sep = ", ";
                                 String mkString_end = "";
                                 String mkString_start = "";
                                 String var10006 = IterableOnceOps.mkString$(as, mkString_start, mkString_sep, mkString_end);
                                 Object var6 = null;
                                 Object var7 = null;
                                 Object var5 = null;
                                 var10003[0] = var10006;
                                 var10003[1] = tparam.fullLocationString();
                                 return var10000.format$extension("Giving up merging args: can't unify %s under %s", var10002.genericWrapArray(var10003));
                              });
                              var144 = this.NoType();
                           } else {
                              List $anonfun$mergePrefixAndArgs$8_hktParams = var53.initialize().typeParams();
                              if ($anonfun$mergePrefixAndArgs$8_hktParams == null) {
                                 throw null;
                              }

                              if ($anonfun$mergePrefixAndArgs$8_hktParams == scala.collection.immutable.Nil..MODULE$) {
                                 var144 = scala.collection.immutable.Nil..MODULE$;
                              } else {
                                 Symbols.Symbol var76 = (Symbols.Symbol)$anonfun$mergePrefixAndArgs$8_hktParams.head();
                                 .colon.colon $anonfun$mergePrefixAndArgs$8_map_h = new .colon.colon(var76.typeConstructor(), scala.collection.immutable.Nil..MODULE$);
                                 .colon.colon $anonfun$mergePrefixAndArgs$8_map_t = $anonfun$mergePrefixAndArgs$8_map_h;

                                 for(List $anonfun$mergePrefixAndArgs$8_map_rest = (List)$anonfun$mergePrefixAndArgs$8_hktParams.tail(); $anonfun$mergePrefixAndArgs$8_map_rest != scala.collection.immutable.Nil..MODULE$; $anonfun$mergePrefixAndArgs$8_map_rest = (List)$anonfun$mergePrefixAndArgs$8_map_rest.tail()) {
                                    var76 = (Symbols.Symbol)$anonfun$mergePrefixAndArgs$8_map_rest.head();
                                    .colon.colon $anonfun$mergePrefixAndArgs$8_map_nx = new .colon.colon(var76.typeConstructor(), scala.collection.immutable.Nil..MODULE$);
                                    $anonfun$mergePrefixAndArgs$8_map_t.next_$eq($anonfun$mergePrefixAndArgs$8_map_nx);
                                    $anonfun$mergePrefixAndArgs$8_map_t = $anonfun$mergePrefixAndArgs$8_map_nx;
                                 }

                                 Statics.releaseFence();
                                 var144 = $anonfun$mergePrefixAndArgs$8_map_h;
                              }

                              Object var114 = null;
                              Object var116 = null;
                              Object var118 = null;
                              Object var120 = null;
                              List $anonfun$mergePrefixAndArgs$8_hktArgs = (List)var144;
                              if ($anonfun$mergePrefixAndArgs$8_hktParams.isEmpty()) {
                                 var144 = $anonfun$mergePrefixAndArgs$8_as;
                              } else {
                                 if ($anonfun$mergePrefixAndArgs$8_as == scala.collection.immutable.Nil..MODULE$) {
                                    var144 = scala.collection.immutable.Nil..MODULE$;
                                 } else {
                                    Type var77 = (Type)$anonfun$mergePrefixAndArgs$8_as.head();
                                    .colon.colon $anonfun$mergePrefixAndArgs$8_map_h = new .colon.colon($anonfun$mergePrefixAndArgs$11(this, $anonfun$mergePrefixAndArgs$8_hktParams, $anonfun$mergePrefixAndArgs$8_hktArgs, var77), scala.collection.immutable.Nil..MODULE$);
                                    .colon.colon $anonfun$mergePrefixAndArgs$8_map_t = $anonfun$mergePrefixAndArgs$8_map_h;

                                    for(List $anonfun$mergePrefixAndArgs$8_map_rest = (List)$anonfun$mergePrefixAndArgs$8_as.tail(); $anonfun$mergePrefixAndArgs$8_map_rest != scala.collection.immutable.Nil..MODULE$; $anonfun$mergePrefixAndArgs$8_map_rest = (List)$anonfun$mergePrefixAndArgs$8_map_rest.tail()) {
                                       var77 = (Type)$anonfun$mergePrefixAndArgs$8_map_rest.head();
                                       .colon.colon $anonfun$mergePrefixAndArgs$8_map_nx = new .colon.colon($anonfun$mergePrefixAndArgs$11(this, $anonfun$mergePrefixAndArgs$8_hktParams, $anonfun$mergePrefixAndArgs$8_hktArgs, var77), scala.collection.immutable.Nil..MODULE$);
                                       $anonfun$mergePrefixAndArgs$8_map_t.next_$eq($anonfun$mergePrefixAndArgs$8_map_nx);
                                       $anonfun$mergePrefixAndArgs$8_map_t = $anonfun$mergePrefixAndArgs$8_map_nx;
                                    }

                                    Statics.releaseFence();
                                    var144 = $anonfun$mergePrefixAndArgs$8_map_h;
                                 }

                                 Object var122 = null;
                                 Object var124 = null;
                                 Object var126 = null;
                                 Object var128 = null;
                              }

                              List $anonfun$mergePrefixAndArgs$8_asKinded = (List)var144;
                              if (var53.variance() == variance) {
                                 Depth$ $anonfun$mergePrefixAndArgs$8_decr$extension_this = Depth$.MODULE$;
                                 int var10002 = $anonfun$mergePrefixAndArgs$8_decr$extension_this.decr$extension(depth, 1);
                                 Object var130 = null;
                                 var144 = this.lub($anonfun$mergePrefixAndArgs$8_asKinded, var10002);
                              } else if (var53.variance() == Variance$.MODULE$.flip$extension(variance)) {
                                 Depth$ $anonfun$mergePrefixAndArgs$8_decr$extension_this = Depth$.MODULE$;
                                 int var157 = $anonfun$mergePrefixAndArgs$8_decr$extension_this.decr$extension(depth, 1);
                                 Object var132 = null;
                                 var144 = this.glb($anonfun$mergePrefixAndArgs$8_asKinded, var157);
                              } else {
                                 Depth$ $anonfun$mergePrefixAndArgs$8_decr$extension_this = Depth$.MODULE$;
                                 int var158 = $anonfun$mergePrefixAndArgs$8_decr$extension_this.decr$extension(depth, 1);
                                 Object var134 = null;
                                 Type $anonfun$mergePrefixAndArgs$8_l = this.lub($anonfun$mergePrefixAndArgs$8_asKinded, var158);
                                 Depth$ $anonfun$mergePrefixAndArgs$8_decr$extension_this = Depth$.MODULE$;
                                 var158 = $anonfun$mergePrefixAndArgs$8_decr$extension_this.decr$extension(depth, 1);
                                 Object var136 = null;
                                 Type $anonfun$mergePrefixAndArgs$8_g = this.glb($anonfun$mergePrefixAndArgs$8_asKinded, var158);
                                 if ($anonfun$mergePrefixAndArgs$8_l.$less$colon$less($anonfun$mergePrefixAndArgs$8_g)) {
                                    var144 = $anonfun$mergePrefixAndArgs$8_l;
                                 } else {
                                    ++var78;
                                    if ($anonfun$mergePrefixAndArgs$8_hktParams.isEmpty()) {
                                       var144 = this.TypeBounds().apply($anonfun$mergePrefixAndArgs$8_g, $anonfun$mergePrefixAndArgs$8_l);
                                    } else {
                                       Type $anonfun$mergePrefixAndArgs$8_bindHK$1_tp = this.TypeBounds().apply(this.appliedType($anonfun$mergePrefixAndArgs$8_g, $anonfun$mergePrefixAndArgs$8_hktArgs), this.appliedType($anonfun$mergePrefixAndArgs$8_l, $anonfun$mergePrefixAndArgs$8_hktArgs));
                                       var144 = this.typeFun($anonfun$mergePrefixAndArgs$8_hktParams, $anonfun$mergePrefixAndArgs$8_bindHK$1_tp);
                                       $anonfun$mergePrefixAndArgs$8_bindHK$1_tp = null;
                                    }

                                    Type $anonfun$mergePrefixAndArgs$8_bounds = (Type)var144;
                                    Symbols.TypeSymbol $anonfun$mergePrefixAndArgs$8_qvar = (Symbols.TypeSymbol)this.commonOwner($anonfun$mergePrefixAndArgs$8_as).freshExistential("", var78).setInfo($anonfun$mergePrefixAndArgs$8_bounds);
                                    capturedParams.addOne($anonfun$mergePrefixAndArgs$8_qvar);
                                    if ($anonfun$mergePrefixAndArgs$8_qvar == null) {
                                       throw null;
                                    }

                                    var144 = ((Symbols.Symbol)$anonfun$mergePrefixAndArgs$8_qvar).tpe_$times();
                                 }
                              }
                           }

                           Object var106 = null;
                           Object var107 = null;
                           Object var108 = null;
                           Object var109 = null;
                           Object var110 = null;
                           Object var111 = null;
                           Object var112 = null;
                           Object var113 = null;
                           Object var115 = null;
                           Object var117 = null;
                           Object var119 = null;
                           Object var121 = null;
                           Object var123 = null;
                           Object var125 = null;
                           Object var127 = null;
                           Object var129 = null;
                           Object var131 = null;
                           Object var133 = null;
                           Object var135 = null;
                           Object var137 = null;
                           Object var139 = null;
                           Object var141 = null;
                           Object var143 = null;
                           Object map2_$plus$eq_elem = var144;
                           map2_lb.addOne(map2_$plus$eq_elem);
                           map2_$plus$eq_elem = null;
                           map2_ys1 = (List)map2_ys1.tail();
                        }

                        List var156 = map2_lb.toList();
                        Object var96 = null;
                        Object var97 = null;
                        Object var98 = null;
                        Object var99 = null;
                        Object var101 = null;
                        List args = var156;
                        var144 = args.contains(this.NoType()) ? this.NoType() : this.existentialAbstraction(capturedParams.toList(), this.typeRef(pre, sym, args), this.existentialAbstraction$default$3());
                     }
                  } catch (MalformedType var80) {
                     var144 = this.NoType();
                  }
                  break label318;
               }
            }

            if (!var8) {
               throw ((Reporting)this).abort((new StringBuilder(41)).append("mergePrefixAndArgs(").append(tps).append(", ").append(new Variance(variance)).append(", ").append(new Depth(depth)).append("): unsupported tps").toString());
            }

            Type var23 = (Type)var9.head();
            if (!(var23 instanceof SingleType)) {
               throw ((Reporting)this).abort((new StringBuilder(41)).append("mergePrefixAndArgs(").append(tps).append(", ").append(new Variance(variance)).append(", ").append(new Depth(depth)).append("): unsupported tps").toString());
            }

            Symbols.Symbol sym = ((SingleType)var23).sym();
            if (tps == null) {
               throw null;
            }

            if (tps == scala.collection.immutable.Nil..MODULE$) {
               var144 = scala.collection.immutable.Nil..MODULE$;
            } else {
               .colon.colon map_h = new .colon.colon(((Type)tps.head()).prefix(), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)tps.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  .colon.colon map_nx = new .colon.colon(((Type)map_rest.head()).prefix(), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var144 = map_h;
            }

            Object var102 = null;
            Object var103 = null;
            Object var104 = null;
            Object var105 = null;
            List pres = (List)var144;
            Type pre = Variance$.MODULE$.isPositive$extension(variance) ? this.lub(pres, depth) : this.glb(pres, depth);

            try {
               var144 = this.singleType(pre, sym);
            } catch (MalformedType var79) {
               var144 = this.NoType();
            }
         }

         Type merged = (Type)var144;
         return this.existentialAbstraction(tparams, merged, this.existentialAbstraction$default$3());
      }
   }

   // $FF: synthetic method
   static void addMember$(final Types $this, final Type thistp, final Type tp, final Symbols.Symbol sym) {
      $this.addMember(thistp, tp, sym);
   }

   default void addMember(final Type thistp, final Type tp, final Symbols.Symbol sym) {
      this.addMember(thistp, tp, sym, Depth$.MODULE$.AnyDepth());
   }

   // $FF: synthetic method
   static void addMember$(final Types $this, final Type thistp, final Type tp, final Symbols.Symbol sym, final int depth) {
      $this.addMember(thistp, tp, sym, depth);
   }

   default void addMember(final Type thistp, final Type tp, final Symbols.Symbol sym, final int depth) {
      SymbolTable var10000;
      boolean var10001;
      label42: {
         label41: {
            var10000 = (SymbolTable)this;
            Symbols.NoSymbol var5 = ((Symbols)this).NoSymbol();
            if (sym == null) {
               if (var5 != null) {
                  break label41;
               }
            } else if (!sym.equals(var5)) {
               break label41;
            }

            var10001 = false;
            break label42;
         }

         var10001 = true;
      }

      boolean assert_assertion = var10001;
      SymbolTable assert_this = var10000;
      if (!assert_assertion) {
         throw assert_this.throwAssertionError("Adding member NoSymbol");
      } else if (!this.specializesSym(thistp, sym, depth)) {
         if (sym.isTerm()) {
            List var11 = tp.nonPrivateDecl(sym.name()).alternatives();
            if (var11 == null) {
               throw null;
            }

            for(List foreach_these = var11; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               Symbols.Symbol var9 = (Symbols.Symbol)foreach_these.head();
               $anonfun$addMember$2(this, thistp, sym, depth, tp, var9);
            }

            Object var10 = null;
         }

         tp.decls().enter(sym);
      }
   }

   // $FF: synthetic method
   static boolean isJavaVarargsAncestor$(final Types $this, final Symbols.Symbol clazz) {
      return $this.isJavaVarargsAncestor(clazz);
   }

   default boolean isJavaVarargsAncestor(final Symbols.Symbol clazz) {
      if (clazz.isClass() && clazz.isJavaDefined()) {
         List var10000 = clazz.info().nonPrivateDecls();
         if (var10000 == null) {
            throw null;
         }

         List exists_these = var10000;

         while(true) {
            if (exists_these.isEmpty()) {
               var5 = false;
               break;
            }

            Symbols.Symbol var3 = (Symbols.Symbol)exists_these.head();
            if ($anonfun$isJavaVarargsAncestor$1(this, var3)) {
               var5 = true;
               break;
            }

            exists_these = (List)exists_these.tail();
         }

         Object var4 = null;
         if (var5) {
            return true;
         }
      }

      return false;
   }

   // $FF: synthetic method
   static boolean inheritsJavaVarArgsMethod$(final Types $this, final Symbols.Symbol clazz) {
      return $this.inheritsJavaVarArgsMethod(clazz);
   }

   default boolean inheritsJavaVarArgsMethod(final Symbols.Symbol clazz) {
      List var10000 = clazz.thisType().baseClasses();
      if (var10000 == null) {
         throw null;
      } else {
         for(List exists_these = var10000; !exists_these.isEmpty(); exists_these = (List)exists_these.tail()) {
            Symbols.Symbol var3 = (Symbols.Symbol)exists_these.head();
            if (this.isJavaVarargsAncestor(var3)) {
               return true;
            }
         }

         return false;
      }
   }

   String scala$reflect$internal$Types$$_indent();

   void scala$reflect$internal$Types$$_indent_$eq(final String x$1);

   // $FF: synthetic method
   static String indent$(final Types $this) {
      return $this.indent();
   }

   default String indent() {
      return this.scala$reflect$internal$Types$$_indent();
   }

   // $FF: synthetic method
   static void indent_$eq$(final Types $this, final String value) {
      $this.indent_$eq(value);
   }

   default void indent_$eq(final String value) {
      this.scala$reflect$internal$Types$$_indent_$eq(value);
   }

   // $FF: synthetic method
   static boolean explain$(final Types $this, final String op, final Function2 p, final Type tp1, final Object arg2) {
      return $this.explain(op, p, tp1, arg2);
   }

   default boolean explain(final String op, final Function2 p, final Type tp1, final Object arg2) {
      ((Reporting)this).inform((new StringBuilder(3)).append(this.indent()).append(tp1).append(" ").append(op).append(" ").append(arg2).append("?").toString());
      this.indent_$eq((new StringBuilder(2)).append(this.indent()).append("  ").toString());
      boolean result = BoxesRunTime.unboxToBoolean(p.apply(tp1, arg2));
      this.indent_$eq(scala.collection.StringOps..MODULE$.stripSuffix$extension(this.indent(), "  "));
      ((Reporting)this).inform((new StringBuilder(0)).append(this.indent()).append(result).toString());
      return result;
   }

   // $FF: synthetic method
   static void explainTypes$(final Types $this, final Type found, final Type required) {
      $this.explainTypes(found, required);
   }

   default void explainTypes(final Type found, final Type required) {
      if (BoxesRunTime.unboxToBoolean(((SymbolTable)this).settings().explaintypes().value())) {
         this.withTypesExplained((JFunction0.mcZ.sp)() -> found.$less$colon$less(required));
      }
   }

   // $FF: synthetic method
   static void explainTypes$(final Types $this, final Function2 op, final Type found, final Type required) {
      $this.explainTypes(op, found, required);
   }

   default void explainTypes(final Function2 op, final Type found, final Type required) {
      if (BoxesRunTime.unboxToBoolean(((SymbolTable)this).settings().explaintypes().value())) {
         this.withTypesExplained(() -> op.apply(found, required));
      }
   }

   // $FF: synthetic method
   static Object withTypesExplained$(final Types $this, final Function0 op) {
      return $this.withTypesExplained(op);
   }

   default Object withTypesExplained(final Function0 op) {
      boolean s = this.scala$reflect$internal$Types$$explainSwitch();

      Object var10000;
      try {
         this.scala$reflect$internal$Types$$explainSwitch_$eq(true);
         var10000 = op.apply();
      } finally {
         this.scala$reflect$internal$Types$$explainSwitch_$eq(s);
      }

      return var10000;
   }

   // $FF: synthetic method
   static boolean isUnboundedGeneric$(final Types $this, final Type tp) {
      return $this.isUnboundedGeneric(tp);
   }

   default boolean isUnboundedGeneric(final Type tp) {
      if (!(tp instanceof TypeRef)) {
         return false;
      } else {
         TypeRef var2 = (TypeRef)tp;
         return var2.sym().isAbstractType() && (!var2.$less$colon$less(((Definitions)this).definitions().AnyRefTpe()) || var2.upperBound() == ((Definitions)this).definitions().ObjectTpeJava());
      }
   }

   // $FF: synthetic method
   static boolean isBoundedGeneric$(final Types $this, final Type tp) {
      return $this.isBoundedGeneric(tp);
   }

   default boolean isBoundedGeneric(final Type tp) {
      boolean var2 = false;
      TypeRef var3 = null;
      if (tp instanceof TypeRef) {
         var2 = true;
         var3 = (TypeRef)tp;
         if (var3.sym().isAbstractType()) {
            if (tp.$less$colon$less(((Definitions)this).definitions().AnyRefTpe()) && tp.upperBound() != ((Definitions)this).definitions().ObjectTpeJava()) {
               return true;
            }

            return false;
         }
      }

      if (var2) {
         Symbols.Symbol sym = var3.sym();
         return !((Definitions)this).definitions().isPrimitiveValueClass(sym);
      } else {
         return false;
      }
   }

   // $FF: synthetic method
   static List addSerializable$(final Types $this, final Seq ps) {
      return $this.addSerializable(ps);
   }

   default List addSerializable(final Seq ps) {
      if (ps.exists(this.typeIsSubTypeOfSerializable())) {
         return ps.toList();
      } else {
         Object $colon$plus_elem = ((Definitions)this).definitions().SerializableTpe();
         Object var10000 = ps.appended($colon$plus_elem);
         $colon$plus_elem = null;
         return ((IterableOnceOps)var10000).toList();
      }
   }

   // $FF: synthetic method
   static Type uncheckedBounds$(final Types $this, final Type tp) {
      return $this.uncheckedBounds(tp);
   }

   default Type uncheckedBounds(final Type tp) {
      if (!tp.typeArgs().isEmpty()) {
         Symbols.Symbol var10000 = ((Definitions)this).definitions().UncheckedBoundsClass();
         Symbols.NoSymbol var2 = ((Symbols)this).NoSymbol();
         if (var10000 == null) {
            if (var2 == null) {
               return tp;
            }
         } else if (var10000.equals(var2)) {
            return tp;
         }

         AnnotationInfos.AnnotationInfo$ var10001 = ((AnnotationInfos)this).AnnotationInfo();
         Symbols.Symbol var10002 = ((Definitions)this).definitions().UncheckedBoundsClass();
         if (var10002 == null) {
            throw null;
         } else {
            Symbols.Symbol tpe_this = var10002;
            Type var8 = tpe_this.tpe_$times();
            Object var5 = null;
            Type marker_atp = var8;
            if (var10001 == null) {
               throw null;
            } else {
               AnnotationInfos.AnnotationInfo var7 = var10001.apply(marker_atp, scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$);
               marker_atp = null;
               return tp.withAnnotation(var7);
            }
         }
      } else {
         return tp;
      }
   }

   // $FF: synthetic method
   static Scopes.Scope nonTrivialMembers$(final Types $this, final Symbols.Symbol clazz) {
      return $this.nonTrivialMembers(clazz);
   }

   default Scopes.Scope nonTrivialMembers(final Symbols.Symbol clazz) {
      return clazz.info().members().filterNot((sym) -> BoxesRunTime.boxToBoolean($anonfun$nonTrivialMembers$1(this, sym)));
   }

   // $FF: synthetic method
   static Scopes.Scope importableMembers$(final Types $this, final Type pre) {
      return $this.importableMembers(pre);
   }

   default Scopes.Scope importableMembers(final Type pre) {
      return pre.members().filter((sym) -> BoxesRunTime.boxToBoolean($anonfun$importableMembers$1(this, sym)));
   }

   // $FF: synthetic method
   static void invalidateTreeTpeCaches$(final Types $this, final Trees.Tree tree, final scala.collection.Set updatedSyms) {
      $this.invalidateTreeTpeCaches(tree, updatedSyms);
   }

   default void invalidateTreeTpeCaches(final Trees.Tree tree, final scala.collection.Set updatedSyms) {
      if (!updatedSyms.isEmpty()) {
         InvalidateTypeCaches invldtr = (SymbolTable)this.new InvalidateTypeCaches(updatedSyms);
         List var10000 = tree.withFilter((t) -> BoxesRunTime.boxToBoolean($anonfun$invalidateTreeTpeCaches$1(t)));
         if (var10000 == null) {
            throw null;
         } else {
            for(List foreach_these = var10000; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               Trees.Tree var5 = (Trees.Tree)foreach_these.head();
               $anonfun$invalidateTreeTpeCaches$2(invldtr, var5);
            }

         }
      }
   }

   // $FF: synthetic method
   static void invalidateCaches$(final Types $this, final Type t, final scala.collection.Set updatedSyms) {
      $this.invalidateCaches(t, updatedSyms);
   }

   default void invalidateCaches(final Type t, final scala.collection.Set updatedSyms) {
      ((SymbolTable)this.new InvalidateTypeCaches(updatedSyms)).invalidate(t);
   }

   Set shorthands();

   Function1 typeContainsTypeVar();

   Function1 typeIsSubTypeOfSerializable();

   default boolean typeIsNothing(final Type tp) {
      while(true) {
         Type var2 = tp.dealias();
         if (!(var2 instanceof PolyType)) {
            if (var2 instanceof TypeRef) {
               Symbols.Symbol var4 = ((TypeRef)var2).sym();
               if (((Definitions)this).definitions().NothingClass().equals(var4)) {
                  return true;
               }
            }

            return false;
         }

         Type resultType = ((PolyType)var2).resultType();
         SymbolTable var10000 = (SymbolTable)this;
         tp = resultType;
         this = var10000;
      }
   }

   default boolean typeIsAnyOrJavaObject(final Type tp) {
      while(true) {
         Type var2 = tp.dealias();
         if (!(var2 instanceof PolyType)) {
            if (var2 instanceof TypeRef) {
               Symbols.Symbol var4 = ((TypeRef)var2).sym();
               Symbols.ClassSymbol var5 = ((Definitions)this).definitions().AnyClass();
               if (var5 == null) {
                  if (var4 == null) {
                     return true;
                  }
               } else if (var5.equals(var4)) {
                  return true;
               }
            }

            if (var2 instanceof ObjectTpeJavaRef) {
               return true;
            }

            return false;
         }

         Type resultType = ((PolyType)var2).resultType();
         SymbolTable var10000 = (SymbolTable)this;
         tp = resultType;
         this = var10000;
      }
   }

   default boolean typeIsAnyExactly(final Type tp) {
      while(true) {
         Type var2 = tp.dealias();
         if (!(var2 instanceof PolyType)) {
            if (var2 instanceof TypeRef) {
               Symbols.Symbol var4 = ((TypeRef)var2).sym();
               Symbols.ClassSymbol var5 = ((Definitions)this).definitions().AnyClass();
               if (var5 == null) {
                  if (var4 == null) {
                     return true;
                  }
               } else if (var5.equals(var4)) {
                  return true;
               }
            }

            return false;
         }

         Type resultType = ((PolyType)var2).resultType();
         SymbolTable var10000 = (SymbolTable)this;
         tp = resultType;
         this = var10000;
      }
   }

   Function1 typeIsHigherKinded();

   // $FF: synthetic method
   static int typeDepth$(final Types $this, final Type tp) {
      return $this.typeDepth(tp);
   }

   default int typeDepth(final Type tp) {
      while(!(tp instanceof TypeRef)) {
         if (tp instanceof RefinedType) {
            RefinedType var5 = (RefinedType)tp;
            List parents = var5.parents();
            Scopes.Scope decls = var5.decls();
            return Depth$.MODULE$.max$extension(((Types)this).maxDepth(parents), Depth$.MODULE$.incr$extension(((Types)this).symTypeDepth(decls.toList()), 1));
         }

         if (tp instanceof TypeBounds) {
            TypeBounds var8 = (TypeBounds)tp;
            Type lo = var8.lo();
            Type hi = var8.hi();
            return Depth$.MODULE$.max$extension(((Types)this).typeDepth(lo), ((Types)this).typeDepth(hi));
         }

         if (tp instanceof MethodType) {
            Type result = ((MethodType)tp).resultType();
            SymbolTable var21 = (SymbolTable)this;
            tp = result;
            this = var21;
         } else {
            if (!(tp instanceof NullaryMethodType)) {
               if (tp instanceof PolyType) {
                  PolyType var13 = (PolyType)tp;
                  List tparams = var13.typeParams();
                  Type result = var13.resultType();
                  return Depth$.MODULE$.max$extension(((Types)this).typeDepth(result), Depth$.MODULE$.incr$extension(((Types)this).symTypeDepth(tparams), 1));
               }

               if (tp instanceof ExistentialType) {
                  ExistentialType var16 = (ExistentialType)tp;
                  List tparams = var16.quantified();
                  Type result = var16.underlying();
                  return Depth$.MODULE$.max$extension(((Types)this).typeDepth(result), Depth$.MODULE$.incr$extension(((Types)this).symTypeDepth(tparams), 1));
               }

               byte apply_depth = 1;
               Depth$ apply_this = Depth$.MODULE$;
               if (apply_depth < -3) {
                  return apply_this.AnyDepth();
               }

               return apply_depth;
            }

            Type result = ((NullaryMethodType)tp).resultType();
            SymbolTable var10000 = (SymbolTable)this;
            tp = result;
            this = var10000;
         }
      }

      TypeRef var2 = (TypeRef)tp;
      Type pre = var2.pre();
      List args = var2.args();
      return Depth$.MODULE$.max$extension(((Types)this).typeDepth(pre), Depth$.MODULE$.incr$extension(((Types)this).maxDepth(args), 1));
   }

   // $FF: synthetic method
   static int maxDepth$(final Types $this, final List tps) {
      return $this.maxDepth(tps);
   }

   default int maxDepth(final List tps) {
      Depth$ maximumBy_this = Depth$.MODULE$;
      List maximumBy_ys = tps;

      int maximumBy_mm;
      for(maximumBy_mm = maximumBy_this.Zero(); !maximumBy_ys.isEmpty(); maximumBy_ys = (List)maximumBy_ys.tail()) {
         Type var5 = (Type)maximumBy_ys.head();
         maximumBy_mm = maximumBy_this.max$extension(maximumBy_mm, this.typeDepth(var5));
      }

      return maximumBy_mm;
   }

   // $FF: synthetic method
   static boolean scala$reflect$internal$Types$$areTrivialTypes$(final Types $this, final List tps) {
      return $this.scala$reflect$internal$Types$$areTrivialTypes(tps);
   }

   default boolean scala$reflect$internal$Types$$areTrivialTypes(final List tps) {
      while(true) {
         if (tps instanceof .colon.colon) {
            .colon.colon var2 = (.colon.colon)tps;
            Type tp = (Type)var2.head();
            List rest = var2.next$access$1();
            if (tp.isTrivial()) {
               SymbolTable var10000 = (SymbolTable)this;
               tps = rest;
               this = var10000;
               continue;
            }

            return false;
         }

         return true;
      }
   }

   ClassTag AnnotatedTypeTag();

   ClassTag BoundedWildcardTypeTag();

   ClassTag ClassInfoTypeTag();

   ClassTag CompoundTypeTag();

   ClassTag ConstantTypeTag();

   ClassTag ExistentialTypeTag();

   ClassTag MethodTypeTag();

   ClassTag NullaryMethodTypeTag();

   ClassTag PolyTypeTag();

   ClassTag RefinedTypeTag();

   ClassTag SingletonTypeTag();

   ClassTag SingleTypeTag();

   ClassTag SuperTypeTag();

   ClassTag ThisTypeTag();

   ClassTag TypeBoundsTag();

   ClassTag TypeRefTag();

   ClassTag TypeTagg();

   // $FF: synthetic method
   static SingleType $anonfun$defineUnderlyingOfSingleType$1(final SingleType tpe$1) {
      return tpe$1;
   }

   private static boolean isNew$1(final Symbols.Symbol clazz, final Type superclazz$1, final ObjectRef bcs$1, final List sbcs$1) {
      if (superclazz$1.baseTypeIndex(clazz) < 0) {
         List p;
         for(p = (List)bcs$1.elem; p != sbcs$1; p = (List)p.tail()) {
            Object var10000 = p.head();
            if (var10000 == null) {
               if (clazz == null) {
                  break;
               }
            } else if (var10000.equals(clazz)) {
               break;
            }
         }

         if (p == sbcs$1) {
            return true;
         }
      }

      return false;
   }

   private List addMixinBaseClasses$1(final List mbcs, final ObjectRef bcs$1, final Type superclazz$1, final List sbcs$1) {
      while(!mbcs.isEmpty()) {
         boolean var11;
         label40: {
            Symbols.Symbol isNew$1_clazz = (Symbols.Symbol)mbcs.head();
            if (superclazz$1.baseTypeIndex(isNew$1_clazz) < 0) {
               List isNew$1_p;
               for(isNew$1_p = (List)bcs$1.elem; isNew$1_p != sbcs$1; isNew$1_p = (List)isNew$1_p.tail()) {
                  Object var10000 = isNew$1_p.head();
                  if (var10000 == null) {
                     if (isNew$1_clazz == null) {
                        break;
                     }
                  } else if (var10000.equals(isNew$1_clazz)) {
                     break;
                  }
               }

               if (isNew$1_p == sbcs$1) {
                  var11 = true;
                  break label40;
               }
            }

            var11 = false;
         }

         Object var9 = null;
         Object var10 = null;
         if (var11) {
            Symbols.Symbol var5 = (Symbols.Symbol)mbcs.head();
            List var13 = ((Types)this).addMixinBaseClasses$1((List)mbcs.tail(), bcs$1, superclazz$1, sbcs$1);
            if (var13 == null) {
               throw null;
            }

            List $colon$colon_this = var13;
            return new .colon.colon(var5, $colon$colon_this);
         }

         SymbolTable var12 = (SymbolTable)this;
         mbcs = (List)mbcs.tail();
         this = var12;
      }

      return (List)bcs$1.elem;
   }

   // $FF: synthetic method
   static Statistics.StackableTimer $anonfun$defineBaseTypeSeqOfCompoundType$1(final Types $this) {
      return ((TypesStats)((SymbolTable)$this).statistics()).baseTypeSeqNanos();
   }

   // $FF: synthetic method
   static Statistics.StackableTimer $anonfun$defineBaseClassesOfCompoundType$1(final Types $this) {
      return ((TypesStats)((SymbolTable)$this).statistics()).baseClassesNanos();
   }

   // $FF: synthetic method
   static Statistics.StackableTimer $anonfun$defineBaseTypeSeqOfTypeRef$1(final Types $this) {
      return ((TypesStats)((SymbolTable)$this).statistics()).baseTypeSeqNanos();
   }

   // $FF: synthetic method
   static boolean $anonfun$rebind$1(final Types $this, final Symbols.Symbol sym) {
      boolean isModuleWithAccessor = ((SymbolTable)$this).phase().assignsFields() && sym.isModuleNotMethod();
      return sym.isType() || !isModuleWithAccessor && sym.isStable() && !sym.hasVolatileType();
   }

   // $FF: synthetic method
   static Symbols.Symbol $anonfun$rebind$2(final Symbols.Symbol sym$2) {
      return sym$2;
   }

   // $FF: synthetic method
   static Symbols.Symbol $anonfun$copyRefinedType$1(final Type result$1, final Symbols.Symbol sym) {
      return result$1.decls().enter(sym.cloneSymbol(result$1.typeSymbol()).resetFlag(2L));
   }

   // $FF: synthetic method
   static Symbols.Symbol $anonfun$copyRefinedType$3(final TypeMaps.SubstSymMap msm$1, final TypeMaps.SubstThisMap substThisMap$1, final Symbols.Symbol x$52) {
      return x$52.modifyInfo((info) -> msm$1.apply(substThisMap$1.apply(info)));
   }

   // $FF: synthetic method
   static void $anonfun$copyRefinedType$2(final List syms1$1, final List syms2$1, final TypeMaps.SubstThisMap substThisMap$1, final TypeMaps.SubstSymMap msm) {
      msm.reset(syms1$1, syms2$1);
      if (syms2$1 == null) {
         throw null;
      } else {
         for(List foreach_these = syms2$1; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
            Symbols.Symbol var5 = (Symbols.Symbol)foreach_these.head();
            $anonfun$copyRefinedType$3(msm, substThisMap$1, var5);
         }

      }
   }

   // $FF: synthetic method
   static boolean $anonfun$appliedType$2(final Types $this, final Type tp) {
      return $this.isUseableAsTypeArg(tp);
   }

   // $FF: synthetic method
   static String $anonfun$appliedType$3(final Type t) {
      return (new StringBuilder(1)).append(t.toString()).append("/").append(t.getClass()).toString();
   }

   // $FF: synthetic method
   static String $anonfun$appliedType$1(final Types $this, final Type tycon$1, final List args$3) {
      StringBuilder var10000 = (new StringBuilder(2)).append(tycon$1).append("[");
      String mkString_sep = ", ";
      if (args$3 == null) {
         throw null;
      } else {
         String mkString_end = "";
         String mkString_start = "";
         String var10001 = IterableOnceOps.mkString$(args$3, mkString_start, mkString_sep, mkString_end);
         Object var71 = null;
         Object var72 = null;
         Object var31 = null;
         String tapp_s = var10000.append(var10001).append("]").toString();
         boolean filterNot_filterCommon_isFlipped = true;
         List filterNot_filterCommon_noneIn$1_l = args$3;

         while(true) {
            if (filterNot_filterCommon_noneIn$1_l.isEmpty()) {
               var75 = scala.collection.immutable.Nil..MODULE$;
               break;
            }

            Object filterNot_filterCommon_noneIn$1_h = filterNot_filterCommon_noneIn$1_l.head();
            List filterNot_filterCommon_noneIn$1_t = (List)filterNot_filterCommon_noneIn$1_l.tail();
            Type var30 = (Type)filterNot_filterCommon_noneIn$1_h;
            if ($this.isUseableAsTypeArg(var30) != filterNot_filterCommon_isFlipped) {
               List filterNot_filterCommon_noneIn$1_allIn$1_remaining = filterNot_filterCommon_noneIn$1_t;

               while(true) {
                  if (filterNot_filterCommon_noneIn$1_allIn$1_remaining.isEmpty()) {
                     var75 = filterNot_filterCommon_noneIn$1_l;
                     break;
                  }

                  Object filterNot_filterCommon_noneIn$1_allIn$1_x = filterNot_filterCommon_noneIn$1_allIn$1_remaining.head();
                  var30 = (Type)filterNot_filterCommon_noneIn$1_allIn$1_x;
                  if ($this.isUseableAsTypeArg(var30) == filterNot_filterCommon_isFlipped) {
                     .colon.colon filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead = new .colon.colon(filterNot_filterCommon_noneIn$1_l.head(), scala.collection.immutable.Nil..MODULE$);
                     List filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filterNot_filterCommon_noneIn$1_l.tail();

                     .colon.colon filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast;
                     for(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead; filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess != filterNot_filterCommon_noneIn$1_allIn$1_remaining; filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.tail()) {
                        .colon.colon filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new .colon.colon(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.head(), scala.collection.immutable.Nil..MODULE$);
                        filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                        filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                     }

                     List filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filterNot_filterCommon_noneIn$1_allIn$1_remaining.tail();
                     List filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next;

                     while(!filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next.isEmpty()) {
                        Object filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_head = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next.head();
                        var30 = (Type)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_head;
                        if ($this.isUseableAsTypeArg(var30) != filterNot_filterCommon_isFlipped) {
                           filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                        } else {
                           while(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy != filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next) {
                              .colon.colon filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new .colon.colon(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.head(), scala.collection.immutable.Nil..MODULE$);
                              filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                              filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                              filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.tail();
                           }

                           filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                           filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                        }
                     }

                     if (!filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.isEmpty()) {
                        filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy);
                     }

                     var75 = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead;
                     Object var42 = null;
                     Object var45 = null;
                     Object var48 = null;
                     Object var51 = null;
                     Object var54 = null;
                     Object var57 = null;
                     Object var60 = null;
                     Object var63 = null;
                     break;
                  }

                  filterNot_filterCommon_noneIn$1_allIn$1_remaining = (List)filterNot_filterCommon_noneIn$1_allIn$1_remaining.tail();
               }

               Object var38 = null;
               Object var40 = null;
               Object var43 = null;
               Object var46 = null;
               Object var49 = null;
               Object var52 = null;
               Object var55 = null;
               Object var58 = null;
               Object var61 = null;
               Object var64 = null;
               break;
            }

            filterNot_filterCommon_noneIn$1_l = filterNot_filterCommon_noneIn$1_t;
         }

         Object var35 = null;
         Object var36 = null;
         Object var37 = null;
         Object var39 = null;
         Object var41 = null;
         Object var44 = null;
         Object var47 = null;
         Object var50 = null;
         Object var53 = null;
         Object var56 = null;
         Object var59 = null;
         Object var62 = null;
         Object var65 = null;
         List filterNot_filterCommon_result = (List)var75;
         Statics.releaseFence();
         Object var76 = filterNot_filterCommon_result;
         filterNot_filterCommon_result = null;
         List map_this = (List)var76;
         if (map_this == scala.collection.immutable.Nil..MODULE$) {
            var76 = scala.collection.immutable.Nil..MODULE$;
         } else {
            .colon.colon map_h = new .colon.colon($anonfun$appliedType$3((Type)map_this.head()), scala.collection.immutable.Nil..MODULE$);
            .colon.colon map_t = map_h;

            for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               .colon.colon map_nx = new .colon.colon($anonfun$appliedType$3((Type)map_rest.head()), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            var76 = map_h;
         }

         map_this = null;
         Object var67 = null;
         Object var68 = null;
         Object var69 = null;
         Object var70 = null;
         String mkString_sep = ", ";
         AbstractIterable mkString_this = (AbstractIterable)var76;
         String var78 = mkString_this.mkString("", mkString_sep, "");
         mkString_this = null;
         Object var33 = null;
         String arg_s = var78;
         return (new StringBuilder(32)).append(tapp_s).append(" includes illegal type argument ").append(arg_s).toString();
      }
   }

   // $FF: synthetic method
   static Type $anonfun$appliedType$5(final Types $this, final List args$3, final Type x$53) {
      return $this.appliedType(x$53, args$3);
   }

   // $FF: synthetic method
   static Symbols.Symbol $anonfun$extensionMethInfo$1(final Symbols.Symbol x$55) {
      return x$55.resetFlag(196608L);
   }

   // $FF: synthetic method
   static Type $anonfun$extensionMethInfo$2(final Symbols.Symbol x$56) {
      return x$56.tpeHK();
   }

   private static Type fixres$1(final Type tp, final Symbols.Symbol clazz$1, final Type selfParamType$1, final List tparamsFromClass$1) {
      return tp.substThisAndSym(clazz$1, selfParamType$1, clazz$1.typeParams(), tparamsFromClass$1);
   }

   private static Type fixtparam$1(final Type tp, final Symbols.Symbol clazz$1, final List tparamsFromClass$1) {
      return tp.substSym(clazz$1.typeParams(), tparamsFromClass$1);
   }

   // $FF: synthetic method
   static Symbols.Symbol $anonfun$extensionMethInfo$3(final Symbols.Symbol clazz$1, final List tparamsFromClass$1, final Symbols.Symbol x$57) {
      return x$57.modifyInfo((tp) -> fixtparam$1(tp, clazz$1, tparamsFromClass$1));
   }

   // $FF: synthetic method
   static boolean $anonfun$existentialAbstraction$1(final Type tpe$4, final Symbols.Symbol sym) {
      return tpe$4.contains(sym);
   }

   // $FF: synthetic method
   static boolean $anonfun$existentialAbstraction$3(final Symbols.Symbol paramTodo$1, final Symbols.Symbol x$58) {
      return x$58.info().contains(paramTodo$1);
   }

   // $FF: synthetic method
   static boolean $anonfun$existentialAbstraction$2(final ObjectRef border$1, final ObjectRef nextBorder$1, final Symbols.Symbol paramTodo) {
      if (((ListBuffer)border$1.elem).exists((x$58) -> BoxesRunTime.boxToBoolean($anonfun$existentialAbstraction$3(paramTodo, x$58)))) {
         ListBuffer var10000 = (ListBuffer)nextBorder$1.elem;
         if (var10000 == null) {
            throw null;
         } else {
            var10000.addOne(paramTodo);
            return false;
         }
      } else {
         return true;
      }
   }

   private List transitiveReferredFrom$1(final Type tpe, final List tparams$2) {
      if (tparams$2 instanceof .colon.colon) {
         .colon.colon var3 = (.colon.colon)tparams$2;
         Symbols.Symbol tparam = (Symbols.Symbol)var3.head();
         List var5 = var3.next$access$1();
         if (scala.collection.immutable.Nil..MODULE$.equals(var5)) {
            if (tpe.contains(tparam)) {
               return tparams$2;
            }

            return scala.collection.immutable.Nil..MODULE$;
         }
      }

      ListBuffer var10000 = scala.collection.mutable.ListBuffer..MODULE$;
      ListBuffer pending = new ListBuffer();
      var10000 = scala.collection.mutable.ListBuffer..MODULE$;
      U create_e = (U)(new ListBuffer());
      ObjectRef var25 = new ObjectRef(create_e);
      create_e = (U)null;
      ObjectRef border = var25;
      ListBuffer partitionInto_ayes = (ListBuffer)border.elem;

      for(List partitionInto_ys = tparams$2; !partitionInto_ys.isEmpty(); partitionInto_ys = (List)partitionInto_ys.tail()) {
         Object partitionInto_y = partitionInto_ys.head();
         Symbols.Symbol var17 = (Symbols.Symbol)partitionInto_y;
         if (tpe.contains(var17)) {
            partitionInto_ayes.addOne(partitionInto_y);
         } else {
            pending.addOne(partitionInto_y);
         }
      }

      Object var19 = null;
      Object var20 = null;
      Object var21 = null;
      ListBuffer var26 = scala.collection.mutable.ListBuffer..MODULE$;
      ListBuffer closed = new ListBuffer();
      var26 = scala.collection.mutable.ListBuffer..MODULE$;
      U create_e = (U)(new ListBuffer());
      ObjectRef var28 = new ObjectRef(create_e);
      create_e = (U)null;

      ListBuffer swap;
      for(ObjectRef nextBorder = var28; !((ListBuffer)border.elem).isEmpty(); nextBorder.elem = swap) {
         ((ListBuffer)nextBorder.elem).clear();
         pending.filterInPlace((paramTodo) -> BoxesRunTime.boxToBoolean($anonfun$existentialAbstraction$2(border, nextBorder, paramTodo)));
         IterableOnce $plus$plus$eq_elems = (ListBuffer)border.elem;
         closed.addAll($plus$plus$eq_elems);
         $plus$plus$eq_elems = null;
         swap = (ListBuffer)border.elem;
         border.elem = (ListBuffer)nextBorder.elem;
      }

      return closed.length() == tparams$2.length() ? tparams$2 : closed.toList();
   }

   // $FF: synthetic method
   static Symbols.Symbol $anonfun$elementExtract$1(final Symbols.Symbol container$1) {
      return container$1;
   }

   // $FF: synthetic method
   static Type $anonfun$transparentShallowTransform$2(final Function1 f$2, final Type x1$2) {
      return (Type)f$2.apply(x1$2);
   }

   private Type loop$2(final Type tp, final Symbols.Symbol container$2, final Function1 f$2) {
      if (tp instanceof AnnotatedType) {
         AnnotatedType var4 = (AnnotatedType)tp;
         Type underlying = var4.underlying();
         Type x$1 = this.loop$2(underlying, container$2, f$2);
         List x$2 = var4.copy$default$1();
         return var4.copy(x$2, x$1);
      } else if (tp instanceof ExistentialType) {
         ExistentialType var8 = (ExistentialType)tp;
         Type underlying = var8.underlying();
         Type x$3 = this.loop$2(underlying, container$2, f$2);
         List x$4 = var8.copy$default$1();
         return var8.copy(x$4, x$3);
      } else if (tp instanceof PolyType) {
         PolyType var12 = (PolyType)tp;
         Type resultType = var12.resultType();
         Type x$5 = this.loop$2(resultType, container$2, f$2);
         List x$6 = var12.copy$default$1();
         return var12.copy(x$6, x$5);
      } else if (tp instanceof NullaryMethodType) {
         NullaryMethodType var16 = (NullaryMethodType)tp;
         Type resultType = var16.resultType();
         return var16.copy(this.loop$2(resultType, container$2, f$2));
      } else {
         Type var10000 = this.elementTransform(container$2, tp, (el) -> this.appliedType((Symbols.Symbol)container$2, (Seq)scala.runtime.ScalaRunTime..MODULE$.wrapRefArray(new Type[]{(Type)f$2.apply(el)})));
         if (var10000 == null) {
            throw null;
         } else {
            Type orElse_this = var10000;
            return orElse_this != orElse_this.scala$reflect$internal$Types$Type$$$outer().NoType() ? orElse_this : (Type)f$2.apply(tp);
         }
      }
   }

   // $FF: synthetic method
   static boolean $anonfun$containsExistential$1(final Type x$60) {
      return x$60.typeSymbol().isExistentiallyBound();
   }

   // $FF: synthetic method
   static boolean $anonfun$existentialsInType$1(final Type x$61) {
      return x$61.typeSymbol().isExistentiallyBound();
   }

   // $FF: synthetic method
   static Symbols.TypeSymbol $anonfun$typeParamsToExistentials$1(final Symbols.Symbol clazz$2, final Symbols.Symbol tparam) {
      Names.TypeName var10000 = tparam.name().toTypeName();
      Position var10001 = clazz$2.pos();
      long newExistential_newFlags = 0L;
      Position newExistential_pos = var10001;
      Names.TypeName newExistential_name = var10000;
      long newExistential_newAbstractType_newFlags = 34359738368L | newExistential_newFlags;
      Symbols.AbstractTypeSymbol var10 = clazz$2.createAbstractTypeSymbol(newExistential_name, newExistential_pos, 16L | newExistential_newAbstractType_newFlags);
      newExistential_name = null;
      newExistential_pos = null;
      return (Symbols.TypeSymbol)((Symbols.TypeSymbol)var10).setInfo(tparam.info().bounds());
   }

   // $FF: synthetic method
   static Symbols.TypeSymbol $anonfun$typeParamsToExistentials$2(final List tparams$3, final List eparams$1, final Symbols.TypeSymbol x$63) {
      return (Symbols.TypeSymbol)x$63.substInfo(tparams$3, eparams$1);
   }

   private static Type loop$3(final Type tp, final Symbols.Symbol owner$2, final Type pre$1) {
      if (tp.isTrivial()) {
         return tp;
      } else if (tp.prefix().typeSymbol().isNonBottomSubClass(owner$2)) {
         Type widened = tp instanceof ConstantType ? tp : tp.widen();
         Type memType = widened.asSeenFrom(pre$1, tp.typeSymbol().owner());
         return tp == widened ? memType : memType.narrow();
      } else {
         return loop$3(tp.prefix(), owner$2, pre$1).memberType(tp.typeSymbol());
      }
   }

   // $FF: synthetic method
   static String $anonfun$nestedMemberType$1(final Type result$2, final Symbols.Symbol sym$3) {
      return (new StringBuilder(27)).append("(").append(result$2).append(").typeSymbol = ").append(result$2.typeSymbol()).append("; expected ").append(sym$3).toString();
   }

   // $FF: synthetic method
   static int $anonfun$symTypeDepth$1(final Types $this, final Symbols.Symbol sym) {
      return $this.infoTypeDepth(sym);
   }

   // $FF: synthetic method
   static int $anonfun$baseTypeSeqDepth$1(final Type t) {
      return t.baseTypeSeqDepth();
   }

   // $FF: synthetic method
   static Tuple2 $anonfun$isPopulated$1(final Symbols.Symbol sym1$1, final Symbols.Symbol sym2$1) {
      return new Tuple2(sym1$1, sym2$1);
   }

   // $FF: synthetic method
   static boolean $anonfun$isPopulated$2(final Type arg1, final Type arg2, final Symbols.Symbol tparam) {
      if (Variance$.MODULE$.isInvariant$extension(tparam.variance())) {
         return arg1.$eq$colon$eq(arg2);
      } else if (arg1 instanceof TypeVar) {
         if (Variance$.MODULE$.isContravariant$extension(tparam.variance())) {
            if (arg1.$less$colon$less(arg2)) {
               return true;
            }
         } else if (arg2.$less$colon$less(arg1)) {
            return true;
         }

         return false;
      } else {
         return true;
      }
   }

   // $FF: synthetic method
   static boolean $anonfun$isPopulated$3(final Types $this, final Type tp2$1, final Type x$64) {
      return $this.isConsistent$1(x$64, tp2$1);
   }

   // $FF: synthetic method
   static boolean $anonfun$isPopulated$4(final Types $this, final Type tp1$1, final Type x$65) {
      return $this.isConsistent$1(tp1$1, x$65);
   }

   private boolean isConsistent$1(final Type tp1, final Type tp2) {
      Type var10000 = tp1.dealias();
      Type var20 = tp2.dealias();
      Type var19 = var10000;
      if (var19 instanceof TypeRef) {
         TypeRef var3 = (TypeRef)var19;
         Type pre1 = var3.pre();
         Symbols.Symbol sym1 = var3.sym();
         List args1 = var3.args();
         if (var20 instanceof TypeRef) {
            Type pre2;
            Symbols.Symbol sym2;
            List args2;
            boolean var10001;
            label60: {
               label59: {
                  TypeRef var7 = (TypeRef)var20;
                  pre2 = var7.pre();
                  sym2 = var7.sym();
                  args2 = var7.args();
                  var25 = (SymbolTable)this;
                  if (sym1 == null) {
                     if (sym2 == null) {
                        break label59;
                     }
                  } else if (sym1.equals(sym2)) {
                     break label59;
                  }

                  var10001 = false;
                  break label60;
               }

               var10001 = true;
            }

            boolean assert_assertion = var10001;
            SymbolTable assert_this = var25;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(new Tuple2(sym1, sym2));
            }

            if (pre1.$eq$colon$eq(pre2)) {
               List forall3_xs3 = sym1.typeParams();
               List forall3_ys1 = args1;
               List forall3_ys2 = args2;

               label48: {
                  for(List forall3_ys3 = forall3_xs3; !forall3_ys1.isEmpty() && !forall3_ys2.isEmpty() && !forall3_ys3.isEmpty(); forall3_ys3 = (List)forall3_ys3.tail()) {
                     var10000 = (Type)forall3_ys1.head();
                     Object var28 = forall3_ys2.head();
                     Symbols.Symbol var18 = (Symbols.Symbol)forall3_ys3.head();
                     Type var17 = (Type)var28;
                     if (!$anonfun$isPopulated$2(var10000, var17, var18)) {
                        var27 = false;
                        break label48;
                     }

                     forall3_ys1 = (List)forall3_ys1.tail();
                     forall3_ys2 = (List)forall3_ys2.tail();
                  }

                  var27 = true;
               }

               Object var21 = null;
               Object var22 = null;
               Object var23 = null;
               Object var24 = null;
               if (var27) {
                  return true;
               }
            }

            return false;
         }
      }

      if (var19 instanceof ExistentialType) {
         return ((ExistentialType)var19).withTypeVars((x$64) -> BoxesRunTime.boxToBoolean($anonfun$isPopulated$3(this, tp2, x$64)));
      } else if (var20 instanceof ExistentialType) {
         return ((ExistentialType)var20).withTypeVars((x$65) -> BoxesRunTime.boxToBoolean($anonfun$isPopulated$4(this, tp1, x$65)));
      } else {
         throw new MatchError(new Tuple2(tp1, tp2));
      }
   }

   // $FF: synthetic method
   static boolean $anonfun$isPopulated$5(final Types $this, final Type tp2$2, final Type tp1$2, final Symbols.Symbol bc) {
      return tp2$2.baseTypeIndex(bc) < 0 || $this.isConsistent$1(tp1$2.baseType(bc), tp2$2.baseType(bc));
   }

   private boolean check$1(final Type tp1, final Type tp2) {
      Symbols.Symbol sym1 = tp1.typeSymbol();
      if (sym1.isClass() && sym1.hasFlag(32L) && !sym1.equals(((Definitions)this).definitions().SingletonClass())) {
         if (!tp1.$less$colon$less(tp2)) {
            Definitions.definitions$ var8 = ((Definitions)this).definitions();
            if (var8 == null) {
               throw null;
            } else {
               if (Definitions.ValueClassDefinitions.isNumericValueClass$(var8, sym1)) {
                  var8 = ((Definitions)this).definitions();
                  Symbols.Symbol isNumericValueClass_sym = tp2.typeSymbol();
                  if (var8 == null) {
                     throw null;
                  }

                  boolean var10 = Definitions.ValueClassDefinitions.isNumericValueClass$(var8, isNumericValueClass_sym);
                  isNumericValueClass_sym = null;
                  if (var10) {
                     return true;
                  }
               }

               return false;
            }
         } else {
            return true;
         }
      } else {
         List var10000 = tp1.baseClasses();
         if (var10000 == null) {
            throw null;
         } else {
            for(List forall_these = var10000; !forall_these.isEmpty(); forall_these = (List)forall_these.tail()) {
               Symbols.Symbol var6 = (Symbols.Symbol)forall_these.head();
               if (!$anonfun$isPopulated$5(this, tp2, tp1, var6)) {
                  return false;
               }
            }

            return true;
         }
      }
   }

   private boolean isSubArg$1(final Type t1, final Type t2, final Symbols.Symbol tparam, final int depth$2) {
      return (tparam.isCovariant() || this.isSubType(t2, t1, depth$2)) && (tparam.isContravariant() || this.isSubType(t1, t2, depth$2));
   }

   // $FF: synthetic method
   static boolean $anonfun$isSubArgs$1(final Types $this, final int depth$2, final Type t1, final Type t2, final Symbols.Symbol tparam) {
      return $this.isSubArg$1(t1, t2, tparam, depth$2);
   }

   private boolean directlySpecializedBy$1(final Symbols.Symbol member, final Symbols.Symbol sym$4, final Type tp$7, final int depth$3) {
      if (member == null) {
         if (sym$4 == null) {
            return true;
         }
      } else if (member.equals(sym$4)) {
         return true;
      }

      if (!this.specializesSym(tp$7.narrow(), member, sym$4.owner().thisType(), sym$4, depth$3)) {
         return false;
      } else {
         return true;
      }
   }

   // $FF: synthetic method
   static boolean $anonfun$specializesSym$1(final Types $this, final Symbols.Symbol sym$4, final Type tp$7, final int depth$3, final Symbols.Symbol member) {
      return $this.directlySpecializedBy$1(member, sym$4, tp$7, depth$3);
   }

   private boolean specializedBy$1(final Symbols.Symbol member, final Symbols.Symbol sym$4, final Type tp$7, final int depth$3) {
      if (member == ((Symbols)this).NoSymbol()) {
         return false;
      } else if (member.isOverloaded()) {
         List var10000 = member.alternatives();
         if (var10000 == null) {
            throw null;
         } else {
            for(List exists_these = var10000; !exists_these.isEmpty(); exists_these = (List)exists_these.tail()) {
               Symbols.Symbol var6 = (Symbols.Symbol)exists_these.head();
               if ($anonfun$specializesSym$1(this, sym$4, tp$7, depth$3, var6)) {
                  return true;
               }
            }

            return false;
         }
      } else {
         return this.directlySpecializedBy$1(member, sym$4, tp$7, depth$3);
      }
   }

   // $FF: synthetic method
   static Tuple5 $anonfun$specializesSym$2(final Type preLo$1, final Symbols.Symbol symLo$1, final Type preHi$1, final Symbols.Symbol symHi$1, final int depth$4) {
      return new Tuple5(preLo$1, symLo$1, preHi$1, symHi$1, new Depth(depth$4));
   }

   private boolean matchesQuantified$1(final List tparams1, final List tparams2, final Type res1, final Type res2, final boolean alwaysMatchSimple$1) {
      return this.sameLength(tparams1, tparams2) && this.matchesType(res1, res2.substSym(tparams2, tparams1), alwaysMatchSimple$1);
   }

   private boolean lastTry$1(final Type tp2$3, final boolean alwaysMatchSimple$1, final Type tp1$3) {
      if (tp2$3 instanceof ExistentialType) {
         Type res2 = ((ExistentialType)tp2$3).underlying();
         if (alwaysMatchSimple$1) {
            return this.matchesType(tp1$3, res2, true);
         }
      }

      if (tp2$3 instanceof MethodType) {
         return false;
      } else if (tp2$3 instanceof PolyType) {
         return false;
      } else {
         return alwaysMatchSimple$1 || tp1$3.$eq$colon$eq(tp2$3);
      }
   }

   // $FF: synthetic method
   static boolean $anonfun$matchesType$1(final Symbols.Symbol x$66, final Symbols.Symbol x$67) {
      return x$66 == x$67;
   }

   private static TypeBounds instantiatedBound$1(final Symbols.Symbol tparam, final Type pre$2, final Symbols.Symbol owner$3, final List tparams$4, final List targs$1) {
      return tparam.info().asSeenFrom(pre$2, owner$3).instantiateTypeParams(tparams$4, targs$1).bounds();
   }

   // $FF: synthetic method
   static boolean $anonfun$isWithinBounds$1(final Type x$68) {
      return !x$68.annotations().isEmpty();
   }

   // $FF: synthetic method
   static TypeBounds $anonfun$isWithinBounds$2(final Type pre$2, final Symbols.Symbol owner$3, final List tparams$4, final List targs$1, final Symbols.Symbol tparam) {
      return instantiatedBound$1(tparam, pre$2, owner$3, tparams$4, targs$1);
   }

   // $FF: synthetic method
   static boolean $anonfun$isWithinBounds$3(final TypeBounds x$69, final Type x$70) {
      return x$69.containsType(x$70);
   }

   // $FF: synthetic method
   static boolean $anonfun$isWithinBounds$4(final Type pre$2, final Symbols.Symbol owner$3, final List tparams$4, final List targs$1, final Symbols.Symbol tparam, final Type targ) {
      return instantiatedBound$1(tparam, pre$2, owner$3, tparams$4, targs$1).containsType(targ);
   }

   // $FF: synthetic method
   static void $anonfun$typeVarsInTypeRev$1(final ObjectRef tvs$1, final Type x0$1) {
      if (x0$1 instanceof TypeVar) {
         TypeVar var2 = (TypeVar)x0$1;
         List var10001 = (List)tvs$1.elem;
         if (var10001 == null) {
            throw null;
         } else {
            List $colon$colon_this = var10001;
            tvs$1.elem = new .colon.colon(var2, $colon$colon_this);
         }
      }
   }

   // $FF: synthetic method
   static boolean $anonfun$suspendingTypeVars$1(final TypeVar x$71) {
      return x$71.scala$reflect$internal$Types$$suspended();
   }

   // $FF: synthetic method
   static void $anonfun$suspendingTypeVars$2(final TypeVar x$72) {
      x$72.scala$reflect$internal$Types$$suspended_$eq(true);
   }

   // $FF: synthetic method
   static boolean $anonfun$stripExistentialsAndTypeVars$1(final Type x0$1) {
      return x0$1 instanceof RefinedType ? true : (x0$1 instanceof TypeVar ? true : x0$1 instanceof ExistentialType);
   }

   // $FF: synthetic method
   static void $anonfun$stripExistentialsAndTypeVars$2(final Types $this, final boolean expandLazyBaseType$1, final List ts$1, final ListBuffer stripped$1, final ListBuffer tparams$5, final Type tp) {
      $this.stripType$1(tp, expandLazyBaseType$1, ts$1, stripped$1, tparams$5);
   }

   private void stripType$1(final Type tp, final boolean expandLazyBaseType$1, final List ts$1, final ListBuffer stripped$1, final ListBuffer tparams$5) {
      while(true) {
         if (tp instanceof RefinedType) {
            RefinedType var6 = (RefinedType)tp;
            if (((Types)this).isIntersectionTypeForLazyBaseType(var6)) {
               if (!expandLazyBaseType$1) {
                  ((SymbolTable)this).devWarning(() -> (new StringBuilder(70)).append("Unexpected RefinedType in stripExistentialsAndTypeVars ").append(ts$1).append(", not expanding").toString());
                  if (stripped$1 == null) {
                     throw null;
                  }

                  stripped$1.addOne(tp);
                  return;
               }

               List var15 = var6.parents();
               if (var15 == null) {
                  throw null;
               }

               for(List foreach_these = var15; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
                  Type var13 = (Type)foreach_these.head();
                  $anonfun$stripExistentialsAndTypeVars$2((Types)this, expandLazyBaseType$1, ts$1, stripped$1, tparams$5, var13);
               }

               return;
            }
         }

         if (tp instanceof ExistentialType) {
            ExistentialType var7 = (ExistentialType)tp;
            List qs = var7.quantified();
            Type underlying = var7.underlying();
            if (tparams$5 == null) {
               throw null;
            }

            tparams$5.addAll(qs);
            SymbolTable var14 = (SymbolTable)this;
            tp = underlying;
            this = var14;
         } else {
            if (tp instanceof TypeVar) {
               TypeVar var10 = (TypeVar)tp;
               TypeConstraints.TypeConstraint constr = var10.constr();
               if (var10.instValid()) {
                  SymbolTable var10000 = (SymbolTable)this;
                  tp = constr.inst();
                  this = var10000;
                  continue;
               }

               if (var10.untouchable()) {
                  if (stripped$1 == null) {
                     throw null;
                  }

                  stripped$1.addOne(var10);
                  return;
               }

               return;
            }

            if (stripped$1 == null) {
               throw null;
            }

            stripped$1.addOne(tp);
            return;
         }
      }
   }

   // $FF: synthetic method
   static void $anonfun$stripExistentialsAndTypeVars$4(final Types $this, final boolean expandLazyBaseType$1, final List ts$1, final ListBuffer stripped$1, final ListBuffer tparams$5, final Type tp) {
      $this.stripType$1(tp, expandLazyBaseType$1, ts$1, stripped$1, tparams$5);
   }

   // $FF: synthetic method
   static Type $anonfun$mergePrefixAndArgs$1(final Type x$74) {
      return x$74.prefix();
   }

   // $FF: synthetic method
   static List $anonfun$mergePrefixAndArgs$2(final Type x$75) {
      return x$75.normalize().typeArgs();
   }

   // $FF: synthetic method
   static boolean $anonfun$mergePrefixAndArgs$3(final List x$76) {
      return x$76.isEmpty();
   }

   // $FF: synthetic method
   static boolean $anonfun$mergePrefixAndArgs$4(final Type argH$1, final List x$77) {
      return ((Type)x$77.head()).$eq$colon$eq(argH$1);
   }

   // $FF: synthetic method
   static boolean $anonfun$mergePrefixAndArgs$5(final Types $this, final List args) {
      return ((Definitions)$this).definitions().isPrimitiveValueClass(((Type)args.head()).typeSymbol());
   }

   // $FF: synthetic method
   static Type $anonfun$mergePrefixAndArgs$6(final List x$78) {
      return (Type)x$78.head();
   }

   // $FF: synthetic method
   static Type $anonfun$mergePrefixAndArgs$10(final Symbols.Symbol x$79) {
      return x$79.typeConstructor();
   }

   private Type applyHK$1(final Type tp, final List hktArgs$1) {
      return this.appliedType(tp, hktArgs$1);
   }

   private Type bindHK$1(final Type tp, final List hktParams$1) {
      return this.typeFun(hktParams$1, tp);
   }

   // $FF: synthetic method
   static Type $anonfun$mergePrefixAndArgs$11(final Types $this, final List hktParams$1, final List hktArgs$1, final Type a) {
      Type bindHK$1_tp = $this.appliedType(a, hktArgs$1);
      return $this.typeFun(hktParams$1, bindHK$1_tp);
   }

   // $FF: synthetic method
   static Type $anonfun$mergePrefixAndArgs$8(final Types $this, final int depth$5, final int variance$1, final IntRef capturedParamIds$1, final ListBuffer capturedParams$1, final Symbols.Symbol tparam, final List as0) {
      List as = (List)as0.distinct();
      if (as == null) {
         throw null;
      } else if (SeqOps.size$(as) == 1) {
         return (Type)as.head();
      } else if (Depth$.MODULE$.isZero$extension(depth$5)) {
         ((SymbolTable)$this).log(() -> {
            StringOps var10000 = scala.collection.StringOps..MODULE$;
            ScalaRunTime var10002 = scala.runtime.ScalaRunTime..MODULE$;
            Object[] var10003 = new Object[2];
            String mkString_sep = ", ";
            String mkString_end = "";
            String mkString_start = "";
            String var10006 = IterableOnceOps.mkString$(as, mkString_start, mkString_sep, mkString_end);
            Object var6 = null;
            Object var7 = null;
            Object var5 = null;
            var10003[0] = var10006;
            var10003[1] = tparam.fullLocationString();
            return var10000.format$extension("Giving up merging args: can't unify %s under %s", var10002.genericWrapArray(var10003));
         });
         return $this.NoType();
      } else {
         List hktParams = tparam.initialize().typeParams();
         if (hktParams == null) {
            throw null;
         } else {
            Object var10000;
            if (hktParams == scala.collection.immutable.Nil..MODULE$) {
               var10000 = scala.collection.immutable.Nil..MODULE$;
            } else {
               .colon.colon map_h = new .colon.colon(((Symbols.Symbol)hktParams.head()).typeConstructor(), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)hktParams.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  .colon.colon map_nx = new .colon.colon(((Symbols.Symbol)map_rest.head()).typeConstructor(), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var10000 = map_h;
            }

            Object var26 = null;
            Object var27 = null;
            Object var28 = null;
            Object var29 = null;
            List hktArgs = (List)var10000;
            if (hktParams.isEmpty()) {
               var10000 = as;
            } else {
               if (as == scala.collection.immutable.Nil..MODULE$) {
                  var10000 = scala.collection.immutable.Nil..MODULE$;
               } else {
                  Type var25 = (Type)as.head();
                  .colon.colon map_h = new .colon.colon($anonfun$mergePrefixAndArgs$11($this, hktParams, hktArgs, var25), scala.collection.immutable.Nil..MODULE$);
                  .colon.colon map_t = map_h;

                  for(List map_rest = (List)as.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                     var25 = (Type)map_rest.head();
                     .colon.colon map_nx = new .colon.colon($anonfun$mergePrefixAndArgs$11($this, hktParams, hktArgs, var25), scala.collection.immutable.Nil..MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var10000 = map_h;
               }

               Object var30 = null;
               Object var31 = null;
               Object var32 = null;
               Object var33 = null;
            }

            List asKinded = (List)var10000;
            if (tparam.variance() == variance$1) {
               return $this.lub(asKinded, Depth$.MODULE$.decr$extension(depth$5, 1));
            } else if (tparam.variance() == Variance$.MODULE$.flip$extension(variance$1)) {
               return $this.glb(asKinded, Depth$.MODULE$.decr$extension(depth$5, 1));
            } else {
               Type l = $this.lub(asKinded, Depth$.MODULE$.decr$extension(depth$5, 1));
               Type g = $this.glb(asKinded, Depth$.MODULE$.decr$extension(depth$5, 1));
               if (l.$less$colon$less(g)) {
                  return l;
               } else {
                  ++capturedParamIds$1.elem;
                  int capturedParamId = capturedParamIds$1.elem;
                  if (hktParams.isEmpty()) {
                     var10000 = $this.TypeBounds().apply(g, l);
                  } else {
                     Type bindHK$1_tp = $this.TypeBounds().apply($this.appliedType(g, hktArgs), $this.appliedType(l, hktArgs));
                     var10000 = $this.typeFun(hktParams, bindHK$1_tp);
                     bindHK$1_tp = null;
                  }

                  Type bounds = (Type)var10000;
                  Symbols.TypeSymbol qvar = (Symbols.TypeSymbol)$this.commonOwner(as).freshExistential("", capturedParamId).setInfo(bounds);
                  if (capturedParams$1 == null) {
                     throw null;
                  } else {
                     capturedParams$1.addOne(qvar);
                     if (qvar == null) {
                        throw null;
                     } else {
                        return ((Symbols.Symbol)qvar).tpe_$times();
                     }
                  }
               }
            }
         }
      }
   }

   // $FF: synthetic method
   static Type $anonfun$mergePrefixAndArgs$12(final Type x$80) {
      return x$80.prefix();
   }

   // $FF: synthetic method
   static String $anonfun$addMember$1() {
      return "Adding member NoSymbol";
   }

   // $FF: synthetic method
   static void $anonfun$addMember$2(final Types $this, final Type thistp$1, final Symbols.Symbol sym$5, final int depth$6, final Type tp$8, final Symbols.Symbol alt) {
      if ($this.specializesSym(thistp$1, sym$5, thistp$1, alt, depth$6)) {
         tp$8.decls().unlink(alt);
      }
   }

   // $FF: synthetic method
   static boolean $anonfun$isJavaVarargsAncestor$1(final Types $this, final Symbols.Symbol m) {
      return ((Definitions)$this).definitions().isJavaVarArgsMethod(m);
   }

   // $FF: synthetic method
   static boolean $anonfun$inheritsJavaVarArgsMethod$1(final Types $this, final Symbols.Symbol clazz) {
      return $this.isJavaVarargsAncestor(clazz);
   }

   // $FF: synthetic method
   static boolean $anonfun$nonTrivialMembers$1(final Types $this, final Symbols.Symbol sym) {
      return ((Definitions)$this).definitions().isUniversalMember(sym);
   }

   // $FF: synthetic method
   static boolean $anonfun$importableMembers$1(final Types $this, final Symbols.Symbol sym) {
      return ((Definitions)$this).definitions().isImportable(sym);
   }

   // $FF: synthetic method
   static boolean $anonfun$invalidateTreeTpeCaches$1(final Trees.Tree t) {
      return t.tpe() != null;
   }

   // $FF: synthetic method
   static void $anonfun$invalidateTreeTpeCaches$2(final InvalidateTypeCaches invldtr$1, final Trees.Tree t) {
      invldtr$1.invalidate(t.tpe());
   }

   // $FF: synthetic method
   static boolean $anonfun$typeContainsTypeVar$1(final Type x$81) {
      return x$81 instanceof TypeVar;
   }

   // $FF: synthetic method
   static boolean $anonfun$typeContainsTypeVar$2(final TypeMaps.FindTypeCollector collector$1, final Type tp) {
      return ((Option)collector$1.collect(tp)).isDefined();
   }

   // $FF: synthetic method
   static boolean $anonfun$typeIsSubTypeOfSerializable$1(final Types $this, final Type tp) {
      return tp.$less$colon$less(((Definitions)$this).definitions().SerializableTpe());
   }

   // $FF: synthetic method
   static boolean $anonfun$typeIsHigherKinded$1(final Type tp) {
      return tp.isHigherKinded();
   }

   // $FF: synthetic method
   static int $anonfun$maxDepth$1(final Types $this, final Type tp) {
      return $this.typeDepth(tp);
   }

   static void $init$(final Types $this) {
      $this.scala$reflect$internal$Types$$explainSwitch_$eq(false);
      if (scala.Predef..MODULE$.Set() == null) {
         throw null;
      } else {
         $this.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$emptySymbolSet_$eq(scala.collection.immutable.Set.EmptySet..MODULE$);
         $this.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$breakCycles_$eq(BoxesRunTime.unboxToBoolean(((SymbolTable)$this).settings().breakCycles().value()));
         $this.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$sharperSkolems_$eq(System.getProperty("scalac.experimental.sharper-skolems") != null);
         $this.scala$reflect$internal$Types$$_skolemizationLevel_$eq(0);
         $this.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$_intersectionWitness_$eq(((SymbolTable)$this).perRunCaches().newWeakMap());
         ReusableInstance$ var10001 = ReusableInstance$.MODULE$;
         Function0 var8 = () -> $this.SubstSymMap().apply();
         boolean apply_enabled = ((SymbolTable)$this).isCompilerUniverse();
         Function0 apply_make = var8;
         ReusableInstance var9;
         if (apply_enabled) {
            int apply_apply_apply_initialSize = 4;
            var9 = new ReusableInstance(apply_make, apply_apply_apply_initialSize);
         } else {
            int apply_apply_initialSize = -1;
            var9 = new ReusableInstance(apply_make, apply_apply_initialSize);
         }

         Object var7 = null;
         $this.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$copyRefinedTypeSSM_$eq(var9);
         $this.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$initialUniquesCapacity_$eq(4096);
         $this.scala$reflect$internal$Types$$uniqueRunId_$eq(0);
         $this.scala$reflect$internal$Types$_setter_$missingAliasException_$eq((SymbolTable)$this.new MissingAliasControl());
         $this.scala$reflect$internal$Types$$_basetypeRecursions_$eq(0);
         $this.scala$reflect$internal$Types$_setter_$scala$reflect$internal$Types$$_pendingBaseTypes_$eq(new HashSet());
         $this.scala$reflect$internal$Types$$_indent_$eq("");
         Set var10 = scala.Predef..MODULE$.Set();
         ArraySeq apply_elems = scala.runtime.ScalaRunTime..MODULE$.wrapRefArray(new String[]{"scala.collection.immutable.List", "scala.collection.immutable.Nil", "scala.collection.immutable.Seq", "scala.collection.immutable.IndexedSeq", "scala.collection.mutable.StringBuilder", "scala.collection.Traversable", "scala.collection.Iterable", "scala.collection.Iterator"});
         if (var10 == null) {
            throw null;
         } else {
            Object var11 = IterableFactory.apply$(var10, apply_elems);
            Object var6 = null;
            $this.scala$reflect$internal$Types$_setter_$shorthands_$eq((Set)var11);
            $this.scala$reflect$internal$Types$_setter_$typeContainsTypeVar_$eq((tp) -> BoxesRunTime.boxToBoolean($anonfun$typeContainsTypeVar$2(collector$1, tp)));
            $this.scala$reflect$internal$Types$_setter_$typeIsSubTypeOfSerializable_$eq((tp) -> BoxesRunTime.boxToBoolean($anonfun$typeIsSubTypeOfSerializable$1($this, tp)));
            $this.scala$reflect$internal$Types$_setter_$typeIsHigherKinded_$eq((tp) -> BoxesRunTime.boxToBoolean($anonfun$typeIsHigherKinded$1(tp)));
            $this.scala$reflect$internal$Types$_setter_$AnnotatedTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(AnnotatedType.class));
            $this.scala$reflect$internal$Types$_setter_$BoundedWildcardTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(BoundedWildcardType.class));
            $this.scala$reflect$internal$Types$_setter_$ClassInfoTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(ClassInfoType.class));
            $this.scala$reflect$internal$Types$_setter_$CompoundTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(CompoundType.class));
            $this.scala$reflect$internal$Types$_setter_$ConstantTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(ConstantType.class));
            $this.scala$reflect$internal$Types$_setter_$ExistentialTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(ExistentialType.class));
            $this.scala$reflect$internal$Types$_setter_$MethodTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(MethodType.class));
            $this.scala$reflect$internal$Types$_setter_$NullaryMethodTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(NullaryMethodType.class));
            $this.scala$reflect$internal$Types$_setter_$PolyTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(PolyType.class));
            $this.scala$reflect$internal$Types$_setter_$RefinedTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(RefinedType.class));
            $this.scala$reflect$internal$Types$_setter_$SingletonTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(SingletonType.class));
            $this.scala$reflect$internal$Types$_setter_$SingleTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(SingleType.class));
            $this.scala$reflect$internal$Types$_setter_$SuperTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(SuperType.class));
            $this.scala$reflect$internal$Types$_setter_$ThisTypeTag_$eq(scala.reflect.ClassTag..MODULE$.apply(ThisType.class));
            $this.scala$reflect$internal$Types$_setter_$TypeBoundsTag_$eq(scala.reflect.ClassTag..MODULE$.apply(TypeBounds.class));
            $this.scala$reflect$internal$Types$_setter_$TypeRefTag_$eq(scala.reflect.ClassTag..MODULE$.apply(TypeRef.class));
            $this.scala$reflect$internal$Types$_setter_$TypeTagg_$eq(scala.reflect.ClassTag..MODULE$.apply(Type.class));
         }
      }
   }

   // $FF: synthetic method
   static Object $anonfun$copyRefinedType$2$adapted(final List syms1$1, final List syms2$1, final TypeMaps.SubstThisMap substThisMap$1, final TypeMaps.SubstSymMap msm) {
      $anonfun$copyRefinedType$2(syms1$1, syms2$1, substThisMap$1, msm);
      return BoxedUnit.UNIT;
   }

   // $FF: synthetic method
   static Object $anonfun$isWithinBounds$1$adapted(final Type x$68) {
      return BoxesRunTime.boxToBoolean($anonfun$isWithinBounds$1(x$68));
   }

   // $FF: synthetic method
   static Object $anonfun$suspendingTypeVars$1$adapted(final TypeVar x$71) {
      return BoxesRunTime.boxToBoolean($anonfun$suspendingTypeVars$1(x$71));
   }

   // $FF: synthetic method
   static Object $anonfun$suspendingTypeVars$2$adapted(final TypeVar x$72) {
      $anonfun$suspendingTypeVars$2(x$72);
      return BoxedUnit.UNIT;
   }

   // $FF: synthetic method
   static Object $anonfun$stripExistentialsAndTypeVars$1$adapted(final Type x0$1) {
      return BoxesRunTime.boxToBoolean($anonfun$stripExistentialsAndTypeVars$1(x0$1));
   }

   // $FF: synthetic method
   static Object $anonfun$stripExistentialsAndTypeVars$4$adapted(final Types $this, final boolean expandLazyBaseType$1, final List ts$1, final ListBuffer stripped$1, final ListBuffer tparams$5, final Type tp) {
      $anonfun$stripExistentialsAndTypeVars$4($this, expandLazyBaseType$1, ts$1, stripped$1, tparams$5, tp);
      return BoxedUnit.UNIT;
   }

   // $FF: synthetic method
   static Object $anonfun$mergePrefixAndArgs$3$adapted(final List x$76) {
      return BoxesRunTime.boxToBoolean($anonfun$mergePrefixAndArgs$3(x$76));
   }

   // $FF: synthetic method
   static Object $anonfun$mergePrefixAndArgs$4$adapted(final Type argH$1, final List x$77) {
      return BoxesRunTime.boxToBoolean($anonfun$mergePrefixAndArgs$4(argH$1, x$77));
   }

   // $FF: synthetic method
   static Object $anonfun$mergePrefixAndArgs$5$adapted(final Types $this, final List args) {
      return BoxesRunTime.boxToBoolean($anonfun$mergePrefixAndArgs$5($this, args));
   }

   // $FF: synthetic method
   static Object $anonfun$addMember$2$adapted(final Types $this, final Type thistp$1, final Symbols.Symbol sym$5, final int depth$6, final Type tp$8, final Symbols.Symbol alt) {
      $anonfun$addMember$2($this, thistp$1, sym$5, depth$6, tp$8, alt);
      return BoxedUnit.UNIT;
   }

   // $FF: synthetic method
   static Object $anonfun$isJavaVarargsAncestor$1$adapted(final Types $this, final Symbols.Symbol m) {
      return BoxesRunTime.boxToBoolean($anonfun$isJavaVarargsAncestor$1($this, m));
   }

   // $FF: synthetic method
   static Object $anonfun$inheritsJavaVarArgsMethod$1$adapted(final Types $this, final Symbols.Symbol clazz) {
      return BoxesRunTime.boxToBoolean($anonfun$inheritsJavaVarArgsMethod$1($this, clazz));
   }

   // $FF: synthetic method
   static Object $anonfun$invalidateTreeTpeCaches$2$adapted(final InvalidateTypeCaches invldtr$1, final Trees.Tree t) {
      $anonfun$invalidateTreeTpeCaches$2(invldtr$1, t);
      return BoxedUnit.UNIT;
   }

   // $FF: synthetic method
   static Object $anonfun$appliedType$2$adapted(final Types $this, final Type tp) {
      return BoxesRunTime.boxToBoolean($anonfun$appliedType$2($this, tp));
   }

   // $FF: synthetic method
   static Object $anonfun$existentialAbstraction$1$adapted(final Type tpe$4, final Symbols.Symbol sym) {
      return BoxesRunTime.boxToBoolean($anonfun$existentialAbstraction$1(tpe$4, sym));
   }

   // $FF: synthetic method
   static Object $anonfun$isPopulated$2$adapted(final Type arg1, final Type arg2, final Symbols.Symbol tparam) {
      return BoxesRunTime.boxToBoolean($anonfun$isPopulated$2(arg1, arg2, tparam));
   }

   // $FF: synthetic method
   static Object $anonfun$isPopulated$5$adapted(final Types $this, final Type tp2$2, final Type tp1$2, final Symbols.Symbol bc) {
      return BoxesRunTime.boxToBoolean($anonfun$isPopulated$5($this, tp2$2, tp1$2, bc));
   }

   // $FF: synthetic method
   static Object $anonfun$specializesSym$1$adapted(final Types $this, final Symbols.Symbol sym$4, final Type tp$7, final int depth$3, final Symbols.Symbol member) {
      return BoxesRunTime.boxToBoolean($anonfun$specializesSym$1($this, sym$4, tp$7, depth$3, member));
   }

   // $FF: synthetic method
   static Object $anonfun$stripExistentialsAndTypeVars$2$adapted(final Types $this, final boolean expandLazyBaseType$1, final List ts$1, final ListBuffer stripped$1, final ListBuffer tparams$5, final Type tp) {
      $anonfun$stripExistentialsAndTypeVars$2($this, expandLazyBaseType$1, ts$1, stripped$1, tparams$5, tp);
      return BoxedUnit.UNIT;
   }

   // $FF: synthetic method
   private static Object $deserializeLambda$(SerializedLambda var0) {
      return Class.lambdaDeserialize<invokedynamic>(var0);
   }

   private class substTypeMapCache$ {
      private TypeMaps.SubstTypeMap cached;
      // $FF: synthetic field
      private final SymbolTable $outer;

      public TypeMaps.SubstTypeMap apply(final List from, final List to) {
         if (this.$outer.isCompilerUniverse()) {
            TypeMaps.SubstTypeMap var10000 = this.cached;
            if (var10000 == null) {
               throw null;
            } else {
               if (var10000.accessFrom() == from) {
                  var10000 = this.cached;
                  if (var10000 == null) {
                     throw null;
                  }

                  if (var10000.accessTo() == to) {
                     return this.cached;
                  }
               }

               this.cached = this.$outer.new SubstTypeMap(from, to);
               return this.cached;
            }
         } else {
            return this.$outer.new SubstTypeMap(from, to);
         }
      }

      public substTypeMapCache$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
            this.cached = Types.this.new SubstTypeMap(scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$);
         }
      }
   }

   public interface SimpleTypeProxy {
      Type underlying();

      default boolean isTrivial() {
         return ((Type)this).underlying().isTrivial();
      }

      default boolean isHigherKinded() {
         return ((Type)this).underlying().isHigherKinded();
      }

      default Type typeConstructor() {
         return ((Type)this).underlying().typeConstructor();
      }

      default boolean isError() {
         return ((Type)this).underlying().isError();
      }

      default boolean isErroneous() {
         return ((Type)this).underlying().isErroneous();
      }

      default int paramSectionCount() {
         return ((Type)this).underlying().paramSectionCount();
      }

      default List paramss() {
         return ((Type)this).underlying().paramss();
      }

      default List params() {
         return ((Type)this).underlying().params();
      }

      default List paramTypes() {
         return ((Type)this).underlying().paramTypes();
      }

      default Symbols.Symbol termSymbol() {
         return ((Type)this).underlying().termSymbol();
      }

      default Symbols.Symbol termSymbolDirect() {
         return ((Type)this).underlying().termSymbolDirect();
      }

      default List typeParams() {
         return ((Type)this).underlying().typeParams();
      }

      default Symbols.Symbol typeSymbol() {
         return ((Type)this).underlying().typeSymbol();
      }

      default Symbols.Symbol typeSymbolDirect() {
         return ((Type)this).underlying().typeSymbolDirect();
      }

      default Type widen() {
         return ((Type)this).underlying().widen();
      }

      default Type typeOfThis() {
         return ((Type)this).underlying().typeOfThis();
      }

      default TypeBounds bounds() {
         return ((Type)this).underlying().bounds();
      }

      default Type lowerBound() {
         return ((Type)this).underlying().lowerBound();
      }

      default Type upperBound() {
         return ((Type)this).underlying().upperBound();
      }

      default List parents() {
         return ((Type)this).underlying().parents();
      }

      default Type prefix() {
         return ((Type)this).underlying().prefix();
      }

      default Type prefixDirect() {
         return ((Type)this).underlying().prefixDirect();
      }

      default Scopes.Scope decls() {
         return ((Type)this).underlying().decls();
      }

      default Type baseType(final Symbols.Symbol clazz) {
         return ((Type)this).underlying().baseType(clazz);
      }

      default BaseTypeSeqs.BaseTypeSeq baseTypeSeq() {
         return ((Type)this).underlying().baseTypeSeq();
      }

      default int baseTypeSeqDepth() {
         return ((Type)this).underlying().baseTypeSeqDepth();
      }

      default List baseClasses() {
         return ((Type)this).underlying().baseClasses();
      }

      // $FF: synthetic method
      Types scala$reflect$internal$Types$SimpleTypeProxy$$$outer();

      static void $init$(final SimpleTypeProxy $this) {
      }
   }

   public interface RewrappingTypeProxy extends SimpleTypeProxy {
      default Type maybeRewrap(final Type newtp) {
         return newtp == ((Type)this).underlying() ? (Type)this : this.rewrap(newtp);
      }

      Type rewrap(final Type newtp);

      default Type widen() {
         return this.maybeRewrap(((Type)this).underlying().widen());
      }

      default Type narrow() {
         return ((Type)this).underlying().narrow();
      }

      default Type deconst() {
         return this.maybeRewrap(((Type)this).underlying().deconst());
      }

      default Type resultType() {
         return this.maybeRewrap(((Type)this).underlying().resultType());
      }

      default Type resultType(final List actuals) {
         return this.maybeRewrap(((Type)this).underlying().resultType(actuals));
      }

      default int paramSectionCount() {
         return 0;
      }

      default List paramss() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      default List params() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      default List paramTypes() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      default List typeArgs() {
         return ((Type)this).underlying().typeArgs();
      }

      // $FF: synthetic method
      static Type instantiateTypeParams$(final RewrappingTypeProxy $this, final List formals, final List actuals) {
         return $this.instantiateTypeParams(formals, actuals);
      }

      default Type instantiateTypeParams(final List formals, final List actuals) {
         return ((Type)this).underlying().instantiateTypeParams(formals, actuals);
      }

      default Type skolemizeExistential(final Symbols.Symbol owner, final Object origin) {
         return ((Type)this).underlying().skolemizeExistential(owner, origin);
      }

      default Type normalize() {
         return this.maybeRewrap(((Type)this).underlying().normalize());
      }

      default Type etaExpand() {
         return this.maybeRewrap(((Type)this).underlying().etaExpand());
      }

      default Type dealias() {
         return this.maybeRewrap(((Type)this).underlying().dealias());
      }

      default Type cloneInfo(final Symbols.Symbol owner) {
         return this.maybeRewrap(((Type)this).underlying().cloneInfo(owner));
      }

      default Type atOwner(final Symbols.Symbol owner) {
         return this.maybeRewrap(((Type)this).underlying().atOwner(owner));
      }

      default String prefixString() {
         return ((Type)this).underlying().prefixString();
      }

      default boolean isComplete() {
         return ((Type)this).underlying().isComplete();
      }

      default void complete(final Symbols.Symbol sym) {
         ((Type)this).underlying().complete(sym);
      }

      default void load(final Symbols.Symbol sym) {
         ((Type)this).underlying().load(sym);
      }

      default Type withAnnotations(final List annots) {
         return this.maybeRewrap(((Type)this).underlying().withAnnotations(annots));
      }

      default Type withoutAnnotations() {
         return this.maybeRewrap(((Type)this).underlying().withoutAnnotations());
      }

      // $FF: synthetic method
      Types scala$reflect$internal$Types$RewrappingTypeProxy$$$outer();

      static void $init$(final RewrappingTypeProxy $this) {
      }
   }

   public class UnmappableTree$ extends Trees.Tree implements Trees.TermTree, Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public String toString() {
         return "<unmappable>";
      }

      public void tpe_$eq(final Type t) {
         NoType$ var2 = this.$outer.NoType();
         if (t == null) {
            if (var2 != null) {
               throw new UnsupportedOperationException((new StringBuilder(32)).append("tpe_=(").append(t).append(") inapplicable for <empty>").toString());
            }
         } else if (!t.equals(var2)) {
            throw new UnsupportedOperationException((new StringBuilder(32)).append("tpe_=(").append(t).append(") inapplicable for <empty>").toString());
         }

      }

      public String productPrefix() {
         return "UnmappableTree";
      }

      public int productArity() {
         return 0;
      }

      public Object productElement(final int x$1) {
         return Statics.ioobe(x$1);
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof UnmappableTree$;
      }

      public UnmappableTree$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
            super.setType(Types.this.NoType());
         }
      }
   }

   public abstract class TypeApiImpl extends scala.reflect.api.Types.TypeApi {
      public Symbols.Symbol declaration(final Names.Name name) {
         return ((Type)this).decl(name);
      }

      public Scopes.Scope declarations() {
         return ((Type)this).decls();
      }

      public List typeArguments() {
         return ((Type)this).typeArgs();
      }

      public Type erasure() {
         Type var1 = (Type)this;
         if (var1 instanceof ConstantType) {
            ConstantType var2 = (ConstantType)var1;
            if (!this.scala$reflect$internal$Types$TypeApiImpl$$$outer().ConstantType().unapply(var2).isEmpty()) {
               return ((Type)this).widen().erasure();
            }
         }

         Type result = this.scala$reflect$internal$Types$TypeApiImpl$$$outer().transformedType((Type)this);
         Type var4 = result.normalize();
         Type var10000;
         if (var4 instanceof PolyType) {
            PolyType var5 = (PolyType)var4;
            List undets = var5.typeParams();
            Type underlying = var5.resultType();
            var10000 = this.scala$reflect$internal$Types$TypeApiImpl$$$outer().existentialAbstraction(undets, underlying, this.scala$reflect$internal$Types$TypeApiImpl$$$outer().existentialAbstraction$default$3());
         } else {
            var10000 = result;
         }

         result = var10000;
         result = result.map((tpe) -> {
            if (tpe instanceof PackageTypeRef) {
               PackageTypeRef var2 = (PackageTypeRef)tpe;
               return this.scala$reflect$internal$Types$TypeApiImpl$$$outer().ThisType().apply(var2.sym());
            } else {
               return tpe;
            }
         });
         return result;
      }

      public Type substituteSymbols(final List from, final List to) {
         return ((Type)this).substSym(from, to);
      }

      public Type substituteTypes(final List from, final List to) {
         return ((Type)this).subst(from, to);
      }

      public boolean isSpliceable() {
         return this instanceof TypeRef && ((Type)this).typeSymbol().isAbstractType() && !((Type)this).typeSymbol().isExistential();
      }

      public Type companion() {
         Symbols.Symbol sym = ((Type)this).typeSymbolDirect();
         if (sym.isModule() && !sym.hasPackageFlag()) {
            Symbols.Symbol var2 = sym.companionSymbol();
            if (var2 == null) {
               throw null;
            } else {
               return var2.tpe_$times();
            }
         } else if (sym.isModuleClass() && !sym.isPackageClass()) {
            Symbols.Symbol var10000 = sym.sourceModule().companionSymbol();
            if (var10000 == null) {
               throw null;
            } else {
               return var10000.tpe_$times();
            }
         } else {
            return (Type)(sym.isClass() && !sym.isModuleClass() && !sym.isPackageClass() ? sym.companionSymbol().info() : this.scala$reflect$internal$Types$TypeApiImpl$$$outer().NoType());
         }
      }

      public List paramLists() {
         return ((Type)this).paramss();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$TypeApiImpl$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return var0.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public abstract class Type extends TypeApiImpl implements AnnotationInfos.Annotatable {
      public List staticAnnotations() {
         return AnnotationInfos.Annotatable.staticAnnotations$(this);
      }

      public Object addThrowsAnnotation(final Symbols.Symbol throwableSym) {
         return AnnotationInfos.Annotatable.addThrowsAnnotation$(this, throwableSym);
      }

      public boolean hasAnnotation(final Symbols.Symbol cls) {
         return AnnotationInfos.Annotatable.hasAnnotation$(this, cls);
      }

      public Option getAnnotation(final Symbols.Symbol cls) {
         return AnnotationInfos.Annotatable.getAnnotation$(this, cls);
      }

      public Object removeAnnotation(final Symbols.Symbol cls) {
         return AnnotationInfos.Annotatable.removeAnnotation$(this, cls);
      }

      public boolean isTrivial() {
         return false;
      }

      public boolean isHigherKinded() {
         return false;
      }

      public boolean takesTypeArgs() {
         return this.isHigherKinded();
      }

      public final boolean isStable() {
         return this.scala$reflect$internal$Types$Type$$$outer().definitions().isStable(this);
      }

      public final boolean isVolatile() {
         return this.scala$reflect$internal$Types$Type$$$outer().definitions().isVolatile(this);
      }

      public boolean isStructuralRefinement() {
         return false;
      }

      public boolean isImmediatelyDependent() {
         return false;
      }

      public boolean isDependentMethodType() {
         return false;
      }

      public boolean isWildcard() {
         return false;
      }

      public boolean isError() {
         Symbols.Symbol var10000 = this.typeSymbol();
         if (var10000 == null) {
            throw null;
         } else {
            if (!var10000.hasFlag(4294967296L)) {
               var10000 = this.termSymbol();
               if (var10000 == null) {
                  throw null;
               }

               if (!var10000.hasFlag(4294967296L)) {
                  return false;
               }
            }

            return true;
         }
      }

      public boolean isErroneous() {
         return BoxesRunTime.unboxToBoolean(this.scala$reflect$internal$Types$Type$$$outer().ErroneousCollector().collect(this));
      }

      public boolean isFinalType() {
         return this.typeSymbol().hasOnlyBottomSubclasses() && this.prefix().isStable();
      }

      public boolean isComplete() {
         return true;
      }

      public boolean isShowAsInfixType() {
         return false;
      }

      public void complete(final Symbols.Symbol sym) {
      }

      public void forceDirectSuperclasses() {
      }

      public Symbols.Symbol termSymbol() {
         return this.scala$reflect$internal$Types$Type$$$outer().NoSymbol();
      }

      public Symbols.Symbol typeSymbol() {
         return this.scala$reflect$internal$Types$Type$$$outer().NoSymbol();
      }

      public Symbols.Symbol termSymbolDirect() {
         return this.termSymbol();
      }

      public Symbols.Symbol typeSymbolDirect() {
         return this.typeSymbol();
      }

      public Type underlying() {
         return this;
      }

      public Type widen() {
         return this;
      }

      public Type deconst() {
         return this;
      }

      public Type typeOfThis() {
         return this.typeSymbol().typeOfThis();
      }

      public Type narrow() {
         if (this.scala$reflect$internal$Types$Type$$$outer().phase().erasedTypes()) {
            return this;
         } else {
            Symbols.Symbol cowner = this.scala$reflect$internal$Types$Type$$$outer().commonOwner(this);
            SymbolTable var10000 = this.scala$reflect$internal$Types$Type$$$outer();
            List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
            .colon.colon var10001 = new .colon.colon(this, $colon$colon_this);
            $colon$colon_this = null;
            return var10000.refinedType(var10001, cowner, this.scala$reflect$internal$Types$Type$$$outer().EmptyScope(), cowner.pos()).narrow();
         }
      }

      public TypeBounds bounds() {
         return this.scala$reflect$internal$Types$Type$$$outer().TypeBounds().apply(this.lowerBound(), this.upperBound());
      }

      public Type lowerBound() {
         return this;
      }

      public Type upperBound() {
         return this;
      }

      public List parents() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      public Type firstParent() {
         return !this.parents().isEmpty() ? (Type)this.parents().head() : this.scala$reflect$internal$Types$Type$$$outer().definitions().ObjectTpe();
      }

      public Type prefix() {
         return this.scala$reflect$internal$Types$Type$$$outer().NoType();
      }

      public Type prefixDirect() {
         return this.prefix();
      }

      public List prefixChain() {
         if (this instanceof TypeRef) {
            Type pre = ((TypeRef)this).pre();
            List var5 = pre.prefixChain();
            if (var5 == null) {
               throw null;
            } else {
               List $colon$colon_this = var5;
               return new .colon.colon(pre, $colon$colon_this);
            }
         } else if (this instanceof SingleType) {
            Type pre = ((SingleType)this).pre();
            List var10000 = pre.prefixChain();
            if (var10000 == null) {
               throw null;
            } else {
               List $colon$colon_this = var10000;
               return new .colon.colon(pre, $colon$colon_this);
            }
         } else {
            return scala.collection.immutable.Nil..MODULE$;
         }
      }

      public Type typeConstructor() {
         return this;
      }

      public List typeArgs() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      public List dummyArgs() {
         List var10000 = this.typeParams();
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               return scala.collection.immutable.Nil..MODULE$;
            } else {
               .colon.colon map_h = new .colon.colon(((Symbols.Symbol)map_this.head()).typeConstructor(), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  .colon.colon map_nx = new .colon.colon(((Symbols.Symbol)map_rest.head()).typeConstructor(), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               return map_h;
            }
         }
      }

      public Type resultType() {
         return this;
      }

      public Type resultType(final List actuals) {
         return this;
      }

      public Type resultApprox() {
         return this.scala$reflect$internal$Types$Type$$$outer().ApproximateDependentMap().apply(this.resultType());
      }

      public final Type finalResultType() {
         return this.scala$reflect$internal$Types$Type$$$outer().definitions().finalResultType(this);
      }

      public int paramSectionCount() {
         return 0;
      }

      public List paramss() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      public List params() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      public List paramTypes() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      public List typeParams() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      public Type instantiateTypeParams(final List formals, final List actuals) {
         SymbolTable var10000 = this.scala$reflect$internal$Types$Type$$$outer();
         if (var10000 == null) {
            throw null;
         } else {
            return (Type)(Collections.sameLength$(var10000, formals, actuals) ? this.subst(formals, actuals) : this.scala$reflect$internal$Types$Type$$$outer().ErrorType());
         }
      }

      public Type skolemizeExistential(final Symbols.Symbol owner, final Object origin) {
         return this;
      }

      public Type skolemizeExistential() {
         return this.skolemizeExistential(this.scala$reflect$internal$Types$Type$$$outer().NoSymbol(), (Object)null);
      }

      public Type normalize() {
         return this;
      }

      public Type etaExpand() {
         return this;
      }

      public Type dealias() {
         return this;
      }

      public final Type dealiasWiden() {
         while(true) {
            Type widened = this.widen();
            if (this != widened) {
               this = widened;
            } else {
               Type dealiased = this.dealias();
               if (this == dealiased) {
                  return this;
               }

               this = dealiased;
            }
         }
      }

      public List dealiasWidenChain() {
         Type widened = this.widen();
         Object var10000;
         if (this != widened) {
            var10000 = widened.dealiasWidenChain();
         } else {
            Type betaReduced = this.betaReduce();
            var10000 = this != betaReduced ? betaReduced.dealiasWidenChain() : scala.collection.immutable.Nil..MODULE$;
         }

         return ((List)var10000).$colon$colon(this);
      }

      public Type betaReduce() {
         return this;
      }

      public Scopes.Scope decls() {
         return this.scala$reflect$internal$Types$Type$$$outer().EmptyScope();
      }

      public Symbols.Symbol decl(final Names.Name name) {
         return this.findDecl(name, 0L);
      }

      public List nonPrivateDecls() {
         return this.decls().filterNot((x$2) -> BoxesRunTime.boxToBoolean($anonfun$nonPrivateDecls$1(x$2))).toList();
      }

      public Symbols.Symbol nonPrivateDecl(final Names.Name name) {
         return this.findDecl(name, 4L);
      }

      public Scopes.Scope members() {
         return this.membersBasedOnFlags(0L, 0L);
      }

      public Scopes.Scope nonPrivateMembers() {
         return this.membersBasedOnFlags(4398113619972L, 0L);
      }

      public Scopes.Scope nonPrivateMembersAdmitting(final long admit) {
         return this.membersBasedOnFlags(4398113619972L & ~admit, 0L);
      }

      public Scopes.Scope implicitMembers() {
         Symbols.Symbol var1 = this.typeSymbolDirect();
         return var1 instanceof Symbols.ModuleClassSymbol ? ((Symbols.ModuleClassSymbol)var1).implicitMembers() : this.membersBasedOnFlags(4398113619968L, 512L);
      }

      public Scopes.Scope deferredMembers() {
         return this.membersBasedOnFlags(4398113619968L, 16L);
      }

      public Symbols.Symbol member(final Names.Name name) {
         return this.memberBasedOnName(name, 4398113619968L);
      }

      public Symbols.Symbol nonPrivateMember(final Names.Name name) {
         return this.memberBasedOnName(name, 4398113619972L);
      }

      public boolean hasNonPrivateMember(final Names.Name name) {
         return BoxesRunTime.unboxToBoolean((this.scala$reflect$internal$Types$Type$$$outer().new HasMember(this, name, 4398113619972L, 0L)).apply());
      }

      public Symbols.Symbol packageObject() {
         return this.member(this.scala$reflect$internal$Types$Type$$$outer().nme().PACKAGE());
      }

      public Symbols.Symbol nonPrivateMemberAdmitting(final Names.Name name, final long admit) {
         return this.memberBasedOnName(name, 4398113619972L & ~admit);
      }

      public Symbols.Symbol nonLocalMember(final Names.Name name) {
         return this.memberBasedOnName(name, 4398114144256L);
      }

      public Scopes.Scope membersBasedOnFlags(final long excludedFlags, final long requiredFlags) {
         return this.findMembers(excludedFlags, requiredFlags);
      }

      public Symbols.Symbol memberBasedOnName(final Names.Name name, final long excludedFlags) {
         return this.findMember(name, excludedFlags, 0L, false);
      }

      public Type baseType(final Symbols.Symbol clazz) {
         return this.scala$reflect$internal$Types$Type$$$outer().NoType();
      }

      public Type asSeenFrom(final Type pre, final Symbols.Symbol clazz) {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var41 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$Type$$$outer().settings();
         MutableSettings var42 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings areStatisticsEnabled$extension_$this = var42;
         boolean var43 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
         areStatisticsEnabled$extension_$this = null;
         Tuple2 var49;
         if (var43) {
            Statistics var44 = this.scala$reflect$internal$Types$Type$$$outer().statistics();
            Statistics.TimerStack pushTimer_timers = ((TypesStats)this.scala$reflect$internal$Types$Type$$$outer().statistics()).typeOpsStack();
            if (var44 == null) {
               throw null;
            }

            Statistics pushTimer_this = var44;
            MutableSettings.SettingsOps$ var45 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var46 = MutableSettings$.MODULE$;
            MutableSettings pushTimer_enabled_SettingsOps_settings = pushTimer_this.scala$reflect$internal$util$Statistics$$settings;
            MutableSettings var47 = pushTimer_enabled_SettingsOps_settings;
            pushTimer_enabled_SettingsOps_settings = null;
            MutableSettings pushTimer_enabled_areStatisticsEnabled$extension_$this = var47;
            boolean var48 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(pushTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            pushTimer_enabled_areStatisticsEnabled$extension_$this = null;
            var49 = var48 && pushTimer_timers != null ? pushTimer_timers.push($anonfun$asSeenFrom$1(this)) : null;
            Object var30 = null;
            Object var31 = null;
         } else {
            var49 = null;
         }

         Tuple2 start = var49;

         try {
            label222: {
               if (!this.isTrivial()) {
                  label220: {
                     if (this.scala$reflect$internal$Types$Type$$$outer().phase().erasedTypes()) {
                        Symbols.Symbol var50 = pre.typeSymbol();
                        Symbols.ClassSymbol var4 = this.scala$reflect$internal$Types$Type$$$outer().definitions().ArrayClass();
                        if (var50 == null) {
                           if (var4 != null) {
                              break label220;
                           }
                        } else if (!var50.equals(var4)) {
                           break label220;
                        }
                     }

                     if (!this.scala$reflect$internal$Types$Type$$$outer().skipPrefixOf(pre, clazz)) {
                        var51 = false;
                        break label222;
                     }
                  }
               }

               var51 = true;
            }

            if (var51) {
               var52 = this;
            } else {
               TypeMaps.AsSeenFromMap m = this.scala$reflect$internal$Types$Type$$$outer().new AsSeenFromMap(pre.normalize(), clazz);
               Type tp = m.apply(this);
               Type tp1 = this.scala$reflect$internal$Types$Type$$$outer().existentialAbstraction(m.capturedParams(), tp, this.scala$reflect$internal$Types$Type$$$outer().existentialAbstraction$default$3());
               var52 = m.capturedSkolems().isEmpty() ? tp1 : this.scala$reflect$internal$Types$Type$$$outer().deriveType(m.capturedSkolems(), (x$3) -> x$3.cloneSymbol().setFlag(65536L), tp1);
            }
         } finally {
            MutableSettings.SettingsOps$ var10001 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var53 = MutableSettings$.MODULE$;
            MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$Type$$$outer().settings();
            MutableSettings var54 = SettingsOps_settings;
            SettingsOps_settings = null;
            MutableSettings areStatisticsEnabled$extension_$thisx = var54;
            boolean var55 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$thisx.YstatisticsEnabled().value());
            areStatisticsEnabled$extension_$thisx = null;
            if (var55) {
               Statistics var56 = this.scala$reflect$internal$Types$Type$$$outer().statistics();
               Statistics.TimerStack popTimer_timers = ((TypesStats)this.scala$reflect$internal$Types$Type$$$outer().statistics()).typeOpsStack();
               if (var56 == null) {
                  throw null;
               }

               Statistics popTimer_this = var56;
               MutableSettings.SettingsOps$ var57 = MutableSettings.SettingsOps$.MODULE$;
               MutableSettings$ var58 = MutableSettings$.MODULE$;
               MutableSettings popTimer_enabled_SettingsOps_settings = popTimer_this.scala$reflect$internal$util$Statistics$$settings;
               MutableSettings var59 = popTimer_enabled_SettingsOps_settings;
               popTimer_enabled_SettingsOps_settings = null;
               MutableSettings popTimer_enabled_areStatisticsEnabled$extension_$this = var59;
               boolean var60 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(popTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
               popTimer_enabled_areStatisticsEnabled$extension_$this = null;
               if (var60 && popTimer_timers != null) {
                  popTimer_timers.pop(start);
               }

               Object var35 = null;
               Object var36 = null;
            }

         }

         return var52;
      }

      public Type memberInfo(final Symbols.Symbol sym) {
         return sym.info().asSeenFrom(this, sym.owner());
      }

      public Type memberType(final Symbols.Symbol sym) {
         return sym instanceof Symbols.MethodSymbol ? ((Symbols.MethodSymbol)sym).typeAsMemberOf(this) : this.computeMemberType(sym);
      }

      public Type computeMemberType(final Symbols.Symbol sym) {
         Type var2 = sym.tpeHK();
         if (var2 instanceof OverloadedType) {
            List alts = ((OverloadedType)var2).alternatives();
            return this.scala$reflect$internal$Types$Type$$$outer().new OverloadedType(this, alts);
         } else {
            return (Type)(sym == this.scala$reflect$internal$Types$Type$$$outer().NoSymbol() ? this.scala$reflect$internal$Types$Type$$$outer().NoType() : var2.asSeenFrom(this, sym.owner()));
         }
      }

      public Type subst(final List from, final List to) {
         return from.isEmpty() ? this : this.scala$reflect$internal$Types$Type$$$outer().scala$reflect$internal$Types$$substTypeMapCache().apply(from, to).apply(this);
      }

      public Type substSym(final List from, final List to) {
         return from != to && !from.isEmpty() ? this.scala$reflect$internal$Types$Type$$$outer().SubstSymMap().apply(from, to).apply(this) : this;
      }

      public Type substThis(final Symbols.Symbol from, final Type to) {
         return (this.scala$reflect$internal$Types$Type$$$outer().new SubstThisMap(from, to)).apply(this);
      }

      public Type substThis(final Symbols.Symbol from, final Symbols.Symbol to) {
         return this.substThis(from, to.thisType());
      }

      public Type substThisAndSym(final Symbols.Symbol from, final Type to, final List symsFrom, final List symsTo) {
         return symsFrom == symsTo ? this.substThis(from, to) : this.substThis(from, to).substSym(symsFrom, symsTo);
      }

      public FilterMapForeach withFilter(final Function1 p) {
         return new FilterMapForeach(p);
      }

      public final Type orElse(final Function0 alt) {
         return this != this.scala$reflect$internal$Types$Type$$$outer().NoType() ? this : (Type)alt.apply();
      }

      public Option find(final Function1 p) {
         return (Option)(this.scala$reflect$internal$Types$Type$$$outer().new FindTypeCollector(p)).collect(this);
      }

      public void foreach(final Function1 f) {
         (this.scala$reflect$internal$Types$Type$$$outer().new ForEachTypeTraverser(f)).traverse(this);
      }

      public List collect(final PartialFunction pf) {
         return (this.scala$reflect$internal$Types$Type$$$outer().new CollectTypeCollector(pf)).collect(this);
      }

      public Type map(final Function1 f) {
         return (new TypeMaps.TypeMap(f) {
            private final Function1 f$1;

            public Type apply(final Type x) {
               return (Type)this.f$1.apply(x.mapOver(this));
            }

            public {
               this.f$1 = f$1;
            }
         }).apply(this);
      }

      public boolean exists(final Function1 p) {
         return !this.find(p).isEmpty();
      }

      public boolean contains(final Symbols.Symbol sym) {
         return BoxesRunTime.unboxToBoolean((this.scala$reflect$internal$Types$Type$$$outer().new ContainsCollector(sym)).collect(this));
      }

      public boolean $less$colon$less(final Type that) {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var6 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$Type$$$outer().settings();
         MutableSettings var7 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings areStatisticsEnabled$extension_$this = var7;
         boolean var8 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
         areStatisticsEnabled$extension_$this = null;
         if (var8) {
            return this.stat_$less$colon$less(that);
         } else if (this != that) {
            if (this.scala$reflect$internal$Types$Type$$$outer().scala$reflect$internal$Types$$explainSwitch()) {
               if (this.scala$reflect$internal$Types$Type$$$outer().explain("<:", (x$4, x$5) -> BoxesRunTime.boxToBoolean($anonfun$$less$colon$less$1(this, x$4, x$5)), this, that)) {
                  return true;
               }
            } else if (this.scala$reflect$internal$Types$Type$$$outer().isSubType(this, that, this.scala$reflect$internal$Types$Type$$$outer().isSubType$default$3())) {
               return true;
            }

            return false;
         } else {
            return true;
         }
      }

      public boolean matchesPattern(final Type that) {
         if (!this.$less$colon$less(that)) {
            boolean var10000;
            label53: {
               if (that != null) {
                  Option var2 = this.scala$reflect$internal$Types$Type$$$outer().ArrayTypeRef().unapply(that);
                  if (!var2.isEmpty()) {
                     Type elem2 = (Type)var2.get();
                     if (elem2.typeConstructor().isHigherKinded()) {
                        Option var4 = this.scala$reflect$internal$Types$Type$$$outer().ArrayTypeRef().unapply(this);
                        var10000 = !var4.isEmpty() ? ((Type)var4.get()).matchesPattern(elem2) : false;
                        break label53;
                     }
                  }
               }

               if (that instanceof TypeRef) {
                  List args = ((TypeRef)that).args();
                  SymbolTable var15 = this.scala$reflect$internal$Types$Type$$$outer();
                  if (args == null) {
                     throw null;
                  }

                  Object var10001;
                  if (args == scala.collection.immutable.Nil..MODULE$) {
                     var10001 = scala.collection.immutable.Nil..MODULE$;
                  } else {
                     .colon.colon map_h = new .colon.colon(((Type)args.head()).typeSymbol(), scala.collection.immutable.Nil..MODULE$);
                     .colon.colon map_t = map_h;

                     for(List map_rest = (List)args.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                        .colon.colon map_nx = new .colon.colon(((Type)map_rest.head()).typeSymbol(), scala.collection.immutable.Nil..MODULE$);
                        map_t.next_$eq(map_nx);
                        map_t = map_nx;
                     }

                     Statics.releaseFence();
                     var10001 = map_h;
                  }

                  Object var11 = null;
                  Object var12 = null;
                  Object var13 = null;
                  Object var14 = null;
                  Type that1 = var15.existentialAbstraction((List)var10001, that, this.scala$reflect$internal$Types$Type$$$outer().existentialAbstraction$default$3());
                  if (that != that1 && this.$less$colon$less(that1)) {
                     this.scala$reflect$internal$Types$Type$$$outer().debuglog(() -> (new StringBuilder(62)).append(this).append(".matchesPattern(").append(that).append(") depended on discarding args and testing <:< ").append(that1).toString());
                     var10000 = true;
                  } else {
                     var10000 = false;
                  }
               } else {
                  var10000 = false;
               }
            }

            if (!var10000) {
               return false;
            }
         }

         return true;
      }

      public boolean stat_$less$colon$less(final Type that) {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var38 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$Type$$$outer().settings();
         MutableSettings var39 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings areStatisticsEnabled$extension_$this = var39;
         boolean var40 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
         areStatisticsEnabled$extension_$this = null;
         if (var40) {
            Statistics var41 = this.scala$reflect$internal$Types$Type$$$outer().statistics();
            Statistics.Counter incCounter_c = ((TypesStats)this.scala$reflect$internal$Types$Type$$$outer().statistics()).subtypeCount();
            if (var41 == null) {
               throw null;
            }

            Statistics incCounter_this = var41;
            MutableSettings.SettingsOps$ var42 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var43 = MutableSettings$.MODULE$;
            MutableSettings incCounter_enabled_SettingsOps_settings = incCounter_this.scala$reflect$internal$util$Statistics$$settings;
            MutableSettings var44 = incCounter_enabled_SettingsOps_settings;
            incCounter_enabled_SettingsOps_settings = null;
            MutableSettings incCounter_enabled_areStatisticsEnabled$extension_$this = var44;
            boolean var45 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(incCounter_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            incCounter_enabled_areStatisticsEnabled$extension_$this = null;
            if (var45 && incCounter_c != null) {
               incCounter_c.value_$eq(incCounter_c.value() + 1);
            }

            Object var23 = null;
            Object var24 = null;
         }

         MutableSettings.SettingsOps$ var46 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var47 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$Type$$$outer().settings();
         MutableSettings var48 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings areStatisticsEnabled$extension_$this = var48;
         boolean var49 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
         areStatisticsEnabled$extension_$this = null;
         Tuple2 var55;
         if (var49) {
            Statistics var50 = this.scala$reflect$internal$Types$Type$$$outer().statistics();
            Statistics.TimerStack pushTimer_timers = ((TypesStats)this.scala$reflect$internal$Types$Type$$$outer().statistics()).typeOpsStack();
            if (var50 == null) {
               throw null;
            }

            Statistics pushTimer_this = var50;
            MutableSettings.SettingsOps$ var51 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var52 = MutableSettings$.MODULE$;
            MutableSettings pushTimer_enabled_SettingsOps_settings = pushTimer_this.scala$reflect$internal$util$Statistics$$settings;
            MutableSettings var53 = pushTimer_enabled_SettingsOps_settings;
            pushTimer_enabled_SettingsOps_settings = null;
            MutableSettings pushTimer_enabled_areStatisticsEnabled$extension_$this = var53;
            boolean var54 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(pushTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            pushTimer_enabled_areStatisticsEnabled$extension_$this = null;
            var55 = var54 && pushTimer_timers != null ? pushTimer_timers.push($anonfun$stat_$less$colon$less$1(this)) : null;
            Object var28 = null;
            Object var29 = null;
         } else {
            var55 = null;
         }

         Tuple2 start;
         label126: {
            start = var55;
            if (this != that) {
               label125: {
                  if (this.scala$reflect$internal$Types$Type$$$outer().scala$reflect$internal$Types$$explainSwitch()) {
                     if (this.scala$reflect$internal$Types$Type$$$outer().explain("<:", (x$7, x$8) -> BoxesRunTime.boxToBoolean($anonfun$stat_$less$colon$less$2(this, x$7, x$8)), this, that)) {
                        break label125;
                     }
                  } else if (this.scala$reflect$internal$Types$Type$$$outer().isSubType(this, that, this.scala$reflect$internal$Types$Type$$$outer().isSubType$default$3())) {
                     break label125;
                  }

                  var56 = false;
                  break label126;
               }
            }

            var56 = true;
         }

         boolean result = var56;
         MutableSettings.SettingsOps$ var57 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var58 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$Type$$$outer().settings();
         MutableSettings var59 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings areStatisticsEnabled$extension_$this = var59;
         boolean var60 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
         areStatisticsEnabled$extension_$this = null;
         if (var60) {
            Statistics var61 = this.scala$reflect$internal$Types$Type$$$outer().statistics();
            Statistics.TimerStack popTimer_timers = ((TypesStats)this.scala$reflect$internal$Types$Type$$$outer().statistics()).typeOpsStack();
            if (var61 == null) {
               throw null;
            }

            Statistics popTimer_this = var61;
            MutableSettings.SettingsOps$ var62 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var63 = MutableSettings$.MODULE$;
            MutableSettings popTimer_enabled_SettingsOps_settings = popTimer_this.scala$reflect$internal$util$Statistics$$settings;
            MutableSettings var64 = popTimer_enabled_SettingsOps_settings;
            popTimer_enabled_SettingsOps_settings = null;
            MutableSettings popTimer_enabled_areStatisticsEnabled$extension_$this = var64;
            boolean var65 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(popTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            popTimer_enabled_areStatisticsEnabled$extension_$this = null;
            if (var65 && popTimer_timers != null) {
               popTimer_timers.pop(start);
            }
         }

         return result;
      }

      public boolean weak_$less$colon$less(final Type that) {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var38 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$Type$$$outer().settings();
         MutableSettings var39 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings areStatisticsEnabled$extension_$this = var39;
         boolean var40 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
         areStatisticsEnabled$extension_$this = null;
         if (var40) {
            Statistics var41 = this.scala$reflect$internal$Types$Type$$$outer().statistics();
            Statistics.Counter incCounter_c = ((TypesStats)this.scala$reflect$internal$Types$Type$$$outer().statistics()).subtypeCount();
            if (var41 == null) {
               throw null;
            }

            Statistics incCounter_this = var41;
            MutableSettings.SettingsOps$ var42 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var43 = MutableSettings$.MODULE$;
            MutableSettings incCounter_enabled_SettingsOps_settings = incCounter_this.scala$reflect$internal$util$Statistics$$settings;
            MutableSettings var44 = incCounter_enabled_SettingsOps_settings;
            incCounter_enabled_SettingsOps_settings = null;
            MutableSettings incCounter_enabled_areStatisticsEnabled$extension_$this = var44;
            boolean var45 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(incCounter_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            incCounter_enabled_areStatisticsEnabled$extension_$this = null;
            if (var45 && incCounter_c != null) {
               incCounter_c.value_$eq(incCounter_c.value() + 1);
            }

            Object var23 = null;
            Object var24 = null;
         }

         MutableSettings.SettingsOps$ var46 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var47 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$Type$$$outer().settings();
         MutableSettings var48 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings areStatisticsEnabled$extension_$this = var48;
         boolean var49 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
         areStatisticsEnabled$extension_$this = null;
         Tuple2 var55;
         if (var49) {
            Statistics var50 = this.scala$reflect$internal$Types$Type$$$outer().statistics();
            Statistics.TimerStack pushTimer_timers = ((TypesStats)this.scala$reflect$internal$Types$Type$$$outer().statistics()).typeOpsStack();
            if (var50 == null) {
               throw null;
            }

            Statistics pushTimer_this = var50;
            MutableSettings.SettingsOps$ var51 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var52 = MutableSettings$.MODULE$;
            MutableSettings pushTimer_enabled_SettingsOps_settings = pushTimer_this.scala$reflect$internal$util$Statistics$$settings;
            MutableSettings var53 = pushTimer_enabled_SettingsOps_settings;
            pushTimer_enabled_SettingsOps_settings = null;
            MutableSettings pushTimer_enabled_areStatisticsEnabled$extension_$this = var53;
            boolean var54 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(pushTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            pushTimer_enabled_areStatisticsEnabled$extension_$this = null;
            var55 = var54 && pushTimer_timers != null ? pushTimer_timers.push($anonfun$weak_$less$colon$less$1(this)) : null;
            Object var28 = null;
            Object var29 = null;
         } else {
            var55 = null;
         }

         Tuple2 start;
         label126: {
            start = var55;
            if (this != that) {
               label125: {
                  if (this.scala$reflect$internal$Types$Type$$$outer().scala$reflect$internal$Types$$explainSwitch()) {
                     if (this.scala$reflect$internal$Types$Type$$$outer().explain("weak_<:", (tp1, tp2) -> BoxesRunTime.boxToBoolean($anonfun$weak_$less$colon$less$2(this, tp1, tp2)), this, that)) {
                        break label125;
                     }
                  } else if (this.scala$reflect$internal$Types$Type$$$outer().isWeakSubType(this, that)) {
                     break label125;
                  }

                  var56 = false;
                  break label126;
               }
            }

            var56 = true;
         }

         boolean result = var56;
         MutableSettings.SettingsOps$ var57 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var58 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$Type$$$outer().settings();
         MutableSettings var59 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings areStatisticsEnabled$extension_$this = var59;
         boolean var60 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
         areStatisticsEnabled$extension_$this = null;
         if (var60) {
            Statistics var61 = this.scala$reflect$internal$Types$Type$$$outer().statistics();
            Statistics.TimerStack popTimer_timers = ((TypesStats)this.scala$reflect$internal$Types$Type$$$outer().statistics()).typeOpsStack();
            if (var61 == null) {
               throw null;
            }

            Statistics popTimer_this = var61;
            MutableSettings.SettingsOps$ var62 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var63 = MutableSettings$.MODULE$;
            MutableSettings popTimer_enabled_SettingsOps_settings = popTimer_this.scala$reflect$internal$util$Statistics$$settings;
            MutableSettings var64 = popTimer_enabled_SettingsOps_settings;
            popTimer_enabled_SettingsOps_settings = null;
            MutableSettings popTimer_enabled_areStatisticsEnabled$extension_$this = var64;
            boolean var65 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(popTimer_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            popTimer_enabled_areStatisticsEnabled$extension_$this = null;
            if (var65 && popTimer_timers != null) {
               popTimer_timers.pop(start);
            }
         }

         return result;
      }

      public boolean $eq$colon$eq(final Type that) {
         if (this != that) {
            if (this.scala$reflect$internal$Types$Type$$$outer().scala$reflect$internal$Types$$explainSwitch()) {
               if (this.scala$reflect$internal$Types$Type$$$outer().explain("=", (tp1, tp2) -> BoxesRunTime.boxToBoolean($anonfun$$eq$colon$eq$1(this, tp1, tp2)), this, that)) {
                  return true;
               }
            } else if (this.scala$reflect$internal$Types$Type$$$outer().isSameType(this, that)) {
               return true;
            }

            return false;
         } else {
            return true;
         }
      }

      public boolean matches(final Type that) {
         SymbolTable var10000 = this.scala$reflect$internal$Types$Type$$$outer();
         boolean matchesType_alwaysMatchSimple = !this.scala$reflect$internal$Types$Type$$$outer().phase().erasedTypes();
         if (var10000 == null) {
            throw null;
         } else {
            return var10000.matchesType(this, that, matchesType_alwaysMatchSimple);
         }
      }

      public boolean looselyMatches(final Type that) {
         SymbolTable var10000 = this.scala$reflect$internal$Types$Type$$$outer();
         boolean matchesType_alwaysMatchSimple = true;
         if (var10000 == null) {
            throw null;
         } else {
            return var10000.matchesType(this, that, matchesType_alwaysMatchSimple);
         }
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeq() {
         return this.scala$reflect$internal$Types$Type$$$outer().baseTypeSingletonSeq(this);
      }

      public int baseTypeSeqDepth() {
         byte apply_depth = 1;
         Depth$ apply_this = Depth$.MODULE$;
         return apply_depth < -3 ? apply_this.AnyDepth() : apply_depth;
      }

      public List baseClasses() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      public int baseTypeIndex(final Symbols.Symbol sym) {
         return this.baseTypeSeq().baseTypeIndex(sym);
      }

      public Type cloneInfo(final Symbols.Symbol owner) {
         return this;
      }

      public Type atOwner(final Symbols.Symbol owner) {
         return this;
      }

      public String objectPrefix() {
         return "object ";
      }

      public String packagePrefix() {
         return "package ";
      }

      public String trimPrefix(final String str) {
         return scala.collection.StringOps..MODULE$.stripPrefix$extension(scala.collection.StringOps..MODULE$.stripPrefix$extension(str, this.objectPrefix()), this.packagePrefix());
      }

      public String prefixString() {
         String pre = this.trimPrefix(this.toString());
         return this.isShowAsInfixType() ? (new StringBuilder(3)).append("(").append(pre).append(")#").toString() : (new StringBuilder(1)).append(pre).append("#").toString();
      }

      public final String toString() {
         if (!this.scala$reflect$internal$Types$Type$$$outer().isCompilerUniverse()) {
            this.scala$reflect$internal$Types$Type$$$outer().definitions().fullyInitializeType(this);
         }

         return this.scala$reflect$internal$Types$Type$$$outer().typeToString(this);
      }

      public String safeToString() {
         return super.toString();
      }

      public String toLongString() {
         String str = this.toString();
         String var2 = "type";
         if (str != null) {
            if (str.equals(var2)) {
               return this.widen().toString();
            }
         }

         if (str.endsWith(".type") && !this.typeSymbol().isModuleClass()) {
            if (this.widen() instanceof RefinedType) {
               return String.valueOf(this.widen());
            } else {
               String var10000 = this.widen().toString().trim();
               String var3 = "";
               if (var10000 != null) {
                  if (var10000.equals(var3)) {
                     return str;
                  }
               }

               return (new StringBuilder(24)).append(str).append(" (with underlying type ").append(this.widen()).append(")").toString();
            }
         } else {
            return str;
         }
      }

      public String directObjectString() {
         return this.safeToString();
      }

      public String nameAndArgsString() {
         return this.typeSymbol().name().toString();
      }

      public final boolean isAny() {
         return this.typeSymbolDirect() == this.scala$reflect$internal$Types$Type$$$outer().definitions().AnyClass();
      }

      public final boolean isNothing() {
         return this.typeSymbolDirect() == this.scala$reflect$internal$Types$Type$$$outer().definitions().NothingClass();
      }

      public boolean isGround() {
         boolean var10000;
         if (this instanceof ThisType) {
            var10000 = true;
         } else if (this.scala$reflect$internal$Types$Type$$$outer().NoPrefix().equals(this)) {
            var10000 = true;
         } else if (this.scala$reflect$internal$Types$Type$$$outer().WildcardType().equals(this)) {
            var10000 = true;
         } else if (this.scala$reflect$internal$Types$Type$$$outer().NoType().equals(this)) {
            var10000 = true;
         } else if (this.scala$reflect$internal$Types$Type$$$outer().ErrorType().equals(this)) {
            var10000 = true;
         } else {
            label30: {
               if (this instanceof ConstantType) {
                  ConstantType var1 = (ConstantType)this;
                  if (!this.scala$reflect$internal$Types$Type$$$outer().ConstantType().unapply(var1).isEmpty()) {
                     var10000 = true;
                     break label30;
                  }
               }

               var10000 = false;
            }
         }

         if (var10000) {
            return true;
         } else {
            return this.scala$reflect$internal$Types$Type$$$outer().typeVarToOriginMap().apply(this) == this;
         }
      }

      public void load(final Symbols.Symbol sym) {
      }

      private Symbols.Symbol findDecl(final Names.Name name, final long excludedFlags) {
         List alts = scala.collection.immutable.Nil..MODULE$;
         Symbols.Symbol sym = this.scala$reflect$internal$Types$Type$$$outer().NoSymbol();

         for(Scopes.ScopeEntry e = this.decls().lookupEntry(name); e != null; e = this.decls().lookupNextEntry(e)) {
            if (!e.sym().hasFlag(excludedFlags)) {
               label38: {
                  Symbols.NoSymbol var7 = this.scala$reflect$internal$Types$Type$$$outer().NoSymbol();
                  if (sym == null) {
                     if (var7 == null) {
                        break label38;
                     }
                  } else if (sym.equals(var7)) {
                     break label38;
                  }

                  if (alts.isEmpty()) {
                     List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
                     .colon.colon var10000 = new .colon.colon(sym, $colon$colon_this);
                     $colon$colon_this = null;
                     alts = var10000;
                  }

                  Symbols.Symbol var8 = e.sym();
                  alts = alts.$colon$colon(var8);
                  continue;
               }

               sym = e.sym();
            }
         }

         if (alts.isEmpty()) {
            return sym;
         } else {
            return ((Symbols.Symbol)this.baseClasses().head()).newOverloaded(this, alts);
         }
      }

      public Scopes.Scope findMembers(final long excludedFlags, final long requiredFlags) {
         if (this.isGround()) {
            return this.findMembersInternal$1(excludedFlags, requiredFlags);
         } else {
            SymbolTable var10000 = this.scala$reflect$internal$Types$Type$$$outer();
            List suspendingTypeVars_tvs = this.scala$reflect$internal$Types$Type$$$outer().scala$reflect$internal$Types$$typeVarsInTypeRev(this);
            if (var10000 == null) {
               throw null;
            } else {
               BitSet suspendingTypeVars_bitSetByPredicate_bs = new BitSet();
               List suspendingTypeVars_bitSetByPredicate_ys = suspendingTypeVars_tvs;

               for(int suspendingTypeVars_bitSetByPredicate_i = 0; !suspendingTypeVars_bitSetByPredicate_ys.isEmpty(); ++suspendingTypeVars_bitSetByPredicate_i) {
                  if (((TypeVar)suspendingTypeVars_bitSetByPredicate_ys.head()).scala$reflect$internal$Types$$suspended()) {
                     suspendingTypeVars_bitSetByPredicate_bs.add(suspendingTypeVars_bitSetByPredicate_i);
                  }

                  suspendingTypeVars_bitSetByPredicate_ys = (List)suspendingTypeVars_bitSetByPredicate_ys.tail();
               }

               Object var22 = null;
               Object var23 = null;
               BitSet suspendingTypeVars_saved = suspendingTypeVars_bitSetByPredicate_bs;
               if (suspendingTypeVars_tvs == null) {
                  throw null;
               } else {
                  for(List suspendingTypeVars_foreach_these = suspendingTypeVars_tvs; !suspendingTypeVars_foreach_these.isEmpty(); suspendingTypeVars_foreach_these = (List)suspendingTypeVars_foreach_these.tail()) {
                     ((TypeVar)suspendingTypeVars_foreach_these.head()).scala$reflect$internal$Types$$suspended_$eq(true);
                  }

                  Object var20 = null;

                  try {
                     var25 = $anonfun$findMembers$1(this, excludedFlags, requiredFlags);
                  } finally {
                     int suspendingTypeVars_index = 0;
                     List suspendingTypeVars_sss = suspendingTypeVars_tvs;

                     while(true) {
                        Nil var10 = scala.collection.immutable.Nil..MODULE$;
                        if (suspendingTypeVars_sss != null) {
                           if (suspendingTypeVars_sss.equals(var10)) {
                              ;
                           }
                        }

                        TypeVar var10001 = (TypeVar)suspendingTypeVars_sss.head();
                        Object suspendingTypeVars_apply_elem = suspendingTypeVars_index;
                        boolean var10002 = suspendingTypeVars_saved.contains(suspendingTypeVars_apply_elem);
                        suspendingTypeVars_apply_elem = null;
                        var10001.scala$reflect$internal$Types$$suspended_$eq(var10002);
                        ++suspendingTypeVars_index;
                        suspendingTypeVars_sss = (List)suspendingTypeVars_sss.tail();
                     }
                  }

                  return var25;
               }
            }
         }
      }

      public Symbols.Symbol findMember(final Names.Name name, final long excludedFlags, final long requiredFlags, final boolean stableOnly) {
         if (this.isGround()) {
            return this.findMemberInternal$1(name, excludedFlags, requiredFlags, stableOnly);
         } else {
            SymbolTable var10000 = this.scala$reflect$internal$Types$Type$$$outer();
            List suspendingTypeVars_tvs = this.scala$reflect$internal$Types$Type$$$outer().scala$reflect$internal$Types$$typeVarsInTypeRev(this);
            if (var10000 == null) {
               throw null;
            } else {
               BitSet suspendingTypeVars_bitSetByPredicate_bs = new BitSet();
               List suspendingTypeVars_bitSetByPredicate_ys = suspendingTypeVars_tvs;

               for(int suspendingTypeVars_bitSetByPredicate_i = 0; !suspendingTypeVars_bitSetByPredicate_ys.isEmpty(); ++suspendingTypeVars_bitSetByPredicate_i) {
                  if (((TypeVar)suspendingTypeVars_bitSetByPredicate_ys.head()).scala$reflect$internal$Types$$suspended()) {
                     suspendingTypeVars_bitSetByPredicate_bs.add(suspendingTypeVars_bitSetByPredicate_i);
                  }

                  suspendingTypeVars_bitSetByPredicate_ys = (List)suspendingTypeVars_bitSetByPredicate_ys.tail();
               }

               Object var24 = null;
               Object var25 = null;
               BitSet suspendingTypeVars_saved = suspendingTypeVars_bitSetByPredicate_bs;
               if (suspendingTypeVars_tvs == null) {
                  throw null;
               } else {
                  for(List suspendingTypeVars_foreach_these = suspendingTypeVars_tvs; !suspendingTypeVars_foreach_these.isEmpty(); suspendingTypeVars_foreach_these = (List)suspendingTypeVars_foreach_these.tail()) {
                     ((TypeVar)suspendingTypeVars_foreach_these.head()).scala$reflect$internal$Types$$suspended_$eq(true);
                  }

                  Object var22 = null;

                  try {
                     var27 = $anonfun$findMember$2(this, name, excludedFlags, requiredFlags, stableOnly);
                  } finally {
                     int suspendingTypeVars_index = 0;
                     List suspendingTypeVars_sss = suspendingTypeVars_tvs;

                     while(true) {
                        Nil var12 = scala.collection.immutable.Nil..MODULE$;
                        if (suspendingTypeVars_sss != null) {
                           if (suspendingTypeVars_sss.equals(var12)) {
                              ;
                           }
                        }

                        TypeVar var10001 = (TypeVar)suspendingTypeVars_sss.head();
                        Object suspendingTypeVars_apply_elem = suspendingTypeVars_index;
                        boolean var10002 = suspendingTypeVars_saved.contains(suspendingTypeVars_apply_elem);
                        suspendingTypeVars_apply_elem = null;
                        var10001.scala$reflect$internal$Types$$suspended_$eq(var10002);
                        ++suspendingTypeVars_index;
                        suspendingTypeVars_sss = (List)suspendingTypeVars_sss.tail();
                     }
                  }

                  return var27;
               }
            }
         }
      }

      public List skolemsExceptMethodTypeParams() {
         U create_e = (U)scala.collection.immutable.Nil..MODULE$;
         ObjectRef var10000 = new ObjectRef(create_e);
         create_e = (U)null;
         ObjectRef boundSyms = var10000;
         U create_e = (U)scala.collection.immutable.Nil..MODULE$;
         var10000 = new ObjectRef(create_e);
         create_e = (U)null;
         ObjectRef skolems = var10000;
         this.foreach((t) -> {
            $anonfun$skolemsExceptMethodTypeParams$1(boundSyms, skolems, t);
            return BoxedUnit.UNIT;
         });
         return (List)skolems.elem;
      }

      public List annotations() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      public Type withoutAnnotations() {
         return this;
      }

      public Type filterAnnotations(final Function1 p) {
         return this;
      }

      public Type setAnnotations(final List annots) {
         return this.scala$reflect$internal$Types$Type$$$outer().annotatedType(annots, this);
      }

      public Type withAnnotations(final List annots) {
         return this.scala$reflect$internal$Types$Type$$$outer().annotatedType(annots, this);
      }

      public Type withAnnotation(final AnnotationInfos.AnnotationInfo anno) {
         return this.withAnnotations(new .colon.colon(anno, scala.collection.immutable.Nil..MODULE$));
      }

      public String kind() {
         return (new StringBuilder(22)).append("unknown type of class ").append(this.getClass()).toString();
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         return this;
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$Type$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public AnnotationInfos scala$reflect$internal$AnnotationInfos$Annotatable$$$outer() {
         return this.scala$reflect$internal$Types$Type$$$outer();
      }

      // $FF: synthetic method
      public static final Type $anonfun$dummyArgs$1(final Symbols.Symbol x$1) {
         return x$1.typeConstructor();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$nonPrivateDecls$1(final Symbols.Symbol x$2) {
         return x$2.isPrivate();
      }

      // $FF: synthetic method
      public static final Statistics.StackableTimer $anonfun$asSeenFrom$1(final Type $this) {
         return ((TypesStats)$this.scala$reflect$internal$Types$Type$$$outer().statistics()).asSeenFromNanos();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$$less$colon$less$1(final Type $this, final Type x$4, final Type x$5) {
         return $this.scala$reflect$internal$Types$Type$$$outer().isSubType(x$4, x$5, $this.scala$reflect$internal$Types$Type$$$outer().isSubType$default$3());
      }

      // $FF: synthetic method
      public static final Symbols.Symbol $anonfun$matchesPattern$1(final Type x$6) {
         return x$6.typeSymbol();
      }

      // $FF: synthetic method
      public static final Statistics.StackableTimer $anonfun$stat_$less$colon$less$1(final Type $this) {
         return ((TypesStats)$this.scala$reflect$internal$Types$Type$$$outer().statistics()).subtypeNanos();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$stat_$less$colon$less$2(final Type $this, final Type x$7, final Type x$8) {
         return $this.scala$reflect$internal$Types$Type$$$outer().isSubType(x$7, x$8, $this.scala$reflect$internal$Types$Type$$$outer().isSubType$default$3());
      }

      // $FF: synthetic method
      public static final Statistics.StackableTimer $anonfun$weak_$less$colon$less$1(final Type $this) {
         return ((TypesStats)$this.scala$reflect$internal$Types$Type$$$outer().statistics()).subtypeNanos();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$weak_$less$colon$less$2(final Type $this, final Type tp1, final Type tp2) {
         return $this.scala$reflect$internal$Types$Type$$$outer().isWeakSubType(tp1, tp2);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$$eq$colon$eq$1(final Type $this, final Type tp1, final Type tp2) {
         return $this.scala$reflect$internal$Types$Type$$$outer().isSameType(tp1, tp2);
      }

      private final Scopes.Scope findMembersInternal$1(final long excludedFlags$1, final long requiredFlags$1) {
         return (Scopes.Scope)(this.scala$reflect$internal$Types$Type$$$outer().new FindMembers(this, excludedFlags$1, requiredFlags$1)).apply();
      }

      // $FF: synthetic method
      public static final Scopes.Scope $anonfun$findMembers$1(final Type $this, final long excludedFlags$1, final long requiredFlags$1) {
         return $this.findMembersInternal$1(excludedFlags$1, requiredFlags$1);
      }

      // $FF: synthetic method
      public static final Symbols.Symbol $anonfun$findMember$1(final Type $this, final Names.Name name$1, final long excludedFlags$2, final long requiredFlags$2, final boolean stableOnly$1, final scala.reflect.internal.tpe.FindMembers.FindMember findMember) {
         findMember.init($this, name$1, excludedFlags$2, requiredFlags$2, stableOnly$1);
         return (Symbols.Symbol)findMember.apply();
      }

      private final Symbols.Symbol findMemberInternal$1(final Names.Name name$1, final long excludedFlags$2, final long requiredFlags$2, final boolean stableOnly$1) {
         ReusableInstance var10000 = this.scala$reflect$internal$Types$Type$$$outer().findMemberInstance();
         if (var10000 == null) {
            throw null;
         } else {
            ReusableInstance using_this = var10000;
            if (using_this.scala$reflect$internal$util$ReusableInstance$$cache == null) {
               scala.reflect.internal.tpe.FindMembers.FindMember var14 = (scala.reflect.internal.tpe.FindMembers.FindMember)using_this.scala$reflect$internal$util$ReusableInstance$$make.apply();
               return $anonfun$findMember$1(this, name$1, excludedFlags$2, requiredFlags$2, stableOnly$1, var14);
            } else {
               int var15 = using_this.scala$reflect$internal$util$ReusableInstance$$taken;
               ArrayBuffer var10001 = using_this.scala$reflect$internal$util$ReusableInstance$$cache;
               if (var10001 == null) {
                  throw null;
               } else {
                  if (var15 == SeqOps.size$(var10001)) {
                     ArrayBuffer var16 = using_this.scala$reflect$internal$util$ReusableInstance$$cache;
                     Object using_$plus$eq_elem = using_this.scala$reflect$internal$util$ReusableInstance$$make.apply();
                     if (var16 == null) {
                        throw null;
                     }

                     var16.addOne(using_$plus$eq_elem);
                     using_$plus$eq_elem = null;
                  }

                  ++using_this.scala$reflect$internal$util$ReusableInstance$$taken;

                  try {
                     scala.reflect.internal.tpe.FindMembers.FindMember var10 = (scala.reflect.internal.tpe.FindMembers.FindMember)using_this.scala$reflect$internal$util$ReusableInstance$$cache.apply(using_this.scala$reflect$internal$util$ReusableInstance$$taken - 1);
                     var17 = $anonfun$findMember$1(this, name$1, excludedFlags$2, requiredFlags$2, stableOnly$1, var10);
                  } finally {
                     --using_this.scala$reflect$internal$util$ReusableInstance$$taken;
                  }

                  return var17;
               }
            }
         }
      }

      // $FF: synthetic method
      public static final Symbols.Symbol $anonfun$findMember$2(final Type $this, final Names.Name name$1, final long excludedFlags$2, final long requiredFlags$2, final boolean stableOnly$1) {
         return $this.findMemberInternal$1(name$1, excludedFlags$2, requiredFlags$2, stableOnly$1);
      }

      // $FF: synthetic method
      public static final void $anonfun$skolemsExceptMethodTypeParams$1(final ObjectRef boundSyms$1, final ObjectRef skolems$1, final Type t) {
         if (t instanceof ExistentialType) {
            List quantified = ((ExistentialType)t).quantified();
            List var4 = (List)boundSyms$1.elem;
            boundSyms$1.elem = quantified.$colon$colon$colon(var4);
         } else if (t instanceof TypeRef) {
            Symbols.Symbol sym = ((TypeRef)t).sym();
            if ((sym.isExistentialSkolem() || sym.isGADTSkolem()) && !((List)boundSyms$1.elem).contains(sym) && !((List)skolems$1.elem).contains(sym)) {
               List var10001 = (List)skolems$1.elem;
               if (var10001 == null) {
                  throw null;
               } else {
                  List $colon$colon_this = var10001;
                  skolems$1.elem = new .colon.colon(sym, $colon$colon_this);
               }
            }
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }

      public class FilterMapForeach extends TypeMaps.FilterTypeCollector {
         // $FF: synthetic field
         public final Type $outer;

         public void foreach(final Function1 f) {
            List var10000 = this.collect(this.scala$reflect$internal$Types$Type$FilterMapForeach$$$outer());
            if (var10000 == null) {
               throw null;
            } else {
               for(List foreach_these = var10000; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
                  f.apply(foreach_these.head());
               }

            }
         }

         public List map(final Function1 f) {
            List var10000 = this.collect(this.scala$reflect$internal$Types$Type$FilterMapForeach$$$outer());
            if (var10000 == null) {
               throw null;
            } else {
               List map_this = var10000;
               if (map_this == scala.collection.immutable.Nil..MODULE$) {
                  return scala.collection.immutable.Nil..MODULE$;
               } else {
                  .colon.colon map_h = new .colon.colon(f.apply(map_this.head()), scala.collection.immutable.Nil..MODULE$);
                  .colon.colon map_t = map_h;

                  for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                     .colon.colon map_nx = new .colon.colon(f.apply(map_rest.head()), scala.collection.immutable.Nil..MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  return map_h;
               }
            }
         }

         // $FF: synthetic method
         public Type scala$reflect$internal$Types$Type$FilterMapForeach$$$outer() {
            return this.$outer;
         }

         public FilterMapForeach(final Function1 p) {
            if (Type.this == null) {
               throw null;
            } else {
               this.$outer = Type.this;
               super(p);
            }
         }
      }
   }

   public abstract class UniqueType extends Type implements Product {
      private final int hashCode = this.computeHashCode();

      public Iterator productIterator() {
         return Product.productIterator$(this);
      }

      public String productPrefix() {
         return Product.productPrefix$(this);
      }

      public String productElementName(final int n) {
         return Product.productElementName$(this, n);
      }

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public final int hashCode() {
         return this.hashCode;
      }

      public int computeHashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$UniqueType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public abstract class SubType extends UniqueType {
      public abstract Type supertype();

      public List parents() {
         return this.supertype().parents();
      }

      public Scopes.Scope decls() {
         return this.supertype().decls();
      }

      public Type baseType(final Symbols.Symbol clazz) {
         return this.supertype().baseType(clazz);
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeq() {
         return this.supertype().baseTypeSeq();
      }

      public int baseTypeSeqDepth() {
         return this.supertype().baseTypeSeqDepth();
      }

      public List baseClasses() {
         return this.supertype().baseClasses();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$SubType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public abstract class SingletonType extends SubType implements SimpleTypeProxy, scala.reflect.api.Types.SingletonTypeApi {
      public Type typeConstructor() {
         return Types.SimpleTypeProxy.super.typeConstructor();
      }

      public boolean isError() {
         return Types.SimpleTypeProxy.super.isError();
      }

      public boolean isErroneous() {
         return Types.SimpleTypeProxy.super.isErroneous();
      }

      public int paramSectionCount() {
         return Types.SimpleTypeProxy.super.paramSectionCount();
      }

      public List paramss() {
         return Types.SimpleTypeProxy.super.paramss();
      }

      public List params() {
         return Types.SimpleTypeProxy.super.params();
      }

      public List paramTypes() {
         return Types.SimpleTypeProxy.super.paramTypes();
      }

      public Symbols.Symbol termSymbol() {
         return Types.SimpleTypeProxy.super.termSymbol();
      }

      public Symbols.Symbol termSymbolDirect() {
         return Types.SimpleTypeProxy.super.termSymbolDirect();
      }

      public List typeParams() {
         return Types.SimpleTypeProxy.super.typeParams();
      }

      public Symbols.Symbol typeSymbol() {
         return Types.SimpleTypeProxy.super.typeSymbol();
      }

      public Symbols.Symbol typeSymbolDirect() {
         return Types.SimpleTypeProxy.super.typeSymbolDirect();
      }

      public Type widen() {
         return Types.SimpleTypeProxy.super.widen();
      }

      public Type typeOfThis() {
         return Types.SimpleTypeProxy.super.typeOfThis();
      }

      public TypeBounds bounds() {
         return Types.SimpleTypeProxy.super.bounds();
      }

      public Type lowerBound() {
         return Types.SimpleTypeProxy.super.lowerBound();
      }

      public Type upperBound() {
         return Types.SimpleTypeProxy.super.upperBound();
      }

      public List parents() {
         return Types.SimpleTypeProxy.super.parents();
      }

      public Type prefix() {
         return Types.SimpleTypeProxy.super.prefix();
      }

      public Type prefixDirect() {
         return Types.SimpleTypeProxy.super.prefixDirect();
      }

      public Scopes.Scope decls() {
         return Types.SimpleTypeProxy.super.decls();
      }

      public Type baseType(final Symbols.Symbol clazz) {
         return Types.SimpleTypeProxy.super.baseType(clazz);
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeq() {
         return Types.SimpleTypeProxy.super.baseTypeSeq();
      }

      public int baseTypeSeqDepth() {
         return Types.SimpleTypeProxy.super.baseTypeSeqDepth();
      }

      public List baseClasses() {
         return Types.SimpleTypeProxy.super.baseClasses();
      }

      public Type supertype() {
         return this.underlying();
      }

      public boolean isTrivial() {
         return false;
      }

      public boolean isHigherKinded() {
         return false;
      }

      public String safeToString() {
         Symbols.Symbol var1 = this.termSymbol();
         return !var1.isOmittablePrefix() ? (new StringBuilder(4)).append(this.prefixString()).append("type").toString() : (new StringBuilder(5)).append(!var1.isPackageObjectOrClass() && !var1.isJavaDefined() ? var1.nameString() : var1.fullNameString()).append(".type").toString();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$SingletonType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$SimpleTypeProxy$$$outer() {
         return this.scala$reflect$internal$Types$SingletonType$$$outer();
      }
   }

   public class ErrorType$ extends Type implements Product, Serializable {
      public String productElementName(final int n) {
         return Product.productElementName$(this, n);
      }

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public boolean isError() {
         return true;
      }

      public Scopes.Scope decls() {
         return this.scala$reflect$internal$Types$ErrorType$$$outer().new ErrorScope(this.scala$reflect$internal$Types$ErrorType$$$outer().NoSymbol());
      }

      public Symbols.Symbol findMember(final Names.Name name, final long excludedFlags, final long requiredFlags, final boolean stableOnly) {
         Symbols.Symbol sym = this.decls().lookup(name);
         Symbols.NoSymbol var8 = this.scala$reflect$internal$Types$ErrorType$$$outer().NoSymbol();
         if (sym == null) {
            if (var8 != null) {
               return sym;
            }
         } else if (!sym.equals(var8)) {
            return sym;
         }

         sym = this.scala$reflect$internal$Types$ErrorType$$$outer().NoSymbol().newErrorSymbol(name);
         this.decls().enter(sym);
         return sym;
      }

      public Type baseType(final Symbols.Symbol clazz) {
         return this;
      }

      public String safeToString() {
         return "<error>";
      }

      public Type narrow() {
         return this;
      }

      public String kind() {
         return "ErrorType";
      }

      public String productPrefix() {
         return "ErrorType";
      }

      public int productArity() {
         return 0;
      }

      public Object productElement(final int x$1) {
         return Statics.ioobe(x$1);
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof ErrorType$;
      }

      public int hashCode() {
         return -1961447102;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ErrorType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public class WildcardType$ extends ProtoType implements Product, Serializable {
      private List[] FillListCache;
      private volatile boolean bitmap$0;

      public String productElementName(final int n) {
         return Product.productElementName$(this, n);
      }

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public String safeToString() {
         return "?";
      }

      public String kind() {
         return "WildcardType";
      }

      public List fillList(final int n) {
         if (n < 32) {
            return this.FillListCache()[n];
         } else if (scala.package..MODULE$.List() == null) {
            throw null;
         } else {
            Builder fill_b = new ListBuffer();
            fill_b.sizeHint(n);

            for(int fill_i = 0; fill_i < n; ++fill_i) {
               Object fill_$plus$eq_elem = $anonfun$fillList$1(this);
               fill_b.addOne(fill_$plus$eq_elem);
               fill_$plus$eq_elem = null;
            }

            return (List)((SeqOps)fill_b.result());
         }
      }

      private List[] FillListCache$lzycompute() {
         synchronized(this){}

         try {
            if (!this.bitmap$0) {
               byte iterate_len = 32;
               Object iterate_start = scala.collection.immutable.Nil..MODULE$;
               Object var10001;
               if (iterate_len <= 0) {
                  var10001 = new List[0];
               } else {
                  Object iterate_array = new List[iterate_len];
                  Object iterate_acc = iterate_start;
                  int iterate_i = 1;
                  int array_update_idx = 0;

                  for(((Object[])iterate_array)[array_update_idx] = iterate_start; iterate_i < iterate_len; ++iterate_i) {
                     List var6 = (List)iterate_acc;
                     iterate_acc = $anonfun$FillListCache$1(this, var6);
                     ((Object[])iterate_array)[iterate_i] = iterate_acc;
                  }

                  var10001 = iterate_array;
               }

               iterate_start = null;
               Object var11 = null;
               Object var12 = null;
               this.FillListCache = (List[])var10001;
               this.bitmap$0 = true;
            }
         } catch (Throwable var9) {
            throw var9;
         }

         return this.FillListCache;
      }

      private List[] FillListCache() {
         return !this.bitmap$0 ? this.FillListCache$lzycompute() : this.FillListCache;
      }

      public String productPrefix() {
         return "WildcardType";
      }

      public int productArity() {
         return 0;
      }

      public Object productElement(final int x$1) {
         return Statics.ioobe(x$1);
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof WildcardType$;
      }

      public int hashCode() {
         return -1469706156;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$WildcardType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final WildcardType$ $anonfun$fillList$1(final WildcardType$ $this) {
         return $this.scala$reflect$internal$Types$WildcardType$$$outer().WildcardType();
      }

      // $FF: synthetic method
      public static final List $anonfun$FillListCache$1(final WildcardType$ $this, final List x$9) {
         WildcardType$ var2 = $this.scala$reflect$internal$Types$WildcardType$$$outer().WildcardType();
         if (x$9 == null) {
            throw null;
         } else {
            return new .colon.colon(var2, x$9);
         }
      }
   }

   public class BoundedWildcardType extends ProtoType implements scala.reflect.api.Types.BoundedWildcardTypeApi, Product, Serializable {
      private final TypeBounds bounds;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public TypeBounds bounds() {
         return this.bounds;
      }

      public Type upperBound() {
         return this.bounds().hi();
      }

      public Type lowerBound() {
         return this.bounds().lo();
      }

      public boolean isMatchedBy(final Type tp, final int depth) {
         return this.scala$reflect$internal$Types$BoundedWildcardType$$$outer().isSubType(tp, this.bounds().hi(), depth);
      }

      public boolean canMatch(final Type tp, final int depth) {
         return this.scala$reflect$internal$Types$BoundedWildcardType$$$outer().isSubType(this.bounds().lo(), tp, depth);
      }

      public boolean registerTypeEquality(final Type tp) {
         return this.bounds().containsType(tp);
      }

      public TypeBounds toBounds() {
         return this.bounds();
      }

      public Scopes.Scope members() {
         return this.bounds().lo().members();
      }

      public Type toVariantType() {
         return this.bounds();
      }

      public String safeToString() {
         return (new StringBuilder(1)).append("?").append(this.bounds()).toString();
      }

      public String kind() {
         return "BoundedWildcardType";
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         Type bounds1 = map.apply(this.bounds());
         return bounds1 == this.bounds() ? this : this.scala$reflect$internal$Types$BoundedWildcardType$$$outer().new BoundedWildcardType((TypeBounds)bounds1);
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         folder.apply(this.bounds());
      }

      public BoundedWildcardType copy(final TypeBounds bounds) {
         return this.scala$reflect$internal$Types$BoundedWildcardType$$$outer().new BoundedWildcardType(bounds);
      }

      public TypeBounds copy$default$1() {
         return this.bounds();
      }

      public String productPrefix() {
         return "BoundedWildcardType";
      }

      public int productArity() {
         return 1;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.bounds();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof BoundedWildcardType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "bounds";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof BoundedWildcardType && ((BoundedWildcardType)x$1).scala$reflect$internal$Types$BoundedWildcardType$$$outer() == this.scala$reflect$internal$Types$BoundedWildcardType$$$outer()) {
               BoundedWildcardType var2 = (BoundedWildcardType)x$1;
               TypeBounds var10000 = this.bounds();
               TypeBounds var3 = var2.bounds();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$BoundedWildcardType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public BoundedWildcardType(final TypeBounds bounds) {
         this.bounds = bounds;
      }
   }

   public class BoundedWildcardType$ extends scala.reflect.api.Types.BoundedWildcardTypeExtractor implements Serializable {
      public BoundedWildcardType apply(final TypeBounds bounds) {
         return this.scala$reflect$internal$Types$BoundedWildcardType$$$outer().new BoundedWildcardType(bounds);
      }

      public Option unapply(final BoundedWildcardType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(x$0.bounds()));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$BoundedWildcardType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public abstract class ProtoType extends Type {
      public TypeBounds toBounds() {
         return this.scala$reflect$internal$Types$ProtoType$$$outer().TypeBounds().empty();
      }

      public boolean isWildcard() {
         return true;
      }

      public Scopes.Scope members() {
         return this.scala$reflect$internal$Types$ProtoType$$$outer().ErrorType().decls();
      }

      public boolean isMatchedBy(final Type tp, final int depth) {
         return true;
      }

      public boolean canMatch(final Type tp, final int depth) {
         return true;
      }

      public boolean registerTypeEquality(final Type tp) {
         return true;
      }

      public boolean expectsFunctionType() {
         return false;
      }

      public Type asFunctionType() {
         return this.scala$reflect$internal$Types$ProtoType$$$outer().NoType();
      }

      public Type toVariantType() {
         return this.scala$reflect$internal$Types$ProtoType$$$outer().NoType();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ProtoType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public final class OverloadedArgProto extends ProtoType implements SimpleTypeProxy, Product, Serializable {
      private volatile ParamAtIdx$ ParamAtIdx$module;
      private List sameTypesFolded;
      private List sameTypesFoldedSam;
      private Type protoTp;
      private final Either argIdx;
      private final Type pre;
      private final List alternatives;
      private final List origUndets;
      private volatile byte bitmap$0;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public boolean isTrivial() {
         return Types.SimpleTypeProxy.super.isTrivial();
      }

      public boolean isHigherKinded() {
         return Types.SimpleTypeProxy.super.isHigherKinded();
      }

      public Type typeConstructor() {
         return Types.SimpleTypeProxy.super.typeConstructor();
      }

      public boolean isError() {
         return Types.SimpleTypeProxy.super.isError();
      }

      public boolean isErroneous() {
         return Types.SimpleTypeProxy.super.isErroneous();
      }

      public int paramSectionCount() {
         return Types.SimpleTypeProxy.super.paramSectionCount();
      }

      public List paramss() {
         return Types.SimpleTypeProxy.super.paramss();
      }

      public List params() {
         return Types.SimpleTypeProxy.super.params();
      }

      public List paramTypes() {
         return Types.SimpleTypeProxy.super.paramTypes();
      }

      public Symbols.Symbol termSymbol() {
         return Types.SimpleTypeProxy.super.termSymbol();
      }

      public Symbols.Symbol termSymbolDirect() {
         return Types.SimpleTypeProxy.super.termSymbolDirect();
      }

      public List typeParams() {
         return Types.SimpleTypeProxy.super.typeParams();
      }

      public Symbols.Symbol typeSymbol() {
         return Types.SimpleTypeProxy.super.typeSymbol();
      }

      public Symbols.Symbol typeSymbolDirect() {
         return Types.SimpleTypeProxy.super.typeSymbolDirect();
      }

      public Type widen() {
         return Types.SimpleTypeProxy.super.widen();
      }

      public Type typeOfThis() {
         return Types.SimpleTypeProxy.super.typeOfThis();
      }

      public TypeBounds bounds() {
         return Types.SimpleTypeProxy.super.bounds();
      }

      public Type lowerBound() {
         return Types.SimpleTypeProxy.super.lowerBound();
      }

      public Type upperBound() {
         return Types.SimpleTypeProxy.super.upperBound();
      }

      public List parents() {
         return Types.SimpleTypeProxy.super.parents();
      }

      public Type prefix() {
         return Types.SimpleTypeProxy.super.prefix();
      }

      public Type prefixDirect() {
         return Types.SimpleTypeProxy.super.prefixDirect();
      }

      public Scopes.Scope decls() {
         return Types.SimpleTypeProxy.super.decls();
      }

      public Type baseType(final Symbols.Symbol clazz) {
         return Types.SimpleTypeProxy.super.baseType(clazz);
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeq() {
         return Types.SimpleTypeProxy.super.baseTypeSeq();
      }

      public int baseTypeSeqDepth() {
         return Types.SimpleTypeProxy.super.baseTypeSeqDepth();
      }

      public List baseClasses() {
         return Types.SimpleTypeProxy.super.baseClasses();
      }

      private ParamAtIdx$ ParamAtIdx() {
         if (this.ParamAtIdx$module == null) {
            this.ParamAtIdx$lzycompute$1();
         }

         return this.ParamAtIdx$module;
      }

      public Either argIdx() {
         return this.argIdx;
      }

      public Type pre() {
         return this.pre;
      }

      public List alternatives() {
         return this.alternatives;
      }

      public String safeToString() {
         return this.underlying().safeToString();
      }

      public String kind() {
         return "OverloadedArgProto";
      }

      public Type underlying() {
         return this.protoTp();
      }

      public boolean isWildcard() {
         return this.underlying().isWildcard();
      }

      public boolean isMatchedBy(final Type tp, final int depth) {
         if (!this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().isPastTyper()) {
            Type var10000 = this.underlying();
            WildcardType$ var3 = this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType();
            if (var10000 == null) {
               if (var3 == null) {
                  return true;
               }
            } else if (var10000.equals(var3)) {
               return true;
            }

            if (!this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().isSubType(tp, this.underlying(), depth)) {
               List var7 = this.sameTypesFoldedSam();
               if (var7 == null) {
                  throw null;
               }

               List exists_these = var7;

               while(true) {
                  if (exists_these.isEmpty()) {
                     var8 = false;
                     break;
                  }

                  Type var5 = (Type)exists_these.head();
                  if ($anonfun$isMatchedBy$1(this, tp, depth, var5)) {
                     var8 = true;
                     break;
                  }

                  exists_these = (List)exists_these.tail();
               }

               Object var6 = null;
               if (!var8) {
                  return false;
               }
            }
         }

         return true;
      }

      public List hofParamTypes() {
         return this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions().functionOrPfOrSamArgTypes(this.underlying());
      }

      public boolean expectsFunctionType() {
         return !this.hofParamTypes().isEmpty();
      }

      public Type asFunctionType() {
         return (Type)(this.expectsFunctionType() ? this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions().functionType(this.hofParamTypes(), this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType()) : this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().NoType());
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         Type pre1 = this.pre().mapOver(map);
         List alts1 = map.mapOver(this.alternatives());
         return this.pre() == pre1 && this.alternatives() == alts1 ? this : this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().new OverloadedArgProto(this.argIdx(), pre1, alts1, this.origUndets);
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         this.pre().foldOver(folder);
         folder.foldOver(this.alternatives());
      }

      private boolean same(final Type x, final Type y) {
         return x.$less$colon$less(y) && y.$less$colon$less(x);
      }

      private Type toWild(final Type tp) {
         if (tp instanceof PolyType) {
            PolyType var2 = (PolyType)tp;
            List tparams = var2.typeParams();
            Type tp = var2.resultType();
            List $plus$plus_suffix = this.origUndets;
            if (tparams == null) {
               throw null;
            } else {
               List var10000 = tparams.appendedAll($plus$plus_suffix);
               Object var7 = null;
               List undets = var10000;
               return (this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().new SubstTypeMap(undets, this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType().fillList(undets.length()))).apply(tp);
            }
         } else {
            return (this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().new SubstTypeMap(this.origUndets, this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType().fillList(this.origUndets.length()))).apply(tp);
         }
      }

      private List sameTypesFolded$lzycompute() {
         synchronized(this){}

         try {
            if ((byte)(this.bitmap$0 & 1) == 0) {
               List var10001 = this.alternatives();
               Nil var10002 = scala.collection.immutable.Nil..MODULE$;
               Function2 foldLeft_op = (x0$1, x1$1) -> {
                  Type var3 = this.typeOfAlt$1(x1$1);
                  if (this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType().equals(var3)) {
                     return x0$1;
                  } else if (x0$1 == null) {
                     throw null;
                  } else {
                     List exists_these = x0$1;

                     boolean var10000;
                     while(true) {
                        if (exists_these.isEmpty()) {
                           var10000 = false;
                           break;
                        }

                        Type var5 = (Type)exists_these.head();
                        if ($anonfun$sameTypesFolded$2(this, var3, var5)) {
                           var10000 = true;
                           break;
                        }

                        exists_these = (List)exists_these.tail();
                     }

                     Object var6 = null;
                     return (List)(var10000 ? x0$1 : new .colon.colon(var3, x0$1));
                  }
               };
               Nil foldLeft_z = var10002;
               if (var10001 == null) {
                  throw null;
               }

               Object var7 = LinearSeqOps.foldLeft$(var10001, foldLeft_z, foldLeft_op);
               Object var5 = null;
               Object var6 = null;
               this.sameTypesFolded = (List)var7;
               this.bitmap$0 = (byte)(this.bitmap$0 | 1);
            }
         } catch (Throwable var4) {
            throw var4;
         }

         return this.sameTypesFolded;
      }

      private List sameTypesFolded() {
         return (byte)(this.bitmap$0 & 1) == 0 ? this.sameTypesFolded$lzycompute() : this.sameTypesFolded;
      }

      private List sameTypesFoldedSam$lzycompute() {
         synchronized(this){}

         try {
            if ((byte)(this.bitmap$0 & 2) == 0) {
               this.sameTypesFoldedSam = this.sameTypesFolded().iterator().map((tp) -> this.toWild(tp)).filter((tp) -> BoxesRunTime.boxToBoolean($anonfun$sameTypesFoldedSam$2(this, tp))).toList();
               this.bitmap$0 = (byte)(this.bitmap$0 | 2);
            }
         } catch (Throwable var2) {
            throw var2;
         }

         return this.sameTypesFoldedSam;
      }

      private List sameTypesFoldedSam() {
         return (byte)(this.bitmap$0 & 2) == 0 ? this.sameTypesFoldedSam$lzycompute() : this.sameTypesFoldedSam;
      }

      private Type protoTp$lzycompute() {
         synchronized(this){}

         try {
            if ((byte)(this.bitmap$0 & 4) == 0) {
               Tuple3 ABORT = new Tuple3(this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().NoType(), false, false);
               List var10001 = this.sameTypesFolded();
               Tuple3 var10002 = new Tuple3(this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType(), false, false);
               Function2 foldLeft_op = (x0$1, x1$1) -> {
                  if (ABORT == null) {
                     if (x0$1 == null) {
                        return ABORT;
                     }
                  } else if (ABORT.equals(x0$1)) {
                     return ABORT;
                  }

                  if (x0$1 != null) {
                     Type acc = (Type)x0$1._1();
                     boolean partialFun = BoxesRunTime.unboxToBoolean(x0$1._2());
                     boolean regularFun = BoxesRunTime.unboxToBoolean(x0$1._3());
                     if (this.sameHOArgTypes$1(acc, x1$1)) {
                        Type wild = this.toWild(x1$1);
                        return new Tuple3(x1$1, partialFun || this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions().isPartialFunctionType(wild), regularFun || this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions().isFunctionType(wild));
                     }
                  }

                  return ABORT;
               };
               Tuple3 foldLeft_z = var10002;
               if (var10001 == null) {
                  throw null;
               }

               SymbolTable var19 = (SymbolTable)LinearSeqOps.foldLeft$(var10001, foldLeft_z, foldLeft_op);
               Object var17 = null;
               Object var18 = null;
               Tuple3 var2 = (Tuple3)var19;
               if (var2 == null) {
                  throw new MatchError((Object)null);
               }

               Type sameHoArgTypesFolded = (Type)var2._1();
               boolean partialFun = BoxesRunTime.unboxToBoolean(var2._2());
               boolean regularFun = BoxesRunTime.unboxToBoolean(var2._3());
               if (sameHoArgTypesFolded != this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType() && sameHoArgTypesFolded != this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().NoType()) {
                  List var6 = this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions().functionOrPfOrSamArgTypes(this.toWild(sameHoArgTypesFolded));
                  if (scala.collection.immutable.Nil..MODULE$.equals(var6)) {
                     label99: {
                        List var7 = this.sameTypesFolded();
                        if (var7 instanceof .colon.colon) {
                           .colon.colon var8 = (.colon.colon)var7;
                           Type onlyType = (Type)var8.head();
                           List var10 = var8.next$access$1();
                           if (scala.collection.immutable.Nil..MODULE$.equals(var10)) {
                              var19 = this.toWild(onlyType);
                              break label99;
                           }
                        }

                        var19 = this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType();
                     }
                  } else if (partialFun) {
                     var19 = this.scala$reflect$internal$Types$OverloadedArgProto$$$outer();
                     Symbols.ClassSymbol var22 = this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions().PartialFunctionClass();
                     WildcardType$ $colon$plus_elem = this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType();
                     if (var6 == null) {
                        throw null;
                     }

                     Object var10003 = SeqOps.$colon$plus$(var6, $colon$plus_elem);
                     $colon$plus_elem = null;
                     var19 = var19.appliedType((Symbols.Symbol)var22, (List)((List)var10003));
                  } else {
                     var19 = regularFun ? this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions().functionType(var6, this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType()) : (this.sameTypesFolded().lengthCompare(1) == 0 ? this.toWild((Type)this.sameTypesFolded().head()) : this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType());
                  }
               } else {
                  var19 = this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType();
               }

               this.protoTp = (Type)var19;
               this.bitmap$0 = (byte)(this.bitmap$0 | 4);
            }
         } catch (Throwable var15) {
            throw var15;
         }

         return this.protoTp;
      }

      private Type protoTp() {
         return (byte)(this.bitmap$0 & 4) == 0 ? this.protoTp$lzycompute() : this.protoTp;
      }

      public OverloadedArgProto copy(final Either argIdx, final Type pre, final List alternatives, final List origUndets) {
         return this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().new OverloadedArgProto(argIdx, pre, alternatives, origUndets);
      }

      public Either copy$default$1() {
         return this.argIdx();
      }

      public Type copy$default$2() {
         return this.pre();
      }

      public List copy$default$3() {
         return this.alternatives();
      }

      public String productPrefix() {
         return "OverloadedArgProto";
      }

      public int productArity() {
         return 3;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.argIdx();
            case 1:
               return this.pre();
            case 2:
               return this.alternatives();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof OverloadedArgProto;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "argIdx";
            case 1:
               return "pre";
            case 2:
               return "alternatives";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof OverloadedArgProto) {
               OverloadedArgProto var2 = (OverloadedArgProto)x$1;
               Either var10000 = this.argIdx();
               Either var3 = var2.argIdx();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               Type var6 = this.pre();
               Type var4 = var2.pre();
               if (var6 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var6.equals(var4)) {
                  return false;
               }

               List var7 = this.alternatives();
               List var5 = var2.alternatives();
               if (var7 == null) {
                  if (var5 == null) {
                     return true;
                  }
               } else if (var7.equals(var5)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$OverloadedArgProto$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$SimpleTypeProxy$$$outer() {
         return this.scala$reflect$internal$Types$OverloadedArgProto$$$outer();
      }

      private final void ParamAtIdx$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.ParamAtIdx$module == null) {
               this.ParamAtIdx$module = new ParamAtIdx$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      // $FF: synthetic method
      public static final boolean $anonfun$isMatchedBy$1(final OverloadedArgProto $this, final Type tp$1, final int depth$1, final Type underlyingSam) {
         return $this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().isSubType(tp$1, underlyingSam, depth$1);
      }

      private final Type typeOfAlt$1(final Symbols.Symbol alt) {
         Type var2 = this.pre().memberType(alt);
         if (var2 instanceof PolyType) {
            PolyType var3 = (PolyType)var2;
            List tparams = var3.typeParams();
            Type var5 = var3.resultType();
            if (var5 instanceof MethodType) {
               List var6 = ((MethodType)var5).params();
               if (var6 != null) {
                  Option var7 = this.ParamAtIdx().unapply(var6);
                  if (!var7.isEmpty()) {
                     Type paramTp = (Type)var7.get();
                     return this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().new PolyType(tparams, paramTp.asSeenFrom(this.pre(), alt.owner()));
                  }
               }
            }
         }

         if (var2 instanceof MethodType) {
            List var9 = ((MethodType)var2).params();
            if (var9 != null) {
               Option var10 = this.ParamAtIdx().unapply(var9);
               if (!var10.isEmpty()) {
                  Type paramTp = (Type)var10.get();
                  if (!alt.isConstructor() || !(alt.owner().info() instanceof PolyType)) {
                     return paramTp.asSeenFrom(this.pre(), alt.owner());
                  }
               }
            }
         }

         return this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().NoType();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$sameTypesFolded$2(final OverloadedArgProto $this, final Type x1$1, final Type x$10) {
         return $this.same(x1$1, x$10);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$sameTypesFoldedSam$2(final OverloadedArgProto $this, final Type tp) {
         return $this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions().samOf(tp).exists();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$protoTp$1(final OverloadedArgProto $this, final Type x, final Type y) {
         return $this.same(x, y);
      }

      private final boolean sameHOArgTypes$1(final Type tp1, final Type tp2) {
         WildcardType$ var3 = this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().WildcardType();
         if (tp1 == null) {
            if (var3 == null) {
               return true;
            }
         } else if (tp1.equals(var3)) {
            return true;
         }

         List hoArgTypes1 = this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions().functionOrPfOrSamArgTypes(tp1.resultType());
         if (hoArgTypes1.isEmpty() || !hoArgTypes1.corresponds(this.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions().functionOrPfOrSamArgTypes(tp2.resultType()), (x, y) -> BoxesRunTime.boxToBoolean($anonfun$protoTp$1(this, x, y)))) {
            return false;
         } else {
            return true;
         }
      }

      public OverloadedArgProto(final Either argIdx, final Type pre, final List alternatives, final List origUndets) {
         this.argIdx = argIdx;
         this.pre = pre;
         this.alternatives = alternatives;
         this.origUndets = origUndets;
      }

      // $FF: synthetic method
      public static final Object $anonfun$isMatchedBy$1$adapted(final OverloadedArgProto $this, final Type tp$1, final int depth$1, final Type underlyingSam) {
         return BoxesRunTime.boxToBoolean($anonfun$isMatchedBy$1($this, tp$1, depth$1, underlyingSam));
      }

      // $FF: synthetic method
      public static final Object $anonfun$sameTypesFolded$2$adapted(final OverloadedArgProto $this, final Type x1$1, final Type x$10) {
         return BoxesRunTime.boxToBoolean($anonfun$sameTypesFolded$2($this, x1$1, x$10));
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }

      private class ParamAtIdx$ {
         // $FF: synthetic field
         private final OverloadedArgProto $outer;

         public Option unapply(final List params) {
            LazyRef lastParamTp$lzy = new LazyRef();
            Either var4 = this.$outer.argIdx();
            int var10000;
            if (var4 instanceof Left) {
               var10000 = BoxesRunTime.unboxToInt(((Left)var4).value());
            } else {
               if (!(var4 instanceof Right)) {
                  throw new MatchError(var4);
               }

               Names.Name name = (Names.Name)((Right)var4).value();
               var10000 = params.indexWhere((p) -> BoxesRunTime.boxToBoolean($anonfun$unapply$1(name, p)));
            }

            int argIdxMapped = var10000;
            if (!params.isEmpty() && params.lengthCompare(argIdxMapped + 1) <= 0 && this.$outer.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions().isRepeatedParamType(lastParamTp$1(lastParamTp$lzy, params))) {
               return new Some(lastParamTp$1(lastParamTp$lzy, params).dealiasWiden().typeArgs().head());
            } else if (LinearSeqOps.isDefinedAt$(params, argIdxMapped)) {
               Some var6 = new Some;
               Definitions.definitions$ var10002 = this.$outer.scala$reflect$internal$Types$OverloadedArgProto$$$outer().definitions();
               Symbols.Symbol var10003 = (Symbols.Symbol)LinearSeqOps.apply$(params, argIdxMapped);
               if (var10003 == null) {
                  throw null;
               } else {
                  var6.<init>(var10002.dropByName(var10003.tpe_$times()));
                  return var6;
               }
            } else {
               return scala.None..MODULE$;
            }
         }

         // $FF: synthetic method
         private static final Type lastParamTp$lzycompute$1(final LazyRef lastParamTp$lzy$1, final List params$1) {
            synchronized(lastParamTp$lzy$1){}

            Type var2;
            try {
               Type var10000;
               if (lastParamTp$lzy$1.initialized()) {
                  var10000 = (Type)lastParamTp$lzy$1.value();
               } else {
                  Symbols.Symbol var10001 = (Symbols.Symbol)params$1.last();
                  if (var10001 == null) {
                     throw null;
                  }

                  var10000 = (Type)lastParamTp$lzy$1.initialize(var10001.tpe_$times());
               }

               var2 = var10000;
            } catch (Throwable var4) {
               throw var4;
            }

            return var2;
         }

         private static final Type lastParamTp$1(final LazyRef lastParamTp$lzy$1, final List params$1) {
            return lastParamTp$lzy$1.initialized() ? (Type)lastParamTp$lzy$1.value() : lastParamTp$lzycompute$1(lastParamTp$lzy$1, params$1);
         }

         // $FF: synthetic method
         public static final boolean $anonfun$unapply$1(final Names.Name name$2, final Symbols.Symbol p) {
            Names.Name var10000 = p.name();
            if (var10000 == null) {
               if (name$2 != null) {
                  return false;
               }
            } else if (!var10000.equals(name$2)) {
               return false;
            }

            if (!p.isSynthetic()) {
               return true;
            } else {
               return false;
            }
         }

         public ParamAtIdx$() {
            if (OverloadedArgProto.this == null) {
               throw null;
            } else {
               this.$outer = OverloadedArgProto.this;
               super();
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      }
   }

   public class OverloadedArgProto$ implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public final String toString() {
         return "OverloadedArgProto";
      }

      public OverloadedArgProto apply(final Either argIdx, final Type pre, final List alternatives, final List origUndets) {
         return this.$outer.new OverloadedArgProto(argIdx, pre, alternatives, origUndets);
      }

      public Option unapply(final OverloadedArgProto x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple3(x$0.argIdx(), x$0.pre(), x$0.alternatives())));
      }

      public OverloadedArgProto$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class NoType$ extends Type implements Product, Serializable {
      public String productElementName(final int n) {
         return Product.productElementName$(this, n);
      }

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public boolean isTrivial() {
         return true;
      }

      public String safeToString() {
         return "<notype>";
      }

      public String kind() {
         return "NoType";
      }

      public String productPrefix() {
         return "NoType";
      }

      public int productArity() {
         return 0;
      }

      public Object productElement(final int x$1) {
         return Statics.ioobe(x$1);
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof NoType$;
      }

      public int hashCode() {
         return -1956760389;
      }
   }

   public class NoPrefix$ extends Type implements Product, Serializable {
      public String productElementName(final int n) {
         return Product.productElementName$(this, n);
      }

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public boolean isTrivial() {
         return true;
      }

      public String prefixString() {
         return "";
      }

      public String safeToString() {
         return "<noprefix>";
      }

      public String kind() {
         return "NoPrefixType";
      }

      public String productPrefix() {
         return "NoPrefix";
      }

      public int productArity() {
         return 0;
      }

      public Object productElement(final int x$1) {
         return Statics.ioobe(x$1);
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof NoPrefix$;
      }

      public int hashCode() {
         return 627637203;
      }
   }

   public abstract class ThisType extends SingletonType implements scala.reflect.api.Types.ThisTypeApi, Serializable {
      private final Symbols.Symbol sym;

      public Symbols.Symbol sym() {
         return this.sym;
      }

      public boolean isTrivial() {
         return this.sym().isPackageClass();
      }

      public Symbols.Symbol typeSymbol() {
         return this.sym();
      }

      public Type underlying() {
         return this.sym().typeOfThis();
      }

      public boolean isHigherKinded() {
         return this.sym().isRefinementClass() && this.underlying().isHigherKinded();
      }

      public String prefixString() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var5 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$ThisType$$$outer().settings();
         MutableSettings var6 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var6;
         boolean var7 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         if (var7) {
            return (new StringBuilder(6)).append(this.sym().nameString()).append(".this.").toString();
         } else if (this.sym().isAnonOrRefinementClass()) {
            return "this.";
         } else if (this.sym().isOmittablePrefix()) {
            return "";
         } else {
            return this.sym().isModuleClass() ? (new StringBuilder(1)).append(this.sym().fullNameString()).append(".").toString() : (new StringBuilder(6)).append(this.sym().nameString()).append(".this.").toString();
         }
      }

      public String safeToString() {
         return this.sym().isEffectiveRoot() ? String.valueOf(this.sym().name()) : super.safeToString();
      }

      public Type narrow() {
         return this;
      }

      public String kind() {
         return "ThisType";
      }

      public String productPrefix() {
         return "ThisType";
      }

      public int productArity() {
         return 1;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.sym();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof ThisType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "sym";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof ThisType && ((ThisType)x$1).scala$reflect$internal$Types$ThisType$$$outer() == this.scala$reflect$internal$Types$ThisType$$$outer()) {
               ThisType var2 = (ThisType)x$1;
               Symbols.Symbol var10000 = this.sym();
               Symbols.Symbol var3 = var2.sym();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ThisType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public ThisType(final Symbols.Symbol sym) {
         this.sym = sym;
         if (!sym.isClass() && !sym.isFreeType()) {
            sym.failIfStub();
            throw Types.this.abort((new StringBuilder(39)).append("ThisType(").append(sym).append(") for sym which is not a class").toString());
         }
      }
   }

   public final class UniqueThisType extends ThisType {
      public UniqueThisType(final Symbols.Symbol sym) {
         super(sym);
      }
   }

   public class ThisType$ extends scala.reflect.api.Types.ThisTypeExtractor implements Serializable {
      public Type apply(final Symbols.Symbol sym) {
         return !this.scala$reflect$internal$Types$ThisType$$$outer().phase().erasedTypes() ? this.scala$reflect$internal$Types$ThisType$$$outer().unique(this.scala$reflect$internal$Types$ThisType$$$outer().new UniqueThisType(sym)) : sym.tpe_$times();
      }

      public Option unapply(final ThisType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(x$0.sym()));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ThisType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public abstract class SingleType extends SingletonType implements scala.reflect.api.Types.SingleTypeApi, Serializable {
      private final Type pre;
      private final Symbols.Symbol sym;
      private byte trivial;
      private volatile Type underlyingCache;
      private volatile int underlyingPeriod;

      public Type pre() {
         return this.pre;
      }

      public Symbols.Symbol sym() {
         return this.sym;
      }

      public boolean isTrivial() {
         if (this.trivial == 0) {
            this.trivial = ThreeValues$.MODULE$.fromBoolean(this.pre().isTrivial());
         }

         return ThreeValues$.MODULE$.toBoolean(this.trivial);
      }

      public boolean isGround() {
         return this.sym().isPackageClass() || this.pre().isGround();
      }

      public Type underlyingCache() {
         return this.underlyingCache;
      }

      public void underlyingCache_$eq(final Type x$1) {
         this.underlyingCache = x$1;
      }

      public int underlyingPeriod() {
         return this.underlyingPeriod;
      }

      public void underlyingPeriod_$eq(final int x$1) {
         this.underlyingPeriod = x$1;
      }

      public void scala$reflect$internal$Types$$invalidateSingleTypeCaches() {
         this.underlyingCache_$eq(this.scala$reflect$internal$Types$SingleType$$$outer().NoType());
         this.underlyingPeriod_$eq(0);
      }

      public Type underlying() {
         Type cache = this.underlyingCache();
         if (this.underlyingPeriod() == this.scala$reflect$internal$Types$SingleType$$$outer().currentPeriod() && cache != null) {
            return cache;
         } else {
            this.scala$reflect$internal$Types$SingleType$$$outer().defineUnderlyingOfSingleType(this);
            return this.underlyingCache();
         }
      }

      public boolean isImmediatelyDependent() {
         return this.sym() != this.scala$reflect$internal$Types$SingleType$$$outer().NoSymbol() && this.sym().owner().isMethod() && this.sym().isValueParameter();
      }

      public Type narrow() {
         return this;
      }

      public Symbols.Symbol termSymbol() {
         return this.sym();
      }

      public Type prefix() {
         return this.pre();
      }

      public String prefixString() {
         if (this.sym().skipPackageObject().isOmittablePrefix()) {
            return "";
         } else {
            return this.sym().isPackageObjectOrClass() ? this.pre().prefixString() : (new StringBuilder(1)).append(this.pre().prefixString()).append(this.sym().nameString()).append(".").toString();
         }
      }

      public String kind() {
         return "SingleType";
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         if (this.sym().isPackageClass()) {
            return this;
         } else {
            Type pre1 = map.apply(this.pre());
            return (Type)(pre1 == this.pre() ? this : this.scala$reflect$internal$Types$SingleType$$$outer().singleType(pre1, this.sym()));
         }
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         folder.apply(this.pre());
      }

      public String productPrefix() {
         return "SingleType";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.pre();
            case 1:
               return this.sym();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof SingleType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "pre";
            case 1:
               return "sym";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof SingleType && ((SingleType)x$1).scala$reflect$internal$Types$SingleType$$$outer() == this.scala$reflect$internal$Types$SingleType$$$outer()) {
               SingleType var2 = (SingleType)x$1;
               Type var10000 = this.pre();
               Type var3 = var2.pre();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               Symbols.Symbol var5 = this.sym();
               Symbols.Symbol var4 = var2.sym();
               if (var5 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var5.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$SingleType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public SingleType(final Type pre, final Symbols.Symbol sym) {
         this.pre = pre;
         this.sym = sym;
         this.trivial = 0;
         this.underlyingCache = Types.this.NoType();
         this.underlyingPeriod = 0;
      }
   }

   public final class UniqueSingleType extends SingleType {
      public UniqueSingleType(final Type pre, final Symbols.Symbol sym) {
         super(pre, sym);
      }
   }

   public class SingleType$ extends scala.reflect.api.Types.SingleTypeExtractor implements Serializable {
      public Type apply(final Type pre, final Symbols.Symbol sym) {
         return this.scala$reflect$internal$Types$SingleType$$$outer().unique(this.scala$reflect$internal$Types$SingleType$$$outer().new UniqueSingleType(pre, sym));
      }

      public Option unapply(final SingleType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.pre(), x$0.sym())));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$SingleType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public abstract class SuperType extends SingletonType implements scala.reflect.api.Types.SuperTypeApi, Serializable {
      private final Type thistpe;
      private final Type supertpe;
      private byte trivial;

      public Type thistpe() {
         return this.thistpe;
      }

      public Type supertpe() {
         return this.supertpe;
      }

      public boolean isTrivial() {
         if (this.trivial == 0) {
            this.trivial = ThreeValues$.MODULE$.fromBoolean(this.thistpe().isTrivial() && this.supertpe().isTrivial());
         }

         return ThreeValues$.MODULE$.toBoolean(this.trivial);
      }

      public Symbols.Symbol typeSymbol() {
         return this.thistpe().typeSymbol();
      }

      public Type underlying() {
         return this.supertpe();
      }

      public Type prefix() {
         return this.supertpe().prefix();
      }

      public String prefixString() {
         return this.thistpe().prefixString().replaceAll("\\bthis\\.$", "super.");
      }

      public Type narrow() {
         return this.thistpe().narrow();
      }

      public String kind() {
         return "SuperType";
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         Type thistp1 = map.apply(this.thistpe());
         Type supertp1 = map.apply(this.supertpe());
         return (Type)(thistp1 == this.thistpe() && supertp1 == this.supertpe() ? this : this.scala$reflect$internal$Types$SuperType$$$outer().SuperType().apply(thistp1, supertp1));
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         folder.apply(this.thistpe());
         folder.apply(this.supertpe());
      }

      public String productPrefix() {
         return "SuperType";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.thistpe();
            case 1:
               return this.supertpe();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof SuperType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "thistpe";
            case 1:
               return "supertpe";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof SuperType && ((SuperType)x$1).scala$reflect$internal$Types$SuperType$$$outer() == this.scala$reflect$internal$Types$SuperType$$$outer()) {
               SuperType var2 = (SuperType)x$1;
               Type var10000 = this.thistpe();
               Type var3 = var2.thistpe();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               var10000 = this.supertpe();
               Type var4 = var2.supertpe();
               if (var10000 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$SuperType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public SuperType(final Type thistpe, final Type supertpe) {
         this.thistpe = thistpe;
         this.supertpe = supertpe;
         this.trivial = 0;
      }
   }

   public final class UniqueSuperType extends SuperType {
      public UniqueSuperType(final Type thistp, final Type supertp) {
         super(thistp, supertp);
      }
   }

   public class SuperType$ extends scala.reflect.api.Types.SuperTypeExtractor implements Serializable {
      public Type apply(final Type thistp, final Type supertp) {
         return this.scala$reflect$internal$Types$SuperType$$$outer().phase().erasedTypes() ? supertp : this.scala$reflect$internal$Types$SuperType$$$outer().unique(this.scala$reflect$internal$Types$SuperType$$$outer().new UniqueSuperType(thistp, supertp));
      }

      public Option unapply(final SuperType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.thistpe(), x$0.supertpe())));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$SuperType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public abstract class TypeBounds extends SubType implements scala.reflect.api.Types.TypeBoundsApi, Serializable {
      private final Type lo;
      private final Type hi;

      public Type lo() {
         return this.lo;
      }

      public Type hi() {
         return this.hi;
      }

      public Type supertype() {
         return this.hi();
      }

      public boolean isTrivial() {
         return this.lo().isTrivial() && this.hi().isTrivial();
      }

      public TypeBounds bounds() {
         return this;
      }

      public Type upperBound() {
         return this.hi();
      }

      public Type lowerBound() {
         return this.lo();
      }

      public boolean containsType(final Type that) {
         if (that instanceof TypeBounds) {
            return that.$less$colon$less((Type)this);
         } else {
            return this.lo().$less$colon$less(that) && that.$less$colon$less(this.hi());
         }
      }

      private boolean emptyLowerBound() {
         SymbolTable var10000 = this.scala$reflect$internal$Types$TypeBounds$$$outer();
         Type typeIsNothing_tp = this.lo();
         if (var10000 == null) {
            throw null;
         } else {
            boolean var3 = var10000.typeIsNothing(typeIsNothing_tp);
            typeIsNothing_tp = null;
            return var3 || this.lo().isWildcard();
         }
      }

      private boolean emptyUpperBound() {
         SymbolTable var10000 = this.scala$reflect$internal$Types$TypeBounds$$$outer();
         Type typeIsAnyOrJavaObject_tp = this.hi();
         if (var10000 == null) {
            throw null;
         } else {
            boolean var3 = var10000.typeIsAnyOrJavaObject(typeIsAnyOrJavaObject_tp);
            typeIsAnyOrJavaObject_tp = null;
            return var3 || this.hi().isWildcard();
         }
      }

      public boolean isEmptyBounds() {
         return this.emptyLowerBound() && this.emptyUpperBound();
      }

      public String safeToString() {
         return this.scalaNotation((x$12) -> x$12.toString());
      }

      public String scalaNotation(final Function1 typeString) {
         return (new StringBuilder(0)).append(this.emptyLowerBound() ? "" : (new StringBuilder(4)).append(" >: ").append(typeString.apply(this.lo())).toString()).append(this.emptyUpperBound() ? "" : (new StringBuilder(4)).append(" <: ").append(typeString.apply(this.hi())).toString()).toString();
      }

      public String starNotation(final Function1 typeString) {
         if (this.emptyLowerBound() && this.emptyUpperBound()) {
            return "";
         } else {
            return this.emptyLowerBound() ? (new StringBuilder(2)).append("(").append(typeString.apply(this.hi())).append(")").toString() : (new StringBuilder(4)).append("(").append(typeString.apply(this.lo())).append(", ").append(typeString.apply(this.hi())).append(")").toString();
         }
      }

      public String kind() {
         return "TypeBoundsType";
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         Type var10000;
         if (map instanceof TypeMaps.VariancedTypeMap) {
            TypeMaps.VariancedTypeMap var3 = (TypeMaps.VariancedTypeMap)map;
            if (var3 == null) {
               throw null;
            }

            var3.variance_$eq(Variance$.MODULE$.flip$extension(var3.variance()));

            try {
               var10000 = $anonfun$mapOver$1(this, var3);
            } finally {
               var3.variance_$eq(Variance$.MODULE$.flip$extension(var3.variance()));
            }
         } else {
            var10000 = map.apply(this.lo());
         }

         Type lo1 = var10000;
         Type hi1 = map.apply(this.hi());
         return lo1 == this.lo() && hi1 == this.hi() ? this : this.scala$reflect$internal$Types$TypeBounds$$$outer().TypeBounds().apply(lo1, hi1);
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         folder.apply(this.lo());
         folder.apply(this.hi());
      }

      public String productPrefix() {
         return "TypeBounds";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.lo();
            case 1:
               return this.hi();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof TypeBounds;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "lo";
            case 1:
               return "hi";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof TypeBounds && ((TypeBounds)x$1).scala$reflect$internal$Types$TypeBounds$$$outer() == this.scala$reflect$internal$Types$TypeBounds$$$outer()) {
               TypeBounds var2 = (TypeBounds)x$1;
               Type var10000 = this.lo();
               Type var3 = var2.lo();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               var10000 = this.hi();
               Type var4 = var2.hi();
               if (var10000 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$TypeBounds$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final Type $anonfun$mapOver$1(final TypeBounds $this, final TypeMaps.VariancedTypeMap x2$1) {
         return x2$1.apply($this.lo());
      }

      public TypeBounds(final Type lo, final Type hi) {
         this.lo = lo;
         this.hi = hi;
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return var0.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public final class UniqueTypeBounds extends TypeBounds {
      public UniqueTypeBounds(final Type lo, final Type hi) {
         super(lo, hi);
      }
   }

   public class TypeBounds$ extends scala.reflect.api.Types.TypeBoundsExtractor implements Serializable {
      public TypeBounds empty() {
         return this.apply(this.scala$reflect$internal$Types$TypeBounds$$$outer().definitions().NothingTpe(), this.scala$reflect$internal$Types$TypeBounds$$$outer().definitions().AnyTpe());
      }

      public TypeBounds upper(final Type hi) {
         return this.apply(this.scala$reflect$internal$Types$TypeBounds$$$outer().definitions().NothingTpe(), hi);
      }

      public TypeBounds lower(final Type lo) {
         return this.apply(lo, this.scala$reflect$internal$Types$TypeBounds$$$outer().definitions().AnyTpe());
      }

      public TypeBounds apply(final Type lo, final Type hi) {
         return (TypeBounds)this.scala$reflect$internal$Types$TypeBounds$$$outer().unique(this.scala$reflect$internal$Types$TypeBounds$$$outer().new UniqueTypeBounds(lo, hi));
      }

      public Option unapply(final TypeBounds x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.lo(), x$0.hi())));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$TypeBounds$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public class CompoundType$ {
      public Option unapply(final Type tp) {
         if (tp instanceof ClassInfoType) {
            ClassInfoType var2 = (ClassInfoType)tp;
            List parents = var2.parents();
            Scopes.Scope decls = var2.decls();
            Symbols.Symbol clazz = var2.typeSymbol();
            return new Some(new Tuple3(parents, decls, clazz));
         } else if (tp instanceof RefinedType) {
            RefinedType var6 = (RefinedType)tp;
            List parents = var6.parents();
            Scopes.Scope decls = var6.decls();
            return new Some(new Tuple3(parents, decls, tp.typeSymbol()));
         } else {
            return scala.None..MODULE$;
         }
      }
   }

   public abstract class CompoundType extends Type implements scala.reflect.api.Types.CompoundTypeApi {
      private BaseTypeSeqs.BaseTypeSeq baseTypeSeqCache;
      private int baseTypeSeqPeriod = 0;
      private List baseClassesCache;
      private int baseClassesPeriod = 0;

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeqCache() {
         return this.baseTypeSeqCache;
      }

      public void baseTypeSeqCache_$eq(final BaseTypeSeqs.BaseTypeSeq x$1) {
         this.baseTypeSeqCache = x$1;
      }

      public int baseTypeSeqPeriod() {
         return this.baseTypeSeqPeriod;
      }

      public void baseTypeSeqPeriod_$eq(final int x$1) {
         this.baseTypeSeqPeriod = x$1;
      }

      public List baseClassesCache() {
         return this.baseClassesCache;
      }

      public void baseClassesCache_$eq(final List x$1) {
         this.baseClassesCache = x$1;
      }

      public int baseClassesPeriod() {
         return this.baseClassesPeriod;
      }

      public void baseClassesPeriod_$eq(final int x$1) {
         this.baseClassesPeriod = x$1;
      }

      public void scala$reflect$internal$Types$$invalidatedCompoundTypeCaches() {
         this.baseTypeSeqCache_$eq((BaseTypeSeqs.BaseTypeSeq)null);
         this.baseTypeSeqPeriod_$eq(0);
         this.baseClassesCache_$eq((List)null);
         this.baseClassesPeriod_$eq(0);
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeq() {
         BaseTypeSeqs.BaseTypeSeq cached = this.baseTypeSeqCache();
         if (this.baseTypeSeqPeriod() == this.scala$reflect$internal$Types$CompoundType$$$outer().currentPeriod() && cached != null && !cached.equals(this.scala$reflect$internal$Types$CompoundType$$$outer().undetBaseTypeSeq())) {
            return cached;
         } else {
            this.scala$reflect$internal$Types$CompoundType$$$outer().defineBaseTypeSeqOfCompoundType(this);
            if (this.baseTypeSeqCache() == this.scala$reflect$internal$Types$CompoundType$$$outer().undetBaseTypeSeq()) {
               throw this.scala$reflect$internal$Types$CompoundType$$$outer().new RecoverableCyclicReference(this.typeSymbol());
            } else {
               return this.baseTypeSeqCache();
            }
         }
      }

      public int baseTypeSeqDepth() {
         return this.baseTypeSeq().maxDepth();
      }

      public List baseClasses() {
         List cached = this.baseClassesCache();
         if (this.baseClassesPeriod() == this.scala$reflect$internal$Types$CompoundType$$$outer().currentPeriod() && cached != null) {
            return cached;
         } else {
            this.scala$reflect$internal$Types$CompoundType$$$outer().defineBaseClassesOfCompoundType(this);
            if (this.baseClassesCache() == null) {
               throw this.scala$reflect$internal$Types$CompoundType$$$outer().new RecoverableCyclicReference(this.typeSymbol());
            } else {
               return this.baseClassesCache();
            }
         }
      }

      public Object memo(final Function0 op1, final Function1 op2) {
         Option var3 = this.scala$reflect$internal$Types$CompoundType$$$outer().intersectionWitness().get(this.parents());
         if (var3 instanceof Some) {
            Option var4 = ((WeakReference)((Some)var3).value()).get();
            if (var4 instanceof Some) {
               Type w = (Type)((Some)var4).value();
               return w == this ? op1.apply() : op2.apply(w);
            } else if (scala.None..MODULE$.equals(var4)) {
               this.scala$reflect$internal$Types$CompoundType$$$outer().intersectionWitness().update(this.parents(), new WeakReference(this));
               return op1.apply();
            } else {
               throw new MatchError(var4);
            }
         } else if (scala.None..MODULE$.equals(var3)) {
            this.scala$reflect$internal$Types$CompoundType$$$outer().intersectionWitness().update(this.parents(), new WeakReference(this));
            return op1.apply();
         } else {
            throw new MatchError(var3);
         }
      }

      public Type baseType(final Symbols.Symbol sym) {
         int index = this.baseTypeIndex(sym);
         return (Type)(index >= 0 ? this.baseTypeSeq().apply(index) : this.scala$reflect$internal$Types$CompoundType$$$outer().NoType());
      }

      public Type narrow() {
         return this.typeSymbol().thisType();
      }

      public boolean isStructuralRefinement() {
         return this.typeSymbol().isAnonOrRefinementClass() && this.decls().exists(this.scala$reflect$internal$Types$CompoundType$$$outer().symbolIsPossibleInRefinement());
      }

      public boolean shouldForceScope() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var5 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$CompoundType$$$outer().settings();
         MutableSettings var6 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var6;
         boolean var7 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         return var7 || this.parents().isEmpty() || !this.decls().isEmpty();
      }

      public Scopes.Scope initDecls() {
         return this.scala$reflect$internal$Types$CompoundType$$$outer().definitions().fullyInitializeScope(this.decls());
      }

      public String scopeString() {
         if (this.shouldForceScope()) {
            Scopes.Scope var10000 = this.initDecls();
            String mkString_end = "}";
            String mkString_sep = "; ";
            String mkString_start = "{";
            if (var10000 == null) {
               throw null;
            } else {
               return IterableOnceOps.mkString$(var10000, mkString_start, mkString_sep, mkString_end);
            }
         } else {
            return "";
         }
      }

      public String safeToString() {
         return (new StringBuilder(0)).append(this.scala$reflect$internal$Types$CompoundType$$$outer().definitions().parentsString(this.parents())).append(this.scopeString()).toString();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$CompoundType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      private final Object updateCache$1(final Function0 op1$1) {
         this.scala$reflect$internal$Types$CompoundType$$$outer().intersectionWitness().update(this.parents(), new WeakReference(this));
         return op1$1.apply();
      }
   }

   public class RefinedType extends CompoundType implements scala.reflect.api.Types.RefinedTypeApi, Product, Serializable {
      private final List parents;
      private final Scopes.Scope decls;
      private Type normalized;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public List parents() {
         return this.parents;
      }

      public Scopes.Scope decls() {
         return this.decls;
      }

      public boolean isHigherKinded() {
         if (!this.parents().isEmpty()) {
            List var10000 = this.parents();
            if (var10000 == null) {
               throw null;
            }

            List forall_these = var10000;

            while(true) {
               if (forall_these.isEmpty()) {
                  var3 = true;
                  break;
               }

               if (!((Type)forall_these.head()).isHigherKinded()) {
                  var3 = false;
                  break;
               }

               forall_these = (List)forall_these.tail();
            }

            Object var2 = null;
            if (var3 && !this.scala$reflect$internal$Types$RefinedType$$$outer().phase().erasedTypes()) {
               return true;
            }
         }

         return false;
      }

      public List typeParams() {
         return this.isHigherKinded() ? this.firstParent().typeParams() : super.typeParams();
      }

      public Type typeConstructor() {
         SymbolTable var10000 = this.scala$reflect$internal$Types$RefinedType$$$outer();
         List var10002 = this.parents();
         if (var10002 == null) {
            throw null;
         } else {
            List map_this = var10002;
            Object var11;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               var11 = scala.collection.immutable.Nil..MODULE$;
            } else {
               .colon.colon map_h = new .colon.colon(((Type)map_this.head()).typeConstructor(), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  .colon.colon map_nx = new .colon.colon(((Type)map_rest.head()).typeConstructor(), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var11 = map_h;
            }

            Object var6 = null;
            Object var7 = null;
            Object var8 = null;
            Object var9 = null;
            Object var10 = null;
            return var10000.copyRefinedType(this, (List)var11, this.decls(), this.scala$reflect$internal$Types$RefinedType$$$outer().copyRefinedType$default$4());
         }
      }

      public final Type normalize() {
         if (this.scala$reflect$internal$Types$RefinedType$$$outer().phase().erasedTypes()) {
            return this.normalizeImpl();
         } else {
            if (this.normalized == null) {
               this.normalized = this.normalizeImpl();
            }

            return this.normalized;
         }
      }

      private Type normalizeImpl() {
         LinkedHashSet var10000 = scala.collection.mutable.LinkedHashSet..MODULE$;
         LinkedHashSet flattened = new LinkedHashSet();
         List var4 = this.parents();
         if (var4 == null) {
            throw null;
         } else {
            for(List foreach_these = var4; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               loop$1((Type)foreach_these.head(), flattened);
            }

            Object var3 = null;
            if (this.decls().isEmpty() && flattened.size() == 1) {
               return (Type)flattened.head();
            } else if (!flattened.iterator().sameElements(this.parents())) {
               return this.scala$reflect$internal$Types$RefinedType$$$outer().refinedType(flattened.toList(), (Symbols.Symbol)(this.typeSymbol() == this.scala$reflect$internal$Types$RefinedType$$$outer().NoSymbol() ? this.scala$reflect$internal$Types$RefinedType$$$outer().NoSymbol() : this.typeSymbol().owner()), this.decls(), this.scala$reflect$internal$Types$RefinedType$$$outer().NoPosition());
            } else {
               return this.isHigherKinded() ? this.etaExpand() : super.normalize();
            }
         }
      }

      public final Type etaExpand() {
         if (!this.isHigherKinded()) {
            return this;
         } else {
            SymbolTable var10000 = this.scala$reflect$internal$Types$RefinedType$$$outer();
            List var10001 = this.typeParams();
            RefinedType$ var10002 = this.scala$reflect$internal$Types$RefinedType$$$outer().RefinedType();
            List var10003 = this.parents();
            if (var10003 == null) {
               throw null;
            } else {
               List map_this = var10003;
               Object var13;
               if (map_this == scala.collection.immutable.Nil..MODULE$) {
                  var13 = scala.collection.immutable.Nil..MODULE$;
               } else {
                  Type var6 = (Type)map_this.head();
                  .colon.colon map_h = new .colon.colon($anonfun$etaExpand$1(this, var6), scala.collection.immutable.Nil..MODULE$);
                  .colon.colon map_t = map_h;

                  for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                     var6 = (Type)map_rest.head();
                     .colon.colon map_nx = new .colon.colon($anonfun$etaExpand$1(this, var6), scala.collection.immutable.Nil..MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var13 = map_h;
               }

               Object var7 = null;
               Object var8 = null;
               Object var9 = null;
               Object var10 = null;
               Object var11 = null;
               return var10000.typeFun(var10001, var10002.apply((List)var13, this.decls(), this.typeSymbol()));
            }
         }
      }

      public String kind() {
         return "RefinedType";
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         List var10000 = this.parents();
         if (var10000 == null) {
            throw null;
         } else {
            List mapConserve_this = var10000;
            List mapConserve_loop$3_pending = mapConserve_this;
            List mapConserve_loop$3_unchanged = mapConserve_this;
            .colon.colon mapConserve_loop$3_mappedLast = null;
            List mapConserve_loop$3_mappedHead = null;

            while(!mapConserve_loop$3_pending.isEmpty()) {
               Object mapConserve_loop$3_head0 = mapConserve_loop$3_pending.head();
               Object mapConserve_loop$3_head1 = map.apply(mapConserve_loop$3_head0);
               if (mapConserve_loop$3_head1 == mapConserve_loop$3_head0) {
                  mapConserve_loop$3_pending = (List)mapConserve_loop$3_pending.tail();
                  mapConserve_loop$3_unchanged = mapConserve_loop$3_unchanged;
                  mapConserve_loop$3_mappedLast = mapConserve_loop$3_mappedLast;
                  mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead;
               } else {
                  List mapConserve_loop$3_xc = mapConserve_loop$3_unchanged;
                  List mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_mappedHead;

                  .colon.colon mapConserve_loop$3_mappedLast1;
                  for(mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_mappedLast; mapConserve_loop$3_xc != mapConserve_loop$3_pending; mapConserve_loop$3_xc = (List)mapConserve_loop$3_xc.tail()) {
                     .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_xc.head(), scala.collection.immutable.Nil..MODULE$);
                     if (mapConserve_loop$3_mappedHead1 == null) {
                        mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                     }

                     if (mapConserve_loop$3_mappedLast1 != null) {
                        mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                     }

                     mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_next;
                  }

                  .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_head1, scala.collection.immutable.Nil..MODULE$);
                  if (mapConserve_loop$3_mappedHead1 == null) {
                     mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                  }

                  if (mapConserve_loop$3_mappedLast1 != null) {
                     mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                  }

                  List mapConserve_loop$3_tail0 = (List)mapConserve_loop$3_pending.tail();
                  mapConserve_loop$3_pending = mapConserve_loop$3_tail0;
                  mapConserve_loop$3_unchanged = mapConserve_loop$3_tail0;
                  mapConserve_loop$3_mappedLast = mapConserve_loop$3_next;
                  mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead1;
               }
            }

            Object var32;
            if (mapConserve_loop$3_mappedHead == null) {
               var32 = mapConserve_loop$3_unchanged;
            } else {
               mapConserve_loop$3_mappedLast.next_$eq(mapConserve_loop$3_unchanged);
               var32 = mapConserve_loop$3_mappedHead;
            }

            mapConserve_loop$3_mappedHead = null;
            Object var21 = null;
            Object var22 = null;
            Object var23 = null;
            Object var24 = null;
            Object var25 = null;
            Object var26 = null;
            Object var27 = null;
            Object var28 = null;
            Object var29 = null;
            Object var30 = null;
            Object var31 = null;
            List mapConserve_result = (List)var32;
            Statics.releaseFence();
            var32 = mapConserve_result;
            Object var18 = null;
            mapConserve_result = null;
            List parents1 = (List)var32;
            Scopes.Scope decls1 = map.mapOver(this.decls());
            return this.scala$reflect$internal$Types$RefinedType$$$outer().copyRefinedType(this, parents1, decls1, this.scala$reflect$internal$Types$RefinedType$$$outer().copyRefinedType$default$4());
         }
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         List var10000 = this.parents();
         if (var10000 == null) {
            throw null;
         } else {
            for(List foreach_these = var10000; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               folder.apply(foreach_these.head());
            }

            Object var3 = null;
            folder.foldOver(this.decls());
         }
      }

      public RefinedType copy(final List parents, final Scopes.Scope decls) {
         return this.scala$reflect$internal$Types$RefinedType$$$outer().new RefinedType(parents, decls);
      }

      public List copy$default$1() {
         return this.parents();
      }

      public Scopes.Scope copy$default$2() {
         return this.decls();
      }

      public String productPrefix() {
         return "RefinedType";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.parents();
            case 1:
               return this.decls();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof RefinedType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "parents";
            case 1:
               return "decls";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof RefinedType && ((RefinedType)x$1).scala$reflect$internal$Types$RefinedType$$$outer() == this.scala$reflect$internal$Types$RefinedType$$$outer()) {
               RefinedType var2 = (RefinedType)x$1;
               List var10000 = this.parents();
               List var3 = var2.parents();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               Scopes.Scope var5 = this.decls();
               Scopes.Scope var4 = var2.decls();
               if (var5 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var5.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$RefinedType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isHigherKinded$1(final Type x$17) {
         return x$17.isHigherKinded();
      }

      // $FF: synthetic method
      public static final Type $anonfun$typeConstructor$1(final Type x$18) {
         return x$18.typeConstructor();
      }

      private static final Type dealiasRefinement$1(final Type tp) {
         return tp.dealias() instanceof RefinedType ? tp.dealias() : tp;
      }

      // $FF: synthetic method
      public static final void $anonfun$normalizeImpl$1(final LinkedHashSet flattened$1, final Type tp) {
         loop$1(tp, flattened$1);
      }

      private static final void loop$1(final Type tp, final LinkedHashSet flattened$1) {
         Type var2 = dealiasRefinement$1(tp);
         if (var2 instanceof RefinedType) {
            RefinedType var3 = (RefinedType)var2;
            List parents = var3.parents();
            if (var3.decls().isEmpty()) {
               if (parents == null) {
                  throw null;
               }

               for(List foreach_these = parents; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
                  loop$1((Type)foreach_these.head(), flattened$1);
               }

               return;
            }
         }

         flattened$1.add(var2);
      }

      // $FF: synthetic method
      public static final void $anonfun$normalizeImpl$2(final LinkedHashSet flattened$1, final Type tp) {
         loop$1(tp, flattened$1);
      }

      // $FF: synthetic method
      public static final Type $anonfun$etaExpand$1(final RefinedType $this, final Type x0$1) {
         if (x0$1 instanceof TypeRef) {
            TypeRef var2 = (TypeRef)x0$1;
            Type pre = var2.pre();
            Symbols.Symbol sym = var2.sym();
            List var5 = var2.args();
            if (var5 != null) {
               List var10000 = scala.package..MODULE$.List();
               if (var10000 == null) {
                  throw null;
               }

               List unapplySeq_this = var10000;
               SeqOps var10 = SeqFactory.unapplySeq$(unapplySeq_this, var5);
               Object var9 = null;
               SeqOps var6 = var10;
               SeqFactory.UnapplySeqWrapper var11 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
               SeqFactory.UnapplySeqWrapper var10001 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
               new SeqFactory.UnapplySeqWrapper(var6);
               var11 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
               var11 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
               int lengthCompare$extension_len = 0;
               if (var6.lengthCompare(lengthCompare$extension_len) == 0) {
                  return $this.scala$reflect$internal$Types$RefinedType$$$outer().TypeRef().apply(pre, sym, $this.dummyArgs());
               }
            }
         }

         return x0$1;
      }

      public RefinedType(final List parents, final Scopes.Scope decls) {
         this.parents = parents;
         this.decls = decls;
      }

      // $FF: synthetic method
      public static final Object $anonfun$isHigherKinded$1$adapted(final Type x$17) {
         return BoxesRunTime.boxToBoolean($anonfun$isHigherKinded$1(x$17));
      }

      // $FF: synthetic method
      public static final Object $anonfun$normalizeImpl$2$adapted(final LinkedHashSet flattened$1, final Type tp) {
         $anonfun$normalizeImpl$2(flattened$1, tp);
         return BoxedUnit.UNIT;
      }

      // $FF: synthetic method
      public static final Object $anonfun$normalizeImpl$1$adapted(final LinkedHashSet flattened$1, final Type tp) {
         $anonfun$normalizeImpl$1(flattened$1, tp);
         return BoxedUnit.UNIT;
      }
   }

   public final class RefinedType0 extends RefinedType {
      private final Symbols.Symbol clazz;

      public Symbols.Symbol typeSymbol() {
         return this.clazz;
      }

      public RefinedType0(final List parents, final Scopes.Scope decls, final Symbols.Symbol clazz) {
         super(parents, decls);
         this.clazz = clazz;
      }
   }

   public class RefinedType$ extends scala.reflect.api.Types.RefinedTypeExtractor implements Serializable {
      public RefinedType apply(final List parents, final Scopes.Scope decls, final Symbols.Symbol clazz) {
         return this.scala$reflect$internal$Types$RefinedType$$$outer().new RefinedType0(parents, decls, clazz);
      }

      public RefinedType apply(final List parents, final Scopes.Scope decls) {
         return this.scala$reflect$internal$Types$RefinedType$$$outer().new RefinedType(parents, decls);
      }

      public Option unapply(final RefinedType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.parents(), x$0.decls())));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$RefinedType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public class ClassInfoType extends CompoundType implements scala.reflect.api.Types.ClassInfoTypeApi, Product, Serializable {
      private volatile enterRefs$ enterRefs$module;
      private final List parents;
      private final Scopes.Scope decls;
      private final Symbols.Symbol typeSymbol;
      private scala.collection.immutable.Map[] refs;
      private int state;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      private enterRefs$ enterRefs() {
         if (this.enterRefs$module == null) {
            this.enterRefs$lzycompute$1();
         }

         return this.enterRefs$module;
      }

      public List parents() {
         return this.parents;
      }

      public Scopes.Scope decls() {
         return this.decls;
      }

      public Symbols.Symbol typeSymbol() {
         return this.typeSymbol;
      }

      private final int NonExpansive() {
         return 0;
      }

      private final int Expansive() {
         return 1;
      }

      private final int UnInitialized() {
         return 0;
      }

      private final int Initializing() {
         return 1;
      }

      private final int Initialized() {
         return 2;
      }

      public Set expansiveRefs(final Symbols.Symbol tparam) {
         if (this.state() == 0) {
            this.computeRefs();

            while(this.state() != 2) {
               this.propagate();
            }
         }

         return this.getRefs(1, tparam);
      }

      private int state() {
         return this.state;
      }

      private void state_$eq(final int x$1) {
         this.state = x$1;
      }

      private Set getRefs(final int which, final Symbols.Symbol from) {
         Option var3 = this.refs[which].get(from);
         if (var3 instanceof Some) {
            return (Set)((Some)var3).value();
         } else {
            Set var10000 = scala.Predef..MODULE$.Set();
            Nil apply_elems = scala.collection.immutable.Nil..MODULE$;
            if (var10000 == null) {
               throw null;
            } else {
               return (Set)IterableFactory.apply$(var10000, apply_elems);
            }
         }
      }

      public void scala$reflect$internal$Types$ClassInfoType$$addRef(final int which, final Symbols.Symbol from, final Symbols.Symbol to) {
         scala.collection.immutable.Map[] var10000 = this.refs;
         scala.collection.immutable.Map var10002 = this.refs[which];
         Predef.ArrowAssoc var10003 = scala.Predef.ArrowAssoc..MODULE$;
         Set var8 = this.getRefs(which, from);
         if (var8 == null) {
            throw null;
         } else {
            SetOps $plus_this = var8;
            SetOps var9 = $plus_this.incl(to);
            $plus_this = null;
            Object $minus$greater$extension_y = var9;
            Tuple2 var10 = new Tuple2(from, $minus$greater$extension_y);
            $minus$greater$extension_y = null;
            var10000[which] = (scala.collection.immutable.Map)var10002.$plus(var10);
         }
      }

      private void addRefs(final int which, final Symbols.Symbol from, final Set to) {
         scala.collection.immutable.Map[] var10000 = this.refs;
         scala.collection.immutable.Map var10002 = this.refs[which];
         Predef.ArrowAssoc var10003 = scala.Predef.ArrowAssoc..MODULE$;
         Set var8 = this.getRefs(which, from);
         if (var8 == null) {
            throw null;
         } else {
            scala.collection.SetOps $plus$plus_this = var8;
            scala.collection.SetOps var9 = $plus$plus_this.concat(to);
            $plus$plus_this = null;
            Object $minus$greater$extension_y = var9;
            Tuple2 var10 = new Tuple2(from, $minus$greater$extension_y);
            $minus$greater$extension_y = null;
            var10000[which] = (scala.collection.immutable.Map)var10002.$plus(var10);
         }
      }

      private ClassInfoType classInfo(final Symbols.Symbol tparam) {
         while(true) {
            Type var2 = tparam.owner().info().resultType();
            if (var2 instanceof ClassInfoType) {
               return (ClassInfoType)var2;
            }

            tparam = this.scala$reflect$internal$Types$ClassInfoType$$$outer().definitions().ObjectClass();
         }
      }

      private void computeRefs() {
         scala.collection.immutable.Map[] var10001 = new scala.collection.immutable.Map[2];
         scala.collection.immutable.Map var10004 = scala.Predef..MODULE$.Map();
         Nil apply_elems = scala.collection.immutable.Nil..MODULE$;
         if (var10004 == null) {
            throw null;
         } else {
            Object var8 = MapFactory.apply$(var10004, apply_elems);
            Object var6 = null;
            var10001[0] = (scala.collection.immutable.Map)var8;
            scala.collection.immutable.Map var9 = scala.Predef..MODULE$.Map();
            Nil apply_elemsx = scala.collection.immutable.Nil..MODULE$;
            if (var9 == null) {
               throw null;
            } else {
               Object var10 = MapFactory.apply$(var9, apply_elemsx);
               Object var7 = null;
               var10001[1] = (scala.collection.immutable.Map)var10;
               this.refs = var10001;
               List var10000 = this.typeSymbol().typeParams();
               if (var10000 == null) {
                  throw null;
               } else {
                  for(List foreach_these = var10000; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
                     Symbols.Symbol var4 = (Symbols.Symbol)foreach_these.head();
                     $anonfun$computeRefs$1(this, var4);
                  }

                  Object var5 = null;
                  this.state_$eq(1);
               }
            }
         }
      }

      private boolean propagate() {
         if (this.state() == 0) {
            this.computeRefs();
         }

         BooleanRef change;
         boolean var7;
         label41: {
            scala.collection.immutable.Map[] lastRefs = new scala.collection.immutable.Map[]{this.refs[0], this.refs[1]};
            this.state_$eq(2);
            boolean create_e = false;
            change = new BooleanRef(create_e);
            this.refs[0].iterator().withFilter((check$ifrefutable$1) -> BoxesRunTime.boxToBoolean($anonfun$propagate$1(check$ifrefutable$1))).foreach((x$22) -> {
               $anonfun$propagate$2(this, change, x$22);
               return BoxedUnit.UNIT;
            });
            this.refs[1].iterator().withFilter((check$ifrefutable$2) -> BoxesRunTime.boxToBoolean($anonfun$propagate$4(check$ifrefutable$2))).foreach((x$23) -> {
               $anonfun$propagate$5(this, change, x$23);
               return BoxedUnit.UNIT;
            });
            if (!change.elem) {
               label40: {
                  scala.collection.immutable.Map var10001 = this.refs[0];
                  scala.collection.immutable.Map var3 = lastRefs[0];
                  if (var10001 == null) {
                     if (var3 != null) {
                        break label40;
                     }
                  } else if (!var10001.equals(var3)) {
                     break label40;
                  }

                  var10001 = this.refs[1];
                  scala.collection.immutable.Map var4 = lastRefs[1];
                  if (var10001 == null) {
                     if (var4 != null) {
                        break label40;
                     }
                  } else if (!var10001.equals(var4)) {
                     break label40;
                  }

                  var7 = false;
                  break label41;
               }
            }

            var7 = true;
         }

         change.elem = var7;
         if (change.elem) {
            this.state_$eq(1);
         }

         return change.elem;
      }

      public String kind() {
         return "ClassInfoType";
      }

      public String formattedToString() {
         StringBuilder var10000 = new StringBuilder(0);
         List var10001 = this.parents();
         String mkString_sep = "\n        with ";
         if (var10001 == null) {
            throw null;
         } else {
            AbstractIterable mkString_this = var10001;
            String mkString_end = "";
            String mkString_start = "";
            String var9 = IterableOnceOps.mkString$(mkString_this, mkString_start, mkString_sep, mkString_end);
            Object var7 = null;
            Object var8 = null;
            mkString_this = null;
            Object var6 = null;
            return var10000.append(var9).append(this.scopeString()).toString();
         }
      }

      public boolean shouldForceScope() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var5 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$ClassInfoType$$$outer().settings();
         MutableSettings var6 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var6;
         boolean var7 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         return var7 || this.decls().size() > 1;
      }

      public String scopeString() {
         Scopes.Scope var10000 = this.initDecls();
         String mkString_end = "\n}";
         String mkString_sep = "\n  ";
         String mkString_start = " {\n  ";
         if (var10000 == null) {
            throw null;
         } else {
            return IterableOnceOps.mkString$(var10000, mkString_start, mkString_sep, mkString_end);
         }
      }

      public String safeToString() {
         return this.shouldForceScope() ? this.formattedToString() : super.safeToString();
      }

      public ClassInfoType copy(final List parents, final Scopes.Scope decls, final Symbols.Symbol typeSymbol) {
         return this.scala$reflect$internal$Types$ClassInfoType$$$outer().new ClassInfoType(parents, decls, typeSymbol);
      }

      public List copy$default$1() {
         return this.parents();
      }

      public Scopes.Scope copy$default$2() {
         return this.decls();
      }

      public Symbols.Symbol copy$default$3() {
         return this.typeSymbol();
      }

      public String productPrefix() {
         return "ClassInfoType";
      }

      public int productArity() {
         return 3;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.parents();
            case 1:
               return this.decls();
            case 2:
               return this.typeSymbol();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof ClassInfoType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "parents";
            case 1:
               return "decls";
            case 2:
               return "typeSymbol";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof ClassInfoType && ((ClassInfoType)x$1).scala$reflect$internal$Types$ClassInfoType$$$outer() == this.scala$reflect$internal$Types$ClassInfoType$$$outer()) {
               ClassInfoType var2 = (ClassInfoType)x$1;
               List var10000 = this.parents();
               List var3 = var2.parents();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               Scopes.Scope var6 = this.decls();
               Scopes.Scope var4 = var2.decls();
               if (var6 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var6.equals(var4)) {
                  return false;
               }

               Symbols.Symbol var7 = this.typeSymbol();
               Symbols.Symbol var5 = var2.typeSymbol();
               if (var7 == null) {
                  if (var5 != null) {
                     return false;
                  }
               } else if (!var7.equals(var5)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ClassInfoType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      private final void enterRefs$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.enterRefs$module == null) {
               this.enterRefs$module = new enterRefs$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      // $FF: synthetic method
      public static final void $anonfun$computeRefs$2(final ClassInfoType $this, final Symbols.Symbol tparam$1, final Type p) {
         $this.enterRefs().enter(tparam$1, p);
      }

      // $FF: synthetic method
      public static final void $anonfun$computeRefs$1(final ClassInfoType $this, final Symbols.Symbol tparam) {
         List var10000 = $this.parents();
         if (var10000 == null) {
            throw null;
         } else {
            for(List foreach_these = var10000; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               Type var3 = (Type)foreach_these.head();
               $anonfun$computeRefs$2($this, tparam, var3);
            }

         }
      }

      // $FF: synthetic method
      public static final boolean $anonfun$propagate$1(final Tuple2 check$ifrefutable$1) {
         return check$ifrefutable$1 != null;
      }

      // $FF: synthetic method
      public static final void $anonfun$propagate$3(final ClassInfoType $this, final BooleanRef change$1, final Symbols.Symbol from$1, final Symbols.Symbol target) {
         ClassInfoType thatInfo = $this.classInfo(target);
         if (thatInfo.state() != 2) {
            change$1.elem |= thatInfo.propagate();
         }

         $this.addRefs(0, from$1, thatInfo.getRefs(0, target));
         $this.addRefs(1, from$1, thatInfo.getRefs(1, target));
      }

      // $FF: synthetic method
      public static final void $anonfun$propagate$2(final ClassInfoType $this, final BooleanRef change$1, final Tuple2 x$22) {
         if (x$22 != null) {
            Symbols.Symbol from = (Symbols.Symbol)x$22._1();
            ((Set)x$22._2()).foreach((target) -> {
               $anonfun$propagate$3($this, change$1, from, target);
               return BoxedUnit.UNIT;
            });
         } else {
            throw new MatchError((Object)null);
         }
      }

      // $FF: synthetic method
      public static final boolean $anonfun$propagate$4(final Tuple2 check$ifrefutable$2) {
         return check$ifrefutable$2 != null;
      }

      // $FF: synthetic method
      public static final void $anonfun$propagate$6(final ClassInfoType $this, final BooleanRef change$1, final Symbols.Symbol from$2, final Symbols.Symbol target) {
         ClassInfoType thatInfo = $this.classInfo(target);
         if (thatInfo.state() != 2) {
            change$1.elem |= thatInfo.propagate();
         }

         $this.addRefs(1, from$2, thatInfo.getRefs(0, target));
      }

      // $FF: synthetic method
      public static final void $anonfun$propagate$5(final ClassInfoType $this, final BooleanRef change$1, final Tuple2 x$23) {
         if (x$23 != null) {
            Symbols.Symbol from = (Symbols.Symbol)x$23._1();
            ((Set)x$23._2()).foreach((target) -> {
               $anonfun$propagate$6($this, change$1, from, target);
               return BoxedUnit.UNIT;
            });
         } else {
            throw new MatchError((Object)null);
         }
      }

      public ClassInfoType(final List parents, final Scopes.Scope decls, final Symbols.Symbol typeSymbol) {
         this.parents = parents;
         this.decls = decls;
         this.typeSymbol = typeSymbol;
         Types.this.validateClassInfo(this);
         this.state = 0;
      }

      // $FF: synthetic method
      public static final Object $anonfun$computeRefs$1$adapted(final ClassInfoType $this, final Symbols.Symbol tparam) {
         $anonfun$computeRefs$1($this, tparam);
         return BoxedUnit.UNIT;
      }

      // $FF: synthetic method
      public static final Object $anonfun$computeRefs$2$adapted(final ClassInfoType $this, final Symbols.Symbol tparam$1, final Type p) {
         $anonfun$computeRefs$2($this, tparam$1, p);
         return BoxedUnit.UNIT;
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }

      private class enterRefs$ extends TypeMaps.TypeMap {
         private Symbols.Symbol tparam;
         // $FF: synthetic field
         private final ClassInfoType $outer;

         public Type apply(final Type tp) {
            if (tp instanceof TypeRef) {
               TypeRef var2 = (TypeRef)tp;
               Symbols.Symbol sym = var2.sym();
               List args = var2.args();
               if (!args.isEmpty()) {
                  List tparams = var2.initializedTypeParams();
                  SymbolTable var10000 = this.$outer.scala$reflect$internal$Types$ClassInfoType$$$outer();
                  Function0 devWarningIf_msg = () -> (new StringBuilder(35)).append("Mismatched zip in computeRefs(): ").append(sym.info().typeParams()).append(", ").append(args).toString();
                  if (var10000 == null) {
                     throw null;
                  }

                  SymbolTable devWarningIf_this;
                  label53: {
                     devWarningIf_this = var10000;
                     MutableSettings.SettingsOps$ var26 = MutableSettings.SettingsOps$.MODULE$;
                     MutableSettings$ var27 = MutableSettings$.MODULE$;
                     MutableSettings devWarningIf_isDeveloper_SettingsOps_settings = devWarningIf_this.settings();
                     MutableSettings var28 = devWarningIf_isDeveloper_SettingsOps_settings;
                     devWarningIf_isDeveloper_SettingsOps_settings = null;
                     MutableSettings devWarningIf_isDeveloper_isDebug$extension_$this = var28;
                     boolean var29 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(devWarningIf_isDeveloper_isDebug$extension_$this.debug().value());
                     devWarningIf_isDeveloper_isDebug$extension_$this = null;
                     if (!var29) {
                        MutableSettings.SettingsOps$ var30 = MutableSettings.SettingsOps$.MODULE$;
                        MutableSettings$ var31 = MutableSettings$.MODULE$;
                        MutableSettings devWarningIf_isDeveloper_SettingsOps_settings = devWarningIf_this.settings();
                        MutableSettings var32 = devWarningIf_isDeveloper_SettingsOps_settings;
                        devWarningIf_isDeveloper_SettingsOps_settings = null;
                        MutableSettings devWarningIf_isDeveloper_isDeveloper$extension_$this = var32;
                        boolean var33 = StatisticsStatics.DEVELOPER_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(devWarningIf_isDeveloper_isDeveloper$extension_$this.developer().value());
                        devWarningIf_isDeveloper_isDeveloper$extension_$this = null;
                        if (!var33) {
                           var34 = false;
                           break label53;
                        }
                     }

                     var34 = true;
                  }

                  Object var20 = null;
                  Object var23 = null;
                  if (var34 && $anonfun$apply$2(this, tparams, args)) {
                     devWarningIf_this.devWarning(devWarningIf_msg);
                  }

                  Object var16 = null;
                  Object var17 = null;
                  if (this.$outer.scala$reflect$internal$Types$ClassInfoType$$$outer() == null) {
                     throw null;
                  }

                  List foreach2_ys1 = tparams;

                  for(List foreach2_ys2 = args; !foreach2_ys1.isEmpty() && !foreach2_ys2.isEmpty(); foreach2_ys2 = (List)foreach2_ys2.tail()) {
                     var10000 = (SymbolTable)foreach2_ys1.head();
                     Type var15 = (Type)foreach2_ys2.head();
                     Symbols.Symbol var14 = (Symbols.Symbol)var10000;
                     $anonfun$apply$4(this, var14, var15);
                     foreach2_ys1 = (List)foreach2_ys1.tail();
                  }

                  Object var24 = null;
                  Object var25 = null;
               }
            }

            return tp.mapOver(this);
         }

         public void enter(final Symbols.Symbol tparam0, final Type parent) {
            this.tparam = tparam0;
            this.apply(parent);
         }

         // $FF: synthetic method
         public static final boolean $anonfun$apply$2(final enterRefs$ $this, final List tparams$1, final List args$1) {
            SymbolTable var10000 = $this.$outer.scala$reflect$internal$Types$ClassInfoType$$$outer();
            if (var10000 == null) {
               throw null;
            } else {
               return !Collections.sameLength$(var10000, tparams$1, args$1);
            }
         }

         // $FF: synthetic method
         public static final void $anonfun$apply$4(final enterRefs$ $this, final Symbols.Symbol tparam1, final Type arg) {
            if (arg.contains($this.tparam)) {
               label18: {
                  $this.$outer.scala$reflect$internal$Types$ClassInfoType$$addRef(0, $this.tparam, tparam1);
                  Symbols.Symbol var10000 = arg.typeSymbol();
                  Symbols.Symbol var3 = $this.tparam;
                  if (var10000 == null) {
                     if (var3 != null) {
                        break label18;
                     }
                  } else if (!var10000.equals(var3)) {
                     break label18;
                  }

                  return;
               }

               $this.$outer.scala$reflect$internal$Types$ClassInfoType$$addRef(1, $this.tparam, tparam1);
            }
         }

         public enterRefs$() {
            if (ClassInfoType.this == null) {
               throw null;
            } else {
               this.$outer = ClassInfoType.this;
               super();
            }
         }

         // $FF: synthetic method
         public static final Object $anonfun$apply$4$adapted(final enterRefs$ $this, final Symbols.Symbol tparam1, final Type arg) {
            $anonfun$apply$4($this, tparam1, arg);
            return BoxedUnit.UNIT;
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      }
   }

   public class ClassInfoType$ extends scala.reflect.api.Types.ClassInfoTypeExtractor implements Serializable {
      public ClassInfoType apply(final List parents, final Scopes.Scope decls, final Symbols.Symbol typeSymbol) {
         return this.scala$reflect$internal$Types$ClassInfoType$$$outer().new ClassInfoType(parents, decls, typeSymbol);
      }

      public Option unapply(final ClassInfoType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple3(x$0.parents(), x$0.decls(), x$0.typeSymbol())));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ClassInfoType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public class PackageClassInfoType extends ClassInfoType {
      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$PackageClassInfoType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public PackageClassInfoType(final Scopes.Scope decls, final Symbols.Symbol clazz) {
         super(scala.collection.immutable.Nil..MODULE$, decls, clazz);
      }
   }

   public abstract class ConstantType extends SingletonType implements scala.reflect.api.Types.ConstantTypeApi {
      public abstract Constants.Constant value();

      public boolean isTrivial() {
         return true;
      }

      public String kind() {
         return "ConstantType";
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ConstantType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public class ConstantType$ extends scala.reflect.api.Types.ConstantTypeExtractor {
      public ConstantType apply(final Constants.Constant c) {
         return this.scala$reflect$internal$Types$ConstantType$$$outer().FoldableConstantType().apply(c);
      }

      public Some unapply(final ConstantType tpe) {
         return new Some(tpe.value());
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ConstantType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public abstract class FoldableConstantType extends ConstantType implements Serializable {
      private final Constants.Constant value;

      public Constants.Constant value() {
         return this.value;
      }

      public Type underlying() {
         return (Type)(this.value().isSuitableLiteralType() ? this.scala$reflect$internal$Types$FoldableConstantType$$$outer().LiteralType().apply(this.value()) : this.value().tpe());
      }

      public Type deconst() {
         return this.underlying().deconst();
      }

      public String safeToString() {
         return (new StringBuilder(2)).append(this.underlying().widen().toString()).append("(").append(this.value().escapedStringValue()).append(")").toString();
      }

      public String productPrefix() {
         return "FoldableConstantType";
      }

      public int productArity() {
         return 1;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.value();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof FoldableConstantType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "value";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof FoldableConstantType && ((FoldableConstantType)x$1).scala$reflect$internal$Types$FoldableConstantType$$$outer() == this.scala$reflect$internal$Types$FoldableConstantType$$$outer()) {
               FoldableConstantType var2 = (FoldableConstantType)x$1;
               Constants.Constant var10000 = this.value();
               Constants.Constant var3 = var2.value();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$FoldableConstantType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public FoldableConstantType(final Constants.Constant value) {
         this.value = value;
      }
   }

   public final class UniqueConstantType extends FoldableConstantType {
      public UniqueConstantType(final Constants.Constant value) {
         super(value);
      }
   }

   public class FoldableConstantType$ implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public UniqueConstantType apply(final Constants.Constant value) {
         return (UniqueConstantType)this.$outer.unique(this.$outer.new UniqueConstantType(value));
      }

      public Option unapply(final FoldableConstantType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(x$0.value()));
      }

      public FoldableConstantType$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public abstract class LiteralType extends ConstantType implements Serializable {
      private final Constants.Constant value;

      public Constants.Constant value() {
         return this.value;
      }

      public Type underlying() {
         return this.value().tpe();
      }

      public Type deconst() {
         return this;
      }

      public String safeToString() {
         return this.value().escapedStringValue();
      }

      public String productPrefix() {
         return "LiteralType";
      }

      public int productArity() {
         return 1;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.value();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof LiteralType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "value";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof LiteralType && ((LiteralType)x$1).scala$reflect$internal$Types$LiteralType$$$outer() == this.scala$reflect$internal$Types$LiteralType$$$outer()) {
               LiteralType var2 = (LiteralType)x$1;
               Constants.Constant var10000 = this.value();
               Constants.Constant var3 = var2.value();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$LiteralType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public LiteralType(final Constants.Constant value) {
         this.value = value;
      }
   }

   public final class UniqueLiteralType extends LiteralType {
      public UniqueLiteralType(final Constants.Constant value) {
         super(value);
      }
   }

   public class LiteralType$ implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public UniqueLiteralType apply(final Constants.Constant value) {
         return (UniqueLiteralType)this.$outer.unique(this.$outer.new UniqueLiteralType(value));
      }

      public Option unapply(final LiteralType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(x$0.value()));
      }

      public LiteralType$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class ArgsTypeRef extends TypeRef {
      public boolean isHigherKinded() {
         return false;
      }

      public Nil typeParams() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      public Type typeConstructor() {
         return this.scala$reflect$internal$Types$ArgsTypeRef$$$outer().TypeRef().apply(this.pre(), this.sym(), scala.collection.immutable.Nil..MODULE$);
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ArgsTypeRef$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final ArgsTypeRef $anonfun$new$1(final ArgsTypeRef $this) {
         return $this;
      }

      public ArgsTypeRef(final Type pre0, final Symbols.Symbol sym0, final List args0) {
         super(pre0, sym0, args0);
         boolean require_requirement = super.args() != scala.collection.immutable.Nil..MODULE$;
         if (Types.this == null) {
            throw null;
         } else if (!require_requirement) {
            throw Types.this.throwRequirementError(this);
         }
      }
   }

   public class ModuleTypeRef extends NoArgsTypeRef {
      private Type narrowedCache;

      public Type narrow() {
         if (this.narrowedCache == null) {
            this.narrowedCache = this.scala$reflect$internal$Types$ModuleTypeRef$$$outer().singleType(this.pre(), this.sym().sourceModule());
         }

         return this.narrowedCache;
      }

      public void scala$reflect$internal$Types$$invalidateTypeRefCaches() {
         super.scala$reflect$internal$Types$$invalidateTypeRefCaches();
         this.narrowedCache = null;
      }

      public void forceDirectSuperclasses() {
         super.sym().rawInfo().decls().foreach((decl) -> {
            $anonfun$forceDirectSuperclasses$1(decl);
            return BoxedUnit.UNIT;
         });
      }

      public String finishPrefix(final String rest) {
         return (new StringBuilder(0)).append(this.objectPrefix()).append(rest).toString();
      }

      public String directObjectString() {
         return super.safeToString();
      }

      public String toLongString() {
         return this.toString();
      }

      public String safeToString() {
         return !this.sym().isOmittablePrefix() ? (new StringBuilder(4)).append(this.prefixString()).append("type").toString() : (new StringBuilder(5)).append(!this.sym().isPackageObjectOrClass() && !this.sym().isJavaDefined() ? this.sym().nameString() : this.sym().fullNameString()).append(".type").toString();
      }

      public String prefixString() {
         return this.sym().isOmittablePrefix() ? "" : (new StringBuilder(1)).append(this.prefix().prefixString()).append(this.sym().nameString()).append(".").toString();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ModuleTypeRef$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final Symbols.Symbol $anonfun$new$2(final ModuleTypeRef $this) {
         return $this.sym();
      }

      // $FF: synthetic method
      public static final void $anonfun$forceDirectSuperclasses$1(final Symbols.Symbol decl) {
         if (decl.isModule() || !decl.isTerm()) {
            decl.rawInfo().forceDirectSuperclasses();
         }
      }

      public ModuleTypeRef(final Type pre0, final Symbols.Symbol sym0) {
         super(pre0, sym0);
         boolean require_requirement = this.sym().isModuleClass();
         if (Types.this == null) {
            throw null;
         } else if (!require_requirement) {
            throw Types.this.throwRequirementError(this.sym());
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return var0.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class PackageTypeRef extends ModuleTypeRef {
      public String finishPrefix(final String rest) {
         return (new StringBuilder(0)).append(this.packagePrefix()).append(rest).toString();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$PackageTypeRef$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final Symbols.Symbol $anonfun$new$3(final PackageTypeRef $this) {
         return $this.sym();
      }

      public PackageTypeRef(final Type pre0, final Symbols.Symbol sym0) {
         super(pre0, sym0);
         boolean require_requirement = this.sym().isPackageClass();
         if (Types.this == null) {
            throw null;
         } else if (!require_requirement) {
            throw Types.this.throwRequirementError(this.sym());
         }
      }
   }

   public class RefinementTypeRef extends NoArgsTypeRef {
      public Type normalizeImpl() {
         return this.pre().memberInfo(this.sym()).normalize();
      }

      public String finishPrefix(final String rest) {
         return String.valueOf(this.sym().info());
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$RefinementTypeRef$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final Symbols.Symbol $anonfun$new$4(final RefinementTypeRef $this) {
         return $this.sym();
      }

      public RefinementTypeRef(final Type pre0, final Symbols.Symbol sym0) {
         super(pre0, sym0);
         boolean require_requirement = this.sym().isRefinementClass();
         if (Types.this == null) {
            throw null;
         } else if (!require_requirement) {
            throw Types.this.throwRequirementError(this.sym());
         }
      }
   }

   public class NoArgsTypeRef extends TypeRef {
      public boolean isHigherKinded() {
         return this.typeParams() != scala.collection.immutable.Nil..MODULE$;
      }

      public List typeParams() {
         return this.scala$reflect$internal$Types$NoArgsTypeRef$$$outer().definitions().isDefinitionsInitialized() ? this.sym().typeParams() : this.sym().unsafeTypeParams();
      }

      public Type instantiateTypeParams(final List formals, final List actuals) {
         if (!this.isHigherKinded()) {
            return super.instantiateTypeParams(formals, actuals);
         } else {
            List var10000 = this.typeParams();
            if (var10000 == null) {
               throw null;
            } else {
               List forall_these = var10000;

               while(true) {
                  if (forall_these.isEmpty()) {
                     var6 = true;
                     break;
                  }

                  Object var4 = forall_these.head();
                  if (!formals.contains(var4)) {
                     var6 = false;
                     break;
                  }

                  forall_these = (List)forall_these.tail();
               }

               Object var5 = null;
               return var6 ? this.scala$reflect$internal$Types$NoArgsTypeRef$$$outer().copyTypeRef(this, this.pre(), this.sym(), actuals) : this.scala$reflect$internal$Types$NoArgsTypeRef$$$outer().copyTypeRef(this, this.pre(), this.sym(), this.dummyArgs()).instantiateTypeParams(formals, actuals);
            }
         }
      }

      public Type narrow() {
         return this.sym().isModuleClass() ? this.scala$reflect$internal$Types$NoArgsTypeRef$$$outer().singleType(this.pre(), this.sym().sourceModule()) : super.narrow();
      }

      public NoArgsTypeRef typeConstructor() {
         return this;
      }

      public Type normalizeImpl() {
         return this.isHigherKinded() ? this.etaExpand() : super.normalizeImpl();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$NoArgsTypeRef$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$instantiateTypeParams$1(final List formals$1, final Object elem) {
         return formals$1.contains(elem);
      }

      public NoArgsTypeRef(final Type pre0, final Symbols.Symbol sym0) {
         super(pre0, sym0, scala.collection.immutable.Nil..MODULE$);
      }

      // $FF: synthetic method
      public static final Object $anonfun$instantiateTypeParams$1$adapted(final List formals$1, final Object elem) {
         return BoxesRunTime.boxToBoolean($anonfun$instantiateTypeParams$1(formals$1, elem));
      }
   }

   public interface NonClassTypeRef {
      // $FF: synthetic method
      void scala$reflect$internal$Types$NonClassTypeRef$$super$invalidateTypeRefCaches();

      // $FF: synthetic method
      Type scala$reflect$internal$Types$NonClassTypeRef$$super$relativeInfo();

      Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache();

      void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache_$eq(final Type x$1);

      int scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod();

      void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod_$eq(final int x$1);

      Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo();

      void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo_$eq(final Type x$1);

      default void scala$reflect$internal$Types$$invalidateTypeRefCaches() {
         this.scala$reflect$internal$Types$NonClassTypeRef$$super$invalidateTypeRefCaches();
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache_$eq(this.scala$reflect$internal$Types$NonClassTypeRef$$$outer().NoType());
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod_$eq(0);
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo_$eq((Type)null);
      }

      default Type relativeInfo() {
         Type symInfo = ((TypeRef)this).sym().info();
         if (this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache() == null || this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo() != symInfo || this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod() != ((SymbolTable)this.scala$reflect$internal$Types$NonClassTypeRef$$$outer()).currentPeriod()) {
            this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache_$eq(this.scala$reflect$internal$Types$NonClassTypeRef$$super$relativeInfo());
            if (this instanceof AbstractTypeRef) {
               this.validateRelativeInfo();
            }

            this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo_$eq(symInfo);
            this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod_$eq(((SymbolTable)this.scala$reflect$internal$Types$NonClassTypeRef$$$outer()).currentPeriod());
         }

         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache();
      }

      private void validateRelativeInfo() {
         Type var1 = this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache();
         if (var1 instanceof SubType && ((SubType)var1).supertype() == this) {
            this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache_$eq((Type)null);
            throw (SymbolTable)this.scala$reflect$internal$Types$NonClassTypeRef$$$outer().new RecoverableCyclicReference(((TypeRef)this).sym());
         }
      }

      // $FF: synthetic method
      Types scala$reflect$internal$Types$NonClassTypeRef$$$outer();

      // $FF: synthetic method
      static Symbols.Symbol $anonfun$$init$$1(final NonClassTypeRef $this) {
         return ((TypeRef)$this).sym();
      }

      static void $init$(final NonClassTypeRef $this) {
         SymbolTable var10000 = (SymbolTable)$this.scala$reflect$internal$Types$NonClassTypeRef$$$outer();
         boolean require_requirement = ((TypeRef)$this).sym().isNonClassType();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable require_this = var10000;
            if (!require_requirement) {
               throw require_this.throwRequirementError(((TypeRef)$this).sym());
            } else {
               require_this = null;
               $this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod_$eq(0);
            }
         }
      }
   }

   public interface AliasTypeRef extends NonClassTypeRef {
      // $FF: synthetic method
      Type scala$reflect$internal$Types$AliasTypeRef$$super$dealias();

      // $FF: synthetic method
      Symbols.Symbol scala$reflect$internal$Types$AliasTypeRef$$super$termSymbol();

      // $FF: synthetic method
      boolean scala$reflect$internal$Types$AliasTypeRef$$super$isError();

      // $FF: synthetic method
      Type scala$reflect$internal$Types$AliasTypeRef$$super$normalizeImpl();

      default Type dealias() {
         return ((TypeRef)this).typeParamsMatchArgs() ? this.betaReduce().dealias() : this.scala$reflect$internal$Types$AliasTypeRef$$super$dealias();
      }

      default Type narrow() {
         return ((TypeRef)this).normalize().narrow();
      }

      default Type prefix() {
         return this != ((TypeRef)this).normalize() ? ((TypeRef)this).normalize().prefix() : ((TypeRef)this).pre();
      }

      default Symbols.Symbol termSymbol() {
         return this != ((TypeRef)this).normalize() ? ((TypeRef)this).normalize().termSymbol() : this.scala$reflect$internal$Types$AliasTypeRef$$super$termSymbol();
      }

      default Symbols.Symbol typeSymbol() {
         return this != ((TypeRef)this).normalize() ? ((TypeRef)this).normalize().typeSymbol() : ((TypeRef)this).sym();
      }

      default boolean isError() {
         Symbols.Symbol var10000 = ((TypeRef)this).sym();
         if (var10000 == null) {
            throw null;
         } else {
            return var10000.hasFlag(4294967296L) || !((Type)this).isHigherKinded() && this.scala$reflect$internal$Types$AliasTypeRef$$super$isError();
         }
      }

      default List parentsImpl() {
         List var10000 = ((TypeRef)this).normalize().parents();
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               return scala.collection.immutable.Nil..MODULE$;
            } else {
               Type var6 = (Type)map_this.head();
               .colon.colon map_h = new .colon.colon(((TypeRef)this).relativize(var6), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  var6 = (Type)map_rest.head();
                  .colon.colon map_nx = new .colon.colon(((TypeRef)this).relativize(var6), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               return map_h;
            }
         }
      }

      default List baseClasses() {
         return ((TypeRef)this).normalize().baseClasses();
      }

      default Scopes.Scope decls() {
         return ((TypeRef)this).normalize().decls();
      }

      default Type normalizeImpl() {
         if (((TypeRef)this).typeParamsMatchArgs()) {
            Type br = this.betaReduce();
            if (br != this) {
               return br.normalize();
            } else {
               throw (SymbolTable)this.scala$reflect$internal$Types$AliasTypeRef$$$outer().new MalformedType(((TypeRef)this).pre(), ((TypeRef)this).sym().nameString());
            }
         } else if (((Type)this).isHigherKinded()) {
            return this.scala$reflect$internal$Types$AliasTypeRef$$super$normalizeImpl();
         } else {
            Symbols.Symbol overriddenSym = ((TypeRef)this).sym().nextOverriddenSymbol();
            Symbols.NoSymbol var3 = ((Symbols)this.scala$reflect$internal$Types$AliasTypeRef$$$outer()).NoSymbol();
            if (overriddenSym == null) {
               if (var3 != null) {
                  return ((TypeRef)this).pre().memberType(overriddenSym).normalize();
               }
            } else if (!overriddenSym.equals(var3)) {
               return ((TypeRef)this).pre().memberType(overriddenSym).normalize();
            }

            return this.scala$reflect$internal$Types$AliasTypeRef$$$outer().ErrorType();
         }
      }

      default Type betaReduce() {
         return ((TypeRef)this).relativize(((TypeRef)this).sym().info().resultType());
      }

      default Symbols.Symbol coevolveSym(final Type newPre) {
         if (((TypeRef)this).pre() != newPre) {
            Symbols.Symbol var10000 = this.scala$reflect$internal$Types$AliasTypeRef$$$outer().scala$reflect$internal$Types$$embeddedSymbol(((TypeRef)this).pre(), ((TypeRef)this).sym().name());
            Symbols.Symbol var2 = ((TypeRef)this).sym();
            if (var10000 == null) {
               if (var2 != null) {
                  return ((TypeRef)this).sym();
               }
            } else if (!var10000.equals(var2)) {
               return ((TypeRef)this).sym();
            }

            Symbols.Symbol newSym = this.scala$reflect$internal$Types$AliasTypeRef$$$outer().scala$reflect$internal$Types$$embeddedSymbol(newPre, ((TypeRef)this).sym().name());
            ((SymbolTable)this.scala$reflect$internal$Types$AliasTypeRef$$$outer()).debuglog(() -> (new StringBuilder(27)).append("co-evolve: ").append(((TypeRef)this).pre()).append(" -> ").append(newPre).append(", ").append(((TypeRef)this).sym()).append(" : ").append(((TypeRef)this).sym().info()).append(" -> ").append(newSym).append(" : ").append(newSym.info()).toString());
            if (newSym == null) {
               throw null;
            } else if (newSym != newSym.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) {
               return newSym;
            } else {
               return ((TypeRef)this).sym();
            }
         } else {
            return ((TypeRef)this).sym();
         }
      }

      default String kind() {
         return "AliasTypeRef";
      }

      // $FF: synthetic method
      Types scala$reflect$internal$Types$AliasTypeRef$$$outer();

      // $FF: synthetic method
      static Symbols.Symbol $anonfun$$init$$2(final AliasTypeRef $this) {
         return ((TypeRef)$this).sym();
      }

      // $FF: synthetic method
      static Type $anonfun$parentsImpl$1(final AliasTypeRef $this, final Type tp) {
         return ((TypeRef)$this).relativize(tp);
      }

      // $FF: synthetic method
      static Symbols.Symbol $anonfun$coevolveSym$2(final AliasTypeRef $this) {
         return ((TypeRef)$this).sym();
      }

      static void $init$(final AliasTypeRef $this) {
         SymbolTable var10000 = (SymbolTable)$this.scala$reflect$internal$Types$AliasTypeRef$$$outer();
         boolean require_requirement = ((TypeRef)$this).sym().isAliasType();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable require_this = var10000;
            if (!require_requirement) {
               throw require_this.throwRequirementError(((TypeRef)$this).sym());
            }
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return var0.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public interface AbstractTypeRef extends NonClassTypeRef {
      default List baseClasses() {
         return this.relativeInfo().baseClasses();
      }

      default Scopes.Scope decls() {
         return this.relativeInfo().decls();
      }

      default TypeBounds bounds() {
         return this.relativeInfo().bounds();
      }

      default Type upperBound() {
         return this.relativeInfo().upperBound();
      }

      default Type lowerBound() {
         return this.relativeInfo().lowerBound();
      }

      default BaseTypeSeqs.BaseTypeSeq baseTypeSeqImpl() {
         return this.bounds().hi().baseTypeSeq().prepend((Type)this);
      }

      default List parentsImpl() {
         return this.relativeInfo().parents();
      }

      default String kind() {
         return "AbstractTypeRef";
      }

      // $FF: synthetic method
      Types scala$reflect$internal$Types$AbstractTypeRef$$$outer();

      // $FF: synthetic method
      static Symbols.Symbol $anonfun$$init$$3(final AbstractTypeRef $this) {
         return ((TypeRef)$this).sym();
      }

      static void $init$(final AbstractTypeRef $this) {
         SymbolTable var10000 = (SymbolTable)$this.scala$reflect$internal$Types$AbstractTypeRef$$$outer();
         boolean require_requirement = ((TypeRef)$this).sym().isAbstractType();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable require_this = var10000;
            if (!require_requirement) {
               throw require_this.throwRequirementError(((TypeRef)$this).sym());
            }
         }
      }
   }

   public abstract class TypeRef extends UniqueType implements scala.reflect.api.Types.TypeRefApi, Serializable {
      private final Type pre;
      private final Symbols.Symbol sym;
      private final List args;
      private byte trivial;
      private List parentsCache;
      private int parentsPeriod;
      private BaseTypeSeqs.BaseTypeSeq baseTypeSeqCache;
      private int baseTypeSeqPeriod;
      private volatile Type normalized;

      public Type pre() {
         return this.pre;
      }

      public Symbols.Symbol sym() {
         return this.sym;
      }

      public List args() {
         return this.args;
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         Type pre1;
         Object var63;
         label142: {
            pre1 = map.apply(this.pre());
            if (map instanceof TypeMaps.VariancedTypeMap) {
               TypeMaps.VariancedTypeMap var4 = (TypeMaps.VariancedTypeMap)map;
               if (!this.args().isEmpty() && !Variance$.MODULE$.isInvariant$extension(var4.variance())) {
                  List tparams = this.sym().typeParams();
                  if (tparams.isEmpty()) {
                     List var64 = this.args();
                     if (var64 == null) {
                        throw null;
                     }

                     List mapConserve_this = var64;
                     List mapConserve_loop$3_pending = mapConserve_this;
                     List mapConserve_loop$3_unchanged = mapConserve_this;
                     .colon.colon mapConserve_loop$3_mappedLast = null;
                     List mapConserve_loop$3_mappedHead = null;

                     while(!mapConserve_loop$3_pending.isEmpty()) {
                        Object mapConserve_loop$3_head0 = mapConserve_loop$3_pending.head();
                        Object mapConserve_loop$3_head1 = var4.apply(mapConserve_loop$3_head0);
                        if (mapConserve_loop$3_head1 == mapConserve_loop$3_head0) {
                           mapConserve_loop$3_pending = (List)mapConserve_loop$3_pending.tail();
                           mapConserve_loop$3_unchanged = mapConserve_loop$3_unchanged;
                           mapConserve_loop$3_mappedLast = mapConserve_loop$3_mappedLast;
                           mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead;
                        } else {
                           List mapConserve_loop$3_xc = mapConserve_loop$3_unchanged;
                           List mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_mappedHead;

                           .colon.colon mapConserve_loop$3_mappedLast1;
                           for(mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_mappedLast; mapConserve_loop$3_xc != mapConserve_loop$3_pending; mapConserve_loop$3_xc = (List)mapConserve_loop$3_xc.tail()) {
                              .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_xc.head(), scala.collection.immutable.Nil..MODULE$);
                              if (mapConserve_loop$3_mappedHead1 == null) {
                                 mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                              }

                              if (mapConserve_loop$3_mappedLast1 != null) {
                                 mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                              }

                              mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_next;
                           }

                           .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_head1, scala.collection.immutable.Nil..MODULE$);
                           if (mapConserve_loop$3_mappedHead1 == null) {
                              mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                           }

                           if (mapConserve_loop$3_mappedLast1 != null) {
                              mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                           }

                           List mapConserve_loop$3_tail0 = (List)mapConserve_loop$3_pending.tail();
                           mapConserve_loop$3_pending = mapConserve_loop$3_tail0;
                           mapConserve_loop$3_unchanged = mapConserve_loop$3_tail0;
                           mapConserve_loop$3_mappedLast = mapConserve_loop$3_next;
                           mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead1;
                        }
                     }

                     Object var65;
                     if (mapConserve_loop$3_mappedHead == null) {
                        var65 = mapConserve_loop$3_unchanged;
                     } else {
                        mapConserve_loop$3_mappedLast.next_$eq(mapConserve_loop$3_unchanged);
                        var65 = mapConserve_loop$3_mappedHead;
                     }

                     mapConserve_loop$3_mappedHead = null;
                     Object var37 = null;
                     Object var38 = null;
                     Object var39 = null;
                     Object var40 = null;
                     Object var41 = null;
                     Object var42 = null;
                     Object var43 = null;
                     Object var44 = null;
                     Object var45 = null;
                     Object var46 = null;
                     Object var47 = null;
                     List mapConserve_result = (List)var65;
                     Statics.releaseFence();
                     var63 = mapConserve_result;
                     Object var34 = null;
                     mapConserve_result = null;
                  } else {
                     var63 = var4.mapOverArgs(this.args(), tparams);
                  }
                  break label142;
               }
            }

            List var10000 = this.args();
            if (var10000 == null) {
               throw null;
            }

            List mapConserve_this = var10000;
            List mapConserve_loop$3_pendingx = mapConserve_this;
            List mapConserve_loop$3_unchangedx = mapConserve_this;
            .colon.colon mapConserve_loop$3_mappedLastx = null;
            List mapConserve_loop$3_mappedHead = null;

            while(!mapConserve_loop$3_pendingx.isEmpty()) {
               Object mapConserve_loop$3_head0 = mapConserve_loop$3_pendingx.head();
               Object mapConserve_loop$3_head1 = map.apply(mapConserve_loop$3_head0);
               if (mapConserve_loop$3_head1 == mapConserve_loop$3_head0) {
                  mapConserve_loop$3_pendingx = (List)mapConserve_loop$3_pendingx.tail();
                  mapConserve_loop$3_unchangedx = mapConserve_loop$3_unchangedx;
                  mapConserve_loop$3_mappedLastx = mapConserve_loop$3_mappedLastx;
                  mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead;
               } else {
                  List mapConserve_loop$3_xc = mapConserve_loop$3_unchangedx;
                  List mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_mappedHead;

                  .colon.colon mapConserve_loop$3_mappedLast1;
                  for(mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_mappedLastx; mapConserve_loop$3_xc != mapConserve_loop$3_pendingx; mapConserve_loop$3_xc = (List)mapConserve_loop$3_xc.tail()) {
                     .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_xc.head(), scala.collection.immutable.Nil..MODULE$);
                     if (mapConserve_loop$3_mappedHead1 == null) {
                        mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                     }

                     if (mapConserve_loop$3_mappedLast1 != null) {
                        mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                     }

                     mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_next;
                  }

                  .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_head1, scala.collection.immutable.Nil..MODULE$);
                  if (mapConserve_loop$3_mappedHead1 == null) {
                     mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                  }

                  if (mapConserve_loop$3_mappedLast1 != null) {
                     mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                  }

                  List mapConserve_loop$3_tail0 = (List)mapConserve_loop$3_pendingx.tail();
                  mapConserve_loop$3_pendingx = mapConserve_loop$3_tail0;
                  mapConserve_loop$3_unchangedx = mapConserve_loop$3_tail0;
                  mapConserve_loop$3_mappedLastx = mapConserve_loop$3_next;
                  mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead1;
               }
            }

            Object var62;
            if (mapConserve_loop$3_mappedHead == null) {
               var62 = mapConserve_loop$3_unchangedx;
            } else {
               mapConserve_loop$3_mappedLastx.next_$eq(mapConserve_loop$3_unchangedx);
               var62 = mapConserve_loop$3_mappedHead;
            }

            mapConserve_loop$3_mappedHead = null;
            Object var51 = null;
            Object var52 = null;
            Object var53 = null;
            Object var54 = null;
            Object var55 = null;
            Object var56 = null;
            Object var57 = null;
            Object var58 = null;
            Object var59 = null;
            Object var60 = null;
            Object var61 = null;
            List mapConserve_result = (List)var62;
            Statics.releaseFence();
            var63 = mapConserve_result;
            Object var48 = null;
            mapConserve_result = null;
         }

         List args1 = (List)var63;
         return (Type)(pre1 == this.pre() && args1 == this.args() ? this : this.scala$reflect$internal$Types$TypeRef$$$outer().copyTypeRef(this, pre1, this.coevolveSym(pre1), args1));
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         folder.apply(this.pre());
         List var10000 = this.args();
         if (var10000 == null) {
            throw null;
         } else {
            for(List foreach_these = var10000; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               folder.apply(foreach_these.head());
            }

         }
      }

      public boolean isTrivial() {
         if (this.trivial == 0) {
            this.trivial = ThreeValues$.MODULE$.fromBoolean(!this.sym().isTypeParameter() && this.pre().isTrivial() && this.scala$reflect$internal$Types$TypeRef$$$outer().scala$reflect$internal$Types$$areTrivialTypes(this.args()));
         }

         return ThreeValues$.MODULE$.toBoolean(this.trivial);
      }

      public boolean isShowAsInfixType() {
         SymbolTable var10000 = this.scala$reflect$internal$Types$TypeRef$$$outer();
         List var10001 = this.args();
         byte hasLength_len = 2;
         List hasLength_xs = var10001;
         if (var10000 == null) {
            throw null;
         } else {
            boolean var8 = Collections.hasLength$(var10000, hasLength_xs, hasLength_len);
            Object var7 = null;
            if (var8) {
               Option var9 = this.sym().getAnnotation(this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().ShowAsInfixAnnotationClass());
               if (var9 == null) {
                  throw null;
               }

               Option map_this = var9;
               Object var10 = map_this.isEmpty() ? scala.None..MODULE$ : new Some($anonfun$isShowAsInfixType$1((AnnotationInfos.AnnotationInfo)map_this.get()));
               Object var5 = null;
               Option getOrElse_this = (Option)var10;
               var10 = getOrElse_this.isEmpty() ? $anonfun$isShowAsInfixType$3(this) : getOrElse_this.get();
               getOrElse_this = null;
               if (BoxesRunTime.unboxToBoolean(var10)) {
                  return true;
               }
            }

            return false;
         }
      }

      public void scala$reflect$internal$Types$$invalidateTypeRefCaches() {
         this.parentsCache_$eq((List)null);
         this.parentsPeriod_$eq(0);
         this.baseTypeSeqCache_$eq((BaseTypeSeqs.BaseTypeSeq)null);
         this.baseTypeSeqPeriod_$eq(0);
         this.normalized = null;
      }

      public List parentsCache() {
         return this.parentsCache;
      }

      public void parentsCache_$eq(final List x$1) {
         this.parentsCache = x$1;
      }

      public int parentsPeriod() {
         return this.parentsPeriod;
      }

      public void parentsPeriod_$eq(final int x$1) {
         this.parentsPeriod = x$1;
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeqCache() {
         return this.baseTypeSeqCache;
      }

      public void baseTypeSeqCache_$eq(final BaseTypeSeqs.BaseTypeSeq x$1) {
         this.baseTypeSeqCache = x$1;
      }

      public int baseTypeSeqPeriod() {
         return this.baseTypeSeqPeriod;
      }

      public void baseTypeSeqPeriod_$eq(final int x$1) {
         this.baseTypeSeqPeriod = x$1;
      }

      public final int computeHashCode() {
         int h = -889275714;
         h = scala.util.hashing.MurmurHash3..MODULE$.mix(h, this.pre().hashCode());
         h = scala.util.hashing.MurmurHash3..MODULE$.mix(h, this.sym().hashCode());
         int length = 2;

         for(List elems = this.args(); elems != scala.collection.immutable.Nil..MODULE$; ++length) {
            h = scala.util.hashing.MurmurHash3..MODULE$.mix(h, elems.head().hashCode());
            elems = (List)elems.tail();
         }

         return scala.util.hashing.MurmurHash3..MODULE$.scala$util$hashing$MurmurHash3$$avalanche(h ^ length);
      }

      public final boolean equals(final Object other) {
         if (this == other) {
            return true;
         } else if (other instanceof TypeRef && ((TypeRef)other).scala$reflect$internal$Types$TypeRef$$$outer() == this.scala$reflect$internal$Types$TypeRef$$$outer()) {
            TypeRef var2 = (TypeRef)other;
            if (Objects.equals(this.pre(), var2.pre()) && this.sym() == var2.sym()) {
               SymbolTable var10000 = this.scala$reflect$internal$Types$TypeRef$$$outer();
               List var10001 = this.args();
               List sameElementsEquals_that = var2.args();
               List sameElementsEquals_thiss = var10001;
               if (var10000 == null) {
                  throw null;
               }

               boolean var7 = Collections.sameElementsEquals$(var10000, sameElementsEquals_thiss, sameElementsEquals_that);
               Object var5 = null;
               Object var6 = null;
               if (var7 && !(this instanceof ObjectTpeJavaRef) && !(var2 instanceof ObjectTpeJavaRef)) {
                  return true;
               }
            }

            return false;
         } else {
            return false;
         }
      }

      public Type relativeInfo() {
         return this.scala$reflect$internal$Types$TypeRef$$$outer().appliedType(this.sym().info().asSeenFrom(this.pre(), this.sym().owner()), this.args());
      }

      public final Type relativize(final Type tp) {
         if (tp.isTrivial()) {
            return tp;
         } else if (!this.args().isEmpty() || !this.scala$reflect$internal$Types$TypeRef$$$outer().phase().erasedTypes() && this.isHigherKinded() && !this.scala$reflect$internal$Types$TypeRef$$$outer().isRawIfWithoutArgs(this.sym())) {
            List formals = this.sym().typeParams();
            if (tp instanceof PolyType) {
               PolyType var3 = (PolyType)tp;
               List var4 = var3.typeParams();
               Type result = var3.resultType();
               if (formals == null) {
                  if (var4 == null) {
                     return this.scala$reflect$internal$Types$TypeRef$$$outer().new PolyType(formals, this.seenFromOwnerInstantiated$1(result, formals));
                  }
               } else if (formals.equals(var4)) {
                  return this.scala$reflect$internal$Types$TypeRef$$$outer().new PolyType(formals, this.seenFromOwnerInstantiated$1(result, formals));
               }
            }

            return this.seenFromOwnerInstantiated$1(tp, formals);
         } else {
            return tp.asSeenFrom(this.pre(), this.sym().owner());
         }
      }

      private List argsOrDummies() {
         return this.args().isEmpty() ? this.dummyArgs() : this.args();
      }

      public final Type baseType(final Symbols.Symbol clazz) {
         if (clazz == this.sym()) {
            return this;
         } else {
            return this.sym().isClass() ? this.relativize(this.sym().info().baseType(clazz)) : this.baseTypeOfNonClassTypeRef(clazz);
         }
      }

      private Type baseTypeOfNonClassTypeRef(final Symbols.Symbol clazz) {
         Type var10000;
         try {
            this.scala$reflect$internal$Types$TypeRef$$$outer().basetypeRecursions_$eq(this.scala$reflect$internal$Types$TypeRef$$$outer().basetypeRecursions() + 1);
            var10000 = this.scala$reflect$internal$Types$TypeRef$$$outer().basetypeRecursions() >= 50 ? this.baseTypeOfNonClassTypeRefLogged(clazz) : this.relativeInfo().baseType(clazz);
         } finally {
            this.scala$reflect$internal$Types$TypeRef$$$outer().basetypeRecursions_$eq(this.scala$reflect$internal$Types$TypeRef$$$outer().basetypeRecursions() - 1);
         }

         return var10000;
      }

      private Type baseTypeOfNonClassTypeRefLogged(final Symbols.Symbol clazz) {
         if (this.scala$reflect$internal$Types$TypeRef$$$outer().pendingBaseTypes().add(this)) {
            Type var10000;
            try {
               var10000 = this.relativeInfo().baseType(clazz);
            } finally {
               this.scala$reflect$internal$Types$TypeRef$$$outer().pendingBaseTypes().remove(this);
            }

            return var10000;
         } else {
            return (Type)(clazz == this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().AnyClass() ? this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().AnyTpe() : this.scala$reflect$internal$Types$TypeRef$$$outer().NoType());
         }
      }

      public Type normalizeImpl() {
         return this.isHigherKinded() ? this.etaExpand() : super.normalize();
      }

      public final Type normalize() {
         if (this.pre() == this.scala$reflect$internal$Types$TypeRef$$$outer().WildcardType()) {
            return this.scala$reflect$internal$Types$TypeRef$$$outer().WildcardType();
         } else if (this.scala$reflect$internal$Types$TypeRef$$$outer().phase().erasedTypes()) {
            return this.normalizeImpl();
         } else {
            if (this.normalized == null) {
               this.scala$reflect$internal$Types$TypeRef$$$outer().defineNormalized(this);
            }

            return this.normalized;
         }
      }

      public final void scala$reflect$internal$Types$$defineNormalized() {
         if (this.normalized == null) {
            this.normalized = this.normalizeImpl();
         }
      }

      public boolean isGround() {
         if (!this.sym().isPackageClass()) {
            if (this.pre().isGround()) {
               List var10000 = this.args();
               if (var10000 == null) {
                  throw null;
               }

               List forall_these = var10000;

               while(true) {
                  if (forall_these.isEmpty()) {
                     var3 = true;
                     break;
                  }

                  if (!((Type)forall_these.head()).isGround()) {
                     var3 = false;
                     break;
                  }

                  forall_these = (List)forall_these.tail();
               }

               Object var2 = null;
               if (var3) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      public final Type etaExpand() {
         List tpars = this.initializedTypeParams();
         if (tpars.isEmpty()) {
            return this;
         } else {
            Symbols.TermSymbol pickleLocalOwner = this.sym().newLocalDummy(this.sym().pos());
            List denotedLocallyOwnedTpars = this.scala$reflect$internal$Types$TypeRef$$$outer().cloneSymbolsAtOwnerAndModify(tpars, pickleLocalOwner, (tp) -> this.relativize(tp));
            PolyType var10000 = new PolyType;
            SymbolTable var10002 = this.scala$reflect$internal$Types$TypeRef$$$outer();
            TypeRef$ var10004 = this.scala$reflect$internal$Types$TypeRef$$$outer().TypeRef();
            Type var10005 = this.pre();
            Symbols.Symbol var10006 = this.sym();
            if (denotedLocallyOwnedTpars == null) {
               throw null;
            } else {
               Object var10007;
               if (denotedLocallyOwnedTpars == scala.collection.immutable.Nil..MODULE$) {
                  var10007 = scala.collection.immutable.Nil..MODULE$;
               } else {
                  .colon.colon map_h = new .colon.colon(((Symbols.Symbol)denotedLocallyOwnedTpars.head()).typeConstructor(), scala.collection.immutable.Nil..MODULE$);
                  .colon.colon map_t = map_h;

                  for(List map_rest = (List)denotedLocallyOwnedTpars.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                     .colon.colon map_nx = new .colon.colon(((Symbols.Symbol)map_rest.head()).typeConstructor(), scala.collection.immutable.Nil..MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var10007 = map_h;
               }

               Object var8 = null;
               Object var9 = null;
               Object var10 = null;
               Object var11 = null;
               var10000.<init>(denotedLocallyOwnedTpars, var10004.apply(var10005, var10006, (List)var10007));
               return var10000;
            }
         }
      }

      public Symbols.Symbol coevolveSym(final Type pre1) {
         return this.sym();
      }

      public List initializedTypeParams() {
         return this.sym().info().typeParams();
      }

      public boolean typeParamsMatchArgs() {
         SymbolTable var10000 = this.scala$reflect$internal$Types$TypeRef$$$outer();
         List var10001 = this.initializedTypeParams();
         List sameLength_xs2 = this.args();
         List sameLength_xs1 = var10001;
         if (var10000 == null) {
            throw null;
         } else {
            return Collections.sameLength$(var10000, sameLength_xs1, sameLength_xs2);
         }
      }

      public int baseTypeSeqDepth() {
         return this.baseTypeSeq().maxDepth();
      }

      public Type prefix() {
         return this.pre();
      }

      public Type prefixDirect() {
         return this.pre();
      }

      public Symbols.Symbol termSymbol() {
         return super.termSymbol();
      }

      public Symbols.Symbol termSymbolDirect() {
         return super.termSymbol();
      }

      public List typeArgs() {
         return this.args();
      }

      public Type typeOfThis() {
         return this.relativize(this.sym().typeOfThis());
      }

      public Symbols.Symbol typeSymbol() {
         return this.sym();
      }

      public Symbols.Symbol typeSymbolDirect() {
         return this.sym();
      }

      public List parents() {
         List cache = this.parentsCache();
         if (this.parentsPeriod() == this.scala$reflect$internal$Types$TypeRef$$$outer().currentPeriod() && cache != null) {
            return cache;
         } else {
            this.scala$reflect$internal$Types$TypeRef$$$outer().defineParentsOfTypeRef(this);
            return this.parentsCache();
         }
      }

      public List parentsImpl() {
         List var10000 = this.sym().info().parents();
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               return scala.collection.immutable.Nil..MODULE$;
            } else {
               Type var6 = (Type)map_this.head();
               .colon.colon map_h = new .colon.colon(this.relativize(var6), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  var6 = (Type)map_rest.head();
                  .colon.colon map_nx = new .colon.colon(this.relativize(var6), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               return map_h;
            }
         }
      }

      public List baseClasses() {
         return this.sym().info().baseClasses();
      }

      public Scopes.Scope decls() {
         return this.sym().info().decls();
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeqImpl() {
         return this.sym().info().baseTypeSeq().exists((x$33) -> BoxesRunTime.boxToBoolean($anonfun$baseTypeSeqImpl$1(x$33))) ? this.relativize(this.sym().info()).baseTypeSeq() : this.sym().info().baseTypeSeq().map((tp) -> this.relativize(tp));
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeq() {
         BaseTypeSeqs.BaseTypeSeq cache = this.baseTypeSeqCache();
         if (this.baseTypeSeqPeriod() == this.scala$reflect$internal$Types$TypeRef$$$outer().currentPeriod() && cache != null && !cache.equals(this.scala$reflect$internal$Types$TypeRef$$$outer().undetBaseTypeSeq())) {
            return cache;
         } else {
            this.scala$reflect$internal$Types$TypeRef$$$outer().defineBaseTypeSeqOfTypeRef(this);
            BaseTypeSeqs.BaseTypeSeq var10000 = this.baseTypeSeqCache();
            BaseTypeSeqs.BaseTypeSeq var2 = this.scala$reflect$internal$Types$TypeRef$$$outer().undetBaseTypeSeq();
            if (var10000 == null) {
               if (var2 == null) {
                  throw this.scala$reflect$internal$Types$TypeRef$$$outer().new RecoverableCyclicReference(this.sym());
               }
            } else if (var10000.equals(var2)) {
               throw this.scala$reflect$internal$Types$TypeRef$$$outer().new RecoverableCyclicReference(this.sym());
            }

            return this.baseTypeSeqCache();
         }
      }

      private boolean needsPreString() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var9 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$TypeRef$$$outer().settings();
         MutableSettings var10 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var10;
         boolean var11 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         if (!var11) {
            Set var12 = this.scala$reflect$internal$Types$TypeRef$$$outer().shorthands();
            Symbols.Symbol var10001 = this.sym();
            if (var10001 == null) {
               throw null;
            }

            Symbols.Symbol fullName_this = var10001;
            String var14 = fullName_this.fullName('.');
            Object var7 = null;
            String apply_elem = var14;
            if (var12 == null) {
               throw null;
            }

            boolean var13 = var12.contains(apply_elem);
            Object var6 = null;
            if (var13 && !this.sym().ownersIterator().exists((s) -> BoxesRunTime.boxToBoolean($anonfun$needsPreString$1(s)))) {
               return false;
            }
         }

         return true;
      }

      private String preString() {
         return this.needsPreString() ? this.pre().prefixString() : "";
      }

      private String argsString() {
         if (this.args().isEmpty()) {
            return "";
         } else {
            List var10000 = this.args();
            String mkString_end = "]";
            String mkString_sep = ",";
            String mkString_start = "[";
            if (var10000 == null) {
               throw null;
            } else {
               return IterableOnceOps.mkString$(var10000, mkString_start, mkString_sep, mkString_end);
            }
         }
      }

      public String nameAndArgsString() {
         return (new StringBuilder(0)).append(this.typeSymbol().name().toString()).append(this.argsString()).toString();
      }

      private Scopes.Scope refinementDecls() {
         return this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().fullyInitializeScope(this.decls()).filter((sym) -> BoxesRunTime.boxToBoolean($anonfun$refinementDecls$1(sym)));
      }

      private String refinementString() {
         return this.sym().isStructuralRefinement() ? ((IterableOnceOps)this.refinementDecls().map((x$34) -> x$34.defString())).mkString("{", "; ", "}") : "";
      }

      public String finishPrefix(final String rest) {
         return this.sym().isInitialized() && this.sym().isAnonymousClass() && !this.scala$reflect$internal$Types$TypeRef$$$outer().phase().erasedTypes() ? (new StringBuilder(0)).append(this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().parentsString(this.sym().info().parents())).append(this.refinementString()).toString() : rest;
      }

      private String noArgsString() {
         return this.finishPrefix((new StringBuilder(0)).append(this.preString()).append(this.sym().nameString()).toString());
      }

      private String tupleTypeString() {
         List var1 = this.args();
         if (scala.collection.immutable.Nil..MODULE$.equals(var1)) {
            return this.noArgsString();
         } else {
            if (var1 instanceof .colon.colon) {
               .colon.colon var2 = (.colon.colon)var1;
               Type arg = (Type)var2.head();
               List var4 = var2.next$access$1();
               if (scala.collection.immutable.Nil..MODULE$.equals(var4)) {
                  return (new StringBuilder(3)).append("(").append(arg).append(",)").toString();
               }
            }

            List var10000 = this.args();
            String mkString_end = ")";
            String mkString_sep = ", ";
            String mkString_start = "(";
            if (var10000 == null) {
               throw null;
            } else {
               return IterableOnceOps.mkString$(var10000, mkString_start, mkString_sep, mkString_end);
            }
         }
      }

      private String infixTypeString() {
         List var1 = this.args();
         if (var1 instanceof .colon.colon) {
            .colon.colon var2 = (.colon.colon)var1;
            Type l = (Type)var2.head();
            List var4 = var2.next$access$1();
            if (var4 instanceof .colon.colon) {
               .colon.colon var5 = (.colon.colon)var4;
               Type r = (Type)var5.head();
               List var7 = var5.next$access$1();
               if (scala.collection.immutable.Nil..MODULE$.equals(var7)) {
                  boolean isRightAssoc = this.typeSymbol().decodedName().endsWith(":");
                  String lstr = isRightAssoc && l.isShowAsInfixType() ? (new StringBuilder(2)).append("(").append(l).append(")").toString() : l.toString();
                  String rstr = !isRightAssoc && r.isShowAsInfixType() ? (new StringBuilder(2)).append("(").append(r).append(")").toString() : r.toString();
                  return (new StringBuilder(2)).append(lstr).append(" ").append(this.sym().decodedName()).append(" ").append(rstr).toString();
               }
            }
         }

         throw new MatchError(var1);
      }

      private String customToString() {
         Symbols.Symbol var1;
         boolean var14;
         label112: {
            label115: {
               var1 = this.sym();
               Symbols.ClassSymbol var10000 = this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().RepeatedParamClass();
               if (var10000 == null) {
                  if (var1 == null) {
                     break label115;
                  }
               } else if (var10000.equals(var1)) {
                  break label115;
               }

               label104: {
                  var10000 = this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().JavaRepeatedParamClass();
                  if (var10000 == null) {
                     if (var1 == null) {
                        break label104;
                     }
                  } else if (var10000.equals(var1)) {
                     break label104;
                  }

                  var14 = false;
                  break label112;
               }

               var14 = true;
               break label112;
            }

            var14 = true;
         }

         if (var14) {
            return (new StringBuilder(1)).append(((Type)this.args().head()).toString()).append("*").toString();
         } else {
            label96: {
               Symbols.ClassSymbol var15 = this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().ByNameParamClass();
               if (var15 == null) {
                  if (var1 != null) {
                     break label96;
                  }
               } else if (!var15.equals(var1)) {
                  break label96;
               }

               if (!this.args().isEmpty()) {
                  return (new StringBuilder(3)).append("=> ").append(this.args().head()).toString();
               }
            }

            if (this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().isFunctionTypeDirect(this)) {
               List var2 = this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().unspecializedTypeArgs(this);
               if (scala.collection.immutable.Nil..MODULE$.equals(var2)) {
                  return this.noArgsString();
               } else {
                  if (var2 instanceof .colon.colon) {
                     .colon.colon var3 = (.colon.colon)var2;
                     Type in = (Type)var3.head();
                     List var5 = var3.next$access$1();
                     if (var5 instanceof .colon.colon) {
                        .colon.colon var6 = (.colon.colon)var5;
                        Type out = (Type)var6.head();
                        List var8 = var6.next$access$1();
                        if (scala.collection.immutable.Nil..MODULE$.equals(var8) && !this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().isTupleTypeDirect(in)) {
                           String in_s = !this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().isFunctionTypeDirect(in) && !this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().isByNameParamType(in) ? String.valueOf(in) : (new StringBuilder(2)).append("(").append(in).append(")").toString();
                           String out_s = this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().isFunctionTypeDirect(out) ? (new StringBuilder(2)).append("(").append(out).append(")").toString() : String.valueOf(out);
                           return (new StringBuilder(4)).append(in_s).append(" => ").append(out_s).toString();
                        }
                     }
                  }

                  return (new StringBuilder(4)).append(((IterableOnceOps)var2.init()).mkString("(", ", ", ")")).append(" => ").append(var2.last()).toString();
               }
            } else if (this.isShowAsInfixType()) {
               return this.infixTypeString();
            } else if (this.scala$reflect$internal$Types$TypeRef$$$outer().definitions().isTupleTypeDirect(this)) {
               return this.tupleTypeString();
            } else {
               if (this.sym().isAliasType() && this != this.dealias()) {
                  List var16 = this.prefixChain();
                  if (var16 == null) {
                     throw null;
                  }

                  List exists_these = var16;

                  while(true) {
                     if (exists_these.isEmpty()) {
                        var17 = false;
                        break;
                     }

                     if ($anonfun$customToString$1((Type)exists_these.head())) {
                        var17 = true;
                        break;
                     }

                     exists_these = (List)exists_these.tail();
                  }

                  Object var12 = null;
                  if (var17) {
                     return String.valueOf(this.dealias());
                  }
               }

               return "";
            }
         }
      }

      public String safeToString() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var7 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$TypeRef$$$outer().settings();
         MutableSettings var8 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var8;
         boolean var9 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         String custom = var9 ? "" : this.customToString();
         String var2 = "";
         if (custom != null) {
            if (custom.equals(var2)) {
               return this.finishPrefix((new StringBuilder(0)).append(this.preString()).append(this.sym().nameString()).append(this.argsString()).toString());
            }
         }

         return custom;
      }

      public String prefixString() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var7 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$TypeRef$$$outer().settings();
         MutableSettings var8 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var8;
         boolean var9 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         String var10;
         if (var9) {
            var10 = super.prefixString();
         } else if (this.sym().isOmittablePrefix()) {
            var10 = "";
         } else if (!this.sym().isPackageClass() && !this.sym().isPackageObjectOrClass()) {
            if (this.isStable()) {
               StdNames.nme$ var12 = this.scala$reflect$internal$Types$TypeRef$$$outer().nme();
               Names.Name isSingletonName_name = this.sym().name();
               if (var12 == null) {
                  throw null;
               }

               boolean var13 = isSingletonName_name.endsWith(".type");
               Object var5 = null;
               if (var13) {
                  var10 = (new StringBuilder(1)).append(this.scala$reflect$internal$Types$TypeRef$$$outer().tpnme().dropSingletonName(this.sym().name()).toString()).append(".").toString();
                  return String.valueOf(var10);
               }
            }

            var10 = super.prefixString();
         } else {
            StringBuilder var11 = new StringBuilder(1);
            Symbols.Symbol var10001 = this.sym().skipPackageObject();
            if (var10001 == null) {
               throw null;
            }

            var10 = var11.append(var10001.fullName('.')).append(".").toString();
         }

         return String.valueOf(var10);
      }

      /** @deprecated */
      private Null copy() {
         return null;
      }

      public String kind() {
         return "TypeRef";
      }

      public String productPrefix() {
         return "TypeRef";
      }

      public int productArity() {
         return 3;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.pre();
            case 1:
               return this.sym();
            case 2:
               return this.args();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof TypeRef;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "pre";
            case 1:
               return "sym";
            case 2:
               return "args";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$TypeRef$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isShowAsInfixType$2() {
         return true;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isShowAsInfixType$1(final AnnotationInfos.AnnotationInfo x$27) {
         Option var10000 = x$27.booleanArg(0);
         if (var10000 == null) {
            throw null;
         } else {
            Option getOrElse_this = var10000;
            Object var3 = getOrElse_this.isEmpty() ? true : getOrElse_this.get();
            Object var2 = null;
            return BoxesRunTime.unboxToBoolean(var3);
         }
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isShowAsInfixType$3(final TypeRef $this) {
         return !Character.isUnicodeIdentifierStart(scala.collection.StringOps..MODULE$.head$extension($this.sym().decodedName()));
      }

      private final Type seenFromOwnerInstantiated$1(final Type tp, final List formals$2) {
         return tp.asSeenFrom(this.pre(), this.sym().owner()).instantiateTypeParams(formals$2, this.argsOrDummies());
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isGround$1(final Type x$31) {
         return x$31.isGround();
      }

      // $FF: synthetic method
      public static final Type $anonfun$etaExpand$3(final Symbols.Symbol x$32) {
         return x$32.typeConstructor();
      }

      // $FF: synthetic method
      public static final Type $anonfun$parentsImpl$2(final TypeRef $this, final Type tp) {
         return $this.relativize(tp);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$baseTypeSeqImpl$1(final Type x$33) {
         return x$33.typeSymbolDirect().isAbstractType();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$needsPreString$1(final Symbols.Symbol s) {
         return !s.isClass();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$refinementDecls$1(final Symbols.Symbol sym) {
         return sym.isPossibleInRefinement() && sym.isPublic();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$customToString$1(final Type x$36) {
         return x$36.termSymbol().isSynthetic();
      }

      public TypeRef(final Type pre, final Symbols.Symbol sym, final List args) {
         this.pre = pre;
         this.sym = sym;
         this.args = args;
         this.trivial = 0;
         this.parentsPeriod = 0;
         this.baseTypeSeqPeriod = 0;
      }

      // $FF: synthetic method
      public static final Object $anonfun$isShowAsInfixType$1$adapted(final AnnotationInfos.AnnotationInfo x$27) {
         return BoxesRunTime.boxToBoolean($anonfun$isShowAsInfixType$1(x$27));
      }

      // $FF: synthetic method
      public static final Object $anonfun$isGround$1$adapted(final Type x$31) {
         return BoxesRunTime.boxToBoolean($anonfun$isGround$1(x$31));
      }

      // $FF: synthetic method
      public static final Object $anonfun$customToString$1$adapted(final Type x$36) {
         return BoxesRunTime.boxToBoolean($anonfun$customToString$1(x$36));
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   private final class AliasArgsTypeRef extends ArgsTypeRef implements AliasTypeRef {
      private Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache;
      private int scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod;
      private Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo;

      // $FF: synthetic method
      public Type scala$reflect$internal$Types$AliasTypeRef$$super$dealias() {
         return super.dealias();
      }

      // $FF: synthetic method
      public Symbols.Symbol scala$reflect$internal$Types$AliasTypeRef$$super$termSymbol() {
         return super.termSymbol();
      }

      // $FF: synthetic method
      public boolean scala$reflect$internal$Types$AliasTypeRef$$super$isError() {
         return super.isError();
      }

      // $FF: synthetic method
      public Type scala$reflect$internal$Types$AliasTypeRef$$super$normalizeImpl() {
         return super.normalizeImpl();
      }

      public Type dealias() {
         return Types.AliasTypeRef.super.dealias();
      }

      public Type narrow() {
         return Types.AliasTypeRef.super.narrow();
      }

      public Type prefix() {
         return Types.AliasTypeRef.super.prefix();
      }

      public Symbols.Symbol termSymbol() {
         return Types.AliasTypeRef.super.termSymbol();
      }

      public Symbols.Symbol typeSymbol() {
         return Types.AliasTypeRef.super.typeSymbol();
      }

      public boolean isError() {
         return Types.AliasTypeRef.super.isError();
      }

      public List parentsImpl() {
         return Types.AliasTypeRef.super.parentsImpl();
      }

      public List baseClasses() {
         return Types.AliasTypeRef.super.baseClasses();
      }

      public Scopes.Scope decls() {
         return Types.AliasTypeRef.super.decls();
      }

      public Type normalizeImpl() {
         return Types.AliasTypeRef.super.normalizeImpl();
      }

      public Type betaReduce() {
         return Types.AliasTypeRef.super.betaReduce();
      }

      public Symbols.Symbol coevolveSym(final Type newPre) {
         return Types.AliasTypeRef.super.coevolveSym(newPre);
      }

      public String kind() {
         return Types.AliasTypeRef.super.kind();
      }

      // $FF: synthetic method
      public void scala$reflect$internal$Types$NonClassTypeRef$$super$invalidateTypeRefCaches() {
         super.scala$reflect$internal$Types$$invalidateTypeRefCaches();
      }

      // $FF: synthetic method
      public Type scala$reflect$internal$Types$NonClassTypeRef$$super$relativeInfo() {
         return super.relativeInfo();
      }

      public final Type relativeInfo() {
         return Types.NonClassTypeRef.super.relativeInfo();
      }

      public void scala$reflect$internal$Types$$invalidateTypeRefCaches() {
         Types.NonClassTypeRef.super.scala$reflect$internal$Types$$invalidateTypeRefCaches();
      }

      public Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache_$eq(final Type x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache = x$1;
      }

      public int scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod_$eq(final int x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod = x$1;
      }

      public Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo_$eq(final Type x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo = x$1;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$AliasArgsTypeRef$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$AliasTypeRef$$$outer() {
         return this.scala$reflect$internal$Types$AliasArgsTypeRef$$$outer();
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$NonClassTypeRef$$$outer() {
         return this.scala$reflect$internal$Types$AliasArgsTypeRef$$$outer();
      }

      public AliasArgsTypeRef(final Type pre, final Symbols.Symbol sym, final List args) {
         super(pre, sym, args);
         Types.NonClassTypeRef.$init$(this);
         Types.AliasTypeRef.$init$(this);
      }
   }

   private final class AbstractArgsTypeRef extends ArgsTypeRef implements AbstractTypeRef {
      private Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache;
      private int scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod;
      private Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo;

      public List baseClasses() {
         return Types.AbstractTypeRef.super.baseClasses();
      }

      public Scopes.Scope decls() {
         return Types.AbstractTypeRef.super.decls();
      }

      public TypeBounds bounds() {
         return Types.AbstractTypeRef.super.bounds();
      }

      public Type upperBound() {
         return Types.AbstractTypeRef.super.upperBound();
      }

      public Type lowerBound() {
         return Types.AbstractTypeRef.super.lowerBound();
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeqImpl() {
         return Types.AbstractTypeRef.super.baseTypeSeqImpl();
      }

      public List parentsImpl() {
         return Types.AbstractTypeRef.super.parentsImpl();
      }

      public String kind() {
         return Types.AbstractTypeRef.super.kind();
      }

      // $FF: synthetic method
      public void scala$reflect$internal$Types$NonClassTypeRef$$super$invalidateTypeRefCaches() {
         super.scala$reflect$internal$Types$$invalidateTypeRefCaches();
      }

      // $FF: synthetic method
      public Type scala$reflect$internal$Types$NonClassTypeRef$$super$relativeInfo() {
         return super.relativeInfo();
      }

      public final Type relativeInfo() {
         return Types.NonClassTypeRef.super.relativeInfo();
      }

      public void scala$reflect$internal$Types$$invalidateTypeRefCaches() {
         Types.NonClassTypeRef.super.scala$reflect$internal$Types$$invalidateTypeRefCaches();
      }

      public Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache_$eq(final Type x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache = x$1;
      }

      public int scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod_$eq(final int x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod = x$1;
      }

      public Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo_$eq(final Type x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo = x$1;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$AbstractArgsTypeRef$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$AbstractTypeRef$$$outer() {
         return this.scala$reflect$internal$Types$AbstractArgsTypeRef$$$outer();
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$NonClassTypeRef$$$outer() {
         return this.scala$reflect$internal$Types$AbstractArgsTypeRef$$$outer();
      }

      public AbstractArgsTypeRef(final Type pre, final Symbols.Symbol sym, final List args) {
         super(pre, sym, args);
         Types.NonClassTypeRef.$init$(this);
         Types.AbstractTypeRef.$init$(this);
      }
   }

   private final class ClassArgsTypeRef extends ArgsTypeRef {
      public ClassArgsTypeRef(final Type pre, final Symbols.Symbol sym, final List args) {
         super(pre, sym, args);
      }
   }

   private final class AliasNoArgsTypeRef extends NoArgsTypeRef implements AliasTypeRef {
      private Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache;
      private int scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod;
      private Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo;

      // $FF: synthetic method
      public Type scala$reflect$internal$Types$AliasTypeRef$$super$dealias() {
         return super.dealias();
      }

      // $FF: synthetic method
      public Symbols.Symbol scala$reflect$internal$Types$AliasTypeRef$$super$termSymbol() {
         return super.termSymbol();
      }

      // $FF: synthetic method
      public boolean scala$reflect$internal$Types$AliasTypeRef$$super$isError() {
         return super.isError();
      }

      // $FF: synthetic method
      public Type scala$reflect$internal$Types$AliasTypeRef$$super$normalizeImpl() {
         return super.normalizeImpl();
      }

      public Type dealias() {
         return Types.AliasTypeRef.super.dealias();
      }

      public Type narrow() {
         return Types.AliasTypeRef.super.narrow();
      }

      public Type prefix() {
         return Types.AliasTypeRef.super.prefix();
      }

      public Symbols.Symbol termSymbol() {
         return Types.AliasTypeRef.super.termSymbol();
      }

      public Symbols.Symbol typeSymbol() {
         return Types.AliasTypeRef.super.typeSymbol();
      }

      public boolean isError() {
         return Types.AliasTypeRef.super.isError();
      }

      public List parentsImpl() {
         return Types.AliasTypeRef.super.parentsImpl();
      }

      public List baseClasses() {
         return Types.AliasTypeRef.super.baseClasses();
      }

      public Scopes.Scope decls() {
         return Types.AliasTypeRef.super.decls();
      }

      public Type normalizeImpl() {
         return Types.AliasTypeRef.super.normalizeImpl();
      }

      public Type betaReduce() {
         return Types.AliasTypeRef.super.betaReduce();
      }

      public Symbols.Symbol coevolveSym(final Type newPre) {
         return Types.AliasTypeRef.super.coevolveSym(newPre);
      }

      public String kind() {
         return Types.AliasTypeRef.super.kind();
      }

      // $FF: synthetic method
      public void scala$reflect$internal$Types$NonClassTypeRef$$super$invalidateTypeRefCaches() {
         super.scala$reflect$internal$Types$$invalidateTypeRefCaches();
      }

      // $FF: synthetic method
      public Type scala$reflect$internal$Types$NonClassTypeRef$$super$relativeInfo() {
         return super.relativeInfo();
      }

      public final Type relativeInfo() {
         return Types.NonClassTypeRef.super.relativeInfo();
      }

      public void scala$reflect$internal$Types$$invalidateTypeRefCaches() {
         Types.NonClassTypeRef.super.scala$reflect$internal$Types$$invalidateTypeRefCaches();
      }

      public Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache_$eq(final Type x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache = x$1;
      }

      public int scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod_$eq(final int x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod = x$1;
      }

      public Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo_$eq(final Type x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo = x$1;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$AliasNoArgsTypeRef$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$AliasTypeRef$$$outer() {
         return this.scala$reflect$internal$Types$AliasNoArgsTypeRef$$$outer();
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$NonClassTypeRef$$$outer() {
         return this.scala$reflect$internal$Types$AliasNoArgsTypeRef$$$outer();
      }

      public AliasNoArgsTypeRef(final Type pre, final Symbols.Symbol sym) {
         super(pre, sym);
         Types.NonClassTypeRef.$init$(this);
         Types.AliasTypeRef.$init$(this);
      }
   }

   private final class AbstractNoArgsTypeRef extends NoArgsTypeRef implements AbstractTypeRef {
      private Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache;
      private int scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod;
      private Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo;

      public List baseClasses() {
         return Types.AbstractTypeRef.super.baseClasses();
      }

      public Scopes.Scope decls() {
         return Types.AbstractTypeRef.super.decls();
      }

      public TypeBounds bounds() {
         return Types.AbstractTypeRef.super.bounds();
      }

      public Type upperBound() {
         return Types.AbstractTypeRef.super.upperBound();
      }

      public Type lowerBound() {
         return Types.AbstractTypeRef.super.lowerBound();
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeqImpl() {
         return Types.AbstractTypeRef.super.baseTypeSeqImpl();
      }

      public List parentsImpl() {
         return Types.AbstractTypeRef.super.parentsImpl();
      }

      public String kind() {
         return Types.AbstractTypeRef.super.kind();
      }

      // $FF: synthetic method
      public void scala$reflect$internal$Types$NonClassTypeRef$$super$invalidateTypeRefCaches() {
         super.scala$reflect$internal$Types$$invalidateTypeRefCaches();
      }

      // $FF: synthetic method
      public Type scala$reflect$internal$Types$NonClassTypeRef$$super$relativeInfo() {
         return super.relativeInfo();
      }

      public final Type relativeInfo() {
         return Types.NonClassTypeRef.super.relativeInfo();
      }

      public void scala$reflect$internal$Types$$invalidateTypeRefCaches() {
         Types.NonClassTypeRef.super.scala$reflect$internal$Types$$invalidateTypeRefCaches();
      }

      public Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache_$eq(final Type x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCache = x$1;
      }

      public int scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod_$eq(final int x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForPeriod = x$1;
      }

      public Type scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo() {
         return this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo;
      }

      public void scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo_$eq(final Type x$1) {
         this.scala$reflect$internal$Types$NonClassTypeRef$$relativeInfoCacheValidForSymInfo = x$1;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$AbstractNoArgsTypeRef$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$AbstractTypeRef$$$outer() {
         return this.scala$reflect$internal$Types$AbstractNoArgsTypeRef$$$outer();
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$NonClassTypeRef$$$outer() {
         return this.scala$reflect$internal$Types$AbstractNoArgsTypeRef$$$outer();
      }

      public AbstractNoArgsTypeRef(final Type pre, final Symbols.Symbol sym) {
         super(pre, sym);
         Types.NonClassTypeRef.$init$(this);
         Types.AbstractTypeRef.$init$(this);
      }
   }

   private final class ClassNoArgsTypeRef extends NoArgsTypeRef {
      public boolean contains(final Symbols.Symbol sym0) {
         return super.sym() == sym0 || super.pre().contains(sym0);
      }

      public ClassNoArgsTypeRef(final Type pre, final Symbols.Symbol sym) {
         super(pre, sym);
      }
   }

   public final class ObjectTpeJavaRef extends NoArgsTypeRef {
      public boolean contains(final Symbols.Symbol sym0) {
         return this.sym() == sym0 || this.pre().contains(sym0);
      }

      public ObjectTpeJavaRef() {
         super(Types.this.definitions().ObjectTpe().prefix(), Types.this.definitions().ObjectClass());
      }
   }

   public class TypeRef$ extends scala.reflect.api.Types.TypeRefExtractor implements Serializable {
      public Type apply(final Type pre, final Symbols.Symbol sym, final List args) {
         return this.scala$reflect$internal$Types$TypeRef$$$outer().unique((Type)(args != scala.collection.immutable.Nil..MODULE$ ? (sym.isAliasType() ? this.scala$reflect$internal$Types$TypeRef$$$outer().new AliasArgsTypeRef(pre, sym, args) : (sym.isAbstractType() ? this.scala$reflect$internal$Types$TypeRef$$$outer().new AbstractArgsTypeRef(pre, sym, args) : this.scala$reflect$internal$Types$TypeRef$$$outer().new ClassArgsTypeRef(pre, sym, args))) : (sym.isAliasType() ? this.scala$reflect$internal$Types$TypeRef$$$outer().new AliasNoArgsTypeRef(pre, sym) : (sym.isAbstractType() ? this.scala$reflect$internal$Types$TypeRef$$$outer().new AbstractNoArgsTypeRef(pre, sym) : (sym.isRefinementClass() ? this.scala$reflect$internal$Types$TypeRef$$$outer().new RefinementTypeRef(pre, sym) : (sym.isPackageClass() ? this.scala$reflect$internal$Types$TypeRef$$$outer().new PackageTypeRef(pre, sym) : (sym.isModuleClass() ? this.scala$reflect$internal$Types$TypeRef$$$outer().new ModuleTypeRef(pre, sym) : this.scala$reflect$internal$Types$TypeRef$$$outer().new ClassNoArgsTypeRef(pre, sym))))))));
      }

      public Option unapply(final TypeRef x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple3(x$0.pre(), x$0.sym(), x$0.args())));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$TypeRef$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public class MethodType extends Type implements scala.reflect.api.Types.MethodTypeApi, Product, Serializable {
      private final List params;
      private final Type resultType;
      private byte trivial;
      private byte isdepmeth;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public List params() {
         return this.params;
      }

      public Type resultType() {
         return this.resultType;
      }

      public boolean isTrivial() {
         if (this.trivial == 0) {
            this.trivial = ThreeValues$.MODULE$.fromBoolean(this.isTrivialResult() && this.areTrivialParams());
         }

         return ThreeValues$.MODULE$.toBoolean(this.trivial);
      }

      private boolean isTrivialResult() {
         return this.resultType().isTrivial() && this.resultType() == this.resultType().withoutAnnotations();
      }

      private boolean areTrivialParams() {
         if (this.params().isEmpty()) {
            return true;
         } else {
            int len = this.params().length();
            Type[] paramsTpes = new Type[len];
            return this.forallIsTrivial$1(len, paramsTpes) && this.forallParamsNoTypeContains$1(this.params(), len, paramsTpes);
         }
      }

      public boolean isImplicit() {
         return this.params() != scala.collection.immutable.Nil..MODULE$ && ((HasFlags)this.params().head()).isImplicit();
      }

      public int paramSectionCount() {
         return this.resultType().paramSectionCount() + 1;
      }

      public List paramss() {
         List var1 = this.params();
         List var10000 = this.resultType().paramss();
         if (var10000 == null) {
            throw null;
         } else {
            List $colon$colon_this = var10000;
            return new .colon.colon(var1, $colon$colon_this);
         }
      }

      public List paramTypes() {
         SymbolTable var10000 = this.scala$reflect$internal$Types$MethodType$$$outer();
         List mapList_as = this.params();
         if (var10000 == null) {
            throw null;
         } else if (mapList_as == scala.collection.immutable.Nil..MODULE$) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            .colon.colon var8 = new .colon.colon;
            Symbols.Symbol var6 = (Symbols.Symbol)mapList_as.head();
            if (var6 == null) {
               throw null;
            } else {
               var8.<init>(var6.tpe_$times(), scala.collection.immutable.Nil..MODULE$);
               .colon.colon mapList_head = var8;
               .colon.colon mapList_tail = mapList_head;

               for(List mapList_rest = (List)mapList_as.tail(); mapList_rest != scala.collection.immutable.Nil..MODULE$; mapList_rest = (List)mapList_rest.tail()) {
                  var8 = new .colon.colon;
                  var6 = (Symbols.Symbol)mapList_rest.head();
                  if (var6 == null) {
                     throw null;
                  }

                  var8.<init>(var6.tpe_$times(), scala.collection.immutable.Nil..MODULE$);
                  .colon.colon mapList_next = var8;
                  mapList_tail.next_$eq(mapList_next);
                  mapList_tail = mapList_next;
               }

               Statics.releaseFence();
               return mapList_head;
            }
         }
      }

      public final Type resultTypeOwnParamTypes() {
         return !this.isTrivial() && !this.scala$reflect$internal$Types$MethodType$$$outer().phase().erasedTypes() ? this.resultType0(this.paramTypes()) : this.resultType();
      }

      public Type resultType(final List actuals) {
         return !this.isTrivial() && !this.scala$reflect$internal$Types$MethodType$$$outer().phase().erasedTypes() ? this.resultType0(actuals) : this.resultType();
      }

      private Type resultType0(final List actuals) {
         SymbolTable var10000 = this.scala$reflect$internal$Types$MethodType$$$outer();
         List sameLength_xs2 = this.params();
         if (var10000 == null) {
            throw null;
         } else {
            boolean var6 = Collections.sameLength$(var10000, actuals, sameLength_xs2);
            Object var5 = null;
            if (var6) {
               TypeMaps.InstantiateDependentMap idm = this.scala$reflect$internal$Types$MethodType$$$outer().new InstantiateDependentMap(this.params(), actuals);
               Type res = idm.apply(this.resultType()).deconst();
               return this.scala$reflect$internal$Types$MethodType$$$outer().existentialAbstraction(idm.existentialsNeeded(), res, this.scala$reflect$internal$Types$MethodType$$$outer().existentialAbstraction$default$3());
            } else {
               return this.scala$reflect$internal$Types$MethodType$$$outer().existentialAbstraction(this.params(), this.resultType(), this.scala$reflect$internal$Types$MethodType$$$outer().existentialAbstraction$default$3());
            }
         }
      }

      public boolean isDependentMethodType() {
         if (this.isdepmeth == 0) {
            this.isdepmeth = ThreeValues$.MODULE$.fromBoolean(BoxesRunTime.unboxToBoolean(this.scala$reflect$internal$Types$MethodType$$$outer().IsDependentCollector().collect(this.resultType().dealias())));
         }

         return ThreeValues$.MODULE$.toBoolean(this.isdepmeth);
      }

      public MethodType approximate() {
         return this.scala$reflect$internal$Types$MethodType$$$outer().new MethodType(this.params(), this.resultApprox());
      }

      public String safeToString() {
         return (new StringBuilder(0)).append(this.scala$reflect$internal$Types$MethodType$$$outer().paramString(this)).append(this.resultType() instanceof MethodType ? "" : ": ").append(this.resultType()).toString();
      }

      public Type cloneInfo(final Symbols.Symbol owner) {
         List vparams = this.scala$reflect$internal$Types$MethodType$$$outer().cloneSymbolsAtOwner(this.params(), owner);
         return this.scala$reflect$internal$Types$MethodType$$$outer().copyMethodType(this, vparams, this.resultType().substSym(this.params(), vparams).cloneInfo(owner));
      }

      public Type atOwner(final Symbols.Symbol owner) {
         SymbolTable var10000 = this.scala$reflect$internal$Types$MethodType$$$outer();
         List allSymbolsHaveOwner_syms = this.params();
         if (var10000 == null) {
            throw null;
         } else {
            boolean var4 = Symbols.allSymbolsHaveOwner$(var10000, allSymbolsHaveOwner_syms, owner);
            Object var3 = null;
            return (Type)(var4 && this.resultType().atOwner(owner) == this.resultType() ? this : this.cloneInfo(owner));
         }
      }

      public String kind() {
         return "MethodType";
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         List var10000;
         if (map instanceof TypeMaps.VariancedTypeMap) {
            TypeMaps.VariancedTypeMap var3 = (TypeMaps.VariancedTypeMap)map;
            if (var3 == null) {
               throw null;
            }

            var3.variance_$eq(Variance$.MODULE$.flip$extension(var3.variance()));

            try {
               var10000 = $anonfun$mapOver$2(this, var3);
            } finally {
               var3.variance_$eq(Variance$.MODULE$.flip$extension(var3.variance()));
            }
         } else {
            var10000 = map.mapOver(this.params());
         }

         List params1 = var10000;
         Type result1 = map.apply(this.resultType());
         return (Type)(params1 == this.params() && result1 == this.resultType() ? this : this.scala$reflect$internal$Types$MethodType$$$outer().copyMethodType(this, params1, result1.substSym(this.params(), params1)));
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         folder.foldOver(this.params());
         folder.apply(this.resultType());
      }

      public MethodType copy(final List params, final Type resultType) {
         return this.scala$reflect$internal$Types$MethodType$$$outer().new MethodType(params, resultType);
      }

      public List copy$default$1() {
         return this.params();
      }

      public Type copy$default$2() {
         return this.resultType();
      }

      public String productPrefix() {
         return "MethodType";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.params();
            case 1:
               return this.resultType();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof MethodType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "params";
            case 1:
               return "resultType";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof MethodType && ((MethodType)x$1).scala$reflect$internal$Types$MethodType$$$outer() == this.scala$reflect$internal$Types$MethodType$$$outer()) {
               MethodType var2 = (MethodType)x$1;
               List var10000 = this.params();
               List var3 = var2.params();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               Type var5 = this.resultType();
               Type var4 = var2.resultType();
               if (var5 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var5.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$MethodType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      private final boolean forallIsTrivial$1(final int len$1, final Type[] paramsTpes$1) {
         boolean res = true;
         List pps = this.params();

         for(int ix = 0; res && ix < len$1; ++ix) {
            Symbols.Symbol var10002 = (Symbols.Symbol)pps.head();
            if (var10002 == null) {
               throw null;
            }

            paramsTpes$1[ix] = var10002.tpe_$times();
            res = paramsTpes$1[ix].isTrivial();
            pps = (List)pps.tail();
         }

         return res;
      }

      private static final boolean typeContains$1(final TypeMaps.ContainsCollector pcc, final Type tp) {
         pcc.result_$eq(false);
         return BoxesRunTime.unboxToBoolean(pcc.collect(tp));
      }

      private static final boolean anyTypeContains$1(final TypeMaps.ContainsCollector pcc, final int len$1, final Type[] paramsTpes$1) {
         boolean existsContains = false;

         for(int tpeIx = 0; tpeIx < len$1 && !existsContains; ++tpeIx) {
            existsContains = typeContains$1(pcc, paramsTpes$1[tpeIx]);
         }

         return existsContains;
      }

      private final boolean forallParamsNoTypeContains$1(final List params, final int len$1, final Type[] paramsTpes$1) {
         while(!scala.collection.immutable.Nil..MODULE$.equals(params)) {
            if (params instanceof .colon.colon) {
               .colon.colon var4 = (.colon.colon)params;
               Symbols.Symbol pp = (Symbols.Symbol)var4.head();
               List pps = var4.next$access$1();
               TypeMaps.ContainsCollector pcc = this.scala$reflect$internal$Types$MethodType$$$outer().new ContainsCollector(pp);
               if (!typeContains$1(pcc, this.resultType()) && !anyTypeContains$1(pcc, len$1, paramsTpes$1)) {
                  params = pps;
                  continue;
               }

               return false;
            }

            throw new MatchError(params);
         }

         return true;
      }

      // $FF: synthetic method
      public static final Type $anonfun$paramTypes$1(final Symbols.Symbol x$37) {
         return x$37.tpe();
      }

      // $FF: synthetic method
      public static final List $anonfun$mapOver$2(final MethodType $this, final TypeMaps.VariancedTypeMap x2$2) {
         return x2$2.mapOver($this.params());
      }

      public MethodType(final List params, final Type resultType) {
         this.params = params;
         this.resultType = resultType;
         this.trivial = 0;
         this.isdepmeth = 0;
      }
   }

   public class MethodType$ extends scala.reflect.api.Types.MethodTypeExtractor implements Serializable {
      public MethodType apply(final List params, final Type resultType) {
         return this.scala$reflect$internal$Types$MethodType$$$outer().new MethodType(params, resultType);
      }

      public Option unapply(final MethodType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.params(), x$0.resultType())));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$MethodType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public class NullaryMethodType extends Type implements scala.reflect.api.Types.NullaryMethodTypeApi, Product, Serializable {
      private final Type resultType;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public Type resultType() {
         return this.resultType;
      }

      public boolean isTrivial() {
         return this.resultType().isTrivial() && this.resultType() == this.resultType().withoutAnnotations();
      }

      public Type prefix() {
         return this.resultType().prefix();
      }

      public Type narrow() {
         return this.resultType().narrow();
      }

      public Symbols.Symbol termSymbol() {
         return this.resultType().termSymbol();
      }

      public Symbols.Symbol typeSymbol() {
         return this.resultType().typeSymbol();
      }

      public List parents() {
         return this.resultType().parents();
      }

      public Scopes.Scope decls() {
         return this.resultType().decls();
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeq() {
         return this.resultType().baseTypeSeq();
      }

      public int baseTypeSeqDepth() {
         return this.resultType().baseTypeSeqDepth();
      }

      public List baseClasses() {
         return this.resultType().baseClasses();
      }

      public Type baseType(final Symbols.Symbol clazz) {
         return this.resultType().baseType(clazz);
      }

      public String safeToString() {
         return this.resultType().toString();
      }

      public String kind() {
         return "NullaryMethodType";
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         Type result1 = map.apply(this.resultType());
         return result1 == this.resultType() ? this : this.scala$reflect$internal$Types$NullaryMethodType$$$outer().new NullaryMethodType(result1);
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         folder.apply(this.resultType());
      }

      public NullaryMethodType copy(final Type resultType) {
         return this.scala$reflect$internal$Types$NullaryMethodType$$$outer().new NullaryMethodType(resultType);
      }

      public Type copy$default$1() {
         return this.resultType();
      }

      public String productPrefix() {
         return "NullaryMethodType";
      }

      public int productArity() {
         return 1;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.resultType();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof NullaryMethodType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "resultType";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof NullaryMethodType && ((NullaryMethodType)x$1).scala$reflect$internal$Types$NullaryMethodType$$$outer() == this.scala$reflect$internal$Types$NullaryMethodType$$$outer()) {
               NullaryMethodType var2 = (NullaryMethodType)x$1;
               Type var10000 = this.resultType();
               Type var3 = var2.resultType();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$NullaryMethodType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public NullaryMethodType(final Type resultType) {
         this.resultType = resultType;
      }
   }

   public class NullaryMethodType$ extends scala.reflect.api.Types.NullaryMethodTypeExtractor implements Serializable {
      public NullaryMethodType apply(final Type resultType) {
         return this.scala$reflect$internal$Types$NullaryMethodType$$$outer().new NullaryMethodType(resultType);
      }

      public Option unapply(final NullaryMethodType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(x$0.resultType()));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$NullaryMethodType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public class PolyType extends Type implements scala.reflect.api.Types.PolyTypeApi, Product, Serializable {
      private final List typeParams;
      private final Type resultType;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public List typeParams() {
         return this.typeParams;
      }

      public Type resultType() {
         return this.resultType;
      }

      public int paramSectionCount() {
         return this.resultType().paramSectionCount();
      }

      public List paramss() {
         return this.resultType().paramss();
      }

      public List params() {
         return this.resultType().params();
      }

      public List paramTypes() {
         return this.resultType().paramTypes();
      }

      public List parents() {
         return this.resultType().parents();
      }

      public Scopes.Scope decls() {
         return this.resultType().decls();
      }

      public Symbols.Symbol termSymbol() {
         return this.resultType().termSymbol();
      }

      public Symbols.Symbol typeSymbol() {
         return this.resultType().typeSymbol();
      }

      public Type prefix() {
         return this.resultType().prefix();
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeq() {
         return this.resultType().baseTypeSeq();
      }

      public int baseTypeSeqDepth() {
         return this.resultType().baseTypeSeqDepth();
      }

      public List baseClasses() {
         return this.resultType().baseClasses();
      }

      public Type baseType(final Symbols.Symbol clazz) {
         return this.resultType().baseType(clazz);
      }

      public Type narrow() {
         return this.resultType().narrow();
      }

      public boolean isDependentMethodType() {
         return this.resultType().isDependentMethodType();
      }

      public Type lowerBound() {
         return this.scala$reflect$internal$Types$PolyType$$$outer().typeFun(this.typeParams(), this.resultType().lowerBound());
      }

      public Type upperBound() {
         return this.scala$reflect$internal$Types$PolyType$$$outer().typeFun(this.typeParams(), this.resultType().upperBound());
      }

      public boolean isHigherKinded() {
         return !this.typeParams().isEmpty();
      }

      public String safeToString() {
         return (new StringBuilder(0)).append(this.scala$reflect$internal$Types$PolyType$$$outer().typeParamsString(this)).append(this.resultType()).toString();
      }

      public PolyType cloneInfo(final Symbols.Symbol owner) {
         List tparams = this.scala$reflect$internal$Types$PolyType$$$outer().cloneSymbolsAtOwner(this.typeParams(), owner);
         return this.scala$reflect$internal$Types$PolyType$$$outer().new PolyType(tparams, this.resultType().substSym(this.typeParams(), tparams).cloneInfo(owner));
      }

      public Type atOwner(final Symbols.Symbol owner) {
         SymbolTable var10000 = this.scala$reflect$internal$Types$PolyType$$$outer();
         List allSymbolsHaveOwner_syms = this.typeParams();
         if (var10000 == null) {
            throw null;
         } else {
            boolean var4 = Symbols.allSymbolsHaveOwner$(var10000, allSymbolsHaveOwner_syms, owner);
            Object var3 = null;
            return var4 && this.resultType().atOwner(owner) == this.resultType() ? this : this.cloneInfo(owner);
         }
      }

      public String kind() {
         return "PolyType";
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         List var10000;
         if (map instanceof TypeMaps.VariancedTypeMap) {
            TypeMaps.VariancedTypeMap var3 = (TypeMaps.VariancedTypeMap)map;
            if (var3 == null) {
               throw null;
            }

            var3.variance_$eq(Variance$.MODULE$.flip$extension(var3.variance()));

            try {
               var10000 = $anonfun$mapOver$3(this, var3);
            } finally {
               var3.variance_$eq(Variance$.MODULE$.flip$extension(var3.variance()));
            }
         } else {
            var10000 = map.mapOver(this.typeParams());
         }

         List tparams1 = var10000;
         Type result1 = map.apply(this.resultType());
         return tparams1 == this.typeParams() && result1 == this.resultType() ? this : this.scala$reflect$internal$Types$PolyType$$$outer().new PolyType(tparams1, result1.substSym(this.typeParams(), tparams1));
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         folder.foldOver(this.typeParams());
         folder.apply(this.resultType());
      }

      public PolyType copy(final List typeParams, final Type resultType) {
         return this.scala$reflect$internal$Types$PolyType$$$outer().new PolyType(typeParams, resultType);
      }

      public List copy$default$1() {
         return this.typeParams();
      }

      public Type copy$default$2() {
         return this.resultType();
      }

      public String productPrefix() {
         return "PolyType";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.typeParams();
            case 1:
               return this.resultType();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof PolyType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "typeParams";
            case 1:
               return "resultType";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof PolyType && ((PolyType)x$1).scala$reflect$internal$Types$PolyType$$$outer() == this.scala$reflect$internal$Types$PolyType$$$outer()) {
               PolyType var2 = (PolyType)x$1;
               List var10000 = this.typeParams();
               List var3 = var2.typeParams();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               Type var5 = this.resultType();
               Type var4 = var2.resultType();
               if (var5 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var5.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$PolyType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final PolyType $anonfun$new$5(final PolyType $this) {
         return $this;
      }

      // $FF: synthetic method
      public static final List $anonfun$mapOver$3(final PolyType $this, final TypeMaps.VariancedTypeMap x2$3) {
         return x2$3.mapOver($this.typeParams());
      }

      public PolyType(final List typeParams, final Type resultType) {
         this.typeParams = typeParams;
         this.resultType = resultType;
         boolean assert_assertion = !typeParams.isEmpty();
         if (Types.this == null) {
            throw null;
         } else if (!assert_assertion) {
            throw Types.this.throwAssertionError(this);
         }
      }
   }

   public class PolyType$ extends scala.reflect.api.Types.PolyTypeExtractor implements Serializable {
      public PolyType apply(final List typeParams, final Type resultType) {
         return this.scala$reflect$internal$Types$PolyType$$$outer().new PolyType(typeParams, resultType);
      }

      public Option unapply(final PolyType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.typeParams(), x$0.resultType())));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$PolyType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public class ExistentialType extends Type implements RewrappingTypeProxy, scala.reflect.api.Types.ExistentialTypeApi, Product, Serializable {
      private final List quantified;
      private final Type underlying;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public Type maybeRewrap(final Type newtp) {
         return Types.RewrappingTypeProxy.super.maybeRewrap(newtp);
      }

      public Type widen() {
         return Types.RewrappingTypeProxy.super.widen();
      }

      public Type narrow() {
         return Types.RewrappingTypeProxy.super.narrow();
      }

      public Type deconst() {
         return Types.RewrappingTypeProxy.super.deconst();
      }

      public Type resultType() {
         return Types.RewrappingTypeProxy.super.resultType();
      }

      public Type resultType(final List actuals) {
         return Types.RewrappingTypeProxy.super.resultType(actuals);
      }

      public int paramSectionCount() {
         return Types.RewrappingTypeProxy.super.paramSectionCount();
      }

      public List paramss() {
         return Types.RewrappingTypeProxy.super.paramss();
      }

      public Type normalize() {
         return Types.RewrappingTypeProxy.super.normalize();
      }

      public Type etaExpand() {
         return Types.RewrappingTypeProxy.super.etaExpand();
      }

      public Type dealias() {
         return Types.RewrappingTypeProxy.super.dealias();
      }

      public String prefixString() {
         return Types.RewrappingTypeProxy.super.prefixString();
      }

      public boolean isComplete() {
         return Types.RewrappingTypeProxy.super.isComplete();
      }

      public void complete(final Symbols.Symbol sym) {
         Types.RewrappingTypeProxy.super.complete(sym);
      }

      public void load(final Symbols.Symbol sym) {
         Types.RewrappingTypeProxy.super.load(sym);
      }

      public Type withAnnotations(final List annots) {
         return Types.RewrappingTypeProxy.super.withAnnotations(annots);
      }

      public Type withoutAnnotations() {
         return Types.RewrappingTypeProxy.super.withoutAnnotations();
      }

      public Type typeConstructor() {
         return Types.SimpleTypeProxy.super.typeConstructor();
      }

      public boolean isError() {
         return Types.SimpleTypeProxy.super.isError();
      }

      public boolean isErroneous() {
         return Types.SimpleTypeProxy.super.isErroneous();
      }

      public Symbols.Symbol termSymbol() {
         return Types.SimpleTypeProxy.super.termSymbol();
      }

      public Symbols.Symbol termSymbolDirect() {
         return Types.SimpleTypeProxy.super.termSymbolDirect();
      }

      public List typeParams() {
         return Types.SimpleTypeProxy.super.typeParams();
      }

      public Symbols.Symbol typeSymbol() {
         return Types.SimpleTypeProxy.super.typeSymbol();
      }

      public Symbols.Symbol typeSymbolDirect() {
         return Types.SimpleTypeProxy.super.typeSymbolDirect();
      }

      public Type typeOfThis() {
         return Types.SimpleTypeProxy.super.typeOfThis();
      }

      public Type prefixDirect() {
         return Types.SimpleTypeProxy.super.prefixDirect();
      }

      public Scopes.Scope decls() {
         return Types.SimpleTypeProxy.super.decls();
      }

      public int baseTypeSeqDepth() {
         return Types.SimpleTypeProxy.super.baseTypeSeqDepth();
      }

      public List baseClasses() {
         return Types.SimpleTypeProxy.super.baseClasses();
      }

      public List quantified() {
         return this.quantified;
      }

      public Type underlying() {
         return this.underlying;
      }

      public Type rewrap(final Type newtp) {
         return this.scala$reflect$internal$Types$ExistentialType$$$outer().existentialAbstraction(this.quantified(), newtp, this.scala$reflect$internal$Types$ExistentialType$$$outer().existentialAbstraction$default$3());
      }

      public boolean isTrivial() {
         return false;
      }

      public TypeBounds bounds() {
         return this.scala$reflect$internal$Types$ExistentialType$$$outer().TypeBounds().apply(this.lowerBound(), this.upperBound());
      }

      public Type lowerBound() {
         return this.maybeRewrap(this.underlying().lowerBound());
      }

      public Type upperBound() {
         return this.maybeRewrap(this.underlying().upperBound());
      }

      public List parents() {
         List var10000 = this.underlying().parents();
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               return scala.collection.immutable.Nil..MODULE$;
            } else {
               Type var6 = (Type)map_this.head();
               .colon.colon map_h = new .colon.colon(this.maybeRewrap(var6), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  var6 = (Type)map_rest.head();
                  .colon.colon map_nx = new .colon.colon(this.maybeRewrap(var6), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               return map_h;
            }
         }
      }

      public Type prefix() {
         return this.maybeRewrap(this.underlying().prefix());
      }

      public List typeArgs() {
         List var10000 = this.underlying().typeArgs();
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               return scala.collection.immutable.Nil..MODULE$;
            } else {
               Type var6 = (Type)map_this.head();
               .colon.colon map_h = new .colon.colon(this.maybeRewrap(var6), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  var6 = (Type)map_rest.head();
                  .colon.colon map_nx = new .colon.colon(this.maybeRewrap(var6), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               return map_h;
            }
         }
      }

      public List params() {
         List var10000 = this.underlying().params();
         if (var10000 == null) {
            throw null;
         } else {
            List mapConserve_this = var10000;
            List mapConserve_loop$3_pending = mapConserve_this;
            List mapConserve_loop$3_unchanged = mapConserve_this;
            .colon.colon mapConserve_loop$3_mappedLast = null;
            List mapConserve_loop$3_mappedHead = null;

            while(!mapConserve_loop$3_pending.isEmpty()) {
               Object mapConserve_loop$3_head0 = mapConserve_loop$3_pending.head();
               Symbols.Symbol var15 = (Symbols.Symbol)mapConserve_loop$3_head0;
               Object mapConserve_loop$3_head1 = $anonfun$params$1(this, var15);
               if (mapConserve_loop$3_head1 == mapConserve_loop$3_head0) {
                  mapConserve_loop$3_pending = (List)mapConserve_loop$3_pending.tail();
                  mapConserve_loop$3_unchanged = mapConserve_loop$3_unchanged;
                  mapConserve_loop$3_mappedLast = mapConserve_loop$3_mappedLast;
                  mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead;
               } else {
                  List mapConserve_loop$3_xc = mapConserve_loop$3_unchanged;
                  List mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_mappedHead;

                  .colon.colon mapConserve_loop$3_mappedLast1;
                  for(mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_mappedLast; mapConserve_loop$3_xc != mapConserve_loop$3_pending; mapConserve_loop$3_xc = (List)mapConserve_loop$3_xc.tail()) {
                     .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_xc.head(), scala.collection.immutable.Nil..MODULE$);
                     if (mapConserve_loop$3_mappedHead1 == null) {
                        mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                     }

                     if (mapConserve_loop$3_mappedLast1 != null) {
                        mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                     }

                     mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_next;
                  }

                  .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_head1, scala.collection.immutable.Nil..MODULE$);
                  if (mapConserve_loop$3_mappedHead1 == null) {
                     mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                  }

                  if (mapConserve_loop$3_mappedLast1 != null) {
                     mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                  }

                  List mapConserve_loop$3_tail0 = (List)mapConserve_loop$3_pending.tail();
                  mapConserve_loop$3_pending = mapConserve_loop$3_tail0;
                  mapConserve_loop$3_unchanged = mapConserve_loop$3_tail0;
                  mapConserve_loop$3_mappedLast = mapConserve_loop$3_next;
                  mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead1;
               }
            }

            Object var28;
            if (mapConserve_loop$3_mappedHead == null) {
               var28 = mapConserve_loop$3_unchanged;
            } else {
               mapConserve_loop$3_mappedLast.next_$eq(mapConserve_loop$3_unchanged);
               var28 = mapConserve_loop$3_mappedHead;
            }

            mapConserve_loop$3_mappedHead = null;
            Object var17 = null;
            Object var18 = null;
            Object var19 = null;
            Object var20 = null;
            Object var21 = null;
            Object var22 = null;
            Object var23 = null;
            Object var24 = null;
            Object var25 = null;
            Object var26 = null;
            Object var27 = null;
            List mapConserve_result = (List)var28;
            Statics.releaseFence();
            return mapConserve_result;
         }
      }

      public List paramTypes() {
         List var10000 = this.underlying().paramTypes();
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               return scala.collection.immutable.Nil..MODULE$;
            } else {
               Type var6 = (Type)map_this.head();
               .colon.colon map_h = new .colon.colon(this.maybeRewrap(var6), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  var6 = (Type)map_rest.head();
                  .colon.colon map_nx = new .colon.colon(this.maybeRewrap(var6), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               return map_h;
            }
         }
      }

      public Type instantiateTypeParams(final List formals, final List actuals) {
         List quantified1 = (this.scala$reflect$internal$Types$ExistentialType$$$outer().new SubstTypeMap(formals, actuals)).mapOver(this.quantified());
         Type underlying1 = this.underlying().instantiateTypeParams(formals, actuals);
         return (Type)(quantified1 == this.quantified() && underlying1 == this.underlying() ? this : this.scala$reflect$internal$Types$ExistentialType$$$outer().existentialAbstraction(quantified1, underlying1.substSym(this.quantified(), quantified1), this.scala$reflect$internal$Types$ExistentialType$$$outer().existentialAbstraction$default$3()));
      }

      public Type baseType(final Symbols.Symbol clazz) {
         return this.maybeRewrap(this.underlying().baseType(clazz));
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeq() {
         return this.underlying().baseTypeSeq().map((newtp) -> this.maybeRewrap(newtp));
      }

      public boolean isHigherKinded() {
         return false;
      }

      private Symbols.Symbol quantifierOwner() {
         Option var10000 = this.quantified().collectFirst(new Serializable() {
            private static final long serialVersionUID = 0L;

            public final Object applyOrElse(final Symbols.Symbol x1, final Function1 default) {
               return x1.owner().exists() ? x1.owner() : default.apply(x1);
            }

            public final boolean isDefinedAt(final Symbols.Symbol x1) {
               return x1.owner().exists();
            }
         });
         if (var10000 == null) {
            throw null;
         } else {
            Option getOrElse_this = var10000;
            return (Symbols.Symbol)(getOrElse_this.isEmpty() ? $anonfun$quantifierOwner$2(this) : getOrElse_this.get());
         }
      }

      private boolean isStraightApplication() {
         return this.quantified().corresponds(this.underlying().typeArgs(), (q, a) -> BoxesRunTime.boxToBoolean($anonfun$isStraightApplication$1(q, a)));
      }

      public Type skolemizeExistential(final Symbols.Symbol owner0, final Object origin) {
         if (owner0 == null) {
            throw null;
         } else {
            Symbols.Symbol owner = owner0 != owner0.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol() ? owner0 : $anonfun$skolemizeExistential$1(this);
            return (this.underlying().typeSymbol().isJavaDefined() || this.scala$reflect$internal$Types$ExistentialType$$$outer().scala$reflect$internal$Types$$sharperSkolems()) && this.isStraightApplication() ? this.scala$reflect$internal$Types$ExistentialType$$$outer().deriveType2(this.quantified(), this.tpars$1(), (quant, tparam) -> this.newSharpenedSkolem$1(quant, tparam, owner, origin), this.underlying()) : this.scala$reflect$internal$Types$ExistentialType$$$outer().deriveType(this.quantified(), (quant) -> newSkolem$1(quant, owner, origin), this.underlying());
         }
      }

      private List wildcardArgsString(final Set qset, final List args) {
         if (args == null) {
            throw null;
         } else if (args == scala.collection.immutable.Nil..MODULE$) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            Type var7 = (Type)args.head();
            .colon.colon map_h = new .colon.colon($anonfun$wildcardArgsString$1(qset, var7), scala.collection.immutable.Nil..MODULE$);
            .colon.colon map_t = map_h;

            for(List map_rest = (List)args.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               var7 = (Type)map_rest.head();
               .colon.colon map_nx = new .colon.colon($anonfun$wildcardArgsString$1(qset, var7), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            return map_h;
         }
      }

      public String nameAndArgsString() {
         boolean var1 = false;
         TypeRef var2 = null;
         Type var3 = this.underlying();
         if (var3 instanceof TypeRef) {
            var1 = true;
            var2 = (TypeRef)var3;
            Symbols.Symbol sym = var2.sym();
            List args = var2.args();
            MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var24 = MutableSettings$.MODULE$;
            MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$ExistentialType$$$outer().settings();
            MutableSettings var25 = SettingsOps_settings;
            SettingsOps_settings = null;
            MutableSettings isDebug$extension_$this = var25;
            boolean var26 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
            isDebug$extension_$this = null;
            if (!var26 && this.isRepresentableWithWildcards()) {
               StringBuilder var28 = (new StringBuilder(0)).append(sym.name().toString());
               List var29 = this.wildcardArgsString(this.quantified().toSet(), args);
               String mkString_end = "]";
               String mkString_sep = ",";
               String mkString_start = "[";
               if (var29 == null) {
                  throw null;
               }

               String var30 = IterableOnceOps.mkString$(var29, mkString_start, mkString_sep, mkString_end);
               Object var17 = null;
               Object var18 = null;
               Object var19 = null;
               return var28.append(var30).toString();
            }
         }

         if (var1) {
            Symbols.Symbol sym = var2.sym();
            List args = var2.args();
            StringBuilder var27 = (new StringBuilder(0)).append(sym.name().toString());
            String mkString_endx = "]";
            String mkString_sepx = ",";
            String mkString_startx = "[";
            if (args == null) {
               throw null;
            } else {
               String var10001 = IterableOnceOps.mkString$(args, mkString_startx, mkString_sepx, mkString_endx);
               Object var20 = null;
               Object var21 = null;
               Object var22 = null;
               return var27.append(var10001).append(this.existentialClauses()).toString();
            }
         } else {
            return (new StringBuilder(0)).append(this.underlying().typeSymbol().name().toString()).append(this.existentialClauses()).toString();
         }
      }

      private String existentialClauses() {
         List var10000 = this.quantified();
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            Object var20;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               var20 = scala.collection.immutable.Nil..MODULE$;
            } else {
               .colon.colon map_h = new .colon.colon(((Symbols.Symbol)map_this.head()).existentialToString(), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  .colon.colon map_nx = new .colon.colon(((Symbols.Symbol)map_rest.head()).existentialToString(), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var20 = map_h;
            }

            Object var15 = null;
            Object var16 = null;
            Object var17 = null;
            Object var18 = null;
            Object var19 = null;
            String mkString_end = " }";
            String mkString_sep = "; ";
            String mkString_start = " forSome { ";
            AbstractIterable mkString_this = (AbstractIterable)var20;
            String var21 = IterableOnceOps.mkString$(mkString_this, mkString_start, mkString_sep, mkString_end);
            mkString_this = null;
            Object var12 = null;
            Object var13 = null;
            Object var14 = null;
            String str = var21;
            return BoxesRunTime.unboxToBoolean(this.scala$reflect$internal$Types$ExistentialType$$$outer().settings().explaintypes().value()) ? (new StringBuilder(2)).append("(").append(str).append(")").toString() : str;
         }
      }

      public boolean isRepresentableWithWildcards() {
         Set qset = this.quantified().toSet();
         Type var2 = this.underlying();
         if (var2 instanceof RefinementTypeRef) {
            return false;
         } else if (!(var2 instanceof TypeRef)) {
            return false;
         } else {
            TypeRef var3 = (TypeRef)var2;
            Type pre = var3.pre();
            Symbols.Symbol sym = var3.sym();
            List args = var3.args();
            Function1 partition_p = (arg) -> BoxesRunTime.boxToBoolean($anonfun$isRepresentableWithWildcards$3(qset, arg));
            if (args == null) {
               throw null;
            } else {
               Tuple2 var10000;
               if (args.isEmpty()) {
                  var10000 = scala.collection.immutable.List..MODULE$.scala$collection$immutable$List$$TupleOfNil();
               } else {
                  Builder partition_partition_l = args.newSpecificBuilder();
                  Builder partition_partition_r = args.newSpecificBuilder();
                  args.iterator().foreach(StrictOptimizedIterableOps::$anonfun$partition$1);
                  Object var10002 = partition_partition_l.result();
                  Object var17 = partition_partition_r.result();
                  Object var16 = var10002;
                  var10000 = new Tuple2(var16, var17);
                  Object var25 = null;
                  Object var27 = null;
                  Tuple2 var11 = var10000;
                  List var12 = (List)var16;
                  if (scala.collection.immutable.Nil..MODULE$.equals(var12)) {
                     var10000 = new Tuple2(scala.collection.immutable.Nil..MODULE$, args);
                  } else {
                     List var13 = (List)var17;
                     var10000 = scala.collection.immutable.Nil..MODULE$.equals(var13) ? new Tuple2(args, scala.collection.immutable.Nil..MODULE$) : var11;
                  }
               }

               Object var21 = null;
               Object var22 = null;
               Object var23 = null;
               Object var24 = null;
               Object var26 = null;
               Object var28 = null;
               Object var29 = null;
               Object var30 = null;
               Tuple2 var7 = var10000;
               if (var7 == null) {
                  throw new MatchError((Object)null);
               } else {
                  List wildcardArgs = (List)var7._1();
                  List otherArgs = (List)var7._2();
                  if (wildcardArgs.toSet().size() == SeqOps.size$(wildcardArgs)) {
                     if (otherArgs == null) {
                        throw null;
                     }

                     List exists_these = otherArgs;

                     while(true) {
                        if (exists_these.isEmpty()) {
                           var34 = false;
                           break;
                        }

                        if (isQuantified$1((Type)exists_these.head(), qset)) {
                           var34 = true;
                           break;
                        }

                        exists_these = (List)exists_these.tail();
                     }

                     Object var31 = null;
                     if (!var34) {
                        List exists_these = wildcardArgs;

                        while(true) {
                           if (exists_these.isEmpty()) {
                              var35 = false;
                              break;
                           }

                           Type var20 = (Type)exists_these.head();
                           if ($anonfun$isRepresentableWithWildcards$5(qset, var20)) {
                              var35 = true;
                              break;
                           }

                           exists_these = (List)exists_these.tail();
                        }

                        Object var32 = null;
                        if (!var35 && !qset.contains(sym) && !isQuantified$1(pre, qset)) {
                           return true;
                        }
                     }
                  }

                  return false;
               }
            }
         }
      }

      public String safeToString() {
         Type var1 = this.underlying();
         if (var1 instanceof TypeRef) {
            TypeRef var2 = (TypeRef)var1;
            Type pre = var2.pre();
            Symbols.Symbol sym = var2.sym();
            List args = var2.args();
            MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var20 = MutableSettings$.MODULE$;
            MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$ExistentialType$$$outer().settings();
            MutableSettings var21 = SettingsOps_settings;
            SettingsOps_settings = null;
            MutableSettings isDebug$extension_$this = var21;
            boolean var22 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
            isDebug$extension_$this = null;
            if (!var22 && this.isRepresentableWithWildcards()) {
               SymbolTable var23 = this.scala$reflect$internal$Types$ExistentialType$$$outer();
               Nil typeRef_args = scala.collection.immutable.Nil..MODULE$;
               if (var23 == null) {
                  throw null;
               }

               Type var24 = var23.typeRef(pre, sym, typeRef_args);
               Object var15 = null;
               String ref = var24.toString();
               List wildcards = this.wildcardArgsString(this.quantified().toSet(), args);
               if (wildcards.isEmpty()) {
                  return ref;
               }

               StringBuilder var25 = (new StringBuilder(0)).append(ref);
               String mkString_end = "]";
               String mkString_sep = ", ";
               String mkString_start = "[";
               String var10001 = IterableOnceOps.mkString$(wildcards, mkString_start, mkString_sep, mkString_end);
               Object var16 = null;
               Object var17 = null;
               Object var18 = null;
               return var25.append(var10001).toString();
            }
         }

         return (var1 instanceof MethodType ? true : (var1 instanceof NullaryMethodType ? true : var1 instanceof PolyType)) ? (new StringBuilder(2)).append("(").append(this.underlying()).append(")").append(this.existentialClauses()).toString() : (new StringBuilder(0)).append(this.underlying().toString()).append(this.existentialClauses()).toString();
      }

      public Type cloneInfo(final Symbols.Symbol owner) {
         return (Type)this.scala$reflect$internal$Types$ExistentialType$$$outer().createFromClonedSymbolsAtOwner(this.quantified(), owner, this.underlying(), (quantified, underlying) -> {
            SymbolTable var10000 = this.scala$reflect$internal$Types$ExistentialType$$$outer();
            if (var10000 == null) {
               throw null;
            } else {
               return var10000.newExistentialType(quantified, underlying);
            }
         });
      }

      public Type atOwner(final Symbols.Symbol owner) {
         SymbolTable var10000 = this.scala$reflect$internal$Types$ExistentialType$$$outer();
         List allSymbolsHaveOwner_syms = this.quantified();
         if (var10000 == null) {
            throw null;
         } else {
            boolean var4 = Symbols.allSymbolsHaveOwner$(var10000, allSymbolsHaveOwner_syms, owner);
            Object var3 = null;
            return (Type)(!var4 ? this.cloneInfo(owner) : this);
         }
      }

      public String kind() {
         return "ExistentialType";
      }

      public boolean withTypeVars(final Function1 op) {
         return this.withTypeVars(op, Depth$.MODULE$.AnyDepth());
      }

      public boolean withTypeVars(final Function1 op, final int depth) {
         List quantifiedFresh = this.scala$reflect$internal$Types$ExistentialType$$$outer().cloneSymbols(this.quantified());
         if (quantifiedFresh == null) {
            throw null;
         } else {
            Object var10000;
            if (quantifiedFresh == scala.collection.immutable.Nil..MODULE$) {
               var10000 = scala.collection.immutable.Nil..MODULE$;
            } else {
               Symbols.Symbol var14 = (Symbols.Symbol)quantifiedFresh.head();
               .colon.colon map_h = new .colon.colon($anonfun$withTypeVars$1(this, var14), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)quantifiedFresh.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  var14 = (Symbols.Symbol)map_rest.head();
                  .colon.colon map_nx = new .colon.colon($anonfun$withTypeVars$1(this, var14), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var10000 = map_h;
            }

            Object var15 = null;
            Object var16 = null;
            Object var17 = null;
            Object var18 = null;
            List tvars = (List)var10000;
            Type underlying1 = this.underlying().instantiateTypeParams(this.quantified(), tvars);
            if (BoxesRunTime.unboxToBoolean(op.apply(underlying1)) && this.scala$reflect$internal$Types$ExistentialType$$$outer().solve(tvars, quantifiedFresh, (x$40) -> Variance$.MODULE$.Invariant(), false, depth)) {
               SymbolTable var24 = this.scala$reflect$internal$Types$ExistentialType$$$outer();
               NoPrefix$ var10001 = this.scala$reflect$internal$Types$ExistentialType$$$outer().NoPrefix();
               Symbols.NoSymbol var10002 = this.scala$reflect$internal$Types$ExistentialType$$$outer().NoSymbol();
               Object var10004;
               if (tvars == scala.collection.immutable.Nil..MODULE$) {
                  var10004 = scala.collection.immutable.Nil..MODULE$;
               } else {
                  .colon.colon map_h = new .colon.colon(((TypeVar)tvars.head()).inst(), scala.collection.immutable.Nil..MODULE$);
                  .colon.colon map_t = map_h;

                  for(List map_rest = (List)tvars.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                     .colon.colon map_nx = new .colon.colon(((TypeVar)map_rest.head()).inst(), scala.collection.immutable.Nil..MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var10004 = map_h;
               }

               Object var19 = null;
               Object var20 = null;
               Object var21 = null;
               Object var22 = null;
               if (var24.isWithinBounds(var10001, var10002, quantifiedFresh, (List)var10004)) {
                  return true;
               }
            }

            return false;
         }
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         List quantified1 = map.mapOver(this.quantified());
         Type underlying1 = map.apply(this.underlying());
         if (quantified1 == this.quantified() && underlying1 == this.underlying()) {
            return this;
         } else {
            SymbolTable var10000 = this.scala$reflect$internal$Types$ExistentialType$$$outer();
            Type newExistentialType_underlying = underlying1.substSym(this.quantified(), quantified1);
            if (var10000 == null) {
               throw null;
            } else {
               return var10000.newExistentialType(quantified1, newExistentialType_underlying);
            }
         }
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         folder.foldOver(this.quantified());
         folder.apply(this.underlying());
      }

      public ExistentialType copy(final List quantified, final Type underlying) {
         return this.scala$reflect$internal$Types$ExistentialType$$$outer().new ExistentialType(quantified, underlying);
      }

      public List copy$default$1() {
         return this.quantified();
      }

      public Type copy$default$2() {
         return this.underlying();
      }

      public String productPrefix() {
         return "ExistentialType";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.quantified();
            case 1:
               return this.underlying();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof ExistentialType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "quantified";
            case 1:
               return "underlying";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof ExistentialType && ((ExistentialType)x$1).scala$reflect$internal$Types$ExistentialType$$$outer() == this.scala$reflect$internal$Types$ExistentialType$$$outer()) {
               ExistentialType var2 = (ExistentialType)x$1;
               List var10000 = this.quantified();
               List var3 = var2.quantified();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               Type var5 = this.underlying();
               Type var4 = var2.underlying();
               if (var5 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var5.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ExistentialType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$RewrappingTypeProxy$$$outer() {
         return this.scala$reflect$internal$Types$ExistentialType$$$outer();
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$SimpleTypeProxy$$$outer() {
         return this.scala$reflect$internal$Types$ExistentialType$$$outer();
      }

      // $FF: synthetic method
      public static final Type $anonfun$parents$1(final ExistentialType $this, final Type newtp) {
         return $this.maybeRewrap(newtp);
      }

      // $FF: synthetic method
      public static final Type $anonfun$typeArgs$1(final ExistentialType $this, final Type newtp) {
         return $this.maybeRewrap(newtp);
      }

      // $FF: synthetic method
      public static final Symbols.Symbol $anonfun$params$1(final ExistentialType $this, final Symbols.Symbol param) {
         Type tpe1 = $this.rewrap(param.tpeHK());
         return tpe1 == param.tpeHK() ? param : param.cloneSymbol().setInfo(tpe1);
      }

      // $FF: synthetic method
      public static final Type $anonfun$paramTypes$2(final ExistentialType $this, final Type newtp) {
         return $this.maybeRewrap(newtp);
      }

      // $FF: synthetic method
      public static final Symbols.NoSymbol $anonfun$quantifierOwner$2(final ExistentialType $this) {
         return $this.scala$reflect$internal$Types$ExistentialType$$$outer().NoSymbol();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isStraightApplication$1(final Symbols.Symbol q, final Type a) {
         return q.tpe_$times().$eq$colon$eq(a);
      }

      // $FF: synthetic method
      public static final Symbols.Symbol $anonfun$skolemizeExistential$1(final ExistentialType $this) {
         return $this.quantifierOwner();
      }

      private final List tpars$1() {
         return this.underlying().typeSymbolDirect().initialize().typeParams();
      }

      private static final Symbols.TypeSkolem newSkolem$1(final Symbols.Symbol quant, final Symbols.Symbol owner$1, final Object origin$1) {
         return owner$1.newExistentialSkolem(quant, origin$1);
      }

      private static final boolean emptyBounds$1(final Symbols.Symbol sym) {
         return sym.info().bounds().isEmptyBounds();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$skolemizeExistential$2(final ExistentialType $this, final Symbols.Symbol et) {
         return !$this.quantified().contains(et);
      }

      private final Symbols.Symbol newSharpenedSkolem$1(final Symbols.Symbol quant, final Symbols.Symbol tparam, final Symbols.Symbol owner$1, final Object origin$1) {
         boolean var10;
         label37: {
            if (emptyBounds$1(quant) && !emptyBounds$1(tparam)) {
               List var10000 = this.scala$reflect$internal$Types$ExistentialType$$$outer().existentialsInType(tparam.info());
               if (var10000 == null) {
                  throw null;
               }

               List forall_these = var10000;

               while(true) {
                  if (forall_these.isEmpty()) {
                     var9 = true;
                     break;
                  }

                  Symbols.Symbol var7 = (Symbols.Symbol)forall_these.head();
                  if (!$anonfun$skolemizeExistential$2(this, var7)) {
                     var9 = false;
                     break;
                  }

                  forall_these = (List)forall_these.tail();
               }

               Object var8 = null;
               if (var9) {
                  var10 = true;
                  break label37;
               }
            }

            var10 = false;
         }

         Type skolemInfo = !var10 ? quant.info() : tparam.info().substSym(this.tpars$1(), this.quantified());
         return owner$1.newExistentialSkolem(quant.name().toTypeName(), skolemInfo, quant.flags(), quant.pos(), origin$1);
      }

      // $FF: synthetic method
      public static final String $anonfun$wildcardArgsString$1(final Set qset$1, final Type x0$1) {
         if (x0$1 instanceof TypeRef) {
            Symbols.Symbol sym = ((TypeRef)x0$1).sym();
            if (qset$1.contains(sym)) {
               return (new StringBuilder(1)).append("_").append(sym.infoString(sym.info())).toString();
            }
         }

         return x0$1.toString();
      }

      // $FF: synthetic method
      public static final String $anonfun$existentialClauses$1(final Symbols.Symbol x$38) {
         return x$38.existentialToString();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isRepresentableWithWildcards$1(final Set qset$2, final Type t) {
         return qset$2.contains(t.typeSymbol());
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isRepresentableWithWildcards$2(final Set qset$2, final Type tpe) {
         return isQuantified$1(tpe, qset$2);
      }

      private static final boolean isQuantified$1(final Type tpe, final Set qset$2) {
         if (!tpe.exists((t) -> BoxesRunTime.boxToBoolean($anonfun$isRepresentableWithWildcards$1(qset$2, t)))) {
            if (tpe.typeSymbol().isRefinementClass()) {
               List var10000 = tpe.parents();
               if (var10000 == null) {
                  throw null;
               }

               List exists_these = var10000;

               while(true) {
                  if (exists_these.isEmpty()) {
                     var4 = false;
                     break;
                  }

                  if (isQuantified$1((Type)exists_these.head(), qset$2)) {
                     var4 = true;
                     break;
                  }

                  exists_these = (List)exists_these.tail();
               }

               Object var3 = null;
               if (var4) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isRepresentableWithWildcards$3(final Set qset$2, final Type arg) {
         return qset$2.contains(arg.typeSymbol());
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isRepresentableWithWildcards$4(final Set qset$2, final Type arg) {
         return isQuantified$1(arg, qset$2);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isRepresentableWithWildcards$5(final Set qset$2, final Type arg) {
         return isQuantified$1(arg.typeSymbol().info().bounds(), qset$2);
      }

      // $FF: synthetic method
      public static final TypeVar $anonfun$withTypeVars$1(final ExistentialType $this, final Symbols.Symbol tparam) {
         return $this.scala$reflect$internal$Types$ExistentialType$$$outer().TypeVar().apply(tparam);
      }

      // $FF: synthetic method
      public static final Type $anonfun$withTypeVars$3(final TypeVar x$41) {
         return x$41.inst();
      }

      public ExistentialType(final List quantified, final Type underlying) {
         this.quantified = quantified;
         this.underlying = underlying;
      }

      // $FF: synthetic method
      public static final Object $anonfun$isRepresentableWithWildcards$4$adapted(final Set qset$2, final Type arg) {
         return BoxesRunTime.boxToBoolean($anonfun$isRepresentableWithWildcards$4(qset$2, arg));
      }

      // $FF: synthetic method
      public static final Object $anonfun$isRepresentableWithWildcards$5$adapted(final Set qset$2, final Type arg) {
         return BoxesRunTime.boxToBoolean($anonfun$isRepresentableWithWildcards$5(qset$2, arg));
      }

      // $FF: synthetic method
      public static final Object $anonfun$skolemizeExistential$2$adapted(final ExistentialType $this, final Symbols.Symbol et) {
         return BoxesRunTime.boxToBoolean($anonfun$skolemizeExistential$2($this, et));
      }

      // $FF: synthetic method
      public static final Object $anonfun$isRepresentableWithWildcards$2$adapted(final Set qset$2, final Type tpe) {
         return BoxesRunTime.boxToBoolean($anonfun$isRepresentableWithWildcards$2(qset$2, tpe));
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class ExistentialType$ extends scala.reflect.api.Types.ExistentialTypeExtractor implements Serializable {
      public ExistentialType apply(final List quantified, final Type underlying) {
         return this.scala$reflect$internal$Types$ExistentialType$$$outer().new ExistentialType(quantified, underlying);
      }

      public Option unapply(final ExistentialType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.quantified(), x$0.underlying())));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ExistentialType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public class OverloadedType extends Type implements Product, Serializable {
      private final Type pre;
      private final List alternatives;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public Type pre() {
         return this.pre;
      }

      public List alternatives() {
         return this.alternatives;
      }

      public Type prefix() {
         return this.pre();
      }

      public String safeToString() {
         List var10000 = this.alternatives();
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            Object var13;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               var13 = scala.collection.immutable.Nil..MODULE$;
            } else {
               Symbols.Symbol var6 = (Symbols.Symbol)map_this.head();
               .colon.colon map_h = new .colon.colon($anonfun$safeToString$2(this, var6), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  var6 = (Symbols.Symbol)map_rest.head();
                  .colon.colon map_nx = new .colon.colon($anonfun$safeToString$2(this, var6), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var13 = map_h;
            }

            Object var7 = null;
            Object var8 = null;
            Object var9 = null;
            Object var10 = null;
            Object var11 = null;
            return IterableOnceOps.mkString$((IterableOnceOps)var13, "", " <and> ", "");
         }
      }

      public String kind() {
         return "OverloadedType";
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         Type pre1 = this.pre() instanceof ClassInfoType ? this.pre() : map.apply(this.pre());
         return pre1 == this.pre() ? this : this.scala$reflect$internal$Types$OverloadedType$$$outer().new OverloadedType(pre1, this.alternatives());
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         if (!(this.pre() instanceof ClassInfoType)) {
            folder.apply(this.pre());
         }
      }

      public OverloadedType copy(final Type pre, final List alternatives) {
         return this.scala$reflect$internal$Types$OverloadedType$$$outer().new OverloadedType(pre, alternatives);
      }

      public Type copy$default$1() {
         return this.pre();
      }

      public List copy$default$2() {
         return this.alternatives();
      }

      public String productPrefix() {
         return "OverloadedType";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.pre();
            case 1:
               return this.alternatives();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof OverloadedType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "pre";
            case 1:
               return "alternatives";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof OverloadedType && ((OverloadedType)x$1).scala$reflect$internal$Types$OverloadedType$$$outer() == this.scala$reflect$internal$Types$OverloadedType$$$outer()) {
               OverloadedType var2 = (OverloadedType)x$1;
               Type var10000 = this.pre();
               Type var3 = var2.pre();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               List var5 = this.alternatives();
               List var4 = var2.alternatives();
               if (var5 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var5.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$OverloadedType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final Type $anonfun$safeToString$2(final OverloadedType $this, final Symbols.Symbol sym) {
         return $this.pre().memberType(sym);
      }

      public OverloadedType(final Type pre, final List alternatives) {
         this.pre = pre;
         this.alternatives = alternatives;
      }
   }

   public class OverloadedType$ extends AbstractFunction2 implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public final String toString() {
         return "OverloadedType";
      }

      public OverloadedType apply(final Type pre, final List alternatives) {
         return this.$outer.new OverloadedType(pre, alternatives);
      }

      public Option unapply(final OverloadedType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.pre(), x$0.alternatives())));
      }

      public OverloadedType$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class ImportType extends Type implements Product, Serializable {
      private final Trees.Tree expr;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public Trees.Tree expr() {
         return this.expr;
      }

      public String safeToString() {
         return (new StringBuilder(12)).append("ImportType(").append(this.expr()).append(")").toString();
      }

      public ImportType copy(final Trees.Tree expr) {
         return this.scala$reflect$internal$Types$ImportType$$$outer().new ImportType(expr);
      }

      public Trees.Tree copy$default$1() {
         return this.expr();
      }

      public String productPrefix() {
         return "ImportType";
      }

      public int productArity() {
         return 1;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.expr();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof ImportType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "expr";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof ImportType && ((ImportType)x$1).scala$reflect$internal$Types$ImportType$$$outer() == this.scala$reflect$internal$Types$ImportType$$$outer()) {
               ImportType var2 = (ImportType)x$1;
               Trees.Tree var10000 = this.expr();
               Trees.Tree var3 = var2.expr();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ImportType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public ImportType(final Trees.Tree expr) {
         this.expr = expr;
      }
   }

   public class ImportType$ extends AbstractFunction1 implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public final String toString() {
         return "ImportType";
      }

      public ImportType apply(final Trees.Tree expr) {
         return this.$outer.new ImportType(expr);
      }

      public Option unapply(final ImportType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(x$0.expr()));
      }

      public ImportType$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class AntiPolyType extends Type implements Product, Serializable {
      private final Type pre;
      private final List targs;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public Type pre() {
         return this.pre;
      }

      public List targs() {
         return this.targs;
      }

      public String safeToString() {
         StringBuilder var10000 = (new StringBuilder(0)).append(this.pre().toString());
         List var10001 = this.targs();
         String mkString_end = ")";
         String mkString_sep = ", ";
         String mkString_start = "(with type arguments ";
         if (var10001 == null) {
            throw null;
         } else {
            String var7 = IterableOnceOps.mkString$(var10001, mkString_start, mkString_sep, mkString_end);
            Object var4 = null;
            Object var5 = null;
            Object var6 = null;
            return var10000.append(var7).toString();
         }
      }

      public Type memberType(final Symbols.Symbol sym) {
         return this.scala$reflect$internal$Types$AntiPolyType$$$outer().appliedType(this.pre().memberType(sym), this.targs());
      }

      public String kind() {
         return "AntiPolyType";
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         Type pre1 = map.apply(this.pre());
         List var10000 = this.targs();
         if (var10000 == null) {
            throw null;
         } else {
            List mapConserve_this = var10000;
            List mapConserve_loop$3_pending = mapConserve_this;
            List mapConserve_loop$3_unchanged = mapConserve_this;
            .colon.colon mapConserve_loop$3_mappedLast = null;
            List mapConserve_loop$3_mappedHead = null;

            while(!mapConserve_loop$3_pending.isEmpty()) {
               Object mapConserve_loop$3_head0 = mapConserve_loop$3_pending.head();
               Object mapConserve_loop$3_head1 = map.apply(mapConserve_loop$3_head0);
               if (mapConserve_loop$3_head1 == mapConserve_loop$3_head0) {
                  mapConserve_loop$3_pending = (List)mapConserve_loop$3_pending.tail();
                  mapConserve_loop$3_unchanged = mapConserve_loop$3_unchanged;
                  mapConserve_loop$3_mappedLast = mapConserve_loop$3_mappedLast;
                  mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead;
               } else {
                  List mapConserve_loop$3_xc = mapConserve_loop$3_unchanged;
                  List mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_mappedHead;

                  .colon.colon mapConserve_loop$3_mappedLast1;
                  for(mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_mappedLast; mapConserve_loop$3_xc != mapConserve_loop$3_pending; mapConserve_loop$3_xc = (List)mapConserve_loop$3_xc.tail()) {
                     .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_xc.head(), scala.collection.immutable.Nil..MODULE$);
                     if (mapConserve_loop$3_mappedHead1 == null) {
                        mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                     }

                     if (mapConserve_loop$3_mappedLast1 != null) {
                        mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                     }

                     mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_next;
                  }

                  .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_head1, scala.collection.immutable.Nil..MODULE$);
                  if (mapConserve_loop$3_mappedHead1 == null) {
                     mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                  }

                  if (mapConserve_loop$3_mappedLast1 != null) {
                     mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                  }

                  List mapConserve_loop$3_tail0 = (List)mapConserve_loop$3_pending.tail();
                  mapConserve_loop$3_pending = mapConserve_loop$3_tail0;
                  mapConserve_loop$3_unchanged = mapConserve_loop$3_tail0;
                  mapConserve_loop$3_mappedLast = mapConserve_loop$3_next;
                  mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead1;
               }
            }

            Object var32;
            if (mapConserve_loop$3_mappedHead == null) {
               var32 = mapConserve_loop$3_unchanged;
            } else {
               mapConserve_loop$3_mappedLast.next_$eq(mapConserve_loop$3_unchanged);
               var32 = mapConserve_loop$3_mappedHead;
            }

            mapConserve_loop$3_mappedHead = null;
            Object var21 = null;
            Object var22 = null;
            Object var23 = null;
            Object var24 = null;
            Object var25 = null;
            Object var26 = null;
            Object var27 = null;
            Object var28 = null;
            Object var29 = null;
            Object var30 = null;
            Object var31 = null;
            List mapConserve_result = (List)var32;
            Statics.releaseFence();
            var32 = mapConserve_result;
            Object var18 = null;
            mapConserve_result = null;
            List targs1 = (List)var32;
            if (pre1 == this.pre() && targs1 == this.targs()) {
               return this;
            } else {
               return this.scala$reflect$internal$Types$AntiPolyType$$$outer().new AntiPolyType(pre1, targs1);
            }
         }
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         folder.apply(this.pre());
         List var10000 = this.targs();
         if (var10000 == null) {
            throw null;
         } else {
            for(List foreach_these = var10000; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               folder.apply(foreach_these.head());
            }

         }
      }

      public AntiPolyType copy(final Type pre, final List targs) {
         return this.scala$reflect$internal$Types$AntiPolyType$$$outer().new AntiPolyType(pre, targs);
      }

      public Type copy$default$1() {
         return this.pre();
      }

      public List copy$default$2() {
         return this.targs();
      }

      public String productPrefix() {
         return "AntiPolyType";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.pre();
            case 1:
               return this.targs();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof AntiPolyType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "pre";
            case 1:
               return "targs";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof AntiPolyType && ((AntiPolyType)x$1).scala$reflect$internal$Types$AntiPolyType$$$outer() == this.scala$reflect$internal$Types$AntiPolyType$$$outer()) {
               AntiPolyType var2 = (AntiPolyType)x$1;
               Type var10000 = this.pre();
               Type var3 = var2.pre();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               List var5 = this.targs();
               List var4 = var2.targs();
               if (var5 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var5.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$AntiPolyType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public AntiPolyType(final Type pre, final List targs) {
         this.pre = pre;
         this.targs = targs;
      }
   }

   public class AntiPolyType$ extends AbstractFunction2 implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public final String toString() {
         return "AntiPolyType";
      }

      public AntiPolyType apply(final Type pre, final List targs) {
         return this.$outer.new AntiPolyType(pre, targs);
      }

      public Option unapply(final AntiPolyType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.pre(), x$0.targs())));
      }

      public AntiPolyType$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class HasTypeMember$ {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public Type apply(final Names.TypeName name, final Type tp) {
         Type bound = this.$outer.refinedType(new .colon.colon(this.$outer.WildcardType(), scala.collection.immutable.Nil..MODULE$), this.$outer.NoSymbol());
         Symbols.Symbol qual$1 = bound.typeSymbol();
         Position x$2 = qual$1.newAliasType$default$2();
         long x$3 = 0L;
         Symbols.AliasTypeSymbol bsym = qual$1.createAliasTypeSymbol(name, x$2, x$3);
         bsym.setInfo(tp);
         bound.decls().enter(bsym);
         return bound;
      }

      public boolean unapply(final Type tp) {
         if (tp instanceof RefinedType) {
            RefinedType var2 = (RefinedType)tp;
            List var3 = var2.parents();
            Scopes.Scope scope = var2.decls();
            if (var3 != null) {
               List var10000 = scala.package..MODULE$.List();
               if (var10000 == null) {
                  throw null;
               }

               List unapplySeq_this = var10000;
               SeqOps var11 = SeqFactory.unapplySeq$(unapplySeq_this, var3);
               Object var10 = null;
               SeqOps var5 = var11;
               SeqFactory.UnapplySeqWrapper var12 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
               SeqFactory.UnapplySeqWrapper var10001 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
               new SeqFactory.UnapplySeqWrapper(var5);
               var12 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
               var12 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
               int lengthCompare$extension_len = 1;
               if (var5.lengthCompare(lengthCompare$extension_len) == 0) {
                  var12 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                  var12 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                  int apply$extension_i = 0;
                  Type var6 = (Type)var5.apply(apply$extension_i);
                  if (this.$outer.WildcardType().equals(var6)) {
                     if (scope.size() == 1) {
                        return true;
                     }

                     return false;
                  }
               }
            }
         }

         return false;
      }

      public HasTypeMember$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class ArrayTypeRef$ {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public Option unapply(final Type tp) {
         if (tp instanceof TypeRef) {
            TypeRef var2 = (TypeRef)tp;
            Symbols.Symbol var3 = var2.sym();
            List var4 = var2.args();
            Symbols.ClassSymbol var10000 = this.$outer.definitions().ArrayClass();
            if (var10000 == null) {
               if (var3 != null) {
                  return scala.None..MODULE$;
               }
            } else if (!var10000.equals(var3)) {
               return scala.None..MODULE$;
            }

            if (var4 instanceof .colon.colon) {
               .colon.colon var5 = (.colon.colon)var4;
               Type arg = (Type)var5.head();
               List var7 = var5.next$access$1();
               if (scala.collection.immutable.Nil..MODULE$.equals(var7)) {
                  return new Some(arg);
               }
            }
         }

         return scala.None..MODULE$;
      }

      public ArrayTypeRef$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class TypeVar$ implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public final Object trace(final String action, final Function0 msg, final Object value) {
         return value;
      }

      public boolean precludesWidening(final Type tp) {
         return tp.isStable() || tp.typeSymbol().isSubClass(this.$outer.definitions().SingletonClass());
      }

      public TypeVar untouchable(final Symbols.Symbol tparam) {
         return this.createTypeVar(tparam, true);
      }

      public TypeVar apply(final Symbols.Symbol tparam) {
         return this.createTypeVar(tparam, false);
      }

      public TypeVar apply(final Type origin, final TypeConstraints.TypeConstraint constr) {
         return this.apply(origin, constr, scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$);
      }

      public TypeVar apply(final Type origin, final TypeConstraints.TypeConstraint constr, final List args, final List params) {
         return this.createTypeVar(origin, constr, args, params, false);
      }

      private TypeVar createTypeVar(final Type origin, final TypeConstraints.TypeConstraint constr, final List args, final List params, final boolean untouchable) {
         Object var6;
         if (args.isEmpty() && params.isEmpty()) {
            var6 = untouchable ? new UntouchableTypeVar(origin, constr) {
               // $FF: synthetic field
               private final TypeVar$ $outer;

               // $FF: synthetic method
               public boolean scala$reflect$internal$Types$UntouchableTypeVar$$super$registerTypeEquality(final Type tp, final boolean typeVarLHS) {
                  return super.registerTypeEquality(tp, typeVarLHS);
               }

               // $FF: synthetic method
               public boolean scala$reflect$internal$Types$UntouchableTypeVar$$super$registerBound(final Type tp, final boolean isLowerBound, final boolean isNumericBound) {
                  return super.registerBound(tp, isLowerBound, isNumericBound);
               }

               public boolean untouchable() {
                  return Types.UntouchableTypeVar.super.untouchable();
               }

               public boolean isGround() {
                  return Types.UntouchableTypeVar.super.isGround();
               }

               public boolean registerTypeEquality(final Type tp, final boolean typeVarLHS) {
                  return Types.UntouchableTypeVar.super.registerTypeEquality(tp, typeVarLHS);
               }

               public boolean registerBound(final Type tp, final boolean isLowerBound, final boolean isNumericBound) {
                  return Types.UntouchableTypeVar.super.registerBound(tp, isLowerBound, isNumericBound);
               }

               public boolean registerBound$default$3() {
                  return Types.UntouchableTypeVar.super.registerBound$default$3();
               }

               // $FF: synthetic method
               public Types scala$reflect$internal$Types$UntouchableTypeVar$$$outer() {
                  return this.$outer.scala$reflect$internal$Types$TypeVar$$$outer();
               }

               public {
                  if (TypeVar$.this == null) {
                     throw null;
                  } else {
                     this.$outer = TypeVar$.this;
                  }
               }
            } : new TypeVar(origin, constr) {
            };
         } else {
            int var10000 = SeqOps.size$(args);
            if (params == null) {
               throw null;
            }

            if (var10000 == SeqOps.size$(params)) {
               var6 = untouchable ? new UntouchableTypeVar(origin, constr, params, args) {
                  // $FF: synthetic field
                  private final TypeVar$ $outer;

                  // $FF: synthetic method
                  public boolean scala$reflect$internal$Types$UntouchableTypeVar$$super$registerTypeEquality(final Type tp, final boolean typeVarLHS) {
                     return super.registerTypeEquality(tp, typeVarLHS);
                  }

                  // $FF: synthetic method
                  public boolean scala$reflect$internal$Types$UntouchableTypeVar$$super$registerBound(final Type tp, final boolean isLowerBound, final boolean isNumericBound) {
                     return super.registerBound(tp, isLowerBound, isNumericBound);
                  }

                  public boolean untouchable() {
                     return Types.UntouchableTypeVar.super.untouchable();
                  }

                  public boolean isGround() {
                     return Types.UntouchableTypeVar.super.isGround();
                  }

                  public boolean registerTypeEquality(final Type tp, final boolean typeVarLHS) {
                     return Types.UntouchableTypeVar.super.registerTypeEquality(tp, typeVarLHS);
                  }

                  public boolean registerBound(final Type tp, final boolean isLowerBound, final boolean isNumericBound) {
                     return Types.UntouchableTypeVar.super.registerBound(tp, isLowerBound, isNumericBound);
                  }

                  public boolean registerBound$default$3() {
                     return Types.UntouchableTypeVar.super.registerBound$default$3();
                  }

                  // $FF: synthetic method
                  public Types scala$reflect$internal$Types$UntouchableTypeVar$$$outer() {
                     return this.$outer.scala$reflect$internal$Types$TypeVar$$$outer();
                  }

                  public {
                     if (TypeVar$.this == null) {
                        throw null;
                     } else {
                        this.$outer = TypeVar$.this;
                     }
                  }
               } : this.$outer.new AppliedTypeVar(origin, constr, params, args);
            } else {
               if (!args.isEmpty()) {
                  throw new Error((new StringBuilder(30)).append("Invalid TypeVar construction: ").append(new Tuple4(origin, constr, args, params)).toString());
               }

               var6 = untouchable ? new UntouchableTypeVar(origin, constr, params) {
                  // $FF: synthetic field
                  private final TypeVar$ $outer;

                  // $FF: synthetic method
                  public boolean scala$reflect$internal$Types$UntouchableTypeVar$$super$registerTypeEquality(final Type tp, final boolean typeVarLHS) {
                     return super.registerTypeEquality(tp, typeVarLHS);
                  }

                  // $FF: synthetic method
                  public boolean scala$reflect$internal$Types$UntouchableTypeVar$$super$registerBound(final Type tp, final boolean isLowerBound, final boolean isNumericBound) {
                     return super.registerBound(tp, isLowerBound, isNumericBound);
                  }

                  public boolean untouchable() {
                     return Types.UntouchableTypeVar.super.untouchable();
                  }

                  public boolean isGround() {
                     return Types.UntouchableTypeVar.super.isGround();
                  }

                  public boolean registerTypeEquality(final Type tp, final boolean typeVarLHS) {
                     return Types.UntouchableTypeVar.super.registerTypeEquality(tp, typeVarLHS);
                  }

                  public boolean registerBound(final Type tp, final boolean isLowerBound, final boolean isNumericBound) {
                     return Types.UntouchableTypeVar.super.registerBound(tp, isLowerBound, isNumericBound);
                  }

                  public boolean registerBound$default$3() {
                     return Types.UntouchableTypeVar.super.registerBound$default$3();
                  }

                  // $FF: synthetic method
                  public Types scala$reflect$internal$Types$UntouchableTypeVar$$$outer() {
                     return this.$outer.scala$reflect$internal$Types$TypeVar$$$outer();
                  }

                  public {
                     if (TypeVar$.this == null) {
                        throw null;
                     } else {
                        this.$outer = TypeVar$.this;
                     }
                  }
               } : this.$outer.new HKTypeVar(origin, constr, params);
            }
         }

         return (TypeVar)var6;
      }

      private TypeVar createTypeVar(final Symbols.Symbol tparam, final boolean untouchable) {
         TypeConstraints.TypeConstraint constr = this.$outer.new TypeConstraint();
         if (this.precludesWidening(tparam.info().upperBound())) {
            constr.stopWidening();
            constr.addHiBound(this.$outer.definitions().SingletonClass().typeConstructor(), constr.addHiBound$default$2());
         }

         return this.createTypeVar(tparam.typeConstructor(), constr, scala.collection.immutable.Nil..MODULE$, tparam.typeParams(), untouchable);
      }

      public Option unapply(final TypeVar x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.origin(), x$0.constr())));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$TypeVar$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public static final String $anonfun$createTypeVar$1(final TypeVar tv$1) {
         return (new StringBuilder(3)).append("In ").append(tv$1.originLocation()).toString();
      }

      public TypeVar$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class HKTypeVar extends TypeVar {
      private final List params;

      public List params() {
         return this.params;
      }

      public boolean isHigherKinded() {
         return true;
      }

      public List typeParams() {
         return this.params();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$HKTypeVar$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final HKTypeVar $anonfun$new$6(final HKTypeVar $this) {
         return $this;
      }

      public HKTypeVar(final Type _origin, final TypeConstraints.TypeConstraint _constr, final List params) {
         super(_origin, _constr);
         this.params = params;
         boolean require_requirement = !params.isEmpty();
         if (Types.this == null) {
            throw null;
         } else if (!require_requirement) {
            throw Types.this.throwRequirementError(this);
         }
      }
   }

   public class AppliedTypeVar extends TypeVar {
      private final List params;
      private final List typeArgs;

      public List params() {
         return this.params;
      }

      public List typeArgs() {
         return this.typeArgs;
      }

      public String safeToString() {
         StringBuilder var10000 = (new StringBuilder(0)).append(super.safeToString());
         List var10001 = this.typeArgs();
         if (var10001 == null) {
            throw null;
         } else {
            List map_this = var10001;
            Object var11;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               var11 = scala.collection.immutable.Nil..MODULE$;
            } else {
               .colon.colon map_h = new .colon.colon(((Type)map_this.head()).safeToString(), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  .colon.colon map_nx = new .colon.colon(((Type)map_rest.head()).safeToString(), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var11 = map_h;
            }

            Object var6 = null;
            Object var7 = null;
            Object var8 = null;
            Object var9 = null;
            Object var10 = null;
            return var10000.append(IterableOnceOps.mkString$((IterableOnceOps)var11, "[", ", ", "]")).toString();
         }
      }

      public AppliedTypeVar setInst(final Type tp) {
         return (AppliedTypeVar)super.setInst((Type)(this.scala$reflect$internal$Types$AppliedTypeVar$$$outer().isSubArgs(this.typeArgs(), tp.typeArgs(), this.params(), Depth$.MODULE$.AnyDepth()) ? tp.typeConstructor() : this.scala$reflect$internal$Types$AppliedTypeVar$$$outer().NoType()));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$AppliedTypeVar$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final AppliedTypeVar $anonfun$new$7(final AppliedTypeVar $this) {
         return $this;
      }

      // $FF: synthetic method
      public static final String $anonfun$safeToString$3(final Type x$42) {
         return x$42.safeToString();
      }

      public AppliedTypeVar(final Type _origin, final TypeConstraints.TypeConstraint _constr, final List params, final List typeArgs) {
         boolean var10001;
         label24: {
            this.params = params;
            this.typeArgs = typeArgs;
            super(_origin, _constr);
            if (!params.isEmpty()) {
               if (Types.this == null) {
                  throw null;
               }

               if (Collections.sameLength$(Types.this, params, typeArgs)) {
                  var10001 = true;
                  break label24;
               }
            }

            var10001 = false;
         }

         boolean require_requirement = var10001;
         if (Types.this == null) {
            throw null;
         } else if (!require_requirement) {
            throw Types.this.throwRequirementError(this);
         }
      }
   }

   public interface UntouchableTypeVar {
      // $FF: synthetic method
      boolean scala$reflect$internal$Types$UntouchableTypeVar$$super$registerTypeEquality(final Type tp, final boolean typeVarLHS);

      // $FF: synthetic method
      boolean scala$reflect$internal$Types$UntouchableTypeVar$$super$registerBound(final Type tp, final boolean isLowerBound, final boolean isNumericBound);

      default boolean untouchable() {
         return true;
      }

      default boolean isGround() {
         return true;
      }

      default boolean registerTypeEquality(final Type tp, final boolean typeVarLHS) {
         if (tp instanceof TypeVar) {
            TypeVar var3 = (TypeVar)tp;
            if (!var3.untouchable()) {
               return var3.registerTypeEquality((Type)this, !typeVarLHS);
            }
         }

         return this.scala$reflect$internal$Types$UntouchableTypeVar$$super$registerTypeEquality(tp, typeVarLHS);
      }

      default boolean registerBound(final Type tp, final boolean isLowerBound, final boolean isNumericBound) {
         if (tp instanceof TypeVar) {
            TypeVar var4 = (TypeVar)tp;
            if (!var4.untouchable()) {
               return var4.registerBound((Type)this, !isLowerBound, isNumericBound);
            }
         }

         return this.scala$reflect$internal$Types$UntouchableTypeVar$$super$registerBound(tp, isLowerBound, isNumericBound);
      }

      default boolean registerBound$default$3() {
         return false;
      }

      // $FF: synthetic method
      Types scala$reflect$internal$Types$UntouchableTypeVar$$$outer();

      static void $init$(final UntouchableTypeVar $this) {
      }
   }

   public abstract class TypeVar extends Type implements Product, Serializable {
      private final Type origin;
      private TypeConstraints.TypeConstraint constr;
      private final int level;
      private Type _suspended;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public Type origin() {
         return this.origin;
      }

      public TypeConstraints.TypeConstraint constr() {
         return this.constr;
      }

      public void constr_$eq(final TypeConstraints.TypeConstraint x$1) {
         this.constr = x$1;
      }

      public int hashCode() {
         return System.identityHashCode(this);
      }

      public boolean equals(final Object other) {
         return this == other;
      }

      public boolean untouchable() {
         return false;
      }

      public List params() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      public List typeArgs() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      public boolean isHigherKinded() {
         return false;
      }

      public boolean instValid() {
         return this.constr().instValid();
      }

      public Type inst() {
         return this.constr().inst();
      }

      public boolean instWithinBounds() {
         return this.constr().instWithinBounds();
      }

      public boolean isGround() {
         return this.instValid() && this.inst().isGround();
      }

      public int level() {
         return this.level;
      }

      public TypeVar applyArgs(final List newArgs) {
         if (newArgs.isEmpty() && this.typeArgs().isEmpty()) {
            return this;
         } else {
            int var10000 = SeqOps.size$(newArgs);
            List var10001 = this.params();
            if (var10001 == null) {
               throw null;
            } else if (var10000 == SeqOps.size$(var10001)) {
               TypeVar tv = this.scala$reflect$internal$Types$TypeVar$$$outer().TypeVar().apply(this.origin(), this.constr(), newArgs, this.params());
               tv.scala$reflect$internal$Types$$linkSuspended(this);
               if (this.scala$reflect$internal$Types$TypeVar$$$outer().TypeVar() == null) {
                  throw null;
               } else {
                  return tv;
               }
            } else {
               return this.scala$reflect$internal$Types$TypeVar$$$outer().TypeVar().apply(this.typeSymbol()).setInst(this.scala$reflect$internal$Types$TypeVar$$$outer().ErrorType());
            }
         }
      }

      public TypeVar setInst(final Type tp) {
         if (tp != this) {
            this.scala$reflect$internal$Types$TypeVar$$$outer().undoLog().record(this);
            TypeConstraints.TypeConstraint var10000 = this.constr();
            if (this.scala$reflect$internal$Types$TypeVar$$$outer().TypeVar() == null) {
               throw null;
            } else {
               var10000.inst_$eq(tp);
               return this;
            }
         } else {
            this.scala$reflect$internal$Types$TypeVar$$$outer().log(() -> (new StringBuilder(49)).append("TypeVar cycle: called setInst passing ").append(this).append(" to itself.").toString());
            return this;
         }
      }

      public void addLoBound(final Type tp, final boolean isNumericBound) {
         SymbolTable var10000;
         boolean var10001;
         label25: {
            var10000 = this.scala$reflect$internal$Types$TypeVar$$$outer();
            if (tp != null) {
               if (tp.equals(this)) {
                  var10001 = false;
                  break label25;
               }
            }

            var10001 = true;
         }

         boolean assert_assertion = var10001;
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(tp);
            } else {
               assert_this = null;
               if (!this.sharesConstraints(tp)) {
                  this.scala$reflect$internal$Types$TypeVar$$$outer().undoLog().record(this);
                  this.constr().addLoBound(tp, isNumericBound);
               }
            }
         }
      }

      public boolean addLoBound$default$2() {
         return false;
      }

      public void addHiBound(final Type tp, final boolean isNumericBound) {
         if (!this.sharesConstraints(tp)) {
            this.scala$reflect$internal$Types$TypeVar$$$outer().undoLog().record(this);
            this.constr().addHiBound(tp, isNumericBound);
         }
      }

      public boolean addHiBound$default$2() {
         return false;
      }

      public final boolean scala$reflect$internal$Types$$suspended() {
         while(true) {
            Type var1 = this._suspended;
            ConstantType var10000 = this.scala$reflect$internal$Types$TypeVar$$$outer().definitions().ConstantFalse();
            if (var10000 == null) {
               if (var1 == null) {
                  break;
               }
            } else if (var10000.equals(var1)) {
               break;
            }

            var10000 = this.scala$reflect$internal$Types$TypeVar$$$outer().definitions().ConstantTrue();
            if (var10000 == null) {
               if (var1 == null) {
                  return true;
               }
            } else if (var10000.equals(var1)) {
               return true;
            }

            if (!(var1 instanceof TypeVar)) {
               throw new MatchError(var1);
            }

            this = (TypeVar)var1;
         }

         return false;
      }

      public final boolean sharesConstraints(final Type other) {
         if (other instanceof TypeVar) {
            TypeVar var2 = (TypeVar)other;
            TypeConstraints.TypeConstraint var7 = this.constr();
            TypeConstraints.TypeConstraint var3 = var2.constr();
            if (var7 == null) {
               if (var3 == null) {
                  return true;
               }
            } else if (var7.equals(var3)) {
               return true;
            }

            return false;
         } else {
            if (other instanceof PolyType) {
               Type other = ((PolyType)other).resultType();
               if (other instanceof TypeVar) {
                  TypeVar var5 = (TypeVar)other;
                  TypeConstraints.TypeConstraint var10000 = this.constr();
                  TypeConstraints.TypeConstraint var6 = var5.constr();
                  if (var10000 == null) {
                     if (var6 == null) {
                        return true;
                     }
                  } else if (var10000.equals(var6)) {
                     return true;
                  }

                  return false;
               }
            }

            return false;
         }
      }

      public void scala$reflect$internal$Types$$suspended_$eq(final boolean b) {
         this._suspended = b ? this.scala$reflect$internal$Types$TypeVar$$$outer().definitions().ConstantTrue() : this.scala$reflect$internal$Types$TypeVar$$$outer().definitions().ConstantFalse();
      }

      public void scala$reflect$internal$Types$$linkSuspended(final TypeVar origin) {
         this._suspended = origin;
      }

      public boolean registerBound(final Type tp, final boolean isLowerBound, final boolean isNumericBound) {
         if (isLowerBound) {
            SymbolTable var10000;
            boolean var10001;
            label86: {
               var10000 = this.scala$reflect$internal$Types$TypeVar$$$outer();
               if (tp != null) {
                  if (tp.equals(this)) {
                     var10001 = false;
                     break label86;
                  }
               }

               var10001 = true;
            }

            boolean assert_assertion = var10001;
            if (var10000 == null) {
               throw null;
            }

            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError("Lower bound of this type");
            }

            assert_this = null;
         }

         if (this.scala$reflect$internal$Types$$suspended()) {
            return checkSubtype$1(tp, this.origin(), isLowerBound, isNumericBound);
         } else if (this.instValid()) {
            return checkSubtype$1(tp, this.inst(), isLowerBound, isNumericBound);
         } else {
            List var4 = this.unrelatable(tp);
            if (!scala.collection.immutable.Nil..MODULE$.equals(var4)) {
               SymbolTable var18 = this.scala$reflect$internal$Types$TypeVar$$$outer();
               SymbolTable var20 = this.scala$reflect$internal$Types$TypeVar$$$outer();
               if (var20 == null) {
                  throw null;
               } else {
                  Symbols.NoSymbol var21 = var20.NoSymbol();
                  Function2 existentialTransform_creator = (x$46, x$47) -> this.scala$reflect$internal$Types$TypeVar$$$outer().existentialAbstraction(x$46, x$47, !isLowerBound);
                  Symbols.NoSymbol existentialTransform_rawOwner = var21;
                  if (var18 == null) {
                     throw null;
                  } else {
                     var18 = (SymbolTable)ExistentialsAndSkolems.existentialTransform$(var18, var4, tp, existentialTransform_rawOwner, existentialTransform_creator);
                     existentialTransform_rawOwner = null;
                     Object var15 = null;
                     Type existential = (Type)var18;
                     return this.isRelatable(existential) && this.registerBound(existential, isLowerBound, isNumericBound);
                  }
               }
            } else if (!this.unifySimple$1(tp, isLowerBound, isNumericBound) && !this.unifyFull$1(tp, isLowerBound, isNumericBound)) {
               if (isLowerBound) {
                  List var16 = tp.parents();
                  if (var16 == null) {
                     throw null;
                  }

                  List exists_these = var16;

                  while(true) {
                     if (exists_these.isEmpty()) {
                        var17 = false;
                        break;
                     }

                     Type var11 = (Type)exists_these.head();
                     if ($anonfun$registerBound$6(this, isLowerBound, isNumericBound, var11)) {
                        var17 = true;
                        break;
                     }

                     exists_these = (List)exists_these.tail();
                  }

                  Object var13 = null;
                  if (var17 || tp.baseTypeSeq().toIterator().drop(1).exists((bt) -> BoxesRunTime.boxToBoolean($anonfun$registerBound$7(this, tp, isLowerBound, isNumericBound, bt)))) {
                     return true;
                  }
               }

               return false;
            } else {
               return true;
            }
         }
      }

      public boolean registerBound$default$3() {
         return false;
      }

      public boolean registerTypeEquality(final Type tp, final boolean typeVarLHS) {
         if (this.scala$reflect$internal$Types$$suspended()) {
            return tp.$eq$colon$eq(this.origin());
         } else if (this.instValid()) {
            return this.checkIsSameType$1(tp, typeVarLHS);
         } else {
            if (this.isRelatable(tp)) {
               TypeMaps.identityTypeMap$ var10000 = this.scala$reflect$internal$Types$TypeVar$$$outer().identityTypeMap();
               if (var10000 == null) {
                  throw null;
               }

               TypeMaps.identityTypeMap$ apply_this = var10000;
               Type var6 = tp.mapOver(apply_this);
               apply_this = null;
               Type newInst = var6;
               if (this.constr().isWithinBounds(newInst) && this.setInst(newInst).instValid()) {
                  return true;
               }
            }

            return false;
         }
      }

      public boolean registerTypeSelection(final Symbols.Symbol sym, final Type tp) {
         return this.registerBound(this.scala$reflect$internal$Types$TypeVar$$$outer().HasTypeMember().apply(sym.name().toTypeName(), tp), false, this.registerBound$default$3());
      }

      private List unrelatable(final Type tp) {
         this.scala$reflect$internal$Types$TypeVar$$$outer().UnrelatableCollector().barLevel_$eq(this.level());
         return this.scala$reflect$internal$Types$TypeVar$$$outer().UnrelatableCollector().collect(tp);
      }

      public boolean isRelatable(final Type tp) {
         this.scala$reflect$internal$Types$TypeVar$$$outer().IsRelatableCollector().barLevel_$eq(this.level());
         return BoxesRunTime.unboxToBoolean(this.scala$reflect$internal$Types$TypeVar$$$outer().IsRelatableCollector().collect(tp));
      }

      public Type normalize() {
         if (this.instValid()) {
            return this.inst();
         } else {
            return this.isHigherKinded() ? this.etaExpand() : super.normalize();
         }
      }

      public Type etaExpand() {
         if (!this.isHigherKinded()) {
            return this;
         } else {
            SymbolTable var10000 = this.scala$reflect$internal$Types$TypeVar$$$outer();
            Function0 var10001 = () -> (new StringBuilder(15)).append("Normalizing HK ").append(this).toString();
            SymbolTable var10002 = this.scala$reflect$internal$Types$TypeVar$$$outer();
            List var10003 = this.params();
            List var10005 = this.params();
            if (var10005 == null) {
               throw null;
            } else {
               List map_this = var10005;
               Object var13;
               if (map_this == scala.collection.immutable.Nil..MODULE$) {
                  var13 = scala.collection.immutable.Nil..MODULE$;
               } else {
                  .colon.colon map_h = new .colon.colon(((Symbols.Symbol)map_this.head()).typeConstructor(), scala.collection.immutable.Nil..MODULE$);
                  .colon.colon map_t = map_h;

                  for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                     .colon.colon map_nx = new .colon.colon(((Symbols.Symbol)map_rest.head()).typeConstructor(), scala.collection.immutable.Nil..MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var13 = map_h;
               }

               Object var8 = null;
               Object var9 = null;
               Object var10 = null;
               Object var11 = null;
               Object var12 = null;
               Type logResult_result = var10002.typeFun(var10003, this.applyArgs((List)var13));
               Function0 logResult_msg = var10001;
               if (var10000 == null) {
                  throw null;
               } else {
                  var10000.log(SymbolTable::$anonfun$logResult$1);
                  return logResult_result;
               }
            }
         }
      }

      public Symbols.Symbol typeSymbol() {
         return this.origin().typeSymbol();
      }

      private String tparamsOfSym(final Symbols.Symbol sym) {
         Type var2 = sym.info();
         if (var2 instanceof PolyType) {
            List tparams = ((PolyType)var2).typeParams();
            if (!tparams.isEmpty()) {
               Object var10000;
               if (tparams == scala.collection.immutable.Nil..MODULE$) {
                  var10000 = scala.collection.immutable.Nil..MODULE$;
               } else {
                  .colon.colon map_h = new .colon.colon(((Symbols.Symbol)tparams.head()).defString(), scala.collection.immutable.Nil..MODULE$);
                  .colon.colon map_t = map_h;

                  for(List map_rest = (List)tparams.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                     .colon.colon map_nx = new .colon.colon(((Symbols.Symbol)map_rest.head()).defString(), scala.collection.immutable.Nil..MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var10000 = map_h;
               }

               Object var8 = null;
               Object var9 = null;
               Object var10 = null;
               Object var11 = null;
               return IterableOnceOps.mkString$((IterableOnceOps)var10000, "[", ",", "]");
            }
         }

         return "";
      }

      public String originName() {
         return this.origin().typeSymbolDirect().decodedName();
      }

      public String originLocation() {
         Object var18;
         .colon.colon var10000;
         Some var10002;
         .colon.colon var10003;
         Object var10005;
         .colon.colon var10006;
         label40: {
            Symbols.Symbol sym;
            label39: {
               sym = this.origin().typeSymbolDirect();
               Symbols.Symbol encl = sym.owner().logicallyEnclosingMember();
               var10000 = new .colon.colon;
               var10002 = new Some(encl.enclClass());
               var10003 = new .colon.colon;
               var10005 = encl.isMethod() ? new Some(encl) : scala.None..MODULE$;
               var10006 = new .colon.colon;
               if (sym.owner().isTerm()) {
                  Symbols.Symbol var10008 = sym.owner();
                  if (var10008 == null) {
                     break label39;
                  }

                  if (!var10008.equals(encl)) {
                     break label39;
                  }
               }

               var18 = scala.None..MODULE$;
               break label40;
            }

            var18 = new Some(sym.owner());
         }

         var10006.<init>(var18, scala.collection.immutable.Nil..MODULE$);
         var10003.<init>(var10005, var10006);
         var10000.<init>(var10002, var10003);
         List var16 = (List)StrictOptimizedIterableOps.flatten$(var10000, scala..less.colon.less..MODULE$.refl());
         if (var16 == null) {
            throw null;
         } else {
            List map_this = var16;
            Object var17;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               var17 = scala.collection.immutable.Nil..MODULE$;
            } else {
               Symbols.Symbol var9 = (Symbols.Symbol)map_this.head();
               .colon.colon map_h = new .colon.colon($anonfun$originLocation$1(this, var9), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  var9 = (Symbols.Symbol)map_rest.head();
                  .colon.colon map_nx = new .colon.colon($anonfun$originLocation$1(this, var9), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var17 = map_h;
            }

            Object var10 = null;
            Object var11 = null;
            Object var12 = null;
            Object var13 = null;
            Object var14 = null;
            String mkString_sep = "#";
            return ((IterableOnceOps)var17).mkString("", mkString_sep, "");
         }
      }

      private Object levelString() {
         return BoxesRunTime.unboxToBoolean(this.scala$reflect$internal$Types$TypeVar$$$outer().settings().explaintypes().value()) ? this.level() : "";
      }

      public String safeToString() {
         if (this.constr() != null && this.inst() != null) {
            return this.inst() != this.scala$reflect$internal$Types$TypeVar$$$outer().NoType() ? (new StringBuilder(2)).append("=?").append(this.inst()).toString() : (new StringBuilder(0)).append(this.untouchable() ? "!?" : "?").append(this.levelString()).append(this.originName()).toString();
         } else {
            return (new StringBuilder(11)).append("TVar<").append(this.originName()).append("=null>").toString();
         }
      }

      public String originString() {
         return (new StringBuilder(4)).append(this.originName()).append(" in ").append(this.originLocation()).toString();
      }

      public String kind() {
         return "TypeVar";
      }

      public TypeVar cloneInternal() {
         SymbolTable var10000 = this.scala$reflect$internal$Types$TypeVar$$$outer();
         boolean assert_assertion = !this.scala$reflect$internal$Types$$suspended();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(this);
            } else {
               assert_this = null;
               TypeVar$ var5 = this.scala$reflect$internal$Types$TypeVar$$$outer().TypeVar();
               TypeVar trace_value = this.scala$reflect$internal$Types$TypeVar$$$outer().TypeVar().apply(this.origin(), this.constr().cloneInternal(), this.typeArgs(), this.params());
               if (var5 == null) {
                  throw null;
               } else {
                  return trace_value;
               }
            }
         }
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         if (this.constr().instValid()) {
            return map.apply(this.scala$reflect$internal$Types$TypeVar$$$outer().appliedType(this.constr().inst(), this.typeArgs()));
         } else if (map instanceof TypeMaps.VariancedTypeMap) {
            TypeMaps.VariancedTypeMap var2 = (TypeMaps.VariancedTypeMap)map;
            return this.applyArgs(var2.mapOverArgs(this.typeArgs(), this.params()));
         } else {
            List var10001 = this.typeArgs();
            if (var10001 == null) {
               throw null;
            } else {
               List mapConserve_this = var10001;
               List mapConserve_loop$3_pending = mapConserve_this;
               List mapConserve_loop$3_unchanged = mapConserve_this;
               .colon.colon mapConserve_loop$3_mappedLast = null;
               List mapConserve_loop$3_mappedHead = null;

               while(!mapConserve_loop$3_pending.isEmpty()) {
                  Object mapConserve_loop$3_head0 = mapConserve_loop$3_pending.head();
                  Object mapConserve_loop$3_head1 = map.apply(mapConserve_loop$3_head0);
                  if (mapConserve_loop$3_head1 == mapConserve_loop$3_head0) {
                     mapConserve_loop$3_pending = (List)mapConserve_loop$3_pending.tail();
                     mapConserve_loop$3_unchanged = mapConserve_loop$3_unchanged;
                     mapConserve_loop$3_mappedLast = mapConserve_loop$3_mappedLast;
                     mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead;
                  } else {
                     List mapConserve_loop$3_xc = mapConserve_loop$3_unchanged;
                     List mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_mappedHead;

                     .colon.colon mapConserve_loop$3_mappedLast1;
                     for(mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_mappedLast; mapConserve_loop$3_xc != mapConserve_loop$3_pending; mapConserve_loop$3_xc = (List)mapConserve_loop$3_xc.tail()) {
                        .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_xc.head(), scala.collection.immutable.Nil..MODULE$);
                        if (mapConserve_loop$3_mappedHead1 == null) {
                           mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                        }

                        if (mapConserve_loop$3_mappedLast1 != null) {
                           mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                        }

                        mapConserve_loop$3_mappedLast1 = mapConserve_loop$3_next;
                     }

                     .colon.colon mapConserve_loop$3_next = new .colon.colon(mapConserve_loop$3_head1, scala.collection.immutable.Nil..MODULE$);
                     if (mapConserve_loop$3_mappedHead1 == null) {
                        mapConserve_loop$3_mappedHead1 = mapConserve_loop$3_next;
                     }

                     if (mapConserve_loop$3_mappedLast1 != null) {
                        mapConserve_loop$3_mappedLast1.next_$eq(mapConserve_loop$3_next);
                     }

                     List mapConserve_loop$3_tail0 = (List)mapConserve_loop$3_pending.tail();
                     mapConserve_loop$3_pending = mapConserve_loop$3_tail0;
                     mapConserve_loop$3_unchanged = mapConserve_loop$3_tail0;
                     mapConserve_loop$3_mappedLast = mapConserve_loop$3_next;
                     mapConserve_loop$3_mappedHead = mapConserve_loop$3_mappedHead1;
                  }
               }

               Object var31;
               if (mapConserve_loop$3_mappedHead == null) {
                  var31 = mapConserve_loop$3_unchanged;
               } else {
                  mapConserve_loop$3_mappedLast.next_$eq(mapConserve_loop$3_unchanged);
                  var31 = mapConserve_loop$3_mappedHead;
               }

               mapConserve_loop$3_mappedHead = null;
               Object var20 = null;
               Object var21 = null;
               Object var22 = null;
               Object var23 = null;
               Object var24 = null;
               Object var25 = null;
               Object var26 = null;
               Object var27 = null;
               Object var28 = null;
               Object var29 = null;
               Object var30 = null;
               List mapConserve_result = (List)var31;
               Statics.releaseFence();
               var31 = mapConserve_result;
               Object var17 = null;
               mapConserve_result = null;
               return this.applyArgs((List)var31);
            }
         }
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         if (this.constr().instValid()) {
            folder.apply(this.constr().inst());
         } else {
            List var10000 = this.typeArgs();
            if (var10000 == null) {
               throw null;
            } else {
               for(List foreach_these = var10000; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
                  folder.apply(foreach_these.head());
               }

            }
         }
      }

      public String productPrefix() {
         return "TypeVar";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.origin();
            case 1:
               return this.constr();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof TypeVar;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "origin";
            case 1:
               return "constr";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$TypeVar$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public static final String $anonfun$applyArgs$1(final TypeVar $this, final List newArgs$1) {
         StringBuilder var10000 = (new StringBuilder(20)).append("In ").append($this.originLocation()).append(", apply args ");
         String mkString_sep = ", ";
         if (newArgs$1 == null) {
            throw null;
         } else {
            String mkString_end = "";
            String mkString_start = "";
            String var10001 = IterableOnceOps.mkString$(newArgs$1, mkString_start, mkString_sep, mkString_end);
            Object var6 = null;
            Object var7 = null;
            Object var5 = null;
            return var10000.append(var10001).append(" to ").append($this.originName()).toString();
         }
      }

      // $FF: synthetic method
      public static final String $anonfun$setInst$1(final TypeVar $this, final Type tp$4) {
         return (new StringBuilder(6)).append("In ").append($this.originLocation()).append(", ").append($this.originName()).append("=").append(tp$4).toString();
      }

      // $FF: synthetic method
      public static final Type $anonfun$addLoBound$1(final Type tp$5) {
         return tp$5;
      }

      // $FF: synthetic method
      public static final String $anonfun$registerBound$1() {
         return "Lower bound of this type";
      }

      private final void addBound$1(final Type tp, final boolean isLowerBound$1, final boolean isNumericBound$1) {
         if (isLowerBound$1) {
            this.addLoBound(tp, isNumericBound$1);
         } else {
            this.addHiBound(tp, isNumericBound$1);
         }
      }

      private static final boolean checkSubtype$1(final Type tp1, final Type tp2, final boolean isLowerBound$1, final boolean isNumericBound$1) {
         Type lhs = isLowerBound$1 ? tp1 : tp2;
         Type rhs = isLowerBound$1 ? tp2 : tp1;
         return isNumericBound$1 ? lhs.weak_$less$colon$less(rhs) : lhs.$less$colon$less(rhs);
      }

      private final boolean unifySimple$1(final Type tp$6, final boolean isLowerBound$1, final boolean isNumericBound$1) {
         SymbolTable var10000 = this.scala$reflect$internal$Types$TypeVar$$$outer();
         if (var10000 == null) {
            throw null;
         } else if (var10000.typeIsNothing(tp$6)) {
            this.addBound$1(this.scala$reflect$internal$Types$TypeVar$$$outer().definitions().NothingTpe(), isLowerBound$1, isNumericBound$1);
            return true;
         } else {
            var10000 = this.scala$reflect$internal$Types$TypeVar$$$outer();
            if (var10000 == null) {
               throw null;
            } else if (var10000.typeIsAnyExactly(tp$6)) {
               this.addBound$1(this.scala$reflect$internal$Types$TypeVar$$$outer().definitions().AnyTpe(), isLowerBound$1, isNumericBound$1);
               return true;
            } else if (this.params().isEmpty()) {
               this.addBound$1(tp$6, isLowerBound$1, isNumericBound$1);
               return true;
            } else {
               return false;
            }
         }
      }

      // $FF: synthetic method
      public static final boolean $anonfun$registerBound$2(final TypeVar $this, final Symbols.Symbol l, final Symbols.Symbol r) {
         return !$this.unifiableKinds$1(l.typeParams(), r.typeParams());
      }

      private final boolean unifiableKinds$1(final List lhs, final List rhs) {
         SymbolTable var10000 = this.scala$reflect$internal$Types$TypeVar$$$outer();
         if (var10000 == null) {
            throw null;
         } else {
            if (Collections.sameLength$(var10000, lhs, rhs)) {
               if (this.scala$reflect$internal$Types$TypeVar$$$outer() == null) {
                  throw null;
               }

               List exists2_ys1 = lhs;

               label32: {
                  for(List exists2_ys2 = rhs; !exists2_ys1.isEmpty() && !exists2_ys2.isEmpty(); exists2_ys2 = (List)exists2_ys2.tail()) {
                     var10000 = (SymbolTable)exists2_ys1.head();
                     Symbols.Symbol var6 = (Symbols.Symbol)exists2_ys2.head();
                     Symbols.Symbol var5 = (Symbols.Symbol)var10000;
                     if ($anonfun$registerBound$2(this, var5, var6)) {
                        var10 = true;
                        break label32;
                     }

                     exists2_ys1 = (List)exists2_ys1.tail();
                  }

                  var10 = false;
               }

               Object var7 = null;
               Object var8 = null;
               if (!var10) {
                  return true;
               }
            }

            return false;
         }
      }

      // $FF: synthetic method
      public static final Symbols.Symbol $anonfun$registerBound$3(final Symbols.Symbol tpSym$1, final Symbols.Symbol x$44) {
         return x$44.cloneSymbol(tpSym$1);
      }

      // $FF: synthetic method
      public static final Type $anonfun$registerBound$4(final Symbols.Symbol x$45) {
         return x$45.tpeHK();
      }

      private final boolean unifySpecific$1(final Type tp, final boolean isLowerBound$1, final boolean isNumericBound$1) {
         List tpTypeArgs = tp.typeArgs();
         int numCaptured = tpTypeArgs.length() - this.typeArgs().length();
         Symbols.Symbol tpSym = tp.typeSymbolDirect();
         List var10000 = tpSym.typeParams();
         if (var10000 == null) {
            throw null;
         } else {
            List abstractedTypeParams = (List)StrictOptimizedLinearSeqOps.drop$(var10000, numCaptured);
            if (!this.unifiableKinds$1(this.typeSymbolDirect().typeParams(), abstractedTypeParams)) {
               return false;
            } else if (numCaptured == 0) {
               List lhs = isLowerBound$1 ? tpTypeArgs : this.typeArgs();
               List rhs = isLowerBound$1 ? this.typeArgs() : tpTypeArgs;
               if (this.scala$reflect$internal$Types$TypeVar$$$outer().isSubArgs(lhs, rhs, this.params(), Depth$.MODULE$.AnyDepth())) {
                  this.addBound$1(tp.typeConstructor(), isLowerBound$1, isNumericBound$1);
                  return true;
               } else {
                  return false;
               }
            } else if (numCaptured > 0) {
               List abstractedArgs = (List)StrictOptimizedLinearSeqOps.drop$(tpTypeArgs, numCaptured);
               List var10001;
               if (isLowerBound$1) {
                  var10000 = abstractedArgs;
                  var10001 = this.typeArgs();
               } else {
                  var10000 = this.typeArgs();
                  var10001 = abstractedArgs;
               }

               List var23 = var10001;
               List lhs = var10000;
               if (this.scala$reflect$internal$Types$TypeVar$$$outer().isSubArgs(lhs, var23, this.params(), Depth$.MODULE$.AnyDepth())) {
                  List captured = tpTypeArgs.take(numCaptured);
                  if (abstractedTypeParams == null) {
                     throw null;
                  } else {
                     Object var34;
                     if (abstractedTypeParams == scala.collection.immutable.Nil..MODULE$) {
                        var34 = scala.collection.immutable.Nil..MODULE$;
                     } else {
                        .colon.colon map_h = new .colon.colon(((Symbols.Symbol)abstractedTypeParams.head()).cloneSymbol(tpSym), scala.collection.immutable.Nil..MODULE$);
                        .colon.colon map_t = map_h;

                        for(List map_rest = (List)abstractedTypeParams.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                           .colon.colon map_nx = new .colon.colon(((Symbols.Symbol)map_rest.head()).cloneSymbol(tpSym), scala.collection.immutable.Nil..MODULE$);
                           map_t.next_$eq(map_nx);
                           map_t = map_nx;
                        }

                        Statics.releaseFence();
                        var34 = map_h;
                     }

                     Object var25 = null;
                     Object var26 = null;
                     Object var27 = null;
                     Object var28 = null;
                     List clonedParams = (List)var34;
                     PolyType var35 = new PolyType;
                     SymbolTable var10003 = this.scala$reflect$internal$Types$TypeVar$$$outer();
                     SymbolTable var10005 = this.scala$reflect$internal$Types$TypeVar$$$outer();
                     Type var10006 = tp.typeConstructor();
                     Object var10008;
                     if (clonedParams == scala.collection.immutable.Nil..MODULE$) {
                        var10008 = scala.collection.immutable.Nil..MODULE$;
                     } else {
                        .colon.colon map_h = new .colon.colon(((Symbols.Symbol)clonedParams.head()).tpeHK(), scala.collection.immutable.Nil..MODULE$);
                        .colon.colon map_t = map_h;

                        for(List map_rest = (List)clonedParams.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                           .colon.colon map_nx = new .colon.colon(((Symbols.Symbol)map_rest.head()).tpeHK(), scala.collection.immutable.Nil..MODULE$);
                           map_t.next_$eq(map_nx);
                           map_t = map_nx;
                        }

                        Statics.releaseFence();
                        var10008 = map_h;
                     }

                     Object var29 = null;
                     Object var30 = null;
                     Object var31 = null;
                     Object var32 = null;
                     Object $plus$plus_suffix = var10008;
                     if (captured == null) {
                        throw null;
                     } else {
                        List var10007 = captured.appendedAll((IterableOnce)$plus$plus_suffix);
                        $plus$plus_suffix = null;
                        var35.<init>(clonedParams, var10005.appliedType(var10006, var10007));
                        this.addBound$1(var35, isLowerBound$1, isNumericBound$1);
                        return true;
                     }
                  }
               } else {
                  return false;
               }
            } else {
               return false;
            }
         }
      }

      // $FF: synthetic method
      public static final boolean $anonfun$registerBound$5(final TypeVar $this, final boolean isLowerBound$1, final boolean isNumericBound$1, final Type tp) {
         return $this.unifySpecific$1(tp, isLowerBound$1, isNumericBound$1);
      }

      private final boolean unifyFull$1(final Type tpe, final boolean isLowerBound$1, final boolean isNumericBound$1) {
         List var10000 = tpe.dealiasWidenChain();
         if (var10000 == null) {
            throw null;
         } else {
            for(List exists_these = var10000; !exists_these.isEmpty(); exists_these = (List)exists_these.tail()) {
               Type var5 = (Type)exists_these.head();
               if ($anonfun$registerBound$5(this, isLowerBound$1, isNumericBound$1, var5)) {
                  return true;
               }
            }

            return false;
         }
      }

      // $FF: synthetic method
      public static final boolean $anonfun$registerBound$6(final TypeVar $this, final boolean isLowerBound$1, final boolean isNumericBound$1, final Type tpe) {
         return $this.unifyFull$1(tpe, isLowerBound$1, isNumericBound$1);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$registerBound$7(final TypeVar $this, final Type tp$6, final boolean isLowerBound$1, final boolean isNumericBound$1, final Type bt) {
         return !tp$6.parents().contains(bt) && $this.unifyFull$1(bt, isLowerBound$1, isNumericBound$1);
      }

      private final boolean checkIsSameType$1(final Type tp, final boolean typeVarLHS$1) {
         return typeVarLHS$1 ? this.inst().$eq$colon$eq(tp) : tp.$eq$colon$eq(this.inst());
      }

      // $FF: synthetic method
      public static final Type $anonfun$etaExpand$5(final Symbols.Symbol x$48) {
         return x$48.typeConstructor();
      }

      // $FF: synthetic method
      public static final String $anonfun$tparamsOfSym$1(final Symbols.Symbol x$49) {
         return x$49.defString();
      }

      // $FF: synthetic method
      public static final String $anonfun$originLocation$1(final TypeVar $this, final Symbols.Symbol s) {
         return (new StringBuilder(0)).append(s.decodedName()).append($this.tparamsOfSym(s)).toString();
      }

      // $FF: synthetic method
      public static final TypeVar $anonfun$cloneInternal$1(final TypeVar $this) {
         return $this;
      }

      // $FF: synthetic method
      public static final String $anonfun$cloneInternal$2(final TypeVar $this) {
         return $this.originLocation();
      }

      public TypeVar(final Type origin, final TypeConstraints.TypeConstraint constr) {
         this.origin = origin;
         this.constr = constr;
         super();
         this.level = Types.this.skolemizationLevel();
         this._suspended = Types.this.definitions().ConstantFalse();
      }

      // $FF: synthetic method
      public static final Object $anonfun$registerBound$6$adapted(final TypeVar $this, final boolean isLowerBound$1, final boolean isNumericBound$1, final Type tpe) {
         return BoxesRunTime.boxToBoolean($anonfun$registerBound$6($this, isLowerBound$1, isNumericBound$1, tpe));
      }

      // $FF: synthetic method
      public static final Object $anonfun$registerBound$2$adapted(final TypeVar $this, final Symbols.Symbol l, final Symbols.Symbol r) {
         return BoxesRunTime.boxToBoolean($anonfun$registerBound$2($this, l, r));
      }

      // $FF: synthetic method
      public static final Object $anonfun$registerBound$5$adapted(final TypeVar $this, final boolean isLowerBound$1, final boolean isNumericBound$1, final Type tp) {
         return BoxesRunTime.boxToBoolean($anonfun$registerBound$5($this, isLowerBound$1, isNumericBound$1, tp));
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class AnnotatedType extends Type implements RewrappingTypeProxy, scala.reflect.api.Types.AnnotatedTypeApi, Product, Serializable {
      private final List annotations;
      private final Type underlying;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public Type maybeRewrap(final Type newtp) {
         return Types.RewrappingTypeProxy.super.maybeRewrap(newtp);
      }

      public Type widen() {
         return Types.RewrappingTypeProxy.super.widen();
      }

      public Type narrow() {
         return Types.RewrappingTypeProxy.super.narrow();
      }

      public Type deconst() {
         return Types.RewrappingTypeProxy.super.deconst();
      }

      public Type resultType() {
         return Types.RewrappingTypeProxy.super.resultType();
      }

      public Type resultType(final List actuals) {
         return Types.RewrappingTypeProxy.super.resultType(actuals);
      }

      public int paramSectionCount() {
         return Types.RewrappingTypeProxy.super.paramSectionCount();
      }

      public List paramss() {
         return Types.RewrappingTypeProxy.super.paramss();
      }

      public List params() {
         return Types.RewrappingTypeProxy.super.params();
      }

      public List paramTypes() {
         return Types.RewrappingTypeProxy.super.paramTypes();
      }

      public List typeArgs() {
         return Types.RewrappingTypeProxy.super.typeArgs();
      }

      public Type skolemizeExistential(final Symbols.Symbol owner, final Object origin) {
         return Types.RewrappingTypeProxy.super.skolemizeExistential(owner, origin);
      }

      public Type normalize() {
         return Types.RewrappingTypeProxy.super.normalize();
      }

      public Type etaExpand() {
         return Types.RewrappingTypeProxy.super.etaExpand();
      }

      public Type dealias() {
         return Types.RewrappingTypeProxy.super.dealias();
      }

      public Type cloneInfo(final Symbols.Symbol owner) {
         return Types.RewrappingTypeProxy.super.cloneInfo(owner);
      }

      public Type atOwner(final Symbols.Symbol owner) {
         return Types.RewrappingTypeProxy.super.atOwner(owner);
      }

      public String prefixString() {
         return Types.RewrappingTypeProxy.super.prefixString();
      }

      public boolean isComplete() {
         return Types.RewrappingTypeProxy.super.isComplete();
      }

      public void complete(final Symbols.Symbol sym) {
         Types.RewrappingTypeProxy.super.complete(sym);
      }

      public void load(final Symbols.Symbol sym) {
         Types.RewrappingTypeProxy.super.load(sym);
      }

      public boolean isHigherKinded() {
         return Types.SimpleTypeProxy.super.isHigherKinded();
      }

      public Type typeConstructor() {
         return Types.SimpleTypeProxy.super.typeConstructor();
      }

      public boolean isError() {
         return Types.SimpleTypeProxy.super.isError();
      }

      public boolean isErroneous() {
         return Types.SimpleTypeProxy.super.isErroneous();
      }

      public Symbols.Symbol termSymbol() {
         return Types.SimpleTypeProxy.super.termSymbol();
      }

      public Symbols.Symbol termSymbolDirect() {
         return Types.SimpleTypeProxy.super.termSymbolDirect();
      }

      public List typeParams() {
         return Types.SimpleTypeProxy.super.typeParams();
      }

      public Symbols.Symbol typeSymbol() {
         return Types.SimpleTypeProxy.super.typeSymbol();
      }

      public Symbols.Symbol typeSymbolDirect() {
         return Types.SimpleTypeProxy.super.typeSymbolDirect();
      }

      public Type typeOfThis() {
         return Types.SimpleTypeProxy.super.typeOfThis();
      }

      public List parents() {
         return Types.SimpleTypeProxy.super.parents();
      }

      public Type prefix() {
         return Types.SimpleTypeProxy.super.prefix();
      }

      public Type prefixDirect() {
         return Types.SimpleTypeProxy.super.prefixDirect();
      }

      public Scopes.Scope decls() {
         return Types.SimpleTypeProxy.super.decls();
      }

      public Type baseType(final Symbols.Symbol clazz) {
         return Types.SimpleTypeProxy.super.baseType(clazz);
      }

      public int baseTypeSeqDepth() {
         return Types.SimpleTypeProxy.super.baseTypeSeqDepth();
      }

      public List baseClasses() {
         return Types.SimpleTypeProxy.super.baseClasses();
      }

      public List annotations() {
         return this.annotations;
      }

      public Type underlying() {
         return this.underlying;
      }

      public AnnotatedType rewrap(final Type tp) {
         List x$2 = this.copy$default$1();
         return this.copy(x$2, tp);
      }

      public boolean isTrivial() {
         if (this.underlying().isTrivial()) {
            List var10000 = this.annotations();
            if (var10000 == null) {
               throw null;
            }

            List forall_these = var10000;

            while(true) {
               if (forall_these.isEmpty()) {
                  var3 = true;
                  break;
               }

               if (!((AnnotationInfos.AnnotationInfo)forall_these.head()).isTrivial()) {
                  var3 = false;
                  break;
               }

               forall_these = (List)forall_these.tail();
            }

            Object var2 = null;
            if (var3) {
               return true;
            }
         }

         return false;
      }

      public String safeToString() {
         boolean wrap = this.isShowAsInfixType() || this.scala$reflect$internal$Types$AnnotatedType$$$outer().definitions().isFunctionTypeDirect(this);
         ChainingOps var10000 = scala.util.ChainingOps..MODULE$;
         package.chaining var10 = scala.util.package.chaining..MODULE$;
         Object scalaUtilChainingOps_a = this.underlying().toString();
         Object var11 = scalaUtilChainingOps_a;
         scalaUtilChainingOps_a = null;
         Object pipe$extension_$this = var11;
         String var12 = $anonfun$safeToString$4(wrap, (String)pipe$extension_$this);
         pipe$extension_$this = null;
         String ul = var12;
         List var13 = this.annotations();
         String var10001 = (new StringBuilder(2)).append(ul).append(" @").toString();
         String mkString_end = "";
         String mkString_sep = " @";
         String mkString_start = var10001;
         if (var13 == null) {
            throw null;
         } else {
            return IterableOnceOps.mkString$(var13, mkString_start, mkString_sep, mkString_end);
         }
      }

      public Type filterAnnotations(final Function1 p) {
         List var10000 = this.annotations();
         if (var10000 == null) {
            throw null;
         } else {
            List partition_this = var10000;
            Tuple2 var23;
            if (partition_this.isEmpty()) {
               var23 = scala.collection.immutable.List..MODULE$.scala$collection$immutable$List$$TupleOfNil();
            } else {
               Builder partition_partition_l = partition_this.newSpecificBuilder();
               Builder partition_partition_r = partition_this.newSpecificBuilder();
               partition_this.iterator().foreach(StrictOptimizedIterableOps::$anonfun$partition$1);
               Object var10002 = partition_partition_l.result();
               Object var12 = partition_partition_r.result();
               Object var11 = var10002;
               var23 = new Tuple2(var11, var12);
               Object var17 = null;
               Object var19 = null;
               Tuple2 var6 = var23;
               List var7 = (List)var11;
               if (scala.collection.immutable.Nil..MODULE$.equals(var7)) {
                  var23 = new Tuple2(scala.collection.immutable.Nil..MODULE$, partition_this);
               } else {
                  List var8 = (List)var12;
                  var23 = scala.collection.immutable.Nil..MODULE$.equals(var8) ? new Tuple2(partition_this, scala.collection.immutable.Nil..MODULE$) : var6;
               }
            }

            Object var13 = null;
            Object var14 = null;
            Object var15 = null;
            Object var16 = null;
            Object var18 = null;
            Object var20 = null;
            Object var21 = null;
            Object var22 = null;
            Tuple2 var2 = var23;
            if (var2 != null) {
               List yes = (List)var2._1();
               List no = (List)var2._2();
               if (yes.isEmpty()) {
                  return this.underlying();
               } else {
                  return no.isEmpty() ? this : this.copy(yes, this.copy$default$2());
               }
            } else {
               throw new MatchError((Object)null);
            }
         }
      }

      public Type setAnnotations(final List annots) {
         return (Type)(annots.isEmpty() ? this.underlying() : this.copy(annots, this.copy$default$2()));
      }

      public Type withAnnotations(final List annots) {
         return annots.isEmpty() ? this : this.copy(this.annotations().$colon$colon$colon(annots), this.copy$default$2());
      }

      public Type withAnnotation(final AnnotationInfos.AnnotationInfo anno) {
         List var10001 = this.annotations();
         if (var10001 == null) {
            throw null;
         } else {
            List $colon$colon_this = var10001;
            .colon.colon var4 = new .colon.colon(anno, $colon$colon_this);
            Object var3 = null;
            return this.copy(var4, this.copy$default$2());
         }
      }

      public Type withoutAnnotations() {
         return this.underlying().withoutAnnotations();
      }

      public TypeBounds bounds() {
         TypeBounds var1 = this.underlying().bounds();
         return var1 != null && var1.lo() == this && var1.hi() == this ? this.scala$reflect$internal$Types$AnnotatedType$$$outer().TypeBounds().apply(this, this) : var1;
      }

      public Type lowerBound() {
         return this.bounds().lo();
      }

      public Type upperBound() {
         return this.bounds().hi();
      }

      public Type instantiateTypeParams(final List formals, final List actuals) {
         List var10000 = this.annotations();
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            Object var17;
            if (map_this == scala.collection.immutable.Nil..MODULE$) {
               var17 = scala.collection.immutable.Nil..MODULE$;
            } else {
               AnnotationInfos.AnnotationInfo var10 = (AnnotationInfos.AnnotationInfo)map_this.head();
               .colon.colon map_h = new .colon.colon($anonfun$instantiateTypeParams$2(this, formals, actuals, var10), scala.collection.immutable.Nil..MODULE$);
               .colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                  var10 = (AnnotationInfos.AnnotationInfo)map_rest.head();
                  .colon.colon map_nx = new .colon.colon($anonfun$instantiateTypeParams$2(this, formals, actuals, var10), scala.collection.immutable.Nil..MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var17 = map_h;
            }

            Object var11 = null;
            Object var12 = null;
            Object var13 = null;
            Object var14 = null;
            Object var15 = null;
            List annotations1 = (List)var17;
            Type underlying1 = this.underlying().instantiateTypeParams(formals, actuals);
            return annotations1 == this.annotations() && underlying1 == this.underlying() ? this : this.scala$reflect$internal$Types$AnnotatedType$$$outer().new AnnotatedType(annotations1, underlying1);
         }
      }

      public BaseTypeSeqs.BaseTypeSeq baseTypeSeq() {
         BaseTypeSeqs.BaseTypeSeq oftp = this.underlying().baseTypeSeq();
         return oftp.length() == 1 && oftp.apply(0) == this.underlying() ? this.scala$reflect$internal$Types$AnnotatedType$$$outer().baseTypeSingletonSeq(this) : oftp;
      }

      public String kind() {
         return "AnnotatedType";
      }

      public Type mapOver(final TypeMaps.TypeMap map) {
         List annotations1 = map.mapOverAnnotations(this.annotations());
         Type underlying1 = map.apply(this.underlying());
         if (annotations1 == this.annotations() && underlying1 == this.underlying()) {
            return this;
         } else {
            return (Type)(annotations1.isEmpty() ? underlying1 : this.scala$reflect$internal$Types$AnnotatedType$$$outer().new AnnotatedType(annotations1, underlying1));
         }
      }

      public void foldOver(final TypeMaps.TypeFolder folder) {
         folder.foldOverAnnotations(this.annotations());
         folder.apply(this.underlying());
      }

      public AnnotatedType copy(final List annotations, final Type underlying) {
         return this.scala$reflect$internal$Types$AnnotatedType$$$outer().new AnnotatedType(annotations, underlying);
      }

      public List copy$default$1() {
         return this.annotations();
      }

      public Type copy$default$2() {
         return this.underlying();
      }

      public String productPrefix() {
         return "AnnotatedType";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.annotations();
            case 1:
               return this.underlying();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof AnnotatedType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "annotations";
            case 1:
               return "underlying";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof AnnotatedType && ((AnnotatedType)x$1).scala$reflect$internal$Types$AnnotatedType$$$outer() == this.scala$reflect$internal$Types$AnnotatedType$$$outer()) {
               AnnotatedType var2 = (AnnotatedType)x$1;
               List var10000 = this.annotations();
               List var3 = var2.annotations();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               Type var5 = this.underlying();
               Type var4 = var2.underlying();
               if (var5 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var5.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$AnnotatedType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$RewrappingTypeProxy$$$outer() {
         return this.scala$reflect$internal$Types$AnnotatedType$$$outer();
      }

      // $FF: synthetic method
      public Types scala$reflect$internal$Types$SimpleTypeProxy$$$outer() {
         return this.scala$reflect$internal$Types$AnnotatedType$$$outer();
      }

      // $FF: synthetic method
      public static final String $anonfun$new$8(final AnnotatedType $this) {
         return String.valueOf($this.underlying());
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isTrivial$1(final AnnotationInfos.AnnotationInfo x$50) {
         return x$50.isTrivial();
      }

      // $FF: synthetic method
      public static final String $anonfun$safeToString$4(final boolean wrap$1, final String s) {
         return wrap$1 ? (new StringBuilder(2)).append("(").append(s).append(")").toString() : s;
      }

      // $FF: synthetic method
      public static final AnnotationInfos.AnnotationInfo $anonfun$instantiateTypeParams$2(final AnnotatedType $this, final List formals$3, final List actuals$1, final AnnotationInfos.AnnotationInfo info) {
         return $this.scala$reflect$internal$Types$AnnotatedType$$$outer().AnnotationInfo().apply(info.atp().instantiateTypeParams(formals$3, actuals$1), info.args(), info.assocs()).setPos(info.pos());
      }

      public AnnotatedType(final List annotations, final Type underlying) {
         this.annotations = annotations;
         this.underlying = underlying;
         boolean assert_assertion = !annotations.isEmpty();
         if (Types.this == null) {
            throw null;
         } else if (!assert_assertion) {
            throw Types.this.throwAssertionError($anonfun$new$8(this));
         }
      }

      // $FF: synthetic method
      public static final Object $anonfun$isTrivial$1$adapted(final AnnotationInfos.AnnotationInfo x$50) {
         return BoxesRunTime.boxToBoolean($anonfun$isTrivial$1(x$50));
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return var0.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class AnnotatedType$ extends scala.reflect.api.Types.AnnotatedTypeExtractor implements Serializable {
      public AnnotatedType apply(final List annotations, final Type underlying) {
         return this.scala$reflect$internal$Types$AnnotatedType$$$outer().new AnnotatedType(annotations, underlying);
      }

      public Option unapply(final AnnotatedType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.annotations(), x$0.underlying())));
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$AnnotatedType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public class StaticallyAnnotatedType$ {
      public Option unapply(final Type tp) {
         List var2 = tp.staticAnnotations();
         return (Option)(scala.collection.immutable.Nil..MODULE$.equals(var2) ? scala.None..MODULE$ : new Some(new Tuple2(var2, tp.withoutAnnotations())));
      }
   }

   public class NamedType extends Type implements Product, Serializable {
      private final Names.Name name;
      private final Type tp;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public Names.Name name() {
         return this.name;
      }

      public Type tp() {
         return this.tp;
      }

      public String safeToString() {
         return (new StringBuilder(2)).append(this.name().toString()).append(": ").append(this.tp()).toString();
      }

      public NamedType copy(final Names.Name name, final Type tp) {
         return this.scala$reflect$internal$Types$NamedType$$$outer().new NamedType(name, tp);
      }

      public Names.Name copy$default$1() {
         return this.name();
      }

      public Type copy$default$2() {
         return this.tp();
      }

      public String productPrefix() {
         return "NamedType";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.name();
            case 1:
               return this.tp();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof NamedType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "name";
            case 1:
               return "tp";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof NamedType && ((NamedType)x$1).scala$reflect$internal$Types$NamedType$$$outer() == this.scala$reflect$internal$Types$NamedType$$$outer()) {
               NamedType var2 = (NamedType)x$1;
               Names.Name var10000 = this.name();
               Names.Name var3 = var2.name();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               Type var5 = this.tp();
               Type var4 = var2.tp();
               if (var5 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var5.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$NamedType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public NamedType(final Names.Name name, final Type tp) {
         this.name = name;
         this.tp = tp;
      }
   }

   public class NamedType$ extends AbstractFunction2 implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public final String toString() {
         return "NamedType";
      }

      public NamedType apply(final Names.Name name, final Type tp) {
         return this.$outer.new NamedType(name, tp);
      }

      public Option unapply(final NamedType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.name(), x$0.tp())));
      }

      public NamedType$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class RepeatedType extends Type implements Product, Serializable {
      private final Type tp;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public Type tp() {
         return this.tp;
      }

      public String safeToString() {
         return (new StringBuilder(4)).append(this.tp().toString()).append(": _*").toString();
      }

      public RepeatedType copy(final Type tp) {
         return this.scala$reflect$internal$Types$RepeatedType$$$outer().new RepeatedType(tp);
      }

      public Type copy$default$1() {
         return this.tp();
      }

      public String productPrefix() {
         return "RepeatedType";
      }

      public int productArity() {
         return 1;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.tp();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof RepeatedType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "tp";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof RepeatedType && ((RepeatedType)x$1).scala$reflect$internal$Types$RepeatedType$$$outer() == this.scala$reflect$internal$Types$RepeatedType$$$outer()) {
               RepeatedType var2 = (RepeatedType)x$1;
               Type var10000 = this.tp();
               Type var3 = var2.tp();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$RepeatedType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public RepeatedType(final Type tp) {
         this.tp = tp;
      }
   }

   public class RepeatedType$ extends AbstractFunction1 implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public final String toString() {
         return "RepeatedType";
      }

      public RepeatedType apply(final Type tp) {
         return this.$outer.new RepeatedType(tp);
      }

      public Option unapply(final RepeatedType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(x$0.tp()));
      }

      public RepeatedType$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public abstract class ErasedValueType extends UniqueType implements Serializable {
      private final Symbols.Symbol valueClazz;
      private final Type erasedUnderlying;

      public Symbols.Symbol valueClazz() {
         return this.valueClazz;
      }

      public Type erasedUnderlying() {
         return this.erasedUnderlying;
      }

      public String safeToString() {
         return (new StringBuilder(19)).append("ErasedValueType(").append(this.valueClazz()).append(", ").append(this.erasedUnderlying()).append(")").toString();
      }

      public String productPrefix() {
         return "ErasedValueType";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.valueClazz();
            case 1:
               return this.erasedUnderlying();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof ErasedValueType;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "valueClazz";
            case 1:
               return "erasedUnderlying";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof ErasedValueType && ((ErasedValueType)x$1).scala$reflect$internal$Types$ErasedValueType$$$outer() == this.scala$reflect$internal$Types$ErasedValueType$$$outer()) {
               ErasedValueType var2 = (ErasedValueType)x$1;
               Symbols.Symbol var10000 = this.valueClazz();
               Symbols.Symbol var3 = var2.valueClazz();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               Type var5 = this.erasedUnderlying();
               Type var4 = var2.erasedUnderlying();
               if (var5 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var5.equals(var4)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ErasedValueType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public ErasedValueType(final Symbols.Symbol valueClazz, final Type erasedUnderlying) {
         this.valueClazz = valueClazz;
         this.erasedUnderlying = erasedUnderlying;
      }
   }

   public final class UniqueErasedValueType extends ErasedValueType {
      public UniqueErasedValueType(final Symbols.Symbol valueClazz, final Type erasedUnderlying) {
         super(valueClazz, erasedUnderlying);
      }
   }

   public class ErasedValueType$ implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public Type apply(final Symbols.Symbol valueClazz, final Type erasedUnderlying) {
         SymbolTable var10000 = this.$outer;
         boolean assert_assertion = valueClazz != this.$outer.NoSymbol();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError("ErasedValueType over NoSymbol");
            } else {
               assert_this = null;
               return this.$outer.unique(this.$outer.new UniqueErasedValueType(valueClazz, erasedUnderlying));
            }
         }
      }

      public Option unapply(final ErasedValueType x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2(x$0.valueClazz(), x$0.erasedUnderlying())));
      }

      // $FF: synthetic method
      public static final String $anonfun$apply$5() {
         return "ErasedValueType over NoSymbol";
      }

      public ErasedValueType$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public abstract class LazyType extends Type {
      public boolean isComplete() {
         return false;
      }

      public abstract void complete(final Symbols.Symbol sym);

      public String safeToString() {
         return "<?>";
      }

      public String kind() {
         return "LazyType";
      }

      public boolean isJavaVarargsMethod() {
         return false;
      }

      public List javaThrownExceptions() {
         return scala.collection.immutable.Nil..MODULE$;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$LazyType$$$outer() {
         return (SymbolTable)this.$outer;
      }
   }

   public abstract class LazyPolyType extends LazyType {
      private final List typeParams;

      public List typeParams() {
         return this.typeParams;
      }

      public String safeToString() {
         return (new StringBuilder(0)).append(this.typeParams().isEmpty() ? "" : this.scala$reflect$internal$Types$LazyPolyType$$$outer().typeParamsString(this)).append(super.safeToString()).toString();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$LazyPolyType$$$outer() {
         return (SymbolTable)this.$outer;
      }

      public LazyPolyType(final List typeParams) {
         this.typeParams = typeParams;
      }
   }

   public class GenPolyType$ {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public Type apply(final List tparams, final Type tpe) {
         return (Type)(tparams.isEmpty() ? tpe : this.$outer.new PolyType(tparams, tpe));
      }

      public Some unapply(final Type tpe) {
         if (tpe instanceof PolyType) {
            PolyType var2 = (PolyType)tpe;
            List tparams = var2.typeParams();
            Type restpe = var2.resultType();
            return new Some(new Tuple2(tparams, restpe));
         } else {
            return new Some(new Tuple2(scala.collection.immutable.Nil..MODULE$, tpe));
         }
      }

      public GenPolyType$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class TypeUnwrapper implements Function1 {
      private final boolean poly;
      private final boolean existential;
      private final boolean annotated;
      private final boolean nullary;
      // $FF: synthetic field
      public final SymbolTable $outer;

      public boolean apply$mcZD$sp(final double v1) {
         return Function1.apply$mcZD$sp$(this, v1);
      }

      public double apply$mcDD$sp(final double v1) {
         return Function1.apply$mcDD$sp$(this, v1);
      }

      public float apply$mcFD$sp(final double v1) {
         return Function1.apply$mcFD$sp$(this, v1);
      }

      public int apply$mcID$sp(final double v1) {
         return Function1.apply$mcID$sp$(this, v1);
      }

      public long apply$mcJD$sp(final double v1) {
         return Function1.apply$mcJD$sp$(this, v1);
      }

      public void apply$mcVD$sp(final double v1) {
         Function1.apply$mcVD$sp$(this, v1);
      }

      public boolean apply$mcZF$sp(final float v1) {
         return Function1.apply$mcZF$sp$(this, v1);
      }

      public double apply$mcDF$sp(final float v1) {
         return Function1.apply$mcDF$sp$(this, v1);
      }

      public float apply$mcFF$sp(final float v1) {
         return Function1.apply$mcFF$sp$(this, v1);
      }

      public int apply$mcIF$sp(final float v1) {
         return Function1.apply$mcIF$sp$(this, v1);
      }

      public long apply$mcJF$sp(final float v1) {
         return Function1.apply$mcJF$sp$(this, v1);
      }

      public void apply$mcVF$sp(final float v1) {
         Function1.apply$mcVF$sp$(this, v1);
      }

      public boolean apply$mcZI$sp(final int v1) {
         return Function1.apply$mcZI$sp$(this, v1);
      }

      public double apply$mcDI$sp(final int v1) {
         return Function1.apply$mcDI$sp$(this, v1);
      }

      public float apply$mcFI$sp(final int v1) {
         return Function1.apply$mcFI$sp$(this, v1);
      }

      public int apply$mcII$sp(final int v1) {
         return Function1.apply$mcII$sp$(this, v1);
      }

      public long apply$mcJI$sp(final int v1) {
         return Function1.apply$mcJI$sp$(this, v1);
      }

      public void apply$mcVI$sp(final int v1) {
         Function1.apply$mcVI$sp$(this, v1);
      }

      public boolean apply$mcZJ$sp(final long v1) {
         return Function1.apply$mcZJ$sp$(this, v1);
      }

      public double apply$mcDJ$sp(final long v1) {
         return Function1.apply$mcDJ$sp$(this, v1);
      }

      public float apply$mcFJ$sp(final long v1) {
         return Function1.apply$mcFJ$sp$(this, v1);
      }

      public int apply$mcIJ$sp(final long v1) {
         return Function1.apply$mcIJ$sp$(this, v1);
      }

      public long apply$mcJJ$sp(final long v1) {
         return Function1.apply$mcJJ$sp$(this, v1);
      }

      public void apply$mcVJ$sp(final long v1) {
         Function1.apply$mcVJ$sp$(this, v1);
      }

      public Function1 compose(final Function1 g) {
         return Function1.compose$(this, g);
      }

      public Function1 andThen(final Function1 g) {
         return Function1.andThen$(this, g);
      }

      public String toString() {
         return Function1.toString$(this);
      }

      public Type apply(final Type tp) {
         if (tp instanceof AnnotatedType) {
            Type underlying = ((AnnotatedType)tp).underlying();
            if (this.annotated) {
               return this.apply(underlying);
            }
         }

         if (tp instanceof ExistentialType) {
            Type underlying = ((ExistentialType)tp).underlying();
            if (this.existential) {
               return this.apply(underlying);
            }
         }

         if (tp instanceof PolyType) {
            Type underlying = ((PolyType)tp).resultType();
            if (this.poly) {
               return this.apply(underlying);
            }
         }

         if (tp instanceof NullaryMethodType) {
            Type underlying = ((NullaryMethodType)tp).resultType();
            if (this.nullary) {
               return this.apply(underlying);
            }
         }

         return tp;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$TypeUnwrapper$$$outer() {
         return this.$outer;
      }

      public TypeUnwrapper(final boolean poly, final boolean existential, final boolean annotated, final boolean nullary) {
         this.poly = poly;
         this.existential = existential;
         this.annotated = annotated;
         this.nullary = nullary;
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class ClassUnwrapper extends TypeUnwrapper {
      public Type apply(final Type tp) {
         return super.apply(tp.normalize());
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$ClassUnwrapper$$$outer() {
         return this.$outer;
      }

      public ClassUnwrapper(final boolean existential) {
         super(true, existential, true, false);
      }
   }

   public class unwrapToClass$ extends ClassUnwrapper {
      public unwrapToClass$() {
         super(true);
      }
   }

   public class unwrapToStableClass$ extends ClassUnwrapper {
      public unwrapToStableClass$() {
         super(false);
      }
   }

   public class unwrapWrapperTypes$ extends TypeUnwrapper {
      public unwrapWrapperTypes$() {
         super(true, true, true, true);
      }
   }

   public class MissingAliasControl extends ControlThrowable {
      // $FF: synthetic field
      public final SymbolTable $outer;

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$MissingAliasControl$$$outer() {
         return this.$outer;
      }

      public MissingAliasControl() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class MissingTypeControl extends ControlThrowable {
      // $FF: synthetic field
      public final SymbolTable $outer;

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$MissingTypeControl$$$outer() {
         return this.$outer;
      }

      public MissingTypeControl() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class TypeError extends Throwable {
      private Position pos;
      private final String msg;
      // $FF: synthetic field
      public final SymbolTable $outer;

      public Position pos() {
         return this.pos;
      }

      public void pos_$eq(final Position x$1) {
         this.pos = x$1;
      }

      public String msg() {
         return this.msg;
      }

      public final Throwable fillInStackTrace() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var5 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Types$TypeError$$$outer().settings();
         MutableSettings var6 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var6;
         boolean var7 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         return (Throwable)(var7 ? super.fillInStackTrace() : this);
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$TypeError$$$outer() {
         return this.$outer;
      }

      public TypeError(final Position pos, final String msg) {
         this.pos = pos;
         this.msg = msg;
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super(msg);
         }
      }

      public TypeError(final String msg) {
         this(Types.this.NoPosition(), msg);
      }
   }

   public class RecoverableCyclicReference extends TypeError implements Product {
      private final Symbols.Symbol sym;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public Symbols.Symbol sym() {
         return this.sym;
      }

      public RecoverableCyclicReference copy(final Symbols.Symbol sym) {
         return this.scala$reflect$internal$Types$RecoverableCyclicReference$$$outer().new RecoverableCyclicReference(sym);
      }

      public Symbols.Symbol copy$default$1() {
         return this.sym();
      }

      public String productPrefix() {
         return "RecoverableCyclicReference";
      }

      public int productArity() {
         return 1;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.sym();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof RecoverableCyclicReference;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "sym";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof RecoverableCyclicReference && ((RecoverableCyclicReference)x$1).scala$reflect$internal$Types$RecoverableCyclicReference$$$outer() == this.scala$reflect$internal$Types$RecoverableCyclicReference$$$outer()) {
               RecoverableCyclicReference var2 = (RecoverableCyclicReference)x$1;
               Symbols.Symbol var10000 = this.sym();
               Symbols.Symbol var3 = var2.sym();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               if (var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$RecoverableCyclicReference$$$outer() {
         return this.$outer;
      }

      public RecoverableCyclicReference(final Symbols.Symbol sym) {
         super((new StringBuilder(35)).append("illegal cyclic reference involving ").append(sym).toString());
         this.sym = sym;
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var7 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = Types.this.settings();
         MutableSettings var8 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var8;
         boolean var9 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         if (var9) {
            this.printStackTrace();
         }

      }
   }

   public class RecoverableCyclicReference$ extends AbstractFunction1 implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public final String toString() {
         return "RecoverableCyclicReference";
      }

      public RecoverableCyclicReference apply(final Symbols.Symbol sym) {
         return this.$outer.new RecoverableCyclicReference(sym);
      }

      public Option unapply(final RecoverableCyclicReference x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(x$0.sym()));
      }

      public RecoverableCyclicReference$() {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            super();
         }
      }
   }

   public class NoCommonType extends ControlThrowable {
      // $FF: synthetic field
      public final SymbolTable $outer;

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$NoCommonType$$$outer() {
         return this.$outer;
      }

      public NoCommonType(final List tps) {
         if (Types.this == null) {
            throw null;
         } else {
            this.$outer = Types.this;
            StringBuilder var10001 = (new StringBuilder(31)).append("lub/glb of incompatible types: ");
            String mkString_end = "";
            String mkString_sep = " and ";
            String mkString_start = "";
            if (tps == null) {
               throw null;
            } else {
               String var10002 = IterableOnceOps.mkString$(tps, mkString_start, mkString_sep, mkString_end);
               Object var6 = null;
               Object var7 = null;
               Object var8 = null;
               super(var10001.append(var10002).toString());
            }
         }
      }
   }

   public class MalformedType extends TypeError {
      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$MalformedType$$$outer() {
         return this.$outer;
      }

      public MalformedType(final String msg) {
         super(msg);
      }

      public MalformedType(final Type pre, final String tp) {
         this((new StringBuilder(17)).append("malformed type: ").append(pre).append("#").append(tp).toString());
      }
   }

   public class InvalidateTypeCaches extends TypeMaps.TypeFolder {
      private final scala.collection.Set changedSymbols;
      private boolean res;
      private final IdentityHashMap seen;

      private boolean res() {
         return this.res;
      }

      private void res_$eq(final boolean x$1) {
         this.res = x$1;
      }

      private IdentityHashMap seen() {
         return this.seen;
      }

      public void invalidate(final Iterable tps) {
         this.res_$eq(false);
         this.seen().clear();

         try {
            tps.foreach((tp) -> BoxesRunTime.boxToBoolean($anonfun$invalidate$1(this, tp)));
         } finally {
            this.seen().clear();
         }

      }

      public void invalidate(final Type tp) {
         this.invalidate((Iterable)(new .colon.colon(tp, scala.collection.immutable.Nil..MODULE$)));
      }

      public boolean invalidateImpl(final Type tp) {
         Option var10000 = scala.Option..MODULE$.apply(this.seen().get(tp));
         if (var10000 == null) {
            throw null;
         } else {
            Option getOrElse_this = var10000;
            Object var4 = getOrElse_this.isEmpty() ? BoxesRunTime.boxToBoolean($anonfun$invalidateImpl$1(this, tp)) : getOrElse_this.get();
            Object var3 = null;
            return BoxesRunTime.unboxToBoolean(var4);
         }
      }

      public void apply(final Type tp) {
         if (!this.seen().containsKey(tp)) {
            if (tp instanceof TypeRef) {
               TypeRef var2 = (TypeRef)tp;
               boolean preInvalid = this.invalidateImpl(var2.pre());
               boolean var11 = false;
               List var16 = var2.args();
               if (var16 == null) {
                  throw null;
               } else {
                  for(List foreach_these = var16; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
                     Type var10 = (Type)foreach_these.head();
                     var11 = this.invalidateImpl(var10) || var11;
                  }

                  label54: {
                     Object var12 = null;
                     if (!preInvalid && !var11) {
                        scala.collection.Set var17 = this.changedSymbols;
                        Symbols.Symbol apply_elem = var2.sym();
                        if (var17 == null) {
                           throw null;
                        }

                        boolean var18 = var17.contains(apply_elem);
                        apply_elem = null;
                        if (!var18) {
                           break label54;
                        }
                     }

                     var2.scala$reflect$internal$Types$$invalidateTypeRefCaches();
                     this.res_$eq(true);
                  }

                  this.seen().put(tp, this.res());
               }
            } else {
               if (tp instanceof CompoundType) {
                  CompoundType var4 = (CompoundType)tp;
                  if (var4.baseClasses().exists(this.changedSymbols)) {
                     var4.scala$reflect$internal$Types$$invalidatedCompoundTypeCaches();
                     this.res_$eq(true);
                     this.seen().put(tp, this.res());
                     return;
                  }
               }

               if (!(tp instanceof SingleType)) {
                  tp.foldOver(this);
                  this.seen().put(tp, this.res());
               } else {
                  SingleType var5;
                  label82: {
                     var5 = (SingleType)tp;
                     if (!this.invalidateImpl(var5.pre())) {
                        scala.collection.Set var10000 = this.changedSymbols;
                        Symbols.Symbol apply_elemx = var5.sym();
                        if (var10000 == null) {
                           throw null;
                        }

                        boolean var15 = var10000.contains(apply_elemx);
                        apply_elemx = null;
                        if (!var15) {
                           break label82;
                        }
                     }

                     var5.scala$reflect$internal$Types$$invalidateSingleTypeCaches();
                     this.res_$eq(true);
                  }

                  boolean underInvalid = var5.underlying() != var5 && this.invalidateImpl(var5.underlying());
                  this.res_$eq(this.res() || underInvalid);
                  this.seen().put(tp, this.res());
               }
            }
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Types$InvalidateTypeCaches$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$invalidate$1(final InvalidateTypeCaches $this, final Type tp) {
         return $this.invalidateImpl(tp);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$invalidateImpl$1(final InvalidateTypeCaches $this, final Type tp$9) {
         boolean saved = $this.res();

         boolean var10000;
         try {
            $this.apply(tp$9);
            var10000 = $this.res();
         } finally {
            $this.res_$eq(saved);
         }

         return var10000;
      }

      // $FF: synthetic method
      public static final void $anonfun$apply$6(final InvalidateTypeCaches $this, final BooleanRef argsInvalid$1, final Type arg) {
         argsInvalid$1.elem = $this.invalidateImpl(arg) || argsInvalid$1.elem;
      }

      public InvalidateTypeCaches(final scala.collection.Set changedSymbols) {
         this.changedSymbols = changedSymbols;
         this.res = false;
         this.seen = new IdentityHashMap();
      }

      // $FF: synthetic method
      public static final Object $anonfun$apply$6$adapted(final InvalidateTypeCaches $this, final BooleanRef argsInvalid$1, final Type arg) {
         $anonfun$apply$6($this, argsInvalid$1, arg);
         return BoxedUnit.UNIT;
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return var0.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public interface FlagAgnosticCompleter {
   }

   public interface FlagAssigningCompleter {
   }
}
