package scala.reflect.internal;

import java.io.Serializable;
import java.lang.invoke.SerializedLambda;
import scala.Function0;
import scala.Function1;
import scala.Function2;
import scala.MatchError;
import scala.Option;
import scala.Predef;
import scala.Product;
import scala.ScalaReflectionException;
import scala.Some;
import scala.Tuple2;
import scala.Tuple3;
import scala.collection.AbstractIterator;
import scala.collection.IterableFactory;
import scala.collection.IterableOnceOps;
import scala.collection.Iterator;
import scala.collection.LinearSeq;
import scala.collection.SeqOps;
import scala.collection.StrictOptimizedIterableOps;
import scala.collection.StrictOptimizedLinearSeqOps;
import scala.collection.StrictOptimizedSeqOps;
import scala.collection.immutable.ArraySeq;
import scala.collection.immutable.List;
import scala.collection.immutable.Map;
import scala.collection.immutable.Nil;
import scala.collection.immutable.Range;
import scala.collection.immutable.Seq;
import scala.collection.immutable.Set;
import scala.collection.immutable.SetOps;
import scala.collection.immutable.Nil.;
import scala.collection.mutable.AnyRefMap;
import scala.collection.mutable.ArrayBuffer;
import scala.collection.mutable.Builder;
import scala.collection.mutable.ListBuffer;
import scala.reflect.ClassTag;
import scala.reflect.ScalaSignature;
import scala.reflect.api.TypeTags;
import scala.reflect.internal.settings.MutableSettings;
import scala.reflect.internal.settings.MutableSettings$;
import scala.reflect.internal.tpe.TypeMaps;
import scala.reflect.internal.util.Collections;
import scala.reflect.internal.util.NoPosition$;
import scala.reflect.internal.util.Position;
import scala.reflect.internal.util.ReusableInstance;
import scala.reflect.internal.util.ReusableInstance$;
import scala.reflect.internal.util.Statistics;
import scala.reflect.internal.util.StatisticsStatics;
import scala.reflect.internal.util.TraceSymbolActivity;
import scala.reflect.internal.util.package$;
import scala.reflect.io.AbstractFile;
import scala.reflect.io.NoAbstractFile$;
import scala.reflect.macros.Attachments;
import scala.reflect.runtime.SynchronizedSymbols;
import scala.runtime.AbstractFunction2;
import scala.runtime.AbstractFunction3;
import scala.runtime.BoxedUnit;
import scala.runtime.BoxesRunTime;
import scala.runtime.IntRef;
import scala.runtime.Nothing;
import scala.runtime.ObjectRef;
import scala.runtime.RichInt;
import scala.runtime.ScalaRunTime;
import scala.runtime.Statics;

@ScalaSignature(
   bytes = "\u0006\u0005i]a\u0001\u0004E<\u0011s\u0002\n1!\u0001\t\bjU\u0001b\u0002EN\u0001\u0011\u0005\u0001R\u0014\u0005\n\u0011K\u0003\u0001\u0019!C\t\u0011OC\u0011\u0002c,\u0001\u0001\u0004%\t\u0002#-\t\u000f!]\u0006\u0001\"\u0001\t(\"9\u0001\u0012\u0018\u0001\u0005\u0012!m\u0006\"\u0003E_\u0001\u0001\u0007K\u0011\u0002E`\u0011%1Z\u000b\u0001a!\n\u00131j\u000bC\u0004\u00172\u0002!\t\u0001c0\t\u000fYM\u0006\u0001\"\u0001\u00176\"IaS\u0018\u0001AB\u0013%\u0001r\u0015\u0005\n-\u007f\u0003\u0001\u0019)C\u0005-\u0003DqA&2\u0001\t\u0003A9\u000bC\u0004\u0017H\u0002!\tA&3\t\u0013Y=\u0007A1Q\u0005\nYE\u0007\"\u0003Lp\u0001\t\u0007K\u0011\u0002Ev\u0011%1\n\u000f\u0001a!\n\u0013A9\u000bC\u0005\u0017j\u0002\u0001\r\u0015\"\u0003\u0017l\"9a\u0013\u001f\u0001\u0005\u0012!m\u0006b\u0002L{\u0001\u0011Eas\u001f\u0005\b-k\u0004A\u0011\u0003L\u007f\u0011\u001d9\u001a\u0001\u0001C\u0001/\u000bAqaf\u0004\u0001\t\u00039\n\u0002C\u0005\u0018\u001c\u0001\t\n\u0011\"\u0001\rD!9qS\u0004\u0001\u0005\u0002]}\u0001\"CL\u0014\u0001E\u0005I\u0011\u0001G\"\u0011%9J\u0003\u0001b!\n\u00139Z\u0003C\u0004\u00184\u0001!\tb&\u000e\t\u000f]e\u0002\u0001\"\u0001\u0018<!9q\u0013\t\u0001\u0005\u0002]\rc!\u0003En\u0001\u0005\u0005\u0001R\u001cEi\u0011\u001dA)O\bC\u0001\u0011ODq\u0001#;\u001f\t\u0003AY\u000fC\u0004\ttz!\t\u0001#>\t\u000f)Ua\u0004\"\u0001\tl\"9!r\u0003\u0010\u0005\u0002)e\u0001b\u0002Fw=\u0011\u0005\u00012\u001e\u0005\b\u0015_tB\u0011\u0001Ev\u0011\u001dQ\tP\bC\u0001\u0011WDqAc=\u001f\t\u0003AY\u000fC\u0004\u000bvz!\t\u0001c;\t\u000f)]h\u0004\"\u0001\tl\"9!\u0012 \u0010\u0005\u0002!-\bb\u0002F~=\u0011\u0005\u00012\u001e\u0005\b\u0015{tB\u0011\u0001Ev\u0011\u001dQyP\bC\u0001\u0011WDqa#\u0001\u001f\t\u0003AY\u000fC\u0004\f\u0004y!\t\u0001c;\t\u000f-\u0015a\u0004\"\u0001\tl\"91r\u0001\u0010\u0005\u0002!-\bbBF\u0005=\u0011\u0005\u00012\u001e\u0005\b\u0017\u0017qB\u0011AF\u0007\u0011\u001dYYB\bC\u0001\u0017;Aqa#\n\u001f\t\u0003QY\u0007C\u0004\f(y!\tA#6\t\u000f-%b\u0004\"\u0001\nR!912\u0006\u0010\u0005\u0002)-\u0004bBF\u0017=\u0011\u00051r\u0006\u0005\b\u0017kqB\u0011\u0001F6\u0011\u001dY9D\bC\u0001\u0017sAqac\u0010\u001f\t\u0003QY\u0007C\u0004\fBy!\tac\u0011\t\u000f-\u001dc\u0004\"\u0001\u000bl!91\u0012\n\u0010\u0005\u0002--\u0003bBF2=\u0011\u0005\u0011\u0012\u000b\u0005\b\u0017KrB\u0011AE)\u0011\u001dY9G\bC\u0001\u0013#Bqa#\u001b\u001f\t\u0003YY\u0007C\u0004\fpy!\tA#6\t\u000f-Ed\u0004\"\u0001\ft\u0019Aa\u0013\u0007\u0001C\u0011{2\u001a\u0004\u0003\u0006\u00176\u0019\u0013)\u001a!C\u0001\u0013WD!Bf\u000eG\u0005#\u0005\u000b\u0011BE>\u0011)1JD\u0012BK\u0002\u0013\u0005\u00112\u001e\u0005\u000b-w1%\u0011#Q\u0001\n%m\u0004B\u0003L\u001f\r\nU\r\u0011\"\u0001\nl\"Qas\b$\u0003\u0012\u0003\u0006I!c\u001f\t\u000f!\u0015h\t\"\u0001\u0017B!9a\u0013\n$\u0005\u0002Y5\u0002\"CI(\r\u0006\u0005I\u0011\u0001L&\u0011%\t:FRI\u0001\n\u00031\u001a\u0006C\u0005\u0012^\u0019\u000b\n\u0011\"\u0001\u0017T!I1\u0013\f$\u0012\u0002\u0013\u0005a3\u000b\u0005\n#?2\u0015\u0011!C!\u0019\u0017A\u0011\"%\u0019G\u0003\u0003%\t\u0001c*\t\u0013E\rd)!A\u0005\u0002Y]\u0003\"CI5\r\u0006\u0005I\u0011II6\u0011%\t*HRA\u0001\n\u00031Z\u0006C\u0005\u0012|\u0019\u000b\t\u0011\"\u0011\u0017`!I\u0011\u0013\u0011$\u0002\u0002\u0013\u0005\u00032\u0018\u0005\n\u001b{4\u0015\u0011!C!#\u0007C\u0011\"%\"G\u0003\u0003%\tEf\u0019\b\u0017]e\u0003!!A\t\u0002!ut3\f\u0004\f-c\u0001\u0011\u0011!E\u0001\u0011{:j\u0006C\u0004\tfv#\taf\u001d\t\u00135uX,!A\u0005FE\r\u0005\"CL;;\u0006\u0005I\u0011QL<\u0011%9z(XA\u0001\n\u0003;\n\tC\u0004\u0010`\u0002!\tbf$\u0007\u000f!U\u0007!!\u0001\tX\"Q\u0011\u0012B2\u0003\u0002\u0003\u0006I\u0001#5\t\u0015%-1M!A!\u0002\u0013Ii\u0001\u0003\u0006\n\u0018\r\u0014\t\u0011)A\u0005\u0013oA\u0001\u0002#:d\t#\u00011r\u0012\u0005\n\u0017/\u001b\u0007\u0019)C\u000b\u00173C\u0011bc'd\u0001\u0004&)b#(\t\u0011-\u00056\r)Q\u0007\u0013oAqac)d\t\u0013AY\u000fC\u0004\f&\u000e$I\u0001c;\u0006\r-\u001d6\r\u0001Ei\u000b\u0019YIk\u0019\u0001\fZ\u00119\u0011RF2\u0003\u0002--\u0006bBF_G\u0012\u00151r\u0018\u0005\b\u0013k\u0019GQAF`\u0011\u001dIyc\u0019C\u0001\u0017\u0003D\u0001b#2dA\u0013E1r\u0018\u0005\b\u0013{\u0019g\u0011AFd\u0011!YYm\u0019Q!\n!E\u0007bCFgG\u0002\u0007\t\u0011)Q\u0005\u0013+Cqac4d\t\u000bI\t\u0006C\u0004\fR\u000e$)ac5\t\u0013-U7M1A\u0005\u0006!\u001d\u0006\u0002CFlG\u0002\u0006i\u0001#+\t\u0011-e7\r)Q\u0005\u00177Dqa#:d\t\u0003Y9\u000fC\u0004\fj\u000e$\tac;\t\u000f-=8\r\"\u0001\fr\"A1R_2!\n#Y9\u0010C\u0004\f|\u000e$\ta#@\t\u000f-m8\r\"\u0001\nl\"9A2A2\u0005\u0002%-\bb\u0002G\u0003G\u0012\u0005\u00112\u001e\u0005\b\u0019\u000f\u0019G\u0011IFj\u0011\u001daIa\u0019C\u0001\u0019\u0017Aq\u0001d\u0007d\t\u0003IY\u000fC\u0004\r\u001e\r$\t!c;\t\u000f1}1\r\"\u0002\r\"!IA\u0012F2\u0012\u0002\u0013\u0015A2\u0006\u0005\n\u0019\u0003\u001a\u0017\u0013!C\u0003\u0019\u0007Bq\u0001d\u0012d\t\u000baI\u0005C\u0005\rR\r\f\n\u0011\"\u0002\r,!IA2K2\u0012\u0002\u0013\u0015A2\t\u0005\b\u0019+\u001aGQ\u0001G,\u0011%ayfYI\u0001\n\u000baY\u0003C\u0005\rb\r\f\n\u0011\"\u0002\rD!9A2M2\u0005\u00061\u0015\u0004b\u0002G5G\u0012\u0015A2\u000e\u0005\n\u0019O\u001b\u0017\u0013!C\u0003\u0019WA\u0011\u0002$+d#\u0003%)\u0001d\u0011\t\u000f1-6\r\"\u0002\r.\"IARW2\u0012\u0002\u0013\u0015A2\u0006\u0005\n\u0019o\u001b\u0017\u0013!C\u0003\u0019\u0007Bq\u0001$/d\t\u000baY\fC\u0005\rB\u000e\f\n\u0011\"\u0002\r,!9A2Y2\u0005\u00061\u0015\u0007\"\u0003GfGF\u0005IQ\u0001G\"\u0011\u001daim\u0019C\u0001\u0019\u001fDq\u0001d5d\t\u0003a)\u000eC\u0004\rZ\u000e$\t\u0001d7\t\u00135M1-%A\u0005\u00021\r\u0003bBG\u000bG\u0012\u0015Qr\u0003\u0005\n\u001bC\u0019\u0017\u0013!C\u0003\u0019WA\u0011\"d\td#\u0003%)\u0001d\u0011\t\u000f5\u00152\r\"\u0002\u000e(!IQrF2\u0012\u0002\u0013\u0015A2\u0006\u0005\n\u001bc\u0019\u0017\u0013!C\u0003\u0019\u0007Bq!d\rd\t\u000bi)\u0004C\u0005\u000e<\r\f\n\u0011\"\u0002\u000e>!IQ\u0012I2\u0012\u0002\u0013\u0015A2\u0006\u0005\b\u001b\u0007\u001aGQAG#\u0011\u001diIe\u0019C\u0003\u001b\u0017B\u0011\"d\u0015d#\u0003%)\u0001d\u000b\t\u00135U3-%A\u0005\u00061\r\u0003bBG,G\u0012\u0015Q\u0012\f\u0005\b\u001d'\u0019GQ\u0001H\u000b\u0011%q\u0019fYI\u0001\n\u000baY\u0003C\u0005\u000fV\r\f\n\u0011\"\u0002\rD!9arK2\u0005\u00069e\u0003\"\u0003H2GF\u0005IQ\u0001G\u0016\u0011%q)gYI\u0001\n\u000ba\u0019\u0005C\u0004\u000fh\r$)A$\u001b\t\u000f9E4\r\"\u0002\u000ft!9arO2\u0005\u00069e\u0004\"\u0003HPGF\u0005IQ\u0001G\u0016\u0011%q\tkYI\u0001\n\u000ba\u0019\u0005C\u0004\u000f$\u000e$)A$*\t\u00139\u00057-%A\u0005\u00061-\u0002\"\u0003HbGF\u0005IQ\u0001G\"\u0011\u001dq)m\u0019C\u0003\u001d\u000fD\u0011Bd4d#\u0003%)\u0001d\u000b\t\u00139E7-%A\u0005\u00061\r\u0003b\u0002HjG\u0012\u0015aR\u001b\u0005\n\u001d;\u001c\u0017\u0013!C\u0003\u0019WA\u0011Bd8d#\u0003%)\u0001d\u0011\t\u000f9\u00058\r\"\u0003\u000fd\"9a2^2\u0005\u000695\bb\u0002HvG\u0012\u0015aR\u001f\u0005\b\u001d{\u001cGQ\u0001H\u0000\u0011%y9aYI\u0001\n\u000bii\u0004C\u0004\u0010\n\r$\tad\u0003\t\u000f=E1\r\"\u0001\u0010\u0014!9q2D2\u0005\u0002=u\u0001bBH\u000eG\u0012\u0005qR\u0005\u0005\t\u001fk\u0019GQ\u0003\u0001\fT\"9qrG2\u0005\u0002=e\u0002bBH!G\u0012\u0015q2\t\u0005\b\u001f\u0003\u001aGQAH/\u0011\u001dy\u0019g\u0019C\u0003\u001fKBqad\u001ad\t\u000byI\u0007C\u0005\u0010r\r\f\n\u0011\"\u0002\r,!Iq2O2\u0012\u0002\u0013\u0015A2\t\u0005\b\u001fk\u001aG\u0011AH<\u0011%y9iYI\u0001\n\u0003aY\u0003C\u0005\u0010\n\u000e\f\n\u0011\"\u0001\rD!9q2R2\u0005\u0006=5\u0005bBHIG\u0012\u0015q2\u0013\u0005\n\u001f7\u001b\u0017\u0013!C\u0003\u0019WA\u0011b$(d#\u0003%)\u0001d\u0011\t\u000f=}5\r\"\u0002\u0010\"\"IqrU2\u0012\u0002\u0013\u0015A2\u0006\u0005\n\u001fS\u001b\u0017\u0013!C\u0003\u0019\u0007Bqad+d\t\u000byi\u000bC\u0005\u00104\u000e\f\n\u0011\"\u0002\rD!9qRW2\u0005\u0006=]\u0006bBHmG\u0012\u0015q2\u001c\u0005\b\u001f?\u001cG\u0011AHq\u0011\u001dyIo\u0019C\u0001\u0013#B\u0011bd;d\t\u0003A\t\tc;\t\u0013=58\r\"\u0001\t\u0002>=\b\"CH|G\u0012\u0005\u0001\u0012\u0011EO\u0011\u001di\ti\u0019C\u0001\u0011WDqA#\u0019d\t\u0003AY\u000fC\u0004\u000bF\u000e$\t\u0001c;\t\u000f)53\r\"\u0001\tl\"9q\u0012`2\u0005\u0002!-\bbBGBG\u0012\u0005\u00012\u001e\u0005\b\u001b\u001f\u001bG\u0011\u0001Ev\u0011\u001di\tj\u0019C\u0001\u0011WDq!$\"d\t\u0003AY\u000fC\u0004\u000e\u0014\u000e$\t\u0001c;\t\u000f=m8\r\"\u0001\tl\"9QRS2\u0005\u0002!-\bbBGMG\u0012\u0005\u00012\u001e\u0005\b\u001b?\u001bG\u0011\u0001Ev\u0011\u001dyim\u0019C\u0001\u0011WDq!$$d\t\u0003BY\u000fC\u0004\u000bd\r$\t\u0001c;\t\u000f)\u00154\r\"\u0001\tl\"9!rY2\u0005\u0002!-\bbBE;G\u0012\u0005\u00012\u001e\u0005\b\u0015\u0013\u001cG\u0011\u0001Ev\u0011\u001dQ9g\u0019C\u0001\u0011WDqA#\u001bd\t\u0003AY\u000fC\u0004\u000bL\u000e$\t\u0001c;\t\u000fA\u001d1\r\"\u0001\tl\"9\u0011RM2\u0005\u0002!-\bbBE+G\u0012\u0005\u00012\u001e\u0005\b\u0013\u001b\u001aG\u0011\u0001Ev\u0011\u001dIig\u0019C\u0001\u0011WDq!#\u001dd\t\u0003AY\u000fC\u0004\nX\r$\t\u0001c;\t\u000f%\u001d4\r\"\u0001\tl\"9\u00112M2\u0005\u0002!-\bbBE6G\u0012\u0005\u00012\u001e\u0005\b\u0013_\u001aG\u0011\u0001Ev\u0011\u001dIif\u0019C\u0001\u0011WDq!#\u001bd\t\u0003AY\u000fC\u0004\nb\r$\t\u0001c;\t\u000f%\u00153\r\"\u0001\tl\"9\u0011rL2\u0005\u0002!-\bbBE$G\u0012\u0005\u00012\u001e\u0005\b\u0013\u0013\u001aG\u0011\u0001Ev\u0011\u001da\tj\u0019C\u0001\u0011WDq\u0001$$d\t\u0003AY\u000fC\u0004\r\u0010\u000e$\t\u0001c;\t\u000f1-5\r\"\u0001\tl\"9A\u0012R2\u0005B!-\bbBGFG\u0012\u0005\u00012\u001e\u0005\b\u0013g\u001aG\u0011\u0001Ev\u0011\u001diij\u0019C\u0001\u0011WDq\u0001%\u0003d\t\u0003AY\u000fC\u0004\u0011\f\r$\t\u0001c;\t\u000fA51\r\"\u0001\tl\"9\u0001sB2\u0005\u0002!-\bb\u0002I\tG\u0012\u0005\u00012\u001e\u0005\b!'\u0019G\u0011\u0001Ev\u0011\u001d\u0001*b\u0019C\u0001\u0011WDq\u0001e\u0006d\t\u0003AY\u000fC\u0004\u0011\u001a\r$\t\u0001c;\t\u000fAm1\r\"\u0002\tl\"9\u0001SD2\u0005\u0006!-\bb\u0002I\u0010G\u0012\u0005\u0001\u0013\u0005\u0005\b!K\u0019GQ\u0001I\u0014\u0011\u001d\u0001Zc\u0019C\u0003![Aq\u0001%\rd\t\u0003\u0001\u001a\u0004C\u0004\u00118\r$\t\u0001%\u000f\t\u000fAu2\r\"\u0001\t\u001e\"9\u0011rO2\u0005BA}\u0002b\u0002I\"G\u0012\u0005\u0001S\t\u0005\b\u001f_\u0019GQAFj\u0011%yyc\u0019C\u0003\u0011{\u0002J\u0005C\u0004\u0011P\r$\t\u0001%\u0015\t\u000fA]3\r\"\u0001\u0011Z!9\u0001SL2\u0005\u0006!-\bb\u0002I0G\u0012\u0005\u00012\u001e\u0005\b!C\u001aG\u0011\u0001Ev\u0011\u001d\u0001\u001ag\u0019C\u0003\u0011WDq\u0001%\u001ad\t\u000bAY\u000fC\u0004\u0011h\r$)\u0001c;\t\u000fA%4\r\"\u0002\tl\"9\u00013N2\u0005\u0002!-\bbBGDG\u0012\u0005\u00012\u001e\u0005\b![\u001aGQ\u0001Ev\u0011\u001d\u0001zg\u0019C\u0003\u0011WDq\u0001%\u001dd\t\u000bAY\u000fC\u0004\u0011t\r$)\u0001c;\t\u000fAU4\r\"\u0002\tl\"9\u0001sO2\u0005\u0006!-\bb\u0002I=G\u0012\u0015\u00012\u001e\u0005\b!w\u001aGQ\u0001Ev\u0011\u001dIYn\u0019C\u0001!{Bq\u0001%!d\t\u0003AY\u000fC\u0004\u0011\u0004\u000e$\t!#\u0015\t\u000f5-1\r\"\u0001\nR!9\u0001SQ2\u0005\u0006%E\u0003b\u0002IIG\u0012\u0015\u0011\u0012\u000b\u0005\b!'\u001bGQ\u0001Ev\u0011\u001d\u0001*j\u0019C\u0001\u0011WDq\u0001e&d\t\u0003AY\u000fC\u0004\u0011\u001a\u000e$)\u0001c;\t\u000fAm5\r\"\u0002\tl\"9\u0001sT2\u0005\u0002!-\bb\u0002IQG\u0012\u0005\u00012\u001e\u0005\b!G\u001bG\u0011\u0001IS\u0011\u001d\u0001jk\u0019C\u0001!KCq\u0001e,d\t\u0003\u0001\n\fC\u0004\u00116\u000e$\t\u0001%*\t\u000fA]6\r\"\u0001\tl\"9\u0001\u0013X2\u0005\u0002A\u0015\u0006b\u0002I^G\u0012\u0005\u0001S\u0015\u0005\b!{\u001bG\u0011\u0001Ev\u0011\u001d\u0001zl\u0019C\u0001!KCq\u0001%1d\t\u0003\u0001*\u000bC\u0004\u0011D\u000e$\t\u0001c;\t\u000fA\u00157\r\"\u0001\u0011&\"9\u0001sY2\u0005\u0002A\u0015\u0006b\u0002IeG\u0012\u0005\u00013\u001a\u0005\b!\u001f\u001cG\u0011\u0001IS\u0011\u001d\u0001\nn\u0019C\u0001!KCq\u0001e5d\t\u0003AY\u000fC\u0004\u0011V\u000e$\t\u0001%*\t\u000fA]7\r\"\u0001\tl\"9\u0001\u0013\\2\u0005\u0006!-\bb\u0002InG\u0012\u0015\u00012\u001e\u0005\b!;\u001cGQ\u0001Ev\u0011\u001d\u0001zn\u0019C\u0003\u0011WDq\u0001%9d\t\u000bAY\u000fC\u0004\u0011d\u000e$)\u0001c;\t\u000fA\u00158\r\"\u0002\tl\"9\u0001s]2\u0005\u0006!-\bb\u0002IuG\u0012\u0015\u00012\u001e\u0005\b!W\u001cGQ\u0001Ev\u0011\u001d\u0001jo\u0019C\u0003\u0011WDq\u0001e<d\t\u0003AY\u000fC\u0004\u0011r\u000e$)\u0001c;\t\u000fAM8\r\"\u0002\tl\"9\u0001S_2\u0005\u0006!-\bb\u0002I|G\u0012\u0015\u00012\u001e\u0005\b!s\u001cGQ\u0001Ev\u0011\u001d\u0001Zp\u0019C\u0003\u0011WDq\u0001%@d\t\u000bAY\u000fC\u0004\u0012\n\r$)\u0001c;\t\u000fE-1\r\"\u0002\tl\"9QrS2\u0005\u0002!-\bbBGRG\u0012\u0005\u00012\u001e\u0005\b#\u001b\u0019GQ\u0001Ev\u0011\u001d\tza\u0019C\u0001\u0011WDq!%\u0005d\t\u0013AY\u000fC\u0004\u0012\u0014\r$)\u0001c;\t\u000fEU1\r\"\u0002\tl\"9\u0011sC2\u0005\u0006Ee\u0001bBI\u0010G\u0012\u0005\u00012\u001e\u0005\b#C\u0019GQ\u0001Ev\u0011\u001d\t\u001ac\u0019C\u0001#KAq!e#d\t\u0003\tj\tC\u0004\u0012\u0012\u000e$\t!e%\t\u000fEU5\r\"\u0002\tl\"9a\u0012R2\u0005\u00029-\u0005bBILG\u0012\u0005\u0001r\u0015\u0005\b\u0013s\u001bG\u0011AE)\u0011\u001d\tJj\u0019C\u0003\u0013#Bq!e'd\t\u000bI\t\u0006C\u0004\u0012\u001e\u000e$\t!#\u0015\t\u000fE}5\r\"\u0001\u0012\"\"9\u0011SU2\u0005\u0002)U\u0007bBGSG\u0012\u0005!R\u001b\u0005\b#O\u001bG\u0011AIU\u0011\u001dy\tn\u0019C\u0001#_Cq!e-d\t\u0003YI\nC\u0004\u0012<\u000e$\ta#'\t\u000fEu6\r\"\u0001\nl\"9\u0011sX2\u0005\u0002%-\bbBIaG\u0012%\u00113\u0019\u0005\b#\u000f\u001cG\u0011AEv\u0011\u001d\tJm\u0019C\u0001\u0011WDq!e3d\t\u0003YI\nC\u0004\u0012N\u000e$\ta#'\t\u000fE=7\r\"\u0001\nl\"A\u0011\u0013[2!B\u0013IY\bC\u0004\u0012T\u000e$\t!c;\t\u000fEU7\r\"\u0002\u0012X\"9\u0011S[2\u0005\nE\r\bbBIxG\u0012\u0005\u0011\u0013\u001f\u0005\b#+\u001cGQAEv\u0011\u001d\t*p\u0019C\t#oDq!e@d\t#\u0011\n\u0001C\u0004\u0013\n\r$\tBe\u0003\t\u000fIU1\r\"\u0005\u0013\u0018!9!sD2\u0005\u0012I\u0005\u0002b\u0002J\u0015G\u0012E!3\u0006\u0005\b%\u0013\u001aG\u0011\u0003J&\u0011\u001d\u0011\nf\u0019C\t%'BqAe\u001bd\t#\u0011j\u0007C\u0004\u0013v\r$\tBe\u001e\t\u000fI}4\r\"\u0005\u0013\u0002\"9!\u0013R2\u0005\u0012I-\u0005b\u0002JJG\u0012E!S\u0013\u0005\b%;\u001bGQ\u0001JP\u0011\u001d\u0011*k\u0019C\u0003%OC\u0011Be,d#\u0003%)\u0001d\u000b\t\u0013IE6-%A\u0005\u00061\r\u0003b\u0002JZG\u0012\u0015!S\u0017\u0005\n%{\u001b\u0017\u0013!C\u0003\u0019WA\u0011Be0d#\u0003%)\u0001d\u0011\t\u000fI\u00057\r\"\u0002\u0013D\"I!3Z2\u0012\u0002\u0013\u0015A2\u0006\u0005\n%\u001b\u001c\u0017\u0013!C\u0003\u0019\u0007BqAe4d\t\u0003\u0011\n\u000eC\u0005\u0013Z\u000e\f\n\u0011\"\u0001\r,!I!3\\2\u0012\u0002\u0013\u0005A2\t\u0005\b%;\u001cG\u0011\u0001Jp\u0011\u001d\u0011\u001ao\u0019C\u0001%KD1Be;d\u0001\u0004\u0005\t\u0015)\u0003\tR\"9!S^2\u0005\u0002%E\u0003b\u0002JxG\u0012\u0005!\u0013\u001f\u0005\b%k\u001cG\u0011\u0001J|\u0011\u001d\u0011Zp\u0019C\u0003\u0011WD1B%@d\u0005\u0003\u0005\t\u0015)\u0003\u0013\u0000\"91SO2\u0005\u0002)-\u0004bBJ<G\u0012\u0015!2\u000e\u0005\b\u0015\u001b\u001bG\u0011\u0001F6\u0011\u001dQYi\u0019C\u0001\u0015WBqA##d\t\u0003QY\u0007C\u0004\u0010,\r$\tAc\u001b\t\u000fMe4\r\"\u0003\t\u001e\"9!RT2\u0005\u0002Mm\u0004bBJ@G\u0012\u00051\u0013\u0011\u0005\b'\u000b\u001bG\u0011AJD\u0011\u001d\u0019\nj\u0019C\u0001''Cqa%(d\t\u0003\u0019z\nC\u0004\u0014$\u000e$\ta%*\t\u000fM%6\r\"\u0001\u0014,\"91sV2\u0005\u0002!-\bbBJYG\u0012\u0005\u00012\u001e\u0005\b'g\u001bGQ\u0001Ev\u0011\u001d\u0019*l\u0019C\u0001\u0015WBqae.d\t\u0013\u0019J\fC\u0004\u0014N\u000e$Iae4\t\u000fMM7\r\"\u0001\t\u001e\"91S[2\u0005\u0006M]\u0007bBJmG\u0012\u0005\u00012\u001e\u0005\b'7\u001cGQAJo\u0011\u001d\u0019\u001ao\u0019C\u0001#'Cqa%:d\t\u0013\u0019:\u000fC\u0004\u0014j\u000e$\tA#6\t\u000f)M7\r\"\u0001\u000bV\"913^2\u0005\u0002-M\u0004bBJwG\u0012\u0005!2\u000e\u0005\b\u0013K\u001bg\u0011\u0001F6\u0011\u001dQik\u0019C\u0001'_Dqae=d\t\u0003Ai\nC\u0004\u000e^\u000e$\ta%>\t\u000f9\u001d3\r\"\u0001\u0014z\"9Q2_2\u0005\u0002Mu\b\u0002\u0003K\u0001G\u0002\u0006K\u0001f\u0001\t\u000fQ\u00151\r\"\u0001\nl\"9AsA2\u0005\u0002Q%\u0001bBF%G\u0012\u0005A3\u0002\u0005\b)\u001f\u0019G\u0011\u0001K\t\u0011\u001d!*b\u0019C\u0001)/Aq\u0001&\bd\t\u0003\u0019:\u000eC\u0004\u0015 \r$\t\u0001&\t\t\u000fQ%2\r\"\u0011\u0015,!9AsF2\u0005\u0002QE\u0002b\u0002K\u0018G\u0012\u0015As\u0007\u0005\b)_\u0019GQ\u0001K\u001e\u0011\u001d!zc\u0019C\u0003)\u001bBq\u0001f\fd\t\u000b!J\u0006C\u0004\u00150\r$)\u0001f\u0019\t\u000fQ=2\r\"\u0002\u0015l!9AsF2\u0005\u0006Q=\u0004b\u0002K\u0018G\u0012\u0015AS\u000f\u0005\b)_\u0019GQ\u0001K?\u0011\u001d!\u001ai\u0019C\u0003)\u000bCq\u0001&#d\t\u000b!Z\tC\u0004\u000b&\u000e$\t\u0001&%\t\u000fQU5\r\"\u0001\u0015\u0018\"9A3T2\u0005\u0002Qu\u0005b\u0002KQG\u0012\u0015A3\u0015\u0005\b)O\u001bGQ\u0001KU\u0011\u001dqyg\u0019C\u0001\u0015+Dq\u0001&,d\t\u0003!z\u000bC\u0004\u00158\u000e$\t\u0001&/\t\u000fQu6\r\"\u0002\u0015@\"9ASX2\u0005\u0006Q\r\u0007b\u0002K_G\u0012\u0015A\u0013\u001a\u0005\b){\u001bGQ\u0001Kh\u0011\u001dI\u0019l\u0019D\u0001)3Dq!$;d\t\u0003I\t\u0006C\u0004\u0015`\u000e$\t!#\u0015\t\u000fQ\u00058\r\"\u0001\nR!9Q2Z2\u0005\u0002%E\u0003bBGnG\u0012\u0005\u0011\u0012\u000b\u0005\b)G\u001cG\u0011\u0001Ev\u0011\u001dq\te\u0019C\u0001\u0015WBq!d6d\t\u0003QY\u0007C\u0004\u0015f\u000e$)A#6\t\u000fQ\u001d8\r\"\u0004\u000bV\"9A\u0013^2\u0005\u0006)U\u0007b\u0002KvG\u0012\u0015\u0011\u0012\u000b\u0005\b\u001bg\u001bG\u0011AE)\u0011\u001d!jo\u0019C\u0003\u0013#Bq!#3d\t\u0003I\t\u0006C\u0004\u0015r\u000e$\t!#\u0015\t\u000fQe8\r\"\u0001\nR!9AS`2\u0005\u0002%E\u0003bBEiG\u0012\u0005\u0011\u0012\u000b\u0005\b)\u007f\u001cG\u0011AE)\u0011\u001d)\na\u0019C\u0001\u0015+Dq!f\u0001d\t\u0003\tJ\u000bC\u0004\u0016\u0006\r$\tA#6\t\u000fU\u001d1\r\"\u0001\u000bV\"9Q\u0013B2\u0005\u0006U-\u0001bBK\fG\u0012\u0005\u0011\u0012\u000b\u0005\b+3\u0019G\u0011AE)\u0011\u001d)Zb\u0019C\u0001\u0013#Bq!&\bd\t\u000bI\t\u0006C\u0004\u0016\"\r$)!#\u0015\t\u000fU\u00152\r\"\u0002\nR!9Q\u0013F2\u0005\u0002U-\u0002bBK\u0018G\u0012\u0005\u0011\u0012\u000b\u0005\b\u001b_\u001bG\u0011AE)\u0011\u001dIye\u0019C\u0001\u0013#Bq!$-d\t\u0003I\t\u0006C\u0004\u00162\r$)Bc\u001b\t\u000f%M3\r\"\u0001\nR!9Q3G2\u0005\u0006UU\u0002bBK\u001aG\u0012\u0015QS\b\u0005\n+\u000b\u001a\u0017\u0013!C\u0003\u0019\u0007Bq!f\u0012d\t\u0013)J\u0005C\u0004\u0016R\r$)!f\u0015\t\u000fUe3\r\"\u0003\u0016\\!9QsL2\u0005\u0006U\u0005\u0004bBK3G\u0012%\u00012\u001e\u0005\b+O\u001aG\u0011AGT\u0011\u001d)Jg\u0019C\u0003\u0015+D\u0001\"f\u001bdA\u0003&\u0001\u0012\u0016\u0005\b+[\u001aG\u0011\u0002Ev\u0011\u001d)zg\u0019C\u0003\u0011WDq!&\u001dd\t\u0003I\t\u0006C\u0004\u0016t\r$)A#6\t\u000fUU4\r\"\u0002\u0016x!9Q\u0013Q2\u0005\u0006U\r\u0005bBF2G\u0012\u0015Qs\u0011\u0005\b+#\u001bGQAKJ\u0011\u001d):j\u0019C\u0001\u001b\u001bAq!&'d\t\u0003ii\u0001C\u0004\u0016\u001c\u000e$\t!$\u0004\t\u000f-\u00154\r\"\u0002\u0016\u001e\"IQ3V2\u0012\u0002\u0013\u0015\u0011\u0013\f\u0005\b+[\u001bGQAKX\u0011%)*lYI\u0001\n\u000b\tJ\u0006C\u0004\u00168\u000e$\t\u0001c;\t\u000fUe6\r\"\u0001\u0016<\"9QR^2\u0005\u0002%E\u0003bBKbG\u0012\u0015\u0011\u0012\u000b\u0005\b\u0015\u001b\u001cG\u0011AE)\u0011\u001dQym\u0019C\u0001\u0015#Dq!&2d\t\u000b):\rC\u0004\u0016N\u000e$\tae6\t\u000fU=7\r\"\u0001\nR!9Q\u0013[2\u0005\u00061U\bb\u0002GzG\u0012\u0005AR\u001f\u0005\b\u001b\u0007\u0019G\u0011AKj\u0011\u001di\tp\u0019C\u0001\u0017;Aq!f6d\t\u000bYi\u0002C\u0004\u0016Z\u000e$)a#\b\t\u000fUm7\r\"\u0002\u0016^\"9Qs]2\u0005\u0006U%\bbBKyG\u0012\u0015Q3\u001f\u0005\b-+\u0019GQ\u0001L\f\u0011\u001d1zb\u0019C\u0003-CAqA&\nd\t\u000bYI\nC\u0004\u0017(\r$)!c;\t\u000fY%2\r\"\u0002\nl\"9a3F2\u0005\nY5\u0002b\u0002L4G\u0012\u0015\u00112\u001e\u0005\b-S\u001aG\u0011BEv\u0011%1Zg\u0019C\t\u0011\u0003KY\u000fC\u0004\u0017n\r$)!c;\t\u000f==7\r\"\u0001\tl\"9!r\\2\u0005\u0002%-\bb\u0002L8G\u0012\u0005\u00112\u001e\u0005\b-c\u001aGQ\u0001G\u0006\u0011\u001diip\u0019C!\u001b\u007fDqAf\u001dd\t\u0003IY\u000fC\u0004\u0017v\r$\t!c;\t\u000fY]4\r\"\u0001\nl\"9a\u0013P2\u0005\u0002%-\bb\u0002L>G\u0012\u0015aS\u0010\u0005\b-\u0003\u001bG\u0011AEv\u0011\u001d1\u001ai\u0019C\u0001\u0019\u0017AqA&\"d\t\u00131:\tC\u0004\u0017\f\u000e$\t!c;\t\u000fY55\r\"\u0001\nl\"9asR2\u0005\u0002YE\u0005b\u0002LKG\u0012%as\u0013\u0005\b-?\u001bG\u0011\u0001Ev\u0011\u001d1\nk\u0019C\u0001\u0019\u0017AABf)d\u0005\u0003\u0005\r\u0011\"\u0001\u0001'7AAB&*d\u0005\u0003\u0005\r\u0011\"\u0001\u0001-OC\u0011bf&\u0001\u0005\u0004%\u0019a&'\u0007\r!}\b\u0001AE\u0001\u0011-II\u0001\"=\u0003\u0002\u0003\u0006I\u0001#5\t\u0017%-A\u0011\u001fB\u0001B\u0003%\u0011R\u0002\u0005\f\u0013/!\tP!A!\u0002\u0013II\u0002C\u0005\tf\u0012EH\u0011\u0003\u0001\n$!I\u00112\u0006CyA\u0003&\u0001\u0012[\u0003\b\u0013[!\t\u0010\u0001E\u007f\u0011!Iy\u0003\"=\u0005B%E\u0002\u0002CE\u001f\tc$)!c\u0010\t\u0011%\u0015C\u0011\u001fC!\u0011WD\u0001\"c\u0012\u0005r\u0012\u0005\u00032\u001e\u0005\t\u0013\u0013\"\t\u0010\"\u0011\tl\"A\u00112\nCy\t\u0003AY\u000f\u0003\u0005\nN\u0011EH\u0011\tEv\u0011!Iy\u0005\"=\u0005B%E\u0003\u0002CE*\tc$\t%#\u0015\t\u0011%UC\u0011\u001fC!\u0011WD\u0001\"c\u0016\u0005r\u0012\u0005\u00032\u001e\u0005\t\u00133\"\t\u0010\"\u0011\tl\"A\u00112\fCy\t\u0003BY\u000f\u0003\u0005\n^\u0011EH\u0011\tEv\u0011!Iy\u0006\"=\u0005B!-\b\u0002CE1\tc$\t\u0005c;\t\u0011%\rD\u0011\u001fC!\u0011WD\u0001\"#\u001a\u0005r\u0012\u0005\u00032\u001e\u0005\t\u0013O\"\t\u0010\"\u0011\tl\"A\u0011\u0012\u000eCy\t\u0003BY\u000f\u0003\u0005\nl\u0011EH\u0011\tEv\u0011!Ii\u0007\"=\u0005B!-\b\u0002CE8\tc$\t\u0005c;\t\u0011%ED\u0011\u001fC!\u0011WD\u0001\"c\u001d\u0005r\u0012\u0005\u00032\u001e\u0005\t\u0013k\"\t\u0010\"\u0011\tl\"A\u0011r\u000fCy\t\u0003JI\b\u0003\u0005\n\u001c\u0012EH\u0011AE)\u0011!Ii\n\"=\u0005\u0002%}\u0005\u0002CES\tc$\t!c*\t\u0011%MF\u0011\u001fC\u0001\u0013kC\u0001\"c0\u0005r\u0012\u0005\u0011\u0012\u0019\u0005\t\u0013\u0013$\t\u0010\"\u0011\nR!A\u00112\u001aCy\t\u0003Ii\r\u0003\u0005\nR\u0012EH\u0011IE)\u0011!I\u0019\u000e\"=\u0005\u0002%U\u0007\u0002CEn\tc$\t%#8\t\u0013]\r\u0006A1A\u0005\u0004]\u0015fA\u0002Gp\u0001\u0001a\t\u000fC\u0006\n\n\u0015-#\u0011!Q\u0001\n!E\u0007bCE\u0006\u000b\u0017\u0012\t\u0011)A\u0005\u0013\u001bA1\"c\u0006\u0006L\t\u0005\t\u0015!\u0003\n\u001a!I\u0001R]C&\t#\u0001A\u0012\u001e\u0005\r\u0019c,Y\u00051A\u0001B\u0003&\u0011\u0012\u0004\u0005\t\u0019g,Y\u0005\"\u0011\rv\"AQ2AC&\t\u0003j)\u0001\u0003\u0005\nT\u0015-C\u0011IE)\u0011!iY!b\u0013\u0005F%E\u0003\u0002CE]\u000b\u0017\"\t%#\u0015\t\u0013-\u0015W1\nQ\u0005R55\u0001\"CLU\u0001\t\u0007I1ALV\r\u0019ay\u0007\u0001\u0001\rr!Y\u0011\u0012BC3\u0005\u0003\u0005\u000b\u0011\u0002Ei\u0011-IY!\"\u001a\u0003\u0002\u0003\u0006I!#\u0004\t\u0017%]QQ\rB\u0001B\u0003%\u0011\u0012\u0004\u0005\n\u0011K,)\u0007\"\u0005\u0001\u0019sB\u0011\u0002$!\u0006f\u0001\u0006K\u0001#+\t\u00191\rUQ\ra\u0001\u0002\u0003\u0006KA#\u0016\t\u00191\u0015UQ\ra\u0001\u0002\u0003\u0006KA#\u0016\t\u00191\u001dUQ\ra\u0001\u0002\u0003\u0006KA#\u0016\t\u00111%UQ\rC!\u0011WD\u0001\u0002d#\u0006f\u0011\u0005\u00032\u001e\u0005\t\u0019\u001b+)\u0007\"\u0011\tl\"AArRC3\t\u0003BY\u000f\u0003\u0005\r\u0012\u0016\u0015D\u0011\tEv\u0011!a\u0019*\"\u001a\u0005\u00021U\u0005\u0002\u0003GN\u000bK\"\t\u0005c;\t\u00111uUQ\rC!\u0015WB\u0001\u0002d(\u0006f\u0011\u0005#R\u001b\u0005\n/_\u0003!\u0019!C\u0002/c3aA$ \u0001\u00019}\u0004bCE\u0005\u000b\u0017\u0013\t\u0011)A\u0005\u0011#D1\"c\u0003\u0006\f\n\u0005\t\u0015!\u0003\n\u000e!Y\u0011rCCF\u0005\u0003\u0005\u000b\u0011\u0002F\u001a\u0011%A)/b#\u0005\u0012\u0001q\t)B\u0004\n.\u0015-\u0005Ac\n\t\u00119%U1\u0012C!\u001d\u0017C\u0001Bc\u0019\u0006\f\u0012\u0005\u00032\u001e\u0005\t\u0015K*Y\t\"\u0011\tl\"AQ\u0012QCF\t\u000bBY\u000f\u0003\u0005\n4\u0016-E\u0011\tHJ\r\u0019qI\u000b\u0001\u0001\u000f,\"Y\u0011\u0012BCQ\u0005\u0003\u0005\u000b\u0011\u0002Ei\u0011-IY!\")\u0003\u0002\u0003\u0006I!#\u0004\t\u0017%]Q\u0011\u0015B\u0001B\u0003%!2\u0007\u0005\n\u0011K,\t\u000b\"\u0005\u0001\u001d[+q!#\f\u0006\"\u0002Q9\u0003\u0003\u0005\u000bb\u0015\u0005FQ\tEv\u0011!I)+\")\u0005B)-\u0004\u0002CEZ\u000bC#\tE$.\u0007\u000f)%\u0002!!\u0001\u000b,!Y\u0011\u0012BCZ\u0005\u0003\u0005\u000b\u0011\u0002Ei\u0011-IY!b-\u0003\u0002\u0003\u0006I!#\u0004\t\u0017%]Q1\u0017B\u0001B\u0003%!2\u0007\u0005\n\u0011K,\u0019\f\"\u0005\u0001\u0015s!\u0001\"#\f\u00064\n\u0005!\u0012\t\u0005\t\u0013{)\u0019\f\"\u0002\u000bJ!A!RJCZ\t\u0003BY\u000f\u0003\u0005\nx\u0015MF\u0011\tF(\u0011%Q\u0019&b-!B\u0013Q)\u0006C\u0005\u000b\\\u0015M\u0006\u0015)\u0003\t*\"a!RLCZ\u0001\u0004\u0005\t\u0015)\u0003\u000bV!I!rLCZA\u0003&\u0001\u0012\u0016\u0005\t\u0015C*\u0019\f\"\u0011\tl\"A!2MCZ\t\u0003BY\u000f\u0003\u0005\u000bf\u0015MF\u0011\tEv\u0011!I)(b-\u0005B!-\b\u0002\u0003F4\u000bg#\t\u0005c;\t\u0011)%T1\u0017C!\u0011WD\u0001\"#*\u00064\u0012\u0005!2\u000e\u0005\t\u0013_)\u0019\f\"\u0011\u000bn!A!\u0012OCZ\t\u0013QY\u0007\u0003\u0005\u000bt\u0015MF\u0011\u0002F;\u0011!QI)b-\u0005B)-\u0004\u0002\u0003FF\u000bg#\tEc\u001b\t\u0011)5U1\u0017C!\u0015WB\u0001Bc$\u00064\u0012%\u00012\u001e\u0005\t\u0015#+\u0019\f\"\u0003\u000b\u0014\"A!\u0012TCZ\t\u0013Ai\n\u0003\u0005\u000b\u001c\u0016MF\u0011\u0002EO\u0011!Qi*b-\u0005B)}\u0005\u0002\u0003FS\u000bg#)Ec*\t\u0011)5V1\u0017C!\u0015_C\u0011b&.\u0001\u0005\u0004%\u0019af.\u0007\r)\r\u0002\u0001\u0001F\u0013\u0011-II!b>\u0003\u0002\u0003\u0006I\u0001#5\t\u0017%-Qq\u001fB\u0001B\u0003%\u0011R\u0002\u0005\f\u0013/)9P!A!\u0002\u0013Q\u0019\u0004C\u0006\nj\u0016](\u0011!Q\u0001\n!%\u0005\"\u0003Es\u000bo$\t\u0002\u0001F\\\u000b\u001dIi#b>\u0001\u0015CA!B#1\u0006x\n\u0007I\u0011\u0001ET\u0011%Q\u0019-b>!\u0002\u0013AI\u000b\u0003\u0005\u000bF\u0016]HQ\tEv\u0011!Q9-b>\u0005B!-\b\u0002\u0003Fe\u000bo$\t\u0005c;\t\u0011)-Wq\u001fC!\u0011WD\u0001B#\u0019\u0006x\u0012\u0005\u00032\u001e\u0005\t\u0013K+9\u0010\"\u0011\u000bl!A!RZC|\t\u0003J\t\u0006\u0003\u0005\u000bP\u0016]H\u0011\tFi\u0011!Q\u0019.b>\u0005B)U\u0007\u0002CEZ\u000bo$\tE#7\t\u0011)}Wq\u001fC!\u0013W4a!d\u0019\u0001\u00015\u0015\u0004bCE\u0005\r?\u0011\t\u0011)A\u0005\u0011#D1\"c\u0003\u0007 \t\u0005\t\u0015!\u0003\n\u000e!Y\u0011r\u0003D\u0010\u0005\u0003\u0005\u000b\u0011\u0002F\u001a\u0011%A)Ob\b\u0005\u0012\u0001ii'B\u0004\n.\u0019}\u0001!$\u0019\t\u00191Ehq\u0004a\u0001\u0002\u0003\u0006KAc\r\t\u00195Udq\u0004a\u0001\u0002\u0003\u0006K\u0001d>\t\u00135]dq\u0004Q!\n!E\u0007\u0002DG=\r?\u0001\r\u0011!Q!\n)U\u0003\"CG>\r?\u0001\u000b\u0015\u0002EU\u0011!I9Hb\b\u0005B5u\u0004\u0002\u0003F'\r?!)\u0005c;\t\u0011)\u0005dq\u0004C#\u0011WD\u0001\"$!\u0007 \u0011\u0015\u00032\u001e\u0005\t\u0015G2y\u0002\"\u0012\tl\"AQ2\u0011D\u0010\t\u0003BY\u000f\u0003\u0005\u000e\u0006\u001a}A\u0011\tEv\u0011!i9Ib\b\u0005B!-\b\u0002CGE\r?!\t\u0005c;\t\u00115-eq\u0004C!\u0011WD\u0001\"$$\u0007 \u0011\u0005\u00032\u001e\u0005\t\u001b\u001f3y\u0002\"\u0011\tl\"AQ\u0012\u0013D\u0010\t\u0003BY\u000f\u0003\u0005\u000e\u0014\u001a}A\u0011\tEv\u0011!i)Jb\b\u0005B!-\b\u0002CGL\r?!\t\u0005c;\t\u00115eeq\u0004C!\u0011WD\u0001\"d'\u0007 \u0011\u0005\u00032\u001e\u0005\t\u001b;3y\u0002\"\u0011\tl\"AQr\u0014D\u0010\t\u0003BY\u000f\u0003\u0005\u000e\"\u001a}A\u0011\tEv\u0011!i\u0019Kb\b\u0005B!-\b\u0002CGS\r?!\t%d*\t\u001155fq\u0004C\u000b\u0013#B\u0001\"d,\u0007 \u0011\u0005\u0013\u0012\u000b\u0005\t\u0013\u001f2y\u0002\"\u0011\nR!AQ\u0012\u0017D\u0010\t\u0003J\t\u0006\u0003\u0005\u000e4\u001a}A\u0011IE)\u0011!I)Kb\b\u0005B)-\u0004\u0002CG[\r?!\t!d.\t\u00115-gq\u0004C!\u0013#B\u0001\u0002d=\u0007 \u0011\u0005CR\u001f\u0005\t\u001b\u00071y\u0002\"\u0011\u000eN\"A!R\u0016D\u0010\t\u0003j\t\u000e\u0003\u0005\u000eX\u001a}A\u0011\tF6\u0011!IILb\b\u0005B%E\u0003\"CFc\r?\u0001K\u0011KGm\u0011!iYNb\b\u0005B%E\u0003\u0002CGo\r?!\t%d8\t\u0011%Mfq\u0004C!\u001bGD1\"$;\u0007 !\u0015\r\u0011\"\u0011\u000el\"AQR\u001eD\u0010\t\u0003J\t\u0006C\u0005\u000ep\u001a}\u0001\u0015)\u0003\f !AQ\u0012\u001fD\u0010\t\u0003Zi\u0002\u0003\u0005\u000et\u001a}A\u0011IG{\u0011!iYPb\b\u0005\u00021-\u0001\u0002CG\u007f\r?!\t%d@\t\u0013]m\u0006A1A\u0005\u0004]ufA\u0002H\r\u0001\u0001qY\u0002C\u0006\n:\u001aU%\u0011!Q\u0001\n!E\u0007bCF\n\r+\u0013\t\u0011)A\u0005\u0013\u001bA1\"#\u000e\u0007\u0016\n\u0005\t\u0015!\u0003\u000b4!I\u0001R\u001dDK\t#\u0001aR\u0004\u0005\r\u001dK1)\n1A\u0001B\u0003&\u0001\u0012\u001b\u0005\r\u001dO1)\n1A\u0001B\u0003&!R\u000b\u0005\n\u001dS1)\n)Q\u0005\u0011SC\u0011Bd\u000b\u0007\u0016\u0002\u0006KA$\f\t\u00139]bQ\u0013Q!\n)U\u0003\"\u0003H\u001d\r+\u0003\u000b\u0015\u0002H\u001e\u0011!iII\"&\u0005B!-\b\u0002CGY\r+#\t%#\u0015\t\u00119\u0005cQ\u0013C!\u0015WB\u0001Bd\u0011\u0007\u0016\u0012\u0005aR\t\u0005\t\u001bg3)\n\"\u0011\nR!Aar\tDK\t\u0003rIE\u0002\u0004\u0013X\u0001\u0001!\u0013\f\u0005\f\u001f\u007f39L!A!\u0002\u0013A\t\u000eC\u0006\u0010B\u001a]&\u0011!Q\u0001\n%5\u0001\"\u0003Es\ro#\t\u0002\u0001J.\u0011!iiJb.\u0005F!-\b\u0002\u0003I\u0005\ro#)\u0005c;\t\u00115-aq\u0017C#\u0013#B\u0001bc<\u00078\u0012\u0015#\u0013\r\u0004\u0007%_\u0001\u0001A%\r\t\u0017=}fq\u0019B\u0001B\u0003%\u0001\u0012\u001b\u0005\f\u001f\u000349M!A!\u0002\u0013Ii\u0001C\u0006\nx\u001a\u001d'\u0011!Q\u0001\n)M\u0002\"\u0003Es\r\u000f$\t\u0002\u0001J\u001a\u0011!i\u0019Lb2\u0005B%E\u0003\u0002CGS\r\u000f$\tEe\u000f\t\u00115-eq\u0019C!\u0011W4aad/\u0001\u0001=u\u0006bCH`\r/\u0014\t\u0011)A\u0005\u0011#D1b$1\u0007X\n\u0005\t\u0015!\u0003\n\u000e!I\u0001R\u001dDl\t#\u0001q2\u0019\u0005\t\u0013_19\u000e\"\u0011\u0010J\"AqR\u001aDl\t\u0003BY\u000f\u0003\u0005\u000e\u0010\u001a]G\u0011\tEv\u0011!i\u0019Kb6\u0005B!-\b\u0002CHh\r/$\t\u0005c;\t\u00115=fq\u001bC!\u0013#B\u0001b$5\u0007X\u0012\u0005s2\u001b\u0004\n/\u0003\u0004\u0001\u0013aA\u0001/\u0007D\u0001\u0002c'\u0007n\u0012\u0005\u0001R\u0014\u0005\t\u001fO4iO\"\u0001\nl\"A13\u001bDw\t\u000b:*\r\u0003\u0005\u0018H\u001a5H\u0011BLe\u0011!\u0019*H\"<\u0005B]M\u0007\u0002\u0003Gz\r[$\t\u0005$>\t\u0011=-bQ\u001eC!/'D\u0001b%.\u0007n\u0012\u0005s3\u001b\u0005\t\u0013\u001f2i\u000f\"\u0011\u0018\\\u001a1\u0001\u0014\u0003\u0001\u00011'A1bd0\b\u0002\t\u0005\t\u0015!\u0003\tR\"Y\u0011r_D\u0001\u0005\u0003\u0005\u000b\u0011\u0002F\u001a\u0011-y9o\"\u0001\u0003\u0006\u0004%\t!c;\t\u0017a]q\u0011\u0001B\u0001B\u0003%\u00112\u0010\u0005\t\u0011K<\t\u0001\"\u0001\u0019\u001a\u00191\u00014\u0005\u0001\u00011KA1bd0\b\u000e\t\u0005\t\u0015!\u0003\tR\"Y\u0011r_D\u0007\u0005\u0003\u0005\u000b\u0011BE\r\u0011-y9o\"\u0004\u0003\u0006\u0004%\t!c;\t\u0017a]qQ\u0002B\u0001B\u0003%\u00112\u0010\u0005\t\u0011K<i\u0001\"\u0001\u0019(\u0019I\u0011R\u001d\u0001\u0011\u0002G\u0005\u0011r\u001d\u0005\t\u0013S<IB\"\u0001\nl\u001a1\u0001\u0012 \u0001\u0001\u0011wD1\"c>\b\u001e\t\u0005\t\u0015!\u0003\n\u001a!Y\u0011\u0012`D\u000f\u0005\u0003%\u000b\u0011BE~\u0011-IIo\"\b\u0003\u0006\u0004%\t!c;\t\u0017)\u001dqQ\u0004B\u0001B\u0003%\u00112\u0010\u0005\t\u0011K<i\u0002\"\u0001\u000b\n!A\u0001\u0012^D\u000f\t\u000bBY\u000f\u0003\u0005\tt\u001euAQ\tE{\u0011!Q\tb\"\b\u0005\u0002)M\u0001\"\u0003M\u0019\u0001\t\u0007I1\u0001M\u001a\r\u0019Qi\u0002\u0001\u0001\u000b !Y\u0011r_D\u0019\u0005\u0003\u0005\u000b\u0011\u0002F\u001a\u0011-IIo\"\r\u0003\u0006\u0004%\t!c;\t\u0017)\u001dq\u0011\u0007B\u0001B\u0003%\u00112\u0010\u0005\t\u0011K<\t\u0004\"\u0001\u000bh\"A!RCD\u0019\t\u000bBY\u000f\u0003\u0005\u000b\u0018\u001dEBQ\tF\r\u0011%A:\u0004\u0001b\u0001\n\u0007AJD\u0002\u0004\u0018`\u0002\u0001q\u0013\u001d\u0005\n\u0011K<\t\u0005\"\u0005\u0001/G,qa#.\bB\tII\"B\u0004\n.\u001d\u0005\u0003a&8\t\u0011%ur\u0011\tC\u0001/KD\u0001\"c\f\bB\u0011\u0005s\u0013\u001e\u0005\t\u0015;;\t\u0005\"\u0011\u0018n\"AArAD!\t\u0003Z\u0019\u000e\u0003\u0005\u0012 \u001d\u0005C\u0011\tEv\u0011!\u0001Zg\"\u0011\u0005B!-\b\u0002CK\u0018\u000f\u0003\"\tef7\t\u00115=v\u0011\tC!/7D\u0001\"c\u0014\bB\u0011\u0005s3\u001c\u0005\t)7;\t\u0005\"\u0011\u0018r\"AASVD!\t\u0003:*\u0010\u0003\u0005\u0017\f\u001e\u0005C\u0011IEv\u0011!1*h\"\u0011\u0005B%-\b\u0002CGS\u000f\u0003\"\tEe\u000f\t\u0011Q}w\u0011\tC!\u0013#B\u0001\"f\u0006\bB\u0011\u0005\u0013\u0012\u000b\u0005\t)C<\t\u0005\"\u0011\nR!AA2_D!\t\u0003:J\u0010\u0003\u0005\n:\u001e\u0005C\u0011IE)\u0011!\t*k\"\u0011\u0005B)U\u0007\u0002CIT\u000f\u0003\"\t%%+\t\u00119=t\u0011\tC!\u0015+D\u0001B#,\bB\u0011\u0005\u0003\u0014\u0001\u0005\t\u001fW9\t\u0005\"\u0011\u000bl!A\u0011RUD!\t\u0003RY\u0007\u0003\u0005\u00146\u001e\u0005C\u0011\tF6\u0011!\u0011jn\"\u0011\u0005Ba\u001d\u0001\u0002CEZ\u000f\u0003\"\t\u0001g\u0003\t\u000fau\u0002\u0001\"\u0005\u0018\\\"Q\u0001t\b\u0001\t\u0006\u0004%\taf7\t\u000fa\u0005\u0003\u0001\"\u0001\u0019D!9\u0001T\n\u0001\u0005\u0002a=\u0003b\u0002M5\u0001\u0011\u0005\u00014\u000e\u0005\b1k\u0002A\u0011\u0001M<\u0011\u001dAj\t\u0001C\u00011\u001fCq\u0001g&\u0001\t\u0003AJ\nC\u0005\u0019\u001e\u0002\u0011\r\u0015\"\u0003\u0019 \"9\u0001\u0014\u0018\u0001\u0005\u0002am\u0006b\u0002Ma\u0001\u0011\u0005\u00014\u0019\u0005\b1\u0017\u0004A\u0011\u0001Mg\u0011\u001dA*\u000e\u0001C\u00011/Dq\u0001g;\u0001\t\u0003Aj\u000fC\u0004\u001a\u0002\u0001!\t!g\u0001\t\u000fe]\u0001\u0001\"\u0001\u001a\u001a!9\u0011\u0014\u0005\u0001\u0005\u0002e\r\u0002bBM\u0014\u0001\u0011\u0015\u0011\u0014\u0006\u0004\u00073c\u0001\u0001)g\r\t\u00175exQ\u0015BK\u0002\u0013\u0005\u0011\u0012\u000b\u0005\f3w9)K!E!\u0002\u0013A\t\u000eC\u0006\u0010,\u001d\u0015&Q3A\u0005\u0002)-\u0004bCM\u001f\u000fK\u0013\t\u0012)A\u0005\u0015+B1\"g\u0010\b&\nU\r\u0011\"\u0001\u001aB!Y\u0011\u0014JDS\u0005#\u0005\u000b\u0011BM\"\u0011!A)o\"*\u0005\u0002e-\u0003BCI(\u000fK\u000b\t\u0011\"\u0001\u001aV!Q\u0011sKDS#\u0003%\t!'\u0018\t\u0015EusQUI\u0001\n\u0003\u0019*\u0006\u0003\u0006\u0014Z\u001d\u0015\u0016\u0013!C\u00013CB!\"e\u0018\b&\u0006\u0005I\u0011\tG\u0006\u0011)\t\ng\"*\u0002\u0002\u0013\u0005\u0001r\u0015\u0005\u000b#G:)+!A\u0005\u0002e\u0015\u0004BCI5\u000fK\u000b\t\u0011\"\u0011\u0012l!Q\u0011SODS\u0003\u0003%\t!'\u001b\t\u0015EmtQUA\u0001\n\u0003Jj\u0007\u0003\u0006\u0012\u0002\u001e\u0015\u0016\u0011!C!\u0011wC!\"%\"\b&\u0006\u0005I\u0011IM9\u000f\u001dI*\b\u0001E\u00013o2q!'\r\u0001\u0011\u0003IJ\b\u0003\u0005\tf\u001e=G\u0011AM>\u0011)Ijhb4C\u0002\u0013\u0005\u0011\u0014\t\u0005\n3\u007f:y\r)A\u00053\u0007B!b&\u001e\bP\u0006\u0005I\u0011QMA\u0011)IJib4\u0012\u0002\u0013\u0005\u0011\u0014\r\u0005\u000b/\u007f:y-!A\u0005\u0002f-\u0005BCMJ\u000f\u001f\f\n\u0011\"\u0001\u001ab\u001911\u0013\u0001\u0001G'\u0007A1b%\u0002\b`\n\u0005\r\u0011\"\u0003\fh\"Y1sADp\u0005\u0003\u0007I\u0011BJ\u0005\u0011-\u0019jab8\u0003\u0012\u0003\u0006Kac7\t\u0017M=qq\u001cBA\u0002\u0013%!2\u000e\u0005\f'#9yN!a\u0001\n\u0013\u0019\u001a\u0002C\u0006\u0014\u0018\u001d}'\u0011#Q!\n)U\u0003bCJ\r\u000f?\u0014\t\u0019!C\u0005'7A1b%\b\b`\n\u0005\r\u0011\"\u0003\u0014 !Y13EDp\u0005#\u0005\u000b\u0015\u0002J\u0000\u0011!A)ob8\u0005\u0012M\u0015\u0002\u0002CJ\u0017\u000f?$\t\u0001c*\t\u0011M=rq\u001cC\u0001'cA\u0001bd\u000b\b`\u0012\u0005!2\u000e\u0005\t'k9y\u000e\"\u0001\u0014\u001c!A!RVDp\t\u000b\u0019:\u0004\u0003\u0005\u0014>\u001d}G\u0011\u0002G\u0006\u0011!iipb8\u0005B5}\b\u0002CJ \u000f?$Ia%\u0011\t\u0011M\u0015sq\u001cC\u0001'7A!\"e\u0014\b`\u0006\u0005I\u0011AJ%\u0011)\t:fb8\u0012\u0002\u0013\u00051\u0013\u000b\u0005\u000b#;:y.%A\u0005\u0002MU\u0003BCJ-\u000f?\f\n\u0011\"\u0001\u0014\\!Q1sLDp\u0013\u0003%\tac:\t\u0015M\u0005tq\\E\u0001\n\u0003QY\u0007\u0003\u0006\u0014d\u001d}\u0017\u0012!C\u0001'7A!\"e\u0018\b`\u0006\u0005I\u0011\tG\u0006\u0011)\t\ngb8\u0002\u0002\u0013\u0005\u0001r\u0015\u0005\u000b#G:y.!A\u0005\u0002M\u0015\u0004BCI5\u000f?\f\t\u0011\"\u0011\u0012l!Q\u0011SODp\u0003\u0003%\ta%\u001b\t\u0015Emtq\\A\u0001\n\u0003\u001aj\u0007\u0003\u0006\u0012\u0002\u001e}\u0017\u0011!C!\u0011wC!\"%\"\b`\u0006\u0005I\u0011IJ9\u000f%I*\nAA\u0001\u0012\u0013I:JB\u0005\u0014\u0002\u0001\t\t\u0011#\u0003\u001a\u001a\"A\u0001R\u001dE\u0014\t\u0003Ij\n\u0003\u0006\u000e~\"\u001d\u0012\u0011!C##\u0007C!b&\u001e\t(\u0005\u0005I\u0011QMP\u0011)9z\bc\n\u0002\u0002\u0013\u0005\u0015t\u0015\u0005\n3_\u0003!\u0019)C\u0007'7A1\"'-\u0001\u0005\u0004%)\u0001#!\u001a4\"I\u0011T\u0017\u0001\u0005\u0006!\u0005\u0015t\u0017\u0005\n3\u007f\u0003AQ\u0001EA3\u00034a!%\f\u0001\u0001F=\u0002bCI\"\u0011s\u0011)\u001a!C\u0001\u0011WD1\"%\u0012\t:\tE\t\u0015!\u0003\tn\"YA\u0012\u0001E\u001d\u0005+\u0007I\u0011AFj\u0011-\t:\u0005#\u000f\u0003\u0012\u0003\u0006I!#&\t\u0011!\u0015\b\u0012\bC\u0001#\u0013B!\"e\u0014\t:\u0005\u0005I\u0011AI)\u0011)\t:\u0006#\u000f\u0012\u0002\u0013\u0005\u0011\u0013\f\u0005\u000b#;BI$%A\u0005\u00021\r\u0003BCI0\u0011s\t\t\u0011\"\u0011\r\f!Q\u0011\u0013\rE\u001d\u0003\u0003%\t\u0001c*\t\u0015E\r\u0004\u0012HA\u0001\n\u0003\t*\u0007\u0003\u0006\u0012j!e\u0012\u0011!C!#WB!\"%\u001e\t:\u0005\u0005I\u0011AI<\u0011)\tZ\b#\u000f\u0002\u0002\u0013\u0005\u0013S\u0010\u0005\u000b#\u0003CI$!A\u0005B!m\u0006BCG\u007f\u0011s\t\t\u0011\"\u0011\u0012\u0004\"Q\u0011S\u0011E\u001d\u0003\u0003%\t%e\"\b\u0013e\u0015\u0007!!A\t\u0002e\u001dg!CI\u0017\u0001\u0005\u0005\t\u0012AMe\u0011!A)\u000fc\u0018\u0005\u0002eE\u0007BCG\u007f\u0011?\n\t\u0011\"\u0012\u0012\u0004\"QqS\u000fE0\u0003\u0003%\t)g5\t\u0015]}\u0004rLA\u0001\n\u0003KJ\u000eC\u0005\u001ab\u0002\u0011\r\u0011\"\u0001\u001ad\"9\u0011T\u001d\u0001\u0005\u0002e\u001d\bbBMv\u0001\u0011%\u0011T\u001e\u0005\b#\u0017\u0003AQAM{\u0011\u001d\tZ\t\u0001C\u00033{Dq!%%\u0001\t\u000bQZ\u0001C\u0004\u0012\u0012\u0002!)Ag\u0004\u0003\u000fMKXNY8mg*!\u00012\u0010E?\u0003!Ig\u000e^3s]\u0006d'\u0002\u0002E@\u0011\u0003\u000bqA]3gY\u0016\u001cGO\u0003\u0002\t\u0004\u0006)1oY1mC\u000e\u00011#\u0002\u0001\t\n\"E\u0005\u0003\u0002EF\u0011\u001bk!\u0001#!\n\t!=\u0005\u0012\u0011\u0002\u0007\u0003:L(+\u001a4\u0011\t!M\u0005\u0012T\u0007\u0003\u0011+SA\u0001c&\t~\u0005\u0019\u0011\r]5\n\t!]\u0004RS\u0001\u0007I%t\u0017\u000e\u001e\u0013\u0015\u0005!}\u0005\u0003\u0002EF\u0011CKA\u0001c)\t\u0002\n!QK\\5u\u0003\rIGm]\u000b\u0003\u0011S\u0003B\u0001c#\t,&!\u0001R\u0016EA\u0005\rIe\u000e^\u0001\bS\u0012\u001cx\fJ3r)\u0011Ay\nc-\t\u0013!U6!!AA\u0002!%\u0016a\u0001=%c\u00059r-\u001a;DkJ\u0014XM\u001c;Ts6\u0014w\u000e\\%e\u0007>,h\u000e^\u0001\u0007]\u0016DH/\u00133\u0015\u0005!%\u0016aD0sK\u000e,(o]5p]R\u000b'\r\\3\u0016\u0005!\u0005\u0007\u0003\u0003Eb\u0011\u001bD\t\u000e#+\u000e\u0005!\u0015'\u0002\u0002Ed\u0011\u0013\f\u0011\"[7nkR\f'\r\\3\u000b\t!-\u0007\u0012Q\u0001\u000bG>dG.Z2uS>t\u0017\u0002\u0002Eh\u0011\u000b\u00141!T1q!\rA\u0019nY\u0007\u0002\u0001\t11+_7c_2\u001c\u0012b\u0019Em\u0017oZyh#\"\u0011\u0007!MgD\u0001\u000bTs6\u0014w\u000e\\\"p]R,\u0007\u0010^!qS&k\u0007\u000f\\\n\u0006=!%\u0005r\u001c\t\u0005\u0011'D\t/\u0003\u0003\td\"e%!C*z[\n|G.\u00119j\u0003\u0019a\u0014N\\5u}Q\u0011\u0001\u0012\\\u0001\u000bSN4%/Z3UKJlWC\u0001Ew!\u0011AY\tc<\n\t!E\b\u0012\u0011\u0002\b\u0005>|G.Z1o\u0003)\t7O\u0012:fKR+'/\\\u000b\u0003\u0011o\u0004B\u0001c5\b\u001e\tqaI]3f)\u0016\u0014XnU=nE>d7\u0003CD\u000f\u0011{L\u0019/#<\u0011\t!MG\u0011\u001f\u0002\u000b)\u0016\u0014XnU=nE>d7C\u0002Cy\u0011#L\u0019\u0001\u0005\u0003\tT&\u0015\u0011\u0002BE\u0004\u00113\u0013Q\u0002V3s[NKXNY8m\u0003BL\u0017!C5oSR|uO\\3s\u0003\u001dIg.\u001b;Q_N\u0004B\u0001c5\n\u0010%!\u0011\u0012CE\n\u0005!\u0001vn]5uS>t\u0017\u0002BE\u000b\u0011s\u0012\u0011\u0002U8tSRLwN\\:\u0002\u0011%t\u0017\u000e\u001e(b[\u0016\u0004B\u0001c5\n\u001c%!\u0011RDE\u0010\u0005!!VM]7OC6,\u0017\u0002BE\u0011\u0011s\u0012QAT1nKN$\u0002\u0002#@\n&%\u001d\u0012\u0012\u0006\u0005\t\u0013\u0013!I\u00101\u0001\tR\"A\u00112\u0002C}\u0001\u0004Ii\u0001\u0003\u0005\n\u0018\u0011e\b\u0019AE\r\u0003-y&/\u001a4fe\u0016t7-\u001a3\u0003%QK\b/Z(g\u00072|g.\u001a3Ts6\u0014w\u000e\\\u0001\t]\u0006lWm\u0018\u0013fcR!\u0001rTE\u001a\u0011!I)\u0004b@A\u0002%]\u0012\u0001\u00028b[\u0016\u0004B\u0001c5\n:%!\u00112HE\u0010\u0005\u0011q\u0015-\\3\u0002\u0015\u0005\u001ch*Y7f)f\u0004X\r\u0006\u0003\n\u001a%\u0005\u0003\u0002CE\"\u000b\u0003\u0001\r!c\u000e\u0002\u00039\fq![:WC2,X-\u0001\u0006jgZ\u000b'/[1cY\u0016\f1\"[:UKJlW*Y2s_\u0006\t\u0012n]!o]>$\u0018\r^5p]6\u000b7M]8\u0002%%\u001c8)\u00199ukJ,GMV1sS\u0006\u0014G.Z\u0001\u0010G>l\u0007/\u00198j_:\u001c\u00160\u001c2pYV\u0011\u0001\u0012[\u0001\f[>$W\u000f\\3DY\u0006\u001c8/\u0001\u0005jg\n\u0013\u0018\u000eZ4f\u0003II7/R1sYfLe.\u001b;jC2L'0\u001a3\u0002\u0011%\u001cX*\u001a;i_\u0012\f\u0001\"[:N_\u0012,H.Z\u0001\rSN|e/\u001a:m_\u0006$W\rZ\u0001\u0011SN4\u0016\r\\;f!\u0006\u0014\u0018-\\3uKJ\f\u0011#[:TKR$XM\u001d)be\u0006lW\r^3s\u0003=I7\u000fR3gCVdGoR3ui\u0016\u0014\u0018AC5t\u0003\u000e\u001cWm]:pe\u0006A\u0011n]$fiR,'/\u0001\u0005jgN+G\u000f^3s\u00031I7\u000fT8dC2$U/\\7z\u0003II7o\u00117bgN\u001cuN\\:ueV\u001cGo\u001c:\u0002%%\u001cX*\u001b=j]\u000e{gn\u001d;sk\u000e$xN]\u0001\u000eSN\u001cuN\\:ueV\u001cGo\u001c:\u0002\u001f%\u001c\b+Y2lC\u001e,wJ\u00196fGR\fA#[:Fq&\u001cH/\u001a8uS\u0006dG.\u001f\"pk:$\u0017!\u0006:fg>dg/Z(wKJdw.\u00193fI\u001ac\u0017m\u001a\u000b\u0005\u0013wJ\t\n\u0005\u0003\n~%-e\u0002BE@\u0013\u000f\u0003B!#!\t\u00026\u0011\u00112\u0011\u0006\u0005\u0013\u000bC))\u0001\u0004=e>|GOP\u0005\u0005\u0013\u0013C\t)\u0001\u0004Qe\u0016$WMZ\u0005\u0005\u0013\u001bKyI\u0001\u0004TiJLgn\u001a\u0006\u0005\u0013\u0013C\t\t\u0003\u0005\n\u0014\u0016M\u0002\u0019AEK\u0003\u00111G.Y4\u0011\t!-\u0015rS\u0005\u0005\u00133C\tI\u0001\u0003M_:<\u0017A\u0003:fM\u0016\u0014XM\\2fI\u0006q!/\u001a4fe\u0016t7-\u001a3`I\u0015\fH\u0003\u0002EP\u0013CC\u0001\"c)\u00068\u0001\u0007\u0001\u0012[\u0001\u0002q\u0006\u0001R\r_5ti\u0016tG/[1m\u0005>,h\u000eZ\u000b\u0003\u0013S\u0003B\u0001c5\n,&!\u0011RVEX\u0005)!\u0016\u0010]3C_VtGm]\u0005\u0005\u0013cCIHA\u0003UsB,7/A\bdY>tWmU=nE>d\u0017*\u001c9m)\u0019Ai0c.\n<\"A\u0011\u0012XC\u001e\u0001\u0004A\t.A\u0003po:,'\u000f\u0003\u0005\n>\u0016m\u0002\u0019AEK\u0003!qWm\u001e$mC\u001e\u001c\u0018!D2paf\fE\u000f\u001e:t\rJ|W\u000e\u0006\u0003\nD&\u0015WB\u0001Cy\u0011!I9-\"\u0010A\u0002!u\u0018\u0001C8sS\u001eLg.\u00197\u0002\u000b\u0005d\u0017.Y:\u0002\u0011M,G/\u00117jCN$B\u0001#@\nP\"A\u0011\u0012ZC!\u0001\u0004A\t.A\u0006pkR,'oU8ve\u000e,\u0017AD:fi6{G-\u001e7f\u00072\f7o\u001d\u000b\u0005\u0013\u0007L9\u000e\u0003\u0005\nZ\u0016\u0015\u0003\u0019\u0001Ei\u0003\u0015\u0019G.\u0019>{\u0003))\u0007\u0010]1oI:\u000bW.\u001a\u000b\u0005\u0011?Ky\u000e\u0003\u0005\nb\u0016\u001d\u0003\u0019\u0001Ei\u0003\u0011\u0011\u0017m]3\u0011\t!Mw\u0011\u0004\u0002\u000b\rJ,WmU=nE>d7\u0003BD\r\u0011#\faa\u001c:jO&tWCAE>!\u0011A\u0019.c<\n\t%E\u00182\u001f\u0002\u0012\rJ,W\rV3s[NKXNY8m\u0003BL\u0017\u0002BE{\u0011+\u0013\u0011\"\u00138uKJt\u0017\r\\:\u0002\u000b9\fW.\u001a\u0019\u0002\rY\fG.^31!\u0019AY)#@\u000b\u0002%!\u0011r EA\u0005!a$-\u001f8b[\u0016t\u0004\u0003\u0002EF\u0015\u0007IAA#\u0002\t\u0002\n\u0019\u0011I\\=\u0002\u000f=\u0014\u0018nZ5oAQA\u0001r\u001fF\u0006\u0015\u001bQy\u0001\u0003\u0005\nx\u001e\u001d\u0002\u0019AE\r\u0011%IIpb\n\u0005\u0002\u0004IY\u0010\u0003\u0005\nj\u001e\u001d\u0002\u0019AE>\u0003\u00151\u0018\r\\;f+\tQ\t!\u0001\u0006jg\u001a\u0013X-\u001a+za\u0016\f!\"Y:Ge\u0016,G+\u001f9f+\tQY\u0002\u0005\u0003\tT\u001eE\"A\u0004$sK\u0016$\u0016\u0010]3Ts6\u0014w\u000e\\\n\t\u000fcQ\t#c9\u000bbB!\u00012[C|\u0005)!\u0016\u0010]3TW>dW-\\\n\u0005\u000boT9\u0003\u0005\u0003\tT\u0016M&A\u0003+za\u0016\u001c\u00160\u001c2pYN1Q1\u0017Ei\u0015[\u0001B\u0001c5\u000b0%!!\u0012\u0007EM\u00055!\u0016\u0010]3Ts6\u0014w\u000e\\!qSB!\u00012\u001bF\u001b\u0013\u0011Q9$c\b\u0003\u0011QK\b/\u001a(b[\u0016$\u0002Bc\n\u000b<)u\"r\b\u0005\t\u0013\u0013)Y\f1\u0001\tR\"A\u00112BC^\u0001\u0004Ii\u0001\u0003\u0005\n\u0018\u0015m\u0006\u0019\u0001F\u001a#\u0011Q\u0019Ec\n\u0011\t!-%RI\u0005\u0005\u0015\u000fB\tI\u0001\u0003Ok2dG\u0003\u0002F\u001a\u0015\u0017B\u0001\"c\u0011\u0006@\u0002\u0007\u0011rG\u0001\u000fSNtuN\\\"mCN\u001cH+\u001f9f)\u0011IYH#\u0015\t\u0011%MU1\u0019a\u0001\u0013+\u000b!\u0002^=d_:\u001c\u0015m\u00195f!\u0011A\u0019Nc\u0016\n\t)e\u0013r\u0016\u0002\u0005)f\u0004X-\u0001\u0006us\u000e|gNU;o\u0013\u0012\f\u0001\u0002\u001e9f\u0007\u0006\u001c\u0007.Z\u0001\niB,\u0007+\u001a:j_\u0012\fa\"[:BEN$(/Y2u)f\u0004X-A\bjg\u000e{g\u000e\u001e:bm\u0006\u0014\u0018.\u00198u\u0003-I7oQ8wCJL\u0017M\u001c;\u0002\u001f%\u001cH+\u001f9f!\u0006\u0014\u0018-\\3uKJ\fq#[:UsB,\u0007+\u0019:b[\u0016$XM](s'.|G.Z7\u0016\u0005)UC\u0003\u0002EP\u0015_B\u0001\"#\u000e\u0006\\\u0002\u0007\u0011rG\u0001\n]\u0016<\bK]3gSb\f!B\\3x)f\u0004XMU3g)\u0011Q)Fc\u001e\t\u0011)eTq\u001ca\u0001\u0015w\nQ\u0001^1sON\u0004bA# \u000b\u0004*Uc\u0002\u0002EF\u0015\u007fJAA#!\t\u0002\u00069\u0001/Y2lC\u001e,\u0017\u0002\u0002FC\u0015\u000f\u0013A\u0001T5ti*!!\u0012\u0011EA\u0003)!\b/Z0%i&lWm]\u0001\u0010if\u0004XmQ8ogR\u0014Xo\u0019;pe\u0006)A\u000f]3I\u0017\u0006)B/_2p]\u000e\u000b7\r[3OK\u0016$7/\u00169eCR,\u0017!D:fiRK8m\u001c8DC\u000eDW\r\u0006\u0003\t *U\u0005\u0002\u0003FL\u000bS\u0004\rA#\u0016\u0002\u000bQL8m\u001c8\u0002)5\f\u0017PY3Va\u0012\fG/\u001a+za\u0016\u001c\u0015m\u00195f\u0003=)\b\u000fZ1uKRK\b/Z\"bG\",\u0017\u0001C5oM>|F%Z9\u0015\t!}%\u0012\u0015\u0005\t\u0015G+y\u000f1\u0001\u000bV\u0005\u0011A\u000f]\u0001\u0014SNtuN\u001c\"piR|WnU;c\u00072\f7o\u001d\u000b\u0005\u0011[TI\u000b\u0003\u0005\u000b,\u0016E\b\u0019\u0001Ei\u0003\u0011!\b.\u0019;\u0002\u000bI,7/\u001a;\u0015\t)E&2W\u0007\u0003\u000bgC\u0001B#.\u0006t\u0002\u0007!RK\u0001\nG>l\u0007\u000f\\3uKJ$\"B#\t\u000b:*m&R\u0018F`\u0011!IIA\"\u0001A\u0002!E\u0007\u0002CE\u0006\r\u0003\u0001\r!#\u0004\t\u0011%]a\u0011\u0001a\u0001\u0015gA\u0001\"#;\u0007\u0002\u0001\u0007\u0001\u0012R\u0001\u0006Y\u00164X\r\\\u0001\u0007Y\u00164X\r\u001c\u0011\u0002\u0011%\u001c8k[8mK6\f1#[:Fq&\u001cH/\u001a8uS\u0006d7k[8mK6\fA\"[:H\u0003\u0012#6k[8mK6\fA\"[:UsB,7k[8mK6\f1\u0002Z3TW>dW-\\5{K\u0006qQO\u001c9bG.dunY1uS>tWC\u0001EE\u0003)!\u0018\u0010]3QCJ\fWn]\u000b\u0003\u0015/\u0004bA# \u000b\u0004\"EGC\u0002F\u0011\u00157Ti\u000e\u0003\u0005\n:\u001am\u0001\u0019\u0001Ei\u0011!IiLb\u0007A\u0002%U\u0015A\u00038b[\u0016\u001cFO]5oOB!\u00012\u001bFr\u0013\u0011Q)/c=\u0003#\u0019\u0013X-\u001a+za\u0016\u001c\u00160\u001c2pY\u0006\u0003\u0018\u000e\u0006\u0004\u000b\u001c)%(2\u001e\u0005\t\u0013o<I\u00041\u0001\u000b4!A\u0011\u0012^D\u001d\u0001\u0004IY(A\u0007jg\u0016C\u0018n\u001d;f]RL\u0017\r\\\u0001\u0013SN\u0004\u0016M]1n/&$\b\u000eR3gCVdG/A\u0007jg\nKh*Y7f!\u0006\u0014\u0018-\\\u0001\u0019SNLU\u000e\u001d7f[\u0016tG/\u0019;j_:\f%\u000f^5gC\u000e$\u0018AB5t\u0015\u00064\u0018-A\u0004jg\u001aKW\r\u001c3\u0002\u0019%\u001cX*\u001e;bE2,g+\u00197\u0002\u000b%\u001ch+\u00197\u0002\u000b%\u001ch+\u0019:\u0002\u0015%\u001c\u0018IY:ue\u0006\u001cG/A\u0007jgB\u0013\u0018N^1uKRC\u0017n]\u0001\u0010SN\u0004&o\u001c;fGR,G\r\u00165jg\u0006Q\u0011n\u001d&bm\u0006,e.^7\u0002!%\u001c(*\u0019<b\u0003:tw\u000e^1uS>t\u0017AE5t'R\fG/[2B]:|G/\u0019;j_:\fqB\\3x\u001d\u0016\u001cH/\u001a3Ts6\u0014w\u000e\u001c\u000b\u000b\u0011#\\ya#\u0005\f\u0016-]\u0001bBE\u001bg\u0001\u0007\u0011r\u0007\u0005\b\u0017'\u0019\u0004\u0019AE\u0007\u0003\r\u0001xn\u001d\u0005\b\u0013{\u001b\u0004\u0019AEK\u0011\u001dYIb\ra\u0001\u0011[\fq![:DY\u0006\u001c8/A\u000bl]><h\u000eR5sK\u000e$8+\u001e2dY\u0006\u001c8/Z:\u0016\u0005-}\u0001CBE?\u0017CA\t.\u0003\u0003\f$%=%aA*fi\u0006A1/\u001a7g)f\u0004X-A\u0006cCN,7\t\\1tg\u0016\u001c\u0018AB7pIVdW-\u0001\u0006uQ&\u001c\bK]3gSb\f1b];qKJ\u0004&/\u001a4jqR!!RKF\u0019\u0011\u001dY\u0019$\u000fa\u0001\u0015+\n\u0001b];qKJ$\b/Z\u0001\u000eif\u0004XmU5h]\u0006$XO]3\u0002\u001fQL\b/Z*jO:\fG/\u001e:f\u0013:$BA#\u0016\f<!91RH\u001eA\u0002)U\u0013\u0001B:ji\u0016\fa\u0001^8UsB,\u0017\u0001\u0003;p)f\u0004X-\u00138\u0015\t)U3R\t\u0005\b\u0017{i\u0004\u0019\u0001F+\u0003E!x\u000eV=qK\u000e{gn\u001d;sk\u000e$xN]\u0001\u000fg\u0016$\u0018I\u001c8pi\u0006$\u0018n\u001c8t)\u0011Yiec\u0014\u000e\u0003yAqa#\u0015@\u0001\u0004Y\u0019&\u0001\u0004b]:|Go\u001d\t\u0007\u0011\u0017[)f#\u0017\n\t-]\u0003\u0012\u0011\u0002\u000byI,\u0007/Z1uK\u0012t\u0004\u0003\u0002Ej\u00177JAa#\u0018\f`\tq\u0011I\u001c8pi\u0006$\u0018n\u001c8J]\u001a|\u0017\u0002BF1\u0011s\u0012q\"\u00118o_R\fG/[8o\u0013:4wn]\u0001\u0007O\u0016$H/\u001a:\u0002\rM,G\u000f^3s\u0003%\u0019w.\u001c9b]&|g.\u0001\u0004j]\u001a|\u0017J\u001c\u000b\u0005\u0015+Zi\u0007C\u0004\f>\r\u0003\rA#\u0016\u0002\u0013=4XM\u001d:jI\u0016\u001c\u0018A\u00039be\u0006lG*[:ugV\u00111R\u000f\t\u0007\u0015{R\u0019Ic6\u0011\t-e42P\u0007\u0003\u0011sJAa# \tz\tA\u0001*Y:GY\u0006<7\u000f\u0005\u0004\tT.\u0005\u0005\u0012[\u0005\u0005\u0017\u0007[yFA\u0006B]:|G/\u0019;bE2,\u0007\u0003\u0002Ej\u0017\u000fKAa##\f\f\nQ\u0011\t\u001e;bG\"\f'\r\\3\n\t-5\u0005\u0012\u0010\u0002\u000f'R$\u0017\t\u001e;bG\"lWM\u001c;t)!A\tn#%\f\u0014.U\u0005bBE\u0005O\u0002\u0007\u0001\u0012\u001b\u0005\b\u0013\u00179\u0007\u0019AE\u0007\u0011\u001dI9b\u001aa\u0001\u0013o\t\u0001b\u0018:bo:\fW.Z\u000b\u0003\u0013o\tAb\u0018:bo:\fW.Z0%KF$B\u0001c(\f \"I\u0001RW5\u0002\u0002\u0003\u0007\u0011rG\u0001\n?J\fwO\\1nK\u0002\na\"[:Ts:\u001c\u0007N]8oSj,G-A\njg\u0006\u0003(/[8sSRC'/Z1eg\u00064WM\u0001\nBG\u000e,7o\u001d\"pk:$\u0017M]=UsB,'AD!o]>$\u0018\r^5p]RK\b/Z\t\u0005\u0015\u0007ZiK\u0005\u0003\f0\"EgABFYG\u0002YiK\u0001\u0007=e\u00164\u0017N\\3nK:$h(B\u0004\f6.=\u0006ec.\u0003\u00119\u000bW.\u001a+za\u0016\u0004Ba#/\f<6\t1-\u0003\u0003\f6\"\u0005\u0018a\u0002:bo:\fW.Z\u000b\u0003\u0017o#B\u0001c(\fD\"9\u00112\t:A\u0002%]\u0012!\u00044mCR$XM\\3e\u001d\u0006lW\r\u0006\u0003\f8.%\u0007bBE\"i\u0002\u0007\u0011rG\u0001\n?J\fwo\\<oKJ\f\u0011b\u0018:bo\u001ad\u0017mZ:\u0002\u0011I\fwo\\<oKJ\f\u0001B]1xM2\fwm]\u000b\u0003\u0013+\u000b!!\u001b3\u0002\u0007%$\u0007%\u0001\u0005`m\u0006d\u0017\u000e\u001a+p!\u0011A\u0019n#8\n\t-}7\u0012\u001d\u0002\u0007!\u0016\u0014\u0018n\u001c3\n\t-\r\b\u0012\u0010\u0002\f'fl'm\u001c7UC\ndW-A\u0004wC2LG\rV8\u0016\u0005-m\u0017a\u0003<bY&$Gk\\0%KF$B\u0001c(\fn\"9\u00112U?A\u0002-m\u0017aB:fi:\u000bW.\u001a\u000b\u0005\u0017s[\u0019\u0010C\u0004\n6y\u0004\r!c\u000e\u0002%\rD\u0017M\\4f\u001d\u0006lW-\u00138Po:,'o\u001d\u000b\u0005\u0011?[I\u0010C\u0004\n6}\u0004\r!c\u000e\u0002\u001bI\fwO\u00127bON#(/\u001b8h)\u0011IYhc@\t\u00111\u0005\u0011\u0011\u0001a\u0001\u0013+\u000bA!\\1tW\u0006yA-\u001a2vO\u001ac\u0017mZ*ue&tw-\u0001\bwCJL\u0017M\\2f'R\u0014\u0018N\\4\u0002\u0011\u0019d\u0017mZ'bg.\faC\u001a7bON,\u0005\u0010\u001d7b]\u0006$\u0018n\u001c8TiJLgnZ\u000b\u0003\u0019\u001b\u0001B\u0001d\u0004\r\u001a5\u0011A\u0012\u0003\u0006\u0005\u0019'a)\"\u0001\u0003mC:<'B\u0001G\f\u0003\u0011Q\u0017M^1\n\t%5E\u0012C\u0001\u0011g\"|'\u000f^*z[\n|Gn\u00117bgN\fAc]=nE>d7I]3bi&|gn\u0015;sS:<\u0017\u0001\u00038foZ\u000bG.^3\u0015\u0011!uH2\u0005G\u0013\u0019OA\u0001\"#\u000e\u0002\u0012\u0001\u0007\u0011\u0012\u0004\u0005\u000b\u0017'\t\t\u0002%AA\u0002%5\u0001BCE_\u0003#\u0001\n\u00111\u0001\n\u0016\u0006\u0011b.Z<WC2,X\r\n3fM\u0006,H\u000e\u001e\u00133+\taiC\u000b\u0003\n\u000e1=2F\u0001G\u0019!\u0011a\u0019\u0004$\u0010\u000e\u00051U\"\u0002\u0002G\u001c\u0019s\t\u0011\"\u001e8dQ\u0016\u001c7.\u001a3\u000b\t1m\u0002\u0012Q\u0001\u000bC:tw\u000e^1uS>t\u0017\u0002\u0002G \u0019k\u0011\u0011#\u001e8dQ\u0016\u001c7.\u001a3WCJL\u0017M\\2f\u0003IqWm\u001e,bYV,G\u0005Z3gCVdG\u000fJ\u001a\u0016\u00051\u0015#\u0006BEK\u0019_\t1B\\3x-\u0006\u0014\u0018.\u00192mKRA\u0001R G&\u0019\u001bby\u0005\u0003\u0005\n6\u0005]\u0001\u0019AE\r\u0011)Y\u0019\"a\u0006\u0011\u0002\u0003\u0007\u0011R\u0002\u0005\u000b\u0013{\u000b9\u0002%AA\u0002%U\u0015!\u00068foZ\u000b'/[1cY\u0016$C-\u001a4bk2$HEM\u0001\u0016]\u0016<h+\u0019:jC\ndW\r\n3fM\u0006,H\u000e\u001e\u00134\u0003EqWm\u001e,bYV,\u0007+\u0019:b[\u0016$XM\u001d\u000b\t\u0011{dI\u0006d\u0017\r^!A\u0011RGA\u000f\u0001\u0004II\u0002\u0003\u0006\f\u0014\u0005u\u0001\u0013!a\u0001\u0013\u001bA!\"#0\u0002\u001eA\u0005\t\u0019AEK\u0003mqWm\u001e,bYV,\u0007+\u0019:b[\u0016$XM\u001d\u0013eK\u001a\fW\u000f\u001c;%e\u0005Yb.Z<WC2,X\rU1sC6,G/\u001a:%I\u00164\u0017-\u001e7uIM\nQB\\3x\u0019>\u001c\u0017\r\u001c#v[6LH\u0003\u0002E\u007f\u0019OB\u0001bc\u0005\u0002$\u0001\u0007\u0011RB\u0001\n]\u0016<X*\u001a;i_\u0012$\u0002\u0002$\u001c\r\"2\rFR\u0015\t\u0005\u0011',)G\u0001\u0007NKRDw\u000eZ*z[\n|Gn\u0005\u0004\u0006f!uH2\u000f\t\u0005\u0011'd)(\u0003\u0003\rx!e%aD'fi\"|GmU=nE>d\u0017\t]5\u0015\u001115D2\u0010G?\u0019\u007fB\u0001\"#\u0003\u0006n\u0001\u0007\u0001\u0012\u001b\u0005\t\u0013\u0017)i\u00071\u0001\n\u000e!A\u0011rCC7\u0001\u0004II\"A\u0005niB,'+\u001e8JI\u00069Q\u000e\u001e9f!J,\u0017AC7ua\u0016\u0014Vm];mi\u0006AQ\u000e\u001e9f\u0013:4w.A\u0004jg2\u000b'-\u001a7\u0002\u001f%\u001ch+\u0019:be\u001e\u001cX*\u001a;i_\u0012\fa\"[:MS\u001a$X\rZ'fi\"|G-\u0001\bjgN{WO]2f\u001b\u0016$\bn\u001c3\u0002)%\u001c8)Y:f\u0003\u000e\u001cWm]:pe6+G\u000f[8e\u00039!\u0018\u0010]3Bg6+WNY3s\u001f\u001a$BA#\u0016\r\u0018\"AA\u0012TCA\u0001\u0004Q)&A\u0002qe\u0016\f\u0011\"[:WCJ\f'oZ:\u0002\u0015I,G/\u001e:o)f\u0004X-\u0001\u0006fq\u000e,\u0007\u000f^5p]ND\u0001\"#\u000e\u0002&\u0001\u0007\u0011\u0012\u0004\u0005\u000b\u0017'\t)\u0003%AA\u0002%5\u0001BCE_\u0003K\u0001\n\u00111\u0001\n\u0016\u0006\u0019b.Z<NKRDw\u000e\u001a\u0013eK\u001a\fW\u000f\u001c;%e\u0005\u0019b.Z<NKRDw\u000e\u001a\u0013eK\u001a\fW\u000f\u001c;%g\u0005ya.Z<NKRDw\u000eZ*z[\n|G\u000e\u0006\u0005\rn1=F\u0012\u0017GZ\u0011!I)$a\u000bA\u0002%e\u0001BCF\n\u0003W\u0001\n\u00111\u0001\n\u000e!Q\u0011RXA\u0016!\u0003\u0005\r!#&\u000239,w/T3uQ>$7+_7c_2$C-\u001a4bk2$HEM\u0001\u001a]\u0016<X*\u001a;i_\u0012\u001c\u00160\u001c2pY\u0012\"WMZ1vYR$3'\u0001\u0005oK^d\u0015MY3m)\u0019ai\u0007$0\r@\"A\u0011RGA\u0019\u0001\u0004II\u0002\u0003\u0006\f\u0014\u0005E\u0002\u0013!a\u0001\u0013\u001b\t!C\\3x\u0019\u0006\u0014W\r\u001c\u0013eK\u001a\fW\u000f\u001c;%e\u0005qa.Z<D_:\u001cHO];di>\u0014HC\u0002G7\u0019\u000fdI\r\u0003\u0005\f\u0014\u0005U\u0002\u0019AE\u0007\u0011)Ii,!\u000e\u0011\u0002\u0003\u0007\u0011RS\u0001\u0019]\u0016<8i\u001c8tiJ,8\r^8sI\u0011,g-Y;mi\u0012\u0012\u0014\u0001\u00068foN#\u0018\r^5d\u0007>t7\u000f\u001e:vGR|'\u000f\u0006\u0003\rn1E\u0007\u0002CF\n\u0003s\u0001\r!#\u0004\u0002'9,wo\u00117bgN\u001cuN\\:ueV\u001cGo\u001c:\u0015\t15Dr\u001b\u0005\t\u0017'\tY\u00041\u0001\n\u000e\u0005ya.Z<MS:\\W\rZ'pIVdW\r\u0006\u0004\r^6=Q\u0012\u0003\t\u0005\u0011',YE\u0001\u0007N_\u0012,H.Z*z[\n|Gn\u0005\u0004\u0006L!uH2\u001d\t\u0005\u0011'd)/\u0003\u0003\rh\"e%aD'pIVdWmU=nE>d\u0017\t]5\u0015\u00111uG2\u001eGw\u0019_D\u0001\"#\u0003\u0006T\u0001\u0007\u0001\u0012\u001b\u0005\t\u0013\u0017)\u0019\u00061\u0001\n\u000e!A\u0011rCC*\u0001\u0004II\"\u0001\u0005gY\u0006$h.Y7f\u00039\t7o]8dS\u0006$X\r\u001a$jY\u0016,\"\u0001d>\u0011\t1eHr`\u0007\u0003\u0019wTA\u0001$@\t~\u0005\u0011\u0011n\\\u0005\u0005\u001b\u0003aYP\u0001\u0007BEN$(/Y2u\r&dW-\u0001\nbgN|7-[1uK\u00124\u0015\u000e\\3`I\u0015\fH\u0003\u0002EP\u001b\u000fA\u0001\"$\u0003\u0006Z\u0001\u0007Ar_\u0001\u0002M\u0006\t2o[5q!\u0006\u001c7.Y4f\u001f\nTWm\u0019;\u0016\u0005%e\u0001\u0002CE*\u0003{\u0001\r\u0001#5\t\u0015%u\u0016Q\bI\u0001\u0002\u0004I)*A\roK^d\u0015N\\6fI6{G-\u001e7fI\u0011,g-Y;mi\u0012\u0012\u0014!\u00038fo6{G-\u001e7f)!ai.$\u0007\u000e\u001c5u\u0001\u0002CE\u001b\u0003\u0003\u0002\r!#\u0007\t\u0015-M\u0011\u0011\tI\u0001\u0002\u0004Ii\u0001\u0003\u0006\u000e \u0005\u0005\u0003\u0013!a\u0001\u0013+\u000b\u0011B\\3x\r2\fwm\u001d\u0019\u0002'9,w/T8ek2,G\u0005Z3gCVdG\u000f\n\u001a\u0002'9,w/T8ek2,G\u0005Z3gCVdG\u000fJ\u001a\u0002\u00159,w\u000fU1dW\u0006<W\r\u0006\u0005\r^6%R2FG\u0017\u0011!I)$a\u0012A\u0002%e\u0001BCF\n\u0003\u000f\u0002\n\u00111\u0001\n\u000e!Q\u0011RXA$!\u0003\u0005\r!#&\u0002)9,w\u000fU1dW\u0006<W\r\n3fM\u0006,H\u000e\u001e\u00133\u0003QqWm\u001e)bG.\fw-\u001a\u0013eK\u001a\fW\u000f\u001c;%g\u0005Qa.Z<UQ&\u001c8+_7\u0015\r!uXrGG\u001d\u0011)I)$!\u0014\u0011\u0002\u0003\u0007\u0011\u0012\u0004\u0005\u000b\u0017'\ti\u0005%AA\u0002%5\u0011\u0001\u00068foRC\u0017n]*z[\u0012\"WMZ1vYR$\u0013'\u0006\u0002\u000e@)\"\u0011\u0012\u0004G\u0018\u0003QqWm\u001e+iSN\u001c\u00160\u001c\u0013eK\u001a\fW\u000f\u001c;%e\u0005Ia.Z<J[B|'\u000f\u001e\u000b\u0005\u0011{l9\u0005\u0003\u0005\f\u0014\u0005M\u0003\u0019AE\u0007\u0003=qWm^'pIVdWmU=nE>dG\u0003\u0003Go\u001b\u001bjy%$\u0015\t\u0011%U\u0012Q\u000ba\u0001\u00133A!bc\u0005\u0002VA\u0005\t\u0019AE\u0007\u0011)Ii,!\u0016\u0011\u0002\u0003\u0007\u0011RS\u0001\u001a]\u0016<Xj\u001c3vY\u0016\u001c\u00160\u001c2pY\u0012\"WMZ1vYR$#'A\roK^lu\u000eZ;mKNKXNY8mI\u0011,g-Y;mi\u0012\u001a\u0014a\u00068fo6{G-\u001e7f\u0003:$7\t\\1tgNKXNY8m)!iYF$\u0001\u000f\u00049\u0015\u0001\u0003\u0003EF\u001b;bi.$\u0019\n\t5}\u0003\u0012\u0011\u0002\u0007)V\u0004H.\u001a\u001a\u0011\t!Mgq\u0004\u0002\f\u00072\f7o]*z[\n|Gn\u0005\u0004\u0007 )\u001dRr\r\t\u0005\u0011'lI'\u0003\u0003\u000el!e%AD\"mCN\u001c8+_7c_2\f\u0005/\u001b\u000b\t\u001bCjy'$\u001d\u000et!A\u0011\u0012\u0002D\u0014\u0001\u0004A\t\u000e\u0003\u0005\n\f\u0019\u001d\u0002\u0019AE\u0007\u0011!I9Bb\nA\u0002)M\u0012aD0bgN|7-[1uK\u00124\u0015\u000e\\3\u0002\u000fQD\u0017n]:z[\u0006iA\u000f[5t)f\u0004XmQ1dQ\u0016\fa\u0002\u001e5jgRK\b/\u001a)fe&|G\r\u0006\u0003\n|5}\u0004\u0002CEJ\rk\u0001\r!#&\u0002\u0017%\u001c\u0018\t\\5bgRK\b/Z\u0001\u0010SN\f%m\u001d;sC\u000e$8\t\\1tg\u0006Y\u0011n]\"bg\u0016\u001cE.Y:t\u0003eI7o\u00117bgNdunY1m)>\u001cuN\\:ueV\u001cGo\u001c:\u0002\u001b%\u001cXj\u001c3vY\u0016\u001cE.Y:t\u00039I7\u000fU1dW\u0006<Wm\u00117bgN\fq![:Ue\u0006LG/A\fjg\u0006swN\\(s%\u00164\u0017N\\3nK:$8\t\\1tg\u0006\u0001\u0012n]!o_:LXn\\;t\u00072\f7o]\u0001\u0010SN\u001cuN\\2sKR,7\t\\1tg\u0006y\u0011n\u001d&bm\u0006Le\u000e^3sM\u0006\u001cW-A\u0007jg:+7\u000f^3e\u00072\f7o]\u0001\u0014SNtU/\\3sS\u000e4\u0016\r\\;f\u00072\f7o]\u0001\nSNtU/\\3sS\u000e\fA#[:QC\u000e\\\u0017mZ3PE*,7\r^\"mCN\u001c\u0018!F5t!JLW.\u001b;jm\u00164\u0016\r\\;f\u00072\f7o]\u0001\fSN\u0004&/[7ji&4X-\u0001\u0007jg2{7-\u00197DY\u0006\u001c8/\u0001\bf]\u000ed7\t\\1tg\u000eC\u0017-\u001b8\u0016\u00055%\u0006C\u0002Eb\u001bWC\t.\u0003\u0003\u000b\u0006\"\u0015\u0017\u0001E2p[B\fg.[8o\u001b>$W\u000f\\31\u0003=\u0019w.\u001c9b]&|g.T8ek2,\u0017A\u00057j].,Gm\u00117bgN|em\u00117bgN\fAb]8ve\u000e,Wj\u001c3vY\u0016\fa\u0003\u001d:j[\u0006\u0014\u0018pQ8ogR\u0014Xo\u0019;pe:\u000bW.Z\u000b\u0003\u001bs\u0003B!d/\u000eF:!\u00012[G_\u0013\u0011iy,$1\u0002\u00079lW-\u0003\u0003\u000eD\"e$\u0001C*uI:\u000bW.Z:\n\t-UVrY\u0005\u0005\u001b\u0013l\tMA\u0005UKJlg*Y7fg\u0006\u0011\u0002O]5nCJL8i\u001c8tiJ,8\r^8s)\u0011Ay*d4\t\u00115%aQ\u000fa\u0001\u0019o$B!d5\u000eV6\u0011aq\u0004\u0005\t\u0015k39\b1\u0001\u000bV\u0005AA\u000f[5t)f\u0004X-\u0006\u0002\u000b4\u00059A\u000f[5t'fl\u0017A\u0004;za\u0016|e\r\u00165jg~#S-\u001d\u000b\u0005\u0011?k\t\u000f\u0003\u0005\u000b$\u001a\u0005\u0005\u0019\u0001F+)\u0019i\t'$:\u000eh\"A\u0011\u0012\u0018DB\u0001\u0004A\t\u000e\u0003\u0005\n>\u001a\r\u0005\u0019AEK\u0003\u001d1G.\u001b9qK\u0012,\"!$\u0019\u0002-\u0011,'/\u001b<fIZ\u000bG.^3DY\u0006\u001c8/\u00168c_b\f\u0001b\u00195jY\u0012\u001cV\r^\u0001\tG\"LG\u000e\u001a:f]\u0006A\u0011\r\u001a3DQ&dG\r\u0006\u0003\t 6]\b\u0002CG}\r\u001b\u0003\r\u0001#5\u0002\u0007MLX.\u0001\fb]>twJ\u001d*fM&tW-\\3oiN#(/\u001b8h\u0003!!xn\u0015;sS:<GCAE>\u0011!I)$a\u0017A\u0002%]\u0002\u0002CF\n\u00037\u0002\r!#\u0004\t\u00119\u001d\u00111\fa\u0001\u001d\u0013\taA\u001a7bON\u0004\u0004\u0003\u0002Ej\u001d\u0017IAA$\u0004\u000f\u0010\t9a\t\\1h'\u0016$\u0018\u0002\u0002H\t\u0011s\u0012\u0001B\u00127bON+Go]\u0001\u0015]\u0016<Xj\u001c3vY\u0016\u001cE.Y:t'fl'm\u001c7\u0015\u00119]aR\nH(\u001d#\u0002B\u0001c5\u0007\u0016\n\tRj\u001c3vY\u0016\u001cE.Y:t'fl'm\u001c7\u0014\t\u0019UU\u0012\r\u000b\t\u001d/qyB$\t\u000f$!A\u0011\u0012\u0018DO\u0001\u0004A\t\u000e\u0003\u0005\f\u0014\u0019u\u0005\u0019AE\u0007\u0011!I)D\"(A\u0002)M\u0012\u0001D7pIVdWmU=nE>d\u0017a\u0004;za\u0016|e\r\u00165jg\u000e\u000b7\r[3\u0002!QL\b/Z(g)\"L7\u000fU3sS>$\u0017!G5na2L7-\u001b;NK6\u0014WM]:DC\u000eDWMV1mk\u0016\u0004B\u0001c5\u000f0%!a\u0012\u0007H\u001a\u0005\u0015\u00196m\u001c9f\u0013\u0011q)\u0004#\u001f\u0003\rM\u001bw\u000e]3t\u0003aIW\u000e\u001d7jG&$X*Z7cKJ\u001c8)Y2iK.+\u00170M\u0001\u0019S6\u0004H.[2ji6+WNY3sg\u000e\u000b7\r[3LKf\u0014\u0004\u0003\u0002Ej\u001d{IAAd\u0010\u000f4\tQ1kY8qK\u0016sGO]=\u0002\u0015QL\b/Z(g)\"L7/A\bj[Bd\u0017nY5u\u001b\u0016l'-\u001a:t+\tqi#\u0001\tt_V\u00148-Z'pIVdWm\u0018\u0013fcR!\u0001r\u0014H&\u0011!YIC\".A\u0002!E\u0007\u0002CE\u001b\u0003;\u0002\rAc\r\t\u0015-M\u0011Q\fI\u0001\u0002\u0004Ii\u0001\u0003\u0006\n>\u0006u\u0003\u0013!a\u0001\u0013+\u000baD\\3x\u001b>$W\u000f\\3DY\u0006\u001c8oU=nE>dG\u0005Z3gCVdG\u000f\n\u001a\u0002=9,w/T8ek2,7\t\\1tgNKXNY8mI\u0011,g-Y;mi\u0012\u001a\u0014a\u00058foRK\b/Z*l_2,WnU=nE>dGC\u0003F\u0011\u001d7riFd\u0018\u000fb!A\u0011RGA2\u0001\u0004Q\u0019\u0004\u0003\u0005\nj\u0006\r\u0004\u0019\u0001EE\u0011)Y\u0019\"a\u0019\u0011\u0002\u0003\u0007\u0011R\u0002\u0005\u000b\u0013{\u000b\u0019\u0007%AA\u0002%U\u0015!\b8foRK\b/Z*l_2,WnU=nE>dG\u0005Z3gCVdG\u000fJ\u001a\u0002;9,w\u000fV=qKN[w\u000e\\3n'fl'm\u001c7%I\u00164\u0017-\u001e7uIQ\nQB\\3x\u001fZ,'\u000f\\8bI\u0016$GC\u0002E\u007f\u001dWri\u0007\u0003\u0005\r\u001a\u0006%\u0004\u0019\u0001F+\u0011!qy'!\u001bA\u0002)]\u0017\u0001D1mi\u0016\u0014h.\u0019;jm\u0016\u001c\u0018!\u00048fo\u0016\u0013(o\u001c:WC2,X\r\u0006\u0003\t~:U\u0004\u0002CE\u001b\u0003W\u0002\r!#\u0007\u0002\u00199,w/\u00117jCN$\u0016\u0010]3\u0015\u00119md\u0012\u0014HN\u001d;\u0003B\u0001c5\u0006\f\ny\u0011\t\\5bgRK\b/Z*z[\n|Gn\u0005\u0003\u0006\f*\u001dB\u0003\u0003H>\u001d\u0007s)Id\"\t\u0011%%Q1\u0013a\u0001\u0011#D\u0001\"c\u0003\u0006\u0014\u0002\u0007\u0011R\u0002\u0005\t\u0013/)\u0019\n1\u0001\u000b4\u0005Aa/\u0019:jC:\u001cW-\u0006\u0002\u000f\u000eB!1\u0012\u0010HH\u0013\u0011q\t\n#\u001f\u0003\u0011Y\u000b'/[1oG\u0016$bAc\n\u000f\u0016:]\u0005\u0002CE]\u000b?\u0003\r\u0001#5\t\u0011%uVq\u0014a\u0001\u0013+C\u0001\"#\u000e\u0002n\u0001\u0007!2\u0007\u0005\u000b\u0017'\ti\u0007%AA\u0002%5\u0001BCE_\u0003[\u0002\n\u00111\u0001\n\u0016\u00061b.Z<BY&\f7\u000fV=qK\u0012\"WMZ1vYR$#'\u0001\foK^\fE.[1t)f\u0004X\r\n3fM\u0006,H\u000e\u001e\u00134\u0003=qWm^!cgR\u0014\u0018m\u0019;UsB,G\u0003\u0003HT\u001dwsiLd0\u0011\t!MW\u0011\u0015\u0002\u0013\u0003\n\u001cHO]1diRK\b/Z*z[\n|Gn\u0005\u0003\u0006\"*\u001dB\u0003\u0003HT\u001d_s\tLd-\t\u0011%%Q\u0011\u0016a\u0001\u0011#D\u0001\"c\u0003\u0006*\u0002\u0007\u0011R\u0002\u0005\t\u0013/)I\u000b1\u0001\u000b4Q1!r\u0005H\\\u001dsC\u0001\"#/\u00062\u0002\u0007\u0001\u0012\u001b\u0005\t\u0013{+\t\f1\u0001\n\u0016\"A\u0011RGA:\u0001\u0004Q\u0019\u0004\u0003\u0006\f\u0014\u0005M\u0004\u0013!a\u0001\u0013\u001bA!\"#0\u0002tA\u0005\t\u0019AEK\u0003eqWm^!cgR\u0014\u0018m\u0019;UsB,G\u0005Z3gCVdG\u000f\n\u001a\u000239,w/\u00112tiJ\f7\r\u001e+za\u0016$C-\u001a4bk2$HeM\u0001\u0011]\u0016<H+\u001f9f!\u0006\u0014\u0018-\\3uKJ$\u0002Bc\n\u000fJ:-gR\u001a\u0005\t\u0013k\tI\b1\u0001\u000b4!Q12CA=!\u0003\u0005\r!#\u0004\t\u0015%u\u0016\u0011\u0010I\u0001\u0002\u0004I)*\u0001\u000eoK^$\u0016\u0010]3QCJ\fW.\u001a;fe\u0012\"WMZ1vYR$#'\u0001\u000eoK^$\u0016\u0010]3QCJ\fW.\u001a;fe\u0012\"WMZ1vYR$3'\u0001\boK^,\u00050[:uK:$\u0018.\u00197\u0015\u0011)\u001dbr\u001bHm\u001d7D\u0001\"#\u000e\u0002\u0000\u0001\u0007!2\u0007\u0005\u000b\u0017'\ty\b%AA\u0002%5\u0001BCE_\u0003\u007f\u0002\n\u00111\u0001\n\u0016\u0006Ab.Z<Fq&\u001cH/\u001a8uS\u0006dG\u0005Z3gCVdG\u000f\n\u001a\u000219,w/\u0012=jgR,g\u000e^5bY\u0012\"WMZ1vYR$3'\u0001\u0006ge\u0016\u001c\bNT1nKJ,\"A$:\u0011\r!-er]E\r\u0013\u0011qI\u000f#!\u0003\u0013\u0019+hn\u0019;j_:\u0004\u0014a\u00068foNKh\u000e\u001e5fi&\u001cg+\u00197vKB\u000b'/Y7t)\u0011qyO$=\u0011\r)u$2\u0011E\u007f\u0011!q\u00190a\"A\u0002)m\u0014\u0001C1sORL\b/Z:\u0015\r9=hr\u001fH}\u0011!q\u00190!#A\u0002)m\u0004\u0002\u0003H~\u0003\u0013\u0003\rA$:\u0002\u0013\u0019\u0014Xm\u001d5OC6,\u0017A\u00068foNKh\u000e\u001e5fi&\u001cg+\u00197vKB\u000b'/Y7\u0015\r!ux\u0012AH\u0003\u0011!y\u0019!a#A\u0002)U\u0013aB1sORL\b/\u001a\u0005\u000b\u0013k\tY\t%AA\u0002%e\u0011\u0001\t8foNKh\u000e\u001e5fi&\u001cg+\u00197vKB\u000b'/Y7%I\u00164\u0017-\u001e7uII\nQC\\3x'ftG\u000f[3uS\u000e$\u0016\u0010]3QCJ\fW\u000e\u0006\u0004\u000b(=5qr\u0002\u0005\t\u0013k\ty\t1\u0001\n|!A\u0011RXAH\u0001\u0004I)*\u0001\foK^\u001c\u0016P\u001c;iKRL7\rV=qKB\u000b'/Y7t)\u0011y)bd\u0006\u0011\r)u$2\u0011F\u0014\u0011!yI\"!%A\u0002!%\u0016a\u00018v[\u0006!b.Z<Fq&\u001cH/\u001a8uS\u0006d7k[8mK6$bA#\t\u0010 =\r\u0002\u0002CH\u0011\u0003'\u0003\r\u0001#5\u0002\u000b\t\f7/[:\t\u0011%%\u00181\u0013a\u0001\u0011\u0013#BB#\t\u0010(=%rRFH\u0019\u001fgA\u0001\"#\u000e\u0002\u0016\u0002\u0007!2\u0007\u0005\t\u001fW\t)\n1\u0001\u000bV\u0005!\u0011N\u001c4p\u0011!yy#!&A\u0002%U\u0015!\u00024mC\u001e\u001c\b\u0002CF\n\u0003+\u0003\r!#\u0004\t\u0011%%\u0018Q\u0013a\u0001\u0011\u0013\u000b\u0011cR!E)~\u001b6j\u0014'F\u001b~3E*Q$T\u00035qWm^$B\tR\u001b6n\u001c7f[RA!\u0012EH\u001e\u001f{yy\u0004\u0003\u0005\n6\u0005e\u0005\u0019\u0001F\u001a\u0011!II/!'A\u0002!E\u0007\u0002CH\u0016\u00033\u0003\rA#\u0016\u0002!\u0019\u0014Xm\u001d5Fq&\u001cH/\u001a8uS\u0006dG\u0003\u0002F\u0014\u001f\u000bB\u0001bd\u0012\u0002\u001c\u0002\u0007\u00112P\u0001\u0007gV4g-\u001b=)\u0019\u0005mu2JH)\u001f'z9f$\u0017\u0011\t!-uRJ\u0005\u0005\u001f\u001fB\tI\u0001\u0006eKB\u0014XmY1uK\u0012\fq!\\3tg\u0006<W-\t\u0002\u0010V\u0005yRk]3!_Z,'\u000f\\8bI\u0002\"\b.\u0019;!C\u000e\u001cW\r\u001d;tA\u0005t\u0007%\u001b3\u0002\u000bMLgnY3\"\u0005=m\u0013A\u0002\u001a/cIr\u0013\u0007\u0006\u0004\u000b(=}s\u0012\r\u0005\t\u001f\u000f\ni\n1\u0001\n|!A1R[AO\u0001\u0004AI+A\u0007oK^$\u0016\u0010]3TW>dW-\\\u000b\u0003\u0015C\t\u0001B\\3x\u00072\f7o\u001d\u000b\t\u001bCzYg$\u001c\u0010p!A\u0011RGAQ\u0001\u0004Q\u0019\u0004\u0003\u0006\f\u0014\u0005\u0005\u0006\u0013!a\u0001\u0013\u001bA!\"#0\u0002\"B\u0005\t\u0019AEK\u0003IqWm^\"mCN\u001cH\u0005Z3gCVdG\u000f\n\u001a\u0002%9,wo\u00117bgN$C-\u001a4bk2$HeM\u0001\u0011]\u0016<8\t\\1tg^KG\u000f[%oM>$B\"$\u0019\u0010z=mtrPHB\u001f\u000bC\u0001\"#\u000e\u0002(\u0002\u0007!2\u0007\u0005\t\u001f{\n9\u000b1\u0001\u000b|\u00059\u0001/\u0019:f]R\u001c\b\u0002CHA\u0003O\u0003\rA$\f\u0002\u000bM\u001cw\u000e]3\t\u0015-M\u0011q\u0015I\u0001\u0002\u0004Ii\u0001\u0003\u0006\n>\u0006\u001d\u0006\u0013!a\u0001\u0013+\u000b!D\\3x\u00072\f7o],ji\"LeNZ8%I\u00164\u0017-\u001e7uIQ\n!D\\3x\u00072\f7o],ji\"LeNZ8%I\u00164\u0017-\u001e7uIU\nQB\\3x\u000bJ\u0014xN]\"mCN\u001cH\u0003BG1\u001f\u001fC\u0001\"#\u000e\u0002.\u0002\u0007!2G\u0001\u000f]\u0016<Xj\u001c3vY\u0016\u001cE.Y:t)!q9b$&\u0010\u0018>e\u0005\u0002CE\u001b\u0003_\u0003\rAc\r\t\u0015-M\u0011q\u0016I\u0001\u0002\u0004Ii\u0001\u0003\u0006\n>\u0006=\u0006\u0013!a\u0001\u0013+\u000b\u0001D\\3x\u001b>$W\u000f\\3DY\u0006\u001c8\u000f\n3fM\u0006,H\u000e\u001e\u00133\u0003aqWm^'pIVdWm\u00117bgN$C-\u001a4bk2$HeM\u0001\u001a]\u0016<\u0018I\\8os6|Wo\u001d$v]\u000e$\u0018n\u001c8DY\u0006\u001c8\u000f\u0006\u0004\u000eb=\rvR\u0015\u0005\u000b\u0017'\t)\f%AA\u0002%5\u0001BCE_\u0003k\u0003\n\u00111\u0001\n\u0016\u0006\u0019c.Z<B]>t\u00170\\8vg\u001a+hn\u0019;j_:\u001cE.Y:tI\u0011,g-Y;mi\u0012\n\u0014a\t8fo\u0006swN\\=n_V\u001ch)\u001e8di&|gn\u00117bgN$C-\u001a4bk2$HEM\u0001\u001a]\u0016<\u0018I\\8os6|Wo\u001d$v]\u000e$\u0018n\u001c8WC2,X\r\u0006\u0004\t~>=v\u0012\u0017\u0005\t\u0017'\tY\f1\u0001\n\u000e!Q\u0011RXA^!\u0003\u0005\r!#&\u0002G9,w/\u00118p]flw.^:Gk:\u001cG/[8o-\u0006dW/\u001a\u0013eK\u001a\fW\u000f\u001c;%e\u0005\u0011b.Z<SK\u001aLg.Z7f]R\u001cE.Y:t)\u0011yIld6\u0011\t!Mgq\u001b\u0002\u0016%\u00164\u0017N\\3nK:$8\t\\1tgNKXNY8m'\u001119.$\u0019\u0002\r=<h.\u001a:1\u0003\u0011\u0001xn\u001d\u0019\u0015\r=evRYHd\u0011!yyL\"8A\u0002!E\u0007\u0002CHa\r;\u0004\r!#\u0004\u0015\t!}u2\u001a\u0005\t\u0013k1y\u000e1\u0001\n8\u0005\t\u0012n\u001d*fM&tW-\\3oi\u000ec\u0017m]:\u0002%!\f7/T3b]&tw\r\\3tg:\u000bW.Z\u0001\u000eQ\u0006\u001cHK]1og>;h.\u001a:\u0015\t!5xR\u001b\u0005\t\u001bs4Y\u000f1\u0001\tR\"A12CA`\u0001\u0004Ii!\u0001\boK^,%O]8s'fl'm\u001c7\u0015\t!EwR\u001c\u0005\t\u0013k\t\t\r1\u0001\n8\u0005ia.Z<TiV\u00147+_7c_2$b\u0001#5\u0010d>\u0015\b\u0002CE\u001b\u0003\u0007\u0004\r!c\u000e\t\u0011=\u001d\u00181\u0019a\u0001\u0013w\na\"\\5tg&tw-T3tg\u0006<W-A\ntk\u001e\f'/\u001a3Ts6\u0014w\u000e\\(s'\u0016dg-\u0001\u0004m_\u000e\\wjS\u0001\u0005Y>\u001c7\u000e\u0006\u0003\tn>E\b\"CHz\u0003\u0013$\t\u0019AH{\u0003\u001dA\u0017M\u001c3mKJ\u0004b\u0001c#\n~\"}\u0015AB;oY>\u001c7.A\u0007jg\n{G\u000f^8n\u00072\f7o]\u0001\fSNLU\u000e\u001d7DY\u0006\u001c8\u000f\u000b\u0007\u0002b>-s\u0012KH\u0000\u001f/\u0002\u001a!\t\u0002\u0011\u0002\u0005aDO]1ji\u0002JW\u000e\u001d7f[\u0016tG/\u0019;j_:\u00043\r\\1tg\u0016\u001c\b\u0005[1wK\u0002\u0012W-\u001a8!e\u0016lwN^3eA%t\u0007eU2bY\u0006\u0004#GL\u00193C\t\u0001*!\u0001\u00043]E\u0012d\u0006M\u0001\fSNLeN^1sS\u0006tG/\u0001\fjgB\u000b7m[1hK>\u0013'.Z2u\u001fJ\u001cE.Y:t\u0003UI7/T8ek2,wJ]'pIVdWm\u00117bgN\fa![:S_>$\u0018!D5t%>|G\u000fU1dW\u0006<W-\u0001\u0007jgJ{w\u000e^*z[\n|G.\u0001\bjg\u0016k\u0007\u000f^=QC\u000e\\\u0017mZ3\u0002'%\u001cX)\u001c9usB\u000b7m[1hK\u000ec\u0017m]:\u0002\u001f%\u001cXI\u001a4fGRLg/\u001a*p_R\fq\u0003[1t\u001f:d\u0017PQ8ui>l7+\u001e2dY\u0006\u001c8/Z:\u0002'%\u001cxJ^3se&$\u0017M\u00197f\u001b\u0016l'-\u001a:\u0002)%\u001c\u0018J\u001c;feB\u0014X\r^3s/J\f\u0007\u000f]3s\u0003\u001d9W\r\u001e$mC\u001e$B!#&\u0011$!AA\u0012\u0001B$\u0001\u0004I)*A\u0004iCN4E.Y4\u0015\t!5\b\u0013\u0006\u0005\t\u0019\u0003\u0011I\u00051\u0001\n\u0016\u0006Y\u0001.Y:BY24E.Y4t)\u0011Ai\u000fe\f\t\u00111\u0005!1\na\u0001\u0013+\u000bqa]3u\r2\fw\r\u0006\u0003\f:BU\u0002\u0002\u0003G\u0001\u0005\u001b\u0002\r!#&\u0002\u0013I,7/\u001a;GY\u0006<G\u0003BF]!wA\u0001\u0002$\u0001\u0003P\u0001\u0007\u0011RS\u0001\u000be\u0016\u001cX\r\u001e$mC\u001e\u001cH\u0003BE>!\u0003B\u0001\"c%\u0003T\u0001\u0007\u0011RS\u0001\nS:LGO\u00127bON$Ba#/\u0011H!AA\u0012\u0001B+\u0001\u0004I)\n\u0006\u0003\n\u0016B-\u0003\u0002\u0003I'\u00053\u0002\r!#&\u0002\u001bAD\u0017m]3GY\u0006<W*Y:l\u0003%1G.Y4t?\u0012*\u0017\u000f\u0006\u0003\t BM\u0003\u0002\u0003I+\u00057\u0002\r!#&\u0002\u0005\u0019\u001c\u0018\u0001\u0004:bo\u001ad\u0017mZ:`I\u0015\fH\u0003\u0002EP!7B\u0001\"c)\u0003^\u0001\u0007\u0011RS\u0001\nQ\u0006\u001cx)\u001a;uKJ\f\u0011#[:N_\u0012,H.\u001a(pi6+G\u000f[8e\u00039I7o\u0015;bi&\u001cWj\u001c3vY\u0016\fa#[:J]&$\u0018.\u00197ju\u0016$Gk\u001c#fM\u0006,H\u000e^\u0001\nSN$\u0006.[:Ts6\fq![:FeJ|'/A\u0006jg\u0016\u0013(o\u001c8f_V\u001c\u0018AG5t\u0011&<\u0007.\u001a:Pe\u0012,'\u000fV=qKB\u000b'/Y7fi\u0016\u0014\u0018aE5t\t\u0016\u0014\u0018N^3e-\u0006dW/Z\"mCN\u001c\u0018!F5t\u001b\u0016$\bn\u001c3XSRDW\t\u001f;f]NLwN\\\u0001\u0014SN\fen\u001c8z[>,8OR;oGRLwN\\\u0001\u0015SN$U\r\\1nE\u0012\fg-\u001f$v]\u000e$\u0018n\u001c8\u0002%%\u001cH)\u001a7b[\n$\u0017MZ=UCJ<W\r^\u0001\u0013SN$UMZ5oK\u0012Le\u000eU1dW\u0006<W-\u0001\toK\u0016$7O\u00127bi\u000ec\u0017m]:fg\u0006)\u0012n\u001d)biR,'O\u001c+za\u00164\u0016M]5bE2,G\u0003\u0002EP!\u007fB\u0001\"#9\u0003\u0002\u0002\u0007\u0001\u0012[\u0001\u0015SNLe\u000eR3gCVdGOT1nKN\u0004\u0018mY3\u0002\u001d\u00154g-Z2uSZ,wj\u001e8fe\u0006i\u0001/Y2lC\u001e,wJ\u00196fGRDCA!#\u0011\nB!\u00013\u0012IG\u001b\taI$\u0003\u0003\u0011\u00102e\"a\u0002;bS2\u0014XmY\u0001\u0010g.L\u0007oQ8ogR\u0014Xo\u0019;pe\u0006\t\u0012n](nSR$\u0018M\u00197f!J,g-\u001b=\u0002\u001b%\u001cX)\u001c9usB\u0013XMZ5y\u0003)I7O\u0012\"pk:$W\rZ\u0001\u0012SNluN\\8n_J\u0004\b.[2UsB,\u0017AC5t'R\u0014\u0018n\u0019;G!\"\"!Q\u0013IE\u00039I7oU3sS\u0006d\u0017N_1cY\u0016\fA\"[:EKB\u0014XmY1uK\u0012\f!\u0003Z3qe\u0016\u001c\u0017\r^5p]6+7o]1hKV\u0011\u0001s\u0015\t\u0007\u0011\u0017\u0003J+c\u001f\n\tA-\u0006\u0012\u0011\u0002\u0007\u001fB$\u0018n\u001c8\u0002%\u0011,\u0007O]3dCRLwN\u001c,feNLwN\\\u0001\u0014I\u0016\u0004(/Z2bi\u0016$\u0007+\u0019:b[:\u000bW.Z\u000b\u0003!g\u0003b\u0001c#\u0011*&e\u0011A\u00063faJ,7-\u0019;fIB\u000b'/Y7WKJ\u001c\u0018n\u001c8\u0002E!\f7\u000fR3qe\u0016\u001c\u0017\r^3e\u0013:DWM]5uC:\u001cW-\u00118o_R\fG/[8o\u0003q!W\r\u001d:fG\u0006$X\rZ%oQ\u0016\u0014\u0018\u000e^1oG\u0016lUm]:bO\u0016\fA\u0004Z3qe\u0016\u001c\u0017\r^3e\u0013:DWM]5uC:\u001cWMV3sg&|g.A\u0011iCN$U\r\u001d:fG\u0006$X\rZ(wKJ\u0014\u0018\u000eZ5oO\u0006sgn\u001c;bi&|g.A\u000eeKB\u0014XmY1uK\u0012|e/\u001a:sS\u0012LgnZ'fgN\fw-Z\u0001\u001cI\u0016\u0004(/Z2bi\u0016$wJ^3se&$\u0017N\\4WKJ\u001c\u0018n\u001c8\u0002-!\f7/T5he\u0006$\u0018n\u001c8B]:|G/\u0019;j_:\f\u0001#\\5he\u0006$\u0018n\u001c8NKN\u001c\u0018mZ3\u0002!5LwM]1uS>tg+\u001a:tS>t\u0017\u0001D3mSNLwN\u001c'fm\u0016dWC\u0001Ig!\u0019AY\t%+\t*\u0006\u0019\u0012.\u001c9mS\u000eLGOT8u\r>,h\u000eZ'tO\u0006!\u0012.\u001c9mS\u000eLG/Q7cS\u001e,x.^:Ng\u001e\f\u0011#[:D_6\u0004\u0018\u000e\\3US6,wJ\u001c7z\u0003Y\u0019w.\u001c9jY\u0016$\u0016.\\3P]2LX*Z:tC\u001e,\u0017AD5t\u000bb\u0004XM]5nK:$\u0018\r\\\u0001\u0010SN|U\u000f^3s\u0003\u000e\u001cWm]:pe\u0006a\u0011n](vi\u0016\u0014h)[3mI\u0006a\u0011n](vi\u0016\u0014\b+\u0019:b[\u0006A\u0011n]*uC\ndW-A\biCN4v\u000e\\1uS2,G+\u001f9f\u0003QI7\u000f\u0015:j[\u0006\u0014\u0018pQ8ogR\u0014Xo\u0019;pe\u00061\u0012n]!vq&d\u0017.\u0019:z\u0007>t7\u000f\u001e:vGR|'/\u0001\u000bjg\u000e\u000b7/Z!qa2LxJ]+oCB\u0004H._\u0001\u000bSN\u001c\u0015m]3D_BL\u0018aC5t\u001b>$W\u000f\\3WCJ\fq\"[:TG\u0006d\u0017m\r#fM&tW\rZ\u0001\tSN\u001cF/\u0019;jG\u0006\u0019\u0012n]*uCRL7mQ8ogR\u0014Xo\u0019;pe\u0006q\u0011n]*uCRL7-T3nE\u0016\u0014\u0018!D5t'R\fG/[2Po:,'/\u0001\njg\u00163g-Z2uSZ,G.\u001f$j]\u0006d\u0017!I5t\u000b\u001a4Wm\u0019;jm\u0016d\u0017PR5oC2|%OT8u\u001fZ,'O]5eI\u0016t\u0017AC5t)>\u0004H*\u001a<fY\u00069\u0011n\u001d'pG\u0006d\u0007\u0006\u0004Bs\u001f\u0017z\t&%\u0001\u0010XE\u0015\u0011EAI\u0002\u0003i)8/\u001a\u0011jg2{7-\u00197U_\ncwnY6!S:\u001cH/Z1eC\t\t:!\u0001\u00043]E\nd\u0006M\u0001\u000fSNdunY1m)>\u0014En\\2l\u0003)I7oQ8ogR\fg\u000e^\u0001\u0017SN\u001cFO];diV\u0014\u0018\r\u001c*fM&tW-\\3oi\u00061\u0012n](oYf\u0014VMZ5oK6,g\u000e^'f[\n,'/A\tjg\u0012+7\r\\1sK\u0012\u0014\u0015pT<oKJ\fA$[:TiJ,8\r^;sC2\u0014VMZ5oK6,g\u000e^'f[\n,'/\u0001\fjgB{7o]5cY\u0016LeNU3gS:,W.\u001a8u\u00039I7/\u00138d_6\u0004H.\u001a;f\u0013:$B\u0001#<\u0012\u001c!A\u0011\u0012\u001dB}\u0001\u0004A\t\u000e\u000b\u0003\u0003zB%\u0015AB3ySN$8/A\u0007jg&s\u0017\u000e^5bY&TX\rZ\u0001\rSN$\u0006N]3bIN\fg-\u001a\u000b\u0005\u0011[\f:\u0003\u0003\u0005\u0012*\t}\b\u0019AI\u0016\u0003\u001d\u0001XO\u001d9pg\u0016\u0004B\u0001c5\t:\tI1+_7c_2|\u0005o]\n\t\u0011sAI)%\r\u00128A!\u00012RI\u001a\u0013\u0011\t*\u0004#!\u0003\u000fA\u0013x\u000eZ;diB!\u0011\u0013HI \u001d\u0011\tZDc \u000f\t%\u0005\u0015SH\u0005\u0003\u0011\u0007KA!%\u0011\u000b\b\na1+\u001a:jC2L'0\u00192mK\u0006i\u0011n\u001d$mC\u001e\u0014V\r\\1uK\u0012\fa\"[:GY\u0006<'+\u001a7bi\u0016$\u0007%A\u0003nCN\\\u0007\u0005\u0006\u0004\u0012,E-\u0013S\n\u0005\t#\u0007B\u0019\u00051\u0001\tn\"AA\u0012\u0001E\"\u0001\u0004I)*\u0001\u0003d_BLHCBI\u0016#'\n*\u0006\u0003\u0006\u0012D!\u0015\u0003\u0013!a\u0001\u0011[D!\u0002$\u0001\tFA\u0005\t\u0019AEK\u00039\u0019w\u000e]=%I\u00164\u0017-\u001e7uIE*\"!e\u0017+\t!5HrF\u0001\u000fG>\u0004\u0018\u0010\n3fM\u0006,H\u000e\u001e\u00133\u00035\u0001(o\u001c3vGR\u0004&/\u001a4jq\u0006a\u0001O]8ek\u000e$\u0018I]5us\u0006q\u0001O]8ek\u000e$X\t\\3nK:$H\u0003\u0002F\u0001#OB!\u0002#.\tP\u0005\u0005\t\u0019\u0001EU\u0003=\u0001(o\u001c3vGRLE/\u001a:bi>\u0014XCAI7!\u0019\tz'%\u001d\u000b\u00025\u0011\u0001\u0012Z\u0005\u0005#gBIM\u0001\u0005Ji\u0016\u0014\u0018\r^8s\u0003!\u0019\u0017M\\#rk\u0006dG\u0003\u0002Ew#sB!\u0002#.\tT\u0005\u0005\t\u0019\u0001F\u0001\u0003I\u0001(o\u001c3vGR,E.Z7f]Rt\u0015-\\3\u0015\t15\u0011s\u0010\u0005\u000b\u0011kC)&!AA\u0002!%\u0016\u0001\u00035bg\"\u001cu\u000eZ3\u0015\u000515\u0011AB3rk\u0006d7\u000f\u0006\u0003\tnF%\u0005B\u0003E[\u00117\n\t\u00111\u0001\u000b\u0002\u0005\u0011R.\u0019:l\r2\fwm]\"p[BdW\r^3e)\u0011YI,e$\t\u00111\u00051\u0011\u0001a\u0001\u0013+\u000b\u0001#\\1sW\u0006cGnQ8na2,G/\u001a3\u0015\u0005-e\u0016aC5t\u0019>\u001c\u0017\r^1cY\u0016\f\u0001\u0002]1sC6\u0004vn]\u0001\ng\u00064WmT<oKJ\f1\"Y:tKJ$xj\u001e8fe\u0006iqN]5hS:\fGnT<oKJ\f\u0011b\\<oKJ|F%Z9\u0015\t!}\u00153\u0015\u0005\t\u0013s\u001b\u0019\u00021\u0001\tR\u0006Qqn\u001e8fe\u000eC\u0017-\u001b8\u0002\u001d=<h.\u001a:t\u0013R,'/\u0019;peV\u0011\u00113\u0016\t\u0007\u0015{\nj\u000b#5\n\tEM$r\u0011\u000b\u0005\u0011[\f\n\f\u0003\u0005\u000ez\u000em\u0001\u0019\u0001Ei\u00031y'/[4j]\u0006dg*Y7fQ1\u0019ibd\u0013\u0010RE]vrKI\u0003C\t\tJ,\u0001\nvg\u0016\u0004SO\\3ya\u0006tG-\u001a3OC6,\u0017AD;oKb\u0004\u0018M\u001c3fI:\u000bW.Z\u0001\fK:\u001cw\u000eZ3e\u001d\u0006lW-A\u0006eK\u000e|G-\u001a3OC6,\u0017aD1eI6{G-\u001e7f'V4g-\u001b=\u0015\t%]\u0012S\u0019\u0005\t\u0013\u0007\u001a)\u00031\u0001\n8\u0005aQn\u001c3vY\u0016\u001cVO\u001a4jq\u0006\tb.Z3eg6{G-\u001e7f'V4g-\u001b=\u0002\u001d)\fg/Y*j[BdWMT1nK\u0006q!.\u0019<b\u0005&t\u0017M]=OC6,\u0017\u0001\u00066bm\u0006\u0014\u0015N\\1ss:\u000bW.Z*ue&tw-A\rkCZ\f')\u001b8beft\u0015-\\3TiJLgnZ\"bG\",\u0017!\u00046bm\u0006\u001cE.Y:t\u001d\u0006lW-\u0001\u0005gk2dg*Y7f)\u0011IY(%7\t\u0011Em7Q\u0007a\u0001#;\f\u0011b]3qCJ\fGo\u001c:\u0011\t!-\u0015s\\\u0005\u0005#CD\tI\u0001\u0003DQ\u0006\u0014HCBE>#K\f:\u000f\u0003\u0005\u0012\\\u000e]\u0002\u0019AIo\u0011!y9ea\u000eA\u0002E%\b\u0003\u0002G\b#WLA!%<\r\u0012\ta1\t[1s'\u0016\fX/\u001a8dK\u0006qa-\u001e7m\u001d\u0006lW-Q:OC6,G\u0003BE\u001c#gD\u0001\"e7\u0004:\u0001\u0007\u0011S\\\u0001\u0019GJ,\u0017\r^3BEN$(/Y2u)f\u0004XmU=nE>dG\u0003\u0003HT#s\fZ0%@\t\u0011%U2Q\ba\u0001\u0015gA\u0001bc\u0005\u0004>\u0001\u0007\u0011R\u0002\u0005\t\u0013{\u001bi\u00041\u0001\n\u0016\u0006)2M]3bi\u0016\fE.[1t)f\u0004XmU=nE>dG\u0003\u0003H>%\u0007\u0011*Ae\u0002\t\u0011%U2q\ba\u0001\u0015gA\u0001bc\u0005\u0004@\u0001\u0007\u0011R\u0002\u0005\t\u0013{\u001by\u00041\u0001\n\u0016\u000612M]3bi\u0016$\u0016\u0010]3TW>dW-\\*z[\n|G\u000e\u0006\u0006\u000b\"I5!s\u0002J\t%'A\u0001\"#\u000e\u0004B\u0001\u0007!2\u0007\u0005\t\u0013S\u001c\t\u00051\u0001\t\n\"A12CB!\u0001\u0004Ii\u0001\u0003\u0005\n>\u000e\u0005\u0003\u0019AEK\u0003E\u0019'/Z1uK\u000ec\u0017m]:Ts6\u0014w\u000e\u001c\u000b\t\u001bC\u0012JBe\u0007\u0013\u001e!A\u0011RGB\"\u0001\u0004Q\u0019\u0004\u0003\u0005\f\u0014\r\r\u0003\u0019AE\u0007\u0011!Iila\u0011A\u0002%U\u0015aF2sK\u0006$X-T8ek2,7\t\\1tgNKXNY8m)!q9Be\t\u0013&I\u001d\u0002\u0002CE\u001b\u0007\u000b\u0002\rAc\r\t\u0011-M1Q\ta\u0001\u0013\u001bA\u0001\"#0\u0004F\u0001\u0007\u0011RS\u0001\u0019GJ,\u0017\r^3QC\u000e\\\u0017mZ3DY\u0006\u001c8oU=nE>dG\u0003\u0003J\u0017%\u0007\u0012*Ee\u0012\u0011\t!Mgq\u0019\u0002\u0013!\u0006\u001c7.Y4f\u00072\f7o]*z[\n|Gn\u0005\u0003\u0007H:]A\u0003\u0003J\u0017%k\u0011:D%\u000f\t\u0011=}fq\u001aa\u0001\u0011#D\u0001b$1\u0007P\u0002\u0007\u0011R\u0002\u0005\t\u0013o4y\r1\u0001\u000b4U\u0011!S\b\t\u0005\u0011\u0007\u0014zD\u0003\u0003\u0013B!\u0015\u0017a\u0001(jY\"A\u0011RGB$\u0001\u0004Q\u0019\u0004\u0003\u0005\f\u0014\r\u001d\u0003\u0019AE\u0007\u0011!Iila\u0012A\u0002%U\u0015aG2sK\u0006$XMU3gS:,W.\u001a8u\u00072\f7o]*z[\n|G\u000e\u0006\u0004\u0010:J5#s\n\u0005\t\u0017'\u0019I\u00051\u0001\n\u000e!A\u0011RXB%\u0001\u0004I)*\u0001\u0010de\u0016\fG/\u001a)bG.\fw-Z(cU\u0016\u001cGo\u00117bgN\u001c\u00160\u001c2pYR1!S\u000bJ4%S\u0002B\u0001c5\u00078\nA\u0002+Y2lC\u001e,wJ\u00196fGR\u001cE.Y:t'fl'm\u001c7\u0014\t\u0019]fr\u0003\u000b\u0007%+\u0012jFe\u0018\t\u0011=}fQ\u0018a\u0001\u0011#D\u0001b$1\u0007>\u0002\u0007\u0011R\u0002\u000b\u0005%G\u0012*'\u0004\u0002\u00078\"A\u0011R\u0007Dc\u0001\u0004I9\u0004\u0003\u0005\f\u0014\r-\u0003\u0019AE\u0007\u0011!Iila\u0013A\u0002%U\u0015AE2sK\u0006$X-T3uQ>$7+_7c_2$\u0002\u0002$\u001c\u0013pIE$3\u000f\u0005\t\u0013k\u0019i\u00051\u0001\n\u001a!A12CB'\u0001\u0004Ii\u0001\u0003\u0005\n>\u000e5\u0003\u0019AEK\u0003I\u0019'/Z1uK6{G-\u001e7f'fl'm\u001c7\u0015\u00111u'\u0013\u0010J>%{B\u0001\"#\u000e\u0004P\u0001\u0007\u0011\u0012\u0004\u0005\t\u0017'\u0019y\u00051\u0001\n\u000e!A\u0011RXB(\u0001\u0004I)*A\nde\u0016\fG/\u001a)bG.\fw-Z*z[\n|G\u000e\u0006\u0005\r^J\r%S\u0011JD\u0011!I)d!\u0015A\u0002%e\u0001\u0002CF\n\u0007#\u0002\r!#\u0004\t\u0011%u6\u0011\u000ba\u0001\u0013+\u000b!d\u0019:fCR,g+\u00197vKB\u000b'/Y7fi\u0016\u00148+_7c_2$\u0002\u0002#@\u0013\u000eJ=%\u0013\u0013\u0005\t\u0013k\u0019\u0019\u00061\u0001\n\u001a!A12CB*\u0001\u0004Ii\u0001\u0003\u0005\n>\u000eM\u0003\u0019AEK\u0003]\u0019'/Z1uKZ\u000bG.^3NK6\u0014WM]*z[\n|G\u000e\u0006\u0005\t~J]%\u0013\u0014JN\u0011!I)d!\u0016A\u0002%e\u0001\u0002CF\n\u0007+\u0002\r!#\u0004\t\u0011%u6Q\u000ba\u0001\u0013+\u000b\u0001D\\3x\u000bb$XM\\:j_:lU\r\u001e5pINKXNY8m)\u0019aiG%)\u0013$\"A1rMB,\u0001\u0004A\t\u000e\u0003\u0005\f\u0014\r]\u0003\u0019AE\u0007\u00035qWm\u001e+fe6\u001c\u00160\u001c2pYRA\u0001R JU%W\u0013j\u000b\u0003\u0005\n6\re\u0003\u0019AE\r\u0011)Y\u0019b!\u0017\u0011\u0002\u0003\u0007\u0011R\u0002\u0005\u000b\u0013{\u001bI\u0006%AA\u0002%U\u0015a\u00068foR+'/\\*z[\n|G\u000e\n3fM\u0006,H\u000e\u001e\u00133\u0003]qWm\u001e+fe6\u001c\u00160\u001c2pY\u0012\"WMZ1vYR$3'\u0001\boK^\u001cE.Y:t'fl'm\u001c7\u0015\u00115\u0005$s\u0017J]%wC\u0001\"#\u000e\u0004`\u0001\u0007!2\u0007\u0005\u000b\u0017'\u0019y\u0006%AA\u0002%5\u0001BCE_\u0007?\u0002\n\u00111\u0001\n\u0016\u0006Ab.Z<DY\u0006\u001c8oU=nE>dG\u0005Z3gCVdG\u000f\n\u001a\u000219,wo\u00117bgN\u001c\u00160\u001c2pY\u0012\"WMZ1vYR$3'A\toK^tuN\\\"mCN\u001c8+_7c_2$\u0002Bc\n\u0013FJ\u001d'\u0013\u001a\u0005\t\u0013k\u0019)\u00071\u0001\u000b4!Q12CB3!\u0003\u0005\r!#\u0004\t\u0015%u6Q\rI\u0001\u0002\u0004I)*A\u000eoK^tuN\\\"mCN\u001c8+_7c_2$C-\u001a4bk2$HEM\u0001\u001c]\u0016<hj\u001c8DY\u0006\u001c8oU=nE>dG\u0005Z3gCVdG\u000fJ\u001a\u0002\u001b9,w\u000fV=qKNKXNY8m)!Q9Ce5\u0013VJ]\u0007\u0002CE\u001b\u0007W\u0002\rAc\r\t\u0015-M11\u000eI\u0001\u0002\u0004Ii\u0001\u0003\u0006\n>\u000e-\u0004\u0013!a\u0001\u0013+\u000bqC\\3x)f\u0004XmU=nE>dG\u0005Z3gCVdG\u000f\n\u001a\u0002/9,w\u000fV=qKNKXNY8mI\u0011,g-Y;mi\u0012\u001a\u0014AD1dG\u0016\u001c8OQ8v]\u0012\f'/\u001f\u000b\u0005\u0011#\u0014\n\u000f\u0003\u0005\nb\u000eE\u0004\u0019\u0001Ei\u0003QI7\u000fT3tg\u0006\u001b7-Z:tS\ndW\r\u00165b]R!\u0001R\u001eJt\u0011!\u0011Joa\u001dA\u0002!E\u0017!B8uQ\u0016\u0014\u0018AD0qe&4\u0018\r^3XSRD\u0017N\\\u0001\u000eaJLg/\u0019;f/&$\b.\u001b8\u0002#A\u0014\u0018N^1uK^KG\u000f[5o?\u0012*\u0017\u000f\u0006\u0003\t JM\b\u0002CG}\u0007s\u0002\r\u0001#5\u0002!M,G\u000f\u0015:jm\u0006$XmV5uQ&tG\u0003BF]%sD\u0001\"$?\u0004|\u0001\u0007\u0001\u0012[\u0001\u0012Q\u0006\u001c\u0018iY2fgN\u0014u.\u001e8eCJL\u0018AJ:dC2\fGE]3gY\u0016\u001cG\u000fJ5oi\u0016\u0014h.\u00197%'fl'm\u001c7tI\u0011JgNZ8tAA!\u00012[Dp\u0005-!\u0016\u0010]3ISN$xN]=\u0014\u0011\u001d}\u0007\u0012RI\u0019#o\t!b\u0018<bY&$gI]8n\u00039yf/\u00197jI\u001a\u0013x.\\0%KF$B\u0001c(\u0014\f!Q\u0001RWDr\u0003\u0003\u0005\rac7\u0002\u0017}3\u0018\r\\5e\rJ|W\u000eI\u0001\u0006?&tgm\\\u0001\n?&tgm\\0%KF$B\u0001c(\u0014\u0016!Q\u0001RWDu\u0003\u0003\u0005\rA#\u0016\u0002\r}KgNZ8!\u0003\u0015y\u0006O]3w+\t\u0011z0A\u0005`aJ,go\u0018\u0013fcR!\u0001rTJ\u0011\u0011)A)lb<\u0002\u0002\u0003\u0007!s`\u0001\u0007?B\u0014XM\u001e\u0011\u0015\u0011I}8sEJ\u0015'WA\u0001b%\u0002\bt\u0002\u000712\u001c\u0005\t'\u001f9\u0019\u00101\u0001\u000bV!A1\u0013DDz\u0001\u0004\u0011z0A\u0005wC2LGM\u0012:p[\u0006ia/\u00197jI\u001a\u0013x.\\0%KF$B\u0001c(\u00144!A\u00112UD|\u0001\u0004AI+\u0001\u0003qe\u00164HC\u0002J\u0000's\u0019Z\u0004\u0003\u0005\u0014.\u001du\b\u0019AFn\u0011!yYc\"@A\u0002)U\u0013a\u00039iCN,7\u000b\u001e:j]\u001e\fa\u0001^8MSN$XCAJ\"!\u0019QiHc!\u0013\u0000\u00061q\u000e\u001c3fgRDC\u0001#\u0002\u0011\nRA!s`J&'\u001b\u001az\u0005\u0003\u0006\u0014\u0006!\u001d\u0001\u0013!a\u0001\u00177D!be\u0004\t\bA\u0005\t\u0019\u0001F+\u0011)\u0019J\u0002c\u0002\u0011\u0002\u0003\u0007!s`\u000b\u0003''RCac7\r0U\u00111s\u000b\u0016\u0005\u0015+by#\u0001\bd_BLH\u0005Z3gCVdG\u000fJ\u001a\u0016\u0005Mu#\u0006\u0002J\u0000\u0019_\t1c\u0018<bY&$gI]8nI\u0005\u001c7-Z:tIA\nabX5oM>$\u0013mY2fgN$\u0013'\u0001\b`aJ,g\u000fJ1dG\u0016\u001c8\u000f\n\u001a\u0015\t)\u00051s\r\u0005\u000b\u0011kCI\"!AA\u0002!%F\u0003\u0002Ew'WB!\u0002#.\t\u001e\u0005\u0005\t\u0019\u0001F\u0001)\u0011aiae\u001c\t\u0015!U\u0006rDA\u0001\u0002\u0004AI\u000b\u0006\u0003\tnNM\u0004B\u0003E[\u0011G\t\t\u00111\u0001\u000b\u0002\u0005aqN]5hS:\fG.\u00138g_\u0006\u0019A\u000f]3\u0002\u0019\r|W\u000e\u001d7fi\u0016LeNZ8\u0015\t!}5S\u0010\u0005\t\u001fW\u0019y\t1\u0001\u000bV\u000591/\u001a;J]\u001a|G\u0003BF]'\u0007C\u0001bd\u000b\u0004\u0012\u0002\u0007!RK\u0001\u000b[>$\u0017NZ=J]\u001a|G\u0003BF]'\u0013C\u0001\"$\u0003\u0004\u0014\u0002\u000713\u0012\t\t\u0011\u0017\u001bjI#\u0016\u000bV%!1s\u0012EA\u0005%1UO\\2uS>t\u0017'A\u0005tk\n\u001cH/\u00138g_R11\u0012XJK'3C\u0001be&\u0004\u0016\u0002\u0007!r[\u0001\u0006gfl7\u000f\r\u0005\t'7\u001b)\n1\u0001\u000bX\u0006)1/_7tc\u0005!2/\u001a;J]\u001a|wj\u001e8fe\u0006#'.^:uK\u0012$Ba#/\u0014\"\"Aq2FBL\u0001\u0004Q)&A\btKRLeNZ8B]\u0012,e\u000e^3s)\u0011YIle*\t\u0011=-2\u0011\u0014a\u0001\u0015+\n!\"\u001e9eCR,\u0017J\u001c4p)\u0011YIl%,\t\u0011=-21\u0014a\u0001\u0015+\n!\u0002[1t%\u0006<\u0018J\u001c4p\u0003=A\u0017m]\"p[BdW\r^3J]\u001a|\u0017a\u0004:bo&sgm\\%t\u001d>$\u0016\u0010]3\u0002\u000fI\fw/\u00138g_\u0006qAO]1og\u001a|'/\\%oM>\u001cH\u0003\u0003J\u0000'w\u001bzl%3\t\u0011Mu6Q\u0015a\u0001%\u007f\fa!\u001b8g_N\u0004\u0004\u0002CJa\u0007K\u0003\rae1\u0002\u0011\r,(\u000f\u00155bg\u0016\u0004Ba#\u001f\u0014F&!1s\u0019E=\u0005\u0015\u0001\u0006.Y:f\u0011!\u0019Zm!*A\u0002-m\u0017!C2veB+'/[8e\u0003%\tG-\u00199u\u0013:4w\u000e\u0006\u0003\t NE\u0007\u0002CJ#\u0007O\u0003\rAe@\u0002\u0015\u0019\f\u0017\u000e\\%g'R,(-\u0001\u0006j]&$\u0018.\u00197ju\u0016,\"a#/\u0002\u001f5\f\u0017PY3J]&$\u0018.\u00197ju\u0016\f\u0011\u0002[1t)f\u0004X-\u0011;\u0015\t!58s\u001c\u0005\t'C\u001cy\u000b1\u0001\t*\u0006\u0019\u0001/\u001b3\u0002\u001f\r|wn\u001b&bm\u0006\u0014\u0016m^%oM>\fA#\u001e8tC\u001a,G+\u001f9f!\u0006\u0014\u0018-\u001c)iCN,WCAJb\u0003A)hn]1gKRK\b/\u001a)be\u0006l7/A\u0004qCJ\fWn]:\u0002\u0015\rd\u0017m]:C_VtG\r\u0006\u0003\f:NE\b\u0002\u0003F[\u0007\u007f\u0003\rA#\u0016\u0002!5\f7.Z*fe&\fG.\u001b>bE2,G\u0003\u0002EP'oD\u0001Bc)\u0004D\u0002\u0007!R\u000b\u000b\u0005\u0011?\u001bZ\u0010\u0003\u0005\u000ez\u000e\u0015\u0007\u0019\u0001Ei)\u0011Ayje@\t\u00115e8q\u0019a\u0001\u0011#\fAbX1o]>$\u0018\r^5p]N\u0004bA# \u000b\u0004.e\u0013!E1o]>$\u0018\r^5p]N\u001cFO]5oO\u0006Y\u0011M\u001c8pi\u0006$\u0018n\u001c8t+\t!\u001a\u0001\u0006\u0003\f:R5\u0001\u0002CF)\u0007\u001f\u0004\r\u0001f\u0001\u0002\u001f]LG\u000f[!o]>$\u0018\r^5p]N$Ba#/\u0015\u0014!A1\u0012KBi\u0001\u0004!\u001a!\u0001\bxSRD\u0017I\u001c8pi\u0006$\u0018n\u001c8\u0015\t-eF\u0013\u0004\u0005\t)7\u0019\u0019\u000e1\u0001\fZ\u0005!\u0011M\u001c8p\u0003I9\u0018\u000e\u001e5pkR\feN\\8uCRLwN\\:\u0002#\u0019LG\u000e^3s\u0003:tw\u000e^1uS>t7\u000f\u0006\u0003\f:R\r\u0002\u0002\u0003K\u0013\u0007/\u0004\r\u0001f\n\u0002\u0003A\u0004\u0002\u0002c#\u0014\u000e.e\u0003R^\u0001\u0011e\u0016lwN^3B]:|G/\u0019;j_:$Ba#/\u0015.!AQ\u0012`Bm\u0001\u0004A\t.A\u0007bI\u0012\feN\\8uCRLwN\u001c\u000b\u0005\u0017s#\u001a\u0004\u0003\u0005\u00156\rm\u0007\u0019AF-\u0003\u0015\tgN\\8u)\u0011YI\f&\u000f\t\u00115e8Q\u001ca\u0001\u0011#$ba#/\u0015>Q}\u0002\u0002CG}\u0007?\u0004\r\u0001#5\t\u0011Q\u00053q\u001ca\u0001)\u0007\n1!\u0019:h!\u0011A\u0019\u000e&\u0012\n\tQ\u001dC\u0013\n\u0002\u0005)J,W-\u0003\u0003\u0015L!e$!\u0002+sK\u0016\u001cH\u0003CF])\u001f\"\n\u0006&\u0016\t\u00115e8\u0011\u001da\u0001\u0011#D\u0001\u0002f\u0015\u0004b\u0002\u0007A3I\u0001\u0005CJ<\u0017\u0007\u0003\u0005\u0015X\r\u0005\b\u0019\u0001K\"\u0003\u0011\t'o\u001a\u001a\u0015\r-eF3\fK/\u0011!iIpa9A\u0002!E\u0007\u0002\u0003K0\u0007G\u0004\r\u0001&\u0019\u0002\t\u0005\u0014xm\u001d\t\u0007\u0011\u0017[)\u0006f\u0011\u0015\r-eFS\rK4\u0011!iIp!:A\u0002!E\u0007\u0002\u0003K0\u0007K\u0004\r\u0001&\u001b\u0011\r)u$2\u0011K\")\u0011YI\f&\u001c\t\u0011)\r6q\u001da\u0001\u0015+\"ba#/\u0015rQM\u0004\u0002\u0003FR\u0007S\u0004\rA#\u0016\t\u0011Q\u00053\u0011\u001ea\u0001)\u0007\"\u0002b#/\u0015xQeD3\u0010\u0005\t\u0015G\u001bY\u000f1\u0001\u000bV!AA3KBv\u0001\u0004!\u001a\u0005\u0003\u0005\u0015X\r-\b\u0019\u0001K\")\u0019YI\ff \u0015\u0002\"A!2UBw\u0001\u0004Q)\u0006\u0003\u0005\u0015`\r5\b\u0019\u0001K5\u0003\u0019I7\u000fT3tgR!\u0001R\u001eKD\u0011!QYka<A\u0002!E\u0017AC5t\u001d\u0016\u001cH/\u001a3J]R!\u0001R\u001eKG\u0011!QYk!=A\u0002!E\u0007\u0006BBy!\u0013#B\u0001#<\u0015\u0014\"A!2VBz\u0001\u0004A\t.\u0001\tjg\n{G\u000f^8n'V\u00147\t\\1tgR!\u0001R\u001eKM\u0011!QYk!>A\u0002!E\u0017AC5t'V\u00147\t\\1tgR!\u0001R\u001eKP\u0011!QYka>A\u0002!E\u0017!E5t\u001dVlWM]5d'V\u00147\t\\1tgR!\u0001R\u001eKS\u0011!QYk!?A\u0002!E\u0017AD5t/\u0016\f7nU;c\u00072\f7o\u001d\u000b\u0005\u0011[$Z\u000b\u0003\u0005\u000b,\u000em\b\u0019\u0001Ei\u0003\u00191\u0017\u000e\u001c;feR!\u0001\u0012\u001bKY\u0011!!\u001ala@A\u0002QU\u0016\u0001B2p]\u0012\u0004\u0002\u0002c#\u0014\u000e\"E\u0007R^\u0001\tgV\u001c\u0007\u000e\u00165biR!\u0001\u0012\u001bK^\u0011!!\u001a\f\"\u0001A\u0002QU\u0016aC2m_:,7+_7c_2,\"\u0001&1\u0011\u0007-ev\u000e\u0006\u0003\u0015BR\u0015\u0007\u0002\u0003Kd\t\u000b\u0001\r\u0001#5\u0002\u00119,woT<oKJ$b\u0001&1\u0015LR5\u0007\u0002\u0003Kd\t\u000f\u0001\r\u0001#5\t\u0011%uFq\u0001a\u0001\u0013+#\u0002\u0002&1\u0015RRMGS\u001b\u0005\t)\u000f$I\u00011\u0001\tR\"A\u0011R\u0018C\u0005\u0001\u0004I)\n\u0003\u0005\u0015X\u0012%\u0001\u0019AE\u001c\u0003\u001dqWm\u001e(b[\u0016$b\u0001&1\u0015\\Ru\u0007\u0002CE]\t\u0017\u0001\r\u0001#5\t\u0011%uF1\u0002a\u0001\u0013+\u000b\u0011\"\u001a8dY\u000ec\u0017m]:\u0002\u0015\u0015t7\r\\'fi\"|G-A\u0006iCN\u001cV\r\u001c4UsB,\u0017AE2bg\u00164\u0015.\u001a7e\u0003\u000e\u001cWm]:peN\f!dY1tK\u001aKW\r\u001c3BG\u000e,7o]8sgVs7o\u001c:uK\u0012\fAcY8ogR\u0014\b+\u0019:b[\u0006\u001b7-Z:t_J\u001c\u0018\u0001C1dG\u0016\u001c8/\u001a3\u0002\u0015=,H/\u001a:DY\u0006\u001c8\u000f\u000b\u0003\u0005(A%\u0015\u0001\u00047buf\f5mY3tg>\u0014\b\u0006\u0004C\u0016\u001f\u0017z\t\u0006&>\u0010XA\r\u0011E\u0001K|\u0003-su\u000e\t7p]\u001e,'\u000fI1qa2L7-\u00192mK2\u0002\u0013m\u001d\u0011mCjL\bE^1mg\u0002\n'/\u001a\u0011o_R\u0004C-Z:vO\u0006\u0014X\r\u001a\u0011v]RLG\u000e\t;iK\u00022\u0017.\u001a7eg\u0002\u0002\b.Y:f\u0003Ia\u0017M_=BG\u000e,7o]8s\u001fJ\u001cV\r\u001c4)\u0019\u00115r2JH))k|9\u0006e\u0001\u0002\u001d\u0005\u001c7-Z:tK\u0012|%oU3mM\u0006Q1/\u001e9fe\u000ec\u0017m]:\u0002\u001bA\f'/\u001a8u'fl'm\u001c7t\u0003U\u0001\u0018M]3oiNKXNY8mg&#XM]1u_J\fA\"\\5yS:\u001cE.Y:tKN\f\u0011\"\u00198dKN$xN]:\u0002#\u0015t7\r\\8tS:<7+^2i)\"\fG\u000f\u0006\u0003\tRV5\u0001\u0002\u0003K\u0013\t{\u0001\r\u0001&.)\t\u0011uR\u0013\u0003\t\u0005\u0011\u0017+\u001a\"\u0003\u0003\u0016\u0016!\u0005%AB5oY&tW-A\u000bf]\u000edwn]5oOB\u000b7m[1hK\u000ec\u0017m]:\u0002%\u0015t7\r\\8tS:<'k\\8u\u00072\f7o]\u0001\u0011K:\u001cGn\\:j]\u001e\u0004\u0016mY6bO\u0016\f\u0001\u0004\\8hS\u000e\fG\u000e\\=F]\u000edwn]5oO6+WNY3sQ\u0011!)\u0005%#\u0002-\u0015t7\r\\8tS:<Gk\u001c9MKZ,Gn\u00117bgNDC\u0001b\u0012\u0011\n\u0006)sN]5hS:\fG.\u00128dY>\u001c\u0018N\\4U_BdUM^3m\u00072\f7o](s\tVlW.\u001f\u0015\u0005\t\u0013\u0002J)A\bjg\u000e{G)\u001a4j]\u0016$w+\u001b;i)\u0011Ai/&\f\t\u0011)-F1\na\u0001\u0011#\fabY8na\u0006t\u0017n\u001c8DY\u0006\u001c8/A\u0007gY\u0006$xj\u001e8fe&sgm\\\u0001\u000f[\u0006$8\r[5oONKXNY8m)\u0019A\t.f\u000e\u0016<!AQ\u0013\bC-\u0001\u0004A\t.A\u0004pM\u000ed\u0017M\u001f>\t\u0011-uB\u0011\fa\u0001\u0015+\"b\u0001#5\u0016@U\u0005\u0003\u0002CF\u001f\t7\u0002\rA#\u0016\t\u0015U\rC1\fI\u0001\u0002\u0004I)*A\u0003bI6LG/\u0001\rnCR\u001c\u0007.\u001b8h'fl'm\u001c7%I\u00164\u0017-\u001e7uII\na#\\1uG\"LgnZ*z[\n|G.\u00138uKJt\u0017\r\u001c\u000b\u0007\u0011#,Z%&\u0014\t\u0011-uBq\fa\u0001\u0015+B\u0001\"f\u0014\u0005`\u0001\u0007\u0001\u0012[\u0001\nG\u0006tG-\u001b3bi\u0016\f\u0001c\u001c<feJLG\rZ3o'fl'm\u001c7\u0015\t!EWS\u000b\u0005\t+/\"\t\u00071\u0001\tR\u0006I!-Y:f\u00072\f7o]\u0001\u001a[\u0006$8\r[5oO&s\u0007.\u001a:ji\u0016$7+_7c_2Le\u000e\u0006\u0003\tRVu\u0003\u0002CK,\tG\u0002\r\u0001#5\u0002!=4XM\u001d:jI&twmU=nE>dG\u0003\u0002Ei+GB\u0001\"&\u000f\u0005f\u0001\u0007\u0001\u0012[\u0001\u0019G\u0006tW*\u0019;dQ&s\u0007.\u001a:ji\u0016$7+_7c_2\u001c\u0018!D8wKJ\u0014\u0018\u000eZ3DQ\u0006Lg.\u0001\u000bbY2|e/\u001a:sS\u0012$WM\\*z[\n|Gn]\u0001\u0018SN|e/\u001a:sS\u0012LgnZ*z[\n|GnQ1dQ\u0016\f\u0011dY8naV$X-S:Pm\u0016\u0014(/\u001b3j]\u001e\u001c\u00160\u001c2pY\u0006\u0011\u0012n](wKJ\u0014\u0018\u000eZ5oONKXNY8m\u0003QqW\r\u001f;Pm\u0016\u0014(/\u001b3eK:\u001c\u00160\u001c2pY\u0006IR\r\u001f;f]\u0012,Gm\u0014<feJLG\rZ3o'fl'm\u001c7t\u0003-\u0019X\u000f]3s'fl'm\u001c7\u0015\t!EW\u0013\u0010\u0005\t\u0013C$9\b1\u0001\tR\"bAqOH&\u001f#*jhd\u0016\u0012\u0006\u0005\u0012QsP\u0001\u001ckN,\u0007\u0005Y:va\u0016\u00148+_7c_2Le\u000e\u0019\u0011j]N$X-\u00193\u0002\u001bM,\b/\u001a:Ts6\u0014w\u000e\\%o)\u0011A\t.&\"\t\u0011%\u0005H\u0011\u0010a\u0001\u0011#$B\u0001#5\u0016\n\"A\u0011\u0012\u001dC>\u0001\u0004A\t\u000e\u000b\u0007\u0005|=-s\u0012KKG\u001f/\n*!\t\u0002\u0016\u0010\u00061Ro]3!A\u001e,G\u000f^3s\u0013:\u0004\u0007%\u001b8ti\u0016\fG-\u0001\u0005hKR$XM]%o)\u0011A\t.&&\t\u0011%\u0005HQ\u0010a\u0001\u0011#\f!bZ3ui\u0016\u0014h*Y7f\u0003)\u0019X\r\u001e;fe:\u000bW.Z\u0001\nY>\u001c\u0017\r\u001c(b[\u0016$b\u0001#5\u0016 V\u0005\u0006\u0002CEq\t\u000b\u0003\r\u0001#5\t\u0015U\rFQ\u0011I\u0001\u0002\u0004Ai/A\biCN,\u0005\u0010]1oI\u0016$g*Y7fQ1!)id\u0013\u0010RU\u001dvrKI\u0003C\t)J+\u0001\fvg\u0016\u0004\u0003m]3ui\u0016\u0014\u0018J\u001c1!S:\u001cH/Z1e\u0003A\u0019X\r\u001e;fe\u0012\"WMZ1vYR$#'\u0001\u0005tKR$XM]%o)\u0019A\t.&-\u00164\"A\u0011\u0012\u001dCE\u0001\u0004A\t\u000e\u0003\u0006\u0016$\u0012%\u0005\u0013!a\u0001\u0011[\f!c]3ui\u0016\u0014\u0018J\u001c\u0013eK\u001a\fW\u000f\u001c;%e\u00059b.Z3eg\u0016C\b/\u00198eK\u0012\u001cV\r\u001e;fe:\u000bW.Z\u0001\u0011g\u0016$H/\u001a:OC6,\u0017J\u001c\"bg\u0016$b!#\u0007\u0016>V}\u0006\u0002CEq\t\u001f\u0003\r\u0001#5\t\u0011U\u0005Gq\u0012a\u0001\u0011[\f\u0001\"\u001a=qC:$W\rZ\u0001\u000bG\u0006\u001cX-T8ek2,\u0017AD7bW\u0016tu\u000e\u001e)sSZ\fG/\u001a\u000b\u0005\u0011?+J\r\u0003\u0005\nb\u0012e\u0005\u0019\u0001EiQ\u0011!I\n%#\u0002\u00155\f7.\u001a)vE2L7-\u0001\u0006gSJ\u001cH\u000fU1sC6\f!b]8ve\u000e,g)\u001b7f)\u0011Ay*&6\t\u00115%A1\u0015a\u0001\u0019o\fab]3bY\u0016$7\t[5mIJ,g.A\ttK\u0006dW\r\u001a#fg\u000e,g\u000eZ1oiN\faa\u001c:FYN,G\u0003\u0002Ei+?D\u0011\"&9\u0005,\u0012\u0005\r!f9\u0002\u0007\u0005dG\u000f\u0005\u0004\t\f&u\b\u0012\u001b\u0015\u0005\tW+\n\"A\u0004b]\u0012\fEn]8\u0015\t-eV3\u001e\u0005\t\u001b\u0013!i\u000b1\u0001\u0016nBA\u00012RJG\u0011#Dy\n\u000b\u0003\u0005.VE\u0011\u0001\u00024pY\u0012,B!&>\u0016~R!Qs\u001fL\u0007)\u0011)JP&\u0003\u0011\tUmXS \u0007\u0001\t!)z\u0010b,C\u0002Y\u0005!!\u0001+\u0012\tY\r!\u0012\u0001\t\u0005\u0011\u00173*!\u0003\u0003\u0017\b!\u0005%a\u0002(pi\"Lgn\u001a\u0005\t\u001b\u0013!y\u000b1\u0001\u0017\fAA\u00012RJG\u0011#,J\u0010C\u0005\u0017\u0010\u0011=F\u00111\u0001\u0017\u0012\u0005!an\u001c8f!\u0019AY)#@\u0016z\"\"AqVK\t\u0003\ri\u0017\r\u001d\u000b\u0005\u0011#4J\u0002\u0003\u0005\u000e\n\u0011E\u0006\u0019\u0001L\u000e!!AYi%$\tR\"E\u0007\u0006\u0002CY+#\t\u0001\u0002^8PaRLwN\\\u000b\u0003-G\u0001b\u0001c#\u0011*\"E\u0017AC:j[BdWMT1nK\u0006q1/Z1mK\u0012\u001cvN\u001d;OC6,\u0017!C6fsN#(/\u001b8h\u0003)\u0019\u00180\u001c2pY.Kg\u000eZ\u000b\u0003-_\u00012\u0001c5G\u0005)\u0019\u00160\u001c2pY.Kg\u000eZ\n\b\r\"%\u0015\u0013GI\u001c\u0003!\t7mY;sCR,\u0017!C1dGV\u0014\u0018\r^3!\u0003%\u0019\u0018M\\5uSj,G-\u0001\u0006tC:LG/\u001b>fI\u0002\nA\"\u00192ce\u00164\u0018.\u0019;j_:\fQ\"\u00192ce\u00164\u0018.\u0019;j_:\u0004C\u0003\u0003L\u0018-\u00072*Ef\u0012\t\u000fYUR\n1\u0001\n|!9a\u0013H'A\u0002%m\u0004b\u0002L\u001f\u001b\u0002\u0007\u00112P\u0001\ng.|G.Z7ju\u0016$\u0002Bf\f\u0017NY=c\u0013\u000b\u0005\n-ky\u0005\u0013!a\u0001\u0013wB\u0011B&\u000fP!\u0003\u0005\r!c\u001f\t\u0013Yur\n%AA\u0002%mTC\u0001L+U\u0011IY\bd\f\u0015\t)\u0005a\u0013\f\u0005\n\u0011k+\u0016\u0011!a\u0001\u0011S#B\u0001#<\u0017^!I\u0001RW,\u0002\u0002\u0003\u0007!\u0012\u0001\u000b\u0005\u0019\u001b1\n\u0007C\u0005\t6b\u000b\t\u00111\u0001\t*R!\u0001R\u001eL3\u0011%A)lWA\u0001\u0002\u0004Q\t!\u0001\nbG\u000e,(/\u0019;f\u0017&tGm\u0015;sS:<\u0017aE:b]&$\u0018N_3e\u0017&tGm\u0015;sS:<\u0017!F1cEJ,g/[1uK\u0012\\\u0015N\u001c3TiJLgnZ\u0001\u000bW&tGm\u0015;sS:<\u0017A\u00044vY2t\u0015-\\3TiJLgnZ\u0001\tS\u0012\u001cFO]5oO\u0006Qqn\u001e8t'R\u0014\u0018N\\4\u0002\u001d1|7-\u0019;j_:\u001cFO]5oO\u0006\u0011b-\u001e7m\u0019>\u001c\u0017\r^5p]N#(/\u001b8h\u0003=\u0019\u0018n\u001a8biV\u0014Xm\u0015;sS:<\u0017AC5oM>\u001cFO]5oOR!\u00112\u0010L@\u0011!Q\u0019\u000bb6A\u0002)U\u0013aC5oM>\u001c8\u000b\u001e:j]\u001e\f1\u0003Z3ck\u001edunY1uS>t7\u000b\u001e:j]\u001e\f\u0001\u0003Z3g'R\u0014\u0018N\\4D_6\u0004xn]3\u0015\t%md\u0013\u0012\u0005\t-w\"i\u000e1\u0001\n|\u0005IA-\u001a4TiJLgnZ\u0001\u0019I\u001647\u000b\u001e:j]\u001e<\u0016\u000e\u001e5pkRLU\u000e\u001d7jG&$\u0018a\u00043fMN#(/\u001b8h'\u0016,g.Q:\u0015\t%md3\u0013\u0005\t\u001fW!\u0019\u000f1\u0001\u000bV\u000591m\\7q_N,GCBE>-33Z\n\u0003\u0005\n$\u0012\u0015\b\u0019AE>\u0011!1j\n\":A\u0002%m\u0014!A=\u0002-%\u001c8+\u001b8hY\u0016$xN\\#ySN$XM\u001c;jC2\f1#\u001a=jgR,g\u000e^5bYR{7\u000b\u001e:j]\u001e\fQe]2bY\u0006$#/\u001a4mK\u000e$H%\u001b8uKJt\u0017\r\u001c\u0013Ts6\u0014w\u000e\\:%I%tgm\\:\u0002SM\u001c\u0017\r\\1%e\u00164G.Z2uI%tG/\u001a:oC2$3+_7c_2\u001cH\u0005J5oM>\u001cx\fJ3r)\u0011AyJ&+\t\u0015!UFQ^A\u0001\u0002\u0004\u0011z0A\n`e\u0016\u001cWO]:j_:$\u0016M\u00197f?\u0012*\u0017\u000f\u0006\u0003\t Z=\u0006\"\u0003E[\u000f\u0005\u0005\t\u0019\u0001Ea\u00039\u0011XmY;sg&|g\u000eV1cY\u0016\f!C]3dkJ\u001c\u0018n\u001c8UC\ndWm\u0018\u0013fcR!\u0001r\u0014L\\\u0011\u001dQ\t\"\u0003a\u0001-s\u0003\u0002\"# \u0017<\"E\u0007\u0012V\u0005\u0005\u0011\u001fLy)\u0001\u0007`Y>\u001c7.\u001a3D_VtG/\u0001\t`Y>\u001c7.\u001a3D_VtGo\u0018\u0013fcR!\u0001r\u0014Lb\u0011%A)lCA\u0001\u0002\u0004AI+A\u0006m_\u000e\\W\rZ\"pk:$\u0018a\u00047pG.,GmQ8v]R|F%Z9\u0015\t!}e3\u001a\u0005\b-\u001bl\u0001\u0019\u0001EU\u0003\u0005I\u0017!D0m_\u000e\\\u0017N\\4Ue\u0006\u001cW-\u0006\u0002\u0017TB1aS\u001bLn\u0011#l!Af6\u000b\tYe\u0007\u0012Z\u0001\b[V$\u0018M\u00197f\u0013\u00111jNf6\u0003\u0017\u0005\u0013(/Y=Ck\u001a4WM]\u0001\fY>\u001c7\u000e\u0016:bG&tw-\u0001\bfq&\u001cH/\u001a8uS\u0006d\u0017\nZ:)\u0017AyYe$\u0015\u0017f>]s\u0012L\u0011\u0003-O\fQe\u00127pE\u0006d\u0007%\u001a=jgR,g\u000e^5bY\u0002JEi\u001d\u0011o_\u0002bwN\\4fe\u0002*8/\u001a3\u0002%\u0015D\u0018n\u001d;f]RL\u0017\r\\%eg~#S-\u001d\u000b\u0005\u0011?3j\u000fC\u0005\t6F\t\t\u00111\u0001\t*\"Z\u0011cd\u0013\u0010RY\u0015xrKH-\u0003EqW\r\u001f;Fq&\u001cH/\u001a8uS\u0006d\u0017\n\u001a\u0015\f%=-s\u0012\u000bLs\u001f/zI&\u0001\u000bge\u0016\u001c\b.\u0012=jgR,g\u000e^5bY:\u000bW.\u001a\u000b\u0005\u0015g1J\u0010C\u0004\u0010HM\u0001\r!c\u001f)\u0017MyYe$\u0015\u0010T=]s\u0012\f\u000b\u0007\u0015g1zp&\u0001\t\u000f=\u001dC\u00031\u0001\n|!91R\u001b\u000bA\u0002!%\u0016\u0001F2p]:,7\r^'pIVdW\rV8DY\u0006\u001c8\u000f\u0006\u0004\u0018\b]%qS\u0002\b\u0005+w<J\u0001C\u0004\u0018\fU\u0001\r\u0001$8\u0002\u00035Dq!c\u0015\u0016\u0001\u0004i\t'A\toK^4%/Z3UKJl7+_7c_2$\"\u0002c>\u0018\u0014]UqsCL\r\u0011\u001dI)D\u0006a\u0001\u00133A\u0001B#\u0005\u0017\t\u0003\u0007\u00112 \u0005\n\u001f_1\u0002\u0013!a\u0001\u0013+Cq!#;\u0017\u0001\u0004IY(A\u000eoK^4%/Z3UKJl7+_7c_2$C-\u001a4bk2$HeM\u0001\u0012]\u0016<hI]3f)f\u0004XmU=nE>dG\u0003\u0003F\u000e/C9\u001ac&\n\t\u000f%U\u0002\u00041\u0001\u000b4!Iqr\u0006\r\u0011\u0002\u0003\u0007\u0011R\u0013\u0005\b\u0013SD\u0002\u0019AE>\u0003mqWm\u001e$sK\u0016$\u0016\u0010]3Ts6\u0014w\u000e\u001c\u0013eK\u001a\fW\u000f\u001c;%e\u0005\u0001rN]5hS:\fGnT<oKJl\u0015\r]\u000b\u0003/[\u0001\u0002B&6\u00180!E\u0007\u0012[\u0005\u0005/c1:NA\u0005B]f\u0014VMZ'ba\u0006\t2/\u0019<f\u001fJLw-\u001b8bY>;h.\u001a:\u0015\t!}us\u0007\u0005\b\u001bs\\\u0002\u0019\u0001Ei\u0003M!WMZ5oK>\u0013\u0018nZ5oC2|uO\\3s)\u0019Ayj&\u0010\u0018@!9Q\u0012 \u000fA\u0002!E\u0007bBE]9\u0001\u0007\u0001\u0012[\u0001\tgfl'm\u001c7PMV!qSIL,)\u0011Q9cf\u0012\t\u0013]%S$!AA\u0004]-\u0013AC3wS\u0012,gnY3%cA1\u00012[L'/+JAaf\u0014\u0018R\tYq+Z1l)f\u0004X\rV1h\u0013\u00119\u001a\u0006#&\u0003\u0011QK\b/\u001a+bON\u0004B!f?\u0018X\u00119Qs`\u000fC\u0002Y\u0005\u0011AC*z[\n|GnS5oIB\u0019\u00012[/\u0014\u000bu;zff\u001b\u0011\u0019]\u0005tsME>\u0013wJYHf\f\u000e\u0005]\r$\u0002BL3\u0011\u0003\u000bqA];oi&lW-\u0003\u0003\u0018j]\r$!E!cgR\u0014\u0018m\u0019;Gk:\u001cG/[8ogA!qSNL9\u001b\t9zG\u0003\u0003\r~2U\u0011\u0002BI!/_\"\"af\u0017\u0002\u000b\u0005\u0004\b\u000f\\=\u0015\u0011Y=r\u0013PL>/{BqA&\u000ea\u0001\u0004IY\bC\u0004\u0017:\u0001\u0004\r!c\u001f\t\u000fYu\u0002\r1\u0001\n|\u00059QO\\1qa2LH\u0003BLB/\u0017\u0003b\u0001c#\u0011*^\u0015\u0005C\u0003EF/\u000fKY(c\u001f\n|%!q\u0013\u0012EA\u0005\u0019!V\u000f\u001d7fg!IqSR1\u0002\u0002\u0003\u0007asF\u0001\u0004q\u0012\u0002D\u0003\u0003Ei/#;\u001aj&&\t\u000f%e&\r1\u0001\tR\"9\u0011R\u00072A\u0002%]\u0002bBHtE\u0002\u0007\u00112P\u0001\n'fl'm\u001c7UC\u001e,\"af'\u0011\r]uus\u0014Ei\u001b\tAi(\u0003\u0003\u0018\"\"u$\u0001C\"mCN\u001cH+Y4\u0002\u001bQ+'/\\*z[\n|G\u000eV1h+\t9:\u000b\u0005\u0004\u0018\u001e^}\u0005R`\u0001\u0010\u001b>$W\u000f\\3Ts6\u0014w\u000e\u001c+bOV\u0011qS\u0016\t\u0007/;;z\n$8\u0002\u001f5+G\u000f[8e'fl'm\u001c7UC\u001e,\"af-\u0011\r]uus\u0014G7\u00035!\u0016\u0010]3Ts6\u0014w\u000e\u001c+bOV\u0011q\u0013\u0018\t\u0007/;;zJc\n\u0002\u001d\rc\u0017m]:Ts6\u0014w\u000e\u001c+bOV\u0011qs\u0018\t\u0007/;;z*$\u0019\u0003\u0015M#XOY*z[\n|Gn\u0005\u0003\u0007n\"EGC\u0001L\u0002\u0003\u00111\u0017-\u001b7\u0016\t]-ws\u001a\u000b\u0005/\u001b<\n\u000e\u0005\u0003\u0016|^=G\u0001CK\u0000\rk\u0014\rA&\u0001\t\u0011U\u0005hQ\u001fa\u0001/\u001b,\"a&6\u0011\t!Mws\u001b\u0006\u0005/3Ly+\u0001\u0004O_RK\b/Z\u000b\u0003/;\u0004B\u0001c5\bB\tAaj\\*z[\n|Gn\u0005\u0003\bB!EGCALo)\u0011IIbf:\t\u0011%\rs\u0011\na\u0001\u0013o!BAf\u0001\u0018l\"A\u00112ID&\u0001\u0004I9\u0004\u0006\u0003\t ^=\b\u0002CH\u0016\u000f\u001b\u0002\rA#\u0016\u0015\t!5x3\u001f\u0005\t\u0015W;Y\u00061\u0001\tRR!qS\\L|\u0011!!\u001al\"\u0018A\u0002QUVCAL~!\u0011aIp&@\u000b\t]}H2`\u0001\u000f\u001d>\f%m\u001d;sC\u000e$h)\u001b7f)\u0011A\u001a\u0001'\u0002\u000e\u0005\u001d\u0005\u0003\u0002\u0003F[\u000fk\u0002\rA#\u0016\u0015\t!E\u0007\u0014\u0002\u0005\t\u0013C<i\b1\u0001\tRR1a3\u0001M\u00071\u001fA\u0001\"#/\b\u0000\u0001\u0007\u0001\u0012\u001b\u0005\t\u0013{;y\b1\u0001\n\u0016\ny1\u000b^;c\u00072\f7o]*z[\n|Gn\u0005\u0004\b\u00025\u0005\u0004T\u0003\t\u0005\u0011'4i/A\bnSN\u001c\u0018N\\4NKN\u001c\u0018mZ3!)!AZ\u0002'\b\u0019 a\u0005\u0002\u0003\u0002Ej\u000f\u0003A\u0001bd0\b\f\u0001\u0007\u0001\u0012\u001b\u0005\t\u0013o<Y\u00011\u0001\u000b4!Aqr]D\u0006\u0001\u0004IYH\u0001\bTiV\u0014G+\u001a:n'fl'm\u001c7\u0014\r\u001d5\u0001R M\u000b)!AJ\u0003g\u000b\u0019.a=\u0002\u0003\u0002Ej\u000f\u001bA\u0001bd0\b\u0018\u0001\u0007\u0001\u0012\u001b\u0005\t\u0013o<9\u00021\u0001\n\u001a!Aqr]D\f\u0001\u0004IY(A\tGe\u0016,G+\u001a:n'fl'm\u001c7UC\u001e,\"\u0001'\u000e\u0011\r]uus\u0014E|\u0003E1%/Z3UsB,7+_7c_2$\u0016mZ\u000b\u00031w\u0001ba&(\u0018 *m\u0011\u0001D7bW\u0016tunU=nE>d\u0017\u0001\u0003(p'fl'm\u001c7\u0002\u001b\u0011,'/\u001b<f'fl'm\u001c7t)\u0019Q9\u000e'\u0012\u0019J!A\u0001tIDC\u0001\u0004Q9.\u0001\u0003ts6\u001c\b\u0002\u0003M&\u000f\u000b\u0003\rAf\u0007\u0002\u000bMLXN\u00128\u0002\u001d\u0011,'/\u001b<f'fl'm\u001c7teU!\u0001\u0014\u000bM/)!Q9\u000eg\u0015\u0019Va\u0005\u0004\u0002\u0003M$\u000f\u000f\u0003\rAc6\t\u0011a]sq\u0011a\u000113\n!!Y:\u0011\r)u$2\u0011M.!\u0011)Z\u0010'\u0018\u0005\u0011a}sq\u0011b\u0001-\u0003\u0011\u0011!\u0011\u0005\t1\u0017:9\t1\u0001\u0019dAQ\u00012\u0012M3\u0011#DZ\u0006#5\n\ta\u001d\u0004\u0012\u0011\u0002\n\rVt7\r^5p]J\n!\u0002Z3sSZ,G+\u001f9f)\u0019Aj\u0007'\u001d\u0019tQ!!R\u000bM8\u0011!\u0019:h\"#A\u0002)U\u0003\u0002\u0003M$\u000f\u0013\u0003\rAc6\t\u0011a-s\u0011\u0012a\u0001-7\t1\u0002Z3sSZ,G+\u001f9feU!\u0001\u0014\u0010MD)!AZ\bg \u0019\u0002b%E\u0003\u0002F+1{B\u0001be\u001e\b\f\u0002\u0007!R\u000b\u0005\t1\u000f:Y\t1\u0001\u000bX\"A\u0001tKDF\u0001\u0004A\u001a\t\u0005\u0004\u000b~)\r\u0005T\u0011\t\u0005+wD:\t\u0002\u0005\u0019`\u001d-%\u0019\u0001L\u0001\u0011!AZeb#A\u0002a-\u0005C\u0003EF1KB\t\u000e'\"\tR\u00069B-\u001a:jm\u0016$\u0016\u0010]3XSRDw+\u001b7eG\u0006\u0014Hm\u001d\u000b\u00051#C*\n\u0006\u0003\u000bVaM\u0005\u0002CJ<\u000f\u001b\u0003\rA#\u0016\t\u0011a\u001dsQ\u0012a\u0001\u0015/\fAb\u00197p]\u0016\u001c\u00160\u001c2pYN$BAc6\u0019\u001c\"A\u0001tIDH\u0001\u0004Q9.A\fdY>tWmU=nE>d7oU;cgR\u001c\u00160\\'baV\u0011\u0001\u0014\u0015\t\u00071GCJ\u000b',\u000e\u0005a\u0015&\u0002\u0002MT\u0011s\nA!\u001e;jY&!\u00014\u0016MS\u0005A\u0011V-^:bE2,\u0017J\\:uC:\u001cW\r\u0005\u0003\tTb=\u0016\u0002\u0002MY1g\u00131bU;cgR\u001c\u00160\\'ba&!\u0001T\u0017M\\\u0005!!\u0016\u0010]3NCB\u001c(\u0002BJ<\u0011s\n1c\u00197p]\u0016\u001c\u00160\u001c2pYN\fEoT<oKJ$bAc6\u0019>b}\u0006\u0002\u0003M$\u000f'\u0003\rAc6\t\u0011%ev1\u0013a\u0001\u0011#\fQc\u00197p]\u0016\u001c\u00160\u001c2pYN\fe\u000eZ'pI&4\u0017\u0010\u0006\u0004\u000bXb\u0015\u0007t\u0019\u0005\t1\u000f:)\n1\u0001\u000bX\"A\u0001\u0014ZDK\u0001\u0004\u0019Z)\u0001\u0004j]\u001a|gI\\\u0001\u001dG2|g.Z*z[\n|Gn]!u\u001f^tWM]!oI6{G-\u001b4z)!Q9\u000eg4\u0019RbM\u0007\u0002\u0003M$\u000f/\u0003\rAc6\t\u0011%evq\u0013a\u0001\u0011#D\u0001\u0002'3\b\u0018\u0002\u000713R\u0001\u0018GJ,\u0017\r^3Ge>l7\t\\8oK\u0012\u001c\u00160\u001c2pYN,B\u0001'7\u0019`R1\u00014\u001cMt1S$B\u0001'8\u0019bB!Q3 Mp\t!)zp\"'C\u0002Y\u0005\u0001\u0002\u0003Mr\u000f3\u0003\r\u0001':\u0002\u000f\r\u0014X-\u0019;peBQ\u00012\u0012M3\u0015/T)\u0006'8\t\u0011a\u001ds\u0011\u0014a\u0001\u0015/D\u0001be\u001e\b\u001a\u0002\u0007!RK\u0001\u001fGJ,\u0017\r^3Ge>l7\t\\8oK\u0012\u001c\u00160\u001c2pYN\fEoT<oKJ,B\u0001g<\u0019vRA\u0001\u0014\u001fM~1{Dz\u0010\u0006\u0003\u0019tb]\b\u0003BK~1k$\u0001\"f@\b\u001c\n\u0007a\u0013\u0001\u0005\t1G<Y\n1\u0001\u0019zBQ\u00012\u0012M3\u0015/T)\u0006g=\t\u0011a\u001ds1\u0014a\u0001\u0015/D\u0001\"#/\b\u001c\u0002\u0007\u0001\u0012\u001b\u0005\t'o:Y\n1\u0001\u000bV\u0005QQ.\u00199QCJ\fWn]:\u0016\te\u0015\u0011t\u0002\u000b\u00053\u000fI*\u0002\u0006\u0003\u001a\neE\u0001C\u0002F?\u0015\u0007KZ\u0001\u0005\u0004\u000b~)\r\u0015T\u0002\t\u0005+wLz\u0001\u0002\u0005\u0016\u0000\u001eu%\u0019\u0001L\u0001\u0011!iIa\"(A\u0002eM\u0001\u0003\u0003EF'\u001bC\t.'\u0004\t\u00115exQ\u0014a\u0001\u0011#\faBZ8sK\u0006\u001c\u0007\u000eU1sC6\u001c8\u000f\u0006\u0003\u001a\u001ce}A\u0003\u0002EP3;A\u0001\"$\u0003\b \u0002\u0007QS\u001e\u0005\t\u001bs<y\n1\u0001\tR\u0006yQ\r_5ti&twmU=nE>d7\u000f\u0006\u0003\u000bXf\u0015\u0002\u0002\u0003M$\u000fC\u0003\rAc6\u0002#\rdwn]3ti\u0016s7\r\\'fi\"|G\r\u0006\u0003\tRf-\u0002\u0002CM\u0017\u000fG\u0003\r\u0001#5\u0002\t\u0019\u0014x.\u001c\u0015\u0005\u000fG\u0003JIA\bDs\u000ed\u0017n\u0019*fM\u0016\u0014XM\\2f'!9)+'\u000e\u00122E]\u0002\u0003\u0002Ej3oIA!'\u000f\n0\nIA+\u001f9f\u000bJ\u0014xN]\u0001\u0005gfl\u0007%A\u0003j]\u001a|\u0007%A\u0003ue\u0006\u001cW-\u0006\u0002\u001aDA1\u00012RM#\u0011#LA!g\u0012\t\u0002\n)\u0011I\u001d:bs\u00061AO]1dK\u0002\"\u0002\"'\u0014\u001aPeE\u00134\u000b\t\u0005\u0011'<)\u000b\u0003\u0005\u000ez\u001eM\u0006\u0019\u0001Ei\u0011!yYcb-A\u0002)U\u0003BCM \u000fg\u0003\n\u00111\u0001\u001aDQA\u0011TJM,33JZ\u0006\u0003\u0006\u000ez\u001eU\u0006\u0013!a\u0001\u0011#D!bd\u000b\b6B\u0005\t\u0019\u0001F+\u0011)Izd\".\u0011\u0002\u0003\u0007\u00114I\u000b\u00033?RC\u0001#5\r0U\u0011\u00114\r\u0016\u00053\u0007by\u0003\u0006\u0003\u000b\u0002e\u001d\u0004B\u0003E[\u000f\u0003\f\t\u00111\u0001\t*R!\u0001R^M6\u0011)A)l\"2\u0002\u0002\u0003\u0007!\u0012\u0001\u000b\u0005\u0019\u001bIz\u0007\u0003\u0006\t6\u001e\u001d\u0017\u0011!a\u0001\u0011S#B\u0001#<\u001at!Q\u0001RWDf\u0003\u0003\u0005\rA#\u0001\u0002\u001f\rK8\r\\5d%\u00164WM]3oG\u0016\u0004B\u0001c5\bPN1qq\u001aEE/W\"\"!g\u001e\u0002\u0015\u0015l\u0007\u000f^=Ue\u0006\u001cW-A\u0006f[B$\u0018\u0010\u0016:bG\u0016\u0004C\u0003CM'3\u0007K*)g\"\t\u00115exq\u001ba\u0001\u0011#D\u0001bd\u000b\bX\u0002\u0007!R\u000b\u0005\u000b3\u007f99\u000e%AA\u0002e\r\u0013aD1qa2LH\u0005Z3gCVdG\u000fJ\u001a\u0015\te5\u0015\u0014\u0013\t\u0007\u0011\u0017\u0003J+g$\u0011\u0015!-us\u0011Ei\u0015+J\u001a\u0005\u0003\u0006\u0018\u000e\u001em\u0017\u0011!a\u00013\u001b\n1\u0004\n7fgNLg.\u001b;%OJ,\u0017\r^3sI\u0011,g-Y;mi\u0012\u001a\u0014a\u0003+za\u0016D\u0015n\u001d;pef\u0004B\u0001c5\t(M1\u0001rEMN/W\u0002Bb&\u0019\u0018h-m'R\u000bJ\u0000%\u007f$\"!g&\u0015\u0011I}\u0018\u0014UMR3KC\u0001b%\u0002\t.\u0001\u000712\u001c\u0005\t'\u001fAi\u00031\u0001\u000bV!A1\u0013\u0004E\u0017\u0001\u0004\u0011z\u0010\u0006\u0003\u001a*f5\u0006C\u0002EF!SKZ\u000b\u0005\u0006\t\f^\u001d52\u001cF+%\u007fD!b&$\t0\u0005\u0005\t\u0019\u0001J\u0000\u00035qw\u000eV=qK\"K7\u000f^8ss\u0006a2/_7c_2L5\u000fU8tg&\u0014G.Z%o%\u00164\u0017N\\3nK:$XC\u0001K[\u0003M\tG\u000e\\*z[\n|Gn\u001d%bm\u0016|uO\\3s)\u0019Ai/'/\u001a<\"A\u0001t\tE\u001b\u0001\u0004Q9\u000e\u0003\u0005\n:\"U\u0002\u0019\u0001EiQ\u0011A)\u0004%#\u0002%\u0005\u0014xm\u001d#fa\u0016tGm\u00148Qe\u00164\u0017\u000e\u001f\u000b\u0005\u0011[L\u001a\r\u0003\u0005\u000ez\"]\u0002\u0019\u0001Ei\u0003%\u0019\u00160\u001c2pY>\u00038\u000f\u0005\u0003\tT\"}3C\u0002E03\u0017<Z\u0007\u0005\u0006\u0018be5\u0007R^EK#WIA!g4\u0018d\t\t\u0012IY:ue\u0006\u001cGOR;oGRLwN\u001c\u001a\u0015\u0005e\u001dGCBI\u00163+L:\u000e\u0003\u0005\u0012D!\u0015\u0004\u0019\u0001Ew\u0011!a\t\u0001#\u001aA\u0002%UE\u0003BMn3?\u0004b\u0001c#\u0011*fu\u0007\u0003\u0003EF\u001b;Bi/#&\t\u0015]5\u0005rMA\u0001\u0002\u0004\tZ#\u0001\u0004BY2|\u0005o]\u000b\u0003#W\tqA\u00127bO>\u00038\u000f\u0006\u0003\u0012,e%\b\u0002\u0003G\u0001\u0011W\u0002\r!#&\u0002+\u0019|'/R1dQJ+G.\u001a<b]R\u001c\u00160\u001c2pYR1\u0001rTMx3cD\u0001\"$?\tn\u0001\u0007\u0001\u0012\u001b\u0005\t3gDi\u00071\u0001\u0016n\u0006\u0011aM\u001c\u000b\u00053oLZ\u0010\u0006\u0003\t fe\b\u0002\u0003G\u0001\u0011_\u0002\r!#&\t\u00115e\br\u000ea\u0001\u0011#$b!g@\u001b\u0004i\u001dA\u0003\u0002EP5\u0003A\u0001\u0002$\u0001\tr\u0001\u0007\u0011R\u0013\u0005\t5\u000bA\t\b1\u0001\tR\u0006!1/_72\u0011!QJ\u0001#\u001dA\u0002!E\u0017\u0001B:z[J\"B\u0001c(\u001b\u000e!AQ\u0012 E:\u0001\u0004A\t\u000e\u0006\u0004\t jE!4\u0003\u0005\t5\u000bA)\b1\u0001\tR\"A!\u0014\u0002E;\u0001\u0004A\t\u000e\u0005\u0003\fz-\u0005\b"
)
public interface Symbols extends scala.reflect.api.Symbols {
   SymbolKind$ SymbolKind();

   CyclicReference$ CyclicReference();

   TypeHistory$ scala$reflect$internal$Symbols$$TypeHistory();

   SymbolOps$ SymbolOps();

   void scala$reflect$internal$Symbols$_setter_$scala$reflect$internal$Symbols$$_lockingTrace_$eq(final ArrayBuffer x$1);

   void scala$reflect$internal$Symbols$_setter_$scala$reflect$internal$Symbols$$lockTracing_$eq(final boolean x$1);

   void scala$reflect$internal$Symbols$_setter_$scala$reflect$internal$Symbols$$originalOwnerMap_$eq(final AnyRefMap x$1);

   void scala$reflect$internal$Symbols$_setter_$SymbolTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Symbols$_setter_$TermSymbolTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Symbols$_setter_$ModuleSymbolTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Symbols$_setter_$MethodSymbolTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Symbols$_setter_$TypeSymbolTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Symbols$_setter_$ClassSymbolTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Symbols$_setter_$FreeTermSymbolTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Symbols$_setter_$FreeTypeSymbolTag_$eq(final ClassTag x$1);

   void scala$reflect$internal$Symbols$_setter_$scala$reflect$internal$Symbols$$cloneSymbolsSubstSymMap_$eq(final ReusableInstance x$1);

   void scala$reflect$internal$Symbols$_setter_$scala$reflect$internal$Symbols$$noTypeHistory_$eq(final TypeHistory x$1);

   void scala$reflect$internal$Symbols$_setter_$symbolIsPossibleInRefinement_$eq(final Function1 x$1);

   void scala$reflect$internal$Symbols$_setter_$AllOps_$eq(final SymbolOps x$1);

   int ids();

   void ids_$eq(final int x$1);

   // $FF: synthetic method
   static int getCurrentSymbolIdCount$(final Symbols $this) {
      return $this.getCurrentSymbolIdCount();
   }

   default int getCurrentSymbolIdCount() {
      return this.ids();
   }

   // $FF: synthetic method
   static int nextId$(final Symbols $this) {
      return $this.nextId();
   }

   default int nextId() {
      this.ids_$eq(this.ids() + 1);
      return this.ids();
   }

   Map scala$reflect$internal$Symbols$$_recursionTable();

   void scala$reflect$internal$Symbols$$_recursionTable_$eq(final Map x$1);

   // $FF: synthetic method
   static Map recursionTable$(final Symbols $this) {
      return $this.recursionTable();
   }

   default Map recursionTable() {
      return this.scala$reflect$internal$Symbols$$_recursionTable();
   }

   // $FF: synthetic method
   static void recursionTable_$eq$(final Symbols $this, final Map value) {
      $this.recursionTable_$eq(value);
   }

   default void recursionTable_$eq(final Map value) {
      this.scala$reflect$internal$Symbols$$_recursionTable_$eq(value);
   }

   int scala$reflect$internal$Symbols$$_lockedCount();

   void scala$reflect$internal$Symbols$$_lockedCount_$eq(final int x$1);

   // $FF: synthetic method
   static int lockedCount$(final Symbols $this) {
      return $this.lockedCount();
   }

   default int lockedCount() {
      return this.scala$reflect$internal$Symbols$$_lockedCount();
   }

   // $FF: synthetic method
   static void lockedCount_$eq$(final Symbols $this, final int i) {
      $this.lockedCount_$eq(i);
   }

   default void lockedCount_$eq(final int i) {
      this.scala$reflect$internal$Symbols$$_lockedCount_$eq(i);
   }

   ArrayBuffer scala$reflect$internal$Symbols$$_lockingTrace();

   boolean scala$reflect$internal$Symbols$$lockTracing();

   /** @deprecated */
   int scala$reflect$internal$Symbols$$existentialIds();

   /** @deprecated */
   void scala$reflect$internal$Symbols$$existentialIds_$eq(final int x$1);

   // $FF: synthetic method
   static int nextExistentialId$(final Symbols $this) {
      return $this.nextExistentialId();
   }

   /** @deprecated */
   default int nextExistentialId() {
      this.scala$reflect$internal$Symbols$$existentialIds_$eq(this.scala$reflect$internal$Symbols$$existentialIds() + 1);
      return this.scala$reflect$internal$Symbols$$existentialIds();
   }

   // $FF: synthetic method
   static Names.TypeName freshExistentialName$(final Symbols $this, final String suffix) {
      return $this.freshExistentialName(suffix);
   }

   /** @deprecated */
   default Names.TypeName freshExistentialName(final String suffix) {
      return this.freshExistentialName(suffix, this.nextExistentialId());
   }

   // $FF: synthetic method
   static Names.TypeName freshExistentialName$(final Symbols $this, final String suffix, final int id) {
      return $this.freshExistentialName(suffix, id);
   }

   default Names.TypeName freshExistentialName(final String suffix, final int id) {
      return ((Names)this).newTypeName((new StringBuilder(1)).append("_").append(id).append(suffix).toString());
   }

   // $FF: synthetic method
   static ModuleSymbol connectModuleToClass$(final Symbols $this, final ModuleSymbol m, final ClassSymbol moduleClass) {
      return $this.connectModuleToClass(m, moduleClass);
   }

   default ModuleSymbol connectModuleToClass(final ModuleSymbol m, final ClassSymbol moduleClass) {
      moduleClass.sourceModule_$eq(m);
      m.setModuleClass(moduleClass);
      return m;
   }

   // $FF: synthetic method
   static FreeTermSymbol newFreeTermSymbol$(final Symbols $this, final Names.TermName name, final Function0 value, final long flags, final String origin) {
      return $this.newFreeTermSymbol(name, value, flags, origin);
   }

   default FreeTermSymbol newFreeTermSymbol(final Names.TermName name, final Function0 value, final long flags, final String origin) {
      return (FreeTermSymbol)((SymbolTable)this.new FreeTermSymbol(name, value, origin)).initFlags(flags);
   }

   // $FF: synthetic method
   static long newFreeTermSymbol$default$3$(final Symbols $this) {
      return $this.newFreeTermSymbol$default$3();
   }

   default long newFreeTermSymbol$default$3() {
      return 0L;
   }

   // $FF: synthetic method
   static FreeTypeSymbol newFreeTypeSymbol$(final Symbols $this, final Names.TypeName name, final long flags, final String origin) {
      return $this.newFreeTypeSymbol(name, flags, origin);
   }

   default FreeTypeSymbol newFreeTypeSymbol(final Names.TypeName name, final long flags, final String origin) {
      return (FreeTypeSymbol)((SymbolTable)this.new FreeTypeSymbol(name, origin)).initFlags(flags);
   }

   // $FF: synthetic method
   static long newFreeTypeSymbol$default$2$(final Symbols $this) {
      return $this.newFreeTypeSymbol$default$2();
   }

   default long newFreeTypeSymbol$default$2() {
      return 0L;
   }

   AnyRefMap scala$reflect$internal$Symbols$$originalOwnerMap();

   // $FF: synthetic method
   static void saveOriginalOwner$(final Symbols $this, final Symbol sym) {
      $this.saveOriginalOwner(sym);
   }

   default void saveOriginalOwner(final Symbol sym) {
      Symbol var10000 = sym.owner();
      NoSymbol var2 = this.NoSymbol();
      if (var10000 == null) {
         if (var2 == null) {
            return;
         }
      } else if (var10000.equals(var2)) {
         return;
      }

      if (!this.scala$reflect$internal$Symbols$$originalOwnerMap().contains(sym)) {
         this.defineOriginalOwner(sym, sym.rawowner());
      }
   }

   // $FF: synthetic method
   static void defineOriginalOwner$(final Symbols $this, final Symbol sym, final Symbol owner) {
      $this.defineOriginalOwner(sym, owner);
   }

   default void defineOriginalOwner(final Symbol sym, final Symbol owner) {
      this.scala$reflect$internal$Symbols$$originalOwnerMap().update(sym, owner);
   }

   // $FF: synthetic method
   static TypeSymbol symbolOf$(final Symbols $this, final TypeTags.WeakTypeTag evidence$1) {
      return $this.symbolOf(evidence$1);
   }

   default TypeSymbol symbolOf(final TypeTags.WeakTypeTag evidence$1) {
      return (TypeSymbol)((Types.Type)((TypeTags)this).weakTypeOf(evidence$1)).typeSymbolDirect().asType();
   }

   // $FF: synthetic method
   static Symbol newStubSymbol$(final Symbols $this, final Symbol owner, final Names.Name name, final String missingMessage) {
      return $this.newStubSymbol(owner, name, missingMessage);
   }

   default Symbol newStubSymbol(final Symbol owner, final Names.Name name, final String missingMessage) {
      if (name instanceof Names.TypeName) {
         Names.TypeName var4 = (Names.TypeName)name;
         return (SymbolTable)this.new StubClassSymbol(owner, var4, missingMessage);
      } else {
         return (SymbolTable)this.new StubTermSymbol(owner, name.toTermName(), missingMessage);
      }
   }

   ClassTag SymbolTag();

   ClassTag TermSymbolTag();

   ClassTag ModuleSymbolTag();

   ClassTag MethodSymbolTag();

   ClassTag TypeSymbolTag();

   ClassTag ClassSymbolTag();

   ClassTag FreeTermSymbolTag();

   ClassTag FreeTypeSymbolTag();

   // $FF: synthetic method
   static NoSymbol makeNoSymbol$(final Symbols $this) {
      return $this.makeNoSymbol();
   }

   default NoSymbol makeNoSymbol() {
      return (SymbolTable)this.new NoSymbol();
   }

   // $FF: synthetic method
   static NoSymbol NoSymbol$(final Symbols $this) {
      return $this.NoSymbol();
   }

   default NoSymbol NoSymbol() {
      return this.makeNoSymbol();
   }

   // $FF: synthetic method
   static List deriveSymbols$(final Symbols $this, final List syms, final Function1 symFn) {
      return $this.deriveSymbols(syms, symFn);
   }

   default List deriveSymbols(final List syms, final Function1 symFn) {
      if (syms.isEmpty()) {
         return .MODULE$;
      } else {
         Collections var10000 = (Collections)this;
         if (syms == .MODULE$) {
            var10000 = .MODULE$;
         } else {
            scala.collection.immutable..colon.colon mapList_head = new scala.collection.immutable..colon.colon(symFn.apply(syms.head()), .MODULE$);
            scala.collection.immutable..colon.colon mapList_tail = mapList_head;

            for(List mapList_rest = (List)syms.tail(); mapList_rest != .MODULE$; mapList_rest = (List)mapList_rest.tail()) {
               scala.collection.immutable..colon.colon mapList_next = new scala.collection.immutable..colon.colon(symFn.apply(mapList_rest.head()), .MODULE$);
               mapList_tail.next_$eq(mapList_next);
               mapList_tail = mapList_next;
            }

            Statics.releaseFence();
            var10000 = mapList_head;
         }

         Object var10 = null;
         Object var11 = null;
         Object var12 = null;
         Object var13 = null;
         List syms1 = var10000;
         TypeMaps.SubstSymMap map = ((TypeMaps)this).SubstSymMap().apply(syms, syms1);

         for(List foreach_these = syms1; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
            ((Symbol)foreach_these.head()).modifyInfo(map);
         }

         return syms1;
      }
   }

   // $FF: synthetic method
   static List deriveSymbols2$(final Symbols $this, final List syms, final List as, final Function2 symFn) {
      return $this.deriveSymbols2(syms, as, symFn);
   }

   default List deriveSymbols2(final List syms, final List as, final Function2 symFn) {
      Collections var10000 = (Collections)this;
      ListBuffer map2_lb = new ListBuffer();
      List map2_ys1 = syms;

      for(List map2_ys2 = as; !map2_ys1.isEmpty() && !map2_ys2.isEmpty(); map2_ys2 = (List)map2_ys2.tail()) {
         Object map2_$plus$eq_elem = symFn.apply(map2_ys1.head(), map2_ys2.head());
         map2_lb.addOne(map2_$plus$eq_elem);
         map2_$plus$eq_elem = null;
         map2_ys1 = (List)map2_ys1.tail();
      }

      List var15 = map2_lb.toList();
      Object var10 = null;
      Object var11 = null;
      Object var12 = null;
      Object var14 = null;
      List syms1 = var15;
      if (syms1 == null) {
         throw null;
      } else {
         for(List foreach_these = syms1; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
            ((Symbol)foreach_these.head()).substInfo(syms, syms1);
         }

         return syms1;
      }
   }

   // $FF: synthetic method
   static Types.Type deriveType$(final Symbols $this, final List syms, final Function1 symFn, final Types.Type tpe) {
      return $this.deriveType(syms, symFn, tpe);
   }

   default Types.Type deriveType(final List syms, final Function1 symFn, final Types.Type tpe) {
      List syms1 = this.deriveSymbols(syms, symFn);
      return tpe.substSym(syms, syms1);
   }

   // $FF: synthetic method
   static Types.Type deriveType2$(final Symbols $this, final List syms, final List as, final Function2 symFn, final Types.Type tpe) {
      return $this.deriveType2(syms, as, symFn, tpe);
   }

   default Types.Type deriveType2(final List syms, final List as, final Function2 symFn, final Types.Type tpe) {
      List syms1 = this.deriveSymbols2(syms, as, symFn);
      return tpe.substSym(syms, syms1);
   }

   // $FF: synthetic method
   static Types.Type deriveTypeWithWildcards$(final Symbols $this, final List syms, final Types.Type tpe) {
      return $this.deriveTypeWithWildcards(syms, tpe);
   }

   default Types.Type deriveTypeWithWildcards(final List syms, final Types.Type tpe) {
      return syms.isEmpty() ? tpe : tpe.instantiateTypeParams(syms, ((Types)this).WildcardType().fillList(syms.length()));
   }

   // $FF: synthetic method
   static List cloneSymbols$(final Symbols $this, final List syms) {
      return $this.cloneSymbols(syms);
   }

   default List cloneSymbols(final List syms) {
      if (syms.isEmpty()) {
         return .MODULE$;
      } else {
         Collections var10000 = (Collections)this;
         if (syms == .MODULE$) {
            var10000 = .MODULE$;
         } else {
            scala.collection.immutable..colon.colon mapList_head = new scala.collection.immutable..colon.colon(((Symbol)syms.head()).cloneSymbol(), .MODULE$);
            scala.collection.immutable..colon.colon mapList_tail = mapList_head;

            for(List mapList_rest = (List)syms.tail(); mapList_rest != .MODULE$; mapList_rest = (List)mapList_rest.tail()) {
               scala.collection.immutable..colon.colon mapList_next = new scala.collection.immutable..colon.colon(((Symbol)mapList_rest.head()).cloneSymbol(), .MODULE$);
               mapList_tail.next_$eq(mapList_next);
               mapList_tail = mapList_next;
            }

            Statics.releaseFence();
            var10000 = mapList_head;
         }

         Object var14 = null;
         Object var15 = null;
         Object var16 = null;
         Object var17 = null;
         List syms1 = var10000;
         ReusableInstance var20 = this.scala$reflect$internal$Symbols$$cloneSymbolsSubstSymMap();
         if (var20 == null) {
            throw null;
         } else {
            ReusableInstance using_this = var20;
            if (using_this.scala$reflect$internal$util$ReusableInstance$$cache == null) {
               TypeMaps.SubstSymMap var10 = (TypeMaps.SubstSymMap)using_this.scala$reflect$internal$util$ReusableInstance$$make.apply();
               $anonfun$cloneSymbols$2(syms, syms1, var10);
            } else {
               int var21 = using_this.scala$reflect$internal$util$ReusableInstance$$taken;
               ArrayBuffer var10001 = using_this.scala$reflect$internal$util$ReusableInstance$$cache;
               if (var10001 == null) {
                  throw null;
               }

               if (var21 == SeqOps.size$(var10001)) {
                  ArrayBuffer var22 = using_this.scala$reflect$internal$util$ReusableInstance$$cache;
                  Object using_$plus$eq_elem = using_this.scala$reflect$internal$util$ReusableInstance$$make.apply();
                  if (var22 == null) {
                     throw null;
                  }

                  var22.addOne(using_$plus$eq_elem);
                  using_$plus$eq_elem = null;
               }

               ++using_this.scala$reflect$internal$util$ReusableInstance$$taken;

               try {
                  TypeMaps.SubstSymMap var18 = (TypeMaps.SubstSymMap)using_this.scala$reflect$internal$util$ReusableInstance$$cache.apply(using_this.scala$reflect$internal$util$ReusableInstance$$taken - 1);
                  $anonfun$cloneSymbols$2(syms, syms1, var18);
               } finally {
                  --using_this.scala$reflect$internal$util$ReusableInstance$$taken;
               }
            }

            return syms1;
         }
      }
   }

   ReusableInstance scala$reflect$internal$Symbols$$cloneSymbolsSubstSymMap();

   // $FF: synthetic method
   static List cloneSymbolsAtOwner$(final Symbols $this, final List syms, final Symbol owner) {
      return $this.cloneSymbolsAtOwner(syms, owner);
   }

   default List cloneSymbolsAtOwner(final List syms, final Symbol owner) {
      return this.deriveSymbols(syms, (x$64) -> x$64.cloneSymbol(owner));
   }

   // $FF: synthetic method
   static List cloneSymbolsAndModify$(final Symbols $this, final List syms, final Function1 infoFn) {
      return $this.cloneSymbolsAndModify(syms, infoFn);
   }

   default List cloneSymbolsAndModify(final List syms, final Function1 infoFn) {
      List cloned = this.cloneSymbols(syms);
      if (cloned == null) {
         throw null;
      } else {
         for(List foreach_these = cloned; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
            ((Symbol)foreach_these.head()).modifyInfo(infoFn);
         }

         return cloned;
      }
   }

   // $FF: synthetic method
   static List cloneSymbolsAtOwnerAndModify$(final Symbols $this, final List syms, final Symbol owner, final Function1 infoFn) {
      return $this.cloneSymbolsAtOwnerAndModify(syms, owner, infoFn);
   }

   default List cloneSymbolsAtOwnerAndModify(final List syms, final Symbol owner, final Function1 infoFn) {
      List cloned = this.cloneSymbolsAtOwner(syms, owner);
      if (cloned == null) {
         throw null;
      } else {
         for(List foreach_these = cloned; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
            ((Symbol)foreach_these.head()).modifyInfo(infoFn);
         }

         return cloned;
      }
   }

   // $FF: synthetic method
   static Object createFromClonedSymbols$(final Symbols $this, final List syms, final Types.Type tpe, final Function2 creator) {
      return $this.createFromClonedSymbols(syms, tpe, creator);
   }

   default Object createFromClonedSymbols(final List syms, final Types.Type tpe, final Function2 creator) {
      List syms1 = this.cloneSymbols(syms);
      return creator.apply(syms1, tpe.substSym(syms, syms1));
   }

   // $FF: synthetic method
   static Object createFromClonedSymbolsAtOwner$(final Symbols $this, final List syms, final Symbol owner, final Types.Type tpe, final Function2 creator) {
      return $this.createFromClonedSymbolsAtOwner(syms, owner, tpe, creator);
   }

   default Object createFromClonedSymbolsAtOwner(final List syms, final Symbol owner, final Types.Type tpe, final Function2 creator) {
      List syms1 = this.cloneSymbolsAtOwner(syms, owner);
      return creator.apply(syms1, tpe.substSym(syms, syms1));
   }

   // $FF: synthetic method
   static List mapParamss$(final Symbols $this, final Symbol sym, final Function1 f) {
      return $this.mapParamss(sym, f);
   }

   default List mapParamss(final Symbol sym, final Function1 f) {
      Collections var10000 = (Collections)this;
      List mmap_xss = sym.info().paramss();
      if (mmap_xss == null) {
         throw null;
      } else if (mmap_xss == .MODULE$) {
         return .MODULE$;
      } else {
         scala.collection.immutable..colon.colon var26 = new scala.collection.immutable..colon.colon;
         List var8 = (List)mmap_xss.head();
         if (var8 == null) {
            throw null;
         } else {
            Object var10002;
            if (var8 == .MODULE$) {
               var10002 = .MODULE$;
            } else {
               scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon(f.apply(var8.head()), .MODULE$);
               scala.collection.immutable..colon.colon map_t = map_h;

               for(List map_rest = (List)var8.tail(); map_rest != .MODULE$; map_rest = (List)map_rest.tail()) {
                  scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon(f.apply(map_rest.head()), .MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var10002 = map_h;
            }

            Object var18 = null;
            Object var19 = null;
            Object var20 = null;
            Object var21 = null;
            var26.<init>(var10002, .MODULE$);
            scala.collection.immutable..colon.colon mmap_map_h = var26;
            scala.collection.immutable..colon.colon mmap_map_t = mmap_map_h;

            for(List mmap_map_rest = (List)mmap_xss.tail(); mmap_map_rest != .MODULE$; mmap_map_rest = (List)mmap_map_rest.tail()) {
               var26 = new scala.collection.immutable..colon.colon;
               var8 = (List)mmap_map_rest.head();
               if (var8 == null) {
                  throw null;
               }

               if (var8 == .MODULE$) {
                  var10002 = .MODULE$;
               } else {
                  scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon(f.apply(var8.head()), .MODULE$);
                  scala.collection.immutable..colon.colon map_t = map_h;

                  for(List map_rest = (List)var8.tail(); map_rest != .MODULE$; map_rest = (List)map_rest.tail()) {
                     scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon(f.apply(map_rest.head()), .MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var10002 = map_h;
               }

               Object var22 = null;
               Object var23 = null;
               Object var24 = null;
               Object var25 = null;
               var26.<init>(var10002, .MODULE$);
               scala.collection.immutable..colon.colon mmap_map_nx = var26;
               mmap_map_t.next_$eq(mmap_map_nx);
               mmap_map_t = mmap_map_nx;
            }

            Statics.releaseFence();
            return mmap_map_h;
         }
      }
   }

   // $FF: synthetic method
   static void foreachParamss$(final Symbols $this, final Symbol sym, final Function1 f) {
      $this.foreachParamss(sym, f);
   }

   default void foreachParamss(final Symbol sym, final Function1 f) {
      Collections var10000 = (Collections)this;
      List mforeach_xss = sym.info().paramss();
      if (mforeach_xss == null) {
         throw null;
      } else {
         for(List mforeach_foreach_these = mforeach_xss; !mforeach_foreach_these.isEmpty(); mforeach_foreach_these = (List)mforeach_foreach_these.tail()) {
            List var5 = (List)mforeach_foreach_these.head();
            if (var5 == null) {
               throw null;
            }

            for(List foreach_these = var5; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               f.apply(foreach_these.head());
            }

            Object var7 = null;
         }

      }
   }

   // $FF: synthetic method
   static List existingSymbols$(final Symbols $this, final List syms) {
      return $this.existingSymbols(syms);
   }

   default List existingSymbols(final List syms) {
      if (syms == null) {
         throw null;
      } else {
         boolean filter_filterCommon_isFlipped = false;
         List filter_filterCommon_noneIn$1_l = syms;

         Object var10000;
         while(true) {
            if (filter_filterCommon_noneIn$1_l.isEmpty()) {
               var10000 = .MODULE$;
               break;
            }

            Object filter_filterCommon_noneIn$1_h = filter_filterCommon_noneIn$1_l.head();
            List filter_filterCommon_noneIn$1_t = (List)filter_filterCommon_noneIn$1_l.tail();
            Symbol var17 = (Symbol)filter_filterCommon_noneIn$1_h;
            if ($anonfun$existingSymbols$1(this, var17) != filter_filterCommon_isFlipped) {
               List filter_filterCommon_noneIn$1_allIn$1_remaining = filter_filterCommon_noneIn$1_t;

               while(true) {
                  if (filter_filterCommon_noneIn$1_allIn$1_remaining.isEmpty()) {
                     var10000 = filter_filterCommon_noneIn$1_l;
                     break;
                  }

                  Object filter_filterCommon_noneIn$1_allIn$1_x = filter_filterCommon_noneIn$1_allIn$1_remaining.head();
                  var17 = (Symbol)filter_filterCommon_noneIn$1_allIn$1_x;
                  if ($anonfun$existingSymbols$1(this, var17) == filter_filterCommon_isFlipped) {
                     scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_l.head(), .MODULE$);
                     List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_l.tail();

                     scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast;
                     for(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess != filter_filterCommon_noneIn$1_allIn$1_remaining; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.tail()) {
                        scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.head(), .MODULE$);
                        filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                        filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                     }

                     List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                     List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next;

                     while(!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.isEmpty()) {
                        Object filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.head();
                        var17 = (Symbol)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head;
                        if ($anonfun$existingSymbols$1(this, var17) != filter_filterCommon_isFlipped) {
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                        } else {
                           while(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy != filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next) {
                              scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.head(), .MODULE$);
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.tail();
                           }

                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                        }
                     }

                     if (!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.isEmpty()) {
                        filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy);
                     }

                     var10000 = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead;
                     Object var25 = null;
                     Object var28 = null;
                     Object var31 = null;
                     Object var34 = null;
                     Object var37 = null;
                     Object var40 = null;
                     Object var43 = null;
                     Object var46 = null;
                     break;
                  }

                  filter_filterCommon_noneIn$1_allIn$1_remaining = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
               }

               Object var21 = null;
               Object var23 = null;
               Object var26 = null;
               Object var29 = null;
               Object var32 = null;
               Object var35 = null;
               Object var38 = null;
               Object var41 = null;
               Object var44 = null;
               Object var47 = null;
               break;
            }

            filter_filterCommon_noneIn$1_l = filter_filterCommon_noneIn$1_t;
         }

         Object var18 = null;
         Object var19 = null;
         Object var20 = null;
         Object var22 = null;
         Object var24 = null;
         Object var27 = null;
         Object var30 = null;
         Object var33 = null;
         Object var36 = null;
         Object var39 = null;
         Object var42 = null;
         Object var45 = null;
         Object var48 = null;
         List filter_filterCommon_result = (List)var10000;
         Statics.releaseFence();
         return filter_filterCommon_result;
      }
   }

   // $FF: synthetic method
   static Symbol closestEnclMethod$(final Symbols $this, final Symbol from) {
      return $this.closestEnclMethod(from);
   }

   default Symbol closestEnclMethod(final Symbol from) {
      while(!from.isSourceMethod()) {
         if (from.isClass()) {
            return ((Symbols)this).NoSymbol();
         }

         SymbolTable var10000 = (SymbolTable)this;
         from = from.owner();
         this = var10000;
      }

      return from;
   }

   TypeHistory scala$reflect$internal$Symbols$$noTypeHistory();

   Function1 symbolIsPossibleInRefinement();

   // $FF: synthetic method
   static boolean allSymbolsHaveOwner$(final Symbols $this, final List syms, final Symbol owner) {
      return $this.allSymbolsHaveOwner(syms, owner);
   }

   default boolean allSymbolsHaveOwner(final List syms, final Symbol owner) {
      while(syms instanceof scala.collection.immutable..colon.colon) {
         List rest;
         label18: {
            scala.collection.immutable..colon.colon var3 = (scala.collection.immutable..colon.colon)syms;
            Symbol sym = (Symbol)var3.head();
            rest = var3.next$access$1();
            Symbol var10000 = sym.owner();
            if (var10000 == null) {
               if (owner == null) {
                  break label18;
               }
            } else if (var10000.equals(owner)) {
               break label18;
            }

            return false;
         }

         SymbolTable var6 = (SymbolTable)this;
         owner = owner;
         syms = rest;
         this = var6;
      }

      return true;
   }

   // $FF: synthetic method
   static boolean argsDependOnPrefix$(final Symbols $this, final Symbol sym) {
      return $this.argsDependOnPrefix(sym);
   }

   default boolean argsDependOnPrefix(final Symbol sym) {
      Types.Type tt = sym.owner().thisType();
      return tt instanceof Types.SingletonType && this.loop$6(sym.info(), tt);
   }

   SymbolOps AllOps();

   // $FF: synthetic method
   static SymbolOps FlagOps$(final Symbols $this, final long mask) {
      return $this.FlagOps(mask);
   }

   default SymbolOps FlagOps(final long mask) {
      return (SymbolTable)this.new SymbolOps(true, mask);
   }

   private void forEachRelevantSymbol(final Symbol sym, final Function1 fn) {
      fn.apply(sym);
      fn.apply(sym.moduleClass());
      fn.apply(sym.sourceModule());
   }

   // $FF: synthetic method
   static void markFlagsCompleted$(final Symbols $this, final Symbol sym, final long mask) {
      $this.markFlagsCompleted(sym, mask);
   }

   default void markFlagsCompleted(final Symbol sym, final long mask) {
      sym.markFlagsCompleted(mask);
      sym.moduleClass().markFlagsCompleted(mask);
      sym.sourceModule().markFlagsCompleted(mask);
   }

   // $FF: synthetic method
   static void markFlagsCompleted$(final Symbols $this, final Symbol sym1, final Symbol sym2, final long mask) {
      $this.markFlagsCompleted(sym1, sym2, mask);
   }

   default void markFlagsCompleted(final Symbol sym1, final Symbol sym2, final long mask) {
      this.markFlagsCompleted(sym1, mask);
      this.markFlagsCompleted(sym2, mask);
   }

   // $FF: synthetic method
   static void markAllCompleted$(final Symbols $this, final Symbol sym) {
      $this.markAllCompleted(sym);
   }

   default void markAllCompleted(final Symbol sym) {
      sym.markAllCompleted();
      sym.moduleClass().markAllCompleted();
      sym.sourceModule().markAllCompleted();
   }

   // $FF: synthetic method
   static void markAllCompleted$(final Symbols $this, final Symbol sym1, final Symbol sym2) {
      $this.markAllCompleted(sym1, sym2);
   }

   default void markAllCompleted(final Symbol sym1, final Symbol sym2) {
      this.markAllCompleted(sym1);
      this.markAllCompleted(sym2);
   }

   // $FF: synthetic method
   static Symbol $anonfun$deriveSymbols$1(final TypeMaps.SubstSymMap map$1, final Symbol x$60) {
      return x$60.modifyInfo(map$1);
   }

   // $FF: synthetic method
   static Symbol $anonfun$deriveSymbols2$1(final List syms$1, final List syms1$2, final Symbol x$61) {
      return x$61.substInfo(syms$1, syms1$2);
   }

   // $FF: synthetic method
   static Symbol $anonfun$cloneSymbols$1(final Symbol x$62) {
      return x$62.cloneSymbol();
   }

   // $FF: synthetic method
   static Symbol $anonfun$cloneSymbols$3(final TypeMaps.SubstSymMap msm$1, final Symbol x$63) {
      return x$63.modifyInfo(msm$1);
   }

   // $FF: synthetic method
   static void $anonfun$cloneSymbols$2(final List syms$2, final List syms1$3, final TypeMaps.SubstSymMap msm) {
      msm.reset(syms$2, syms1$3);
      if (syms1$3 == null) {
         throw null;
      } else {
         for(List foreach_these = syms1$3; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
            ((Symbol)foreach_these.head()).modifyInfo(msm);
         }

      }
   }

   // $FF: synthetic method
   static Symbol $anonfun$cloneSymbolsAndModify$1(final Function1 infoFn$1, final Symbol x$65) {
      return x$65.modifyInfo(infoFn$1);
   }

   // $FF: synthetic method
   static Symbol $anonfun$cloneSymbolsAtOwnerAndModify$1(final Function1 infoFn$2, final Symbol x$66) {
      return x$66.modifyInfo(infoFn$2);
   }

   // $FF: synthetic method
   static boolean $anonfun$existingSymbols$1(final Symbols $this, final Symbol s) {
      return s != null && s != $this.NoSymbol();
   }

   // $FF: synthetic method
   static boolean $anonfun$symbolIsPossibleInRefinement$1(final Symbol sym) {
      return sym.isPossibleInRefinement();
   }

   // $FF: synthetic method
   static boolean $anonfun$argsDependOnPrefix$2(final Types.Type tt$1, final Types.Type x$69) {
      if (x$69 == null) {
         if (tt$1 == null) {
            return true;
         }
      } else if (x$69.equals(tt$1)) {
         return true;
      }

      return false;
   }

   // $FF: synthetic method
   static boolean $anonfun$argsDependOnPrefix$1(final Types.Type tt$1, final Symbol x$68) {
      return x$68.info().dealias().exists((x$69) -> BoxesRunTime.boxToBoolean($anonfun$argsDependOnPrefix$2(tt$1, x$69)));
   }

   private boolean loop$6(final Types.Type mt, final Types.Type tt$1) {
      while(true) {
         if (!(mt instanceof Types.MethodType)) {
            if (!(mt instanceof Types.PolyType)) {
               return false;
            }

            Types.Type restpe = ((Types.PolyType)mt).resultType();
            SymbolTable var11 = (SymbolTable)this;
            mt = restpe;
            this = var11;
         } else {
            Types.MethodType var3 = (Types.MethodType)mt;
            List params = var3.params();
            Types.Type restpe = var3.resultType();
            if (params == null) {
               throw null;
            }

            List exists_these = params;

            boolean var10000;
            while(true) {
               if (exists_these.isEmpty()) {
                  var10000 = false;
                  break;
               }

               Symbol var8 = (Symbol)exists_these.head();
               if ($anonfun$argsDependOnPrefix$1(tt$1, var8)) {
                  var10000 = true;
                  break;
               }

               exists_these = (List)exists_these.tail();
            }

            Object var9 = null;
            if (var10000) {
               return true;
            }

            SymbolTable var10 = (SymbolTable)this;
            mt = restpe;
            this = var10;
         }
      }
   }

   // $FF: synthetic method
   static void $anonfun$markFlagsCompleted$1(final long mask$1, final Symbol x$70) {
      x$70.markFlagsCompleted(mask$1);
   }

   // $FF: synthetic method
   static void $anonfun$markAllCompleted$1(final Symbol x$71) {
      x$71.markAllCompleted();
   }

   static void $init$(final Symbols $this) {
      $this.ids_$eq(0);
      if (scala.Predef..MODULE$.Map() == null) {
         throw null;
      } else {
         $this.scala$reflect$internal$Symbols$$_recursionTable_$eq(scala.collection.immutable.Map.EmptyMap..MODULE$);
         $this.scala$reflect$internal$Symbols$$_lockedCount_$eq(0);
         ArrayBuffer var10001 = scala.collection.mutable.ArrayBuffer..MODULE$;
         $this.scala$reflect$internal$Symbols$_setter_$scala$reflect$internal$Symbols$$_lockingTrace_$eq(new ArrayBuffer());
         $this.scala$reflect$internal$Symbols$_setter_$scala$reflect$internal$Symbols$$lockTracing_$eq(((SymbolTable)$this).isSymbolLockTracingEnabled());
         $this.scala$reflect$internal$Symbols$$existentialIds_$eq(0);
         $this.scala$reflect$internal$Symbols$_setter_$scala$reflect$internal$Symbols$$originalOwnerMap_$eq(((SymbolTable)$this).perRunCaches().newAnyRefMap());
         $this.scala$reflect$internal$Symbols$_setter_$SymbolTag_$eq(scala.reflect.ClassTag..MODULE$.apply(Symbol.class));
         $this.scala$reflect$internal$Symbols$_setter_$TermSymbolTag_$eq(scala.reflect.ClassTag..MODULE$.apply(TermSymbol.class));
         $this.scala$reflect$internal$Symbols$_setter_$ModuleSymbolTag_$eq(scala.reflect.ClassTag..MODULE$.apply(ModuleSymbol.class));
         $this.scala$reflect$internal$Symbols$_setter_$MethodSymbolTag_$eq(scala.reflect.ClassTag..MODULE$.apply(MethodSymbol.class));
         $this.scala$reflect$internal$Symbols$_setter_$TypeSymbolTag_$eq(scala.reflect.ClassTag..MODULE$.apply(TypeSymbol.class));
         $this.scala$reflect$internal$Symbols$_setter_$ClassSymbolTag_$eq(scala.reflect.ClassTag..MODULE$.apply(ClassSymbol.class));
         $this.scala$reflect$internal$Symbols$_setter_$FreeTermSymbolTag_$eq(scala.reflect.ClassTag..MODULE$.apply(FreeTermSymbol.class));
         $this.scala$reflect$internal$Symbols$_setter_$FreeTypeSymbolTag_$eq(scala.reflect.ClassTag..MODULE$.apply(FreeTypeSymbol.class));
         ReusableInstance$ var6 = ReusableInstance$.MODULE$;
         Function0 var7 = () -> ((TypeMaps)$this).SubstSymMap().apply();
         boolean apply_enabled = ((SymbolTable)$this).isCompilerUniverse();
         Function0 apply_make = var7;
         ReusableInstance var8;
         if (apply_enabled) {
            int apply_apply_apply_initialSize = 4;
            var8 = new ReusableInstance(apply_make, apply_apply_apply_initialSize);
         } else {
            int apply_apply_initialSize = -1;
            var8 = new ReusableInstance(apply_make, apply_apply_initialSize);
         }

         Object var5 = null;
         $this.scala$reflect$internal$Symbols$_setter_$scala$reflect$internal$Symbols$$cloneSymbolsSubstSymMap_$eq(var8);
         $this.scala$reflect$internal$Symbols$_setter_$scala$reflect$internal$Symbols$$noTypeHistory_$eq($this.scala$reflect$internal$Symbols$$TypeHistory().apply(1, ((Types)$this).NoType(), (TypeHistory)null));
         $this.scala$reflect$internal$Symbols$_setter_$symbolIsPossibleInRefinement_$eq((sym) -> BoxesRunTime.boxToBoolean($anonfun$symbolIsPossibleInRefinement$1(sym)));
         $this.scala$reflect$internal$Symbols$_setter_$AllOps_$eq((SymbolTable)$this.new SymbolOps(false, 0L));
      }
   }

   // $FF: synthetic method
   static Object $anonfun$cloneSymbols$2$adapted(final List syms$2, final List syms1$3, final TypeMaps.SubstSymMap msm) {
      $anonfun$cloneSymbols$2(syms$2, syms1$3, msm);
      return BoxedUnit.UNIT;
   }

   // $FF: synthetic method
   static Object $anonfun$existingSymbols$1$adapted(final Symbols $this, final Symbol s) {
      return BoxesRunTime.boxToBoolean($anonfun$existingSymbols$1($this, s));
   }

   // $FF: synthetic method
   static Object $anonfun$markFlagsCompleted$1$adapted(final long mask$1, final Symbol x$70) {
      $anonfun$markFlagsCompleted$1(mask$1, x$70);
      return BoxedUnit.UNIT;
   }

   // $FF: synthetic method
   static Object $anonfun$markAllCompleted$1$adapted(final Symbol x$71) {
      $anonfun$markAllCompleted$1(x$71);
      return BoxedUnit.UNIT;
   }

   // $FF: synthetic method
   static Object $anonfun$argsDependOnPrefix$1$adapted(final Types.Type tt$1, final Symbol x$68) {
      return BoxesRunTime.boxToBoolean($anonfun$argsDependOnPrefix$1(tt$1, x$68));
   }

   // $FF: synthetic method
   private static Object $deserializeLambda$(SerializedLambda var0) {
      return Class.lambdaDeserialize<invokedynamic>(var0);
   }

   public abstract class SymbolContextApiImpl implements scala.reflect.api.Symbols.SymbolApi {
      // $FF: synthetic field
      public final SymbolTable $outer;

      public boolean isType() {
         return scala.reflect.api.Symbols.SymbolApi.isType$(this);
      }

      public scala.reflect.api.Symbols.TypeSymbolApi asType() {
         return scala.reflect.api.Symbols.SymbolApi.asType$(this);
      }

      public boolean isTerm() {
         return scala.reflect.api.Symbols.SymbolApi.isTerm$(this);
      }

      public scala.reflect.api.Symbols.TermSymbolApi asTerm() {
         return scala.reflect.api.Symbols.SymbolApi.asTerm$(this);
      }

      public boolean isMethod() {
         return scala.reflect.api.Symbols.SymbolApi.isMethod$(this);
      }

      public scala.reflect.api.Symbols.MethodSymbolApi asMethod() {
         return scala.reflect.api.Symbols.SymbolApi.asMethod$(this);
      }

      public boolean isOverloadedMethod() {
         return scala.reflect.api.Symbols.SymbolApi.isOverloadedMethod$(this);
      }

      public boolean isModule() {
         return scala.reflect.api.Symbols.SymbolApi.isModule$(this);
      }

      public scala.reflect.api.Symbols.ModuleSymbolApi asModule() {
         return scala.reflect.api.Symbols.SymbolApi.asModule$(this);
      }

      public boolean isClass() {
         return scala.reflect.api.Symbols.SymbolApi.isClass$(this);
      }

      public boolean isModuleClass() {
         return scala.reflect.api.Symbols.SymbolApi.isModuleClass$(this);
      }

      public scala.reflect.api.Symbols.ClassSymbolApi asClass() {
         return scala.reflect.api.Symbols.SymbolApi.asClass$(this);
      }

      public boolean isFreeTerm() {
         return false;
      }

      public FreeTermSymbol asFreeTerm() {
         throw new ScalaReflectionException((new StringBuilder(19)).append(this).append(" is not a free term").toString());
      }

      public boolean isFreeType() {
         return false;
      }

      public FreeTypeSymbol asFreeType() {
         throw new ScalaReflectionException((new StringBuilder(19)).append(this).append(" is not a free type").toString());
      }

      public boolean isExistential() {
         return ((Symbol)this).isExistentiallyBound();
      }

      public boolean isParamWithDefault() {
         return ((HasFlags)this).hasDefault();
      }

      public boolean isByNameParam() {
         return ((Symbol)this).isValueParameter() && ((Symbol)this).hasFlag(65536L);
      }

      public boolean isImplementationArtifact() {
         return ((Symbol)this).hasFlag(74766857797632L);
      }

      public boolean isJava() {
         return ((HasFlags)this).isJavaDefined();
      }

      public boolean isField() {
         return this.isTerm() && !this.isModule() && (!this.isMethod() || ((Symbol)this).owner().isTrait() && ((Symbol)this).isAccessor());
      }

      public boolean isMutableVal() {
         if (((Symbol)this).owner().isTrait()) {
            return !((Symbol)this).hasFlag(4194304L);
         } else {
            return ((HasFlags)this).isMutable();
         }
      }

      public boolean isVal() {
         return this.isField() && !this.isMutableVal();
      }

      public boolean isVar() {
         return this.isField() && !((HasFlags)this).isLazy() && this.isMutableVal();
      }

      public boolean isAbstract() {
         return ((Symbol)this).isAbstractClass() || ((HasFlags)this).isDeferred() || ((Symbol)this).isAbstractType();
      }

      public boolean isPrivateThis() {
         return ((Symbol)this).hasAllFlags(524292L);
      }

      public boolean isProtectedThis() {
         return ((Symbol)this).hasAllFlags(524289L);
      }

      public boolean isJavaEnum() {
         return ((HasFlags)this).hasJavaEnumFlag();
      }

      public boolean isJavaAnnotation() {
         return ((HasFlags)this).hasJavaAnnotationFlag();
      }

      public boolean isStaticAnnotation() {
         return ((Symbol)this).initialize().hasJavaAnnotationFlag() || ((Symbol)this).isNonBottomSubClass(this.scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer().definitions().StaticAnnotationClass()) && !this.equals(this.scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer().definitions().NowarnClass());
      }

      public Symbol newNestedSymbol(final Names.Name name, final Position pos, final long newFlags, final boolean isClass) {
         if (name instanceof Names.TermName) {
            Names.TermName var6 = (Names.TermName)name;
            return ((Symbol)this).newTermSymbol(var6, pos, newFlags);
         } else if (name instanceof Names.TypeName) {
            Names.TypeName var7 = (Names.TypeName)name;
            return (Symbol)(isClass ? ((Symbol)this).newClassSymbol(var7, pos, newFlags) : ((Symbol)this).newNonClassSymbol(var7, pos, newFlags));
         } else {
            throw new MatchError(name);
         }
      }

      public Set knownDirectSubclasses() {
         if (!this.scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer().isCompilerUniverse() && !((Symbol)this).isThreadsafe(this.scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer().AllOps())) {
            ((Symbol)this).initialize();
         }

         ((Symbol)this).enclosingPackage().info().decls().foreach((sym) -> {
            $anonfun$knownDirectSubclasses$1(this, sym);
            return BoxedUnit.UNIT;
         });
         if (!this.scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer().isPastTyper()) {
            ((StdAttachments.Attachable)this).updateAttachment(this.scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer().KnownDirectSubclassesCalled(), scala.reflect.ClassTag..MODULE$.apply(StdAttachments.KnownDirectSubclassesCalled$.class));
         }

         return ((Symbol)this).children();
      }

      public Types.Type selfType() {
         if (!this.scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer().isCompilerUniverse() && !((Symbol)this).isThreadsafe(this.scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer().AllOps())) {
            ((Symbol)this).initialize();
         }

         return ((Symbol)this).typeOfThis();
      }

      public List baseClasses() {
         return ((Symbol)this).info().baseClasses();
      }

      public Symbol module() {
         return ((Symbol)this).sourceModule();
      }

      public Types.Type thisPrefix() {
         return ((Symbol)this).thisType();
      }

      public Types.Type superPrefix(final Types.Type supertpe) {
         return this.scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer().SuperType().apply(((Symbol)this).thisType(), supertpe);
      }

      public Types.Type typeSignature() {
         return ((Symbol)this).info();
      }

      public Types.Type typeSignatureIn(final Types.Type site) {
         return site.memberInfo((Symbol)this);
      }

      public Types.Type toType() {
         return ((Symbol)this).tpe_$times();
      }

      public Types.Type toTypeIn(final Types.Type site) {
         return site.memberType((Symbol)this);
      }

      public Types.Type toTypeConstructor() {
         return ((Symbol)this).typeConstructor();
      }

      public Symbol setAnnotations(final Seq annots) {
         ((Symbol)this).setAnnotations(annots.toList());
         return (Symbol)this;
      }

      public Symbol getter() {
         return ((Symbol)this).getterIn(((Symbol)this).owner());
      }

      public Symbol setter() {
         return ((Symbol)this).setterIn(((Symbol)this).owner(), ((Symbol)this).needsExpandedSetterName());
      }

      public Symbol companion() {
         if (this.isModule() && !((HasFlags)this).hasPackageFlag()) {
            return ((Symbol)this).companionSymbol();
         } else if (this.isModuleClass() && !((Symbol)this).isPackageClass()) {
            return ((Symbol)this).sourceModule().companionSymbol();
         } else {
            return (Symbol)(this.isClass() && !this.isModuleClass() && !((Symbol)this).isPackageClass() ? ((Symbol)this).companionSymbol() : this.scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer().NoSymbol());
         }
      }

      public Types.Type infoIn(final Types.Type site) {
         return this.typeSignatureIn(site);
      }

      public List overrides() {
         return ((Symbol)this).allOverriddenSymbols();
      }

      public List paramLists() {
         return ((Symbol)this).paramss();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public scala.reflect.api.Symbols scala$reflect$api$Symbols$SymbolApi$$$outer() {
         return this.scala$reflect$internal$Symbols$SymbolContextApiImpl$$$outer();
      }

      // $FF: synthetic method
      public static final void $anonfun$knownDirectSubclasses$1(final SymbolContextApiImpl $this, final Symbol sym) {
         AbstractFile var10000 = ((Symbol)$this).sourceFile();
         AbstractFile var2 = sym.sourceFile();
         if (var10000 == null) {
            if (var2 != null) {
               return;
            }
         } else if (!var10000.equals(var2)) {
            return;
         }

         sym.rawInfo().forceDirectSuperclasses();
      }

      public SymbolContextApiImpl() {
         if (Symbols.this == null) {
            throw null;
         } else {
            this.$outer = Symbols.this;
            super();
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return var0.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public final class SymbolKind implements Product, Serializable {
      private final String accurate;
      private final String sanitized;
      private final String abbreviation;
      // $FF: synthetic field
      private final SymbolTable $outer;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public String accurate() {
         return this.accurate;
      }

      public String sanitized() {
         return this.sanitized;
      }

      public String abbreviation() {
         return this.abbreviation;
      }

      public SymbolKind skolemize() {
         String x$1 = (new StringBuilder(7)).append(this.accurate()).append(" skolem").toString();
         String x$2 = (new StringBuilder(4)).append(this.abbreviation()).append("#SKO").toString();
         String x$3 = this.sanitized();
         return this.copy(x$1, x$3, x$2);
      }

      public SymbolKind copy(final String accurate, final String sanitized, final String abbreviation) {
         return this.$outer.new SymbolKind(accurate, sanitized, abbreviation);
      }

      public String copy$default$1() {
         return this.accurate();
      }

      public String copy$default$2() {
         return this.sanitized();
      }

      public String copy$default$3() {
         return this.abbreviation();
      }

      public String productPrefix() {
         return "SymbolKind";
      }

      public int productArity() {
         return 3;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.accurate();
            case 1:
               return this.sanitized();
            case 2:
               return this.abbreviation();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof SymbolKind;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "accurate";
            case 1:
               return "sanitized";
            case 2:
               return "abbreviation";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof SymbolKind) {
               SymbolKind var2 = (SymbolKind)x$1;
               String var10000 = this.accurate();
               String var3 = var2.accurate();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               var10000 = this.sanitized();
               String var4 = var2.sanitized();
               if (var10000 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var4)) {
                  return false;
               }

               var10000 = this.abbreviation();
               String var5 = var2.abbreviation();
               if (var10000 == null) {
                  if (var5 == null) {
                     return true;
                  }
               } else if (var10000.equals(var5)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      public SymbolKind(final String accurate, final String sanitized, final String abbreviation) {
         this.accurate = accurate;
         this.sanitized = sanitized;
         this.abbreviation = abbreviation;
         if (Symbols.this == null) {
            throw null;
         } else {
            this.$outer = Symbols.this;
            super();
         }
      }
   }

   public class SymbolKind$ extends AbstractFunction3 implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public final String toString() {
         return "SymbolKind";
      }

      public SymbolKind apply(final String accurate, final String sanitized, final String abbreviation) {
         return this.$outer.new SymbolKind(accurate, sanitized, abbreviation);
      }

      public Option unapply(final SymbolKind x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple3(x$0.accurate(), x$0.sanitized(), x$0.abbreviation())));
      }

      public SymbolKind$() {
         if (Symbols.this == null) {
            throw null;
         } else {
            this.$outer = Symbols.this;
            super();
         }
      }
   }

   public abstract class Symbol extends SymbolContextApiImpl implements HasFlags, AnnotationInfos.Annotatable, StdAttachments.Attachable {
      private final Names.Name initName;
      private Names.Name _rawname;
      private Symbol _rawowner;
      private long _rawflags;
      private final int id;
      private int _validTo;
      private String javaBinaryNameStringCache;
      private Symbol _privateWithin;
      private TypeHistory scala$reflect$internal$Symbols$$infos;
      private List _annotations;
      private int isOverridingSymbolCache;
      private Attachments rawatt;

      public Attachments attachments() {
         return StdAttachments.Attachable.attachments$(this);
      }

      public StdAttachments.Attachable setAttachments(final Attachments attachments) {
         return StdAttachments.Attachable.setAttachments$(this, attachments);
      }

      public StdAttachments.Attachable updateAttachment(final Object attachment, final ClassTag evidence$1) {
         return StdAttachments.Attachable.updateAttachment$(this, attachment, evidence$1);
      }

      public StdAttachments.Attachable removeAttachment(final ClassTag evidence$2) {
         return StdAttachments.Attachable.removeAttachment$(this, evidence$2);
      }

      public Option getAndRemoveAttachment(final ClassTag evidence$3) {
         return StdAttachments.Attachable.getAndRemoveAttachment$(this, evidence$3);
      }

      public boolean hasAttachment(final ClassTag evidence$4) {
         return StdAttachments.Attachable.hasAttachment$(this, evidence$4);
      }

      public Position pos() {
         return StdAttachments.Attachable.pos$(this);
      }

      public void pos_$eq(final Position pos) {
         StdAttachments.Attachable.pos_$eq$(this, pos);
      }

      public StdAttachments.Attachable setPos(final Position newpos) {
         return StdAttachments.Attachable.setPos$(this, newpos);
      }

      public List staticAnnotations() {
         return AnnotationInfos.Annotatable.staticAnnotations$(this);
      }

      public Object addThrowsAnnotation(final Symbol throwableSym) {
         return AnnotationInfos.Annotatable.addThrowsAnnotation$(this, throwableSym);
      }

      public boolean hasAnnotation(final Symbol cls) {
         return AnnotationInfos.Annotatable.hasAnnotation$(this, cls);
      }

      public Option getAnnotation(final Symbol cls) {
         return AnnotationInfos.Annotatable.getAnnotation$(this, cls);
      }

      public boolean hasNoFlags(final long mask) {
         return HasFlags.hasNoFlags$(this, mask);
      }

      public String flagString() {
         return HasFlags.flagString$(this);
      }

      public String flagString(final long mask) {
         return HasFlags.flagString$(this, mask);
      }

      public boolean hasAbstractFlag() {
         return HasFlags.hasAbstractFlag$(this);
      }

      public boolean hasAccessorFlag() {
         return HasFlags.hasAccessorFlag$(this);
      }

      public boolean hasDefault() {
         return HasFlags.hasDefault$(this);
      }

      public boolean hasJavaEnumFlag() {
         return HasFlags.hasJavaEnumFlag$(this);
      }

      public boolean hasJavaAnnotationFlag() {
         return HasFlags.hasJavaAnnotationFlag$(this);
      }

      /** @deprecated */
      public boolean hasLocalFlag() {
         return HasFlags.hasLocalFlag$(this);
      }

      public boolean isLocalToThis() {
         return HasFlags.isLocalToThis$(this);
      }

      public boolean hasModuleFlag() {
         return HasFlags.hasModuleFlag$(this);
      }

      public boolean hasPackageFlag() {
         return HasFlags.hasPackageFlag$(this);
      }

      public boolean hasStableFlag() {
         return HasFlags.hasStableFlag$(this);
      }

      public boolean hasStaticFlag() {
         return HasFlags.hasStaticFlag$(this);
      }

      public boolean isAbstractOverride() {
         return HasFlags.isAbstractOverride$(this);
      }

      public boolean isAnyOverride() {
         return HasFlags.isAnyOverride$(this);
      }

      public boolean isCase() {
         return HasFlags.isCase$(this);
      }

      public boolean isCaseAccessor() {
         return HasFlags.isCaseAccessor$(this);
      }

      public boolean isDeferred() {
         return HasFlags.isDeferred$(this);
      }

      public boolean isFinal() {
         return HasFlags.isFinal$(this);
      }

      public boolean isArtifact() {
         return HasFlags.isArtifact$(this);
      }

      public boolean isImplicit() {
         return HasFlags.isImplicit$(this);
      }

      public boolean isInterface() {
         return HasFlags.isInterface$(this);
      }

      public boolean isJavaDefined() {
         return HasFlags.isJavaDefined$(this);
      }

      public boolean isLazy() {
         return HasFlags.isLazy$(this);
      }

      public boolean isLifted() {
         return HasFlags.isLifted$(this);
      }

      public boolean isMacro() {
         return HasFlags.isMacro$(this);
      }

      public boolean isMutable() {
         return HasFlags.isMutable$(this);
      }

      public boolean isOverride() {
         return HasFlags.isOverride$(this);
      }

      public boolean isParamAccessor() {
         return HasFlags.isParamAccessor$(this);
      }

      public boolean isPrivate() {
         return HasFlags.isPrivate$(this);
      }

      /** @deprecated */
      public boolean isPackage() {
         return HasFlags.isPackage$(this);
      }

      public boolean isPrivateLocal() {
         return HasFlags.isPrivateLocal$(this);
      }

      public boolean isProtected() {
         return HasFlags.isProtected$(this);
      }

      public boolean isProtectedLocal() {
         return HasFlags.isProtectedLocal$(this);
      }

      public boolean isPublic() {
         return HasFlags.isPublic$(this);
      }

      public boolean isSealed() {
         return HasFlags.isSealed$(this);
      }

      public boolean isSpecialized() {
         return HasFlags.isSpecialized$(this);
      }

      public boolean isSuperAccessor() {
         return HasFlags.isSuperAccessor$(this);
      }

      public boolean isSynthetic() {
         return HasFlags.isSynthetic$(this);
      }

      public boolean isTraitOrInterface() {
         return HasFlags.isTraitOrInterface$(this);
      }

      public String flagBitsToString(final long bits) {
         return HasFlags.flagBitsToString$(this, bits);
      }

      public String accessString() {
         return HasFlags.accessString$(this);
      }

      public String calculateFlagString(final long basis) {
         return HasFlags.calculateFlagString$(this, basis);
      }

      public boolean isParameter() {
         return HasFlags.isParameter$(this);
      }

      public Attachments rawatt() {
         return this.rawatt;
      }

      public void rawatt_$eq(final Attachments x$1) {
         this.rawatt = x$1;
      }

      public final Names.Name _rawname() {
         return this._rawname;
      }

      public final void _rawname_$eq(final Names.Name x$1) {
         this._rawname = x$1;
      }

      private boolean isSynchronized() {
         return this instanceof SynchronizedSymbols.SynchronizedSymbol;
      }

      private boolean isAprioriThreadsafe() {
         return this.isThreadsafe(this.scala$reflect$internal$Symbols$Symbol$$$outer().AllOps());
      }

      public final Names.Name rawname() {
         return this._rawname();
      }

      public final Names.Name name() {
         return this.needsFlatClasses() ? this.flattenedName() : this._rawname();
      }

      public void name_$eq(final Names.Name n) {
         if (this.scala$reflect$internal$Symbols$Symbol$$$outer().shouldLogAtThisPhase()) {
            if (this.isSpecialized()) {
               this.scala$reflect$internal$Symbols$Symbol$$$outer().debuglog(() -> this.msg$1(n));
            } else {
               this.scala$reflect$internal$Symbols$Symbol$$$outer().log(() -> this.msg$1(n));
            }
         }
      }

      public Names.Name flattenedName() {
         return this._rawname();
      }

      public abstract Names.Name asNameType(final Names.Name n);

      public final Symbol rawowner() {
         return this._rawowner;
      }

      public final long rawflags() {
         return this._rawflags;
      }

      public final int id() {
         return this.id;
      }

      public int validTo() {
         return this._validTo;
      }

      public void validTo_$eq(final int x) {
         this._validTo = x;
      }

      public Symbol setName(final Names.Name name) {
         this.name_$eq(this.asNameType(name));
         return this;
      }

      public void changeNameInOwners(final Names.Name name) {
         if (this.owner().isClass()) {
            for(TypeHistory ifs = this.owner().scala$reflect$internal$Symbols$$infos(); ifs != null; ifs = ifs.scala$reflect$internal$Symbols$TypeHistory$$_prev()) {
               ifs.scala$reflect$internal$Symbols$TypeHistory$$_info().decls().rehash(this, name);
            }

         }
      }

      public String rawFlagString(final long mask) {
         return this.calculateFlagString(this.rawflags() & mask);
      }

      public String rawFlagString() {
         return this.rawFlagString(this.flagMask());
      }

      public String debugFlagString() {
         return this.flagString(-1L);
      }

      public String varianceString() {
         return Variance$.MODULE$.symbolicString$extension(this.variance());
      }

      public long flagMask() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var5 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Symbols$Symbol$$$outer().settings();
         MutableSettings var6 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var6;
         boolean var7 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         if (var7 && !this.isAbstractType()) {
            return -1L;
         } else {
            return this.owner().isRefinementClass() ? 140739636104749L : 140739636104751L;
         }
      }

      public String flagsExplanationString() {
         return this.isGADTSkolem() ? " (this is a GADT skolem)" : "";
      }

      public String shortSymbolClass() {
         return package$.MODULE$.shortClassOfInstance(this);
      }

      public String symbolCreationString() {
         return scala.collection.StringOps..MODULE$.format$extension("%s%25s | %-40s | %s", scala.runtime.ScalaRunTime..MODULE$.genericWrapArray(new Object[]{BoxesRunTime.unboxToBoolean(this.scala$reflect$internal$Symbols$Symbol$$$outer().settings().uniqid().value()) ? scala.collection.StringOps..MODULE$.format$extension("%06d | ", scala.runtime.ScalaRunTime..MODULE$.genericWrapArray(new Object[]{this.id()})) : "", this.shortSymbolClass(), (new StringBuilder(4)).append(this.name().decode()).append(" in ").append(this.owner()).toString(), this.rawFlagString()}));
      }

      public final TermSymbol newValue(final Names.TermName name, final Position pos, final long newFlags) {
         return this.newTermSymbol(name, pos, newFlags);
      }

      public final Position newValue$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newValue$default$3() {
         return 0L;
      }

      public final TermSymbol newVariable(final Names.TermName name, final Position pos, final long newFlags) {
         return this.newTermSymbol(name, pos, 4096L | newFlags);
      }

      public final Position newVariable$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newVariable$default$3() {
         return 0L;
      }

      public final TermSymbol newValueParameter(final Names.TermName name, final Position pos, final long newFlags) {
         return this.newTermSymbol(name, pos, 8192L | newFlags);
      }

      public final Position newValueParameter$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newValueParameter$default$3() {
         return 0L;
      }

      public final TermSymbol newLocalDummy(final Position pos) {
         return (TermSymbol)this.newTermSymbol(this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().localDummyName(this), pos, 0L).setInfo(this.scala$reflect$internal$Symbols$Symbol$$$outer().NoType());
      }

      public final MethodSymbol newMethod(final Names.TermName name, final Position pos, final long newFlags) {
         return this.createMethodSymbol(name, pos, 64L | newFlags);
      }

      public final Position newMethod$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newMethod$default$3() {
         return 0L;
      }

      public final MethodSymbol newMethodSymbol(final Names.TermName name, final Position pos, final long newFlags) {
         return this.createMethodSymbol(name, pos, 64L | newFlags);
      }

      public final Position newMethodSymbol$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newMethodSymbol$default$3() {
         return 0L;
      }

      public final MethodSymbol newLabel(final Names.TermName name, final Position pos) {
         long newMethod_newFlags = 131072L;
         return this.createMethodSymbol(name, pos, 64L | newMethod_newFlags);
      }

      public final Position newLabel$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final MethodSymbol newConstructor(final Position pos, final long newFlags) {
         Names.TermName var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().CONSTRUCTOR();
         long newMethod_newFlags = this.getFlag(1048576L) | newFlags;
         Names.TermName newMethod_name = var10000;
         return this.createMethodSymbol(newMethod_name, pos, 64L | newMethod_newFlags);
      }

      public final long newConstructor$default$2() {
         return 0L;
      }

      public MethodSymbol newStaticConstructor(final Position pos) {
         return (MethodSymbol)this.newConstructor(pos, 8388608L).setInfo(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().UnitTpe());
      }

      public MethodSymbol newClassConstructor(final Position pos) {
         return (MethodSymbol)this.newConstructor(pos, 0L).setInfo(this.scala$reflect$internal$Symbols$Symbol$$$outer().new MethodType(.MODULE$, this.tpe_$times()));
      }

      public ModuleSymbol newLinkedModule(final Symbol moduleClass, final long newFlags) {
         Names.TermName var10000 = moduleClass.name().toTermName();
         Position var10001 = moduleClass.pos();
         long newModuleSymbol_newFlags = 256L | newFlags;
         Position newModuleSymbol_pos = var10001;
         Names.TermName newModuleSymbol_name = var10000;
         ModuleSymbol var11 = (ModuleSymbol)this.newTermSymbol(newModuleSymbol_name, newModuleSymbol_pos, newModuleSymbol_newFlags);
         newModuleSymbol_name = null;
         newModuleSymbol_pos = null;
         ModuleSymbol m = var11;
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().connectModuleToClass(m, (ClassSymbol)moduleClass);
      }

      public long newLinkedModule$default$2() {
         return 0L;
      }

      public final ModuleSymbol newModule(final Names.TermName name, final Position pos, final long newFlags0) {
         long newFlags = newFlags0 | 256L;
         ModuleSymbol m = (ModuleSymbol)this.newTermSymbol(name, pos, newFlags);
         Names.TypeName var10000 = name.toTypeName();
         long newModuleClass_newFlags = newFlags & 3688741L;
         Names.TypeName newModuleClass_name = var10000;
         long newModuleClass_newModuleClassSymbol_newFlags = newModuleClass_newFlags | 256L;
         ModuleClassSymbol var15 = (ModuleClassSymbol)this.newClassSymbol(newModuleClass_name, pos, newModuleClass_newModuleClassSymbol_newFlags);
         newModuleClass_name = null;
         ModuleClassSymbol clazz = var15;
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().connectModuleToClass(m, clazz);
      }

      public final Position newModule$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newModule$default$3() {
         return 0L;
      }

      public final ModuleSymbol newPackage(final Names.TermName name, final Position pos, final long newFlags) {
         SymbolTable var10000;
         boolean var10001;
         label27: {
            label26: {
               var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
               Names.Name var5 = this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().ROOT();
               if (name == null) {
                  if (var5 == null) {
                     break label26;
                  }
               } else if (name.equals(var5)) {
                  break label26;
               }

               if (!this.isPackageClass()) {
                  var10001 = false;
                  break label27;
               }
            }

            var10001 = true;
         }

         boolean assert_assertion = var10001;
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(this);
            } else {
               assert_this = null;
               return this.newModule(name, pos, 1065248L | newFlags);
            }
         }
      }

      public final Position newPackage$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newPackage$default$3() {
         return 0L;
      }

      public final TermSymbol newThisSym(final Names.TermName name, final Position pos) {
         return this.newTermSymbol(name, pos, 2097152L);
      }

      public final Names.TermName newThisSym$default$1() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().this_();
      }

      public final Position newThisSym$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final TermSymbol newImport(final Position pos) {
         return this.newTermSymbol((Names.TermName)this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().IMPORT(), pos, 0L);
      }

      public final ModuleSymbol newModuleSymbol(final Names.TermName name, final Position pos, final long newFlags) {
         return (ModuleSymbol)this.newTermSymbol(name, pos, newFlags);
      }

      public final Position newModuleSymbol$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newModuleSymbol$default$3() {
         return 0L;
      }

      public final Tuple2 newModuleAndClassSymbol(final Names.Name name, final Position pos, final long flags0) {
         long flags = flags0 | 256L;
         Names.TermName newModuleSymbol_name = name.toTermName();
         ModuleSymbol var10000 = (ModuleSymbol)this.newTermSymbol(newModuleSymbol_name, pos, flags);
         newModuleSymbol_name = null;
         ModuleSymbol m = var10000;
         Names.TypeName var17 = name.toTypeName();
         long newModuleClass_newFlags = flags & 3688741L;
         Names.TypeName newModuleClass_name = var17;
         long newModuleClass_newModuleClassSymbol_newFlags = newModuleClass_newFlags | 256L;
         ModuleClassSymbol var18 = (ModuleClassSymbol)this.newClassSymbol(newModuleClass_name, pos, newModuleClass_newModuleClassSymbol_newFlags);
         newModuleClass_name = null;
         ModuleClassSymbol c = var18;
         this.scala$reflect$internal$Symbols$Symbol$$$outer().connectModuleToClass(m, c);
         return new Tuple2(m, c);
      }

      public final ModuleClassSymbol newModuleClassSymbol(final Names.TypeName name, final Position pos, final long newFlags) {
         return (ModuleClassSymbol)this.newClassSymbol(name, pos, newFlags);
      }

      public final TypeSkolem newTypeSkolemSymbol(final Names.TypeName name, final Object origin, final Position pos, final long newFlags) {
         return this.createTypeSkolemSymbol(name, origin, pos, newFlags);
      }

      public final TermSymbol newOverloaded(final Types.Type pre, final List alternatives) {
         if (alternatives == null) {
            throw null;
         } else {
            List forall_these = alternatives;

            boolean var10000;
            while(true) {
               if (forall_these.isEmpty()) {
                  var10000 = true;
                  break;
               }

               if (!((Symbol)forall_these.head()).hasFlag(17592186044416L)) {
                  var10000 = false;
                  break;
               }

               forall_these = (List)forall_these.tail();
            }

            Object var6 = null;
            long triedCookingFlag = var10000 ? 17592186044416L : 0L;
            return (TermSymbol)this.newTermSymbol(((Symbol)alternatives.head()).name().toTermName(), ((StdAttachments.Attachable)alternatives.head()).pos(), 8589934592L | triedCookingFlag).setInfo(this.scala$reflect$internal$Symbols$Symbol$$$outer().new OverloadedType(pre, alternatives));
         }
      }

      public final TermSymbol newErrorValue(final Names.TermName name) {
         return (TermSymbol)this.newTermSymbol(name, this.pos(), 4297064448L).setInfo(this.scala$reflect$internal$Symbols$Symbol$$$outer().ErrorType());
      }

      public final AliasTypeSymbol newAliasType(final Names.TypeName name, final Position pos, final long newFlags) {
         return this.createAliasTypeSymbol(name, pos, newFlags);
      }

      public final Position newAliasType$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newAliasType$default$3() {
         return 0L;
      }

      public final AbstractTypeSymbol newAbstractType(final Names.TypeName name, final Position pos, final long newFlags) {
         return this.createAbstractTypeSymbol(name, pos, 16L | newFlags);
      }

      public final Position newAbstractType$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newAbstractType$default$3() {
         return 0L;
      }

      public final TypeSymbol newTypeParameter(final Names.TypeName name, final Position pos, final long newFlags) {
         long newAbstractType_newFlags = 8192L | newFlags;
         return this.createAbstractTypeSymbol(name, pos, 16L | newAbstractType_newFlags);
      }

      public final Position newTypeParameter$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newTypeParameter$default$3() {
         return 0L;
      }

      public final TypeSymbol newExistential(final Names.TypeName name, final Position pos, final long newFlags) {
         long newAbstractType_newFlags = 34359738368L | newFlags;
         return this.createAbstractTypeSymbol(name, pos, 16L | newAbstractType_newFlags);
      }

      public final Position newExistential$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newExistential$default$3() {
         return 0L;
      }

      private Function0 freshNamer() {
         int create_e = 0;
         IntRef cnt = new IntRef(create_e);
         return () -> {
            ++cnt.elem;
            return this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().syntheticParamName(cnt.elem);
         };
      }

      public final List newSyntheticValueParams(final List argtypes) {
         return this.newSyntheticValueParams(argtypes, this.freshNamer());
      }

      public final List newSyntheticValueParams(final List argtypes, final Function0 freshName) {
         if (argtypes == null) {
            throw null;
         } else if (argtypes == .MODULE$) {
            return .MODULE$;
         } else {
            Types.Type var7 = (Types.Type)argtypes.head();
            scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon(this.newSyntheticValueParam(var7, (Names.TermName)freshName.apply()), .MODULE$);
            scala.collection.immutable..colon.colon map_t = map_h;

            for(List map_rest = (List)argtypes.tail(); map_rest != .MODULE$; map_rest = (List)map_rest.tail()) {
               var7 = (Types.Type)map_rest.head();
               scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon(this.newSyntheticValueParam(var7, (Names.TermName)freshName.apply()), .MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            return map_h;
         }
      }

      public final TermSymbol newSyntheticValueParam(final Types.Type argtype, final Names.TermName name) {
         Position var10000 = this.owner().pos().focus();
         long newValueParameter_newFlags = 2097152L;
         Position newValueParameter_pos = var10000;
         TermSymbol var7 = this.newTermSymbol(name, newValueParameter_pos, 8192L | newValueParameter_newFlags);
         newValueParameter_pos = null;
         return (TermSymbol)var7.setInfo(argtype);
      }

      public final Names.TermName newSyntheticValueParam$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().syntheticParamName(1);
      }

      public TypeSymbol newSyntheticTypeParam(final String name, final long newFlags) {
         Names.TypeName var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer().newTypeName(name);
         NoPosition$ newTypeParameter_pos = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
         Names.TypeName newTypeParameter_name = var10000;
         long newTypeParameter_newAbstractType_newFlags = 8192L | newFlags;
         AbstractTypeSymbol var10 = this.createAbstractTypeSymbol(newTypeParameter_name, newTypeParameter_pos, 16L | newTypeParameter_newAbstractType_newFlags);
         newTypeParameter_name = null;
         newTypeParameter_pos = null;
         return (TypeSymbol)((TypeSymbol)var10).setInfo(this.scala$reflect$internal$Symbols$Symbol$$$outer().TypeBounds().empty());
      }

      public List newSyntheticTypeParams(final int num) {
         RichInt var10000 = scala.runtime.RichInt..MODULE$;
         byte var2 = 0;
         Range var10 = scala.collection.immutable.Range..MODULE$;
         List var11 = (new Range.Exclusive(var2, num, 1)).toList();
         if (var11 == null) {
            throw null;
         } else {
            List map_this = var11;
            if (map_this == .MODULE$) {
               return .MODULE$;
            } else {
               Object var8 = map_this.head();
               scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$newSyntheticTypeParams$1(this, BoxesRunTime.unboxToInt(var8)), .MODULE$);
               scala.collection.immutable..colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != .MODULE$; map_rest = (List)map_rest.tail()) {
                  var8 = map_rest.head();
                  scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$newSyntheticTypeParams$1(this, BoxesRunTime.unboxToInt(var8)), .MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               return map_h;
            }
         }
      }

      public TypeSkolem newExistentialSkolem(final Symbol basis, final Object origin) {
         return this.newExistentialSkolem(basis.name().toTypeName(), basis.info(), basis.flags(), basis.pos(), origin);
      }

      public TypeSkolem newExistentialSkolem(final Names.TypeName name, final Types.Type info, final long flags, final Position pos, final Object origin) {
         if (name == null) {
            throw null;
         } else {
            long newTypeSkolemSymbol_newFlags = (flags | 34359738368L) & -8193L;
            TypeSkolem skolem = this.createTypeSkolemSymbol(name, origin, pos, newTypeSkolemSymbol_newFlags);
            return (TypeSkolem)skolem.setInfo(info.cloneInfo(skolem));
         }
      }

      public final long GADT_SKOLEM_FLAGS() {
         return 18874368L;
      }

      public TypeSkolem newGADTSkolem(final Names.TypeName name, final Symbol origin, final Types.Type info) {
         Position var10000 = origin.pos();
         long newTypeSkolemSymbol_newFlags = origin.flags() & -34359746561L | 18874368L;
         Position newTypeSkolemSymbol_pos = var10000;
         TypeSkolem var8 = this.createTypeSkolemSymbol(name, origin, newTypeSkolemSymbol_pos, newTypeSkolemSymbol_newFlags);
         newTypeSkolemSymbol_pos = null;
         return (TypeSkolem)var8.setInfo(info);
      }

      /** @deprecated */
      public final TypeSymbol freshExistential(final String suffix) {
         Names.TypeName var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer().freshExistentialName(suffix);
         Position var10001 = this.pos();
         long newExistential_newFlags = 0L;
         Position newExistential_pos = var10001;
         Names.TypeName newExistential_name = var10000;
         long newExistential_newAbstractType_newFlags = 34359738368L | newExistential_newFlags;
         return this.createAbstractTypeSymbol(newExistential_name, newExistential_pos, 16L | newExistential_newAbstractType_newFlags);
      }

      public final TypeSymbol freshExistential(final String suffix, final int id) {
         Names.TypeName var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer().freshExistentialName(suffix, id);
         Position var10001 = this.pos();
         long newExistential_newFlags = 0L;
         Position newExistential_pos = var10001;
         Names.TypeName newExistential_name = var10000;
         long newExistential_newAbstractType_newFlags = 34359738368L | newExistential_newFlags;
         return this.createAbstractTypeSymbol(newExistential_name, newExistential_pos, 16L | newExistential_newAbstractType_newFlags);
      }

      public final TypeSkolem newTypeSkolem() {
         Symbol var10000 = this.owner();
         Names.TypeName var10001 = this.name().toTypeName();
         Position var10002 = this.pos();
         long newTypeSkolemSymbol_newFlags = this.flags();
         Position newTypeSkolemSymbol_pos = var10002;
         Names.TypeName newTypeSkolemSymbol_name = var10001;
         if (var10000 == null) {
            throw null;
         } else {
            return var10000.createTypeSkolemSymbol(newTypeSkolemSymbol_name, this, newTypeSkolemSymbol_pos, newTypeSkolemSymbol_newFlags);
         }
      }

      public final Position newTypeSkolemSymbol$default$3() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newTypeSkolemSymbol$default$4() {
         return 0L;
      }

      public final ClassSymbol newClass(final Names.TypeName name, final Position pos, final long newFlags) {
         return this.newClassSymbol(name, pos, newFlags);
      }

      public final Position newClass$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newClass$default$3() {
         return 0L;
      }

      public ClassSymbol newClassWithInfo(final Names.TypeName name, final List parents, final Scopes.Scope scope, final Position pos, final long newFlags) {
         ClassSymbol clazz = this.newClassSymbol(name, pos, newFlags);
         return (ClassSymbol)clazz.setInfo(this.scala$reflect$internal$Symbols$Symbol$$$outer().new ClassInfoType(parents, scope, clazz));
      }

      public Position newClassWithInfo$default$4() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public long newClassWithInfo$default$5() {
         return 0L;
      }

      public final ClassSymbol newErrorClass(final Names.TypeName name) {
         return this.newClassWithInfo(name, .MODULE$, this.scala$reflect$internal$Symbols$Symbol$$$outer().new ErrorScope(this), this.pos(), 4297064448L);
      }

      public final ModuleClassSymbol newModuleClass(final Names.TypeName name, final Position pos, final long newFlags) {
         long newModuleClassSymbol_newFlags = newFlags | 256L;
         return (ModuleClassSymbol)this.newClassSymbol(name, pos, newModuleClassSymbol_newFlags);
      }

      public final Position newModuleClassSymbol$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newModuleClassSymbol$default$3() {
         return 0L;
      }

      public final Position newModuleClass$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newModuleClass$default$3() {
         return 0L;
      }

      public final ClassSymbol newAnonymousFunctionClass(final Position pos, final long newFlags) {
         return this.newClassSymbol((Names.TypeName)this.scala$reflect$internal$Symbols$Symbol$$$outer().tpnme().ANON_FUN_NAME(), pos, 2097184L | newFlags);
      }

      public final Position newAnonymousFunctionClass$default$1() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newAnonymousFunctionClass$default$2() {
         return 0L;
      }

      public final TermSymbol newAnonymousFunctionValue(final Position pos, final long newFlags) {
         return (TermSymbol)this.newTermSymbol((Names.TermName)this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().ANON_FUN_NAME(), pos, 2097152L | newFlags).setInfo(this.scala$reflect$internal$Symbols$Symbol$$$outer().NoType());
      }

      public final long newAnonymousFunctionValue$default$2() {
         return 0L;
      }

      public final RefinementClassSymbol newRefinementClass(final Position pos) {
         return this.createRefinementClassSymbol(pos, 0L);
      }

      public final Symbol newErrorSymbol(final Names.Name name) {
         if (name instanceof Names.TypeName) {
            Names.TypeName var2 = (Names.TypeName)name;
            return this.newErrorClass(var2);
         } else if (name instanceof Names.TermName) {
            Names.TermName var3 = (Names.TermName)name;
            return this.newErrorValue(var3);
         } else {
            throw new MatchError(name);
         }
      }

      public Symbol newStubSymbol(final Names.Name name, final String missingMessage) {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().newStubSymbol(this, name, missingMessage);
      }

      public Symbol sugaredSymbolOrSelf() {
         Symbol getter = this.getterIn(this.owner());
         NoSymbol var2 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
         if (getter == null) {
            if (var2 == null) {
               return this;
            }
         } else if (getter.equals(var2)) {
            return this;
         }

         Symbol qual$1 = this.owner();
         Names.TermName x$1 = getter.name().toTermName();
         long x$2 = getter.flags() & -65L;
         Position x$3 = qual$1.newValue$default$2();
         TermSymbol result = (TermSymbol)qual$1.newTermSymbol(x$1, x$3, x$2).setPrivateWithin(getter.privateWithin()).setInfo(getter.info().resultType());
         Symbol var10000 = this.setterIn(this.owner(), this.needsExpandedSetterName());
         NoSymbol var9 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
         if (var10000 == null) {
            if (var9 == null) {
               return result;
            }
         } else if (var10000.equals(var9)) {
            return result;
         }

         result.setFlag(4096L);
         return result;
      }

      public boolean lockOK() {
         if ((this._rawflags & 549755813888L) != 0L) {
            int limit = BoxesRunTime.unboxToInt(this.scala$reflect$internal$Symbols$Symbol$$$outer().settings().Yrecursion().value());
            if (limit != 0) {
               Option var2 = this.scala$reflect$internal$Symbols$Symbol$$$outer().recursionTable().get(this);
               boolean var10000;
               if (var2 instanceof Some) {
                  var10000 = BoxesRunTime.unboxToInt(((Some)var2).value()) <= limit;
               } else {
                  if (!scala.None..MODULE$.equals(var2)) {
                     throw new MatchError(var2);
                  }

                  var10000 = true;
               }

               if (var10000) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      public boolean lock(final Function0 handler) {
         if (this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$lockTracing()) {
            this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$_lockingTrace().addOne(this);
         }

         if ((this._rawflags & 549755813888L) != 0L) {
            if (BoxesRunTime.unboxToInt(this.scala$reflect$internal$Symbols$Symbol$$$outer().settings().Yrecursion().value()) != 0) {
               Option var2 = this.scala$reflect$internal$Symbols$Symbol$$$outer().recursionTable().get(this);
               if (var2 instanceof Some) {
                  int n = BoxesRunTime.unboxToInt(((Some)var2).value());
                  if (n > BoxesRunTime.unboxToInt(this.scala$reflect$internal$Symbols$Symbol$$$outer().settings().Yrecursion().value())) {
                     handler.apply$mcV$sp();
                     return false;
                  } else {
                     SymbolTable var8 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
                     Map var9 = this.scala$reflect$internal$Symbols$Symbol$$$outer().recursionTable();
                     Predef.ArrowAssoc var11 = scala.Predef.ArrowAssoc..MODULE$;
                     Object $minus$greater$extension_y = n + 1;
                     Tuple2 var12 = new Tuple2(this, $minus$greater$extension_y);
                     $minus$greater$extension_y = null;
                     var8.recursionTable_$eq((Map)var9.$plus(var12));
                     return true;
                  }
               } else if (scala.None..MODULE$.equals(var2)) {
                  SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
                  Map var10001 = this.scala$reflect$internal$Symbols$Symbol$$$outer().recursionTable();
                  Predef.ArrowAssoc var10002 = scala.Predef.ArrowAssoc..MODULE$;
                  Object $minus$greater$extension_y = 1;
                  Tuple2 var10 = new Tuple2(this, $minus$greater$extension_y);
                  $minus$greater$extension_y = null;
                  var10000.recursionTable_$eq((Map)var10001.$plus(var10));
                  return true;
               } else {
                  throw new MatchError(var2);
               }
            } else {
               handler.apply$mcV$sp();
               return false;
            }
         } else {
            this._rawflags |= 549755813888L;
            return true;
         }
      }

      public void unlock() {
         if ((this._rawflags & 549755813888L) != 0L) {
            this._rawflags &= -549755813889L;
            if (this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$lockTracing() && !this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$_lockingTrace().isEmpty()) {
               ArrayBuffer var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$_lockingTrace();
               ArrayBuffer var10001 = this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$_lockingTrace();
               if (var10001 == null) {
                  throw null;
               }

               var10000.remove(SeqOps.size$(var10001) - 1, 1);
            }

            if (BoxesRunTime.unboxToInt(this.scala$reflect$internal$Symbols$Symbol$$$outer().settings().Yrecursion().value()) != 0) {
               SymbolTable var1 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
               Map var2 = this.scala$reflect$internal$Symbols$Symbol$$$outer().recursionTable();
               if (var2 == null) {
                  throw null;
               } else {
                  var1.recursionTable_$eq((Map)var2.removed(this));
               }
            }
         }
      }

      public boolean isAliasType() {
         return false;
      }

      public boolean isAbstractType() {
         return false;
      }

      public boolean isSkolem() {
         return false;
      }

      public boolean isNonClassType() {
         return false;
      }

      public boolean isBottomClass() {
         return false;
      }

      public boolean isAbstractClass() {
         return false;
      }

      public boolean isAnonOrRefinementClass() {
         return false;
      }

      public boolean isAnonymousClass() {
         return false;
      }

      public boolean isCaseClass() {
         return false;
      }

      public boolean isConcreteClass() {
         return false;
      }

      /** @deprecated */
      public boolean isImplClass() {
         return false;
      }

      public boolean isJavaInterface() {
         return false;
      }

      public boolean isNumericValueClass() {
         return false;
      }

      public boolean isPrimitiveValueClass() {
         return false;
      }

      public boolean isRefinementClass() {
         return false;
      }

      public boolean isTrait() {
         return false;
      }

      public boolean isContravariant() {
         return false;
      }

      public boolean isCovariant() {
         return false;
      }

      public boolean isExistentialSkolem() {
         return false;
      }

      public boolean isExistentiallyBound() {
         return false;
      }

      public boolean isGADTSkolem() {
         return false;
      }

      public boolean isTypeParameter() {
         return false;
      }

      public boolean isTypeParameterOrSkolem() {
         return false;
      }

      public boolean isTypeSkolem() {
         return false;
      }

      public boolean isInvariant() {
         return !this.isCovariant() && !this.isContravariant();
      }

      public boolean isAccessor() {
         return false;
      }

      public boolean isBridge() {
         return false;
      }

      public boolean isCapturedVariable() {
         return false;
      }

      public boolean isClassConstructor() {
         return false;
      }

      public boolean isConstructor() {
         return false;
      }

      public boolean isEarlyInitialized() {
         return false;
      }

      public boolean isGetter() {
         return false;
      }

      public boolean isDefaultGetter() {
         return false;
      }

      public boolean isLocalDummy() {
         return false;
      }

      public boolean isMixinConstructor() {
         return false;
      }

      public boolean isOverloaded() {
         return false;
      }

      public boolean isSetter() {
         return false;
      }

      public boolean isSetterParameter() {
         return false;
      }

      public boolean isValue() {
         return false;
      }

      public boolean isValueParameter() {
         return false;
      }

      public boolean isVariable() {
         return false;
      }

      public boolean isTermMacro() {
         return false;
      }

      public boolean isCaseAccessorMethod() {
         return false;
      }

      public boolean isLiftedMethod() {
         return false;
      }

      public boolean isSourceMethod() {
         return false;
      }

      public boolean isVarargsMethod() {
         return false;
      }

      public boolean isLabel() {
         return false;
      }

      public boolean isPackageClass() {
         return false;
      }

      public boolean isPackageObject() {
         return false;
      }

      public boolean isPackageObjectClass() {
         return false;
      }

      public boolean isPackageObjectOrClass() {
         return this.isPackageObject() || this.isPackageObjectClass();
      }

      public boolean isModuleOrModuleClass() {
         return this.isModule() || this.isModuleClass();
      }

      public boolean isRoot() {
         return false;
      }

      public boolean isRootPackage() {
         return false;
      }

      public boolean isRootSymbol() {
         return false;
      }

      public boolean isEmptyPackage() {
         return false;
      }

      public boolean isEmptyPackageClass() {
         return false;
      }

      public boolean isEffectiveRoot() {
         return false;
      }

      public boolean hasOnlyBottomSubclasses() {
         return this.isClass() && this.isFinal() && this.loop$1(this.typeParams());
      }

      public final boolean isOverridableMember() {
         return !this.isClass() && !this.isEffectivelyFinal() && !this.isTypeParameter() && this.safeOwner().isClass();
      }

      public final boolean isInterpreterWrapper() {
         return this.isTopLevel() && this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().isReplWrapperName(this.name());
      }

      public long getFlag(final long mask) {
         return mask & ((mask & -574208952489738744L) == mask ? this.rawflags() : this.flags());
      }

      public final boolean hasFlag(final long mask) {
         return this.getFlag(mask) != 0L;
      }

      public final boolean hasAllFlags(final long mask) {
         return this.getFlag(mask) == mask;
      }

      public Symbol setFlag(final long mask) {
         this._rawflags |= mask;
         return this;
      }

      public Symbol resetFlag(final long mask) {
         this._rawflags &= ~mask;
         return this;
      }

      public void resetFlags() {
         this.rawflags_$eq(0L);
      }

      public String resolveOverloadedFlag(final long flag) {
         return Flags$.MODULE$.flagToString(flag);
      }

      public Symbol initFlags(final long mask) {
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         boolean assert_assertion = this.rawflags() == 0L;
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(this.symbolCreationString());
            } else {
               this._rawflags = mask;
               return this;
            }
         }
      }

      public final long flags() {
         return this.flags(this.scala$reflect$internal$Symbols$Symbol$$$outer().phase().flagMask());
      }

      public final long flags(final long phaseFlagMask) {
         long fs = this._rawflags & phaseFlagMask;
         return (fs | (fs & 69805794224242688L) >>> 47) & ~((fs & 504403158265495552L) >>> 56);
      }

      public void flags_$eq(final long fs) {
         this._rawflags = fs;
      }

      public void rawflags_$eq(final long x) {
         this._rawflags = x;
      }

      public final boolean hasGetter() {
         if (this.isTerm()) {
            StdNames.nme$ var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer().nme();
            Names.Name isLocalName_name = this.name();
            if (var10000 == null) {
               throw null;
            }

            boolean var3 = isLocalName_name.endsWith(" ");
            Object var2 = null;
            if (var3) {
               return true;
            }
         }

         return false;
      }

      public boolean isModuleNotMethod() {
         return this.isModule() && !this.isMethod();
      }

      public boolean isStaticModule() {
         return this.isModuleNotMethod() && this.isStatic();
      }

      public final boolean isInitializedToDefault() {
         return !this.isType() && this.hasAllFlags(2199157473280L);
      }

      public final boolean isThisSym() {
         if (this.isTerm()) {
            Symbol var10000 = this.owner().thisSym();
            if (var10000 != null) {
               if (var10000.equals(this)) {
                  return true;
               }
            }
         }

         return false;
      }

      public final boolean isError() {
         return this.hasFlag(4294967296L);
      }

      public final boolean isErroneous() {
         return this.hasFlag(4294967296L) || this.isInitialized() && this.tpe_$times().isErroneous();
      }

      public boolean isHigherOrderTypeParameter() {
         return this.owner().isTypeParameterOrSkolem();
      }

      public boolean isClassLocalToConstructor() {
         return false;
      }

      public final boolean isDerivedValueClass() {
         if (this.isClass() && !this.hasFlag(33570816L) && !this.scala$reflect$internal$Symbols$Symbol$$$outer().phase().erasedTypes()) {
            Symbol var10000 = this.info().firstParent().typeSymbol();
            ClassSymbol var1 = this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().AnyValClass();
            if (var10000 == null) {
               if (var1 != null) {
                  return false;
               }
            } else if (!var10000.equals(var1)) {
               return false;
            }

            if (!this.isPrimitiveValueClass()) {
               return true;
            }
         }

         return false;
      }

      public final boolean isMethodWithExtension() {
         return this.isMethod() && this.owner().isDerivedValueClass() && !this.isParamAccessor() && !this.isConstructor() && !this.hasFlag(268435456L) && !this.isMacro() && !this.isSpecialized();
      }

      public final boolean isAnonymousFunction() {
         return this.isSynthetic() && this.name().containsName(this.scala$reflect$internal$Symbols$Symbol$$$outer().tpnme().ANON_FUN_NAME());
      }

      public final boolean isDelambdafyFunction() {
         return this.isSynthetic() && this.name().containsName(this.scala$reflect$internal$Symbols$Symbol$$$outer().tpnme().DELAMBDAFY_LAMBDA_CLASS_NAME());
      }

      public final boolean isDelambdafyTarget() {
         return this.isArtifact() && this.isMethod() && this.hasAttachment(scala.reflect.ClassTag..MODULE$.apply(StdAttachments.DelambdafyTarget$.class));
      }

      public final boolean isDefinedInPackage() {
         return this.effectiveOwner().isPackageClass();
      }

      public final boolean needsFlatClasses() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().phase().flatClasses() && this.rawowner() != this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol() && !this.rawowner().isPackageClass() && !this.isMethod();
      }

      public final boolean isPatternTypeVariable() {
         return this.isAbstractType() && !this.isExistential() && !this.isTypeParameterOrSkolem() && this.isLocalToBlock();
      }

      public void expandName(final Symbol base) {
      }

      public boolean isInDefaultNamespace() {
         Set var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().UnqualifiedOwners();
         Symbol apply_elem = this.effectiveOwner();
         if (var10000 == null) {
            throw null;
         } else {
            return var10000.contains(apply_elem);
         }
      }

      public Symbol effectiveOwner() {
         return this.owner().skipPackageObject();
      }

      public Symbol skipPackageObject() {
         return this;
      }

      public final Symbol packageObject() {
         while(!this.isPackageClass()) {
            if (!this.hasPackageFlag()) {
               return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
            }

            this = this.moduleClass();
         }

         return this.tpe_$times().packageObject();
      }

      public final Symbol skipConstructor() {
         return this.isConstructor() ? this.owner() : this;
      }

      public final boolean isOmittablePrefix() {
         Symbol skipped = this.skipPackageObject();
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().UnqualifiedOwners().exists((sym) -> BoxesRunTime.boxToBoolean($anonfun$isOmittablePrefix$1(skipped, sym))) || this.isEmptyPrefix();
      }

      public boolean isEmptyPrefix() {
         return this.isEffectiveRoot() || this.isAnonOrRefinementClass() || this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().isReplWrapperName(this.name());
      }

      public boolean isFBounded() {
         return this.info() instanceof Types.TypeBounds ? this.info().baseTypeSeq().exists((x$3) -> BoxesRunTime.boxToBoolean($anonfun$isFBounded$1(this, x$3))) : false;
      }

      public final boolean isMonomorphicType() {
         if (this.isType()) {
            Types.Type info = this.originalInfo();
            if (info == null || info.isComplete() && !info.isHigherKinded()) {
               return true;
            }
         }

         return false;
      }

      public final boolean isStrictFP() {
         while(true) {
            if (!this.equals(this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) && !this.isDeferred()) {
               if (!this.hasAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().ScalaStrictFPAttr())) {
                  this = this.originalOwner();
                  continue;
               }

               return true;
            }

            return false;
         }
      }

      public boolean isSerializable() {
         List var10000 = this.info().baseClasses();
         if (var10000 == null) {
            throw null;
         } else {
            for(List exists_these = var10000; !exists_these.isEmpty(); exists_these = (List)exists_these.tail()) {
               Symbol var2 = (Symbol)exists_these.head();
               if ($anonfun$isSerializable$1(this, var2)) {
                  return true;
               }
            }

            return false;
         }
      }

      public boolean isDeprecated() {
         return this.hasAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().DeprecatedAttr()) || this.hasAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().JavaDeprecatedAttr());
      }

      public Option deprecationMessage() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().DeprecatedAttr());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(0));
         }
      }

      public Option deprecationVersion() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().DeprecatedAttr());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            Object var5 = flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(1);
            Object var4 = null;
            Object var1 = var5;
            if (var1 instanceof Some) {
               return (Some)var1;
            } else {
               Option var6 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().JavaDeprecatedAttr());
               if (var6 == null) {
                  throw null;
               } else {
                  Option flatMap_this = var6;
                  return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(0));
               }
            }
         }
      }

      public Option deprecatedParamName() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().DeprecatedNameAttr());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            if (flatMap_this.isEmpty()) {
               return scala.None..MODULE$;
            } else {
               AnnotationInfos.AnnotationInfo var2 = (AnnotationInfos.AnnotationInfo)flatMap_this.get();
               return $anonfun$deprecatedParamName$1(this, var2);
            }
         }
      }

      public Option deprecatedParamVersion() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().DeprecatedNameAttr());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(1));
         }
      }

      public boolean hasDeprecatedInheritanceAnnotation() {
         return this.hasAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().DeprecatedInheritanceAttr());
      }

      public Option deprecatedInheritanceMessage() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().DeprecatedInheritanceAttr());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(0));
         }
      }

      public Option deprecatedInheritanceVersion() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().DeprecatedInheritanceAttr());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(1));
         }
      }

      public boolean hasDeprecatedOverridingAnnotation() {
         return this.hasAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().DeprecatedOverridingAttr());
      }

      public Option deprecatedOverridingMessage() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().DeprecatedOverridingAttr());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(0));
         }
      }

      public Option deprecatedOverridingVersion() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().DeprecatedOverridingAttr());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(1));
         }
      }

      public boolean hasMigrationAnnotation() {
         return this.hasAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().MigrationAnnotationClass());
      }

      public Option migrationMessage() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().MigrationAnnotationClass());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(0));
         }
      }

      public Option migrationVersion() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().MigrationAnnotationClass());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(1));
         }
      }

      public Option elisionLevel() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().ElidableMethodClass());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).intArg(0));
         }
      }

      public Option implicitNotFoundMsg() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().ImplicitNotFoundClass());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(0));
         }
      }

      public Option implicitAmbiguousMsg() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().ImplicitAmbiguousClass());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(0));
         }
      }

      public boolean isCompileTimeOnly() {
         return this.hasAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().CompileTimeOnlyAttr());
      }

      public Option compileTimeOnlyMessage() {
         Option var10000 = this.getAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().CompileTimeOnlyAttr());
         if (var10000 == null) {
            throw null;
         } else {
            Option flatMap_this = var10000;
            return (Option)(flatMap_this.isEmpty() ? scala.None..MODULE$ : ((AnnotationInfos.AnnotationInfo)flatMap_this.get()).stringArg(0));
         }
      }

      public boolean isExperimental() {
         return this.hasAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().ExperimentalAnnotationClass());
      }

      public final boolean isOuterAccessor() {
         if (this.hasFlag(70368748371968L)) {
            Names.Name var10000 = this.unexpandedName();
            Names.TermName var1 = this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().OUTER();
            if (var10000 == null) {
               if (var1 == null) {
                  return true;
               }
            } else if (var10000.equals(var1)) {
               return true;
            }
         }

         return false;
      }

      public final boolean isOuterField() {
         if (this.isArtifact()) {
            Names.Name var10000 = this.unexpandedName();
            Names.TermName var1 = this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().OUTER_LOCAL();
            if (var10000 == null) {
               if (var1 == null) {
                  return true;
               }
            } else if (var10000.equals(var1)) {
               return true;
            }
         }

         return false;
      }

      public final boolean isOuterParam() {
         if (this.isParameter() && this.owner().isConstructor()) {
            Names.Name var10000 = this.name();
            Names.TermName var1 = this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().OUTER_ARG();
            if (var10000 == null) {
               if (var1 == null) {
                  return true;
               }
            } else if (var10000.equals(var1)) {
               return true;
            }

            var10000 = this.name();
            Names.TermName var2 = this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().OUTER();
            if (var10000 == null) {
               if (var2 == null) {
                  return true;
               }
            } else if (var10000.equals(var2)) {
               return true;
            }
         }

         return false;
      }

      public final boolean isStable() {
         return this.isTerm() && !this.isMutable() && !this.hasFlag(65536L) && (!this.isMethod() || this.hasStableFlag());
      }

      public final boolean hasVolatileType() {
         return this.tpe_$times().isVolatile() && !this.hasAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().uncheckedStableClass());
      }

      public final boolean isPrimaryConstructor() {
         if (this.isConstructor()) {
            Symbol var10000 = this.owner().primaryConstructor();
            if (var10000 != null) {
               if (var10000.equals(this)) {
                  return true;
               }
            }
         }

         return false;
      }

      public final boolean isAuxiliaryConstructor() {
         return this.isConstructor() && !this.isPrimaryConstructor();
      }

      public final boolean isCaseApplyOrUnapply() {
         return this.isMethod() && this.isCase() && this.isSynthetic();
      }

      public final boolean isCaseCopy() {
         if (this.isMethod() && this.owner().isCase() && this.isSynthetic()) {
            Names.Name var10000 = this.name();
            Names.TermName var1 = this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().copy();
            if (var10000 == null) {
               if (var1 == null) {
                  return true;
               }
            } else if (var10000.equals(var1)) {
               return true;
            }
         }

         return false;
      }

      public final boolean isModuleVar() {
         return this.hasFlag(1073741824L);
      }

      public final boolean isScala3Defined() {
         return this.hasFlag(1152921504606846976L);
      }

      public boolean isStatic() {
         return this.hasFlag(8388608L) || this.owner().isStaticOwner();
      }

      public final boolean isStaticConstructor() {
         return this.hasFlag(8388608L) && this.isClassConstructor();
      }

      public final boolean isStaticMember() {
         return this.hasFlag(8388608L);
      }

      public final boolean isStaticOwner() {
         return this.isPackageClass() || this.isModuleClass() && this.isStatic();
      }

      public final boolean isEffectivelyFinal() {
         return this.hasFlag(16416L) && !this.equals(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().SingletonClass()) || this.isModuleOrModuleClass() || this.isTerm() && (this.isPrivate() || this.isLocalToBlock() || this.hasAllFlags(288230376151711808L) && !this.hasFlag(16L)) || this.isClass() && !this.isRefinementClass() && this.originalOwner().isTerm() && this.children().isEmpty();
      }

      public final boolean isEffectivelyFinalOrNotOverridden() {
         return this.isEffectivelyFinal() || this.isTerm() && !this.isDeferred() && this.isNotOverriddenAt$1(this.owner(), this.owner().originalOwner().isTerm());
      }

      public final boolean isTopLevel() {
         return this.owner().isPackageClass();
      }

      /** @deprecated */
      public final boolean isLocal() {
         return this.owner().isTerm();
      }

      public final boolean isLocalToBlock() {
         return this.owner().isTerm();
      }

      public final boolean isConstant() {
         return this.isStable() && this.scala$reflect$internal$Symbols$Symbol$$$outer().isConstantType(this.tpe_$times().resultType());
      }

      public boolean isNestedClass() {
         return false;
      }

      public boolean isLocalClass() {
         return false;
      }

      public final boolean isStructuralRefinement() {
         return (this.isClass() || this.isType() || this.isModule()) && this.info().dealiasWiden().isStructuralRefinement();
      }

      public boolean isOnlyRefinementMember() {
         return this.isTerm() && this.owner().isRefinementClass() && this.isPossibleInRefinement() && !this.isConstant() && this.isDeclaredByOwner();
      }

      private boolean isDeclaredByOwner() {
         List var10000 = this.owner().info().decl(this.name()).alternatives();
         if (var10000 == null) {
            throw null;
         } else {
            for(List exists_these = var10000; !exists_these.isEmpty(); exists_these = (List)exists_these.tail()) {
               Symbol var2 = (Symbol)exists_these.head();
               if ($anonfun$isDeclaredByOwner$1(this, var2)) {
                  return true;
               }
            }

            return false;
         }
      }

      public final boolean isStructuralRefinementMember() {
         return this.owner().isStructuralRefinement() && this.isPossibleInRefinement() && this.isPublic();
      }

      public final boolean isPossibleInRefinement() {
         if (!this.isConstructor()) {
            List var10000 = this.allOverriddenSymbols();
            if (var10000 == null) {
               throw null;
            }

            List forall_these = var10000;

            while(true) {
               if (forall_these.isEmpty()) {
                  var3 = true;
                  break;
               }

               if (!$anonfun$isPossibleInRefinement$1((Symbol)forall_these.head())) {
                  var3 = false;
                  break;
               }

               forall_these = (List)forall_these.tail();
            }

            Object var2 = null;
            if (var3) {
               return true;
            }
         }

         return false;
      }

      public final boolean isIncompleteIn(final Symbol base) {
         while(true) {
            Symbol supersym;
            label20: {
               if (!this.isDeferred()) {
                  if (!this.hasFlag(262144L)) {
                     return false;
                  }

                  supersym = this.superSymbolIn(base);
                  NoSymbol var3 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
                  if (supersym == null) {
                     if (var3 != null) {
                        break label20;
                     }
                  } else if (!supersym.equals(var3)) {
                     break label20;
                  }
               }

               return true;
            }

            base = base;
            this = supersym;
         }
      }

      public boolean exists() {
         if (this.isTopLevel()) {
            this.rawInfo().load(this);
            Types.Type var10000 = this.rawInfo();
            Types.NoType$ var1 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoType();
            if (var10000 == null) {
               if (var1 != null) {
                  return true;
               }
            } else if (!var10000.equals(var1)) {
               return true;
            }

            if (!this.warnIfSourceLoader$1()) {
               return false;
            }
         }

         return true;
      }

      public final boolean isInitialized() {
         return this.validTo() != 0;
      }

      public boolean isThreadsafe(final SymbolOps purpose) {
         return false;
      }

      public Symbol markFlagsCompleted(final long mask) {
         return this;
      }

      public Symbol markAllCompleted() {
         return this;
      }

      public final boolean isLocatable() {
         if (this.equals(this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol())) {
            return false;
         } else if (!this.isRoot() && !this.isRootPackage()) {
            if (!this.owner().isLocatable()) {
               return false;
            } else if (this.owner().isTerm()) {
               return false;
            } else if (this.isLocalDummy()) {
               return false;
            } else if (this.isAliasType()) {
               return true;
            } else if (this.isType() && this.isNonClassType()) {
               return false;
            } else {
               return !this.isRefinementClass();
            }
         } else {
            return true;
         }
      }

      public int variance() {
         if (this.isCovariant()) {
            return Variance$.MODULE$.Covariant();
         } else {
            return this.isContravariant() ? Variance$.MODULE$.Contravariant() : Variance$.MODULE$.Invariant();
         }
      }

      public int paramPos() {
         return this.searchIn$1(this.owner().info(), 0);
      }

      public Symbol owner() {
         return this.rawowner();
      }

      public final Symbol safeOwner() {
         return (Symbol)(this == this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol() ? this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol() : this.owner());
      }

      public final Symbol assertOwner() {
         if (this == this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) {
            throw this.scala$reflect$internal$Symbols$Symbol$$$outer().abort("no-symbol does not have an owner");
         } else {
            return this.owner();
         }
      }

      public Symbol originalOwner() {
         return (Symbol)this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$originalOwnerMap().getOrElse(this, () -> this.rawowner());
      }

      public void owner_$eq(final Symbol owner) {
         this.scala$reflect$internal$Symbols$Symbol$$$outer().saveOriginalOwner(this);
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         boolean assert_assertion = this.scala$reflect$internal$Symbols$Symbol$$$outer().isCompilerUniverse();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError("owner_= is not thread-safe; cannot be run in reflexive code");
            } else {
               assert_this = null;
               if (this.scala$reflect$internal$Symbols$Symbol$$$outer().traceSymbolActivity()) {
                  SymbolTable.traceSymbols$ var5 = this.scala$reflect$internal$Symbols$Symbol$$$outer().traceSymbols();
                  if (var5 == null) {
                     throw null;
                  }

                  TraceSymbolActivity.recordNewSymbolOwner$(var5, this, owner);
               }

               this._rawowner = owner;
            }
         }
      }

      public List ownerChain() {
         List var10000 = this.owner().ownerChain();
         if (var10000 == null) {
            throw null;
         } else {
            List $colon$colon_this = var10000;
            return new scala.collection.immutable..colon.colon(this, $colon$colon_this);
         }
      }

      public List enclClassChain() {
         return this.owner().enclClassChain();
      }

      public Iterator ownersIterator() {
         return new AbstractIterator() {
            private Symbol current;
            // $FF: synthetic field
            private final Symbol $outer;

            public boolean hasNext() {
               return this.current != this.$outer.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
            }

            public Symbol next() {
               Symbol r = this.current;
               this.current = this.current.owner();
               return r;
            }

            public {
               if (Symbol.this == null) {
                  throw null;
               } else {
                  this.$outer = Symbol.this;
                  this.current = Symbol.this;
               }
            }
         };
      }

      public boolean hasTransOwner(final Symbol sym) {
         Symbol o;
         for(o = this; o != sym && o != this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol(); o = o.owner()) {
         }

         return o == sym;
      }

      /** @deprecated */
      public Names.Name originalName() {
         return this.unexpandedName();
      }

      public Names.Name unexpandedName() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().unexpandedName(this.name());
      }

      public String encodedName() {
         return this.name().toString();
      }

      public String decodedName() {
         return this.name().decode();
      }

      private Names.Name addModuleSuffix(final Names.Name n) {
         return this.needsModuleSuffix() ? n.append("$") : n;
      }

      public String moduleSuffix() {
         return this.needsModuleSuffix() ? "$" : "";
      }

      public boolean needsModuleSuffix() {
         return this.hasModuleFlag() && !this.isMethod() && !this.isJavaDefined();
      }

      public Names.Name javaSimpleName() {
         return this.addModuleSuffix(this.name().dropLocal());
      }

      public Names.Name javaBinaryName() {
         return this.name().newName(this.javaBinaryNameString());
      }

      public String javaBinaryNameString() {
         if (this.javaBinaryNameStringCache == null) {
            this.javaBinaryNameStringCache = this.fullName('/', this.moduleSuffix());
         }

         return this.javaBinaryNameStringCache;
      }

      public String javaClassName() {
         return this.fullName('.', this.moduleSuffix());
      }

      public final String fullName(final char separator) {
         return this.fullName(separator, "");
      }

      private String fullName(final char separator, final CharSequence suffix) {
         ObjectRef b = new ObjectRef((Object)null);
         int loop$2_size = suffix.length();
         Names.Name loop$2_symName = this.name();
         if (loop$2_symName == null) {
            throw null;
         } else {
            int loop$2_nSize = loop$2_symName.len() - (loop$2_symName.endsWith(" ") ? 1 : 0);
            if (!this.isRoot() && !this.isRootPackage() && !this.equals(this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) && !this.owner().isEffectiveRoot()) {
               this.loop$2(loop$2_size + loop$2_nSize + 1, this.effectiveOwner().enclClass(), b, separator);
               ((StringBuffer)b.elem).append(separator);
               loop$2_symName.appendTo((StringBuffer)((StringBuffer)b.elem), 0, loop$2_nSize);
            } else {
               int loop$2_capacity = loop$2_size + loop$2_nSize;
               b.elem = new StringBuffer(loop$2_capacity);
               loop$2_symName.appendTo((StringBuffer)((StringBuffer)b.elem), 0, loop$2_nSize);
            }

            Object var8 = null;
            ((StringBuffer)b.elem).append(suffix);
            return ((StringBuffer)b.elem).toString();
         }
      }

      public Names.Name fullNameAsName(final char separator) {
         return this.name().newName(this.fullName(separator, ""));
      }

      public final String fullName() {
         return this.fullName('.');
      }

      public AbstractTypeSymbol createAbstractTypeSymbol(final Names.TypeName name, final Position pos, final long newFlags) {
         return (AbstractTypeSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new AbstractTypeSymbol(this, pos, name)).initFlags(newFlags);
      }

      public AliasTypeSymbol createAliasTypeSymbol(final Names.TypeName name, final Position pos, final long newFlags) {
         return (AliasTypeSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new AliasTypeSymbol(this, pos, name)).initFlags(newFlags);
      }

      public TypeSkolem createTypeSkolemSymbol(final Names.TypeName name, final Object origin, final Position pos, final long newFlags) {
         return (TypeSkolem)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new TypeSkolem(this, pos, name, origin)).initFlags(newFlags);
      }

      public ClassSymbol createClassSymbol(final Names.TypeName name, final Position pos, final long newFlags) {
         return (ClassSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new ClassSymbol(this, pos, name)).initFlags(newFlags);
      }

      public ModuleClassSymbol createModuleClassSymbol(final Names.TypeName name, final Position pos, final long newFlags) {
         return (ModuleClassSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new ModuleClassSymbol(this, pos, name)).initFlags(newFlags);
      }

      public PackageClassSymbol createPackageClassSymbol(final Names.TypeName name, final Position pos, final long newFlags) {
         return (PackageClassSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new PackageClassSymbol(this, pos, name)).initFlags(newFlags);
      }

      public RefinementClassSymbol createRefinementClassSymbol(final Position pos, final long newFlags) {
         return (RefinementClassSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new RefinementClassSymbol(this, pos)).initFlags(newFlags);
      }

      public PackageObjectClassSymbol createPackageObjectClassSymbol(final Position pos, final long newFlags) {
         return (PackageObjectClassSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new PackageObjectClassSymbol(this, pos)).initFlags(newFlags);
      }

      public MethodSymbol createMethodSymbol(final Names.TermName name, final Position pos, final long newFlags) {
         return (MethodSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new MethodSymbol(this, pos, name)).initFlags(newFlags);
      }

      public ModuleSymbol createModuleSymbol(final Names.TermName name, final Position pos, final long newFlags) {
         return (ModuleSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new ModuleSymbol(this, pos, name)).initFlags(newFlags);
      }

      public ModuleSymbol createPackageSymbol(final Names.TermName name, final Position pos, final long newFlags) {
         return (ModuleSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new ModuleSymbol(this, pos, name)).initFlags(newFlags);
      }

      public TermSymbol createValueParameterSymbol(final Names.TermName name, final Position pos, final long newFlags) {
         return (TermSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new TermSymbol(this, pos, name)).initFlags(newFlags);
      }

      public TermSymbol createValueMemberSymbol(final Names.TermName name, final Position pos, final long newFlags) {
         return (TermSymbol)(this.scala$reflect$internal$Symbols$Symbol$$$outer().new TermSymbol(this, pos, name)).initFlags(newFlags);
      }

      public final MethodSymbol newExtensionMethodSymbol(final Symbol companion, final Position pos) {
         MethodSymbol var10000 = companion.moduleClass();
         Names.TermName var10001 = this.name().extensionName();
         long newMethod_newFlags = this.flags() & -3L & -2L & -5L & -524289L | 32L;
         Names.TermName newMethod_name = var10001;
         if (var10000 == null) {
            throw null;
         } else {
            var10000 = ((Symbol)var10000).createMethodSymbol(newMethod_name, pos, 64L | newMethod_newFlags);
            newMethod_name = null;
            MethodSymbol extensionMeth = (MethodSymbol)var10000.setAnnotations(this.annotations());
            this.scala$reflect$internal$Symbols$Symbol$$$outer().defineOriginalOwner(extensionMeth, this.owner());
            if (this.isStrictFP() && !extensionMeth.hasAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().ScalaStrictFPAttr())) {
               Symbol addAnnotation_sym = this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().ScalaStrictFPAttr();
               ((Symbol)extensionMeth).addAnnotation((Symbol)addAnnotation_sym, (List).MODULE$);
               addAnnotation_sym = null;
            }

            this.removeAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().TailrecClass());
            return (MethodSymbol)companion.info().decls().enter(extensionMeth);
         }
      }

      public final TermSymbol newTermSymbol(final Names.TermName name, final Position pos, final long newFlags) {
         if ((newFlags & 16384L) != 0L) {
            return this.createPackageSymbol(name, pos, newFlags | 1065248L);
         } else if ((newFlags & 256L) != 0L) {
            return this.createModuleSymbol(name, pos, newFlags);
         } else if ((newFlags & 64L) != 0L) {
            return this.createMethodSymbol(name, pos, newFlags);
         } else {
            return (newFlags & 8192L) != 0L ? this.createValueParameterSymbol(name, pos, newFlags) : this.createValueMemberSymbol(name, pos, newFlags);
         }
      }

      public final Position newTermSymbol$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newTermSymbol$default$3() {
         return 0L;
      }

      public final ClassSymbol newClassSymbol(final Names.TypeName name, final Position pos, final long newFlags) {
         Names.TypeName var5 = this.scala$reflect$internal$Symbols$Symbol$$$outer().tpnme().REFINE_CLASS_NAME();
         if (name == null) {
            if (var5 == null) {
               return this.createRefinementClassSymbol(pos, newFlags);
            }
         } else if (name.equals(var5)) {
            return this.createRefinementClassSymbol(pos, newFlags);
         }

         if ((newFlags & 16384L) != 0L) {
            return this.createPackageClassSymbol(name, pos, newFlags | 1065248L);
         } else {
            Names.Name var6 = this.scala$reflect$internal$Symbols$Symbol$$$outer().tpnme().PACKAGE();
            if (name == null) {
               if (var6 == null) {
                  return this.createPackageObjectClassSymbol(pos, newFlags);
               }
            } else if (name.equals(var6)) {
               return this.createPackageObjectClassSymbol(pos, newFlags);
            }

            if ((newFlags & 256L) != 0L) {
               return this.createModuleClassSymbol(name, pos, newFlags);
            } else {
               return this.createClassSymbol(name, pos, newFlags);
            }
         }
      }

      public final Position newClassSymbol$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newClassSymbol$default$3() {
         return 0L;
      }

      public final TypeSymbol newNonClassSymbol(final Names.TypeName name, final Position pos, final long newFlags) {
         return (TypeSymbol)((newFlags & 16L) != 0L ? this.createAbstractTypeSymbol(name, pos, newFlags) : this.createAliasTypeSymbol(name, pos, newFlags));
      }

      public final Position newNonClassSymbol$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public final long newNonClassSymbol$default$3() {
         return 0L;
      }

      public TypeSymbol newTypeSymbol(final Names.TypeName name, final Position pos, final long newFlags) {
         return this.newNonClassSymbol(name, pos, newFlags);
      }

      public Position newTypeSymbol$default$2() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPosition();
      }

      public long newTypeSymbol$default$3() {
         return 0L;
      }

      public Symbol accessBoundary(final Symbol base) {
         if (!this.hasFlag(4L) && !this.isLocalToBlock()) {
            if (this.hasAccessBoundary() && !this.scala$reflect$internal$Symbols$Symbol$$$outer().phase().erasedTypes()) {
               return this.privateWithin();
            } else {
               return this.hasFlag(1L) ? base : this.enclosingRootClass();
            }
         } else {
            return this.owner();
         }
      }

      public boolean isLessAccessibleThan(final Symbol other) {
         Symbol tb = this.accessBoundary(this.owner());
         Symbol ob1 = other.accessBoundary(this.owner());
         Symbol ob2 = ob1.linkedClassOfClass();
         Symbol o = tb;

         while(true) {
            NoSymbol var6 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
            if (o == null) {
               if (var6 == null) {
                  break;
               }
            } else if (o.equals(var6)) {
               break;
            }

            if (o != null) {
               if (o.equals(ob1)) {
                  break;
               }
            }

            if (o == null) {
               if (ob2 == null) {
                  break;
               }
            } else if (o.equals(ob2)) {
               break;
            }

            o = o.owner();
         }

         NoSymbol var7 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
         if (o == null) {
            if (var7 == null) {
               return false;
            }
         } else if (o.equals(var7)) {
            return false;
         }

         if (o == null) {
            if (tb != null) {
               return true;
            }
         } else if (!o.equals(tb)) {
            return true;
         }

         return false;
      }

      public Symbol privateWithin() {
         return this._privateWithin;
      }

      public void privateWithin_$eq(final Symbol sym) {
         this._privateWithin = sym;
      }

      public Symbol setPrivateWithin(final Symbol sym) {
         this.privateWithin_$eq(sym);
         return this;
      }

      public final boolean hasAccessBoundary() {
         Symbol pw = this.privateWithin();
         return pw != null && pw != this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      public TypeHistory scala$reflect$internal$Symbols$$infos() {
         return this.scala$reflect$internal$Symbols$$infos;
      }

      public void scala$reflect$internal$Symbols$$infos_$eq(final TypeHistory x$1) {
         this.scala$reflect$internal$Symbols$$infos = x$1;
      }

      public Types.Type originalInfo() {
         if (this.scala$reflect$internal$Symbols$$infos() == null) {
            return null;
         } else {
            for(TypeHistory is = this.scala$reflect$internal$Symbols$$infos(); is != null; is = is.scala$reflect$internal$Symbols$TypeHistory$$_prev()) {
               if (is.scala$reflect$internal$Symbols$TypeHistory$$_prev() == null) {
                  return is.scala$reflect$internal$Symbols$TypeHistory$$_info();
               }
            }

            throw null;
         }
      }

      public final Types.Type tpe() {
         return this.tpe_$times();
      }

      public Types.Type tpeHK() {
         return this.info();
      }

      public Types.Type typeConstructor() {
         if (this == this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) {
            throw this.scala$reflect$internal$Symbols$Symbol$$$outer().abort("no-symbol does not have a type constructor (this may indicate scalac cannot find fundamental classes)");
         } else {
            throw this.scala$reflect$internal$Symbols$Symbol$$$outer().abort((new StringBuilder(33)).append("typeConstructor inapplicable for ").append(this).toString());
         }
      }

      public Types.Type tpe_$times() {
         return this.info();
      }

      public Types.Type info() {
         int cnt = 0;

         while(this._validTo == 0) {
            this.completeInfo();
            ++cnt;
            if (cnt == 3) {
               throw this.abortNoProgress$1();
            }
         }

         return this.rawInfo();
      }

      private void completeInfo() {
         try {
            SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
            boolean assert_assertion = this.scala$reflect$internal$Symbols$$infos() != null;
            if (var10000 == null) {
               throw null;
            } else {
               SymbolTable assert_this = var10000;
               if (!assert_assertion) {
                  throw assert_this.throwAssertionError(this.name());
               } else {
                  assert_this = null;
                  var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
                  TypeHistory var10001 = this.scala$reflect$internal$Symbols$$infos();
                  if (var10001 == null) {
                     throw null;
                  } else {
                     boolean assert_assertionx = var10001.scala$reflect$internal$Symbols$TypeHistory$$_prev() == null;
                     if (var10000 == null) {
                        throw null;
                     } else {
                        SymbolTable assert_this = var10000;
                        if (!assert_assertionx) {
                           throw assert_this.throwAssertionError(this.name());
                        } else {
                           assert_this = null;
                           TypeHistory var24 = this.scala$reflect$internal$Symbols$$infos();
                           if (var24 == null) {
                              throw null;
                           } else {
                              TypeHistory info_this = var24;
                              Types.Type var25 = info_this.scala$reflect$internal$Symbols$TypeHistory$$_info();
                              Object var22 = null;
                              Types.Type tp = var25;
                              if ((this._rawflags & 549755813888L) != 0L) {
                                 this.lock(() -> {
                                    this.setInfo(this.scala$reflect$internal$Symbols$Symbol$$$outer().ErrorType());
                                    Symbol[] var10000;
                                    if (this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$lockTracing()) {
                                       Symbol[] t = (Symbol[])this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$_lockingTrace().toArray(this.scala$reflect$internal$Symbols$Symbol$$$outer().SymbolTag());
                                       this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$_lockingTrace().clear();
                                       var10000 = t;
                                    } else {
                                       var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer().CyclicReference().emptyTrace();
                                    }

                                    Symbol[] trace = var10000;
                                    throw this.scala$reflect$internal$Symbols$Symbol$$$outer().new CyclicReference(this, tp, trace);
                                 });
                              } else {
                                 if (this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$lockTracing()) {
                                    this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$_lockingTrace().addOne(this);
                                 }

                                 this._rawflags |= 549755813888L;
                              }

                              Phase current = this.scala$reflect$internal$Symbols$Symbol$$$outer().phase();
                              if (!this.scala$reflect$internal$Symbols$Symbol$$$outer().isCompilerUniverse()) {
                                 try {
                                    tp.complete(this);
                                 } finally {
                                    this.unlock();
                                 }

                              } else {
                                 try {
                                    this.scala$reflect$internal$Symbols$Symbol$$$outer().assertCorrectThread();
                                    SymbolTable var26 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
                                    SymbolTable var27 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
                                    TypeHistory var10002 = this.scala$reflect$internal$Symbols$$infos();
                                    if (var10002 == null) {
                                       throw null;
                                    }

                                    var26.phase_$eq(var27.phaseOf(var10002.scala$reflect$internal$Symbols$TypeHistory$$_validFrom()));
                                    tp.complete(this);
                                 } finally {
                                    this.unlock();
                                    this.scala$reflect$internal$Symbols$Symbol$$$outer().phase_$eq(current);
                                 }

                              }
                           }
                        }
                     }
                  }
               }
            }
         } catch (CyclicReference var19) {
            this.scala$reflect$internal$Symbols$Symbol$$$outer().devWarning(() -> (new StringBuilder(33)).append("... hit cycle trying to complete ").append(this.fullLocationString()).toString());
            throw var19;
         }
      }

      public void info_$eq(final Types.Type info) {
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         boolean assert_assertion = info != null;
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError("Can't assign a null type");
            } else {
               assert_this = null;
               if (this.scala$reflect$internal$Symbols$$infos() != null) {
                  this.scala$reflect$internal$Symbols$$infos().reset(this.scala$reflect$internal$Symbols$Symbol$$$outer().currentPeriod(), info);
               } else {
                  this.scala$reflect$internal$Symbols$$infos_$eq(this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$TypeHistory().apply(this.scala$reflect$internal$Symbols$Symbol$$$outer().currentPeriod(), info, (TypeHistory)null));
               }

               this.unlock();
               this._validTo = info.isComplete() ? this.scala$reflect$internal$Symbols$Symbol$$$outer().currentPeriod() : 0;
            }
         }
      }

      public Symbol setInfo(final Types.Type info) {
         this.info_$eq(info);
         return this;
      }

      public Symbol modifyInfo(final Function1 f) {
         Types.Type i = this.info();
         Types.Type r = (Types.Type)f.apply(i);
         if (r != i) {
            this.setInfo(r);
         }

         return this;
      }

      public Symbol substInfo(final List syms0, final List syms1) {
         return syms0.isEmpty() ? this : this.modifyInfo((x$22) -> x$22.substSym(syms0, syms1));
      }

      public Symbol setInfoOwnerAdjusted(final Types.Type info) {
         return this.setInfo(info.atOwner(this));
      }

      public Symbol setInfoAndEnter(final Types.Type info) {
         this.setInfo(info);
         this.owner().info().decls().enter(this);
         return this;
      }

      public Symbol updateInfo(final Types.Type info) {
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         TypeHistory var10001 = this.scala$reflect$internal$Symbols$$infos();
         if (var10001 == null) {
            throw null;
         } else {
            TypeHistory validFrom_this = var10001;
            int var10 = validFrom_this.scala$reflect$internal$Symbols$TypeHistory$$_validFrom();
            Object var8 = null;
            int phaseId_period = var10;
            if (var10000 == null) {
               throw null;
            } else {
               int pid = phaseId_period & 255;
               var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
               boolean assert_assertion = pid <= this.scala$reflect$internal$Symbols$Symbol$$$outer().phase().id();
               if (var10000 == null) {
                  throw null;
               } else {
                  SymbolTable assert_this = var10000;
                  if (!assert_assertion) {
                     throw assert_this.throwAssertionError($anonfun$updateInfo$1(this, pid));
                  } else {
                     assert_this = null;
                     if (pid == this.scala$reflect$internal$Symbols$Symbol$$$outer().phase().id()) {
                        TypeHistory var11 = this.scala$reflect$internal$Symbols$$infos();
                        if (var11 == null) {
                           throw null;
                        }

                        this.scala$reflect$internal$Symbols$$infos_$eq(var11.scala$reflect$internal$Symbols$TypeHistory$$_prev());
                     }

                     this.scala$reflect$internal$Symbols$$infos_$eq(this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$TypeHistory().apply(this.scala$reflect$internal$Symbols$Symbol$$$outer().currentPeriod(), info, this.scala$reflect$internal$Symbols$$infos()));
                     this._validTo = info.isComplete() ? this.scala$reflect$internal$Symbols$Symbol$$$outer().currentPeriod() : 0;
                     return this;
                  }
               }
            }
         }
      }

      public boolean hasRawInfo() {
         return this.scala$reflect$internal$Symbols$$infos() != null;
      }

      public boolean hasCompleteInfo() {
         return this.hasRawInfo() && this.rawInfo().isComplete();
      }

      public final boolean rawInfoIsNoType() {
         if (this.hasRawInfo()) {
            TypeHistory var10000 = this.scala$reflect$internal$Symbols$$infos();
            if (var10000 == null) {
               throw null;
            }

            if (var10000.scala$reflect$internal$Symbols$TypeHistory$$_info() == this.scala$reflect$internal$Symbols$Symbol$$$outer().NoType()) {
               return true;
            }
         }

         return false;
      }

      public Types.Type rawInfo() {
         SymbolTable outer = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         TypeHistory infos = this.scala$reflect$internal$Symbols$$infos();
         boolean assert_assertion = infos != null;
         if (outer == null) {
            throw null;
         } else if (!assert_assertion) {
            throw outer.throwAssertionError("infos must not be null");
         } else {
            if (this._validTo != 0) {
               int curPeriod = outer.currentPeriod();
               int curPid = curPeriod & 255;

               while(true) {
                  if (infos == null) {
                     throw null;
                  }

                  if (curPid >= (infos.scala$reflect$internal$Symbols$TypeHistory$$_validFrom() & 255) || infos.scala$reflect$internal$Symbols$TypeHistory$$_prev() == null) {
                     if (this._validTo < curPeriod) {
                        Phase curPhase = outer.phase();

                        try {
                           if (infos.scala$reflect$internal$Symbols$TypeHistory$$_validFrom() >> 8 != outer.currentRunId()) {
                              this.adaptInfo(infos.oldest());
                              infos = this.scala$reflect$internal$Symbols$$infos();
                           }

                           if (this._validTo < curPeriod) {
                              infos = this.transformInfos(infos, curPhase, curPeriod);
                           }
                        } finally {
                           outer.phase_$eq(curPhase);
                        }
                     }
                     break;
                  }

                  infos = infos.scala$reflect$internal$Symbols$TypeHistory$$_prev();
               }
            }

            if (infos == null) {
               throw null;
            } else {
               return infos.scala$reflect$internal$Symbols$TypeHistory$$_info();
            }
         }
      }

      private TypeHistory transformInfos(final TypeHistory infos0, final Phase curPhase, final int curPeriod) {
         this.scala$reflect$internal$Symbols$Symbol$$$outer().assertCorrectThread();
         TypeHistory infos = infos0;
         InfoTransformers.InfoTransformer[] var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer().nextFrom();
         SymbolTable var10001 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         int phaseId_period = this._validTo;
         if (var10001 == null) {
            throw null;
         } else {
            InfoTransformers.InfoTransformer itr = var10000[phaseId_period & 255];
            this.scala$reflect$internal$Symbols$Symbol$$$outer().infoTransformers_$eq(itr);

            while(itr.pid() != NoPhase$.MODULE$.id() && itr.pid() < curPhase.id()) {
               this.scala$reflect$internal$Symbols$Symbol$$$outer().phase_$eq(this.scala$reflect$internal$Symbols$Symbol$$$outer().phaseWithId()[itr.pid()]);
               if (infos == null) {
                  throw null;
               }

               Types.Type info1 = itr.transform(this, infos.scala$reflect$internal$Symbols$TypeHistory$$_info());
               if (info1 != infos.scala$reflect$internal$Symbols$TypeHistory$$_info()) {
                  infos = this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$TypeHistory().apply(this.scala$reflect$internal$Symbols$Symbol$$$outer().currentPeriod() + 1, info1, infos);
                  this.scala$reflect$internal$Symbols$$infos_$eq(infos);
               }

               this._validTo = this.scala$reflect$internal$Symbols$Symbol$$$outer().currentPeriod() + 1;
               itr = itr.next();
            }

            int var10;
            if (itr.pid() == NoPhase$.MODULE$.id()) {
               var10 = curPeriod;
            } else {
               SymbolTable var11 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
               int var10002 = this.scala$reflect$internal$Symbols$Symbol$$$outer().currentRunId();
               int period_pid = itr.pid();
               int period_rid = var10002;
               if (var11 == null) {
                  throw null;
               }

               var10 = (period_rid << 8) + period_pid;
            }

            this._validTo = var10;
            return infos;
         }
      }

      private void adaptInfo(final TypeHistory oldest) {
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         boolean assert_assertion = this.scala$reflect$internal$Symbols$Symbol$$$outer().isCompilerUniverse();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError("Must be compiler universe");
            } else {
               assert_this = null;
               var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
               if (oldest == null) {
                  throw null;
               } else {
                  boolean assert_assertionx = oldest.scala$reflect$internal$Symbols$TypeHistory$$_prev() == null;
                  if (var10000 == null) {
                     throw null;
                  } else {
                     SymbolTable assert_this = var10000;
                     if (!assert_assertionx) {
                        throw assert_this.throwAssertionError("Previous history must be null");
                     } else {
                        assert_this = null;
                        var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
                        int phaseId_period = oldest.scala$reflect$internal$Symbols$TypeHistory$$_validFrom();
                        if (var10000 == null) {
                           throw null;
                        } else {
                           int pid = phaseId_period & 255;
                           SymbolTable var10001 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
                           int period_rid = this.scala$reflect$internal$Symbols$Symbol$$$outer().currentRunId();
                           if (var10001 == null) {
                              throw null;
                           } else {
                              this._validTo = (period_rid << 8) + pid;
                              this.scala$reflect$internal$Symbols$Symbol$$$outer().phase_$eq(this.scala$reflect$internal$Symbols$Symbol$$$outer().phaseWithId()[pid]);
                              Types.Type info1 = this.scala$reflect$internal$Symbols$Symbol$$$outer().adaptToNewRunMap().apply(oldest.scala$reflect$internal$Symbols$TypeHistory$$_info());
                              if (info1 == oldest.scala$reflect$internal$Symbols$TypeHistory$$_info()) {
                                 oldest.validFrom_$eq(this.validTo());
                                 this.scala$reflect$internal$Symbols$$infos_$eq(oldest);
                              } else if (this.scala$reflect$internal$Symbols$$infos() != null) {
                                 this.scala$reflect$internal$Symbols$$infos_$eq(this.scala$reflect$internal$Symbols$$infos().reset(this.validTo(), info1));
                              } else {
                                 this.scala$reflect$internal$Symbols$$infos_$eq(this.scala$reflect$internal$Symbols$Symbol$$$outer().scala$reflect$internal$Symbols$$TypeHistory().apply(this.validTo(), info1, (TypeHistory)null));
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }

      public void failIfStub() {
      }

      public final Symbol initialize() {
         if (!this.isInitialized()) {
            this.info();
         }

         return this;
      }

      public boolean maybeInitialize() {
         try {
            this.initialize();
            return true;
         } catch (CyclicReference var1) {
            this.scala$reflect$internal$Symbols$Symbol$$$outer().debuglog(() -> (new StringBuilder(32)).append("Hit cycle in maybeInitialize of ").append(this).toString());
            return false;
         }
      }

      public final boolean hasTypeAt(final int pid) {
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         boolean assert_assertion = this.scala$reflect$internal$Symbols$Symbol$$$outer().isCompilerUniverse();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError("Must be compiler universe");
            } else {
               assert_this = null;

               TypeHistory infos;
               for(infos = this.scala$reflect$internal$Symbols$$infos(); infos != null; infos = infos.scala$reflect$internal$Symbols$TypeHistory$$_prev()) {
                  var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
                  int phaseId_period = infos.scala$reflect$internal$Symbols$TypeHistory$$_validFrom();
                  if (var10000 == null) {
                     throw null;
                  }

                  if ((phaseId_period & 255) <= pid) {
                     break;
                  }
               }

               return infos != null;
            }
         }
      }

      public Symbol cookJavaRawInfo() {
         if (!this.scala$reflect$internal$Symbols$Symbol$$$outer().phase().erasedTypes() && !this.hasFlag(17592186044416L)) {
            this.setFlag(17592186044416L);
            this.info();
            if (!this.isJavaDefined() && (!this.isType() || !this.owner().isJavaDefined())) {
               if (this.isOverloaded()) {
                  List var10000 = this.alternatives();
                  if (var10000 == null) {
                     throw null;
                  }

                  for(List foreach_these = var10000; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
                     Symbol var2 = (Symbol)foreach_these.head();
                     $anonfun$cookJavaRawInfo$1(this, var2);
                  }
               }
            } else {
               this.modifyInfo(this.scala$reflect$internal$Symbols$Symbol$$$outer().rawToExistential());
            }

            return this;
         } else {
            return this;
         }
      }

      private Phase unsafeTypeParamPhase() {
         Phase ph;
         for(ph = this.scala$reflect$internal$Symbols$Symbol$$$outer().phase(); ph.prev().keepsTypeParams(); ph = ph.prev()) {
         }

         return ph;
      }

      public List unsafeTypeParams() {
         if (this.isMonomorphicType()) {
            return .MODULE$;
         } else {
            SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
            Phase enteringPhase_ph = this.unsafeTypeParamPhase();
            if (var10000 == null) {
               throw null;
            } else {
               SymbolTable enteringPhase_this = var10000;
               if (enteringPhase_ph == enteringPhase_this.phase()) {
                  return $anonfun$unsafeTypeParams$1(this);
               } else {
                  Phase enteringPhase_saved = enteringPhase_this.pushPhase(enteringPhase_ph);

                  try {
                     var7 = $anonfun$unsafeTypeParams$1(this);
                  } finally {
                     enteringPhase_this.popPhase(enteringPhase_saved);
                  }

                  return var7;
               }
            }
         }
      }

      public List typeParams() {
         return this.validTo() != 0 ? this.rawInfo().typeParams() : this.completeTypeParams$1();
      }

      public List paramss() {
         return this.info().paramss();
      }

      public Types.Type classBound() {
         Types.Type tp = this.scala$reflect$internal$Symbols$Symbol$$$outer().refinedType(this.info().parents(), this.owner());
         if (!this.scala$reflect$internal$Symbols$Symbol$$$outer().phase().erasedTypes()) {
            Types.Type thistp = tp.typeSymbol().thisType();
            ListBuffer oldsymbuf = new ListBuffer();
            ListBuffer newsymbuf = new ListBuffer();
            this.info().decls().foreach((sym) -> {
               if (sym.isPublic() && !sym.isConstructor()) {
                  oldsymbuf.addOne(sym);
                  Symbol var10001;
                  if (sym.isClass()) {
                     Symbol qual$1 = tp.typeSymbol();
                     Names.TypeName x$1 = sym.name().toTypeName();
                     Position x$2 = sym.pos();
                     if (qual$1 == null) {
                        throw null;
                     }

                     long x$3 = 0L;
                     var10001 = qual$1.createAbstractTypeSymbol(x$1, x$2, 16L | x$3).setInfo(sym.existentialBound());
                  } else {
                     var10001 = sym.cloneSymbol(tp.typeSymbol());
                  }

                  Symbol $plus$eq_elem = var10001;
                  if (newsymbuf == null) {
                     throw null;
                  } else {
                     return newsymbuf.addOne($plus$eq_elem);
                  }
               } else {
                  return BoxedUnit.UNIT;
               }
            });
            List oldsyms = oldsymbuf.toList();
            List newsyms = newsymbuf.toList();
            if (newsyms == null) {
               throw null;
            }

            for(List foreach_these = newsyms; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
               Symbol var8 = (Symbol)foreach_these.head();
               $anonfun$classBound$2(this, thistp, tp, oldsyms, newsyms, var8);
            }
         }

         return tp;
      }

      public abstract Types.Type existentialBound();

      public Symbol reset(final Types.Type completer) {
         this.resetFlags();
         this.scala$reflect$internal$Symbols$$infos_$eq((TypeHistory)null);
         this._validTo = 0;
         return this.setInfo(completer);
      }

      public void makeSerializable() {
         Types.Type var1 = this.info();
         if (var1 instanceof Types.ClassInfoType) {
            Types.ClassInfoType var2 = (Types.ClassInfoType)var1;
            List var10002 = var2.parents();
            Types.Type $colon$plus_elem = this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().SerializableTpe();
            if (var10002 == null) {
               throw null;
            } else {
               Object var7 = StrictOptimizedSeqOps.appended$(var10002, $colon$plus_elem);
               $colon$plus_elem = null;
               this.setInfo(var2.copy((List)var7, var2.copy$default$2(), var2.copy$default$3()));
               SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
               Types.Type var10001 = var2.typeSymbol().typeOfThis();
               Set var8 = scala.Predef..MODULE$.Set();
               ArraySeq apply_elems = scala.runtime.ScalaRunTime..MODULE$.wrapRefArray(new Symbol[]{var2.typeSymbol()});
               if (var8 == null) {
                  throw null;
               } else {
                  Object var9 = IterableFactory.apply$(var8, apply_elems);
                  Object var6 = null;
                  var10000.invalidateCaches(var10001, (scala.collection.Set)var9);
               }
            }
         } else {
            throw this.scala$reflect$internal$Symbols$Symbol$$$outer().abort((new StringBuilder(46)).append("Only ClassInfoTypes can be made serializable: ").append(var1).toString());
         }
      }

      public void typeOfThis_$eq(final Types.Type tp) {
         throw new UnsupportedOperationException((new StringBuilder(30)).append("typeOfThis_= inapplicable for ").append(this).toString());
      }

      public void sourceModule_$eq(final Symbol sym) {
         throw new UnsupportedOperationException((new StringBuilder(32)).append("sourceModule_= inapplicable for ").append(this).toString());
      }

      public void addChild(final Symbol sym) {
         throw new UnsupportedOperationException((new StringBuilder(26)).append("addChild inapplicable for ").append(this).toString());
      }

      public String annotationsString() {
         if (this.annotations().isEmpty()) {
            return "";
         } else {
            List var10000 = this.annotations();
            String mkString_end = ")";
            String mkString_sep = ", ";
            String mkString_start = "(";
            if (var10000 == null) {
               throw null;
            } else {
               return IterableOnceOps.mkString$(var10000, mkString_start, mkString_sep, mkString_end);
            }
         }
      }

      public List annotations() {
         return this._annotations;
      }

      public Symbol setAnnotations(final List annots) {
         this._annotations = annots;
         return this;
      }

      public Symbol withAnnotations(final List annots) {
         return this.setAnnotations(this.annotations().$colon$colon$colon(annots));
      }

      public Symbol withAnnotation(final AnnotationInfos.AnnotationInfo anno) {
         List var10001 = this.annotations();
         if (var10001 == null) {
            throw null;
         } else {
            List $colon$colon_this = var10001;
            scala.collection.immutable..colon.colon var4 = new scala.collection.immutable..colon.colon(anno, $colon$colon_this);
            Object var3 = null;
            return this.setAnnotations(var4);
         }
      }

      public Symbol withoutAnnotations() {
         return this.setAnnotations(.MODULE$);
      }

      public Symbol filterAnnotations(final Function1 p) {
         List var10001 = this.annotations();
         if (var10001 == null) {
            throw null;
         } else {
            List filter_this = var10001;
            boolean filter_filterCommon_isFlipped = false;
            List filter_filterCommon_noneIn$1_l = filter_this;

            while(true) {
               if (filter_filterCommon_noneIn$1_l.isEmpty()) {
                  var51 = .MODULE$;
                  break;
               }

               Object filter_filterCommon_noneIn$1_h = filter_filterCommon_noneIn$1_l.head();
               List filter_filterCommon_noneIn$1_t = (List)filter_filterCommon_noneIn$1_l.tail();
               if (BoxesRunTime.unboxToBoolean(p.apply(filter_filterCommon_noneIn$1_h)) != filter_filterCommon_isFlipped) {
                  List filter_filterCommon_noneIn$1_allIn$1_remaining = filter_filterCommon_noneIn$1_t;

                  while(true) {
                     if (filter_filterCommon_noneIn$1_allIn$1_remaining.isEmpty()) {
                        var51 = filter_filterCommon_noneIn$1_l;
                        break;
                     }

                     Object filter_filterCommon_noneIn$1_allIn$1_x = filter_filterCommon_noneIn$1_allIn$1_remaining.head();
                     if (BoxesRunTime.unboxToBoolean(p.apply(filter_filterCommon_noneIn$1_allIn$1_x)) == filter_filterCommon_isFlipped) {
                        scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_l.head(), .MODULE$);
                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_l.tail();

                        scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast;
                        for(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess != filter_filterCommon_noneIn$1_allIn$1_remaining; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.tail()) {
                           scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.head(), .MODULE$);
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                        }

                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next;

                        while(!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.isEmpty()) {
                           Object filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.head();
                           if (BoxesRunTime.unboxToBoolean(p.apply(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head)) != filter_filterCommon_isFlipped) {
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                           } else {
                              while(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy != filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next) {
                                 scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.head(), .MODULE$);
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.tail();
                              }

                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                           }
                        }

                        if (!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.isEmpty()) {
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy);
                        }

                        var51 = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead;
                        Object var27 = null;
                        Object var30 = null;
                        Object var33 = null;
                        Object var36 = null;
                        Object var39 = null;
                        Object var42 = null;
                        Object var45 = null;
                        Object var48 = null;
                        break;
                     }

                     filter_filterCommon_noneIn$1_allIn$1_remaining = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                  }

                  Object var23 = null;
                  Object var25 = null;
                  Object var28 = null;
                  Object var31 = null;
                  Object var34 = null;
                  Object var37 = null;
                  Object var40 = null;
                  Object var43 = null;
                  Object var46 = null;
                  Object var49 = null;
                  break;
               }

               filter_filterCommon_noneIn$1_l = filter_filterCommon_noneIn$1_t;
            }

            Object var20 = null;
            Object var21 = null;
            Object var22 = null;
            Object var24 = null;
            Object var26 = null;
            Object var29 = null;
            Object var32 = null;
            Object var35 = null;
            Object var38 = null;
            Object var41 = null;
            Object var44 = null;
            Object var47 = null;
            Object var50 = null;
            List filter_filterCommon_result = (List)var51;
            Statics.releaseFence();
            Object var52 = filter_filterCommon_result;
            Object var18 = null;
            filter_filterCommon_result = null;
            return this.setAnnotations((List)var52);
         }
      }

      public Symbol removeAnnotation(final Symbol sym) {
         return this.filterAnnotations((x$24) -> BoxesRunTime.boxToBoolean($anonfun$removeAnnotation$1(sym, x$24)));
      }

      public Symbol addAnnotation(final AnnotationInfos.AnnotationInfo annot) {
         List var10001 = this.annotations();
         if (var10001 == null) {
            throw null;
         } else {
            return this.setAnnotations((List)StrictOptimizedSeqOps.appended$(var10001, annot));
         }
      }

      public final Symbol addAnnotation(final Symbol sym) {
         return this.addAnnotation((Symbol)sym, (List).MODULE$);
      }

      public final Symbol addAnnotation(final Symbol sym, final Trees.Tree arg) {
         List $colon$colon_this = .MODULE$;
         scala.collection.immutable..colon.colon var10002 = new scala.collection.immutable..colon.colon(arg, $colon$colon_this);
         $colon$colon_this = null;
         return this.addAnnotation((Symbol)sym, (List)var10002);
      }

      public final Symbol addAnnotation(final Symbol sym, final Trees.Tree arg1, final Trees.Tree arg2) {
         List $colon$colon_this = .MODULE$;
         scala.collection.immutable..colon.colon var10002 = new scala.collection.immutable..colon.colon(arg2, $colon$colon_this);
         $colon$colon_this = null;
         List $colon$colon_this = var10002;
         var10002 = new scala.collection.immutable..colon.colon(arg1, $colon$colon_this);
         $colon$colon_this = null;
         return this.addAnnotation((Symbol)sym, (List)var10002);
      }

      public final Symbol addAnnotation(final Symbol sym, final Seq args) {
         return this.addAnnotation(sym, args.toList());
      }

      public final Symbol addAnnotation(final Symbol sym, final List args) {
         AnnotationInfos.AnnotationInfo$ var10001 = this.scala$reflect$internal$Symbols$Symbol$$$outer().AnnotationInfo();
         if (sym == null) {
            throw null;
         } else {
            return this.addAnnotation(var10001.apply(sym.tpe_$times(), args, .MODULE$));
         }
      }

      public final Symbol addAnnotation(final Types.Type tp) {
         return this.addAnnotation((Types.Type)tp, (List).MODULE$);
      }

      public final Symbol addAnnotation(final Types.Type tp, final Trees.Tree arg) {
         List $colon$colon_this = .MODULE$;
         scala.collection.immutable..colon.colon var10002 = new scala.collection.immutable..colon.colon(arg, $colon$colon_this);
         $colon$colon_this = null;
         return this.addAnnotation((Types.Type)tp, (List)var10002);
      }

      public final Symbol addAnnotation(final Types.Type tp, final Trees.Tree arg1, final Trees.Tree arg2) {
         List $colon$colon_this = .MODULE$;
         scala.collection.immutable..colon.colon var10002 = new scala.collection.immutable..colon.colon(arg2, $colon$colon_this);
         $colon$colon_this = null;
         List $colon$colon_this = var10002;
         var10002 = new scala.collection.immutable..colon.colon(arg1, $colon$colon_this);
         $colon$colon_this = null;
         return this.addAnnotation((Types.Type)tp, (List)var10002);
      }

      public final Symbol addAnnotation(final Types.Type tp, final List args) {
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         boolean assert_assertion = tp.typeParams().isEmpty();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(tp);
            } else {
               assert_this = null;
               return this.addAnnotation(this.scala$reflect$internal$Symbols$Symbol$$$outer().AnnotationInfo().apply(tp, args, .MODULE$));
            }
         }
      }

      public final boolean isLess(final Symbol that) {
         if (this != that) {
            if (this.isType()) {
               if (that.isType()) {
                  int diff = baseTypeSeqLength$1(this) - baseTypeSeqLength$1(that);
                  if (diff > 0 || diff == 0 && this.id() < that.id()) {
                     return true;
                  }
               }
            } else if (that.isType() || this.id() < that.id()) {
               return true;
            }
         }

         return false;
      }

      public final boolean isNestedIn(final Symbol that) {
         while(true) {
            Symbol var10000 = this.owner();
            if (var10000 == null) {
               if (that == null) {
                  break;
               }
            } else if (var10000.equals(that)) {
               break;
            }

            label20: {
               var10000 = this.owner();
               NoSymbol var2 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
               if (var10000 == null) {
                  if (var2 != null) {
                     break label20;
                  }
               } else if (!var10000.equals(var2)) {
                  break label20;
               }

               return false;
            }

            var10000 = this.owner();
            that = that;
            this = var10000;
         }

         return true;
      }

      public boolean isNonBottomSubClass(final Symbol that) {
         return false;
      }

      public boolean isBottomSubClass(final Symbol that) {
         return this == this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().NothingClass() || this == this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().NullClass() && that.isClass() && that != this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().NothingClass() && !that.isNonBottomSubClass(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().AnyValClass());
      }

      public boolean isSubClass(final Symbol that) {
         return this.isNonBottomSubClass(that);
      }

      public final boolean isNumericSubClass(final Symbol that) {
         Definitions.definitions$ var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions();
         if (var10000 == null) {
            throw null;
         } else {
            return Definitions.ValueClassDefinitions.isNumericSubClass$(var10000, this, that);
         }
      }

      public final boolean isWeakSubClass(final Symbol that) {
         return this.isSubClass(that) || this.isNumericSubClass(that);
      }

      public List alternatives() {
         if (this.isOverloaded()) {
            return ((Types.OverloadedType)this.info()).alternatives();
         } else {
            List $colon$colon_this = .MODULE$;
            return new scala.collection.immutable..colon.colon(this, $colon$colon_this);
         }
      }

      public Symbol filter(final Function1 cond) {
         if (this.isOverloaded()) {
            boolean changed = false;
            List alts0 = this.alternatives();

            List alts1;
            for(alts1 = .MODULE$; !alts0.isEmpty(); alts0 = (List)alts0.tail()) {
               if (BoxesRunTime.unboxToBoolean(cond.apply(alts0.head()))) {
                  alts1 = alts1.$colon$colon(alts0.head());
               } else {
                  changed = true;
               }
            }

            if (!changed) {
               return this;
            } else if (alts1.isEmpty()) {
               return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
            } else if (((List)alts1.tail()).isEmpty()) {
               return (Symbol)alts1.head();
            } else {
               return this.owner().newOverloaded(this.info().prefix(), alts1.reverse());
            }
         } else {
            return (Symbol)(BoxesRunTime.unboxToBoolean(cond.apply(this)) ? this : this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol());
         }
      }

      public Symbol suchThat(final Function1 cond) {
         Symbol result = this.filter(cond);
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         boolean assert_assertion = !result.isOverloaded();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(result.alternatives());
            } else {
               return result;
            }
         }
      }

      public final Symbol cloneSymbol() {
         return this.cloneSymbol(this.owner());
      }

      public final Symbol cloneSymbol(final Symbol newOwner) {
         long cloneSymbol_newFlags = this._rawflags;
         return this.cloneSymbol(newOwner, cloneSymbol_newFlags, (Names.Name)null);
      }

      public final Symbol cloneSymbol(final Symbol newOwner, final long newFlags) {
         return this.cloneSymbol(newOwner, newFlags, (Names.Name)null);
      }

      public final Symbol cloneSymbol(final Symbol newOwner, final long newFlags, final Names.Name newName) {
         Symbol clone = this.cloneSymbolImpl(newOwner, newFlags);
         clone.setPrivateWithin(this.privateWithin()).setInfo(this.info().cloneInfo(clone)).setAnnotations(this.annotations());
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         boolean assert_assertion = clone.attachments().isEmpty();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError("cloned symbol cannot have attachments");
            } else {
               label21: {
                  assert_this = null;
                  clone.setAttachments(this.attachments().cloneAttachments());
                  Symbol var9 = clone.thisSym();
                  if (var9 != null) {
                     if (var9.equals(clone)) {
                        break label21;
                     }
                  }

                  clone.typeOfThis_$eq(clone.typeOfThis().cloneInfo(clone));
               }

               if (newName != null) {
                  clone.setName(this.asNameType(newName));
               }

               return clone;
            }
         }
      }

      public abstract Symbol cloneSymbolImpl(final Symbol owner, final long newFlags);

      public Symbol flipped() {
         return this;
      }

      public Symbol enclClass() {
         return this.isClass() ? this : this.owner().enclClass();
      }

      public Symbol enclMethod() {
         return this.isSourceMethod() ? this : this.owner().enclMethod();
      }

      public Symbol primaryConstructor() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      public Symbol thisSym() {
         return this;
      }

      public boolean hasSelfType() {
         return this.thisSym() != this && this.typeOfThis().typeConstructor() != this.typeConstructor();
      }

      public Types.Type typeOfThis() {
         return this.thisSym().tpe_$times();
      }

      public Types.Type thisType() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoPrefix();
      }

      public final List caseFieldAccessors() {
         List var10000 = this.constrParamAccessors();
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            Object var12;
            if (map_this == .MODULE$) {
               var12 = .MODULE$;
            } else {
               scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$caseFieldAccessors$1((Symbol)map_this.head()), .MODULE$);
               scala.collection.immutable..colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != .MODULE$; map_rest = (List)map_rest.tail()) {
                  scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$caseFieldAccessors$1((Symbol)map_rest.head()), .MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               var12 = map_h;
            }

            Object var7 = null;
            Object var8 = null;
            Object var9 = null;
            Object var10 = null;
            Object var11 = null;
            List primaryNames = (List)var12;
            return this.loop$3((List)this.caseFieldAccessorsUnsorted().sortBy((x$28) -> BoxesRunTime.boxToInteger($anonfun$caseFieldAccessors$5(x$28)), scala.math.Ordering.Int..MODULE$), .MODULE$, (List)((SeqOps)StrictOptimizedIterableOps.zipWithIndex$(primaryNames)).sortBy((x$29) -> BoxesRunTime.boxToInteger($anonfun$caseFieldAccessors$6(x$29)), scala.math.Ordering.Int..MODULE$));
         }
      }

      private final List caseFieldAccessorsUnsorted() {
         List var10000 = this.info().decls().toList();
         if (var10000 == null) {
            throw null;
         } else {
            List filter_this = var10000;
            boolean filter_filterCommon_isFlipped = false;
            List filter_filterCommon_noneIn$1_l = filter_this;

            while(true) {
               if (filter_filterCommon_noneIn$1_l.isEmpty()) {
                  var48 = .MODULE$;
                  break;
               }

               Object filter_filterCommon_noneIn$1_h = filter_filterCommon_noneIn$1_l.head();
               List filter_filterCommon_noneIn$1_t = (List)filter_filterCommon_noneIn$1_l.tail();
               if (((Symbol)filter_filterCommon_noneIn$1_h).isCaseAccessorMethod() != filter_filterCommon_isFlipped) {
                  List filter_filterCommon_noneIn$1_allIn$1_remaining = filter_filterCommon_noneIn$1_t;

                  while(true) {
                     if (filter_filterCommon_noneIn$1_allIn$1_remaining.isEmpty()) {
                        var48 = filter_filterCommon_noneIn$1_l;
                        break;
                     }

                     Object filter_filterCommon_noneIn$1_allIn$1_x = filter_filterCommon_noneIn$1_allIn$1_remaining.head();
                     if (((Symbol)filter_filterCommon_noneIn$1_allIn$1_x).isCaseAccessorMethod() == filter_filterCommon_isFlipped) {
                        scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_l.head(), .MODULE$);
                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_l.tail();

                        scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast;
                        for(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess != filter_filterCommon_noneIn$1_allIn$1_remaining; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.tail()) {
                           scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.head(), .MODULE$);
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                        }

                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next;

                        while(!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.isEmpty()) {
                           Object filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.head();
                           if (((Symbol)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head).isCaseAccessorMethod() != filter_filterCommon_isFlipped) {
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                           } else {
                              while(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy != filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next) {
                                 scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.head(), .MODULE$);
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.tail();
                              }

                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                           }
                        }

                        if (!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.isEmpty()) {
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy);
                        }

                        var48 = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead;
                        Object var24 = null;
                        Object var27 = null;
                        Object var30 = null;
                        Object var33 = null;
                        Object var36 = null;
                        Object var39 = null;
                        Object var42 = null;
                        Object var45 = null;
                        break;
                     }

                     filter_filterCommon_noneIn$1_allIn$1_remaining = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                  }

                  Object var20 = null;
                  Object var22 = null;
                  Object var25 = null;
                  Object var28 = null;
                  Object var31 = null;
                  Object var34 = null;
                  Object var37 = null;
                  Object var40 = null;
                  Object var43 = null;
                  Object var46 = null;
                  break;
               }

               filter_filterCommon_noneIn$1_l = filter_filterCommon_noneIn$1_t;
            }

            Object var17 = null;
            Object var18 = null;
            Object var19 = null;
            Object var21 = null;
            Object var23 = null;
            Object var26 = null;
            Object var29 = null;
            Object var32 = null;
            Object var35 = null;
            Object var38 = null;
            Object var41 = null;
            Object var44 = null;
            Object var47 = null;
            List filter_filterCommon_result = (List)var48;
            Statics.releaseFence();
            return filter_filterCommon_result;
         }
      }

      public final List constrParamAccessors() {
         List var10000 = this.info().decls().toList();
         if (var10000 == null) {
            throw null;
         } else {
            List filter_this = var10000;
            boolean filter_filterCommon_isFlipped = false;
            List filter_filterCommon_noneIn$1_l = filter_this;

            while(true) {
               if (filter_filterCommon_noneIn$1_l.isEmpty()) {
                  var48 = .MODULE$;
                  break;
               }

               Object filter_filterCommon_noneIn$1_h = filter_filterCommon_noneIn$1_l.head();
               List filter_filterCommon_noneIn$1_t = (List)filter_filterCommon_noneIn$1_l.tail();
               if ($anonfun$constrParamAccessors$1((Symbol)filter_filterCommon_noneIn$1_h) != filter_filterCommon_isFlipped) {
                  List filter_filterCommon_noneIn$1_allIn$1_remaining = filter_filterCommon_noneIn$1_t;

                  while(true) {
                     if (filter_filterCommon_noneIn$1_allIn$1_remaining.isEmpty()) {
                        var48 = filter_filterCommon_noneIn$1_l;
                        break;
                     }

                     Object filter_filterCommon_noneIn$1_allIn$1_x = filter_filterCommon_noneIn$1_allIn$1_remaining.head();
                     if ($anonfun$constrParamAccessors$1((Symbol)filter_filterCommon_noneIn$1_allIn$1_x) == filter_filterCommon_isFlipped) {
                        scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_l.head(), .MODULE$);
                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_l.tail();

                        scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast;
                        for(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess != filter_filterCommon_noneIn$1_allIn$1_remaining; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.tail()) {
                           scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.head(), .MODULE$);
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                        }

                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next;

                        while(!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.isEmpty()) {
                           Object filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.head();
                           if ($anonfun$constrParamAccessors$1((Symbol)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head) != filter_filterCommon_isFlipped) {
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                           } else {
                              while(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy != filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next) {
                                 scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.head(), .MODULE$);
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.tail();
                              }

                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                           }
                        }

                        if (!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.isEmpty()) {
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy);
                        }

                        var48 = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead;
                        Object var24 = null;
                        Object var27 = null;
                        Object var30 = null;
                        Object var33 = null;
                        Object var36 = null;
                        Object var39 = null;
                        Object var42 = null;
                        Object var45 = null;
                        break;
                     }

                     filter_filterCommon_noneIn$1_allIn$1_remaining = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                  }

                  Object var20 = null;
                  Object var22 = null;
                  Object var25 = null;
                  Object var28 = null;
                  Object var31 = null;
                  Object var34 = null;
                  Object var37 = null;
                  Object var40 = null;
                  Object var43 = null;
                  Object var46 = null;
                  break;
               }

               filter_filterCommon_noneIn$1_l = filter_filterCommon_noneIn$1_t;
            }

            Object var17 = null;
            Object var18 = null;
            Object var19 = null;
            Object var21 = null;
            Object var23 = null;
            Object var26 = null;
            Object var29 = null;
            Object var32 = null;
            Object var35 = null;
            Object var38 = null;
            Object var41 = null;
            Object var44 = null;
            Object var47 = null;
            List filter_filterCommon_result = (List)var48;
            Statics.releaseFence();
            return filter_filterCommon_result;
         }
      }

      public final Symbol accessed() {
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         boolean assert_assertion = this.hasAccessorFlag();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(this);
            } else {
               assert_this = null;
               Symbol localField = this.owner().info().decl((Names.Name)this.localName());
               NoSymbol var2 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
               if (localField == null) {
                  if (var2 != null) {
                     return localField;
                  }
               } else if (!localField.equals(var2)) {
                  return localField;
               }

               if (this.hasFlag(34359738368L)) {
                  var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
                  Phase enteringPhase_ph = this.scala$reflect$internal$Symbols$Symbol$$$outer().picklerPhase();
                  if (var10000 == null) {
                     throw null;
                  } else {
                     SymbolTable enteringPhase_this = var10000;
                     Types.Type var16;
                     if (enteringPhase_ph == enteringPhase_this.phase()) {
                        var16 = $anonfun$accessed$2(this);
                     } else {
                        Phase enteringPhase_saved = enteringPhase_this.pushPhase(enteringPhase_ph);

                        try {
                           var16 = $anonfun$accessed$2(this);
                        } finally {
                           enteringPhase_this.popPhase(enteringPhase_saved);
                        }
                     }

                     Object var12 = null;
                     enteringPhase_ph = null;
                     Object var14 = null;
                     return var16.decl(this.name()).suchThat((x$31) -> BoxesRunTime.boxToBoolean($anonfun$accessed$3(x$31)));
                  }
               } else {
                  return localField;
               }
            }
         }
      }

      public Symbol sourceModule() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      public final Symbol outerClass() {
         while(!this.equals(this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol())) {
            if (this.owner().isClass()) {
               return this.owner();
            }

            if (this.isClassLocalToConstructor()) {
               this = this.owner().enclClass();
            } else {
               this = this.owner();
            }
         }

         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         Function0 var10001 = () -> "NoSymbol.outerClass";
         byte devWarningDumpStack_maxFrames = 15;
         Function0 devWarningDumpStack_msg = var10001;
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable devWarningDumpStack_this = var10000;
            devWarningDumpStack_this.devWarning(SymbolTable::$anonfun$devWarningDumpStack$1);
            Object var4 = null;
            Object var5 = null;
            return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
         }
      }

      public Symbol alias() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      /** @deprecated */
      public Symbol lazyAccessor() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      /** @deprecated */
      public Symbol lazyAccessorOrSelf() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      public Symbol accessedOrSelf() {
         return !this.hasAccessorFlag() || this.owner().isTrait() && !this.hasFlag(137438953472L) ? this : this.accessed();
      }

      public Symbol outerSource() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      public Symbol superClass() {
         return (Symbol)(this.info().parents().isEmpty() ? this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol() : ((Types.Type)this.info().parents().head()).typeSymbol());
      }

      public List parentSymbols() {
         List var10000 = this.info().parents();
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            if (map_this == .MODULE$) {
               return .MODULE$;
            } else {
               scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon(((Types.Type)map_this.head()).typeSymbol(), .MODULE$);
               scala.collection.immutable..colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != .MODULE$; map_rest = (List)map_rest.tail()) {
                  scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon(((Types.Type)map_rest.head()).typeSymbol(), .MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               return map_h;
            }
         }
      }

      public Iterator parentSymbolsIterator() {
         return this.info().parents().iterator().map((x$33) -> x$33.typeSymbol());
      }

      public List mixinClasses() {
         Symbol sc = this.superClass();
         List var10000 = this.ancestors();
         if (var10000 == null) {
            throw null;
         } else {
            List takeWhile_this = var10000;
            ListBuffer takeWhile_b = new ListBuffer();

            for(List takeWhile_these = takeWhile_this; !takeWhile_these.isEmpty(); takeWhile_these = (List)takeWhile_these.tail()) {
               Symbol var6 = (Symbol)takeWhile_these.head();
               if (!$anonfun$mixinClasses$1(sc, var6)) {
                  break;
               }

               Object takeWhile_$plus$eq_elem = takeWhile_these.head();
               takeWhile_b.addOne(takeWhile_$plus$eq_elem);
               takeWhile_$plus$eq_elem = null;
            }

            return takeWhile_b.toList();
         }
      }

      public List ancestors() {
         List var10000 = this.info().baseClasses();
         byte drop_n = 1;
         if (var10000 == null) {
            throw null;
         } else {
            return (List)StrictOptimizedLinearSeqOps.drop$(var10000, drop_n);
         }
      }

      public final Symbol enclosingSuchThat(final Function1 p) {
         Symbol sym = this;

         while(true) {
            NoSymbol var3 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
            if (sym == null) {
               if (var3 == null) {
                  break;
               }
            } else if (sym.equals(var3)) {
               break;
            }

            if (BoxesRunTime.unboxToBoolean(p.apply(sym))) {
               break;
            }

            sym = sym.owner();
         }

         return sym;
      }

      public Symbol enclosingPackageClass() {
         Symbol sym = this.owner();

         while(true) {
            NoSymbol var2 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
            if (sym == null) {
               if (var2 == null) {
                  break;
               }
            } else if (sym.equals(var2)) {
               break;
            }

            if (sym.isPackageClass()) {
               break;
            }

            sym = sym.owner();
         }

         return sym;
      }

      public Symbol enclosingRootClass() {
         Symbol enclosingSuchThat_sym = this;

         while(true) {
            NoSymbol var2 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
            if (enclosingSuchThat_sym == null) {
               if (var2 == null) {
                  break;
               }
            } else if (enclosingSuchThat_sym.equals(var2)) {
               break;
            }

            if (enclosingSuchThat_sym.isRoot()) {
               break;
            }

            enclosingSuchThat_sym = enclosingSuchThat_sym.owner();
         }

         return enclosingSuchThat_sym;
      }

      public Symbol enclosingPackage() {
         return this.enclosingPackageClass().companionModule();
      }

      public final Symbol logicallyEnclosingMember() {
         while(!this.isLocalDummy()) {
            if (this.isMethod() || this.isClass() || this.equals(this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol())) {
               return this;
            }

            this = this.owner();
         }

         return this.enclClass().primaryConstructor();
      }

      public final Symbol enclosingTopLevelClass() {
         while(this != this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) {
            if (this.isTopLevel()) {
               if (this.isClass()) {
                  return this;
               }

               return this.moduleClass();
            }

            this = this.owner();
         }

         return this;
      }

      public final Symbol originalEnclosingTopLevelClassOrDummy() {
         while(this != this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) {
            if (this.isTopLevel()) {
               if (this.isClass()) {
                  return this;
               }

               Symbol var10000 = this.moduleClass();
               if (var10000 == null) {
                  throw null;
               }

               Symbol orElse_this = var10000;
               if (orElse_this != orElse_this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) {
                  return orElse_this;
               }

               return this;
            }

            this = this.originalOwner();
         }

         return this;
      }

      public boolean isCoDefinedWith(final Symbol that) {
         if (!this.rawInfoIsNoType()) {
            Symbol var10000 = this.effectiveOwner();
            Symbol var2 = that.effectiveOwner();
            if (var10000 == null) {
               if (var2 != null) {
                  return false;
               }
            } else if (!var10000.equals(var2)) {
               return false;
            }

            if (!this.effectiveOwner().isPackageClass()) {
               return true;
            }

            AbstractFile thisFile = this.associatedFile();
            if (thisFile == NoAbstractFile$.MODULE$) {
               return true;
            }

            AbstractFile thatFile = that.associatedFile();
            if (thatFile == NoAbstractFile$.MODULE$) {
               return true;
            }

            String var7 = thisFile.path();
            String var5 = thatFile.path();
            if (var7 == null) {
               if (var5 == null) {
                  return true;
               }
            } else if (var7.equals(var5)) {
               return true;
            }

            var7 = thisFile.canonicalPath();
            String var6 = thatFile.canonicalPath();
            if (var7 == null) {
               if (var6 == null) {
                  return true;
               }
            } else if (var7.equals(var6)) {
               return true;
            }
         }

         return false;
      }

      public Symbol companionClass() {
         return this.flatOwnerInfo().decl((Names.Name)this.name().toTypeName()).suchThat((d) -> BoxesRunTime.boxToBoolean($anonfun$companionClass$1(this, d)));
      }

      public Symbol companionModule() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      public Symbol companionSymbol() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      public Symbol linkedClassOfClass() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      public final Types.Type flatOwnerInfo() {
         if (this.needsFlatClasses()) {
            this.info();
         }

         return this.owner().rawInfo();
      }

      public Symbol moduleClass() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      public final Symbol matchingSymbol(final Symbol ofclazz, final Types.Type site) {
         return this.matchingSymbolInternal(site, ofclazz.info().nonPrivateDecl(this.name()));
      }

      public final Symbol matchingSymbol(final Types.Type site, final long admit) {
         return this.matchingSymbolInternal(site, site.nonPrivateMemberAdmitting(this.name(), admit));
      }

      public final long matchingSymbol$default$2() {
         return 0L;
      }

      private Symbol matchingSymbolInternal(final Types.Type site, final Symbol candidate) {
         NoSymbol var3 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
         if (candidate == null) {
            if (var3 == null) {
               return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
            }
         } else if (candidate.equals(var3)) {
            return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
         }

         if (candidate.isOverloaded()) {
            return candidate.filter((sym) -> BoxesRunTime.boxToBoolean($anonfun$matchingSymbolInternal$1(this, site, sym)));
         } else if (this.qualifies$1(candidate, site)) {
            return candidate;
         } else {
            return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
         }
      }

      public final Symbol overriddenSymbol(final Symbol baseClass) {
         Symbol matching = this.matchingInheritedSymbolIn(baseClass);
         return this.isDeferred() ? matching.filter((x$36) -> BoxesRunTime.boxToBoolean($anonfun$overriddenSymbol$1(x$36))) : matching;
      }

      private Symbol matchingInheritedSymbolIn(final Symbol baseClass) {
         return (Symbol)(this.canMatchInheritedSymbols() ? this.matchingSymbol(baseClass, this.owner().thisType()) : this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol());
      }

      public final Symbol overridingSymbol(final Symbol ofclazz) {
         return (Symbol)(this.canMatchInheritedSymbols() ? this.matchingSymbol(ofclazz, ofclazz.thisType()) : this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol());
      }

      private boolean canMatchInheritedSymbols() {
         return this.owner().isClass() && !this.isClass() && !this.isConstructor();
      }

      public List overrideChain() {
         if (this == this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) {
            return .MODULE$;
         } else if (this.isOverridingSymbol()) {
            List var10000 = this.allOverriddenSymbols();
            if (var10000 == null) {
               throw null;
            } else {
               List $colon$colon_this = var10000;
               return new scala.collection.immutable..colon.colon(this, $colon$colon_this);
            }
         } else {
            List $colon$colon_this = .MODULE$;
            return new scala.collection.immutable..colon.colon(this, $colon$colon_this);
         }
      }

      public final List allOverriddenSymbols() {
         if (!this.isOverridingSymbol()) {
            return .MODULE$;
         } else if (scala.package..MODULE$.List() == null) {
            throw null;
         } else {
            Builder builder = new ListBuffer();
            List var10000 = this.owner().ancestors();
            if (var10000 == null) {
               throw null;
            } else {
               for(List foreach_these = var10000; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
                  Symbol var3 = (Symbol)foreach_these.head();
                  $anonfun$allOverriddenSymbols$1(this, builder, var3);
               }

               Object var4 = null;
               return (List)builder.result();
            }
         }
      }

      private boolean computeIsOverridingSymbol() {
         if (this.canMatchInheritedSymbols()) {
            List var10000 = this.owner().ancestors();
            if (var10000 == null) {
               throw null;
            }

            List exists_these = var10000;

            while(true) {
               if (exists_these.isEmpty()) {
                  var4 = false;
                  break;
               }

               Symbol var2 = (Symbol)exists_these.head();
               if ($anonfun$computeIsOverridingSymbol$1(this, var2)) {
                  var4 = true;
                  break;
               }

               exists_these = (List)exists_these.tail();
            }

            Object var3 = null;
            if (var4) {
               return true;
            }
         }

         return false;
      }

      public final boolean isOverridingSymbol() {
         int curRunId = this.scala$reflect$internal$Symbols$Symbol$$$outer().currentRunId();
         if (this.isOverridingSymbolCache == curRunId) {
            return true;
         } else if (this.isOverridingSymbolCache == -curRunId) {
            return false;
         } else {
            boolean result = this.computeIsOverridingSymbol();
            this.isOverridingSymbolCache = (result ? 1 : -1) * curRunId;
            return result;
         }
      }

      public Symbol nextOverriddenSymbol() {
         return (Symbol)(this.isOverridingSymbol() ? this.loop$4(this.owner().ancestors()) : this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol());
      }

      public final List extendedOverriddenSymbols() {
         if (this.canMatchInheritedSymbols()) {
            List var10000 = this.owner().thisSym().ancestors();
            if (var10000 == null) {
               throw null;
            } else {
               List map_this = var10000;
               Object var63;
               if (map_this == .MODULE$) {
                  var63 = .MODULE$;
               } else {
                  Symbol var22 = (Symbol)map_this.head();
                  scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon(this.overriddenSymbol(var22), .MODULE$);
                  scala.collection.immutable..colon.colon map_t = map_h;

                  for(List map_rest = (List)map_this.tail(); map_rest != .MODULE$; map_rest = (List)map_rest.tail()) {
                     var22 = (Symbol)map_rest.head();
                     scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon(this.overriddenSymbol(var22), .MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var63 = map_h;
               }

               Object var24 = null;
               Object var25 = null;
               Object var26 = null;
               Object var27 = null;
               Object var28 = null;
               List filter_this = (List)var63;
               boolean filter_filterCommon_isFlipped = false;
               List filter_filterCommon_noneIn$1_l = filter_this;

               while(true) {
                  if (filter_filterCommon_noneIn$1_l.isEmpty()) {
                     var63 = .MODULE$;
                     break;
                  }

                  Object filter_filterCommon_noneIn$1_h = filter_filterCommon_noneIn$1_l.head();
                  List filter_filterCommon_noneIn$1_t = (List)filter_filterCommon_noneIn$1_l.tail();
                  Symbol var23 = (Symbol)filter_filterCommon_noneIn$1_h;
                  if ($anonfun$extendedOverriddenSymbols$2(this, var23) != filter_filterCommon_isFlipped) {
                     List filter_filterCommon_noneIn$1_allIn$1_remaining = filter_filterCommon_noneIn$1_t;

                     while(true) {
                        if (filter_filterCommon_noneIn$1_allIn$1_remaining.isEmpty()) {
                           var63 = filter_filterCommon_noneIn$1_l;
                           break;
                        }

                        Object filter_filterCommon_noneIn$1_allIn$1_x = filter_filterCommon_noneIn$1_allIn$1_remaining.head();
                        var23 = (Symbol)filter_filterCommon_noneIn$1_allIn$1_x;
                        if ($anonfun$extendedOverriddenSymbols$2(this, var23) == filter_filterCommon_isFlipped) {
                           scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_l.head(), .MODULE$);
                           List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_l.tail();

                           scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast;
                           for(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess != filter_filterCommon_noneIn$1_allIn$1_remaining; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.tail()) {
                              scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.head(), .MODULE$);
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                           }

                           List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                           List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next;

                           while(!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.isEmpty()) {
                              Object filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.head();
                              var23 = (Symbol)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head;
                              if ($anonfun$extendedOverriddenSymbols$2(this, var23) != filter_filterCommon_isFlipped) {
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                              } else {
                                 while(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy != filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next) {
                                    scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.head(), .MODULE$);
                                    filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                                    filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                                    filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.tail();
                                 }

                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                              }
                           }

                           if (!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.isEmpty()) {
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy);
                           }

                           var63 = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead;
                           Object var36 = null;
                           Object var39 = null;
                           Object var42 = null;
                           Object var45 = null;
                           Object var48 = null;
                           Object var51 = null;
                           Object var54 = null;
                           Object var57 = null;
                           break;
                        }

                        filter_filterCommon_noneIn$1_allIn$1_remaining = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                     }

                     Object var32 = null;
                     Object var34 = null;
                     Object var37 = null;
                     Object var40 = null;
                     Object var43 = null;
                     Object var46 = null;
                     Object var49 = null;
                     Object var52 = null;
                     Object var55 = null;
                     Object var58 = null;
                     break;
                  }

                  filter_filterCommon_noneIn$1_l = filter_filterCommon_noneIn$1_t;
               }

               filter_filterCommon_noneIn$1_l = null;
               Object var30 = null;
               Object var31 = null;
               Object var33 = null;
               Object var35 = null;
               Object var38 = null;
               Object var41 = null;
               Object var44 = null;
               Object var47 = null;
               Object var50 = null;
               Object var53 = null;
               Object var56 = null;
               Object var59 = null;
               List filter_filterCommon_result = (List)var63;
               Statics.releaseFence();
               return filter_filterCommon_result;
            }
         } else {
            return .MODULE$;
         }
      }

      /** @deprecated */
      public final Symbol superSymbol(final Symbol base) {
         return this.superSymbolIn(base);
      }

      public final Symbol superSymbolIn(final Symbol base) {
         List var10000 = base.info().baseClasses();
         if (var10000 == null) {
            throw null;
         } else {
            LinearSeq dropWhile_loop$3_s;
            for(dropWhile_loop$3_s = (LinearSeq)var10000.coll(); dropWhile_loop$3_s.nonEmpty(); dropWhile_loop$3_s = (LinearSeq)dropWhile_loop$3_s.tail()) {
               Symbol var6 = (Symbol)dropWhile_loop$3_s.head();
               if (!$anonfun$superSymbolIn$1(this, var6)) {
                  break;
               }
            }

            LinearSeq var8 = dropWhile_loop$3_s;
            Object var7 = null;
            List bcs = (List)((StrictOptimizedLinearSeqOps)var8).drop(1);

            Symbol sym;
            for(sym = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol(); !bcs.isEmpty(); bcs = (List)bcs.tail()) {
               NoSymbol var4 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
               if (sym == null) {
                  if (var4 != null) {
                     break;
                  }
               } else if (!sym.equals(var4)) {
                  break;
               }

               sym = this.matchingSymbol((Symbol)bcs.head(), base.thisType()).suchThat((x$40) -> BoxesRunTime.boxToBoolean($anonfun$superSymbolIn$2(x$40)));
            }

            return sym;
         }
      }

      /** @deprecated */
      public final Symbol getter(final Symbol base) {
         return this.getterIn(base);
      }

      public final Symbol getterIn(final Symbol base) {
         return base.info().decl((Names.Name)this.getterName()).filter((x$41) -> BoxesRunTime.boxToBoolean($anonfun$getterIn$1(x$41)));
      }

      public Names.TermName getterName() {
         return this.name().getterName();
      }

      public Names.TermName setterName() {
         return this.name().setterName();
      }

      public Names.TermName localName() {
         return this.name().localName();
      }

      /** @deprecated */
      public final Symbol setter(final Symbol base, final boolean hasExpandedName) {
         return this.setterIn(base, hasExpandedName);
      }

      public final boolean setter$default$2() {
         return this.needsExpandedSetterName();
      }

      public final Symbol setterIn(final Symbol base, final boolean hasExpandedName) {
         return base.info().decl((Names.Name)this.setterNameInBase(base, hasExpandedName)).filter((x$42) -> BoxesRunTime.boxToBoolean($anonfun$setterIn$1(x$42)));
      }

      public final boolean setterIn$default$2() {
         return this.needsExpandedSetterName();
      }

      public boolean needsExpandedSetterName() {
         if (this.isMethod()) {
            return this.hasStableFlag() && !this.isLazy();
         } else {
            return this.hasNoFlags(2147487744L);
         }
      }

      public Names.TermName setterNameInBase(final Symbol base, final boolean expanded) {
         return expanded ? this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().expandedSetterName(this.setterName(), base) : this.setterName();
      }

      public Symbol derivedValueClassUnbox() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      public final Symbol caseModule() {
         Names.TermName modname = this.name().toTermName();
         Symbol pw = this.privateWithin();
         if (pw.isClass() && !pw.isModuleClass() && !this.hasFlag(68719476736L)) {
            modname = this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().expandedName(modname, pw);
         }

         return this.initialize().owner().info().decl((Names.Name)modname).suchThat((x$43) -> BoxesRunTime.boxToBoolean($anonfun$caseModule$1(x$43)));
      }

      public Symbol deSkolemize() {
         return this;
      }

      public Object unpackLocation() {
         return null;
      }

      public final void makeNotPrivate(final Symbol base) {
         while(true) {
            if (this.isPrivate()) {
               this.setFlag(288230376151711744L);
               if (!this.isStaticModule() && !this.isClassConstructor()) {
                  this.expandName(base);
                  if (this.isModule()) {
                     Symbol var10000 = this.moduleClass();
                     base = base;
                     this = var10000;
                     continue;
                  }
               }
            }

            return;
         }
      }

      public Symbol makePublic() {
         return this.setPrivateWithin(this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()).resetFlag(524293L);
      }

      public Symbol firstParam() {
         List var1 = this.info().params();
         return (Symbol)(var1 instanceof scala.collection.immutable..colon.colon ? (Symbol)((scala.collection.immutable..colon.colon)var1).head() : this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol());
      }

      public final AbstractFile sourceFile() {
         AbstractFile file = this.associatedFile();
         if (file != NoAbstractFile$.MODULE$) {
            String path = file.path();
            if (!path.endsWith(".class") && !path.endsWith(".sig") && !path.endsWith(".tasty")) {
               return file;
            }
         }

         return null;
      }

      public AbstractFile associatedFile() {
         return this.enclosingTopLevelClass().associatedFile();
      }

      public void associatedFile_$eq(final AbstractFile f) {
         throw this.scala$reflect$internal$Symbols$Symbol$$$outer().abort((new StringBuilder(34)).append("associatedFile_= inapplicable for ").append(this).toString());
      }

      public Set children() {
         Set var10000 = scala.Predef..MODULE$.Set();
         Nil apply_elems = .MODULE$;
         if (var10000 == null) {
            throw null;
         } else {
            return (Set)IterableFactory.apply$(var10000, apply_elems);
         }
      }

      public final Set sealedChildren() {
         if (!this.isSealed()) {
            if (scala.Predef..MODULE$.Set() == null) {
               throw null;
            } else {
               return scala.collection.immutable.Set.EmptySet..MODULE$;
            }
         } else {
            return this.children();
         }
      }

      public final Set sealedDescendants() {
         if (!this.isSealed()) {
            Set var2 = scala.Predef..MODULE$.Set();
            ArraySeq apply_elems = scala.runtime.ScalaRunTime..MODULE$.wrapRefArray(new Symbol[]{this});
            if (var2 == null) {
               throw null;
            } else {
               return (Set)IterableFactory.apply$(var2, apply_elems);
            }
         } else {
            SetOps var10000 = (SetOps)this.children().flatMap((x$44) -> x$44.sealedDescendants());
            if (var10000 == null) {
               throw null;
            } else {
               return (Set)var10000.incl(this);
            }
         }
      }

      public final Symbol orElse(final Function0 alt) {
         return this != this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol() ? this : (Symbol)alt.apply();
      }

      public final Symbol andAlso(final Function1 f) {
         if (this != this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) {
            f.apply(this);
         }

         return this;
      }

      public final Object fold(final Function0 none, final Function1 f) {
         return this != this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol() ? f.apply(this) : none.apply();
      }

      public final Symbol map(final Function1 f) {
         return this == this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol() ? this : (Symbol)f.apply(this);
      }

      public final Option toOption() {
         return (Option)(this.exists() ? new Some(this) : scala.None..MODULE$);
      }

      public final Names.Name simpleName() {
         return this.name();
      }

      public final String sealedSortName() {
         return (new StringBuilder(1)).append(this.initName.toString()).append("#").append(this.id()).toString();
      }

      public final String keyString() {
         if (this.isJavaInterface()) {
            return "interface";
         } else if (this.isTrait()) {
            return "trait";
         } else if (this.isClass()) {
            return "class";
         } else if (this.isType() && !this.isParameter()) {
            return "type";
         } else if (this.isVariable()) {
            return "var";
         } else if (this.hasPackageFlag()) {
            return "package";
         } else if (this.isModule()) {
            return "object";
         } else if (this.isSourceMethod()) {
            return "def";
         } else {
            return !this.isTerm() || this.isParameter() && !this.isParamAccessor() ? "" : "val";
         }
      }

      private SymbolKind symbolKind() {
         Function1 triple2SK = ((accurate, sanitized, abbreviation) -> this.scala$reflect$internal$Symbols$Symbol$$$outer().new SymbolKind(accurate, sanitized, abbreviation)).tupled();
         SymbolKind kind = this.isTermMacro() ? (SymbolKind)triple2SK.apply(new Tuple3("term macro", "macro method", "MACM")) : (this instanceof FreeTermSymbol ? (SymbolKind)triple2SK.apply(new Tuple3("free term", "free term", "FTE")) : (this instanceof FreeTypeSymbol ? (SymbolKind)triple2SK.apply(new Tuple3("free type", "free type", "FTY")) : (this.isPackageClass() ? (SymbolKind)triple2SK.apply(new Tuple3("package class", "package", "PKC")) : (this.hasPackageFlag() ? (SymbolKind)triple2SK.apply(new Tuple3("package", "package", "PK")) : (this.isPackageObject() ? (SymbolKind)triple2SK.apply(new Tuple3("package object", "package", "PKO")) : (this.isPackageObjectClass() ? (SymbolKind)triple2SK.apply(new Tuple3("package object class", "package", "PKOC")) : (this.isAnonymousClass() ? (SymbolKind)triple2SK.apply(new Tuple3("anonymous class", "anonymous class", "AC")) : (this.isRefinementClass() ? (SymbolKind)triple2SK.apply(new Tuple3("refinement class", "", "RC")) : (this.isJavaAnnotation() ? (SymbolKind)triple2SK.apply(new Tuple3("Java annotation", "Java annotation", "JANN")) : (!this.isJavaEnum() && !this.companion().isJavaEnum() ? (this.isJava() && this.isModule() ? (SymbolKind)triple2SK.apply(new Tuple3("Java module", "class", "JMOD")) : (this.isJava() && this.isModuleClass() ? (SymbolKind)triple2SK.apply(new Tuple3("Java module class", "class", "JMODC")) : (this.isModule() ? (SymbolKind)triple2SK.apply(new Tuple3("module", "object", "MOD")) : (this.isModuleClass() ? (SymbolKind)triple2SK.apply(new Tuple3("module class", "object", "MODC")) : (this.isAccessor() && !this.hasFlag(2151677952L) ? (SymbolKind)triple2SK.apply(new Tuple3("setter", "variable", "SET")) : (this.isAccessor() && !this.hasFlag(2147483648L) ? (SymbolKind)triple2SK.apply(new Tuple3("getter", "value", "GET")) : (this.isTerm() && this.hasFlag(2147483648L) ? (SymbolKind)triple2SK.apply(new Tuple3("lazy value", "lazy value", "LAZ")) : (this.isVariable() ? (SymbolKind)triple2SK.apply(new Tuple3("field", "variable", "VAR")) : (this.isTrait() ? (SymbolKind)triple2SK.apply(new Tuple3("trait", "trait", "TRT")) : (this.isClass() ? (SymbolKind)triple2SK.apply(new Tuple3("class", "class", "CLS")) : (this.isType() ? (SymbolKind)triple2SK.apply(new Tuple3("type", "type", "TPE")) : (this.isClassConstructor() && this.owner().hasCompleteInfo() && this.isPrimaryConstructor() ? (SymbolKind)triple2SK.apply(new Tuple3("primary constructor", "constructor", "PCTOR")) : (this.isClassConstructor() ? (SymbolKind)triple2SK.apply(new Tuple3("constructor", "constructor", "CTOR")) : (this.isMethod() ? (SymbolKind)triple2SK.apply(new Tuple3("method", "method", "METH")) : (this.isTerm() ? (SymbolKind)triple2SK.apply(new Tuple3("value", "value", "VAL")) : (SymbolKind)triple2SK.apply(new Tuple3("", "", "???"))))))))))))))))) : (SymbolKind)triple2SK.apply(new Tuple3("Java enumeration", "Java enum", "JENUM"))))))))))));
         return this.isSkolem() ? kind.skolemize() : kind;
      }

      public final String accurateKindString() {
         return this.symbolKind().accurate();
      }

      private String sanitizedKindString() {
         return this.symbolKind().sanitized();
      }

      public String abbreviatedKindString() {
         return this.symbolKind().abbreviation();
      }

      public final String kindString() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var5 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Symbols$Symbol$$$outer().settings();
         MutableSettings var6 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var6;
         boolean var7 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         return var7 ? this.accurateKindString() : this.sanitizedKindString();
      }

      public boolean hasMeaninglessName() {
         if (!this.isSetterParameter() && !this.isClassConstructor() && !this.isRefinementClass()) {
            Names.Name var10000 = this.name();
            Names.Name var1 = this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().PACKAGE();
            if (var10000 == null) {
               if (var1 == null) {
                  return true;
               }
            } else if (var10000.equals(var1)) {
               return true;
            }

            return false;
         } else {
            return true;
         }
      }

      public String nameString() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var7 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Symbols$Symbol$$$outer().settings();
         MutableSettings var8 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var8;
         boolean var9 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         String name_s = var9 ? String.valueOf(this.unexpandedName()) : this.unexpandedName().dropLocal().decode();
         String kind_s = BoxesRunTime.unboxToBoolean(this.scala$reflect$internal$Symbols$Symbol$$$outer().settings().Yshowsymkinds().value()) ? (new StringBuilder(1)).append("#").append(this.abbreviatedKindString()).toString() : "";
         return (new StringBuilder(0)).append(name_s).append(this.idString()).append(kind_s).toString();
      }

      public String fullNameString() {
         return this.recur$1(this);
      }

      public final String idString() {
         String id_s = BoxesRunTime.unboxToBoolean(this.scala$reflect$internal$Symbols$Symbol$$$outer().settings().uniqid().value()) ? (new StringBuilder(1)).append("#").append(this.id()).toString() : "";
         String owner_s = BoxesRunTime.unboxToBoolean(this.scala$reflect$internal$Symbols$Symbol$$$outer().settings().Yshowsymowners().value()) ? (new StringBuilder(1)).append("@").append(this.owner().id()).toString() : "";
         return (new StringBuilder(0)).append(id_s).append(owner_s).toString();
      }

      public String toString() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var10 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Symbols$Symbol$$$outer().settings();
         MutableSettings var11 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var11;
         boolean var12 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         boolean simplifyNames = !var12;
         if (this.isPackageObjectOrClass() && simplifyNames) {
            return (new StringBuilder(15)).append("package object ").append(this.owner().decodedName()).toString();
         } else {
            String kind = this.kindString();
            String var13;
            if (this.hasMeaninglessName()) {
               var13 = (new StringBuilder(0)).append(this.owner().decodedName()).append(this.idString()).toString();
            } else {
               label39: {
                  label38: {
                     if (simplifyNames) {
                        String var4 = "variable";
                        if (kind != null) {
                           if (kind.equals(var4)) {
                              break label38;
                           }
                        }

                        String var5 = "value";
                        if (kind != null) {
                           if (kind.equals(var5)) {
                              break label38;
                           }
                        }
                     }

                     var13 = this.nameString();
                     break label39;
                  }

                  var13 = this.unexpandedName().getterName().decode().toString();
               }
            }

            String _name = var13;
            return this.compose(kind, _name);
         }
      }

      public String ownsString() {
         Symbol owns = this.effectiveOwner();
         return owns.isClass() && !owns.isEmptyPrefix() ? String.valueOf(owns) : "";
      }

      public String locationString() {
         String var1 = this.ownsString();
         switch (var1 == null ? 0 : var1.hashCode()) {
            case 0:
               if ("".equals(var1)) {
                  return "";
               }
            default:
               return (new StringBuilder(4)).append(" in ").append(var1).toString();
         }
      }

      public String fullLocationString() {
         return (new StringBuilder(0)).append(this.toString()).append(this.locationString()).toString();
      }

      public String signatureString() {
         return this.hasRawInfo() ? this.infoString(this.rawInfo()) : "<_>";
      }

      public final String infoString(final Types.Type tp) {
         return this.loop$5(tp, false);
      }

      public String infosString() {
         return this.scala$reflect$internal$Symbols$$infos().toString();
      }

      public String debugLocationString() {
         String var2 = this.flagString();
         String var10000;
         switch (var2 == null ? 0 : var2.hashCode()) {
            case 0:
               if ("".equals(var2)) {
                  var10000 = "";
                  break;
               }
            default:
               var10000 = scala.collection.StringOps..MODULE$.contains$extension(var2, ' ') ? (new StringBuilder(3)).append("(").append(var2).append(") ").toString() : (new StringBuilder(1)).append(var2).append(" ").toString();
         }

         String pre = var10000;
         return (new StringBuilder(0)).append(pre).append(this.fullLocationString()).toString();
      }

      private String defStringCompose(final String infoString) {
         return this.compose(this.compose(this.flagString(), this.keyString()), (new StringBuilder(0)).append(this.varianceString()).append(this.nameString()).append(infoString).append(this.flagsExplanationString()).toString());
      }

      public String defString() {
         return this.defStringCompose(this.signatureString());
      }

      public String defStringWithoutImplicit() {
         return this.compose(this.keyString(), (new StringBuilder(0)).append(this.varianceString()).append(this.nameString()).append(this.signatureString()).append(this.flagsExplanationString()).toString());
      }

      public String defStringSeenAs(final Types.Type info) {
         return this.defStringCompose(this.infoString(info));
      }

      private String compose(final String x, final String y) {
         if (x.isEmpty()) {
            return y;
         } else {
            return y.isEmpty() ? x : (new StringBuilder(1)).append(x).append(" ").append(y).toString();
         }
      }

      public boolean isSingletonExistential() {
         StdNames.nme$ var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer().nme();
         Names.Name isSingletonName_name = this.name();
         if (var10000 == null) {
            throw null;
         } else {
            return isSingletonName_name.endsWith(".type");
         }
      }

      public String existentialToString() {
         if (this.isSingletonExistential()) {
            MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var5 = MutableSettings$.MODULE$;
            MutableSettings SettingsOps_settings = this.scala$reflect$internal$Symbols$Symbol$$$outer().settings();
            MutableSettings var6 = SettingsOps_settings;
            SettingsOps_settings = null;
            MutableSettings isDebug$extension_$this = var6;
            boolean var7 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
            isDebug$extension_$this = null;
            if (!var7) {
               return (new StringBuilder(6)).append("val ").append(this.scala$reflect$internal$Symbols$Symbol$$$outer().tpnme().dropSingletonName(this.name())).append(": ").append(this.scala$reflect$internal$Symbols$Symbol$$$outer().dropSingletonType().apply(this.info().upperBound())).toString();
            }
         }

         return this.defString();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$Symbol$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public StdAttachments scala$reflect$internal$StdAttachments$Attachable$$$outer() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer();
      }

      // $FF: synthetic method
      public AnnotationInfos scala$reflect$internal$AnnotationInfos$Annotatable$$$outer() {
         return this.scala$reflect$internal$Symbols$Symbol$$$outer();
      }

      private final String msg$1(final Names.Name n$1) {
         return (new StringBuilder(18)).append("In ").append(this.owner()).append(", renaming ").append(this.name()).append(" -> ").append(n$1).toString();
      }

      // $FF: synthetic method
      public static final Symbol $anonfun$newPackage$1(final Symbol $this) {
         return $this;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$newOverloaded$1(final Symbol x$2) {
         return x$2.hasFlag(17592186044416L);
      }

      // $FF: synthetic method
      public static final TermSymbol $anonfun$newSyntheticValueParams$1(final Symbol $this, final Function0 freshName$1, final Types.Type tp) {
         return $this.newSyntheticValueParam(tp, (Names.TermName)freshName$1.apply());
      }

      // $FF: synthetic method
      public static final TypeSymbol $anonfun$newSyntheticTypeParams$1(final Symbol $this, final int n) {
         return $this.newSyntheticTypeParam((new StringBuilder(1)).append("T").append(n).toString(), 0L);
      }

      private final boolean loop$1(final List tparams) {
         while(!.MODULE$.equals(tparams)) {
            if (tparams instanceof scala.collection.immutable..colon.colon) {
               scala.collection.immutable..colon.colon var2 = (scala.collection.immutable..colon.colon)tparams;
               Symbol x = (Symbol)var2.head();
               List xs = var2.next$access$1();
               if (Variance$.MODULE$.isInvariant$extension(x.variance())) {
                  tparams = xs;
                  continue;
               }

               return false;
            }

            throw new MatchError(tparams);
         }

         return true;
      }

      // $FF: synthetic method
      public static final String $anonfun$initFlags$1(final Symbol $this) {
         return $this.symbolCreationString();
      }

      private static final boolean matches$1(final Symbol sym1, final Symbol sym2) {
         if (sym1 != sym2) {
            if (sym1.hasPackageFlag() && sym2.hasPackageFlag()) {
               Names.Name var10000 = sym1.name();
               Names.Name var2 = sym2.name();
               if (var10000 == null) {
                  if (var2 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var2)) {
                  return false;
               }

               String var4 = sym1.fullNameString();
               String var3 = sym2.fullNameString();
               if (var4 == null) {
                  if (var3 == null) {
                     return true;
                  }
               } else if (var4.equals(var3)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isOmittablePrefix$1(final Symbol skipped$1, final Symbol sym) {
         return matches$1(sym, skipped$1);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isFBounded$1(final Symbol $this, final Types.Type x$3) {
         return x$3.contains($this);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isSerializable$1(final Symbol $this, final Symbol x$4) {
         ClassSymbol var2 = $this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().SerializableClass();
         if (x$4 == null) {
            if (var2 == null) {
               return true;
            }
         } else if (x$4.equals(var2)) {
            return true;
         }

         return false;
      }

      // $FF: synthetic method
      public static final Option $anonfun$deprecationMessage$1(final AnnotationInfos.AnnotationInfo x$5) {
         return x$5.stringArg(0);
      }

      // $FF: synthetic method
      public static final Option $anonfun$deprecationVersion$1(final AnnotationInfos.AnnotationInfo x$6) {
         return x$6.stringArg(1);
      }

      // $FF: synthetic method
      public static final Option $anonfun$deprecationVersion$2(final AnnotationInfos.AnnotationInfo x$7) {
         return x$7.stringArg(0);
      }

      // $FF: synthetic method
      public static final Names.TermName $anonfun$deprecatedParamName$3(final Symbol $this, final String s) {
         return $this.scala$reflect$internal$Symbols$Symbol$$$outer().newTermName(s);
      }

      // $FF: synthetic method
      public static final Option $anonfun$deprecatedParamName$2(final Symbol $this, final AnnotationInfos.AnnotationInfo ann$1) {
         Option var10000 = ann$1.stringArg(0);
         if (var10000 == null) {
            throw null;
         } else {
            Option map_this = var10000;
            if (map_this.isEmpty()) {
               return scala.None..MODULE$;
            } else {
               String var3 = (String)map_this.get();
               return new Some($anonfun$deprecatedParamName$3($this, var3));
            }
         }
      }

      // $FF: synthetic method
      public static final Some $anonfun$deprecatedParamName$4(final Symbol $this) {
         return new Some($this.scala$reflect$internal$Symbols$Symbol$$$outer().nme().NO_NAME());
      }

      // $FF: synthetic method
      public static final Option $anonfun$deprecatedParamName$1(final Symbol $this, final AnnotationInfos.AnnotationInfo ann) {
         Option var10000 = ann.symbolArg(0);
         if (var10000 == null) {
            throw null;
         } else {
            Option orElse_this = var10000;
            var10000 = orElse_this.isEmpty() ? $anonfun$deprecatedParamName$2($this, ann) : orElse_this;
            Object var4 = null;
            if (var10000 == null) {
               throw null;
            } else {
               Option orElse_this = var10000;
               return (Option)(orElse_this.isEmpty() ? $anonfun$deprecatedParamName$4($this) : orElse_this);
            }
         }
      }

      // $FF: synthetic method
      public static final Option $anonfun$deprecatedParamVersion$1(final AnnotationInfos.AnnotationInfo x$8) {
         return x$8.stringArg(1);
      }

      // $FF: synthetic method
      public static final Option $anonfun$deprecatedInheritanceMessage$1(final AnnotationInfos.AnnotationInfo x$9) {
         return x$9.stringArg(0);
      }

      // $FF: synthetic method
      public static final Option $anonfun$deprecatedInheritanceVersion$1(final AnnotationInfos.AnnotationInfo x$10) {
         return x$10.stringArg(1);
      }

      // $FF: synthetic method
      public static final Option $anonfun$deprecatedOverridingMessage$1(final AnnotationInfos.AnnotationInfo x$11) {
         return x$11.stringArg(0);
      }

      // $FF: synthetic method
      public static final Option $anonfun$deprecatedOverridingVersion$1(final AnnotationInfos.AnnotationInfo x$12) {
         return x$12.stringArg(1);
      }

      // $FF: synthetic method
      public static final Option $anonfun$migrationMessage$1(final AnnotationInfos.AnnotationInfo x$13) {
         return x$13.stringArg(0);
      }

      // $FF: synthetic method
      public static final Option $anonfun$migrationVersion$1(final AnnotationInfos.AnnotationInfo x$14) {
         return x$14.stringArg(1);
      }

      // $FF: synthetic method
      public static final Option $anonfun$elisionLevel$1(final AnnotationInfos.AnnotationInfo x$15) {
         return x$15.intArg(0);
      }

      // $FF: synthetic method
      public static final Option $anonfun$implicitNotFoundMsg$1(final AnnotationInfos.AnnotationInfo x$16) {
         return x$16.stringArg(0);
      }

      // $FF: synthetic method
      public static final Option $anonfun$implicitAmbiguousMsg$1(final AnnotationInfos.AnnotationInfo x$17) {
         return x$17.stringArg(0);
      }

      // $FF: synthetic method
      public static final Option $anonfun$compileTimeOnlyMessage$1(final AnnotationInfos.AnnotationInfo x$18) {
         return x$18.stringArg(0);
      }

      private final boolean checkOverrideIn$1(final Symbol sc, final boolean hasLocalOwner$1) {
         Symbol var10000 = this.overridingSymbol(sc);
         NoSymbol var3 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
         if (var10000 == null) {
            if (var3 != null) {
               return false;
            }
         } else if (!var10000.equals(var3)) {
            return false;
         }

         if (this.isNotOverriddenAt$1(sc, hasLocalOwner$1 || sc.originalOwner().isTerm())) {
            return true;
         } else {
            return false;
         }
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isEffectivelyFinalOrNotOverridden$1(final Symbol $this, final boolean hasLocalOwner$1, final Symbol sc) {
         return $this.checkOverrideIn$1(sc, hasLocalOwner$1);
      }

      private final boolean isNotOverriddenAt$1(final Symbol c, final boolean hasLocalOwner) {
         return c.isClass() && (c.isEffectivelyFinal() || (c.isSealed() || hasLocalOwner) && c.children().forall((sc) -> BoxesRunTime.boxToBoolean($anonfun$isEffectivelyFinalOrNotOverridden$1(this, hasLocalOwner, sc))));
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isDeclaredByOwner$1(final Symbol $this, final Symbol x$19) {
         return $this.alternatives().contains(x$19);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$isPossibleInRefinement$1(final Symbol x$20) {
         return x$20.owner().isRefinementClass();
      }

      private final boolean warnIfSourceLoader$1() {
         Types.Type var1 = this.rawInfo();
         if (var1 instanceof SymbolTable.SymLoader ? ((SymbolTable.SymLoader)var1).fromSource() : false) {
            this.scala$reflect$internal$Symbols$Symbol$$$outer().devWarning(() -> "calling Symbol#exists with sourcefile based symbol loader may give incorrect results.");
         }

         return false;
      }

      private final int searchList$1(final List params, final Types.Type fallback, final int base$1) {
         int idx = params.indexOf(this);
         return idx >= 0 ? idx + base$1 : this.searchIn$1(fallback, base$1 + params.length());
      }

      private final int searchIn$1(final Types.Type tpe, final int base) {
         if (tpe instanceof Types.PolyType) {
            Types.PolyType var3 = (Types.PolyType)tpe;
            List tparams = var3.typeParams();
            Types.Type res = var3.resultType();
            return this.searchList$1(tparams, res, base);
         } else if (tpe instanceof Types.MethodType) {
            Types.MethodType var6 = (Types.MethodType)tpe;
            List params = var6.params();
            Types.Type res = var6.resultType();
            return this.searchList$1(params, res, base);
         } else {
            return -1;
         }
      }

      // $FF: synthetic method
      public static final String $anonfun$owner_$eq$1() {
         return "owner_= is not thread-safe; cannot be run in reflexive code";
      }

      private final void loop$2(final int size, final Symbol sym, final ObjectRef b$1, final char separator$1) {
         Names.Name symName = sym.name();
         if (symName == null) {
            throw null;
         } else {
            int nSize = symName.len() - (symName.endsWith(" ") ? 1 : 0);
            if (!sym.isRoot() && !sym.isRootPackage() && !sym.equals(this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) && !sym.owner().isEffectiveRoot()) {
               this.loop$2(size + nSize + 1, sym.effectiveOwner().enclClass(), b$1, separator$1);
               ((StringBuffer)b$1.elem).append(separator$1);
               symName.appendTo((StringBuffer)((StringBuffer)b$1.elem), 0, nSize);
            } else {
               int capacity = size + nSize;
               b$1.elem = new StringBuffer(capacity);
               symName.appendTo((StringBuffer)((StringBuffer)b$1.elem), 0, nSize);
            }
         }
      }

      private final Nothing abortNoProgress$1() {
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
         StringBuilder var10001 = (new StringBuilder(28)).append("no progress in completing ").append(this).append(": ");
         TypeHistory var10002 = this.scala$reflect$internal$Symbols$$infos();
         if (var10002 == null) {
            throw null;
         } else {
            return var10000.abort(var10001.append(var10002.scala$reflect$internal$Symbols$TypeHistory$$_info()).toString());
         }
      }

      // $FF: synthetic method
      public static final Names.Name $anonfun$completeInfo$1(final Symbol $this) {
         return $this.name();
      }

      // $FF: synthetic method
      public static final Names.Name $anonfun$completeInfo$2(final Symbol $this) {
         return $this.name();
      }

      // $FF: synthetic method
      public static final String $anonfun$info_$eq$1() {
         return "Can't assign a null type";
      }

      // $FF: synthetic method
      public static final Tuple2 $anonfun$updateInfo$1(final Symbol $this, final int pid$1) {
         return new Tuple2.mcII.sp(pid$1, $this.scala$reflect$internal$Symbols$Symbol$$$outer().phase().id());
      }

      // $FF: synthetic method
      public static final String $anonfun$rawInfo$1() {
         return "infos must not be null";
      }

      // $FF: synthetic method
      public static final String $anonfun$adaptInfo$1() {
         return "Must be compiler universe";
      }

      // $FF: synthetic method
      public static final String $anonfun$adaptInfo$2() {
         return "Previous history must be null";
      }

      // $FF: synthetic method
      public static final String $anonfun$hasTypeAt$1() {
         return "Must be compiler universe";
      }

      // $FF: synthetic method
      public static final Object $anonfun$cookJavaRawInfo$1(final Symbol $this, final Symbol alt) {
         alt.setFlag(17592186044416L);
         return alt.isJavaDefined() ? alt.modifyInfo($this.scala$reflect$internal$Symbols$Symbol$$$outer().rawToExistential()) : BoxedUnit.UNIT;
      }

      // $FF: synthetic method
      public static final List $anonfun$unsafeTypeParams$1(final Symbol $this) {
         return $this.rawInfo().typeParams();
      }

      // $FF: synthetic method
      public static final void $anonfun$typeParams$1(final Symbol $this) {
         $this.rawInfo().load($this);
      }

      // $FF: synthetic method
      public static final void $anonfun$typeParams$2(final Symbol $this) {
         $this.rawInfo().load($this);
      }

      private final List completeTypeParams$1() {
         if (this.isMonomorphicType()) {
            return .MODULE$;
         } else {
            SymbolTable var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
            SymbolTable var10001 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
            TypeHistory var10002 = this.scala$reflect$internal$Symbols$$infos();
            if (var10002 == null) {
               throw null;
            } else {
               Phase enteringPhase_ph = var10001.phaseOf(var10002.scala$reflect$internal$Symbols$TypeHistory$$_validFrom());
               if (var10000 == null) {
                  throw null;
               } else {
                  SymbolTable enteringPhase_this = var10000;
                  if (enteringPhase_ph == enteringPhase_this.phase()) {
                     $anonfun$typeParams$1(this);
                  } else {
                     Phase enteringPhase_saved = enteringPhase_this.pushPhase(enteringPhase_ph);

                     try {
                        $anonfun$typeParams$1(this);
                     } finally {
                        enteringPhase_this.popPhase(enteringPhase_saved);
                     }
                  }

                  Object var15 = null;
                  enteringPhase_ph = null;
                  Object var17 = null;
                  if (this.validTo() == 0) {
                     var10000 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
                     var10001 = this.scala$reflect$internal$Symbols$Symbol$$$outer();
                     var10002 = this.scala$reflect$internal$Symbols$$infos();
                     if (var10002 == null) {
                        throw null;
                     }

                     Phase enteringPhase_phx = var10001.phaseOf(var10002.scala$reflect$internal$Symbols$TypeHistory$$_validFrom());
                     if (var10000 == null) {
                        throw null;
                     }

                     SymbolTable enteringPhase_this = var10000;
                     if (enteringPhase_phx == enteringPhase_this.phase()) {
                        $anonfun$typeParams$2(this);
                     } else {
                        Phase enteringPhase_saved = enteringPhase_this.pushPhase(enteringPhase_phx);

                        try {
                           $anonfun$typeParams$2(this);
                        } finally {
                           enteringPhase_this.popPhase(enteringPhase_saved);
                        }
                     }

                     Object var18 = null;
                     enteringPhase_phx = null;
                     Object var20 = null;
                  }

                  return this.rawInfo().typeParams();
               }
            }
         }
      }

      // $FF: synthetic method
      public static final void $anonfun$classBound$2(final Symbol $this, final Types.Type thistp$1, final Types.Type tp$2, final List oldsyms$1, final List newsyms$1, final Symbol sym) {
         $this.scala$reflect$internal$Symbols$Symbol$$$outer().addMember(thistp$1, tp$2, sym.modifyInfo((x$23) -> x$23.substThisAndSym($this, thistp$1, oldsyms$1, newsyms$1)));
      }

      // $FF: synthetic method
      public static final boolean $anonfun$removeAnnotation$1(final Symbol sym$1, final AnnotationInfos.AnnotationInfo x$24) {
         return !x$24.matches(sym$1);
      }

      // $FF: synthetic method
      public static final Types.Type $anonfun$addAnnotation$1(final Types.Type tp$3) {
         return tp$3;
      }

      private static final int baseTypeSeqLength$1(final Symbol sym) {
         return sym.isAbstractType() ? 1 + sym.info().upperBound().baseTypeSeq().length() : sym.info().baseTypeSeq().length();
      }

      // $FF: synthetic method
      public static final List $anonfun$suchThat$1(final Symbol result$1) {
         return result$1.alternatives();
      }

      // $FF: synthetic method
      public static final String $anonfun$cloneSymbol$1() {
         return "cloned symbol cannot have attachments";
      }

      // $FF: synthetic method
      public static final Names.TermName $anonfun$caseFieldAccessors$1(final Symbol p) {
         return p.hasFlag(68719476736L) ? p.unexpandedName().dropLocal() : p.name().dropLocal();
      }

      // $FF: synthetic method
      public static final int $anonfun$caseFieldAccessors$2(final Tuple2 x$25) {
         return x$25._2$mcI$sp();
      }

      // $FF: synthetic method
      public static final Symbol $anonfun$caseFieldAccessors$3(final Tuple2 x$26) {
         return (Symbol)x$26._1();
      }

      public static final boolean scala$reflect$internal$Symbols$Symbol$$nameStartsWithOrigDollar$1(final Names.Name name, final Names.Name prefix) {
         if (name.startsWith((Names.Name)prefix, 0)) {
            int var10000 = name.len();
            if (prefix == null) {
               throw null;
            }

            if (var10000 > prefix.len() + 1 && name.charAt(prefix.len()) == '$') {
               return true;
            }
         }

         return false;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$caseFieldAccessors$4(final int i$1, final Tuple2 x$27) {
         return x$27._2$mcI$sp() != i$1;
      }

      private final List loop$3(final List remainingAccessors, final List foundAccessors, final List remainingNames) {
         while(!.MODULE$.equals(remainingAccessors)) {
            if (!(remainingAccessors instanceof scala.collection.immutable..colon.colon)) {
               throw new MatchError(remainingAccessors);
            }

            scala.collection.immutable..colon.colon var4 = (scala.collection.immutable..colon.colon)remainingAccessors;
            Symbol acc = (Symbol)var4.head();
            List remainingAccessors = var4.next$access$1();
            Option var7 = remainingNames.collectFirst(new Serializable(acc) {
               private static final long serialVersionUID = 0L;
               // $FF: synthetic field
               private final Symbol $outer;
               private final Symbol acc$1;

               public final Object applyOrElse(final Tuple2 x1, final Function1 default) {
                  if (x1 != null) {
                     Names.Name name = (Names.Name)x1._1();
                     int i = x1._2$mcI$sp();
                     Names.Name var10000 = this.acc$1.name();
                     if (var10000 == null) {
                        if (name == null) {
                           return i;
                        }
                     } else if (var10000.equals(name)) {
                        return i;
                     }

                     if (Symbols.Symbol.scala$reflect$internal$Symbols$Symbol$$nameStartsWithOrigDollar$1(this.acc$1.name(), name)) {
                        return i;
                     }
                  }

                  return default.apply(x1);
               }

               public final boolean isDefinedAt(final Tuple2 x1) {
                  if (x1 != null) {
                     Names.Name name = (Names.Name)x1._1();
                     Names.Name var10000 = this.acc$1.name();
                     if (var10000 == null) {
                        if (name == null) {
                           return true;
                        }
                     } else if (var10000.equals(name)) {
                        return true;
                     }

                     if (Symbols.Symbol.scala$reflect$internal$Symbols$Symbol$$nameStartsWithOrigDollar$1(this.acc$1.name(), name)) {
                        return true;
                     }
                  }

                  return false;
               }

               public {
                  if (Symbol.this == null) {
                     throw null;
                  } else {
                     this.$outer = Symbol.this;
                     this.acc$1 = acc$1;
                  }
               }
            });
            if (!(var7 instanceof Some)) {
               throw new MatchError(var7);
            }

            int i = BoxesRunTime.unboxToInt(((Some)var7).value());
            Integer var31 = i;
            Tuple2 var9 = new Tuple2(acc, var31);
            if (foundAccessors == null) {
               throw null;
            }

            scala.collection.immutable..colon.colon var10001 = new scala.collection.immutable..colon.colon(var9, foundAccessors);
            boolean filter_filterCommon_isFlipped = false;
            List filter_filterCommon_noneIn$1_l = remainingNames;

            Object var10002;
            while(true) {
               if (filter_filterCommon_noneIn$1_l.isEmpty()) {
                  var10002 = .MODULE$;
                  break;
               }

               Object filter_filterCommon_noneIn$1_h = filter_filterCommon_noneIn$1_l.head();
               List filter_filterCommon_noneIn$1_t = (List)filter_filterCommon_noneIn$1_l.tail();
               Tuple2 var30 = (Tuple2)filter_filterCommon_noneIn$1_h;
               if ($anonfun$caseFieldAccessors$4(i, var30) != filter_filterCommon_isFlipped) {
                  List filter_filterCommon_noneIn$1_allIn$1_remaining = filter_filterCommon_noneIn$1_t;

                  while(true) {
                     if (filter_filterCommon_noneIn$1_allIn$1_remaining.isEmpty()) {
                        var10002 = filter_filterCommon_noneIn$1_l;
                        break;
                     }

                     Object filter_filterCommon_noneIn$1_allIn$1_x = filter_filterCommon_noneIn$1_allIn$1_remaining.head();
                     var30 = (Tuple2)filter_filterCommon_noneIn$1_allIn$1_x;
                     if ($anonfun$caseFieldAccessors$4(i, var30) == filter_filterCommon_isFlipped) {
                        scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_l.head(), .MODULE$);
                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_l.tail();

                        scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast;
                        for(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess != filter_filterCommon_noneIn$1_allIn$1_remaining; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.tail()) {
                           scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.head(), .MODULE$);
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                        }

                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                        List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next;

                        while(!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.isEmpty()) {
                           Object filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.head();
                           var30 = (Tuple2)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head;
                           if ($anonfun$caseFieldAccessors$4(i, var30) != filter_filterCommon_isFlipped) {
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                           } else {
                              while(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy != filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next) {
                                 scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.head(), .MODULE$);
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.tail();
                              }

                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                           }
                        }

                        if (!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.isEmpty()) {
                           filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy);
                        }

                        var10002 = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead;
                        Object var40 = null;
                        Object var43 = null;
                        Object var46 = null;
                        Object var49 = null;
                        Object var52 = null;
                        Object var55 = null;
                        Object var58 = null;
                        Object var61 = null;
                        break;
                     }

                     filter_filterCommon_noneIn$1_allIn$1_remaining = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                  }

                  Object var36 = null;
                  Object var38 = null;
                  Object var41 = null;
                  Object var44 = null;
                  Object var47 = null;
                  Object var50 = null;
                  Object var53 = null;
                  Object var56 = null;
                  Object var59 = null;
                  Object var62 = null;
                  break;
               }

               filter_filterCommon_noneIn$1_l = filter_filterCommon_noneIn$1_t;
            }

            filter_filterCommon_noneIn$1_l = null;
            Object var34 = null;
            Object var35 = null;
            Object var37 = null;
            Object var39 = null;
            Object var42 = null;
            Object var45 = null;
            Object var48 = null;
            Object var51 = null;
            Object var54 = null;
            Object var57 = null;
            Object var60 = null;
            Object var63 = null;
            List filter_filterCommon_result = (List)var10002;
            Statics.releaseFence();
            var10002 = filter_filterCommon_result;
            filter_filterCommon_result = null;
            remainingNames = (List)var10002;
            foundAccessors = var10001;
            remainingAccessors = remainingAccessors;
         }

         List var10000 = (List)foundAccessors.sortBy((x$25) -> BoxesRunTime.boxToInteger($anonfun$caseFieldAccessors$2(x$25)), scala.math.Ordering.Int..MODULE$);
         if (var10000 == null) {
            throw null;
         } else {
            List map_this = var10000;
            if (map_this == .MODULE$) {
               return .MODULE$;
            } else {
               scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon((Symbol)((Tuple2)map_this.head())._1(), .MODULE$);
               scala.collection.immutable..colon.colon map_t = map_h;

               for(List map_rest = (List)map_this.tail(); map_rest != .MODULE$; map_rest = (List)map_rest.tail()) {
                  scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon((Symbol)((Tuple2)map_rest.head())._1(), .MODULE$);
                  map_t.next_$eq(map_nx);
                  map_t = map_nx;
               }

               Statics.releaseFence();
               return map_h;
            }
         }
      }

      // $FF: synthetic method
      public static final int $anonfun$caseFieldAccessors$5(final Symbol x$28) {
         Names.Name var10000 = x$28.name();
         if (var10000 == null) {
            throw null;
         } else {
            return -var10000.len();
         }
      }

      // $FF: synthetic method
      public static final int $anonfun$caseFieldAccessors$6(final Tuple2 x$29) {
         Names.Name var10000 = (Names.Name)x$29._1();
         if (var10000 == null) {
            throw null;
         } else {
            return -var10000.len();
         }
      }

      // $FF: synthetic method
      public static final boolean $anonfun$caseFieldAccessorsUnsorted$1(final Symbol x$30) {
         return x$30.isCaseAccessorMethod();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$constrParamAccessors$1(final Symbol sym) {
         return !sym.isMethod() && sym.isParamAccessor();
      }

      // $FF: synthetic method
      public static final Symbol $anonfun$accessed$1(final Symbol $this) {
         return $this;
      }

      // $FF: synthetic method
      public static final Types.Type $anonfun$accessed$2(final Symbol $this) {
         return $this.owner().info();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$accessed$3(final Symbol x$31) {
         return !x$31.isAccessor();
      }

      // $FF: synthetic method
      public static final Symbol $anonfun$parentSymbols$1(final Types.Type x$32) {
         return x$32.typeSymbol();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$mixinClasses$1(final Symbol sc$1, final Symbol x$34) {
         return sc$1 != x$34;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$enclosingRootClass$1(final Symbol x$35) {
         return x$35.isRoot();
      }

      // $FF: synthetic method
      public static final Symbol $anonfun$originalEnclosingTopLevelClassOrDummy$1(final Symbol $this) {
         return $this;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$companionClass$1(final Symbol $this, final Symbol d) {
         return d.isClass() && d.isCoDefinedWith($this);
      }

      private final boolean qualifies$1(final Symbol sym, final Types.Type site$1) {
         return !sym.isTerm() || site$1.memberType(this).matches(site$1.memberType(sym));
      }

      // $FF: synthetic method
      public static final boolean $anonfun$matchingSymbolInternal$1(final Symbol $this, final Types.Type site$1, final Symbol sym) {
         return $this.qualifies$1(sym, site$1);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$overriddenSymbol$1(final Symbol x$36) {
         return x$36.isDeferred();
      }

      // $FF: synthetic method
      public static final void $anonfun$allOverriddenSymbols$2(final Builder builder$1, final Symbol x$37) {
         builder$1.$plus$eq(x$37);
      }

      // $FF: synthetic method
      public static final Symbol $anonfun$allOverriddenSymbols$1(final Symbol $this, final Builder builder$1, final Symbol o) {
         Symbol var10000 = $this.overriddenSymbol(o);
         if (var10000 == null) {
            throw null;
         } else {
            Symbol andAlso_this = var10000;
            if (andAlso_this != andAlso_this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) {
               if (builder$1 == null) {
                  throw null;
               }

               builder$1.addOne(andAlso_this);
            }

            return andAlso_this;
         }
      }

      // $FF: synthetic method
      public static final boolean $anonfun$computeIsOverridingSymbol$1(final Symbol $this, final Symbol base) {
         Symbol var10000 = $this.overriddenSymbol(base);
         NoSymbol var2 = $this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
         if (var10000 == null) {
            if (var2 != null) {
               return true;
            }
         } else if (!var10000.equals(var2)) {
            return true;
         }

         return false;
      }

      private final Symbol loop$4(final List bases) {
         List rest;
         for(; !.MODULE$.equals(bases); bases = rest) {
            if (!(bases instanceof scala.collection.immutable..colon.colon)) {
               throw new MatchError(bases);
            }

            scala.collection.immutable..colon.colon var2 = (scala.collection.immutable..colon.colon)bases;
            Symbol base = (Symbol)var2.head();
            rest = var2.next$access$1();
            Symbol sym = this.overriddenSymbol(base);
            NoSymbol var6 = this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
            if (sym == null) {
               if (var6 == null) {
                  continue;
               }
            } else if (sym.equals(var6)) {
               continue;
            }

            return sym;
         }

         return this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
      }

      // $FF: synthetic method
      public static final Symbol $anonfun$extendedOverriddenSymbols$1(final Symbol $this, final Symbol baseClass) {
         return $this.overriddenSymbol(baseClass);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$extendedOverriddenSymbols$2(final Symbol $this, final Symbol x$38) {
         NoSymbol var2 = $this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol();
         if (x$38 == null) {
            if (var2 != null) {
               return true;
            }
         } else if (!x$38.equals(var2)) {
            return true;
         }

         return false;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$superSymbolIn$1(final Symbol $this, final Symbol x$39) {
         Symbol var10000 = $this.owner();
         if (var10000 == null) {
            if (x$39 != null) {
               return true;
            }
         } else if (!var10000.equals(x$39)) {
            return true;
         }

         return false;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$superSymbolIn$2(final Symbol x$40) {
         return !x$40.isDeferred();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$getterIn$1(final Symbol x$41) {
         return x$41.hasAccessorFlag();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$setterIn$1(final Symbol x$42) {
         return x$42.hasAccessorFlag();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$caseModule$1(final Symbol x$43) {
         return x$43.isModule();
      }

      private final String recur$1(final Symbol sym) {
         if (!sym.isRootSymbol() && !sym.equals(this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol())) {
            return sym.owner().isEffectiveRoot() ? sym.nameString() : (new StringBuilder(1)).append(this.recur$1(sym.effectiveOwner().enclClass())).append(".").append(sym.nameString()).toString();
         } else {
            return sym.nameString();
         }
      }

      private final boolean isStructuralThisType$1(final Types.Type tp$4) {
         if (this.owner().isInitialized() && this.owner().isStructuralRefinement()) {
            Symbol var10001 = this.owner();
            if (var10001 == null) {
               throw null;
            }

            Symbol tpe_this = var10001;
            Types.Type var5 = tpe_this.tpe_$times();
            Object var4 = null;
            Types.Type var2 = var5;
            if (tp$4 == null) {
               if (var2 == null) {
                  return true;
               }
            } else if (tp$4.equals(var2)) {
               return true;
            }
         }

         return false;
      }

      private final String postnominalColon$1(final boolean followsParens$1) {
         return !followsParens$1 && this.name().isOperatorName() ? " : " : ": ";
      }

      private final String parents$1(final Types.Type tp$4) {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var6 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Symbols$Symbol$$$outer().settings();
         MutableSettings var7 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var7;
         boolean var8 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         return var8 ? this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().parentsString(tp$4.parents()) : this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().briefParentsString(tp$4.parents());
      }

      private final String typeRest$1(final Types.Type tp$4) {
         if (this.isClass()) {
            return (new StringBuilder(9)).append(" extends ").append(this.parents$1(tp$4)).toString();
         } else if (this.isAliasType()) {
            return (new StringBuilder(3)).append(" = ").append(tp$4.resultType()).toString();
         } else {
            Types.Type var2 = tp$4.resultType();
            return var2 instanceof Types.TypeBounds ? String.valueOf((Types.TypeBounds)var2) : (new StringBuilder(4)).append(" <: ").append(var2).toString();
         }
      }

      private final String loop$5(final Types.Type tp, final boolean followsParens) {
         while(!this.isType()) {
            if (this.isModule()) {
               return "";
            }

            if (tp instanceof Types.PolyType) {
               Types.Type res = ((Types.PolyType)tp).resultType();
               return (new StringBuilder(0)).append(this.scala$reflect$internal$Symbols$Symbol$$$outer().typeParamsString(tp)).append(this.loop$5(res, true)).toString();
            }

            if (!(tp instanceof Types.NullaryMethodType)) {
               if (tp instanceof Types.MethodType) {
                  Types.Type res = ((Types.MethodType)tp).resultType();
                  return (new StringBuilder(0)).append(this.scala$reflect$internal$Symbols$Symbol$$$outer().definitions().valueParamsString(tp)).append(this.loop$5(res, true)).toString();
               }

               if (this.isStructuralThisType$1(tp)) {
                  return (new StringBuilder(0)).append(this.postnominalColon$1(followsParens)).append(this.owner().name()).toString();
               }

               return (new StringBuilder(0)).append(this.postnominalColon$1(followsParens)).append(tp).toString();
            }

            Types.Type var10000 = ((Types.NullaryMethodType)tp).resultType();
            followsParens = false;
            tp = var10000;
         }

         return (new StringBuilder(0)).append(this.scala$reflect$internal$Symbols$Symbol$$$outer().typeParamsString(tp)).append(this.typeRest$1(tp)).toString();
      }

      public Symbol(final Symbol initOwner, final Position initPos, final Names.Name initName) {
         this.initName = initName;
         StdAttachments.Attachable.$init$(this);
         this._rawname = initName;
         if (!Symbols.this.isCompilerUniverse() && !(this instanceof SynchronizedSymbols.SynchronizedSymbol) && !this.isAprioriThreadsafe()) {
            throw new AssertionError((new StringBuilder(57)).append("unsafe symbol ").append(initName).append(" (child of ").append(initOwner).append(") in runtime reflection universe").toString());
         } else {
            this._rawowner = initOwner == null ? this : initOwner;
            this.rawatt_$eq(initPos);
            this.id = Symbols.this.nextId();
            this._validTo = 0;
            if (Symbols.this.traceSymbolActivity()) {
               SymbolTable.traceSymbols$ var10000 = Symbols.this.traceSymbols();
               if (var10000 == null) {
                  throw null;
               }

               TraceSymbolActivity.recordNewSymbol$(var10000, this);
            }

            this.javaBinaryNameStringCache = null;
            this.scala$reflect$internal$Symbols$$infos = null;
            this._annotations = .MODULE$;
            this.isOverridingSymbolCache = 0;
         }
      }

      // $FF: synthetic method
      public static final Object $anonfun$newOverloaded$1$adapted(final Symbol x$2) {
         return BoxesRunTime.boxToBoolean($anonfun$newOverloaded$1(x$2));
      }

      // $FF: synthetic method
      public static final TypeSymbol $anonfun$newSyntheticTypeParams$1$adapted(final Symbol $this, final Object n) {
         return $anonfun$newSyntheticTypeParams$1($this, BoxesRunTime.unboxToInt(n));
      }

      // $FF: synthetic method
      public static final Object $anonfun$isSerializable$1$adapted(final Symbol $this, final Symbol x$4) {
         return BoxesRunTime.boxToBoolean($anonfun$isSerializable$1($this, x$4));
      }

      // $FF: synthetic method
      public static final Object $anonfun$isDeclaredByOwner$1$adapted(final Symbol $this, final Symbol x$19) {
         return BoxesRunTime.boxToBoolean($anonfun$isDeclaredByOwner$1($this, x$19));
      }

      // $FF: synthetic method
      public static final Object $anonfun$isPossibleInRefinement$1$adapted(final Symbol x$20) {
         return BoxesRunTime.boxToBoolean($anonfun$isPossibleInRefinement$1(x$20));
      }

      // $FF: synthetic method
      public static final Object $anonfun$classBound$2$adapted(final Symbol $this, final Types.Type thistp$1, final Types.Type tp$2, final List oldsyms$1, final List newsyms$1, final Symbol sym) {
         $anonfun$classBound$2($this, thistp$1, tp$2, oldsyms$1, newsyms$1, sym);
         return BoxedUnit.UNIT;
      }

      // $FF: synthetic method
      public static final Object $anonfun$caseFieldAccessorsUnsorted$1$adapted(final Symbol x$30) {
         return BoxesRunTime.boxToBoolean($anonfun$caseFieldAccessorsUnsorted$1(x$30));
      }

      // $FF: synthetic method
      public static final Object $anonfun$constrParamAccessors$1$adapted(final Symbol sym) {
         return BoxesRunTime.boxToBoolean($anonfun$constrParamAccessors$1(sym));
      }

      // $FF: synthetic method
      public static final Object $anonfun$mixinClasses$1$adapted(final Symbol sc$1, final Symbol x$34) {
         return BoxesRunTime.boxToBoolean($anonfun$mixinClasses$1(sc$1, x$34));
      }

      // $FF: synthetic method
      public static final Object $anonfun$enclosingRootClass$1$adapted(final Symbol x$35) {
         return BoxesRunTime.boxToBoolean($anonfun$enclosingRootClass$1(x$35));
      }

      // $FF: synthetic method
      public static final Object $anonfun$computeIsOverridingSymbol$1$adapted(final Symbol $this, final Symbol base) {
         return BoxesRunTime.boxToBoolean($anonfun$computeIsOverridingSymbol$1($this, base));
      }

      // $FF: synthetic method
      public static final Object $anonfun$extendedOverriddenSymbols$2$adapted(final Symbol $this, final Symbol x$38) {
         return BoxesRunTime.boxToBoolean($anonfun$extendedOverriddenSymbols$2($this, x$38));
      }

      // $FF: synthetic method
      public static final Object $anonfun$superSymbolIn$1$adapted(final Symbol $this, final Symbol x$39) {
         return BoxesRunTime.boxToBoolean($anonfun$superSymbolIn$1($this, x$39));
      }

      // $FF: synthetic method
      public static final Object $anonfun$caseFieldAccessors$4$adapted(final int i$1, final Tuple2 x$27) {
         return BoxesRunTime.boxToBoolean($anonfun$caseFieldAccessors$4(i$1, x$27));
      }

      // $FF: synthetic method
      public static final Object $anonfun$allOverriddenSymbols$2$adapted(final Builder builder$1, final Symbol x$37) {
         $anonfun$allOverriddenSymbols$2(builder$1, x$37);
         return BoxedUnit.UNIT;
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class TermSymbol extends Symbol implements scala.reflect.api.Symbols.TermSymbolApi {
      private Symbol _referenced = Symbols.this.NoSymbol();

      public final boolean isTerm() {
         return scala.reflect.api.Symbols.TermSymbolApi.isTerm$(this);
      }

      public final scala.reflect.api.Symbols.TermSymbolApi asTerm() {
         return scala.reflect.api.Symbols.TermSymbolApi.asTerm$(this);
      }

      public boolean isOverloadedMethod() {
         return scala.reflect.api.Symbols.TermSymbolApi.isOverloadedMethod$(this);
      }

      public void name_$eq(final Names.Name name) {
         label14: {
            Names.Name var2 = ((Symbol)this)._rawname();
            if (name == null) {
               if (var2 != null) {
                  break label14;
               }
            } else if (!name.equals(var2)) {
               break label14;
            }

            return;
         }

         super.name_$eq(name);
         this.changeNameInOwners(name);
         this._rawname_$eq(name.toTermName());
      }

      public final Names.TermName asNameType(final Names.Name n) {
         return n.toTermName();
      }

      public boolean isValue() {
         return !this.isModule() || !this.hasFlag(1064960L);
      }

      public boolean isVariable() {
         return this.isMutable() && !this.isMethod();
      }

      public boolean isTermMacro() {
         return this.hasFlag(32768L);
      }

      public boolean isAnnotationMacro() {
         if (this.hasFlag(32768L)) {
            Names.Name var10000 = this.name();
            Names.TermName var1 = this.scala$reflect$internal$Symbols$TermSymbol$$$outer().nme().macroTransform();
            if (var10000 == null) {
               if (var1 != null) {
                  return false;
               }
            } else if (!var10000.equals(var1)) {
               return false;
            }

            if (this.owner().isClass() && this.owner().hasFlag(32768L)) {
               return true;
            }
         }

         return false;
      }

      public boolean isCapturedVariable() {
         return this.hasAllFlags(69632L) && !this.hasFlag(64L);
      }

      public Symbol companionSymbol() {
         return this.companionClass();
      }

      public Symbol moduleClass() {
         return (Symbol)(this.isModule() ? this.referenced() : this.scala$reflect$internal$Symbols$TermSymbol$$$outer().NoSymbol());
      }

      public boolean isBridge() {
         return this.hasFlag(67108864L);
      }

      public boolean isEarlyInitialized() {
         return this.hasFlag(137438953472L);
      }

      public boolean isMethod() {
         return this.hasFlag(64L);
      }

      public boolean isModule() {
         return this.hasFlag(256L);
      }

      public boolean isOverloaded() {
         return this.hasFlag(8589934592L);
      }

      public boolean isValueParameter() {
         return this.hasFlag(8192L);
      }

      public boolean isSetterParameter() {
         return this.isValueParameter() && this.owner().isSetter();
      }

      public boolean isDefaultGetter() {
         return this.name().containsName(this.scala$reflect$internal$Symbols$TermSymbol$$$outer().nme().DEFAULT_GETTER_STRING());
      }

      public boolean isAccessor() {
         return this.hasFlag(134217728L);
      }

      public boolean isGetter() {
         return this.isAccessor() && !this.scala$reflect$internal$Symbols$TermSymbol$$$outer().nme().isSetterName(this.name());
      }

      public boolean isSetter() {
         return this.isAccessor() && this.scala$reflect$internal$Symbols$TermSymbol$$$outer().nme().isSetterName(this.name());
      }

      public boolean isLocalDummy() {
         return this.scala$reflect$internal$Symbols$TermSymbol$$$outer().nme().isLocalDummyName(this.name());
      }

      public boolean isClassConstructor() {
         Names.Name var10000 = ((Symbol)this)._rawname();
         Names.TermName var1 = this.scala$reflect$internal$Symbols$TermSymbol$$$outer().nme().CONSTRUCTOR();
         if (var10000 == null) {
            if (var1 == null) {
               return true;
            }
         } else if (var10000.equals(var1)) {
            return true;
         }

         return false;
      }

      public boolean isMixinConstructor() {
         Names.Name var10000 = ((Symbol)this)._rawname();
         Names.TermName var1 = this.scala$reflect$internal$Symbols$TermSymbol$$$outer().nme().MIXIN_CONSTRUCTOR();
         if (var10000 == null) {
            if (var1 == null) {
               return true;
            }
         } else if (var10000.equals(var1)) {
            return true;
         }

         return false;
      }

      public boolean isConstructor() {
         return this.isClassConstructor() || this.isMixinConstructor();
      }

      public boolean isPackageObject() {
         if (this.isModule()) {
            Names.Name var10000 = ((Symbol)this)._rawname();
            Names.Name var1 = this.scala$reflect$internal$Symbols$TermSymbol$$$outer().nme().PACKAGE();
            if (var10000 == null) {
               if (var1 == null) {
                  return true;
               }
            } else if (var10000.equals(var1)) {
               return true;
            }
         }

         return false;
      }

      public boolean isExistentiallyBound() {
         return this.hasFlag(34359738368L);
      }

      public String resolveOverloadedFlag(final long flag) {
         if (33554432L == flag) {
            return "<defaultparam>";
         } else if (34359738368L == flag) {
            return "<mixedin>";
         } else if (131072L == flag) {
            return "<label>";
         } else if (65536L == flag) {
            return this.isValueParameter() ? "<bynameparam>" : "<captured>";
         } else {
            return super.resolveOverloadedFlag(flag);
         }
      }

      public Symbol referenced() {
         return this._referenced;
      }

      public void referenced_$eq(final Symbol x) {
         this._referenced = x;
      }

      public Types.TypeBounds existentialBound() {
         return this.scala$reflect$internal$Symbols$TermSymbol$$$outer().singletonBounds(((Symbol)this).tpe_$times());
      }

      public TermSymbol cloneSymbolImpl(final Symbol owner, final long newFlags) {
         return owner.newTermSymbol((Names.TermName)this.name(), this.pos(), newFlags).copyAttrsFrom(this);
      }

      public TermSymbol copyAttrsFrom(final TermSymbol original) {
         this.referenced_$eq(original.referenced());
         return this;
      }

      public Symbol alias() {
         return (Symbol)(this.hasFlag(1134676672512L) ? ((TermSymbol)this.initialize()).referenced() : this.scala$reflect$internal$Symbols$TermSymbol$$$outer().NoSymbol());
      }

      public TermSymbol setAlias(final Symbol alias) {
         SymbolTable var10000;
         boolean var10001;
         label46: {
            label45: {
               var10000 = this.scala$reflect$internal$Symbols$TermSymbol$$$outer();
               NoSymbol var2 = this.scala$reflect$internal$Symbols$TermSymbol$$$outer().NoSymbol();
               if (alias == null) {
                  if (var2 != null) {
                     break label45;
                  }
               } else if (!alias.equals(var2)) {
                  break label45;
               }

               var10001 = false;
               break label46;
            }

            var10001 = true;
         }

         boolean assert_assertion = var10001;
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(this);
            } else {
               assert_this = null;
               var10000 = this.scala$reflect$internal$Symbols$TermSymbol$$$outer();
               boolean assert_assertionx = !alias.isOverloaded();
               if (var10000 == null) {
                  throw null;
               } else {
                  SymbolTable assert_this = var10000;
                  if (!assert_assertionx) {
                     throw assert_this.throwAssertionError(alias);
                  } else {
                     assert_this = null;
                     var10000 = this.scala$reflect$internal$Symbols$TermSymbol$$$outer();
                     boolean assert_assertionxx = this.hasFlag(1134676672512L);
                     if (var10000 == null) {
                        throw null;
                     } else {
                        SymbolTable assert_this = var10000;
                        if (!assert_assertionxx) {
                           throw assert_this.throwAssertionError(this);
                        } else {
                           assert_this = null;
                           this.referenced_$eq(alias);
                           return this;
                        }
                     }
                  }
               }
            }
         }
      }

      public Symbol outerSource() {
         return (Symbol)(this.unexpandedName().endsWith((Names.Name)this.scala$reflect$internal$Symbols$TermSymbol$$$outer().nme().OUTER()) ? ((TermSymbol)this.initialize()).referenced() : this.scala$reflect$internal$Symbols$TermSymbol$$$outer().NoSymbol());
      }

      public TermSymbol setModuleClass(final Symbol clazz) {
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$TermSymbol$$$outer();
         boolean assert_assertion = this.isModule();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(this);
            } else {
               assert_this = null;
               this.referenced_$eq(clazz);
               return this;
            }
         }
      }

      public void expandName(final Symbol base) {
         if (!this.hasFlag(68719476736L)) {
            this.setFlag(68719476736L);
            if (this.hasAccessorFlag() && !this.isDeferred()) {
               this.accessed().expandName(base);
            }

            StdNames.nme$ var10001 = this.scala$reflect$internal$Symbols$TermSymbol$$$outer().nme();
            Names.TermName var10002 = (Names.TermName)this.name();
            if (var10002 == null) {
               throw null;
            } else {
               this.name_$eq(var10001.expandedName(var10002, base));
            }
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$TermSymbol$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public scala.reflect.api.Symbols scala$reflect$api$Symbols$TermSymbolApi$$$outer() {
         return this.scala$reflect$internal$Symbols$TermSymbol$$$outer();
      }

      // $FF: synthetic method
      public static final TermSymbol $anonfun$setAlias$1(final TermSymbol $this) {
         return $this;
      }

      // $FF: synthetic method
      public static final Symbol $anonfun$setAlias$2(final Symbol alias$1) {
         return alias$1;
      }

      // $FF: synthetic method
      public static final TermSymbol $anonfun$setAlias$3(final TermSymbol $this) {
         return $this;
      }

      // $FF: synthetic method
      public static final TermSymbol $anonfun$setModuleClass$1(final TermSymbol $this) {
         return $this;
      }

      public TermSymbol(final Symbol initOwner, final Position initPos, final Names.TermName initName) {
         super(initOwner, initPos, initName);
         this.privateWithin_$eq(Symbols.this.NoSymbol());
      }
   }

   public class ModuleSymbol extends TermSymbol implements scala.reflect.api.Symbols.ModuleSymbolApi {
      private Names.TermName flatname;

      public final boolean isModule() {
         return scala.reflect.api.Symbols.ModuleSymbolApi.isModule$(this);
      }

      public final scala.reflect.api.Symbols.ModuleSymbolApi asModule() {
         return scala.reflect.api.Symbols.ModuleSymbolApi.asModule$(this);
      }

      public AbstractFile associatedFile() {
         return this.moduleClass().associatedFile();
      }

      public void associatedFile_$eq(final AbstractFile f) {
         this.moduleClass().associatedFile_$eq(f);
      }

      public Symbol moduleClass() {
         return this.referenced();
      }

      public final Symbol skipPackageObject() {
         return (Symbol)(this.isPackageObject() ? this.owner() : this);
      }

      public Symbol owner() {
         return !this.isMethod() && this.needsFlatClasses() ? this.rawowner().owner() : this.rawowner();
      }

      public Names.TermName flattenedName() {
         if (this.flatname == null) {
            this.flatname = (Names.TermName)this.scala$reflect$internal$Symbols$ModuleSymbol$$$outer().nme().flattenedName(this.rawowner(), ((Symbol)this)._rawname());
         }

         return this.flatname;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$ModuleSymbol$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public scala.reflect.api.Symbols scala$reflect$api$Symbols$ModuleSymbolApi$$$outer() {
         return this.scala$reflect$internal$Symbols$ModuleSymbol$$$outer();
      }

      public ModuleSymbol(final Symbol initOwner, final Position initPos, final Names.TermName initName) {
         super(initOwner, initPos, initName);
      }
   }

   public class MethodSymbol extends TermSymbol implements scala.reflect.api.Symbols.MethodSymbolApi {
      private int mtpeRunId = 0;
      private Types.Type mtpePre;
      private Types.Type mtpeResult;
      private Types.Type mtpeInfo;

      public final boolean isMethod() {
         return scala.reflect.api.Symbols.MethodSymbolApi.isMethod$(this);
      }

      public final scala.reflect.api.Symbols.MethodSymbolApi asMethod() {
         return scala.reflect.api.Symbols.MethodSymbolApi.asMethod$(this);
      }

      public boolean isLabel() {
         return this.hasFlag(131072L);
      }

      public boolean isVarargsMethod() {
         return this.hasFlag(8796093022208L);
      }

      public boolean isLiftedMethod() {
         return this.hasFlag(17179869184L);
      }

      public boolean isSourceMethod() {
         return !this.hasStableFlag();
      }

      public boolean isCaseAccessorMethod() {
         return this.isCaseAccessor();
      }

      public Types.Type typeAsMemberOf(final Types.Type pre) {
         if (this.scala$reflect$internal$Symbols$MethodSymbol$$$outer().isCompilerUniverse() && !this.scala$reflect$internal$Symbols$MethodSymbol$$$outer().isPastTyper() && this.scala$reflect$internal$Symbols$MethodSymbol$$$outer().lockedCount() <= 0) {
            if (this.mtpeRunId == this.scala$reflect$internal$Symbols$MethodSymbol$$$outer().currentRunId() && this.mtpePre == pre && this.mtpeInfo == this.info()) {
               return this.mtpeResult;
            } else {
               Types.Type res = pre.computeMemberType(this);
               this.mtpeRunId = this.scala$reflect$internal$Symbols$MethodSymbol$$$outer().currentRunId();
               this.mtpePre = pre;
               this.mtpeInfo = this.info();
               this.mtpeResult = res;
               return res;
            }
         } else {
            return pre.computeMemberType(this);
         }
      }

      public boolean isVarargs() {
         Definitions.definitions$ var10000 = this.scala$reflect$internal$Symbols$MethodSymbol$$$outer().definitions();
         List var10001 = this.paramss();
         scala..eq.colon.eq flatten_toIterableOnce = scala..less.colon.less..MODULE$.refl();
         if (var10001 == null) {
            throw null;
         } else {
            Object var3 = StrictOptimizedIterableOps.flatten$(var10001, flatten_toIterableOnce);
            Object var2 = null;
            return var10000.isVarArgsList((scala.collection.Seq)var3);
         }
      }

      public Types.Type returnType() {
         return this.scala$reflect$internal$Symbols$MethodSymbol$$$outer().definitions().finalResultType(this.info());
      }

      public List exceptions() {
         Types.Type var1 = this.rawInfo();
         if (var1 instanceof Types.LazyType) {
            Types.LazyType var2 = (Types.LazyType)var1;
            if (this.isJava()) {
               return var2.javaThrownExceptions();
            }
         }

         return (List)this.annotations().withFilter((check$ifrefutable$1) -> BoxesRunTime.boxToBoolean($anonfun$exceptions$1(this, check$ifrefutable$1))).map((x$49) -> {
            if (x$49 != null) {
               Option var2 = this.scala$reflect$internal$Symbols$MethodSymbol$$$outer().ThrownException().unapply(x$49);
               if (!var2.isEmpty()) {
                  return ((Types.Type)var2.get()).typeSymbol();
               }
            }

            throw new MatchError(x$49);
         });
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$MethodSymbol$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public scala.reflect.api.Symbols scala$reflect$api$Symbols$MethodSymbolApi$$$outer() {
         return this.scala$reflect$internal$Symbols$MethodSymbol$$$outer();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$exceptions$1(final MethodSymbol $this, final AnnotationInfos.AnnotationInfo check$ifrefutable$1) {
         return check$ifrefutable$1 != null && !$this.scala$reflect$internal$Symbols$MethodSymbol$$$outer().ThrownException().unapply(check$ifrefutable$1).isEmpty();
      }

      public MethodSymbol(final Symbol initOwner, final Position initPos, final Names.TermName initName) {
         super(initOwner, initPos, initName);
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class AliasTypeSymbol extends TypeSymbol {
      public int variance() {
         if (this.typeParams().nonEmpty()) {
            return Variance$.MODULE$.Invariant();
         } else {
            return this.isLocalToThis() ? Variance$.MODULE$.Bivariant() : this.info().typeSymbol().variance();
         }
      }

      public boolean isContravariant() {
         return Variance$.MODULE$.isContravariant$extension(this.variance());
      }

      public boolean isCovariant() {
         return Variance$.MODULE$.isCovariant$extension(this.variance());
      }

      public final boolean isAliasType() {
         return true;
      }

      public TypeSymbol cloneSymbolImpl(final Symbol owner, final long newFlags) {
         return owner.newNonClassSymbol((Names.TypeName)this.name(), this.pos(), newFlags);
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$AliasTypeSymbol$$$outer() {
         return this.$outer;
      }

      public AliasTypeSymbol(final Symbol initOwner, final Position initPos, final Names.TypeName initName) {
         super(initOwner, initPos, initName);
      }
   }

   public class AbstractTypeSymbol extends TypeSymbol {
      public final boolean isAbstractType() {
         return true;
      }

      public Types.Type existentialBound() {
         return this.info();
      }

      public TypeSymbol cloneSymbolImpl(final Symbol owner, final long newFlags) {
         return owner.newNonClassSymbol((Names.TypeName)this.name(), this.pos(), newFlags);
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$AbstractTypeSymbol$$$outer() {
         return this.$outer;
      }

      public AbstractTypeSymbol(final Symbol initOwner, final Position initPos, final Names.TypeName initName) {
         super(initOwner, initPos, initName);
      }
   }

   public abstract class TypeSymbol extends Symbol implements scala.reflect.api.Symbols.TypeSymbolApi {
      private Types.Type tyconCache;
      private int tyconRunId;
      private Types.Type tpeCache;
      private int tpePeriod;

      public final boolean isType() {
         return scala.reflect.api.Symbols.TypeSymbolApi.isType$(this);
      }

      public final scala.reflect.api.Symbols.TypeSymbolApi asType() {
         return scala.reflect.api.Symbols.TypeSymbolApi.asType$(this);
      }

      public final Names.TypeName asNameType(final Names.Name n) {
         return n.toTypeName();
      }

      public boolean isNonClassType() {
         return true;
      }

      public String resolveOverloadedFlag(final long flag) {
         if (33554432L == flag) {
            return "<trait>";
         } else if (34359738368L == flag) {
            return "<existential>";
         } else if (65536L == flag) {
            return "<covariant>";
         } else {
            return 131072L == flag ? "<contravariant>" : super.resolveOverloadedFlag(flag);
         }
      }

      public boolean isAbstractType() {
         return this.hasFlag(16L);
      }

      public boolean isContravariant() {
         return this.hasFlag(131072L);
      }

      public boolean isCovariant() {
         return this.hasFlag(65536L);
      }

      public boolean isExistentiallyBound() {
         return this.hasFlag(34359738368L);
      }

      public boolean isTypeParameter() {
         return this.isTypeParameterOrSkolem() && !this.isSkolem();
      }

      public boolean isTypeParameterOrSkolem() {
         return this.hasFlag(8192L);
      }

      public Types.Type existentialBound() {
         throw this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().abort((new StringBuilder(18)).append("unexpected type: ").append(this.getClass()).append(" ").append(this.debugLocationString()).toString());
      }

      public void name_$eq(final Names.Name name) {
         label14: {
            Names.Name var2 = ((Symbol)this)._rawname();
            if (name == null) {
               if (var2 != null) {
                  break label14;
               }
            } else if (!name.equals(var2)) {
               break label14;
            }

            return;
         }

         super.name_$eq(name);
         this.changeNameInOwners(name);
         this._rawname_$eq(name.toTypeName());
      }

      private Types.Type newPrefix() {
         return (Types.Type)(this.hasFlag(34359746560L) ? this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().NoPrefix() : this.owner().thisType());
      }

      private Types.Type newTypeRef(final List targs) {
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$TypeSymbol$$$outer();
         Types.Type typeRef_pre = this.newPrefix();
         if (var10000 == null) {
            throw null;
         } else {
            return Types.typeRef$(var10000, typeRef_pre, this, targs);
         }
      }

      public Types.Type tpe_$times() {
         this.maybeUpdateTypeCache();
         return this.tpeCache;
      }

      public Types.Type typeConstructor() {
         if (this.tyconCacheNeedsUpdate()) {
            this.setTyconCache(this.newTypeRef(.MODULE$));
         }

         return this.tyconCache;
      }

      public Types.Type tpeHK() {
         return this.typeConstructor();
      }

      private boolean tyconCacheNeedsUpdate() {
         return this.tyconCache == null || this.tyconRunId != this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().currentRunId();
      }

      private void setTyconCache(final Types.Type tycon) {
         this.tyconCache = tycon;
         this.tyconRunId = this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().currentRunId();
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$TypeSymbol$$$outer();
         boolean assert_assertion = this.tyconCache != null;
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable assert_this = var10000;
            if (!assert_assertion) {
               throw assert_this.throwAssertionError(this);
            }
         }
      }

      private void maybeUpdateTypeCache() {
         if (this.tpePeriod != this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().currentPeriod()) {
            if (this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().isValid(this.tpePeriod)) {
               this.tpePeriod = this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().currentPeriod();
            } else {
               this.updateTypeCache();
            }
         }
      }

      private void updateTypeCache() {
         if (this.tpeCache == this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().NoType()) {
            throw this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().new CyclicReference(this, this.typeConstructor(), this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().CyclicReference().apply$default$3());
         } else {
            if (this.isInitialized()) {
               this.tpePeriod = this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().currentPeriod();
            }

            this.tpeCache = this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().NoType();
            boolean noTypeParams = this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().phase().erasedTypes() && !this.equals(this.scala$reflect$internal$Symbols$TypeSymbol$$$outer().definitions().ArrayClass()) || this.unsafeTypeParams().isEmpty();
            Object var10002;
            if (noTypeParams) {
               var10002 = .MODULE$;
            } else {
               List var12 = this.unsafeTypeParams();
               if (var12 == null) {
                  throw null;
               }

               List map_this = var12;
               if (map_this == .MODULE$) {
                  var10002 = .MODULE$;
               } else {
                  scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon(((Symbol)map_this.head()).typeConstructor(), .MODULE$);
                  scala.collection.immutable..colon.colon map_t = map_h;

                  for(List map_rest = (List)map_this.tail(); map_rest != .MODULE$; map_rest = (List)map_rest.tail()) {
                     scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon(((Symbol)map_rest.head()).typeConstructor(), .MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var10002 = map_h;
               }

               Object var7 = null;
               Object var8 = null;
               Object var9 = null;
               Object var10 = null;
               Object var11 = null;
            }

            this.tpeCache = this.newTypeRef((List)var10002);
            if (noTypeParams && this.tyconCacheNeedsUpdate()) {
               this.setTyconCache(this.tpeCache);
            }
         }
      }

      public void info_$eq(final Types.Type tp) {
         this.tpePeriod = 0;
         this.tyconCache = null;
         super.info_$eq(tp);
      }

      public final boolean isNonBottomSubClass(final Symbol that) {
         if (this != that && !((Symbol)this).hasFlag(4294967296L)) {
            if (that == null) {
               throw null;
            }

            if (!that.hasFlag(4294967296L) && this.info().baseTypeIndex(that) < 0) {
               return false;
            }
         }

         return true;
      }

      public TypeSymbol reset(final Types.Type completer) {
         super.reset(completer);
         this.tpePeriod = 0;
         this.tyconRunId = 0;
         return this;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$TypeSymbol$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public scala.reflect.api.Symbols scala$reflect$api$Symbols$TypeSymbolApi$$$outer() {
         return this.scala$reflect$internal$Symbols$TypeSymbol$$$outer();
      }

      // $FF: synthetic method
      public static final TypeSymbol $anonfun$setTyconCache$1(final TypeSymbol $this) {
         return $this;
      }

      // $FF: synthetic method
      public static final Types.Type $anonfun$updateTypeCache$1(final Symbol x$51) {
         return x$51.typeConstructor();
      }

      public TypeSymbol(final Symbol initOwner, final Position initPos, final Names.TypeName initName) {
         super(initOwner, initPos, initName);
         this.privateWithin_$eq(Symbols.this.NoSymbol());
         this.tyconCache = null;
         this.tyconRunId = 0;
         this.tpePeriod = 0;
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var15 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = Symbols.this.settings();
         MutableSettings var16 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings areStatisticsEnabled$extension_$this = var16;
         boolean var17 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
         areStatisticsEnabled$extension_$this = null;
         if (var17) {
            Statistics var18 = Symbols.this.statistics();
            Statistics.Counter incCounter_c = ((SymbolsStats)Symbols.this.statistics()).typeSymbolCount();
            if (var18 == null) {
               throw null;
            }

            Statistics incCounter_this = var18;
            MutableSettings.SettingsOps$ var19 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var20 = MutableSettings$.MODULE$;
            MutableSettings incCounter_enabled_SettingsOps_settings = incCounter_this.scala$reflect$internal$util$Statistics$$settings;
            MutableSettings var21 = incCounter_enabled_SettingsOps_settings;
            incCounter_enabled_SettingsOps_settings = null;
            MutableSettings incCounter_enabled_areStatisticsEnabled$extension_$this = var21;
            boolean var22 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(incCounter_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            incCounter_enabled_areStatisticsEnabled$extension_$this = null;
            if (var22 && incCounter_c != null) {
               incCounter_c.value_$eq(incCounter_c.value() + 1);
            }
         }

      }
   }

   public class TypeSkolem extends TypeSymbol {
      private final Object origin;
      private final int level;

      public int level() {
         return this.level;
      }

      public final boolean isSkolem() {
         return true;
      }

      public boolean isExistentialSkolem() {
         return this.hasFlag(34359738368L);
      }

      public boolean isGADTSkolem() {
         return this.hasAllFlags(18874368L);
      }

      public boolean isTypeSkolem() {
         return this.hasFlag(8192L);
      }

      public boolean isAbstractType() {
         return this.hasFlag(16L);
      }

      public Types.Type existentialBound() {
         return this.isAbstractType() ? this.info() : super.existentialBound();
      }

      public Symbol deSkolemize() {
         Object var1 = this.origin;
         return (Symbol)(var1 instanceof Symbol && ((Symbol)var1).scala$reflect$internal$Symbols$Symbol$$$outer() == this.scala$reflect$internal$Symbols$TypeSkolem$$$outer() ? (Symbol)var1 : this);
      }

      public Object unpackLocation() {
         return this.origin;
      }

      public List typeParams() {
         return this.info().typeParams();
      }

      public TypeSkolem cloneSymbolImpl(final Symbol owner, final long newFlags) {
         Names.TypeName var10001 = (Names.TypeName)this.name();
         Object var10002 = this.origin;
         Position newTypeSkolemSymbol_pos = this.pos();
         Object newTypeSkolemSymbol_origin = var10002;
         Names.TypeName newTypeSkolemSymbol_name = var10001;
         if (owner == null) {
            throw null;
         } else {
            return owner.createTypeSkolemSymbol(newTypeSkolemSymbol_name, newTypeSkolemSymbol_origin, newTypeSkolemSymbol_pos, newFlags);
         }
      }

      public String nameString() {
         MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
         MutableSettings$ var5 = MutableSettings$.MODULE$;
         MutableSettings SettingsOps_settings = this.scala$reflect$internal$Symbols$TypeSkolem$$$outer().settings();
         MutableSettings var6 = SettingsOps_settings;
         SettingsOps_settings = null;
         MutableSettings isDebug$extension_$this = var6;
         boolean var7 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
         isDebug$extension_$this = null;
         return var7 ? (new StringBuilder(1)).append(super.nameString()).append("&").append(this.level()).toString() : super.nameString();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$TypeSkolem$$$outer() {
         return this.$outer;
      }

      public TypeSkolem(final Symbol initOwner, final Position initPos, final Names.TypeName initName, final Object origin) {
         super(initOwner, initPos, initName);
         this.origin = origin;
         this.level = Symbols.this.skolemizationLevel();
      }
   }

   public class ClassSymbol extends TypeSymbol implements scala.reflect.api.Symbols.ClassSymbolApi {
      private ClassSymbol flipped;
      private Names.TypeName flatname;
      private AbstractFile _associatedFile;
      private Symbol thissym = this;
      private Types.Type thisTypeCache;
      private int thisTypePeriod = 0;
      private Set childSet;
      private volatile boolean bitmap$0;

      public final boolean isClass() {
         return scala.reflect.api.Symbols.ClassSymbolApi.isClass$(this);
      }

      public final scala.reflect.api.Symbols.ClassSymbolApi asClass() {
         return scala.reflect.api.Symbols.ClassSymbolApi.asClass$(this);
      }

      public String resolveOverloadedFlag(final long flag) {
         if (131072L == flag) {
            return "<inconstructor>";
         } else {
            return 34359738368L == flag ? "<existential>" : super.resolveOverloadedFlag(flag);
         }
      }

      public final boolean isNonClassType() {
         return false;
      }

      public final boolean isAbstractType() {
         return false;
      }

      public final boolean isAliasType() {
         return false;
      }

      public final boolean isContravariant() {
         return false;
      }

      public boolean isAbstractClass() {
         return this.hasFlag(8L);
      }

      public boolean isCaseClass() {
         return this.hasFlag(2048L);
      }

      public boolean isClassLocalToConstructor() {
         return this.hasFlag(131072L);
      }

      public boolean isModuleClass() {
         return this.hasFlag(256L);
      }

      public boolean isPackageClass() {
         return this.hasFlag(16384L);
      }

      public boolean isTrait() {
         return this.hasFlag(33554432L);
      }

      public boolean isAnonOrRefinementClass() {
         return this.isAnonymousClass() || this.isRefinementClass();
      }

      public boolean isAnonymousClass() {
         return this.name().containsName(this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().tpnme().ANON_CLASS_NAME());
      }

      public boolean isConcreteClass() {
         return !this.hasFlag(33554440L);
      }

      public boolean isJavaInterface() {
         return this.hasAllFlags(34603008L);
      }

      public boolean isNestedClass() {
         return !this.isTopLevel();
      }

      public boolean isNumericValueClass() {
         Definitions.definitions$ var10000 = this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().definitions();
         if (var10000 == null) {
            throw null;
         } else {
            return Definitions.ValueClassDefinitions.isNumericValueClass$(var10000, this);
         }
      }

      public boolean isNumeric() {
         return this.isNumericValueClass();
      }

      public boolean isPackageObjectClass() {
         if (this.isModuleClass()) {
            Names.Name var10000 = this.name();
            Names.Name var1 = this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().tpnme().PACKAGE();
            if (var10000 == null) {
               if (var1 == null) {
                  return true;
               }
            } else if (var10000.equals(var1)) {
               return true;
            }
         }

         return false;
      }

      public boolean isPrimitiveValueClass() {
         return this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().definitions().isPrimitiveValueClass(this);
      }

      public boolean isPrimitive() {
         return this.isPrimitiveValueClass();
      }

      public boolean isLocalClass() {
         return this.isAnonOrRefinementClass() || this.isLocalToBlock() || !this.isTopLevel() && this.owner().isLocalClass();
      }

      public List enclClassChain() {
         List var10000 = this.owner().enclClassChain();
         if (var10000 == null) {
            throw null;
         } else {
            List $colon$colon_this = var10000;
            return new scala.collection.immutable..colon.colon(this, $colon$colon_this);
         }
      }

      public final Symbol companionModule0() {
         return this.flatOwnerInfo().decl((Names.Name)((Names.TypeName)this.name()).toTermName()).suchThat((sym) -> BoxesRunTime.boxToBoolean($anonfun$companionModule0$1(this, sym)));
      }

      public Symbol companionModule() {
         return this.companionModule0();
      }

      public Symbol companionSymbol() {
         return this.companionModule0();
      }

      public Symbol linkedClassOfClass() {
         return this.companionModule().moduleClass();
      }

      public Symbol sourceModule() {
         return (Symbol)(this.isModuleClass() ? this.companionModule() : this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().NoSymbol());
      }

      public Types.Type existentialBound() {
         return this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().GenPolyType().apply(this.typeParams(), this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().TypeBounds().upper(this.classBound()));
      }

      public Names.TermName primaryConstructorName() {
         return this.hasFlag(33554432L) ? this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().nme().MIXIN_CONSTRUCTOR() : this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().nme().CONSTRUCTOR();
      }

      public Symbol primaryConstructor() {
         Symbol c = this.info().decl((Names.Name)this.primaryConstructorName());
         return c.isOverloaded() ? (Symbol)c.alternatives().head() : c;
      }

      public AbstractFile associatedFile() {
         if (!this.isTopLevel()) {
            return super.associatedFile();
         } else {
            return (AbstractFile)(this._associatedFile == null ? NoAbstractFile$.MODULE$ : this._associatedFile);
         }
      }

      public void associatedFile_$eq(final AbstractFile f) {
         this._associatedFile = f;
      }

      public ClassSymbol reset(final Types.Type completer) {
         super.reset(completer);
         this.thissym = this;
         return this;
      }

      public Types.Type thisType() {
         int period = this.thisTypePeriod;
         if (period != this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().currentPeriod()) {
            if (!this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().isValid(period)) {
               this.thisTypeCache = this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().ThisType().apply(this);
            }

            this.thisTypePeriod = this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().currentPeriod();
         }

         return this.thisTypeCache;
      }

      public Symbol owner() {
         return this.needsFlatClasses() ? this.rawowner().owner() : this.rawowner();
      }

      public Names.TypeName flattenedName() {
         if (this.flatname == null) {
            this.flatname = (Names.TypeName)this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().tpnme().flattenedName(this.rawowner(), ((Symbol)this)._rawname());
         }

         return this.flatname;
      }

      public Symbol thisSym() {
         return this.thissym;
      }

      public void typeOfThis_$eq(final Types.Type tp) {
         Names.TermName var10001 = this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().nme().this_();
         Position newThisSym_pos = this.pos();
         Names.TermName newThisSym_name = var10001;
         TermSymbol var6 = ((Symbol)this).newTermSymbol(newThisSym_name, newThisSym_pos, 2097152L);
         newThisSym_name = null;
         newThisSym_pos = null;
         this.thissym = var6.setInfo(tp);
      }

      public ClassSymbol cloneSymbolImpl(final Symbol owner, final long newFlags) {
         ClassSymbol clone;
         label12: {
            clone = owner.newClassSymbol((Names.TypeName)this.name(), this.pos(), newFlags);
            Symbol var10000 = this.thisSym();
            if (var10000 != null) {
               if (var10000.equals(this)) {
                  break label12;
               }
            }

            clone.typeOfThis_$eq(this.typeOfThis());
            clone.thisSym().setName(this.thisSym().name());
         }

         clone.associatedFile_$eq(this._associatedFile);
         return clone;
      }

      private ClassSymbol flipped$lzycompute() {
         synchronized(this){}

         try {
            if (!this.bitmap$0) {
               ClassSymbol clone = (ClassSymbol)this.cloneSymbol(this.owner());
               List var10001 = clone.rawInfo().typeParams();
               if (var10001 == null) {
                  throw null;
               }

               for(List foreach_these = var10001; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
                  Symbol var3 = (Symbol)foreach_these.head();
                  $anonfun$flipped$1(this, var3);
               }

               Object var6 = null;
               this.flipped = clone;
               this.bitmap$0 = true;
            }
         } catch (Throwable var5) {
            throw var5;
         }

         return this.flipped;
      }

      public ClassSymbol flipped() {
         return !this.bitmap$0 ? this.flipped$lzycompute() : this.flipped;
      }

      public Symbol derivedValueClassUnbox() {
         Option var10000 = this.info().decls().find((x$55) -> BoxesRunTime.boxToBoolean($anonfun$derivedValueClassUnbox$1(x$55)));
         if (var10000 == null) {
            throw null;
         } else {
            Option getOrElse_this = var10000;
            return (Symbol)(getOrElse_this.isEmpty() ? $anonfun$derivedValueClassUnbox$2(this) : getOrElse_this.get());
         }
      }

      public Set children() {
         return this.childSet;
      }

      public void addChild(final Symbol sym) {
         if (!this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().isPastTyper() && this.hasAttachment(scala.reflect.ClassTag..MODULE$.apply(StdAttachments.KnownDirectSubclassesCalled$.class)) && !this.childSet.contains(sym)) {
            this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().globalError((new StringBuilder(62)).append("knownDirectSubclasses of ").append(this.name()).append(" observed before subclass ").append(sym.name()).append(" registered").toString());
         }

         Set var10001 = this.childSet;
         if (var10001 == null) {
            throw null;
         } else {
            this.childSet = (Set)var10001.incl(sym);
         }
      }

      public String anonOrRefinementString() {
         if (this.hasCompleteInfo()) {
            String label = this.isAnonymousClass() ? "$anon:" : "refinement of";
            Definitions.definitions$ var10000 = this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().definitions();
            List var10001 = this.info().parents();
            if (var10001 == null) {
               throw null;
            } else {
               List map_this = var10001;
               Object var67;
               if (map_this == .MODULE$) {
                  var67 = .MODULE$;
               } else {
                  Types.Type var24 = (Types.Type)map_this.head();
                  scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$anonOrRefinementString$1(this, var24), .MODULE$);
                  scala.collection.immutable..colon.colon map_t = map_h;

                  for(List map_rest = (List)map_this.tail(); map_rest != .MODULE$; map_rest = (List)map_rest.tail()) {
                     var24 = (Types.Type)map_rest.head();
                     scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$anonOrRefinementString$1(this, var24), .MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var67 = map_h;
               }

               Object var26 = null;
               Object var27 = null;
               Object var28 = null;
               Object var29 = null;
               Object var30 = null;
               List filterNot_this = (List)var67;
               boolean filterNot_filterCommon_isFlipped = true;
               List filterNot_filterCommon_noneIn$1_l = filterNot_this;

               while(true) {
                  if (filterNot_filterCommon_noneIn$1_l.isEmpty()) {
                     var67 = .MODULE$;
                     break;
                  }

                  Object filterNot_filterCommon_noneIn$1_h = filterNot_filterCommon_noneIn$1_l.head();
                  List filterNot_filterCommon_noneIn$1_t = (List)filterNot_filterCommon_noneIn$1_l.tail();
                  Types.Type var25 = (Types.Type)filterNot_filterCommon_noneIn$1_h;
                  if ($anonfun$anonOrRefinementString$2(this, var25) != filterNot_filterCommon_isFlipped) {
                     List filterNot_filterCommon_noneIn$1_allIn$1_remaining = filterNot_filterCommon_noneIn$1_t;

                     while(true) {
                        if (filterNot_filterCommon_noneIn$1_allIn$1_remaining.isEmpty()) {
                           var67 = filterNot_filterCommon_noneIn$1_l;
                           break;
                        }

                        Object filterNot_filterCommon_noneIn$1_allIn$1_x = filterNot_filterCommon_noneIn$1_allIn$1_remaining.head();
                        var25 = (Types.Type)filterNot_filterCommon_noneIn$1_allIn$1_x;
                        if ($anonfun$anonOrRefinementString$2(this, var25) == filterNot_filterCommon_isFlipped) {
                           scala.collection.immutable..colon.colon filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead = new scala.collection.immutable..colon.colon(filterNot_filterCommon_noneIn$1_l.head(), .MODULE$);
                           List filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filterNot_filterCommon_noneIn$1_l.tail();

                           scala.collection.immutable..colon.colon filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast;
                           for(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead; filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess != filterNot_filterCommon_noneIn$1_allIn$1_remaining; filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.tail()) {
                              scala.collection.immutable..colon.colon filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.head(), .MODULE$);
                              filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                              filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                           }

                           List filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filterNot_filterCommon_noneIn$1_allIn$1_remaining.tail();
                           List filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next;

                           while(!filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next.isEmpty()) {
                              Object filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_head = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next.head();
                              var25 = (Types.Type)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_head;
                              if ($anonfun$anonOrRefinementString$2(this, var25) != filterNot_filterCommon_isFlipped) {
                                 filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                              } else {
                                 while(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy != filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next) {
                                    scala.collection.immutable..colon.colon filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.head(), .MODULE$);
                                    filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                                    filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                                    filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.tail();
                                 }

                                 filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                                 filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                              }
                           }

                           if (!filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.isEmpty()) {
                              filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy);
                           }

                           var67 = filterNot_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead;
                           Object var40 = null;
                           Object var43 = null;
                           Object var46 = null;
                           Object var49 = null;
                           Object var52 = null;
                           Object var55 = null;
                           Object var58 = null;
                           Object var61 = null;
                           break;
                        }

                        filterNot_filterCommon_noneIn$1_allIn$1_remaining = (List)filterNot_filterCommon_noneIn$1_allIn$1_remaining.tail();
                     }

                     Object var36 = null;
                     Object var38 = null;
                     Object var41 = null;
                     Object var44 = null;
                     Object var47 = null;
                     Object var50 = null;
                     Object var53 = null;
                     Object var56 = null;
                     Object var59 = null;
                     Object var62 = null;
                     break;
                  }

                  filterNot_filterCommon_noneIn$1_l = filterNot_filterCommon_noneIn$1_t;
               }

               filterNot_filterCommon_noneIn$1_l = null;
               Object var34 = null;
               Object var35 = null;
               Object var37 = null;
               Object var39 = null;
               Object var42 = null;
               Object var45 = null;
               Object var48 = null;
               Object var51 = null;
               Object var54 = null;
               Object var57 = null;
               Object var60 = null;
               Object var63 = null;
               List filterNot_filterCommon_result = (List)var67;
               Statics.releaseFence();
               var67 = filterNot_filterCommon_result;
               filterNot_this = null;
               filterNot_filterCommon_result = null;
               String parents = var10000.parentsString((List)var67);
               return (new StringBuilder(3)).append("<").append(label).append(" ").append(parents).append(">").toString();
            }
         } else {
            return this.isAnonymousClass() ? "$anon" : this.nameString();
         }
      }

      public String toString() {
         return this.isAnonOrRefinementClass() ? this.anonOrRefinementString() : super.toString();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$ClassSymbol$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public scala.reflect.api.Symbols scala$reflect$api$Symbols$ClassSymbolApi$$$outer() {
         return this.scala$reflect$internal$Symbols$ClassSymbol$$$outer();
      }

      // $FF: synthetic method
      public static final boolean $anonfun$companionModule0$1(final ClassSymbol $this, final Symbol sym) {
         return sym.isModule() && sym.isCoDefinedWith($this);
      }

      // $FF: synthetic method
      public static final Object $anonfun$flipped$1(final ClassSymbol $this, final Symbol sym) {
         return sym.isContravariant() ? sym.resetFlag($this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().Flag().CONTRAVARIANT()).setFlag($this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().Flag().COVARIANT()) : BoxedUnit.UNIT;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$derivedValueClassUnbox$1(final Symbol x$55) {
         return x$55.hasAllFlags(536870976L);
      }

      // $FF: synthetic method
      public static final NoSymbol $anonfun$derivedValueClassUnbox$2(final ClassSymbol $this) {
         return $this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().NoSymbol();
      }

      // $FF: synthetic method
      public static final Types.Type $anonfun$anonOrRefinementString$1(final ClassSymbol $this, final Types.Type tp) {
         return $this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().definitions().functionNBaseType(tp);
      }

      // $FF: synthetic method
      public static final boolean $anonfun$anonOrRefinementString$2(final ClassSymbol $this, final Types.Type x$56) {
         Symbol var10000 = x$56.typeSymbol();
         ClassSymbol var2 = $this.scala$reflect$internal$Symbols$ClassSymbol$$$outer().definitions().SerializableClass();
         if (var10000 == null) {
            if (var2 == null) {
               return true;
            }
         } else if (var10000.equals(var2)) {
            return true;
         }

         return false;
      }

      public ClassSymbol(final Symbol initOwner, final Position initPos, final Names.TypeName initName) {
         super(initOwner, initPos, initName);
         Set var10001 = scala.Predef..MODULE$.Set();
         Nil apply_elems = .MODULE$;
         if (var10001 == null) {
            throw null;
         } else {
            Object var25 = IterableFactory.apply$(var10001, apply_elems);
            Object var15 = null;
            this.childSet = (Set)var25;
            MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var17 = MutableSettings$.MODULE$;
            MutableSettings SettingsOps_settings = Symbols.this.settings();
            MutableSettings var18 = SettingsOps_settings;
            SettingsOps_settings = null;
            MutableSettings areStatisticsEnabled$extension_$this = var18;
            boolean var19 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
            areStatisticsEnabled$extension_$this = null;
            if (var19) {
               Statistics var20 = Symbols.this.statistics();
               Statistics.Counter incCounter_c = ((SymbolsStats)Symbols.this.statistics()).classSymbolCount();
               if (var20 == null) {
                  throw null;
               }

               Statistics incCounter_this = var20;
               MutableSettings.SettingsOps$ var21 = MutableSettings.SettingsOps$.MODULE$;
               MutableSettings$ var22 = MutableSettings$.MODULE$;
               MutableSettings incCounter_enabled_SettingsOps_settings = incCounter_this.scala$reflect$internal$util$Statistics$$settings;
               MutableSettings var23 = incCounter_enabled_SettingsOps_settings;
               incCounter_enabled_SettingsOps_settings = null;
               MutableSettings incCounter_enabled_areStatisticsEnabled$extension_$this = var23;
               boolean var24 = StatisticsStatics.COLD_STATS_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(incCounter_enabled_areStatisticsEnabled$extension_$this.YstatisticsEnabled().value());
               incCounter_enabled_areStatisticsEnabled$extension_$this = null;
               if (var24 && incCounter_c != null) {
                  incCounter_c.value_$eq(incCounter_c.value() + 1);
               }
            }

         }
      }

      // $FF: synthetic method
      public static final Object $anonfun$anonOrRefinementString$2$adapted(final ClassSymbol $this, final Types.Type x$56) {
         return BoxesRunTime.boxToBoolean($anonfun$anonOrRefinementString$2($this, x$56));
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class ModuleClassSymbol extends ClassSymbol {
      private final Symbol owner;
      private Symbol moduleSymbol;
      private Types.Type typeOfThisCache;
      private int typeOfThisPeriod;
      private Scopes.Scope implicitMembersCacheValue;
      private Types.Type implicitMembersCacheKey1;
      private Scopes.ScopeEntry implicitMembersCacheKey2;

      public boolean isModuleClass() {
         return true;
      }

      public Symbol linkedClassOfClass() {
         return this.companionClass();
      }

      public Types.Type typeOfThis() {
         int period = this.typeOfThisPeriod;
         if (period != this.scala$reflect$internal$Symbols$ModuleClassSymbol$$$outer().currentPeriod()) {
            if (!this.scala$reflect$internal$Symbols$ModuleClassSymbol$$$outer().isValid(period)) {
               this.typeOfThisCache = this.scala$reflect$internal$Symbols$ModuleClassSymbol$$$outer().singleType(this.owner.thisType(), this.sourceModule());
            }

            this.typeOfThisPeriod = this.scala$reflect$internal$Symbols$ModuleClassSymbol$$$outer().currentPeriod();
         }

         return this.typeOfThisCache;
      }

      public Scopes.Scope implicitMembers() {
         Types.Type tp = this.info();
         if (this.implicitMembersCacheKey1 != tp || this.implicitMembersCacheKey2 != tp.decls().elems()) {
            this.implicitMembersCacheValue = tp.membersBasedOnFlags(4398113619968L, 512L);
            this.implicitMembersCacheKey1 = tp;
            this.implicitMembersCacheKey2 = tp.decls().elems();
         }

         return this.implicitMembersCacheValue;
      }

      public Symbol sourceModule() {
         return this.moduleSymbol != null ? this.moduleSymbol : this.companionModule();
      }

      public void sourceModule_$eq(final Symbol module) {
         this.moduleSymbol = module;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$ModuleClassSymbol$$$outer() {
         return this.$outer;
      }

      public ModuleClassSymbol(final Symbol owner, final Position pos, final Names.TypeName name) {
         super(owner, pos, name);
         this.owner = owner;
         this.typeOfThisPeriod = 0;
         this.implicitMembersCacheValue = Symbols.this.EmptyScope();
         this.implicitMembersCacheKey1 = Symbols.this.NoType();
         this.implicitMembersCacheKey2 = null;
      }
   }

   public class PackageObjectClassSymbol extends ModuleClassSymbol {
      public final boolean isPackageObjectClass() {
         return true;
      }

      public final boolean isPackageObjectOrClass() {
         return true;
      }

      public final Symbol skipPackageObject() {
         return this.owner();
      }

      public final PackageObjectClassSymbol setName(final Names.Name name) {
         throw this.scala$reflect$internal$Symbols$PackageObjectClassSymbol$$$outer().abort((new StringBuilder(33)).append("Can't rename a package object to ").append(name).toString());
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$PackageObjectClassSymbol$$$outer() {
         return this.$outer;
      }

      public PackageObjectClassSymbol(final Symbol owner0, final Position pos0) {
         super(owner0, pos0, (Names.TypeName)Symbols.this.tpnme().PACKAGE());
      }
   }

   public class PackageClassSymbol extends ModuleClassSymbol {
      public Symbol sourceModule() {
         return this.companionModule();
      }

      public Nil enclClassChain() {
         return .MODULE$;
      }

      public boolean isPackageClass() {
         return true;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$PackageClassSymbol$$$outer() {
         return this.$outer;
      }

      public PackageClassSymbol(final Symbol owner0, final Position pos0, final Names.TypeName name0) {
         super(owner0, pos0, name0);
      }
   }

   public class RefinementClassSymbol extends ClassSymbol {
      public void name_$eq(final Names.Name name) {
         throw this.scala$reflect$internal$Symbols$RefinementClassSymbol$$$outer().abort((new StringBuilder(44)).append("Cannot set name of RefinementClassSymbol to ").append(name).toString());
      }

      public boolean isRefinementClass() {
         return true;
      }

      public boolean isAnonOrRefinementClass() {
         return true;
      }

      public boolean isLocalClass() {
         return true;
      }

      public boolean hasMeaninglessName() {
         return true;
      }

      public Symbol companionModule() {
         return this.scala$reflect$internal$Symbols$RefinementClassSymbol$$$outer().NoSymbol();
      }

      public boolean hasTransOwner(final Symbol sym) {
         if (!super.hasTransOwner(sym)) {
            List var10000 = this.info().parents();
            if (var10000 == null) {
               throw null;
            }

            List exists_these = var10000;

            while(true) {
               if (exists_these.isEmpty()) {
                  var5 = false;
                  break;
               }

               Types.Type var3 = (Types.Type)exists_these.head();
               if ($anonfun$hasTransOwner$1(sym, var3)) {
                  var5 = true;
                  break;
               }

               exists_these = (List)exists_these.tail();
            }

            Object var4 = null;
            if (!var5) {
               return false;
            }
         }

         return true;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$RefinementClassSymbol$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public static final boolean $anonfun$hasTransOwner$1(final Symbol sym$2, final Types.Type x$59) {
         return x$59.typeSymbol().hasTransOwner(sym$2);
      }

      public RefinementClassSymbol(final Symbol owner0, final Position pos0) {
         super(owner0, pos0, Symbols.this.tpnme().REFINE_CLASS_NAME());
      }

      // $FF: synthetic method
      public static final Object $anonfun$hasTransOwner$1$adapted(final Symbol sym$2, final Types.Type x$59) {
         return BoxesRunTime.boxToBoolean($anonfun$hasTransOwner$1(sym$2, x$59));
      }
   }

   public interface StubSymbol {
      String missingMessage();

      default Nothing failIfStub() {
         MissingRequirementError$ var10000 = MissingRequirementError$.MODULE$;
         String signal_msg = this.missingMessage();
         throw new MissingRequirementError(signal_msg);
      }

      private Object fail(final Object alt) {
         if (!((Symbol)this).hasFlag(4294967296L)) {
            ((Reporting)this.scala$reflect$internal$Symbols$StubSymbol$$$outer()).globalError(((StdAttachments.Attachable)this).pos(), this.missingMessage());
            MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var6 = MutableSettings$.MODULE$;
            MutableSettings SettingsOps_settings = ((SymbolTable)this.scala$reflect$internal$Symbols$StubSymbol$$$outer()).settings();
            MutableSettings var7 = SettingsOps_settings;
            SettingsOps_settings = null;
            MutableSettings isDebug$extension_$this = var7;
            boolean var8 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
            isDebug$extension_$this = null;
            if (var8) {
               (new Throwable()).printStackTrace();
            }

            ((Symbol)this).setFlag(4294967296L);
         }

         return alt;
      }

      default Types.NoType$ originalInfo() {
         return ((Types)this.scala$reflect$internal$Symbols$StubSymbol$$$outer()).NoType();
      }

      default AbstractFile associatedFile() {
         return ((Symbol)this).owner().associatedFile();
      }

      default Types.NoType$ info() {
         return (Types.NoType$)this.fail(((Types)this.scala$reflect$internal$Symbols$StubSymbol$$$outer()).NoType());
      }

      default Types.NoType$ rawInfo() {
         return (Types.NoType$)this.fail(((Types)this.scala$reflect$internal$Symbols$StubSymbol$$$outer()).NoType());
      }

      default NoSymbol companionSymbol() {
         return (NoSymbol)this.fail(this.scala$reflect$internal$Symbols$StubSymbol$$$outer().NoSymbol());
      }

      // $FF: synthetic method
      Symbols scala$reflect$internal$Symbols$StubSymbol$$$outer();

      static void $init$(final StubSymbol $this) {
         ((SymbolTable)$this.scala$reflect$internal$Symbols$StubSymbol$$$outer()).devWarning(() -> (new StringBuilder(37)).append("creating stub symbol to defer error: ").append($this.missingMessage()).toString());
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return var0.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class StubClassSymbol extends ClassSymbol implements StubSymbol {
      private final String missingMessage;

      public final Nothing failIfStub() {
         return Symbols.StubSymbol.super.failIfStub();
      }

      public Types.NoType$ originalInfo() {
         return Symbols.StubSymbol.super.originalInfo();
      }

      public AbstractFile associatedFile() {
         return Symbols.StubSymbol.super.associatedFile();
      }

      public Types.NoType$ info() {
         return Symbols.StubSymbol.super.info();
      }

      public Types.NoType$ rawInfo() {
         return Symbols.StubSymbol.super.rawInfo();
      }

      public NoSymbol companionSymbol() {
         return Symbols.StubSymbol.super.companionSymbol();
      }

      public String missingMessage() {
         return this.missingMessage;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$StubClassSymbol$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public Symbols scala$reflect$internal$Symbols$StubSymbol$$$outer() {
         return this.scala$reflect$internal$Symbols$StubClassSymbol$$$outer();
      }

      public StubClassSymbol(final Symbol owner0, final Names.TypeName name0, final String missingMessage) {
         super(owner0, owner0.pos(), name0);
         this.missingMessage = missingMessage;
         Symbols.StubSymbol.$init$(this);
      }
   }

   public class StubTermSymbol extends TermSymbol implements StubSymbol {
      private final String missingMessage;

      public final Nothing failIfStub() {
         return Symbols.StubSymbol.super.failIfStub();
      }

      public Types.NoType$ originalInfo() {
         return Symbols.StubSymbol.super.originalInfo();
      }

      public AbstractFile associatedFile() {
         return Symbols.StubSymbol.super.associatedFile();
      }

      public Types.NoType$ info() {
         return Symbols.StubSymbol.super.info();
      }

      public Types.NoType$ rawInfo() {
         return Symbols.StubSymbol.super.rawInfo();
      }

      public NoSymbol companionSymbol() {
         return Symbols.StubSymbol.super.companionSymbol();
      }

      public String missingMessage() {
         return this.missingMessage;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$StubTermSymbol$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public Symbols scala$reflect$internal$Symbols$StubSymbol$$$outer() {
         return this.scala$reflect$internal$Symbols$StubTermSymbol$$$outer();
      }

      public StubTermSymbol(final Symbol owner0, final Names.TermName name0, final String missingMessage) {
         super(owner0, owner0.pos(), name0);
         this.missingMessage = missingMessage;
         Symbols.StubSymbol.$init$(this);
      }
   }

   public class FreeTermSymbol extends TermSymbol implements FreeSymbol, scala.reflect.api.Internals.FreeTermSymbolApi {
      private final Function0 value0;
      private final String origin;

      public String origin() {
         return this.origin;
      }

      public final boolean isFreeTerm() {
         return true;
      }

      public final FreeTermSymbol asFreeTerm() {
         return this;
      }

      public Object value() {
         return this.value0.apply();
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$FreeTermSymbol$$$outer() {
         return this.$outer;
      }

      public FreeTermSymbol(final Names.TermName name0, final Function0 value0, final String origin) {
         super(Symbols.this.NoSymbol(), Symbols.this.NoPosition(), name0);
         this.value0 = value0;
         this.origin = origin;
      }
   }

   public class FreeTypeSymbol extends TypeSkolem implements FreeSymbol, scala.reflect.api.Internals.FreeTypeSymbolApi {
      private final String origin;

      public String origin() {
         return this.origin;
      }

      public final boolean isFreeType() {
         return true;
      }

      public final FreeTypeSymbol asFreeType() {
         return this;
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$FreeTypeSymbol$$$outer() {
         return this.$outer;
      }

      public FreeTypeSymbol(final Names.TypeName name0, final String origin) {
         super(Symbols.this.NoSymbol(), Symbols.this.NoPosition(), name0, Symbols.this.NoSymbol());
         this.origin = origin;
      }
   }

   public class NoSymbol extends Symbol {
      public Names.TermName asNameType(final Names.Name n) {
         return n.toTermName();
      }

      public Nothing name_$eq(final Names.Name n) {
         return this.scala$reflect$internal$Symbols$NoSymbol$$$outer().abort((new StringBuilder(30)).append("Cannot set NoSymbol's name to ").append(n).toString());
      }

      public void info_$eq(final Types.Type info) {
         this.scala$reflect$internal$Symbols$$infos_$eq(this.scala$reflect$internal$Symbols$NoSymbol$$$outer().scala$reflect$internal$Symbols$$noTypeHistory());
         this.unlock();
         this.validTo_$eq(this.scala$reflect$internal$Symbols$NoSymbol$$$outer().currentPeriod());
      }

      public long flagMask() {
         return -1L;
      }

      public boolean exists() {
         return false;
      }

      public boolean isHigherOrderTypeParameter() {
         return false;
      }

      public NoSymbol companionClass() {
         return this.scala$reflect$internal$Symbols$NoSymbol$$$outer().NoSymbol();
      }

      public NoSymbol companionModule() {
         return this.scala$reflect$internal$Symbols$NoSymbol$$$outer().NoSymbol();
      }

      public NoSymbol companionSymbol() {
         return this.scala$reflect$internal$Symbols$NoSymbol$$$outer().NoSymbol();
      }

      public boolean isSubClass(final Symbol that) {
         return false;
      }

      public NoSymbol filter(final Function1 cond) {
         return this;
      }

      public String defString() {
         return this.toString();
      }

      public String locationString() {
         return "";
      }

      public Nil enclClassChain() {
         return .MODULE$;
      }

      public Symbol enclClass() {
         return this;
      }

      public Symbol enclosingPackageClass() {
         return this;
      }

      public Symbol enclMethod() {
         return this;
      }

      public NoAbstractFile$ associatedFile() {
         return NoAbstractFile$.MODULE$;
      }

      public Symbol owner() {
         SymbolTable var10000 = this.scala$reflect$internal$Symbols$NoSymbol$$$outer();
         Function0 var10001 = () -> "NoSymbol.owner";
         byte devWarningDumpStack_maxFrames = 15;
         Function0 devWarningDumpStack_msg = var10001;
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable devWarningDumpStack_this = var10000;
            devWarningDumpStack_this.devWarning(SymbolTable::$anonfun$devWarningDumpStack$1);
            return this;
         }
      }

      public List ownerChain() {
         return .MODULE$;
      }

      public Iterator ownersIterator() {
         if (scala.package..MODULE$.Iterator() == null) {
            throw null;
         } else {
            return scala.collection.Iterator..scala$collection$Iterator$$_empty;
         }
      }

      public List alternatives() {
         return .MODULE$;
      }

      public NoSymbol reset(final Types.Type completer) {
         return this;
      }

      public Types.Type info() {
         return this.scala$reflect$internal$Symbols$NoSymbol$$$outer().NoType();
      }

      public Types.Type existentialBound() {
         return this.scala$reflect$internal$Symbols$NoSymbol$$$outer().NoType();
      }

      public Types.Type rawInfo() {
         return this.scala$reflect$internal$Symbols$NoSymbol$$$outer().NoType();
      }

      public Symbol accessBoundary(final Symbol base) {
         return this.enclosingRootClass();
      }

      public Nothing cloneSymbolImpl(final Symbol owner, final long newFlags) {
         return this.scala$reflect$internal$Symbols$NoSymbol$$$outer().abort("NoSymbol.clone()");
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$NoSymbol$$$outer() {
         return this.$outer;
      }

      public NoSymbol() {
         super((Symbol)null, Symbols.this.NoPosition(), Symbols.this.nme().NO_NAME());
         this.setInfo(Symbols.this.NoType());
         this.privateWithin_$eq(this);
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   public class CyclicReference extends Types.TypeError implements Product {
      private final Symbol sym;
      private final Types.Type info;
      private final Symbol[] trace;
      // $FF: synthetic field
      public final SymbolTable $outer;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public Symbol sym() {
         return this.sym;
      }

      public Types.Type info() {
         return this.info;
      }

      public Symbol[] trace() {
         return this.trace;
      }

      public CyclicReference copy(final Symbol sym, final Types.Type info, final Symbol[] trace) {
         return this.scala$reflect$internal$Symbols$CyclicReference$$$outer().new CyclicReference(sym, info, trace);
      }

      public Symbol copy$default$1() {
         return this.sym();
      }

      public Types.Type copy$default$2() {
         return this.info();
      }

      public Symbol[] copy$default$3() {
         return this.trace();
      }

      public String productPrefix() {
         return "CyclicReference";
      }

      public int productArity() {
         return 3;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.sym();
            case 1:
               return this.info();
            case 2:
               return this.trace();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof CyclicReference;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "sym";
            case 1:
               return "info";
            case 2:
               return "trace";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         return scala.util.hashing.MurmurHash3..MODULE$.productHash(this, -889275714, false);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof CyclicReference && ((CyclicReference)x$1).scala$reflect$internal$Symbols$CyclicReference$$$outer() == this.scala$reflect$internal$Symbols$CyclicReference$$$outer()) {
               CyclicReference var2 = (CyclicReference)x$1;
               Symbol var10000 = this.sym();
               Symbol var3 = var2.sym();
               if (var10000 == null) {
                  if (var3 != null) {
                     return false;
                  }
               } else if (!var10000.equals(var3)) {
                  return false;
               }

               Types.Type var5 = this.info();
               Types.Type var4 = var2.info();
               if (var5 == null) {
                  if (var4 != null) {
                     return false;
                  }
               } else if (!var5.equals(var4)) {
                  return false;
               }

               if (this.trace() == var2.trace() && var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$CyclicReference$$$outer() {
         return this.$outer;
      }

      public CyclicReference(final Symbol sym, final Types.Type info, final Symbol[] trace) {
         this.sym = sym;
         this.info = info;
         this.trace = trace;
         if (Symbols.this == null) {
            throw null;
         } else {
            this.$outer = Symbols.this;
            super((new StringBuilder(35)).append("illegal cyclic reference involving ").append(sym).toString());
            MutableSettings.SettingsOps$ var10000 = MutableSettings.SettingsOps$.MODULE$;
            MutableSettings$ var9 = MutableSettings$.MODULE$;
            MutableSettings SettingsOps_settings = Symbols.this.settings();
            MutableSettings var10 = SettingsOps_settings;
            SettingsOps_settings = null;
            MutableSettings isDebug$extension_$this = var10;
            boolean var11 = StatisticsStatics.DEBUG_GETTER.invokeExact() && BoxesRunTime.unboxToBoolean(isDebug$extension_$this.debug().value());
            isDebug$extension_$this = null;
            if (var11) {
               this.printStackTrace();
            }

         }
      }
   }

   public class CyclicReference$ implements Serializable {
      private final Symbol[] emptyTrace;
      // $FF: synthetic field
      private final SymbolTable $outer;

      public Symbol[] $lessinit$greater$default$3() {
         return this.$outer.CyclicReference().emptyTrace();
      }

      public Symbol[] emptyTrace() {
         return this.emptyTrace;
      }

      public CyclicReference apply(final Symbol sym, final Types.Type info, final Symbol[] trace) {
         return this.$outer.new CyclicReference(sym, info, trace);
      }

      public Symbol[] apply$default$3() {
         return this.$outer.CyclicReference().emptyTrace();
      }

      public Option unapply(final CyclicReference x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple3(x$0.sym(), x$0.info(), x$0.trace())));
      }

      public CyclicReference$() {
         if (Symbols.this == null) {
            throw null;
         } else {
            this.$outer = Symbols.this;
            super();
            this.emptyTrace = (Symbol[])Symbols.this.SymbolTag().newArray(0);
         }
      }
   }

   private final class TypeHistory implements Product, Serializable {
      private int scala$reflect$internal$Symbols$TypeHistory$$_validFrom;
      private Types.Type scala$reflect$internal$Symbols$TypeHistory$$_info;
      private TypeHistory scala$reflect$internal$Symbols$TypeHistory$$_prev;
      // $FF: synthetic field
      private final SymbolTable $outer;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public int _validFrom$access$0() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_validFrom;
      }

      public Types.Type _info$access$1() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_info;
      }

      public TypeHistory _prev$access$2() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_prev;
      }

      public int scala$reflect$internal$Symbols$TypeHistory$$_validFrom() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_validFrom;
      }

      private void _validFrom_$eq(final int x$1) {
         this.scala$reflect$internal$Symbols$TypeHistory$$_validFrom = x$1;
      }

      public Types.Type scala$reflect$internal$Symbols$TypeHistory$$_info() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_info;
      }

      private void _info_$eq(final Types.Type x$1) {
         this.scala$reflect$internal$Symbols$TypeHistory$$_info = x$1;
      }

      public TypeHistory scala$reflect$internal$Symbols$TypeHistory$$_prev() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_prev;
      }

      private void _prev_$eq(final TypeHistory x$1) {
         this.scala$reflect$internal$Symbols$TypeHistory$$_prev = x$1;
      }

      public int validFrom() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_validFrom();
      }

      public void validFrom_$eq(final int x) {
         this._validFrom_$eq(x);
      }

      public Types.Type info() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_info();
      }

      public TypeHistory prev() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_prev();
      }

      public final TypeHistory reset(final int validFrom, final Types.Type info) {
         if (this != this.$outer.scala$reflect$internal$Symbols$$noTypeHistory()) {
            this._validFrom_$eq(validFrom);
            this._info_$eq(info);
            this._prev_$eq((TypeHistory)null);
            return this;
         } else {
            return this.$outer.scala$reflect$internal$Symbols$$TypeHistory().apply(validFrom, info, (TypeHistory)null);
         }
      }

      private String phaseString() {
         Phase phase = this.$outer.phaseOf(this.scala$reflect$internal$Symbols$TypeHistory$$_validFrom());
         return (new StringBuilder(2)).append(phase).append(": ").append(this.$outer.exitingPhase(phase, () -> this.scala$reflect$internal$Symbols$TypeHistory$$_info().toString())).toString();
      }

      public String toString() {
         Iterator var10000 = this.toList().reverseIterator().map((x$67) -> x$67.phaseString());
         String mkString_sep = ", ";
         if (var10000 == null) {
            throw null;
         } else {
            return var10000.mkString("", mkString_sep, "");
         }
      }

      private List toList() {
         return ((List)(this.scala$reflect$internal$Symbols$TypeHistory$$_prev() == null ? .MODULE$ : this.scala$reflect$internal$Symbols$TypeHistory$$_prev().toList())).$colon$colon(this);
      }

      public TypeHistory oldest() {
         while(this.scala$reflect$internal$Symbols$TypeHistory$$_prev() != null) {
            this = this.scala$reflect$internal$Symbols$TypeHistory$$_prev();
         }

         return this;
      }

      public TypeHistory copy(final int _validFrom, final Types.Type _info, final TypeHistory _prev) {
         return this.$outer.new TypeHistory(_validFrom, _info, _prev);
      }

      public int copy$default$1() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_validFrom();
      }

      public Types.Type copy$default$2() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_info();
      }

      public TypeHistory copy$default$3() {
         return this.scala$reflect$internal$Symbols$TypeHistory$$_prev();
      }

      public String productPrefix() {
         return "TypeHistory";
      }

      public int productArity() {
         return 3;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this._validFrom$access$0();
            case 1:
               return this._info$access$1();
            case 2:
               return this._prev$access$2();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof TypeHistory;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "_validFrom";
            case 1:
               return "_info";
            case 2:
               return "_prev";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         int var1 = -889275714;
         var1 = Statics.mix(var1, "TypeHistory".hashCode());
         var1 = Statics.mix(var1, this._validFrom$access$0());
         var1 = Statics.mix(var1, Statics.anyHash(this._info$access$1()));
         var1 = Statics.mix(var1, Statics.anyHash(this._prev$access$2()));
         int finalizeHash_length = 3;
         return Statics.avalanche(var1 ^ finalizeHash_length);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof TypeHistory) {
               TypeHistory var2 = (TypeHistory)x$1;
               if (this._validFrom$access$0() == var2._validFrom$access$0()) {
                  Types.Type var10000 = this._info$access$1();
                  Types.Type var3 = var2._info$access$1();
                  if (var10000 == null) {
                     if (var3 != null) {
                        return false;
                     }
                  } else if (!var10000.equals(var3)) {
                     return false;
                  }

                  TypeHistory var5 = this._prev$access$2();
                  TypeHistory var4 = var2._prev$access$2();
                  if (var5 == null) {
                     if (var4 == null) {
                        return true;
                     }
                  } else if (var5.equals(var4)) {
                     return true;
                  }
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public static final TypeHistory $anonfun$new$1(final TypeHistory $this) {
         return $this;
      }

      // $FF: synthetic method
      public static final TypeHistory $anonfun$new$2(final TypeHistory $this) {
         return $this;
      }

      public TypeHistory(final int _validFrom, final Types.Type _info, final TypeHistory _prev) {
         this.scala$reflect$internal$Symbols$TypeHistory$$_validFrom = _validFrom;
         this.scala$reflect$internal$Symbols$TypeHistory$$_info = _info;
         this.scala$reflect$internal$Symbols$TypeHistory$$_prev = _prev;
         if (Symbols.this == null) {
            throw null;
         } else {
            int var5;
            label32: {
               this.$outer = Symbols.this;
               super();
               if (this.scala$reflect$internal$Symbols$TypeHistory$$_prev() != null) {
                  var5 = this.scala$reflect$internal$Symbols$TypeHistory$$_validFrom() & 255;
                  TypeHistory var10001 = this.scala$reflect$internal$Symbols$TypeHistory$$_prev();
                  if (var10001 == null) {
                     throw null;
                  }

                  if (var5 <= (var10001.scala$reflect$internal$Symbols$TypeHistory$$_validFrom() & 255)) {
                     var5 = 0;
                     break label32;
                  }
               }

               var5 = 1;
            }

            if (!var5) {
               throw Symbols.this.throwAssertionError(this);
            } else if (this.scala$reflect$internal$Symbols$TypeHistory$$_validFrom() == 0) {
               throw Symbols.this.throwAssertionError(this);
            }
         }
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return Class.lambdaDeserialize<invokedynamic>(var0);
      }
   }

   private class TypeHistory$ extends AbstractFunction3 implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public final String toString() {
         return "TypeHistory";
      }

      public TypeHistory apply(final int _validFrom, final Types.Type _info, final TypeHistory _prev) {
         return this.$outer.new TypeHistory(_validFrom, _info, _prev);
      }

      public Option unapply(final TypeHistory x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple3(x$0.scala$reflect$internal$Symbols$TypeHistory$$_validFrom(), x$0.scala$reflect$internal$Symbols$TypeHistory$$_info(), x$0.scala$reflect$internal$Symbols$TypeHistory$$_prev())));
      }

      public TypeHistory$() {
         if (Symbols.this == null) {
            throw null;
         } else {
            this.$outer = Symbols.this;
            super();
         }
      }
   }

   public class SymbolOps implements Product, Serializable {
      private final boolean isFlagRelated;
      private final long mask;
      // $FF: synthetic field
      public final SymbolTable $outer;

      public Iterator productElementNames() {
         return Product.productElementNames$(this);
      }

      public boolean isFlagRelated() {
         return this.isFlagRelated;
      }

      public long mask() {
         return this.mask;
      }

      public SymbolOps copy(final boolean isFlagRelated, final long mask) {
         return this.scala$reflect$internal$Symbols$SymbolOps$$$outer().new SymbolOps(isFlagRelated, mask);
      }

      public boolean copy$default$1() {
         return this.isFlagRelated();
      }

      public long copy$default$2() {
         return this.mask();
      }

      public String productPrefix() {
         return "SymbolOps";
      }

      public int productArity() {
         return 2;
      }

      public Object productElement(final int x$1) {
         switch (x$1) {
            case 0:
               return this.isFlagRelated();
            case 1:
               return this.mask();
            default:
               return Statics.ioobe(x$1);
         }
      }

      public Iterator productIterator() {
         return new ScalaRunTime..anon.1(this);
      }

      public boolean canEqual(final Object x$1) {
         return x$1 instanceof SymbolOps;
      }

      public String productElementName(final int x$1) {
         switch (x$1) {
            case 0:
               return "isFlagRelated";
            case 1:
               return "mask";
            default:
               return (String)Statics.ioobe(x$1);
         }
      }

      public int hashCode() {
         int var1 = -889275714;
         var1 = Statics.mix(var1, this.productPrefix().hashCode());
         var1 = Statics.mix(var1, this.isFlagRelated() ? 1231 : 1237);
         var1 = Statics.mix(var1, Statics.longHash(this.mask()));
         int finalizeHash_length = 2;
         return Statics.avalanche(var1 ^ finalizeHash_length);
      }

      public String toString() {
         return scala.runtime.ScalaRunTime..MODULE$._toString(this);
      }

      public boolean equals(final Object x$1) {
         if (this != x$1) {
            if (x$1 instanceof SymbolOps && ((SymbolOps)x$1).scala$reflect$internal$Symbols$SymbolOps$$$outer() == this.scala$reflect$internal$Symbols$SymbolOps$$$outer()) {
               SymbolOps var2 = (SymbolOps)x$1;
               if (this.isFlagRelated() == var2.isFlagRelated() && this.mask() == var2.mask() && var2.canEqual(this)) {
                  return true;
               }
            }

            return false;
         } else {
            return true;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$Symbols$SymbolOps$$$outer() {
         return this.$outer;
      }

      public SymbolOps(final boolean isFlagRelated, final long mask) {
         this.isFlagRelated = isFlagRelated;
         this.mask = mask;
         if (Symbols.this == null) {
            throw null;
         } else {
            this.$outer = Symbols.this;
            super();
         }
      }
   }

   public class SymbolOps$ extends AbstractFunction2 implements Serializable {
      // $FF: synthetic field
      private final SymbolTable $outer;

      public final String toString() {
         return "SymbolOps";
      }

      public SymbolOps apply(final boolean isFlagRelated, final long mask) {
         return this.$outer.new SymbolOps(isFlagRelated, mask);
      }

      public Option unapply(final SymbolOps x$0) {
         return (Option)(x$0 == null ? scala.None..MODULE$ : new Some(new Tuple2.mcZJ.sp(x$0.isFlagRelated(), x$0.mask())));
      }

      public SymbolOps$() {
         if (Symbols.this == null) {
            throw null;
         } else {
            this.$outer = Symbols.this;
            super();
         }
      }
   }

   public interface FreeSymbol {
      String origin();
   }
}
