package scala.reflect.internal;

import java.io.Serializable;
import java.lang.invoke.SerializedLambda;
import scala.Function0;
import scala.Function1;
import scala.Function2;
import scala.MatchError;
import scala.Option;
import scala.Predef;
import scala.ScalaReflectionException;
import scala.Some;
import scala.Tuple2;
import scala.Tuple3;
import scala.Tuple4;
import scala.Tuple5;
import scala.Tuple6;
import scala.Tuple7;
import scala.Tuple9;
import scala.collection.AbstractIterable;
import scala.collection.IterableOps;
import scala.collection.Iterator;
import scala.collection.LinearSeqOps;
import scala.collection.SeqFactory;
import scala.collection.SeqOps;
import scala.collection.StrictOptimizedIterableOps;
import scala.collection.StrictOptimizedLinearSeqOps;
import scala.collection.StrictOptimizedSeqOps;
import scala.collection.StringOps;
import scala.collection.StringOps.;
import scala.collection.immutable.List;
import scala.collection.immutable.Map;
import scala.collection.immutable.Nil;
import scala.collection.immutable.Seq;
import scala.collection.mutable.Builder;
import scala.collection.mutable.ListBuffer;
import scala.reflect.ScalaSignature;
import scala.reflect.api.Liftables;
import scala.reflect.internal.util.FreshNameCreator;
import scala.reflect.internal.util.NoPosition$;
import scala.reflect.internal.util.Position;
import scala.reflect.internal.util.package$;
import scala.runtime.BoxedUnit;
import scala.runtime.BoxesRunTime;
import scala.runtime.Nothing;
import scala.runtime.ScalaRunTime;
import scala.runtime.Statics;

@ScalaSignature(
   bytes = "\u0006\u0005=]b\u0001DB%\u0007\u0017\u0002\n1!\u0001\u0004Z==\u0002bBB2\u0001\u0011\u00051Q\r\u0004\u0007\u0007[\u0002\u0001aa\u001c\t\u000f\r\u0005%\u0001\"\u0001\u0004\u0004\"91q\u0011\u0002\u0005\u0002\r%\u0005bBB]\u0005\u0011\u000511\u0018\u0005\b\u0007\u000f\u0014A\u0011CBe\u0011\u001d\u0019IN\u0001C\u0001\u00077Dqa!=\u0003\t\u0003\u0019\u0019\u0010C\u0005\u0005\u001c\t\t\n\u0011\"\u0001\u0005\u001e!IA1\u0007\u0002\u0012\u0002\u0013\u0005AQ\u0007\u0005\b\ts\u0011A\u0011\u0001C\u001e\u0011%!IEAI\u0001\n\u0003!i\u0002C\u0005\u0005L\t\t\n\u0011\"\u0001\u00056!9AQ\n\u0002\u0005\u0002\u0011=\u0003b\u0002C8\u0005\u0011\u0005A\u0011\u000f\u0005\b\t\u000f\u0013A\u0011\u0001CE\u0011\u001d!iL\u0001C\u0001\t\u007fCq\u0001\"7\u0003\t\u0003!Y\u000eC\u0004\u0005j\n!\t\u0001b;\t\u000f\u0011e(\u0001\"\u0001\u0005|\"9QQ\u0001\u0002\u0005\u0002\u0015\u001d\u0001bBC\n\u0005\u0011\u0005QQ\u0003\u0005\b\u000b3\u0011A\u0011AC\u000e\u0011\u001d)\u0019C\u0001C\u0001\u000bKAq!b\f\u0003\t\u0003)\t\u0004C\u0004\u0006F\t!\t!b\u0012\t\u000f\u0015M#\u0001\"\u0001\u0006V!9Q\u0011\u000e\u0002\u0005\u0002\u0015-\u0004bBC=\u0005\u0011\u0005Q1\u0010\u0005\b\u000b\u001b\u0013A\u0011ACH\u0011\u001d)IJ\u0001C\u0001\u000b7Cq!\"+\u0003\t\u0003)Y\u000bC\u0004\u0006<\n!\t!\"0\t\u000f\u0015M'\u0001\"\u0001\u0006V\"9QQ\u001d\u0002\u0005\u0002\u0015\u001d\bbBCz\u0005\u0011\u0005QQ\u001f\u0005\b\u000bs\u0014A\u0011AC~\u0011\u001d1iA\u0001C\u0001\r\u001fAqAb\u0007\u0003\t\u00031i\u0002C\u0004\u0007$\t!\tA\"\n\t\u000f\u0019\r\"\u0001\"\u0001\u0007*!9aq\u0006\u0002\u0005\u0002\u0019E\u0002\"\u0003D+\u0005E\u0005I\u0011\u0001D,\u0011%1YFAI\u0001\n\u000319\u0006C\u0004\u00070\t!\tA\"\u0018\t\u000f\u0019\u0015$\u0001\"\u0001\u0007h!9aQ\r\u0002\u0005\u0002\u0019-\u0004b\u0002D8\u0005\u0011\u0005a\u0011\u000f\u0005\b\r\u007f\u0012A\u0011\u0001DA\u0011\u001d1yH\u0001C\u0001\r\u000fCqA\"$\u0003\t\u00031y\tC\u0004\u0007\u000e\n!\tAb%\b\u000f\u0019]%\u0001#\u0001\u0007\u001a\u001a9aQ\u0014\u0002\t\u0002\u0019}\u0005bBBAm\u0011\u0005aq\u0015\u0005\b\rS3D\u0011\u0001DV\u0011\u001d1yK\u000eC\u0001\rcCqAb/\u0003\t\u00031i\fC\u0004\u0007<\n!\tAb1\t\u000f\u0019%'\u0001\"\u0001\u0007L\"9a\u0011\u001c\u0002\u0005\u0002\u0019m\u0007\"\u0003Dt\u0005E\u0005I\u0011\u0001C\u001b\u0011\u001d1IO\u0001C\u0001\rWDqA\">\u0003\t'19pB\u0004\b\u0006\tA\tab\u0002\u0007\u000f\u001d%!\u0001#\u0001\b\f!91\u0011\u0011\"\u0005\u0002\u001dM\u0001b\u0002DU\u0005\u0012\u0005qQ\u0003\u0005\b\r_\u0013E\u0011AD\u0010\u000f\u001d9\tD\u0001E\u0001\u000fg1qa\"\u000e\u0003\u0011\u000399\u0004C\u0004\u0004\u0002\u001e#\tab\u0010\t\u000f\u0019%v\t\"\u0001\bB!9aqV$\u0005\u0002\u001d\u001dsaBD'\u0005!\u0005qq\n\u0004\b\u000f#\u0012\u0001\u0012AD*\u0011\u001d\u0019\t\t\u0014C\u0001\u000f7BqA\"+M\t\u00039i\u0006C\u0004\u000702#\ta\"\u001a\b\u000f\u001d5$\u0001#\u0001\bp\u00199q\u0011\u000f\u0002\t\u0002\u001dM\u0004bBBA#\u0012\u0005qQ\u000f\u0005\b\rS\u000bF\u0011AD<\u0011\u001d1y+\u0015C\u0001\u000f{:qa\"!\u0003\u0011\u00039\u0019IB\u0004\b\u0006\nA\tab\"\t\u000f\r\u0005e\u000b\"\u0001\b\u0010\"9a\u0011\u0016,\u0005\u0002\u001dE\u0005b\u0002DX-\u0012\u0005qqS\u0004\b\u000f?\u0013\u0001\u0012CDQ\r\u001d9\u0019K\u0001E\t\u000fKCqa!!\\\t\u000399\u000bC\u0004\u00070n#\ta\"+\u0007\r\u001dm&\u0001CD_\u0011)9yL\u0018B\u0001B\u0003%A\u0011\u000e\u0005\b\u0007\u0003sF\u0011ADa\u0011\u001d1yK\u0018C\u0001\u000f\u000fDqab7_\t\u00039inB\u0004\b`\nA\tb\"9\u0007\u000f\u001dm&\u0001#\u0005\bd\"91\u0011\u00113\u0005\u0002\u001d\u0015\bbBDt\u0005\u0011Eq\u0011^\u0004\b\u000f[\u0014\u0001\u0012ADx\r\u001d9\tP\u0001E\u0001\u000fgDqa!!i\t\u00039Y\u0010C\u0004\u0007*\"$\ta\"@\t\u000f\u0019=\u0006\u000e\"\u0001\t\"\u001d9\u0001R\u0006\u0002\t\u0002!=ba\u0002E\u0019\u0005!\u0005\u00012\u0007\u0005\b\u0007\u0003kG\u0011\u0001E\u001e\u0011\u001d1I+\u001cC\u0001\u0011{AqAb,n\t\u0003AieB\u0004\tZ\tA\t\u0001c\u0017\u0007\u000f!u#\u0001#\u0001\t`!91\u0011\u0011:\u0005\u0002!\u001d\u0004b\u0002DUe\u0012\u0005\u0001\u0012\u000e\u0005\b\r_\u0013H\u0011\u0001E?\u000f\u001dA)I\u0001E\u0001\u0011\u000f3q\u0001##\u0003\u0011\u0003AY\tC\u0004\u0004\u0002^$\t\u0001c%\t\u000f\u0019%v\u000f\"\u0001\t\u0016\"9aqV<\u0005\u0002!\u001dfA\u0002EZ\u0005!A)\f\u0003\u0006\t8n\u0014\t\u0011)A\u0005\u0011sCqa!!|\t\u0003Ay\fC\u0004\tFn$\t\u0001c2\t\u000f\u0019=6\u0010\"\u0001\tN\u001e9\u0001\u0012\u001b\u0002\t\u0012!Mga\u0002Ek\u0005!E\u0001r\u001b\u0005\t\u0007\u0003\u000b\u0019\u0001\"\u0001\tZ\u001e9\u00012\u001c\u0002\t\u0012!uga\u0002Ep\u0005!E\u0001\u0012\u001d\u0005\t\u0007\u0003\u000bI\u0001\"\u0001\td\u001e9\u0001R\u001d\u0002\t\u0012!\u001dha\u0002Eu\u0005!E\u00012\u001e\u0005\t\u0007\u0003\u000by\u0001\"\u0001\tn\u001e9\u0001r\u001e\u0002\t\u0012!Eha\u0002Ez\u0005!E\u0001R\u001f\u0005\t\u0007\u0003\u000b)\u0002\"\u0001\tx\u001e9\u0001\u0012 \u0002\t\u0002!mha\u0002E\u007f\u0005!\u0005\u0001r \u0005\t\u0007\u0003\u000bY\u0002\"\u0001\n\b!Aa\u0011VA\u000e\t\u0003II\u0001\u0003\u0005\u00070\u0006mA\u0011AE\u0007\u000f\u001dI\u0019B\u0001E\u0001\u0013+1q!c\u0006\u0003\u0011\u0003II\u0002\u0003\u0005\u0004\u0002\u0006\u0015B\u0011AE\u000e\u0011!1I+!\n\u0005\u0002%u\u0001\u0002\u0003DX\u0003K!\t!#\t\b\u000f%\u0015\"\u0001#\u0001\n(\u00199\u0011\u0012\u0006\u0002\t\u0002%-\u0002\u0002CBA\u0003_!\t!c\r\t\u0011\u0019%\u0016q\u0006C\u0001\u0013kA\u0001Bb,\u00020\u0011\u0005\u0011rH\u0004\b\u0013\u000f\u0012\u0001\u0012AE%\r\u001dIYE\u0001E\u0001\u0013\u001bB\u0001b!!\u0002:\u0011\u0005\u0011r\n\u0005\t\r_\u000bI\u0004\"\u0001\nR\u001d9\u0011R\u000b\u0002\t\u0002%]caBE-\u0005!\u0005\u00112\f\u0005\t\u0007\u0003\u000b\t\u0005\"\u0001\nd!Aa\u0011VA!\t\u0003I)\u0007\u0003\u0005\u00070\u0006\u0005C\u0011AE5\u000f\u001dIiG\u0001E\u0001\u0013_2q!#\u001d\u0003\u0011\u0003I\u0019\b\u0003\u0005\u0004\u0002\u0006-C\u0011AE>\u0011!1I+a\u0013\u0005\u0002%u\u0004\u0002\u0003DX\u0003\u0017\"\t!##\b\u000f%E%\u0001#\u0001\n\u0014\u001a9\u0011R\u0013\u0002\t\u0002%]\u0005\u0002CBA\u0003+\"\t!c(\t\u0011\u0019%\u0016Q\u000bC\u0001\u0013CC\u0001Bb,\u0002V\u0011\u0005\u00112V\u0004\b\u0013o\u0013\u0001\u0012AE]\r\u001dIYL\u0001E\u0001\u0013{C\u0001b!!\u0002`\u0011\u0005\u0011R\u0019\u0005\t\rS\u000by\u0006\"\u0001\nH\"AaqVA0\t\u0003IyN\u0002\u0004\nh\nA\u0011\u0012\u001e\u0005\f\u0013c\f9G!A!\u0002\u0013!I\u0007\u0003\u0005\u0004\u0002\u0006\u001dD\u0011AEz\u0011!II0a\u001a\u0005\u0002%m\b\u0002\u0003DU\u0003O\"\t!c@\t\u0011\u0019=\u0016q\rC\u0001\u0015\u00139qA#\u0005\u0003\u0011\u0003Q\u0019BB\u0004\u000b\u0016\tA\tAc\u0006\t\u0011\r\u0005\u0015Q\u000fC\u0001\u001539qAc\u0007\u0003\u0011\u0003QiBB\u0004\u000b \tA\tA#\t\t\u0011\r\u0005\u00151\u0010C\u0001\u0015G9qA#\n\u0003\u0011\u0003Q9CB\u0004\u000b*\tA\tAc\u000b\t\u0011\r\u0005\u0015\u0011\u0011C\u0001\u0015gA\u0001B\"+\u0002\u0002\u0012\u0005!R\u0007\u0005\t\r_\u000b\t\t\"\u0001\u000b>!9!R\t\u0002\u0005\u0002)\u001d\u0003b\u0002F6\u0005\u0011\u0005!RN\u0004\b\u0015\u0007\u0013\u0001\u0012\u0001FC\r\u001dQ9I\u0001E\u0001\u0015\u0013C\u0001b!!\u0002\u0010\u0012\u0005!\u0012\u0013\u0005\t\rS\u000by\t\"\u0001\u000b\u0014\"AaqVAH\t\u0003QYjB\u0004\u000b \nA\tA#)\u0007\u000f)\r&\u0001#\u0001\u000b&\"A1\u0011QAM\t\u0003Qi\u000b\u0003\u0005\u0007*\u0006eE\u0011\u0001FX\u0011!1y+!'\u0005\u0002)Uva\u0002F]\u0005!\u0005!2\u0018\u0004\b\u0015{\u0013\u0001\u0012\u0001F`\u0011!\u0019\t)a)\u0005\u0002)\u001d\u0007\u0002\u0003DU\u0003G#\tA#3\t\u0011\u0019=\u00161\u0015C\u0001\u0015\u001b<qAc5\u0003\u0011\u0003Q)NB\u0004\u000bX\nA\tA#7\t\u0011\r\u0005\u0015Q\u0016C\u0001\u0015CD\u0001B\"+\u0002.\u0012\u0005!2\u001d\u0005\t\r_\u000bi\u000b\"\u0001\u000bf\u001e9!2\u001e\u0002\t\u0012)5ha\u0002Fx\u0005!E!\u0012\u001f\u0005\t\u0007\u0003\u000b9\f\"\u0001\u000bt\"AaqVA\\\t\u0003Q)pB\u0004\u000b~\nA\tAc@\u0007\u000f-\u0005!\u0001#\u0001\f\u0004!A1\u0011QA`\t\u0003Yi\u0001\u0003\u0005\f\u0010\u0005}F\u0011IF\t\u0011!Y)\"a0\u0005\u0002-]\u0001\u0002\u0003DU\u0003\u007f#\tac\u0007\t\u0011\u0019%\u0016q\u0018C\u0001\u0017?9qac\t\u0003\u0011\u0003Y)CB\u0004\f(\tA\ta#\u000b\t\u0011\r\u0005\u0015Q\u001aC\u0001\u0017cA\u0001B\"+\u0002N\u0012\u000512\u0007\u0005\t\r_\u000bi\r\"\u0001\f>\u001d91R\t\u0002\t\u0012-\u001dcaBF%\u0005!E12\n\u0005\t\u0007\u0003\u000b9\u000e\"\u0001\fN!AaqVAl\t\u0003YyeB\u0004\fX\tA\tb#\u0017\u0007\u000f-m#\u0001#\u0005\f^!A1\u0011QAp\t\u0003Yy\u0006\u0003\u0005\u00070\u0006}G\u0011AF1\u000f\u001dY9G\u0001E\t\u0017S2qac\u001b\u0003\u0011#Yi\u0007\u0003\u0005\u0004\u0002\u0006\u001dH\u0011AF8\u0011!1y+a:\u0005\u0002-EtaBFA\u0005!E12\u0011\u0004\b\u0017\u000b\u0013\u0001\u0012CFD\u0011!\u0019\t)a<\u0005\u0002-%\u0005\u0002\u0003DX\u0003_$\tac#\b\u000f-=%\u0001#\u0005\f\u0012\u001a912\u0013\u0002\t\u0012-U\u0005\u0002CBA\u0003o$\tac&\t\u0011\u0019=\u0016q\u001fC\u0001\u00173;qa#(\u0003\u0011#YyJB\u0004\f\"\nA\tbc)\t\u0011\r\u0005\u0015q C\u0001\u0017KC\u0001Bb,\u0002\u0000\u0012\u00051rU\u0004\b\u0017[\u0013\u0001\u0012CFX\r\u001dY\tL\u0001E\t\u0017gC\u0001b!!\u0003\b\u0011\u00051R\u0017\u0005\t\r_\u00139\u0001\"\u0001\f8\u001a112\u0018\u0002\t\u0017{C1b!)\u0003\u000e\t\u0005\t\u0015!\u0003\u0007^\"A1\u0011\u0011B\u0007\t\u0003Yy\f\u0003\u0005\u00070\n5A\u0011AFc\u000f\u001dYIM\u0001E\t\u0017\u00174qa#4\u0003\u0011#Yy\r\u0003\u0005\u0004\u0002\n]A\u0011AFi\u000f\u001dY\u0019N\u0001E\t\u0017+4qac6\u0003\u0011#YI\u000e\u0003\u0005\u0004\u0002\nuA\u0011AFn\u000f\u001dYiN\u0001E\t\u0017?4qa#9\u0003\u0011#Y\u0019\u000f\u0003\u0005\u0004\u0002\n\rB\u0011AFs\u000f\u001dY9O\u0001E\t\u0017S4qac;\u0003\u0011#Yi\u000f\u0003\u0005\u0004\u0002\n%B\u0011AFx\u0011!1yK!\u000b\u0005\u0002-E\bbBF{\u0005\u0011E1r_\u0004\b\u0017{\u0014\u0001\u0012AF\u0000\r\u001da\tA\u0001E\u0001\u0019\u0007A\u0001b!!\u00034\u0011\u0005A2\u0002\u0005\t\rS\u0013\u0019\u0004\"\u0001\r\u000e!Aaq\u0016B\u001a\t\u0003a\u0019bB\u0004\r\u0018\tA\t\u0001$\u0007\u0007\u000f1m!\u0001#\u0001\r\u001e!A1\u0011\u0011B\u001f\t\u0003ay\u0002\u0003\u0005\u0007*\nuB\u0011\u0001G\u0011\u0011!1yK!\u0010\u0005\u00021\u001dra\u0002G\u0016\u0005!EAR\u0006\u0004\b\u0019_\u0011\u0001\u0012\u0003G\u0019\u0011!\u0019\tIa\u0012\u0005\u00021M\u0002\u0002\u0003DX\u0005\u000f\"\t\u0001$\u000e\b\u000f1m\"\u0001#\u0005\r>\u00199Ar\b\u0002\t\u00121\u0005\u0003\u0002CBA\u0005\u001f\"\t\u0001d\u0011\t\u0011\u0019=&q\nC\u0001\u0019\u000b:q\u0001$\u0013\u0003\u0011#aYEB\u0004\rN\tA\t\u0002d\u0014\t\u0011\r\u0005%q\u000bC\u0001\u0019#B\u0001Bb,\u0003X\u0011\u0005A2K\u0004\b\u0019/\u0012\u0001\u0012\u0003G-\r\u001daYF\u0001E\t\u0019;B\u0001b!!\u0003`\u0011\u0005Ar\f\u0005\t\r_\u0013y\u0006\"\u0001\rb!9Ar\r\u0002\u0005\u00121%ta\u0002G8\u0005!\u0005A\u0012\u000f\u0004\b\u0019g\u0012\u0001\u0012\u0001G;\u0011!\u0019\tI!\u001b\u0005\u00021u\u0004\u0002\u0003DU\u0005S\"\t\u0001d \t\u0011\u0019=&\u0011\u000eC\u0001\u0019\u0013;q\u0001d$\u0003\u0011\u0003a\tJB\u0004\r\u0014\nA\t\u0001$&\t\u0011\r\u0005%1\u000fC\u0001\u0019;C\u0001B\"+\u0003t\u0011\u0005Ar\u0014\u0005\t\r_\u0013\u0019\b\"\u0001\r(\u001e9Ar\u0016\u0002\t\u00021Efa\u0002GZ\u0005!\u0005AR\u0017\u0005\t\u0007\u0003\u0013i\b\"\u0001\r>\"Aa\u0011\u0016B?\t\u0003ay\f\u0003\u0005\u00070\nuD\u0011\u0001Gj\u000f\u001daYN\u0001E\u0001\u0019;4q\u0001d8\u0003\u0011\u0003a\t\u000f\u0003\u0005\u0004\u0002\n\u001dE\u0011\u0001Gu\u0011!1IKa\"\u0005\u00021-\b\u0002\u0003DX\u0005\u000f#\t\u0001d=\b\u000f1u(\u0001#\u0001\r\u0000\u001a9Q\u0012\u0001\u0002\t\u00025\r\u0001\u0002CBA\u0005##\t!d\u0003\t\u0011\u0019%&\u0011\u0013C\u0001\u001b\u001bA\u0001Bb,\u0003\u0012\u0012\u0005Q\u0012C\u0004\b\u001b/\u0011\u0001\u0012AG\r\r\u001diYB\u0001E\u0001\u001b;A\u0001b!!\u0003\u001c\u0012\u0005QRE\u0004\t\u001bO\u0011Y\n#\u0003\u000e*\u0019AQR\u0006BN\u0011\u0013iy\u0003\u0003\u0005\u0004\u0002\n\u0005F\u0011AG\u0019\u0011!1IK!)\u0005\u00025M\u0002\u0002\u0003DX\u0005C#\t!d\u0010\b\u00115\u001d#1\u0014E\u0005\u001b\u00132\u0001\"d\u0013\u0003\u001c\"%QR\n\u0005\t\u0007\u0003\u0013Y\u000b\"\u0001\u000eP!Aa\u0011\u0016BV\t\u0003i\t\u0006\u0003\u0005\u00070\n-F\u0011AG,\u000f!iyFa'\t\n5\u0005d\u0001CG2\u00057CI!$\u001a\t\u0011\r\u0005%Q\u0017C\u0001\u001bOB\u0001B\"+\u00036\u0012\u0005Q\u0012\u000e\u0005\t\r_\u0013)\f\"\u0001\u000e|\u001dAQ2\u0011BN\u0011\u0013i)I\u0002\u0005\u000e\b\nm\u0005\u0012BGE\u0011!\u0019\tIa0\u0005\u00025-\u0005\u0002\u0003DU\u0005\u007f#\t!$$\t\u0011\u0019=&q\u0018C\u0001\u001b';\u0001\"d&\u0003\u001c\"%Q\u0012\u0014\u0004\t\u001b7\u0013Y\n#\u0003\u000e\u001e\"A1\u0011\u0011Be\t\u0003iy\n\u0003\u0005\u0007*\n%G\u0011AGQ\u0011!1yK!3\u0005\u00025\u0015v\u0001CGV\u00057CI!$,\u0007\u00115=&1\u0014E\u0005\u001bcC\u0001b!!\u0003T\u0012\u0005Q2\u0017\u0005\t\rS\u0013\u0019\u000e\"\u0001\u000e6\"Aaq\u0016Bj\t\u0003iYl\u0002\u0005\u000eD\nm\u0005\u0012BGc\r!i9Ma'\t\n5%\u0007\u0002CBA\u0005;$\t!d3\t\u0011\u0019%&Q\u001cC\u0001\u001b\u001bD\u0001Bb,\u0003^\u0012\u0005QR\\\u0004\t\u001bC\u0014Y\n#\u0003\u000ed\u001aAQR\u001dBN\u0011\u0013i9\u000f\u0003\u0005\u0004\u0002\n\u001dH\u0011AGu\u0011!1IKa:\u0005\u00025-\b\u0002\u0003DX\u0005O$\t!$?\b\u00119\u0005!1\u0014E\u0005\u001d\u00071\u0001B$\u0002\u0003\u001c\"%ar\u0001\u0005\t\u0007\u0003\u0013\t\u0010\"\u0001\u000f\n!Aa\u0011\u0016By\t\u0003qY\u0001\u0003\u0005\u00070\nEH\u0011\u0001H\t\u0011!q)Ba'\u0005\n9]\u0001\u0002\u0003H\u0010\u00057#IA$\t\t\u0011\u0019%&1\u0014C\u0001\u001dKA\u0001Bb,\u0003\u001c\u0012\u0005aRG\u0004\b\u001dw\u0011\u0001\u0012\u0001H\u001f\r\u001dqyD\u0001E\u0001\u001d\u0003B\u0001b!!\u0004\u0004\u0011\u0005a\u0012\n\u0005\t\rS\u001b\u0019\u0001\"\u0001\u000fL!AaqVB\u0002\t\u0003q\tfB\u0004\u000fZ\tA\tAd\u0017\u0007\u000f9u#\u0001#\u0001\u000f`!A1\u0011QB\u0007\t\u0003q9\u0007\u0003\u0005\u0007*\u000e5A\u0011\u0001H5\u0011!1yk!\u0004\u0005\u00029=ta\u0002H<\u0005!\u0005a\u0012\u0010\u0004\b\u001dw\u0012\u0001\u0012\u0001H?\u0011!\u0019\tia\u0006\u0005\u00029\u0015\u0005\u0002\u0003DU\u0007/!\tAd\"\t\u0011\u0019=6q\u0003C\u0001\u001d';qAd'\u0003\u0011\u0003qiJB\u0004\u000f \nA\tA$)\t\u0011\r\u00055\u0011\u0005C\u0001\u001dSC\u0001B\"+\u0004\"\u0011\u0005a2\u0016\u0005\t\r_\u001b\t\u0003\"\u0001\u000f8\u001e9a2\u0018\u0002\t\u00029ufa\u0002H`\u0005!\u0005a\u0012\u0019\u0005\t\u0007\u0003\u001bY\u0003\"\u0001\u000fJ\"Aa\u0011VB\u0016\t\u0003qY\r\u0003\u0005\u00070\u000e-B\u0011\u0001Hl\u000f\u001dqYN\u0001E\u0001\u001d;4qAd8\u0003\u0011\u0003q\t\u000f\u0003\u0005\u0004\u0002\u000eUB\u0011\u0001Hu\u0011!1Ik!\u000e\u0005\u00029-\b\u0002\u0003DX\u0007k!\tA$?\b\u000f9u(\u0001#\u0001\u000f\u0000\u001a9q\u0012\u0001\u0002\t\u0002=\r\u0001\u0002CBA\u0007\u007f!\tad\u0003\t\u0011\u0019%6q\bC\u0001\u001f\u001bA\u0001Bb,\u0004@\u0011\u0005q2\u0004\u0005\n\u001fW\u0001!\u0019!C\u0001\u001f[\u0011!CU3jM&\u001c\u0017\r^5p]N+\b\u000f]8si*!1QJB(\u0003!Ig\u000e^3s]\u0006d'\u0002BB)\u0007'\nqA]3gY\u0016\u001cGO\u0003\u0002\u0004V\u0005)1oY1mC\u000e\u00011c\u0001\u0001\u0004\\A!1QLB0\u001b\t\u0019\u0019&\u0003\u0003\u0004b\rM#AB!osJ+g-\u0001\u0004%S:LG\u000f\n\u000b\u0003\u0007O\u0002Ba!\u0018\u0004j%!11NB*\u0005\u0011)f.\u001b;\u0003-I+\u0017NZ5dCRLwN\\*vaB|'\u000f^%na2\u001cRAAB.\u0007c\u0002Baa\u001d\u0004v5\t\u0001!\u0003\u0003\u0004x\re$!\u0006*fS\u001aL7-\u0019;j_:\u001cV\u000f\u001d9peR\f\u0005/[\u0005\u0005\u0007w\u001aiHA\u0005J]R,'O\\1mg*!1qPB(\u0003\r\t\u0007/[\u0001\u0007y%t\u0017\u000e\u001e \u0015\u0005\r\u0015\u0005cAB:\u0005\u0005Q1/\u001a7fGR$\u0016\u0010]3\u0015\r\r-5QSBP!\u0011\u0019\u0019h!$\n\t\r=5\u0011\u0013\u0002\u000b)f\u0004XmU=nE>d\u0017\u0002BBJ\u0007\u0017\u0012qaU=nE>d7\u000fC\u0004\u0004\u0018\u0012\u0001\ra!'\u0002\u000b=<h.\u001a:\u0011\t\rM41T\u0005\u0005\u0007;\u001b\tJ\u0001\u0004Ts6\u0014w\u000e\u001c\u0005\b\u0007C#\u0001\u0019ABR\u0003\u0011q\u0017-\\3\u0011\t\r\u001561\u0017\b\u0005\u0007O\u001by\u000b\u0005\u0003\u0004*\u000eMSBABV\u0015\u0011\u0019ika\u0016\u0002\rq\u0012xn\u001c;?\u0013\u0011\u0019\tla\u0015\u0002\rA\u0013X\rZ3g\u0013\u0011\u0019)la.\u0003\rM#(/\u001b8h\u0015\u0011\u0019\tla\u0015\u0002\u0015M,G.Z2u)\u0016\u0014X\u000e\u0006\u0004\u0004>\u000e\r7Q\u0019\t\u0005\u0007g\u001ay,\u0003\u0003\u0004B\u000eE%A\u0003+fe6\u001c\u00160\u001c2pY\"91qS\u0003A\u0002\re\u0005bBBQ\u000b\u0001\u000711U\u0001\u0007g\u0016dWm\u0019;\u0015\r\re51ZBg\u0011\u001d\u00199J\u0002a\u0001\u00073Cqa!)\u0007\u0001\u0004\u0019y\r\u0005\u0003\u0004t\rE\u0017\u0002BBj\u0007+\u0014AAT1nK&!1q[B&\u0005\u0015q\u0015-\\3t\u0003Y\u0019X\r\\3di>3XM\u001d7pC\u0012,G-T3uQ>$G\u0003CBo\u0007G\u001c)oa:\u0011\t\rM4q\\\u0005\u0005\u0007C\u001c\tJ\u0001\u0007NKRDw\u000eZ*z[\n|G\u000eC\u0004\u0004\u0018\u001e\u0001\ra!'\t\u000f\r\u0005v\u00011\u0001\u0004$\"91\u0011^\u0004A\u0002\r-\u0018!B5oI\u0016D\b\u0003BB/\u0007[LAaa<\u0004T\t\u0019\u0011J\u001c;\u0002\u00179,wO\u0012:fKR+'/\u001c\u000b\u000b\u0007k\u001cYp!@\u0005\u000e\u0011]\u0001\u0003BB:\u0007oLAa!?\u0004\u0012\nqaI]3f)\u0016\u0014XnU=nE>d\u0007bBBQ\u0011\u0001\u000711\u0015\u0005\t\u0007\u007fDA\u00111\u0001\u0005\u0002\u0005)a/\u00197vKB11Q\fC\u0002\t\u000fIA\u0001\"\u0002\u0004T\tAAHY=oC6,g\b\u0005\u0003\u0004^\u0011%\u0011\u0002\u0002C\u0006\u0007'\u00121!\u00118z\u0011%!y\u0001\u0003I\u0001\u0002\u0004!\t\"A\u0003gY\u0006<7\u000f\u0005\u0003\u0004^\u0011M\u0011\u0002\u0002C\u000b\u0007'\u0012A\u0001T8oO\"IA\u0011\u0004\u0005\u0011\u0002\u0003\u000711U\u0001\u0007_JLw-\u001b8\u0002+9,wO\u0012:fKR+'/\u001c\u0013eK\u001a\fW\u000f\u001c;%gU\u0011Aq\u0004\u0016\u0005\t#!\tc\u000b\u0002\u0005$A!AQ\u0005C\u0018\u001b\t!9C\u0003\u0003\u0005*\u0011-\u0012!C;oG\",7m[3e\u0015\u0011!ica\u0015\u0002\u0015\u0005tgn\u001c;bi&|g.\u0003\u0003\u00052\u0011\u001d\"!E;oG\",7m[3e-\u0006\u0014\u0018.\u00198dK\u0006)b.Z<Ge\u0016,G+\u001a:nI\u0011,g-Y;mi\u0012\"TC\u0001C\u001cU\u0011\u0019\u0019\u000b\"\t\u0002\u00179,wO\u0012:fKRK\b/\u001a\u000b\t\t{!\u0019\u0005\"\u0012\u0005HA!11\u000fC \u0013\u0011!\te!%\u0003\u001d\u0019\u0013X-\u001a+za\u0016\u001c\u00160\u001c2pY\"91\u0011U\u0006A\u0002\r\r\u0006\"\u0003C\b\u0017A\u0005\t\u0019\u0001C\t\u0011%!Ib\u0003I\u0001\u0002\u0004\u0019\u0019+A\u000boK^4%/Z3UsB,G\u0005Z3gCVdG\u000f\n\u001a\u0002+9,wO\u0012:fKRK\b/\u001a\u0013eK\u001a\fW\u000f\u001c;%g\u0005ya.Z<OKN$X\rZ*z[\n|G\u000e\u0006\u0007\u0004\u001a\u0012EC1\u000bC+\tG\")\u0007C\u0004\u0004\u0018:\u0001\ra!'\t\u000f\r\u0005f\u00021\u0001\u0004P\"9Aq\u000b\bA\u0002\u0011e\u0013a\u00019pgB!11\u000fC.\u0013\u0011!i\u0006b\u0018\u0003\u0011A{7/\u001b;j_:LA\u0001\"\u0019\u0004L\tI\u0001k\\:ji&|gn\u001d\u0005\b\t\u001fq\u0001\u0019\u0001C\t\u0011\u001d!9G\u0004a\u0001\tS\nq![:DY\u0006\u001c8\u000f\u0005\u0003\u0004^\u0011-\u0014\u0002\u0002C7\u0007'\u0012qAQ8pY\u0016\fg.\u0001\u0007oK^\u001c6m\u001c9f/&$\b\u000e\u0006\u0003\u0005t\u0011u\u0004\u0003BB:\tkJA\u0001b\u001e\u0005z\t)1kY8qK&!A1PB&\u0005\u0019\u00196m\u001c9fg\"9AqP\bA\u0002\u0011\u0005\u0015!B3mK6\u001c\bCBB/\t\u0007\u001bI*\u0003\u0003\u0005\u0006\u000eM#A\u0003\u001fsKB,\u0017\r^3e}\u0005q1/\u001a;B]:|G/\u0019;j_:\u001cX\u0003\u0002CF\t##b\u0001\"$\u0005\u001e\u0012\u0005\u0006\u0003\u0002CH\t#c\u0001\u0001B\u0004\u0005\u0014B\u0011\r\u0001\"&\u0003\u0003M\u000bB\u0001b&\u0004\u001aB!1Q\fCM\u0013\u0011!Yja\u0015\u0003\u000f9{G\u000f[5oO\"9Aq\u0014\tA\u0002\u00115\u0015aA:z[\"9A1\u0015\tA\u0002\u0011\u0015\u0016AB1o]>$8\u000f\u0005\u0004\u0005(\u00125F1\u0017\b\u0005\u0007;\"I+\u0003\u0003\u0005,\u000eM\u0013a\u00029bG.\fw-Z\u0005\u0005\t_#\tL\u0001\u0003MSN$(\u0002\u0002CV\u0007'\u0002Baa\u001d\u00056&!Aq\u0017C]\u00059\teN\\8uCRLwN\\%oM>LA\u0001b/\u0004L\ty\u0011I\u001c8pi\u0006$\u0018n\u001c8J]\u001a|7/A\u0004tKRLeNZ8\u0016\t\u0011\u0005G\u0011\u001a\u000b\u0007\t\u0007$)\rb3\u000f\t\u0011=EQ\u0019\u0005\b\t?\u000b\u0002\u0019\u0001Cd!\u0011!y\t\"3\u0005\u000f\u0011M\u0015C1\u0001\u0005\u0016\"9AQZ\tA\u0002\u0011=\u0017a\u0001;qKB!11\u000fCi\u0013\u0011!\u0019\u000e\"6\u0003\tQK\b/Z\u0005\u0005\t/\u001cYEA\u0003UsB,7/\u0001\u0004nWRC\u0017n\u001d\u000b\u0005\t;$9\u000f\u0005\u0003\u0004t\u0011}\u0017\u0002\u0002Cq\tG\u0014A\u0001\u0016:fK&!AQ]B&\u0005\u0015!&/Z3t\u0011\u001d!yJ\u0005a\u0001\u00073\u000b\u0001\"\\6TK2,7\r\u001e\u000b\u0007\t[$\u0019\u0010b>\u0011\t\rMDq^\u0005\u0005\tc$\u0019O\u0001\u0004TK2,7\r\u001e\u0005\b\tk\u001c\u0002\u0019\u0001Co\u0003%\tX/\u00197jM&,'\u000fC\u0004\u0005 N\u0001\ra!'\u0002\u000f5\\\u0017\nZ3oiR!AQ`C\u0002!\u0011\u0019\u0019\bb@\n\t\u0015\u0005A1\u001d\u0002\u0006\u0013\u0012,g\u000e\u001e\u0005\b\t?#\u0002\u0019ABM\u0003)i7\u000eV=qKR\u0013X-\u001a\u000b\u0005\u000b\u0013)y\u0001\u0005\u0003\u0004t\u0015-\u0011\u0002BC\u0007\tG\u0014\u0001\u0002V=qKR\u0013X-\u001a\u0005\b\u000b#)\u0002\u0019\u0001Ch\u0003\t!\b/\u0001\u0005UQ&\u001cH+\u001f9f)\u0011!y-b\u0006\t\u000f\u0011}e\u00031\u0001\u0004\u001a\u0006Q1+\u001b8hY\u0016$\u0016\u0010]3\u0015\r\u0011=WQDC\u0011\u0011\u001d)yb\u0006a\u0001\t\u001f\f1\u0001\u001d:f\u0011\u001d!yj\u0006a\u0001\u00073\u000b\u0011bU;qKJ$\u0016\u0010]3\u0015\r\u0011=WqEC\u0016\u0011\u001d)I\u0003\u0007a\u0001\t\u001f\fq\u0001\u001e5jgR\u0004X\rC\u0004\u0006.a\u0001\r\u0001b4\u0002\u0011M,\b/\u001a:ua\u0016\fAbQ8ogR\fg\u000e\u001e+za\u0016$B!b\r\u0006:A!11OC\u001b\u0013\u0011)9\u0004\"6\u0003\u0019\r{gn\u001d;b]R$\u0016\u0010]3\t\u000f\r}\u0018\u00041\u0001\u0006<A!11OC\u001f\u0013\u0011)y$\"\u0011\u0003\u0011\r{gn\u001d;b]RLA!b\u0011\u0004L\tI1i\u001c8ti\u0006tGo]\u0001\b)f\u0004XMU3g)!!y-\"\u0013\u0006L\u00155\u0003bBC\u00105\u0001\u0007Aq\u001a\u0005\b\t?S\u0002\u0019ABM\u0011\u001d)yE\u0007a\u0001\u000b#\nA!\u0019:hgB1Aq\u0015CW\t\u001f\f1BU3gS:,G\rV=qKRAQqKC/\u000bC*)\u0007\u0005\u0003\u0004t\u0015e\u0013\u0002BC.\t+\u00141BU3gS:,G\rV=qK\"9QqL\u000eA\u0002\u0015E\u0013a\u00029be\u0016tGo\u001d\u0005\b\u000bGZ\u0002\u0019\u0001C:\u0003\u0015!Wm\u00197t\u0011\u001d)9g\u0007a\u0001\u00073\u000b!\u0002^=qKNKXNY8m\u00035\u0019E.Y:t\u0013:4w\u000eV=qKRAQQNC:\u000bk*9\b\u0005\u0003\u0004t\u0015=\u0014\u0002BC9\t+\u0014Qb\u00117bgNLeNZ8UsB,\u0007bBC09\u0001\u0007Q\u0011\u000b\u0005\b\u000bGb\u0002\u0019\u0001C:\u0011\u001d)9\u0007\ba\u0001\u00073\u000b!\"T3uQ>$G+\u001f9f)\u0019)i(b!\u0006\nB!11OC@\u0013\u0011)\t\t\"6\u0003\u00155+G\u000f[8e)f\u0004X\rC\u0004\u0006\u0006v\u0001\r!b\"\u0002\rA\f'/Y7t!\u0019!9\u000b\",\u0004\u001a\"9Q1R\u000fA\u0002\u0011=\u0017A\u0003:fgVdG\u000fV=qK\u0006\tb*\u001e7mCJLX*\u001a;i_\u0012$\u0016\u0010]3\u0015\t\u0015EUq\u0013\t\u0005\u0007g*\u0019*\u0003\u0003\u0006\u0016\u0012U'!\u0005(vY2\f'/_'fi\"|G\rV=qK\"9Q1\u0012\u0010A\u0002\u0011=\u0017\u0001\u0003)pYf$\u0016\u0010]3\u0015\r\u0015uU1UCT!\u0011\u0019\u0019(b(\n\t\u0015\u0005FQ\u001b\u0002\t!>d\u0017\u0010V=qK\"9QQU\u0010A\u0002\u0015\u001d\u0015A\u0003;za\u0016\u0004\u0016M]1ng\"9Q1R\u0010A\u0002\u0011=\u0017aD#ySN$XM\u001c;jC2$\u0016\u0010]3\u0015\r\u00155V1WC\\!\u0011\u0019\u0019(b,\n\t\u0015EFQ\u001b\u0002\u0010\u000bbL7\u000f^3oi&\fG\u000eV=qK\"9QQ\u0017\u0011A\u0002\u0015\u001d\u0015AC9vC:$\u0018NZ5fI\"9Q\u0011\u0018\u0011A\u0002\u0011=\u0017AC;oI\u0016\u0014H._5oO\u0006i\u0011I\u001c8pi\u0006$X\r\u001a+za\u0016$b!b0\u0006F\u0016E\u0007\u0003BB:\u000b\u0003LA!b1\u0005V\ni\u0011I\u001c8pi\u0006$X\r\u001a+za\u0016Dq!b2\"\u0001\u0004)I-A\u0006b]:|G/\u0019;j_:\u001c\bC\u0002CT\t[+Y\r\u0005\u0003\u0004t\u00155\u0017\u0002BCh\ts\u0013!\"\u00118o_R\fG/[8o\u0011\u001d)I,\ta\u0001\t\u001f\f!\u0002V=qK\n{WO\u001c3t)\u0019)9.\"8\u0006bB!11OCm\u0013\u0011)Y\u000e\"6\u0003\u0015QK\b/\u001a\"pk:$7\u000fC\u0004\u0006`\n\u0002\r\u0001b4\u0002\u00051|\u0007bBCrE\u0001\u0007AqZ\u0001\u0003Q&\f1CQ8v]\u0012,GmV5mI\u000e\f'\u000f\u001a+za\u0016$B!\";\u0006pB!11OCv\u0013\u0011)i\u000f\"6\u0003'\t{WO\u001c3fI^KG\u000eZ2be\u0012$\u0016\u0010]3\t\u000f\u0015E8\u00051\u0001\u0006X\u00061!m\\;oIN\f!\u0002\u001e5jgB\u0013XMZ5y)\u0011!y-b>\t\u000f\u0011}E\u00051\u0001\u0004\u001a\u000691/\u001a;UsB,W\u0003BC\u007f\r\u0003!b!b@\u0007\b\u0019-\u0001\u0003\u0002CH\r\u0003!qAb\u0001&\u0005\u00041)AA\u0001U#\u0011!9\n\"8\t\u000f\u0019%Q\u00051\u0001\u0006\u0000\u0006!AO]3f\u0011\u001d!i-\na\u0001\t\u001f\f\u0011b]3u'fl'm\u001c7\u0016\t\u0019EaQ\u0003\u000b\u0007\r'19B\"\u0007\u0011\t\u0011=eQ\u0003\u0003\b\r\u00071#\u0019\u0001D\u0003\u0011\u001d1IA\na\u0001\r'Aq\u0001b('\u0001\u0004\u0019I*A\u0004u_N#\u0018\r^:\u0015\t\u0019}a\u0011\u0005\t\u0007\tO#i\u000b\"8\t\u000f\u0019%q\u00051\u0001\u0005^\u0006aQn[!o]>$\u0018\r^5p]R!AQ\u001cD\u0014\u0011\u001d1I\u0001\u000ba\u0001\t;$BAb\b\u0007,!9aQF\u0015A\u0002\u0019}\u0011!\u0002;sK\u0016\u001c\u0018aB7l!\u0006\u0014\u0018-\u001c\u000b\t\rg1iDb\u0011\u0007RA1Aq\u0015CW\rk\u0001b\u0001b*\u0005.\u001a]\u0002\u0003BB:\rsIAAb\u000f\u0005d\n1a+\u00197EK\u001aDqAb\u0010+\u0001\u00041\t%A\u0003be\u001e\u001c8\u000f\u0005\u0004\u0005(\u00125fq\u0004\u0005\n\r\u000bR\u0003\u0013!a\u0001\r\u000f\n!\"\u001a=ue\u00064E.Y4t!\u0011\u0019\u0019H\"\u0013\n\t\u0019-cQ\n\u0002\b\r2\fwmU3u\u0013\u00111yea\u0013\u0003\u0011\u0019c\u0017mZ*fiND\u0011Bb\u0015+!\u0003\u0005\rAb\u0012\u0002\u0019\u0015D8\r\\;eK\u001ac\u0017mZ:\u0002#5\\\u0007+\u0019:b[\u0012\"WMZ1vYR$#'\u0006\u0002\u0007Z)\"aq\tC\u0011\u0003Ei7\u000eU1sC6$C-\u001a4bk2$He\r\u000b\t\ro1yF\"\u0019\u0007d!9a\u0011B\u0017A\u0002\u0011u\u0007b\u0002D#[\u0001\u0007aq\t\u0005\b\r'j\u0003\u0019\u0001D$\u0003=i7.S7qY&\u001c\u0017\u000e\u001e)be\u0006lG\u0003\u0002D\u001b\rSBq!b\u0014/\u0001\u00041y\u0002\u0006\u0003\u00078\u00195\u0004b\u0002D\u0005_\u0001\u0007AQ\\\u0001\n[.$\u0006/\u0019:b[N$BAb\u001d\u0007|A1Aq\u0015CW\rk\u0002Baa\u001d\u0007x%!a\u0011\u0010Cr\u0005\u001d!\u0016\u0010]3EK\u001aDqA\" 1\u0001\u00041y\"A\u0004ua\u0006\u0014\u0018-\\:\u0002\u00195\\'+\u001a4j]\u0016\u001cF/\u0019;\u0015\t\u0011ug1\u0011\u0005\b\r\u000b\u000b\u0004\u0019\u0001Co\u0003\u0011\u0019H/\u0019;\u0015\t\u0019}a\u0011\u0012\u0005\b\r\u0017\u0013\u0004\u0019\u0001D\u0010\u0003\u0015\u0019H/\u0019;t\u00035i7\u000eU1dW\u0006<Wm\u0015;biR!AQ\u001cDI\u0011\u001d1)i\ra\u0001\t;$BAb\b\u0007\u0016\"9a1\u0012\u001bA\u0002\u0019}\u0011\u0001C*dC2\fGi\u001c;\u0011\u0007\u0019me'D\u0001\u0003\u0005!\u00196-\u00197b\t>$8#\u0002\u001c\u0004\\\u0019\u0005\u0006\u0003\u0002DN\rGKAA\"*\u0004v\t\t2kY1mC\u0012{G/\u0012=ue\u0006\u001cGo\u001c:\u0015\u0005\u0019e\u0015!B1qa2LH\u0003\u0002Co\r[Cqa!)9\u0001\u0004\u0019y-A\u0004v]\u0006\u0004\b\u000f\\=\u0015\t\u0019Mf\u0011\u0018\t\u0007\u0007;2)la4\n\t\u0019]61\u000b\u0002\u0007\u001fB$\u0018n\u001c8\t\u000f\u0019%\u0011\b1\u0001\u0005^\u0006QQn[#be2LH)\u001a4\u0015\t\u0011ugq\u0018\u0005\b\r\u0003T\u0004\u0019\u0001Co\u0003\u0011!WM\u001a8\u0015\t\u0019}aQ\u0019\u0005\b\r\u000f\\\u0004\u0019\u0001D\u0010\u0003\u0015!WM\u001a8t\u0003%i7NU3g)J,W\r\u0006\u0004\u0007N\u001aMgq\u001b\t\u0005\u0007g2y-\u0003\u0003\u0007R\u0012\r(a\u0002*fMR\u0013X-\u001a\u0005\b\r+d\u0004\u0019\u0001Co\u0003\u0011\tX/\u00197\t\u000f\u0011}E\b1\u0001\u0004\u001a\u0006iaM]3tQR+'/\u001c(b[\u0016$BA\"8\u0007dB!11\u000fDp\u0013\u00111\to!6\u0003\u0011Q+'/\u001c(b[\u0016D\u0011B\":>!\u0003\u0005\raa)\u0002\rA\u0014XMZ5y\u0003]1'/Z:i)\u0016\u0014XNT1nK\u0012\"WMZ1vYR$\u0013'A\u0007ge\u0016\u001c\b\u000eV=qK:\u000bW.\u001a\u000b\u0005\r[4\u0019\u0010\u0005\u0003\u0004t\u0019=\u0018\u0002\u0002Dy\u0007+\u0014\u0001\u0002V=qK:\u000bW.\u001a\u0005\b\rK|\u0004\u0019ABR\u0003\u00151'/Z:i+\t1I\u0010\u0005\u0003\u0007|\u001e\u0005QB\u0001D\u007f\u0015\u00111ypa\u0013\u0002\tU$\u0018\u000e\\\u0005\u0005\u000f\u00071iP\u0001\tGe\u0016\u001c\bNT1nK\u000e\u0013X-\u0019;pe\u0006q\u0011*\u001c9mS\u000eLG\u000fU1sC6\u001c\bc\u0001DN\u0005\nq\u0011*\u001c9mS\u000eLG\u000fU1sC6\u001c8#\u0002\"\u0004\\\u001d5\u0001\u0003\u0002DN\u000f\u001fIAa\"\u0005\u0004v\t9\u0012*\u001c9mS\u000eLG\u000fU1sC6\u001cX\t\u001f;sC\u000e$xN\u001d\u000b\u0003\u000f\u000f!bA\"\u0011\b\u0018\u001dm\u0001bBD\r\t\u0002\u0007a\u0011I\u0001\ba\u0006\u0014\u0018-\\:t\u0011\u001d9i\u0002\u0012a\u0001\r?\t!\"[7qYB\f'/Y7t)\u00119\tc\"\f\u0011\r\rus1ED\u0014\u0013\u00119)ca\u0015\u0003\tM{W.\u001a\t\t\u0007;:ICb\r\u00076%!q1FB*\u0005\u0019!V\u000f\u001d7fe!9qqF#A\u0002\u0019M\u0012\u0001\u0003<qCJ\fWn]:\u0002\u0013\u0019c\u0017mZ:SKB\u0014\bc\u0001DN\u000f\nIa\t\\1hgJ+\u0007O]\n\u0006\u000f\u000ems\u0011\b\t\u0005\r7;Y$\u0003\u0003\b>\rU$A\u0005$mC\u001e\u001c(+\u001a9s\u000bb$(/Y2u_J$\"ab\r\u0015\t\u0019\u001ds1\t\u0005\b\u000f\u000bJ\u0005\u0019\u0001C\t\u0003\u0011\u0011\u0017\u000e^:\u0015\t\u001d%s1\n\t\u0007\u0007;:\u0019\u0003\"\u0005\t\u000f\u0011=!\n1\u0001\u0005\u0012\u0005!2+\u001f8uC\u000e$\u0018n\u0019+za\u0016\f\u0005\u000f\u001d7jK\u0012\u00042Ab'M\u0005Q\u0019\u0016P\u001c;bGRL7\rV=qK\u0006\u0003\b\u000f\\5fIN)Aja\u0017\bVA!a1TD,\u0013\u00119If!\u001e\u0003;MKh\u000e^1di&\u001cG+\u001f9f\u0003B\u0004H.[3e\u000bb$(/Y2u_J$\"ab\u0014\u0015\r\u0011uwqLD1\u0011\u001d1IA\u0014a\u0001\t;Dqab\u0019O\u0001\u00041y\"A\u0003uCJ<7\u000f\u0006\u0003\bh\u001d-\u0004CBB/\rk;I\u0007\u0005\u0005\u0004^\u001d%BQ\u001cD\u0010\u0011\u001d1Ia\u0014a\u0001\t;\fAcU=oi\u0006\u001cG/[2BaBd\u0017.\u001a3UsB,\u0007c\u0001DN#\n!2+\u001f8uC\u000e$\u0018nY!qa2LW\r\u001a+za\u0016\u001cR!UB.\u000f+\"\"ab\u001c\u0015\r\u0011uw\u0011PD>\u0011\u001d1Ia\u0015a\u0001\t;Dqab\u0019T\u0001\u00041y\u0002\u0006\u0003\bh\u001d}\u0004b\u0002D\u0005)\u0002\u0007AQ\\\u0001\u0011'ftG/Y2uS\u000e\f\u0005\u000f\u001d7jK\u0012\u00042Ab'W\u0005A\u0019\u0016P\u001c;bGRL7-\u00119qY&,GmE\u0003W\u00077:I\t\u0005\u0003\u0007\u001c\u001e-\u0015\u0002BDG\u0007k\u0012\u0011dU=oi\u0006\u001cG/[2BaBd\u0017.\u001a3FqR\u0014\u0018m\u0019;peR\u0011q1\u0011\u000b\u0007\t;<\u0019j\"&\t\u000f\u0019%\u0001\f1\u0001\u0005^\"9aq\b-A\u0002\u0019\u0005C\u0003BDM\u000f;\u0003ba!\u0018\b$\u001dm\u0005\u0003CB/\u000fS!iN\"\u0011\t\u000f\u0019%\u0011\f1\u0001\u0005^\u00061QK\\\"u_J\u00042Ab'\\\u0005\u0019)fn\u0011;peN\u00191la\u0017\u0015\u0005\u001d\u0005F\u0003BDV\u000fs\u0003ba!\u0018\u00076\u001e5\u0006CCB/\u000f_;\u0019Lb\r\u0007 %!q\u0011WB*\u0005\u0019!V\u000f\u001d7fgA!11OD[\u0013\u001199\fb9\u0003\u00135{G-\u001b4jKJ\u001c\bb\u0002D\u0005;\u0002\u0007AQ\u001c\u0002\r+:l5\u000eV3na2\fG/Z\n\u0004=\u000em\u0013aC5t\u0007\u0006\u001cXm\u00117bgN$Bab1\bFB\u0019a1\u00140\t\u000f\u001d}\u0006\r1\u0001\u0005jQ!q\u0011ZDi!\u0019\u0019iF\".\bLB\u00012QLDg\r?19db-\u00074\u0019}aqD\u0005\u0005\u000f\u001f\u001c\u0019F\u0001\u0004UkBdWM\u000e\u0005\b\u000f'\f\u0007\u0019ADk\u0003\u0015!X-\u001c9m!\u0011\u0019\u0019hb6\n\t\u001deG1\u001d\u0002\t)\u0016l\u0007\u000f\\1uK\u00061\u0011m]\"bg\u0016,\"ab1\u0002\u0019UsWj\u001b+f[Bd\u0017\r^3\u0011\u0007\u0019mEmE\u0002e\u000f\u0007$\"a\"9\u0002\u00155\\7+\u001a7g)f\u0004X\r\u0006\u0003\u00078\u001d-\bb\u0002D\u0005M\u0002\u0007AQ\\\u0001\u0012'ftG/Y2uS\u000e\u001cE.Y:t\t\u00164\u0007c\u0001DNQ\n\t2+\u001f8uC\u000e$\u0018nY\"mCN\u001cH)\u001a4\u0014\u000b!\u001cYf\">\u0011\t\u0019muq_\u0005\u0005\u000fs\u001c)H\u0001\u000eTs:$\u0018m\u0019;jG\u000ec\u0017m]:EK\u001a,\u0005\u0010\u001e:bGR|'\u000f\u0006\u0002\bpR!rq E\u0003\u0011\u0013AY\u0001#\u0004\t\u0012!M\u0001r\u0003E\r\u0011;\u0001Baa\u001d\t\u0002%!\u00012\u0001Cr\u0005!\u0019E.Y:t\t\u00164\u0007b\u0002E\u0004U\u0002\u0007q1W\u0001\u0005[>$7\u000fC\u0004\u0004\"*\u0004\rA\"<\t\u000f\u0019u$\u000e1\u0001\u0007 !9\u0001r\u00026A\u0002\u001dM\u0016AC2p]N$(/T8eg\"9qq\u00066A\u0002\u0019\u0005\u0003b\u0002E\u000bU\u0002\u0007aqD\u0001\nK\u0006\u0014H.\u001f#fMNDq!b\u0018k\u0001\u00041y\u0002C\u0004\t\u001c)\u0004\r\u0001\"8\u0002\u0011M,GN\u001a+za\u0016Dq\u0001c\bk\u0001\u00041y\"\u0001\u0003c_\u0012LH\u0003\u0002E\u0012\u0011W\u0001ba!\u0018\u00076\"\u0015\u0002CFB/\u0011O9\u0019L\"<\u0007t\u001dMf1\u0007D\u0010\r?19Db\b\n\t!%21\u000b\u0002\u0007)V\u0004H.Z\u001d\t\u000f\u0019%1\u000e1\u0001\u0005^\u0006\t2+\u001f8uC\u000e$\u0018n\u0019+sC&$H)\u001a4\u0011\u0007\u0019mUNA\tTs:$\u0018m\u0019;jGR\u0013\u0018-\u001b;EK\u001a\u001cR!\\B.\u0011k\u0001BAb'\t8%!\u0001\u0012HB;\u0005i\u0019\u0016P\u001c;bGRL7\r\u0016:bSR$UMZ#yiJ\f7\r^8s)\tAy\u0003\u0006\t\b\u0000\"}\u0002\u0012\tE\"\u0011\u000bB9\u0005#\u0013\tL!9\u0001rA8A\u0002\u001dM\u0006bBBQ_\u0002\u0007aQ\u001e\u0005\b\r{z\u0007\u0019\u0001D\u0010\u0011\u001dA)b\u001ca\u0001\r?Aq!b\u0018p\u0001\u00041y\u0002C\u0004\t\u001c=\u0004\r\u0001\"8\t\u000f!}q\u000e1\u0001\u0007 Q!\u0001r\nE,!\u0019\u0019iF\".\tRA\u00112Q\fE*\u000fg3iOb\u001d\u0007 \u0019}aq\u0007D\u0010\u0013\u0011A)fa\u0015\u0003\rQ+\b\u000f\\38\u0011\u001d1I\u0001\u001da\u0001\t;\f!cU=oi\u0006\u001cG/[2PE*,7\r\u001e#fMB\u0019a1\u0014:\u0003%MKh\u000e^1di&\u001cwJ\u00196fGR$UMZ\n\u0006e\u000em\u0003\u0012\r\t\u0005\r7C\u0019'\u0003\u0003\tf\rU$aG*z]R\f7\r^5d\u001f\nTWm\u0019;EK\u001a,\u0005\u0010\u001e:bGR|'\u000f\u0006\u0002\t\\Qq\u00012\u000eE9\u0011gB)\bc\u001e\tz!m\u0004\u0003BB:\u0011[JA\u0001c\u001c\u0005d\nIQj\u001c3vY\u0016$UM\u001a\u0005\b\u0011\u000f!\b\u0019ADZ\u0011\u001d\u0019\t\u000b\u001ea\u0001\r;Dq\u0001#\u0006u\u0001\u00041y\u0002C\u0004\u0006`Q\u0004\rAb\b\t\u000f!mA\u000f1\u0001\u0005^\"9\u0001r\u0004;A\u0002\u0019}A\u0003\u0002E@\u0011\u0007\u0003ba!\u0018\u00076\"\u0005\u0005\u0003EB/\u000f\u001b<\u0019L\"8\u0007 \u0019}aq\u0007D\u0010\u0011\u001d1I!\u001ea\u0001\t;\f\u0011dU=oi\u0006\u001cG/[2QC\u000e\\\u0017mZ3PE*,7\r\u001e#fMB\u0019a1T<\u00033MKh\u000e^1di&\u001c\u0007+Y2lC\u001e,wJ\u00196fGR$UMZ\n\u0006o\u000em\u0003R\u0012\t\u0005\r7Cy)\u0003\u0003\t\u0012\u000eU$AI*z]R\f7\r^5d!\u0006\u001c7.Y4f\u001f\nTWm\u0019;EK\u001a,\u0005\u0010\u001e:bGR|'\u000f\u0006\u0002\t\bRa\u0001r\u0013EO\u0011?C\t\u000bc)\t&B!11\u000fEM\u0013\u0011AY\nb9\u0003\u0015A\u000b7m[1hK\u0012+g\rC\u0004\u0004\"f\u0004\rA\"8\t\u000f!U\u0011\u00101\u0001\u0007 !9QqL=A\u0002\u0019}\u0001b\u0002E\u000es\u0002\u0007AQ\u001c\u0005\b\u0011?I\b\u0019\u0001D\u0010)\u0011AI\u000b#-\u0011\r\rucQ\u0017EV!9\u0019i\u0006#,\u0007^\u001a}aq\u0004D\u001c\r?IA\u0001c,\u0004T\t1A+\u001e9mKVBqA\"\u0003{\u0001\u0004!iN\u0001\bTG\u0006d\u0017-T3nE\u0016\u0014(+\u001a4\u0014\u0007m\u001cY&A\u0004ts6\u0014w\u000e\\:\u0011\r\u0011\u001d\u00062XBM\u0013\u0011Ai\f\"-\u0003\u0007M+\u0017\u000f\u0006\u0003\tB\"\r\u0007c\u0001DNw\"9\u0001rW?A\u0002!e\u0016A\u0002:fgVdG\u000f\u0006\u0003\tJ\"-\u0007CBB/\rk\u001bI\nC\u0004\u0004\"z\u0004\raa4\u0015\t!%\u0007r\u001a\u0005\b\r\u0013y\b\u0019\u0001Co\u00035!V\u000f\u001d7f\u00072\f7o\u001d*fMB!a1TA\u0002\u00055!V\u000f\u001d7f\u00072\f7o\u001d*fMN!\u00111\u0001Ea)\tA\u0019.A\tUkBdWmQ8na\u0006t\u0017n\u001c8SK\u001a\u0004BAb'\u0002\n\t\tB+\u001e9mK\u000e{W\u000e]1oS>t'+\u001a4\u0014\t\u0005%\u0001\u0012\u0019\u000b\u0003\u0011;\fA\"\u00168ji\u000ec\u0017m]:SK\u001a\u0004BAb'\u0002\u0010\taQK\\5u\u00072\f7o\u001d*fMN!\u0011q\u0002Ea)\tA9/\u0001\tGk:\u001cG/[8o\u00072\f7o\u001d*fMB!a1TA\u000b\u0005A1UO\\2uS>t7\t\\1tgJ+gm\u0005\u0003\u0002\u0016!\u0005GC\u0001Ey\u00039\u0019\u0016P\u001c;bGRL7\rV;qY\u0016\u0004BAb'\u0002\u001c\tq1+\u001f8uC\u000e$\u0018n\u0019+va2,7CBA\u000e\u00077J\t\u0001\u0005\u0003\u0007\u001c&\r\u0011\u0002BE\u0003\u0007k\u0012qcU=oi\u0006\u001cG/[2UkBdW-\u0012=ue\u0006\u001cGo\u001c:\u0015\u0005!mH\u0003\u0002Co\u0013\u0017A\u0001\"b\u0014\u0002 \u0001\u0007aq\u0004\u000b\u0005\u0013\u001fI\t\u0002\u0005\u0004\u0004^\u0019Ufq\u0004\u0005\t\r\u0013\t\t\u00031\u0001\u0005^\u0006\u00112+\u001f8uC\u000e$\u0018n\u0019+va2,G+\u001f9f!\u00111Y*!\n\u0003%MKh\u000e^1di&\u001cG+\u001e9mKRK\b/Z\n\u0007\u0003K\u0019Y&#\u0001\u0015\u0005%UA\u0003\u0002Co\u0013?A\u0001\"b\u0014\u0002*\u0001\u0007aq\u0004\u000b\u0005\u0013\u001fI\u0019\u0003\u0003\u0005\u0007\n\u0005-\u0002\u0019\u0001Co\u0003U\u0019\u0016P\u001c;bGRL7MR;oGRLwN\u001c+za\u0016\u0004BAb'\u00020\t)2+\u001f8uC\u000e$\u0018n\u0019$v]\u000e$\u0018n\u001c8UsB,7CBA\u0018\u00077Ji\u0003\u0005\u0003\u0007\u001c&=\u0012\u0002BE\u0019\u0007k\u0012adU=oi\u0006\u001cG/[2Gk:\u001cG/[8o)f\u0004X-\u0012=ue\u0006\u001cGo\u001c:\u0015\u0005%\u001dBC\u0002Co\u0013oIY\u0004\u0003\u0005\n:\u0005M\u0002\u0019\u0001D\u0010\u0003\u001d\t'o\u001a;qKND\u0001\"#\u0010\u00024\u0001\u0007AQ\\\u0001\u0007e\u0016\u001cH\u000f]3\u0015\t%\u0005\u0013R\t\t\u0007\u0007;2),c\u0011\u0011\u0011\rus\u0011\u0006D\u0010\t;D\u0001B\"\u0003\u00026\u0001\u0007AQ\\\u0001\u000e'ftG\u000f[3uS\u000e,f.\u001b;\u0011\t\u0019m\u0015\u0011\b\u0002\u000e'ftG\u000f[3uS\u000e,f.\u001b;\u0014\t\u0005e21\f\u000b\u0003\u0013\u0013\"B\u0001\"\u001b\nT!Aa\u0011BA\u001f\u0001\u0004!i.\u0001\bTs:$\u0018m\u0019;jG\ncwnY6\u0011\t\u0019m\u0015\u0011\t\u0002\u000f'ftG/Y2uS\u000e\u0014En\\2l'\u0019\t\tea\u0017\n^A!a1TE0\u0013\u0011I\tg!\u001e\u0003/MKh\u000e^1di&\u001c'\t\\8dW\u0016CHO]1di>\u0014HCAE,)\u0011!i.c\u001a\t\u0011\u0019-\u0015Q\ta\u0001\r?!B!c\u0004\nl!Aa\u0011BA$\u0001\u0004!i.A\tTs:$\u0018m\u0019;jG\u001a+hn\u0019;j_:\u0004BAb'\u0002L\t\t2+\u001f8uC\u000e$\u0018n\u0019$v]\u000e$\u0018n\u001c8\u0014\r\u0005-31LE;!\u00111Y*c\u001e\n\t%e4Q\u000f\u0002\u001b'ftG/Y2uS\u000e4UO\\2uS>tW\t\u001f;sC\u000e$xN\u001d\u000b\u0003\u0013_\"b!c \n\u0006&\u001d\u0005\u0003BB:\u0013\u0003KA!c!\u0005d\nAa)\u001e8di&|g\u000e\u0003\u0005\u0006\u0006\u0006=\u0003\u0019\u0001D\u0010\u0011!Ay\"a\u0014A\u0002\u0011uG\u0003BEF\u0013\u001f\u0003ba!\u0018\u00076&5\u0005\u0003CB/\u000fS1)\u0004\"8\t\u0011\u0019%\u0011\u0011\u000ba\u0001\u0013\u007f\nAbU=oi\u0006\u001cG/[2OK^\u0004BAb'\u0002V\ta1+\u001f8uC\u000e$\u0018n\u0019(foN1\u0011QKB.\u00133\u0003BAb'\n\u001c&!\u0011RTB;\u0005U\u0019\u0016P\u001c;bGRL7MT3x\u000bb$(/Y2u_J$\"!c%\u0015\u0015\u0011u\u00172UES\u0013OKI\u000b\u0003\u0005\t\u0016\u0005e\u0003\u0019\u0001D\u0010\u0011!)y&!\u0017A\u0002\u0019}\u0001\u0002\u0003E\u000e\u00033\u0002\r\u0001\"8\t\u0011!}\u0011\u0011\fa\u0001\r?!B!#,\n6B11Q\fD[\u0013_\u0003Bb!\u0018\n2\u001a}aq\u0004D\u001c\r?IA!c-\u0004T\t1A+\u001e9mKRB\u0001B\"\u0003\u0002\\\u0001\u0007AQ\\\u0001\u0010'ftG/Y2uS\u000e$UM\u001a#fMB!a1TA0\u0005=\u0019\u0016P\u001c;bGRL7\rR3g\t\u001647CBA0\u00077Jy\f\u0005\u0003\u0007\u001c&\u0005\u0017\u0002BEb\u0007k\u0012\u0001dU=oi\u0006\u001cG/[2EK\u001a$UMZ#yiJ\f7\r^8s)\tII\f\u0006\b\nJ&=\u0017\u0012[Ej\u0013+L9.c7\u0011\t\rM\u00142Z\u0005\u0005\u0013\u001b$\u0019O\u0001\u0004EK\u001a$UM\u001a\u0005\t\u0011\u000f\t\u0019\u00071\u0001\b4\"A1\u0011UA2\u0001\u00041i\u000e\u0003\u0005\u0007~\u0005\r\u0004\u0019\u0001D\u0010\u0011!9y#a\u0019A\u0002\u0019\u0005\u0003\u0002CEm\u0003G\u0002\r\u0001\"8\u0002\u0007Q\u0004H\u000f\u0003\u0005\n^\u0006\r\u0004\u0019\u0001Co\u0003\r\u0011\bn\u001d\u000b\u0005\u0013CL)\u000f\u0005\u0004\u0004^\u0019U\u00162\u001d\t\u0011\u0007;:imb-\u0007^\u001aMd1\u0007Co\t;D\u0001B\"\u0003\u0002f\u0001\u0007AQ\u001c\u0002\u0014'ftG/Y2uS\u000e4\u0016\r\u001c#fM\n\u000b7/Z\n\u0007\u0003O\u001aY&c;\u0011\t\u0019m\u0015R^\u0005\u0005\u0013_\u001c)H\u0001\rTs:$\u0018m\u0019;jGZ\u000bG\u000eR3g\u000bb$(/Y2u_J\f\u0011\"[:NkR\f'\r\\3\u0015\t%U\u0018r\u001f\t\u0005\r7\u000b9\u0007\u0003\u0005\nr\u0006-\u0004\u0019\u0001C5\u0003%iw\u000eZ5gS\u0016\u00148\u000f\u0006\u0003\b4&u\b\u0002\u0003E\u0004\u0003[\u0002\rab-\u0015\u0015\u0019]\"\u0012\u0001F\u0002\u0015\u000bQ9\u0001\u0003\u0005\t\b\u0005=\u0004\u0019ADZ\u0011!\u0019\t+a\u001cA\u0002\u0019u\u0007\u0002CEm\u0003_\u0002\r\u0001\"8\t\u0011%u\u0017q\u000ea\u0001\t;$BAc\u0003\u000b\u0010A11Q\fD[\u0015\u001b\u0001Bb!\u0018\n2\u001eMfQ\u001cCo\t;D\u0001B\"\u0003\u0002r\u0001\u0007AQ\\\u0001\u0010'ftG/Y2uS\u000e4\u0016\r\u001c#fMB!a1TA;\u0005=\u0019\u0016P\u001c;bGRL7MV1m\t\u001647\u0003BA;\u0013k$\"Ac\u0005\u0002\u001fMKh\u000e^1di&\u001cg+\u0019:EK\u001a\u0004BAb'\u0002|\ty1+\u001f8uC\u000e$\u0018n\u0019,be\u0012+gm\u0005\u0003\u0002|%UHC\u0001F\u000f\u0003=\u0019\u0016P\u001c;bGRL7-Q:tS\u001et\u0007\u0003\u0002DN\u0003\u0003\u0013qbU=oi\u0006\u001cG/[2BgNLwM\\\n\u0007\u0003\u0003\u001bYF#\f\u0011\t\u0019m%rF\u0005\u0005\u0015c\u0019)H\u0001\rTs:$\u0018m\u0019;jG\u0006\u001b8/[4o\u000bb$(/Y2u_J$\"Ac\n\u0015\r\u0011u'r\u0007F\u001e\u0011!QI$!\"A\u0002\u0011u\u0017a\u00017ig\"A\u0011R\\AC\u0001\u0004!i\u000e\u0006\u0003\u000b@)\r\u0003CBB/\rkS\t\u0005\u0005\u0005\u0004^\u001d%BQ\u001cCo\u0011!1I!a\"A\u0002\u0011u\u0017!F+oY&4G\u000fT5ti\u0016cW-\\3oi^L7/Z\u000b\u0005\u0015\u0013RI\u0006\u0006\u0003\u000bL)u#C\u0002F'\u00077R\tFB\u0004\u000bP\u0005%\u0005Ac\u0013\u0003\u0019q\u0012XMZ5oK6,g\u000e\u001e \u0011\r\u0019m%2\u000bF,\u0013\u0011Q)f!\u001e\u0003+UsG.\u001b4u\u0019&\u001cH/\u00127f[\u0016tGo^5tKB!Aq\u0012F-\t!1\u0019!!#C\u0002)m\u0013\u0003\u0002CL\t\u000fA\u0001Bc\u0018\u0002\n\u0002\u0007!\u0012M\u0001\u000bk:d\u0017N\u001a;bE2,\u0007CBB:\u0015GR9&\u0003\u0003\u000bf)\u001d$AC+oY&4G/\u00192mK&!!\u0012NB?\u0005%a\u0015N\u001a;bE2,7/\u0001\u000fV]2Lg\r\u001e'jgR|e\rT5tiN,E.Z7f]R<\u0018n]3\u0016\t)=$R\u0010\u000b\u0005\u0015cRyH\u0005\u0004\u000bt\rm#R\u000f\u0004\b\u0015\u001f\nY\t\u0001F9!\u00191YJc\u001e\u000b|%!!\u0012PB;\u0005q)f\u000e\\5gi2K7\u000f^(g\u0019&\u001cHo]#mK6,g\u000e^<jg\u0016\u0004B\u0001b$\u000b~\u0011Aa1AAF\u0005\u0004QY\u0006\u0003\u0005\u000b`\u0005-\u0005\u0019\u0001FA!\u0019\u0019\u0019Hc\u0019\u000b|\u0005\u00012+\u001f8uC\u000e$\u0018n\u0019,bY\u001a\u0013x.\u001c\t\u0005\r7\u000byI\u0001\tTs:$\u0018m\u0019;jGZ\u000bGN\u0012:p[N1\u0011qRB.\u0015\u0017\u0003BAb'\u000b\u000e&!!rRB;\u0005e\u0019\u0016P\u001c;bGRL7MV1m\rJ|W.\u0012=ue\u0006\u001cGo\u001c:\u0015\u0005)\u0015EC\u0002Co\u0015+SI\n\u0003\u0005\u000b\u0018\u0006M\u0005\u0019\u0001Co\u0003\r\u0001\u0018\r\u001e\u0005\t\u0013;\f\u0019\n1\u0001\u0005^R!!r\bFO\u0011!1I!!&A\u0002\u0011u\u0017AD*z]R\f7\r^5d-\u0006dW)\u001d\t\u0005\r7\u000bIJ\u0001\bTs:$\u0018m\u0019;jGZ\u000bG.R9\u0014\r\u0005e51\fFT!\u00111YJ#+\n\t)-6Q\u000f\u0002\u0018'ftG/Y2uS\u000e4\u0016\r\\#r\u000bb$(/Y2u_J$\"A#)\u0015\r\u0011u'\u0012\u0017FZ\u0011!Q9*!(A\u0002\u0011u\u0007\u0002CEo\u0003;\u0003\r\u0001\"8\u0015\t)}\"r\u0017\u0005\t\r\u0013\ty\n1\u0001\u0005^\u0006y1+\u001f8uC\u000e$\u0018n\u0019$jYR,'\u000f\u0005\u0003\u0007\u001c\u0006\r&aD*z]R\f7\r^5d\r&dG/\u001a:\u0014\r\u0005\r61\fFa!\u00111YJc1\n\t)\u00157Q\u000f\u0002\u0019'ftG/Y2uS\u000e4\u0015\u000e\u001c;fe\u0016CHO]1di>\u0014HC\u0001F^)\u0011!iNc3\t\u0011\u0019%\u0011q\u0015a\u0001\t;$BAc4\u000bRB11Q\fD[\t;D\u0001B\"\u0003\u0002*\u0002\u0007AQ\\\u0001\u0017'ftG/Y2uS\u000e,U\u000e\u001d;z)f\u0004X\r\u0016:fKB!a1TAW\u0005Y\u0019\u0016P\u001c;bGRL7-R7qif$\u0016\u0010]3Ue\u0016,7CBAW\u00077RY\u000e\u0005\u0003\u0007\u001c*u\u0017\u0002\u0002Fp\u0007k\u0012qdU=oi\u0006\u001cG/[2F[B$\u0018\u0010V=qKR\u0013X-Z#yiJ\f7\r^8s)\tQ)\u000e\u0006\u0002\u0006\nQ!A\u0011\u000eFt\u0011!QI/a-A\u0002\u0015%\u0011A\u0001;u\u0003!)f\u000eU1u'\u0016\f\b\u0003\u0002DN\u0003o\u0013\u0001\"\u00168QCR\u001cV-]\n\u0005\u0003o\u001bY\u0006\u0006\u0002\u000bnR!!r\u001fF~!\u0019\u0019iF\".\u000bzB1Aq\u0015CW\u0015\u0003B\u0001B\"\f\u0002<\u0002\u0007aqD\u0001\u000fS6\u0004Hn\u001c3f!\u0006$H)\u001a4t!\u00111Y*a0\u0003\u001d%l\u0007\u000f\\8eKB\u000bG\u000fR3ggN!\u0011qXF\u0003!\u0011\u0019\u0019hc\u0002\n\t-%12\u0002\u0002\f)J\fgn\u001d4pe6,'/\u0003\u0003\u0005f\u000euDC\u0001F\u0000\u0003%!(/\u00198tM>\u0014X\u000e\u0006\u0003\u0005^.M\u0001\u0002\u0003D\u0005\u0003\u0007\u0004\r\u0001\"8\u0002\u001dQ\u0014\u0018M\\:g_Jl7\u000b^1ugR!aqDF\r\u0011!1i#!2A\u0002\u0019}A\u0003\u0002Co\u0017;A\u0001B\"\u0003\u0002H\u0002\u0007AQ\u001c\u000b\u0005\r?Y\t\u0003\u0003\u0005\u0007.\u0005%\u0007\u0019\u0001D\u0010\u0003=\u0019\u0016P\u001c;bGRL7\rU1u\t\u00164\u0007\u0003\u0002DN\u0003\u001b\u0014qbU=oi\u0006\u001cG/[2QCR$UMZ\n\u0007\u0003\u001b\u001cYfc\u000b\u0011\t\u0019m5RF\u0005\u0005\u0017_\u0019)H\u0001\rTs:$\u0018m\u0019;jGB\u000bG\u000fR3g\u000bb$(/Y2u_J$\"a#\n\u0015\u0015\u0019U2RGF\u001c\u0017sYY\u0004\u0003\u0005\t\b\u0005E\u0007\u0019ADZ\u0011!Q9*!5A\u0002\u0011u\u0007\u0002CEm\u0003#\u0004\r\u0001\"8\t\u0011%u\u0017\u0011\u001ba\u0001\t;$Bac\u0010\fDA11Q\fD[\u0017\u0003\u0002Bb!\u0018\n2\u001eMFQ\u001cCo\t;D\u0001B\"\u0003\u0002T\u0002\u0007AQ\\\u0001\u0010+:\u0004\u0016\r^*fc^KG\u000f\u001b*fgB!a1TAl\u0005=)f\u000eU1u'\u0016\fx+\u001b;i%\u0016\u001c8\u0003BAl\u00077\"\"ac\u0012\u0015\t-E3R\u000b\t\u0007\u0007;2)lc\u0015\u0011\u0011\rus\u0011\u0006F}\r?A\u0001B\"\u0003\u0002\\\u0002\u0007AQ\\\u0001\u0011+:\u001c\u0016P\u001c;iKRL7\rU1sC6\u0004BAb'\u0002`\n\u0001RK\\*z]RDW\r^5d!\u0006\u0014\u0018-\\\n\u0005\u0003?\u001cY\u0006\u0006\u0002\fZQ!12MF3!\u0019\u0019iF\".\u0007^\"Aa\u0011BAr\u0001\u0004!i.A\u0005V]ZK7/\u001b;peB!a1TAt\u0005%)fNV5tSR|'o\u0005\u0003\u0002h\u000emCCAF5)\u0011Y\u0019hc \u0011\r\rucQWF;!!\u0019if\"\u000b\u0007^.]\u0004C\u0002CT\t[[I\b\u0005\u0003\u0004t-m\u0014\u0002BF?\tG\u0014qaQ1tK\u0012+g\r\u0003\u0005\u0007\n\u0005-\b\u0019\u0001Co\u0003%)fn\u00117pgV\u0014X\r\u0005\u0003\u0007\u001c\u0006=(!C+o\u00072|7/\u001e:f'\u0011\tyoa\u0017\u0015\u0005-\rE\u0003\u0002F \u0017\u001bC\u0001B\"\u0003\u0002t\u0002\u0007AQ\\\u0001\u000b\r&dG/\u001a:DC2d\u0007\u0003\u0002DN\u0003o\u0014!BR5mi\u0016\u00148)\u00197m'\u0011\t9pa\u0017\u0015\u0005-EE\u0003\u0002F \u00177C\u0001B\"\u0003\u0002|\u0002\u0007AQ\\\u0001\t+:4\u0015\u000e\u001c;feB!a1TA\u0000\u0005!)fNR5mi\u0016\u00148\u0003BA\u0000\u00077\"\"ac(\u0015\t-%62\u0016\t\u0007\u0007;:\u0019c\"\u001b\t\u0011\u0019%!1\u0001a\u0001\t;\f!#\u00168DQ\u0016\u001c7.\u00134SK\u001a,H/\u00192mKB!a1\u0014B\u0004\u0005I)fn\u00115fG.LeMU3gkR\f'\r\\3\u0014\t\t\u001d11\f\u000b\u0003\u0017_#BAc\u0010\f:\"Aa\u0011\u0002B\u0006\u0001\u0004!iN\u0001\tV]\u001a{'oQ8nE&t\u0017\r^5p]N!!QBB.)\u0011Y\tmc1\u0011\t\u0019m%Q\u0002\u0005\t\u0007C\u0013\t\u00021\u0001\u0007^R!!rHFd\u0011!1IAa\u0005A\u0002\u0011u\u0017!B+o\u001b\u0006\u0004\b\u0003\u0002DN\u0005/\u0011Q!\u00168NCB\u001cBAa\u0006\fBR\u001112Z\u0001\n+:4uN]3bG\"\u0004BAb'\u0003\u001e\tIQK\u001c$pe\u0016\f7\r[\n\u0005\u0005;Y\t\r\u0006\u0002\fV\u0006IQK\u001c$mCRl\u0015\r\u001d\t\u0005\r7\u0013\u0019CA\u0005V]\u001ac\u0017\r^'baN!!1EFa)\tYy.A\u0003V]\u001a{'\u000f\u0005\u0003\u0007\u001c\n%\"!B+o\r>\u00148\u0003\u0002B\u0015\u00077\"\"a#;\u0015\t%\u000532\u001f\u0005\t\r\u0013\u0011i\u00031\u0001\u0005^\u0006iQn[#ok6,'/\u0019;peN$BAb\b\fz\"A12 B\u0018\u0001\u00041y\"A\u0003f]Vl7/\u0001\u0007Ts:$\u0018m\u0019;jG\u001a{'\u000f\u0005\u0003\u0007\u001c\nM\"\u0001D*z]R\f7\r^5d\r>\u00148C\u0002B\u001a\u00077b)\u0001\u0005\u0003\u0007\u001c2\u001d\u0011\u0002\u0002G\u0005\u0007k\u0012QcU=oi\u0006\u001cG/[2G_J,\u0005\u0010\u001e:bGR|'\u000f\u0006\u0002\f\u0000R1AQ\u001cG\b\u0019#A\u0001bc?\u00038\u0001\u0007aq\u0004\u0005\t\u0011?\u00119\u00041\u0001\u0005^R!\u0011\u0012\tG\u000b\u0011!1IA!\u000fA\u0002\u0011u\u0017!E*z]R\f7\r^5d\r>\u0014\u0018,[3mIB!a1\u0014B\u001f\u0005E\u0019\u0016P\u001c;bGRL7MR8s3&,G\u000eZ\n\u0007\u0005{\u0019Y\u0006$\u0002\u0015\u00051eAC\u0002Co\u0019Ga)\u0003\u0003\u0005\f|\n\u0005\u0003\u0019\u0001D\u0010\u0011!AyB!\u0011A\u0002\u0011uG\u0003BE!\u0019SA\u0001B\"\u0003\u0003D\u0001\u0007AQ\\\u0001\u0016\u001b\u0006L(-\u001a+za\u0016$&/Z3Pe&<\u0017N\\1m!\u00111YJa\u0012\u0003+5\u000b\u0017PY3UsB,GK]3f\u001fJLw-\u001b8bYN!!qIB.)\tai\u0003\u0006\u0003\r81e\u0002CBB/\u000fG!i\u000e\u0003\u0005\u0007\n\t-\u0003\u0019\u0001Co\u0003Ai\u0015-\u001f2f'\u0016dWm\u0019;BaBd\u0017\u0010\u0005\u0003\u0007\u001c\n=#\u0001E'bs\n,7+\u001a7fGR\f\u0005\u000f\u001d7z'\u0011\u0011yea\u0017\u0015\u00051uB\u0003\u0002G\u001c\u0019\u000fB\u0001B\"\u0003\u0003T\u0001\u0007AQ\\\u0001\u000f\u001b\u0006L(-Z+oG\",7m[3e!\u00111YJa\u0016\u0003\u001d5\u000b\u0017PY3V]\u000eDWmY6fIN!!qKB.)\taY\u0005\u0006\u0003\r81U\u0003\u0002\u0003D\u0005\u00057\u0002\r\u0001\"8\u0002\u00155\u000b\u0017PY3UsB,G\r\u0005\u0003\u0007\u001c\n}#AC'bs\n,G+\u001f9fIN!!qLB.)\taI\u0006\u0006\u0003\rd1\u0015\u0004CBB/\u000fGQ\t\u0005\u0003\u0005\u0007\n\t\r\u0004\u0019\u0001Co\u0003\u001di7nQ1tKN$Bac\u001e\rl!AAR\u000eB3\u0001\u00041y\"A\u0003dCN,7/\u0001\rTs:$\u0018m\u0019;jGB\u000b'\u000f^5bY\u001a+hn\u0019;j_:\u0004BAb'\u0003j\tA2+\u001f8uC\u000e$\u0018n\u0019)beRL\u0017\r\u001c$v]\u000e$\u0018n\u001c8\u0014\r\t%41\fG<!\u00111Y\n$\u001f\n\t1m4Q\u000f\u0002\"'ftG/Y2uS\u000e\u0004\u0016M\u001d;jC24UO\\2uS>tW\t\u001f;sC\u000e$xN\u001d\u000b\u0003\u0019c\"B\u0001$!\r\bB!11\u000fGB\u0013\u0011a)\tb9\u0003\u000b5\u000bGo\u00195\t\u001115$Q\u000ea\u0001\r?!B\u0001d#\r\u000eB11Q\fD[\u0017oB\u0001B\"\u0003\u0003p\u0001\u0007AQ\\\u0001\u000f'ftG/Y2uS\u000el\u0015\r^2i!\u00111YJa\u001d\u0003\u001dMKh\u000e^1di&\u001cW*\u0019;dQN1!1OB.\u0019/\u0003BAb'\r\u001a&!A2TB;\u0005]\u0019\u0016P\u001c;bGRL7-T1uG\",\u0005\u0010\u001e:bGR|'\u000f\u0006\u0002\r\u0012R1A\u0012\u0011GQ\u0019KC\u0001\u0002d)\u0003x\u0001\u0007AQ\\\u0001\ng\u000e\u0014X\u000f^5oK\u0016D\u0001\u0002$\u001c\u0003x\u0001\u0007aq\u0004\u000b\u0005\u0019Sci\u000b\u0005\u0004\u0004^\u0019UF2\u0016\t\t\u0007;:I\u0003\"8\fx!Aa\u0011\u0002B=\u0001\u0004a\t)\u0001\u0007Ts:$\u0018m\u0019;jGR\u0013\u0018\u0010\u0005\u0003\u0007\u001c\nu$\u0001D*z]R\f7\r^5d)JL8C\u0002B?\u00077b9\f\u0005\u0003\u0007\u001c2e\u0016\u0002\u0002G^\u0007k\u0012QcU=oi\u0006\u001cG/[2Uef,\u0005\u0010\u001e:bGR|'\u000f\u0006\u0002\r2RAA\u0012\u0019Gd\u0019\u0017dy\r\u0005\u0003\u0004t1\r\u0017\u0002\u0002Gc\tG\u00141\u0001\u0016:z\u0011!aIM!!A\u0002\u0011u\u0017!\u00022m_\u000e\\\u0007\u0002\u0003Gg\u0005\u0003\u0003\rAb\b\u0002\u000f\r\fGo\u00195fg\"AA\u0012\u001bBA\u0001\u0004!i.A\u0005gS:\fG.\u001b>feR!AR\u001bGm!\u0019\u0019iF\".\rXBQ1QLDX\t;\\9\b\"8\t\u0011\u0019%!1\u0011a\u0001\u0019\u0003\f!cU=oi\u0006\u001cG/[2UKJl\u0017\nZ3oiB!a1\u0014BD\u0005I\u0019\u0016P\u001c;bGRL7\rV3s[&#WM\u001c;\u0014\r\t\u001d51\fGr!\u00111Y\n$:\n\t1\u001d8Q\u000f\u0002\u001c'ftG/Y2uS\u000e$VM]7JI\u0016tG/\u0012=ue\u0006\u001cGo\u001c:\u0015\u00051uGC\u0002C\u007f\u0019[dy\u000f\u0003\u0005\u0004\"\n-\u0005\u0019\u0001Do\u0011)a\tPa#\u0011\u0002\u0003\u0007A\u0011N\u0001\rSN\u0014\u0015mY6rk>$X\r\u001a\u000b\u0005\u0019kdI\u0010\u0005\u0004\u0004^\u0019UFr\u001f\t\t\u0007;:IC\"8\u0005j!AA2 BG\u0001\u0004!i0\u0001\u0002jI\u0006\u00112+\u001f8uC\u000e$\u0018n\u0019+za\u0016LE-\u001a8u!\u00111YJ!%\u0003%MKh\u000e^1di&\u001cG+\u001f9f\u0013\u0012,g\u000e^\n\u0007\u0005#\u001bY&$\u0002\u0011\t\u0019mUrA\u0005\u0005\u001b\u0013\u0019)HA\u000eTs:$\u0018m\u0019;jGRK\b/Z%eK:$X\t\u001f;sC\u000e$xN\u001d\u000b\u0003\u0019\u007f$B\u0001\"@\u000e\u0010!A1\u0011\u0015BK\u0001\u00041i\u000f\u0006\u0003\u000e\u00145U\u0001CBB/\rk3i\u000f\u0003\u0005\u0007\n\t]\u0005\u0019\u0001Co\u0003=\u0019\u0016P\u001c;bGRL7-S7q_J$\b\u0003\u0002DN\u00057\u0013qbU=oi\u0006\u001cG/[2J[B|'\u000f^\n\u0007\u00057\u001bY&d\b\u0011\t\u0019mU\u0012E\u0005\u0005\u001bG\u0019)H\u0001\rTs:$\u0018m\u0019;jG&k\u0007o\u001c:u\u000bb$(/Y2u_J$\"!$\u0007\u0002!]KG\u000eZ2be\u0012\u001cV\r\\3di>\u0014\b\u0003BG\u0016\u0005Ck!Aa'\u0003!]KG\u000eZ2be\u0012\u001cV\r\\3di>\u00148\u0003\u0002BQ\u00077\"\"!$\u000b\u0015\t5UR2\b\t\u0005\u0007gj9$\u0003\u0003\u000e:\u0011\r(AD%na>\u0014HoU3mK\u000e$xN\u001d\u0005\t\u001b{\u0011)\u000b1\u0001\u0004l\u00061qN\u001a4tKR$B!$\u0011\u000eDA11Q\fD[\u0007WD\u0001\"$\u0012\u0003(\u0002\u0007QRG\u0001\u0004g\u0016d\u0017\u0001\u0004(b[\u0016\u001cV\r\\3di>\u0014\b\u0003BG\u0016\u0005W\u0013ABT1nKN+G.Z2u_J\u001cBAa+\u0004\\Q\u0011Q\u0012\n\u000b\u0007\u001bki\u0019&$\u0016\t\u0011\r\u0005&q\u0016a\u0001\r;D\u0001\"$\u0010\u00030\u0002\u000711\u001e\u000b\u0005\u001b3ji\u0006\u0005\u0004\u0004^\u0019UV2\f\t\t\u0007;:IC\"8\u0004l\"AQR\tBY\u0001\u0004i)$\u0001\bSK:\fW.Z*fY\u0016\u001cGo\u001c:\u0011\t5-\"Q\u0017\u0002\u000f%\u0016t\u0017-\\3TK2,7\r^8s'\u0011\u0011)la\u0017\u0015\u00055\u0005DCCG\u001b\u001bWjy'd\u001d\u000ex!AQR\u000eB]\u0001\u00041i.A\u0003oC6,\u0017\u0007\u0003\u0005\u000er\te\u0006\u0019ABv\u0003\u001dygMZ:fiFB\u0001\"$\u001e\u0003:\u0002\u0007aQ\\\u0001\u0006]\u0006lWM\r\u0005\t\u001bs\u0012I\f1\u0001\u0004l\u00069qN\u001a4tKR\u0014D\u0003BG?\u001b\u0003\u0003ba!\u0018\u000766}\u0004\u0003DB/\u0013c3ina;\u0007^\u000e-\b\u0002CG#\u0005w\u0003\r!$\u000e\u0002!Us\u0017.\u001c9peR\u001cV\r\\3di>\u0014\b\u0003BG\u0016\u0005\u007f\u0013\u0001#\u00168j[B|'\u000f^*fY\u0016\u001cGo\u001c:\u0014\t\t}61\f\u000b\u0003\u001b\u000b#b!$\u000e\u000e\u00106E\u0005\u0002CBQ\u0005\u0007\u0004\rA\"8\t\u00115u\"1\u0019a\u0001\u0007W$B!$\u0017\u000e\u0016\"AQR\tBc\u0001\u0004i)$\u0001\u000bXS2$7-\u0019:e'\u0016dWm\u0019;peJ+\u0007O\u001d\t\u0005\u001bW\u0011IM\u0001\u000bXS2$7-\u0019:e'\u0016dWm\u0019;peJ+\u0007O]\n\u0005\u0005\u0013\u001cY\u0006\u0006\u0002\u000e\u001aR!AQ\\GR\u0011!!9F!4A\u0002\u0011eC\u0003BGT\u001bS\u0003ba!\u0018\u00076\u0012e\u0003\u0002\u0003D\u0005\u0005\u001f\u0004\r\u0001\"8\u0002!9\u000bW.Z*fY\u0016\u001cGo\u001c:SKB\u0014\b\u0003BG\u0016\u0005'\u0014\u0001CT1nKN+G.Z2u_J\u0014V\r\u001d:\u0014\t\tM71\f\u000b\u0003\u001b[#b\u0001\"8\u000e86e\u0006\u0002CBQ\u0005/\u0004\rA\"8\t\u0011\u0011]#q\u001ba\u0001\t3\"B!$0\u000eBB11Q\fD[\u001b\u007f\u0003\u0002b!\u0018\b*\u0019uG\u0011\f\u0005\t\r\u0013\u0011I\u000e1\u0001\u0005^\u0006)\u0011I\u001d:poB!Q2\u0006Bo\u0005\u0015\t%O]8x'\u0011\u0011ina\u0017\u0015\u00055\u0015GCBGh\u001b+lI\u000e\u0005\u0003\u0004t5E\u0017\u0002BGj\tG\u0014Q!\u00119qYfD\u0001\"d6\u0003b\u0002\u0007AQ\\\u0001\u0005Y\u00164G\u000f\u0003\u0005\u000e\\\n\u0005\b\u0019\u0001Co\u0003\u0015\u0011\u0018n\u001a5u)\u0011Qy$d8\t\u0011\u0019%!1\u001da\u0001\u001b\u001f\f!CU3oC6,7+\u001a7fGR|'OU3qeB!Q2\u0006Bt\u0005I\u0011VM\\1nKN+G.Z2u_J\u0014V\r\u001d:\u0014\t\t\u001d81\f\u000b\u0003\u001bG$\"\u0002\"8\u000en6=X2_G{\u0011!iiGa;A\u0002\u0019u\u0007\u0002CGy\u0005W\u0004\r\u0001\"\u0017\u0002\tA|7/\r\u0005\t\u001bk\u0012Y\u000f1\u0001\u0007^\"AQr\u001fBv\u0001\u0004!I&\u0001\u0003q_N\u0014D\u0003BG~\u001b\u007f\u0004ba!\u0018\u000766u\b\u0003DB/\u0013c3i\u000e\"\u0017\u0007^\u0012e\u0003\u0002\u0003D\u0005\u0005[\u0004\r\u0001\"8\u0002)Us\u0017.\u001c9peR\u001cV\r\\3di>\u0014(+\u001a9s!\u0011iYC!=\u0003)Us\u0017.\u001c9peR\u001cV\r\\3di>\u0014(+\u001a9s'\u0011\u0011\tpa\u0017\u0015\u00059\rAC\u0002Co\u001d\u001bqy\u0001\u0003\u0005\u0004\"\nU\b\u0019\u0001Do\u0011!!9F!>A\u0002\u0011eC\u0003BG_\u001d'A\u0001B\"\u0003\u0003x\u0002\u0007AQ\\\u0001\u000bI\u0016\u0014\u0018N^3e!>\u001cHC\u0002C-\u001d3qi\u0002\u0003\u0005\u000f\u001c\te\b\u0019\u0001Co\u0003\u0005!\b\u0002CG\u001f\u0005s\u0004\raa;\u0002\u001b\u0011,'/\u001b<fI>3gm]3u)\u0011\u0019YOd\t\t\u0011\u0011]#1 a\u0001\t3\"bAd\n\u000f.9E\u0002\u0003BB:\u001dSIAAd\u000b\u0005d\n1\u0011*\u001c9peRD\u0001Bd\f\u0003~\u0002\u0007AQ\\\u0001\u0005Kb\u0004(\u000f\u0003\u0005\u000f4\tu\b\u0019\u0001D\u0010\u0003%\u0019X\r\\3di>\u00148\u000f\u0006\u0003\f*:]\u0002\u0002\u0003H\u001d\u0005\u007f\u0004\rAd\n\u0002\u0007%l\u0007/A\nTs:$\u0018m\u0019;jGN+G.Z2u)f\u0004X\r\u0005\u0003\u0007\u001c\u000e\r!aE*z]R\f7\r^5d'\u0016dWm\u0019;UsB,7CBB\u0002\u00077r\u0019\u0005\u0005\u0003\u0007\u001c:\u0015\u0013\u0002\u0002H$\u0007k\u0012AdU=oi\u0006\u001cG/[2TK2,7\r\u001e+za\u0016,\u0005\u0010\u001e:bGR|'\u000f\u0006\u0002\u000f>Q1AQ\u001eH'\u001d\u001fB\u0001B\"6\u0004\b\u0001\u0007AQ\u001c\u0005\t\u0007C\u001b9\u00011\u0001\u0007nR!a2\u000bH,!\u0019\u0019iF\".\u000fVAA1QLD\u0015\t;4i\u000f\u0003\u0005\u0007\n\r%\u0001\u0019\u0001Co\u0003M\u0019\u0016P\u001c;bGRL7mU3mK\u000e$H+\u001a:n!\u00111Yj!\u0004\u0003'MKh\u000e^1di&\u001c7+\u001a7fGR$VM]7\u0014\r\r511\fH1!\u00111YJd\u0019\n\t9\u00154Q\u000f\u0002\u001d'ftG/Y2uS\u000e\u001cV\r\\3diR+'/\\#yiJ\f7\r^8s)\tqY\u0006\u0006\u0004\u0005n:-dR\u000e\u0005\t\r+\u001c\t\u00021\u0001\u0005^\"A1\u0011UB\t\u0001\u00041i\u000e\u0006\u0003\u000fr9U\u0004CBB/\rks\u0019\b\u0005\u0005\u0004^\u001d%BQ\u001cDo\u0011!1Iaa\u0005A\u0002\u0011u\u0017!F*z]R\f7\r^5d\u0007>l\u0007o\\;oIRK\b/\u001a\t\u0005\r7\u001b9BA\u000bTs:$\u0018m\u0019;jG\u000e{W\u000e]8v]\u0012$\u0016\u0010]3\u0014\r\r]11\fH@!\u00111YJ$!\n\t9\r5Q\u000f\u0002\u001f'ftG/Y2uS\u000e\u001cu.\u001c9pk:$G+\u001f9f\u000bb$(/Y2u_J$\"A$\u001f\u0015\r9%er\u0012HI!\u0011\u0019\u0019Hd#\n\t95E1\u001d\u0002\u0011\u0007>l\u0007o\\;oIRK\b/\u001a+sK\u0016D\u0001\"b\u0018\u0004\u001c\u0001\u0007aq\u0004\u0005\t\r\u000f\u001cY\u00021\u0001\u0007 Q!aR\u0013HM!\u0019\u0019iF\".\u000f\u0018BA1QLD\u0015\r?1y\u0002\u0003\u0005\u0007\n\ru\u0001\u0019\u0001Co\u0003Y\u0019\u0016P\u001c;bGRL7mU5oO2,Go\u001c8UsB,\u0007\u0003\u0002DN\u0007C\u0011acU=oi\u0006\u001cG/[2TS:<G.\u001a;p]RK\b/Z\n\u0007\u0007C\u0019YFd)\u0011\t\u0019meRU\u0005\u0005\u001dO\u001b)HA\u0010Ts:$\u0018mY5uGNKgn\u001a7fi>tG+\u001f9f\u000bb$(/Y2u_J$\"A$(\u0015\t95f2\u0017\t\u0005\u0007gry+\u0003\u0003\u000f2\u0012\r(!E*j]\u001edW\r^8o)f\u0004X\r\u0016:fK\"AaRWB\u0013\u0001\u0004!i.A\u0002sK\u001a$BAc4\u000f:\"Aa\u0011BB\u0014\u0001\u0004!i.A\fTs:$\u0018m\u0019;jGRK\b/\u001a)s_*,7\r^5p]B!a1TB\u0016\u0005]\u0019\u0016P\u001c;bGRL7\rV=qKB\u0013xN[3di&|gn\u0005\u0004\u0004,\rmc2\u0019\t\u0005\r7s)-\u0003\u0003\u000fH\u000eU$\u0001I*z]R\f7\r^5d)f\u0004X\r\u0015:pU\u0016\u001cG/[8o\u000bb$(/Y2u_J$\"A$0\u0015\r95g2\u001bHk!\u0011\u0019\u0019Hd4\n\t9EG1\u001d\u0002\u0013'\u0016dWm\u0019;Ge>lG+\u001f9f)J,W\r\u0003\u0005\u0007V\u000e=\u0002\u0019\u0001Co\u0011!\u0019\tka\fA\u0002\u00195H\u0003\u0002H*\u001d3D\u0001B\"\u0003\u00042\u0001\u0007AQ\\\u0001\u0017'ftG/Y2uS\u000e\feN\\8uCR,G\rV=qKB!a1TB\u001b\u0005Y\u0019\u0016P\u001c;bGRL7-\u00118o_R\fG/\u001a3UsB,7CBB\u001b\u00077r\u0019\u000f\u0005\u0003\u0007\u001c:\u0015\u0018\u0002\u0002Ht\u0007k\u0012qdU=oi\u0006\u001cG/[2B]:|G/\u0019;fIRK\b/Z#yiJ\f7\r^8s)\tqi\u000e\u0006\u0004\u000fn:MhR\u001f\t\u0005\u0007gry/\u0003\u0003\u000fr\u0012\r(!C!o]>$\u0018\r^3e\u0011!IIn!\u000fA\u0002\u0011u\u0007\u0002\u0003H|\u0007s\u0001\r\u0001\"8\u0002\u000b\u0005tgn\u001c;\u0015\t)}b2 \u0005\t\r\u0013\u0019Y\u00041\u0001\u0005^\u0006A2+\u001f8uC\u000e$\u0018nY#ySN$XM\u001c;jC2$\u0016\u0010]3\u0011\t\u0019m5q\b\u0002\u0019'ftG/Y2uS\u000e,\u00050[:uK:$\u0018.\u00197UsB,7CBB \u00077z)\u0001\u0005\u0003\u0007\u001c>\u001d\u0011\u0002BH\u0005\u0007k\u0012\u0011eU=oi\u0006\u001cG/[2Fq&\u001cH/\u001a8uS\u0006dG+\u001f9f\u000bb$(/Y2u_J$\"Ad@\u0015\r==qRCH\f!\u0011\u0019\u0019h$\u0005\n\t=MA1\u001d\u0002\u0014\u000bbL7\u000f^3oi&\fG\u000eV=qKR\u0013X-\u001a\u0005\t\u00133\u001c\u0019\u00051\u0001\u0005^\"Aq\u0012DB\"\u0001\u00041y\"A\u0003xQ\u0016\u0014X\r\u0006\u0003\u0010\u001e=%\u0002CBB/\rk{y\u0002\u0005\u0005\u0004^\u001d%BQ\\H\u0011!\u0019!9\u000b\",\u0010$A!11OH\u0013\u0013\u0011y9\u0003b9\u0003\u00135+WNY3s\t\u00164\u0007\u0002\u0003D\u0005\u0007\u000b\u0002\r\u0001\"8\u0002\u000b\t,\u0018\u000e\u001c3\u0016\u0005\r\u0015\u0005\u0003BH\u0019\u001fgi!aa\u0013\n\t=U21\n\u0002\f'fl'm\u001c7UC\ndW\r"
)
public interface ReificationSupport {
   void scala$reflect$internal$ReificationSupport$_setter_$build_$eq(final ReificationSupportImpl x$1);

   ReificationSupportImpl build();

   static void $init$(final ReificationSupport $this) {
      $this.scala$reflect$internal$ReificationSupport$_setter_$build_$eq((SymbolTable)$this.new ReificationSupportImpl());
   }

   public class ReificationSupportImpl implements scala.reflect.api.Internals.ReificationSupportApi {
      private volatile ScalaDot$ ScalaDot$module;
      private volatile ImplicitParams$ ImplicitParams$module;
      private volatile FlagsRepr$ FlagsRepr$module;
      private volatile SyntacticTypeApplied$ SyntacticTypeApplied$module;
      private volatile SyntacticAppliedType$ SyntacticAppliedType$module;
      private volatile SyntacticApplied$ SyntacticApplied$module;
      private volatile UnCtor$ UnCtor$module;
      private volatile UnMkTemplate$ UnMkTemplate$module;
      private volatile SyntacticClassDef$ SyntacticClassDef$module;
      private volatile SyntacticTraitDef$ SyntacticTraitDef$module;
      private volatile SyntacticObjectDef$ SyntacticObjectDef$module;
      private volatile SyntacticPackageObjectDef$ SyntacticPackageObjectDef$module;
      private volatile TupleClassRef$ TupleClassRef$module;
      private volatile TupleCompanionRef$ TupleCompanionRef$module;
      private volatile UnitClassRef$ UnitClassRef$module;
      private volatile FunctionClassRef$ FunctionClassRef$module;
      private volatile SyntacticTuple$ SyntacticTuple$module;
      private volatile SyntacticTupleType$ SyntacticTupleType$module;
      private volatile SyntacticFunctionType$ SyntacticFunctionType$module;
      private volatile SyntheticUnit$ SyntheticUnit$module;
      private volatile SyntacticBlock$ SyntacticBlock$module;
      private volatile SyntacticFunction$ SyntacticFunction$module;
      private volatile SyntacticNew$ SyntacticNew$module;
      private volatile SyntacticDefDef$ SyntacticDefDef$module;
      private volatile SyntacticValDef$ SyntacticValDef$module;
      private volatile SyntacticVarDef$ SyntacticVarDef$module;
      private volatile SyntacticAssign$ SyntacticAssign$module;
      private volatile SyntacticValFrom$ SyntacticValFrom$module;
      private volatile SyntacticValEq$ SyntacticValEq$module;
      private volatile SyntacticFilter$ SyntacticFilter$module;
      private volatile SyntacticEmptyTypeTree$ SyntacticEmptyTypeTree$module;
      private volatile UnPatSeq$ UnPatSeq$module;
      private volatile implodePatDefs$ implodePatDefs$module;
      private volatile SyntacticPatDef$ SyntacticPatDef$module;
      private volatile UnPatSeqWithRes$ UnPatSeqWithRes$module;
      private volatile UnSyntheticParam$ UnSyntheticParam$module;
      private volatile UnVisitor$ UnVisitor$module;
      private volatile UnClosure$ UnClosure$module;
      private volatile FilterCall$ FilterCall$module;
      private volatile UnFilter$ UnFilter$module;
      private volatile UnCheckIfRefutable$ UnCheckIfRefutable$module;
      private volatile UnMap$ UnMap$module;
      private volatile UnForeach$ UnForeach$module;
      private volatile UnFlatMap$ UnFlatMap$module;
      private volatile UnFor$ UnFor$module;
      private volatile SyntacticFor$ SyntacticFor$module;
      private volatile SyntacticForYield$ SyntacticForYield$module;
      private volatile MaybeTypeTreeOriginal$ MaybeTypeTreeOriginal$module;
      private volatile MaybeSelectApply$ MaybeSelectApply$module;
      private volatile MaybeUnchecked$ MaybeUnchecked$module;
      private volatile MaybeTyped$ MaybeTyped$module;
      private volatile SyntacticPartialFunction$ SyntacticPartialFunction$module;
      private volatile SyntacticMatch$ SyntacticMatch$module;
      private volatile SyntacticTry$ SyntacticTry$module;
      private volatile SyntacticTermIdent$ SyntacticTermIdent$module;
      private volatile SyntacticTypeIdent$ SyntacticTypeIdent$module;
      private volatile SyntacticImport$ SyntacticImport$module;
      private volatile SyntacticSelectType$ SyntacticSelectType$module;
      private volatile SyntacticSelectTerm$ SyntacticSelectTerm$module;
      private volatile SyntacticCompoundType$ SyntacticCompoundType$module;
      private volatile SyntacticSingletonType$ SyntacticSingletonType$module;
      private volatile SyntacticTypeProjection$ SyntacticTypeProjection$module;
      private volatile SyntacticAnnotatedType$ SyntacticAnnotatedType$module;
      private volatile SyntacticExistentialType$ SyntacticExistentialType$module;
      // $FF: synthetic field
      public final SymbolTable $outer;

      public ScalaDot$ ScalaDot() {
         if (this.ScalaDot$module == null) {
            this.ScalaDot$lzycompute$1();
         }

         return this.ScalaDot$module;
      }

      public ImplicitParams$ ImplicitParams() {
         if (this.ImplicitParams$module == null) {
            this.ImplicitParams$lzycompute$1();
         }

         return this.ImplicitParams$module;
      }

      public FlagsRepr$ FlagsRepr() {
         if (this.FlagsRepr$module == null) {
            this.FlagsRepr$lzycompute$1();
         }

         return this.FlagsRepr$module;
      }

      public SyntacticTypeApplied$ SyntacticTypeApplied() {
         if (this.SyntacticTypeApplied$module == null) {
            this.SyntacticTypeApplied$lzycompute$1();
         }

         return this.SyntacticTypeApplied$module;
      }

      public SyntacticAppliedType$ SyntacticAppliedType() {
         if (this.SyntacticAppliedType$module == null) {
            this.SyntacticAppliedType$lzycompute$1();
         }

         return this.SyntacticAppliedType$module;
      }

      public SyntacticApplied$ SyntacticApplied() {
         if (this.SyntacticApplied$module == null) {
            this.SyntacticApplied$lzycompute$1();
         }

         return this.SyntacticApplied$module;
      }

      public UnCtor$ UnCtor() {
         if (this.UnCtor$module == null) {
            this.UnCtor$lzycompute$1();
         }

         return this.UnCtor$module;
      }

      public UnMkTemplate$ UnMkTemplate() {
         if (this.UnMkTemplate$module == null) {
            this.UnMkTemplate$lzycompute$1();
         }

         return this.UnMkTemplate$module;
      }

      public SyntacticClassDef$ SyntacticClassDef() {
         if (this.SyntacticClassDef$module == null) {
            this.SyntacticClassDef$lzycompute$1();
         }

         return this.SyntacticClassDef$module;
      }

      public SyntacticTraitDef$ SyntacticTraitDef() {
         if (this.SyntacticTraitDef$module == null) {
            this.SyntacticTraitDef$lzycompute$1();
         }

         return this.SyntacticTraitDef$module;
      }

      public SyntacticObjectDef$ SyntacticObjectDef() {
         if (this.SyntacticObjectDef$module == null) {
            this.SyntacticObjectDef$lzycompute$1();
         }

         return this.SyntacticObjectDef$module;
      }

      public SyntacticPackageObjectDef$ SyntacticPackageObjectDef() {
         if (this.SyntacticPackageObjectDef$module == null) {
            this.SyntacticPackageObjectDef$lzycompute$1();
         }

         return this.SyntacticPackageObjectDef$module;
      }

      public TupleClassRef$ TupleClassRef() {
         if (this.TupleClassRef$module == null) {
            this.TupleClassRef$lzycompute$1();
         }

         return this.TupleClassRef$module;
      }

      public TupleCompanionRef$ TupleCompanionRef() {
         if (this.TupleCompanionRef$module == null) {
            this.TupleCompanionRef$lzycompute$1();
         }

         return this.TupleCompanionRef$module;
      }

      public UnitClassRef$ UnitClassRef() {
         if (this.UnitClassRef$module == null) {
            this.UnitClassRef$lzycompute$1();
         }

         return this.UnitClassRef$module;
      }

      public FunctionClassRef$ FunctionClassRef() {
         if (this.FunctionClassRef$module == null) {
            this.FunctionClassRef$lzycompute$1();
         }

         return this.FunctionClassRef$module;
      }

      public SyntacticTuple$ SyntacticTuple() {
         if (this.SyntacticTuple$module == null) {
            this.SyntacticTuple$lzycompute$1();
         }

         return this.SyntacticTuple$module;
      }

      public SyntacticTupleType$ SyntacticTupleType() {
         if (this.SyntacticTupleType$module == null) {
            this.SyntacticTupleType$lzycompute$1();
         }

         return this.SyntacticTupleType$module;
      }

      public SyntacticFunctionType$ SyntacticFunctionType() {
         if (this.SyntacticFunctionType$module == null) {
            this.SyntacticFunctionType$lzycompute$1();
         }

         return this.SyntacticFunctionType$module;
      }

      public SyntheticUnit$ SyntheticUnit() {
         if (this.SyntheticUnit$module == null) {
            this.SyntheticUnit$lzycompute$1();
         }

         return this.SyntheticUnit$module;
      }

      public SyntacticBlock$ SyntacticBlock() {
         if (this.SyntacticBlock$module == null) {
            this.SyntacticBlock$lzycompute$1();
         }

         return this.SyntacticBlock$module;
      }

      public SyntacticFunction$ SyntacticFunction() {
         if (this.SyntacticFunction$module == null) {
            this.SyntacticFunction$lzycompute$1();
         }

         return this.SyntacticFunction$module;
      }

      public SyntacticNew$ SyntacticNew() {
         if (this.SyntacticNew$module == null) {
            this.SyntacticNew$lzycompute$1();
         }

         return this.SyntacticNew$module;
      }

      public SyntacticDefDef$ SyntacticDefDef() {
         if (this.SyntacticDefDef$module == null) {
            this.SyntacticDefDef$lzycompute$1();
         }

         return this.SyntacticDefDef$module;
      }

      public SyntacticValDef$ SyntacticValDef() {
         if (this.SyntacticValDef$module == null) {
            this.SyntacticValDef$lzycompute$1();
         }

         return this.SyntacticValDef$module;
      }

      public SyntacticVarDef$ SyntacticVarDef() {
         if (this.SyntacticVarDef$module == null) {
            this.SyntacticVarDef$lzycompute$1();
         }

         return this.SyntacticVarDef$module;
      }

      public SyntacticAssign$ SyntacticAssign() {
         if (this.SyntacticAssign$module == null) {
            this.SyntacticAssign$lzycompute$1();
         }

         return this.SyntacticAssign$module;
      }

      public SyntacticValFrom$ SyntacticValFrom() {
         if (this.SyntacticValFrom$module == null) {
            this.SyntacticValFrom$lzycompute$1();
         }

         return this.SyntacticValFrom$module;
      }

      public SyntacticValEq$ SyntacticValEq() {
         if (this.SyntacticValEq$module == null) {
            this.SyntacticValEq$lzycompute$1();
         }

         return this.SyntacticValEq$module;
      }

      public SyntacticFilter$ SyntacticFilter() {
         if (this.SyntacticFilter$module == null) {
            this.SyntacticFilter$lzycompute$1();
         }

         return this.SyntacticFilter$module;
      }

      public SyntacticEmptyTypeTree$ SyntacticEmptyTypeTree() {
         if (this.SyntacticEmptyTypeTree$module == null) {
            this.SyntacticEmptyTypeTree$lzycompute$1();
         }

         return this.SyntacticEmptyTypeTree$module;
      }

      public UnPatSeq$ UnPatSeq() {
         if (this.UnPatSeq$module == null) {
            this.UnPatSeq$lzycompute$1();
         }

         return this.UnPatSeq$module;
      }

      public implodePatDefs$ implodePatDefs() {
         if (this.implodePatDefs$module == null) {
            this.implodePatDefs$lzycompute$1();
         }

         return this.implodePatDefs$module;
      }

      public SyntacticPatDef$ SyntacticPatDef() {
         if (this.SyntacticPatDef$module == null) {
            this.SyntacticPatDef$lzycompute$1();
         }

         return this.SyntacticPatDef$module;
      }

      public UnPatSeqWithRes$ UnPatSeqWithRes() {
         if (this.UnPatSeqWithRes$module == null) {
            this.UnPatSeqWithRes$lzycompute$1();
         }

         return this.UnPatSeqWithRes$module;
      }

      public UnSyntheticParam$ UnSyntheticParam() {
         if (this.UnSyntheticParam$module == null) {
            this.UnSyntheticParam$lzycompute$1();
         }

         return this.UnSyntheticParam$module;
      }

      public UnVisitor$ UnVisitor() {
         if (this.UnVisitor$module == null) {
            this.UnVisitor$lzycompute$1();
         }

         return this.UnVisitor$module;
      }

      public UnClosure$ UnClosure() {
         if (this.UnClosure$module == null) {
            this.UnClosure$lzycompute$1();
         }

         return this.UnClosure$module;
      }

      public FilterCall$ FilterCall() {
         if (this.FilterCall$module == null) {
            this.FilterCall$lzycompute$1();
         }

         return this.FilterCall$module;
      }

      public UnFilter$ UnFilter() {
         if (this.UnFilter$module == null) {
            this.UnFilter$lzycompute$1();
         }

         return this.UnFilter$module;
      }

      public UnCheckIfRefutable$ UnCheckIfRefutable() {
         if (this.UnCheckIfRefutable$module == null) {
            this.UnCheckIfRefutable$lzycompute$1();
         }

         return this.UnCheckIfRefutable$module;
      }

      public UnMap$ UnMap() {
         if (this.UnMap$module == null) {
            this.UnMap$lzycompute$1();
         }

         return this.UnMap$module;
      }

      public UnForeach$ UnForeach() {
         if (this.UnForeach$module == null) {
            this.UnForeach$lzycompute$1();
         }

         return this.UnForeach$module;
      }

      public UnFlatMap$ UnFlatMap() {
         if (this.UnFlatMap$module == null) {
            this.UnFlatMap$lzycompute$1();
         }

         return this.UnFlatMap$module;
      }

      public UnFor$ UnFor() {
         if (this.UnFor$module == null) {
            this.UnFor$lzycompute$1();
         }

         return this.UnFor$module;
      }

      public SyntacticFor$ SyntacticFor() {
         if (this.SyntacticFor$module == null) {
            this.SyntacticFor$lzycompute$1();
         }

         return this.SyntacticFor$module;
      }

      public SyntacticForYield$ SyntacticForYield() {
         if (this.SyntacticForYield$module == null) {
            this.SyntacticForYield$lzycompute$1();
         }

         return this.SyntacticForYield$module;
      }

      public MaybeTypeTreeOriginal$ MaybeTypeTreeOriginal() {
         if (this.MaybeTypeTreeOriginal$module == null) {
            this.MaybeTypeTreeOriginal$lzycompute$1();
         }

         return this.MaybeTypeTreeOriginal$module;
      }

      public MaybeSelectApply$ MaybeSelectApply() {
         if (this.MaybeSelectApply$module == null) {
            this.MaybeSelectApply$lzycompute$1();
         }

         return this.MaybeSelectApply$module;
      }

      public MaybeUnchecked$ MaybeUnchecked() {
         if (this.MaybeUnchecked$module == null) {
            this.MaybeUnchecked$lzycompute$1();
         }

         return this.MaybeUnchecked$module;
      }

      public MaybeTyped$ MaybeTyped() {
         if (this.MaybeTyped$module == null) {
            this.MaybeTyped$lzycompute$1();
         }

         return this.MaybeTyped$module;
      }

      public SyntacticPartialFunction$ SyntacticPartialFunction() {
         if (this.SyntacticPartialFunction$module == null) {
            this.SyntacticPartialFunction$lzycompute$1();
         }

         return this.SyntacticPartialFunction$module;
      }

      public SyntacticMatch$ SyntacticMatch() {
         if (this.SyntacticMatch$module == null) {
            this.SyntacticMatch$lzycompute$1();
         }

         return this.SyntacticMatch$module;
      }

      public SyntacticTry$ SyntacticTry() {
         if (this.SyntacticTry$module == null) {
            this.SyntacticTry$lzycompute$1();
         }

         return this.SyntacticTry$module;
      }

      public SyntacticTermIdent$ SyntacticTermIdent() {
         if (this.SyntacticTermIdent$module == null) {
            this.SyntacticTermIdent$lzycompute$1();
         }

         return this.SyntacticTermIdent$module;
      }

      public SyntacticTypeIdent$ SyntacticTypeIdent() {
         if (this.SyntacticTypeIdent$module == null) {
            this.SyntacticTypeIdent$lzycompute$1();
         }

         return this.SyntacticTypeIdent$module;
      }

      public SyntacticImport$ SyntacticImport() {
         if (this.SyntacticImport$module == null) {
            this.SyntacticImport$lzycompute$1();
         }

         return this.SyntacticImport$module;
      }

      public SyntacticSelectType$ SyntacticSelectType() {
         if (this.SyntacticSelectType$module == null) {
            this.SyntacticSelectType$lzycompute$1();
         }

         return this.SyntacticSelectType$module;
      }

      public SyntacticSelectTerm$ SyntacticSelectTerm() {
         if (this.SyntacticSelectTerm$module == null) {
            this.SyntacticSelectTerm$lzycompute$1();
         }

         return this.SyntacticSelectTerm$module;
      }

      public SyntacticCompoundType$ SyntacticCompoundType() {
         if (this.SyntacticCompoundType$module == null) {
            this.SyntacticCompoundType$lzycompute$1();
         }

         return this.SyntacticCompoundType$module;
      }

      public SyntacticSingletonType$ SyntacticSingletonType() {
         if (this.SyntacticSingletonType$module == null) {
            this.SyntacticSingletonType$lzycompute$1();
         }

         return this.SyntacticSingletonType$module;
      }

      public SyntacticTypeProjection$ SyntacticTypeProjection() {
         if (this.SyntacticTypeProjection$module == null) {
            this.SyntacticTypeProjection$lzycompute$1();
         }

         return this.SyntacticTypeProjection$module;
      }

      public SyntacticAnnotatedType$ SyntacticAnnotatedType() {
         if (this.SyntacticAnnotatedType$module == null) {
            this.SyntacticAnnotatedType$lzycompute$1();
         }

         return this.SyntacticAnnotatedType$module;
      }

      public SyntacticExistentialType$ SyntacticExistentialType() {
         if (this.SyntacticExistentialType$module == null) {
            this.SyntacticExistentialType$lzycompute$1();
         }

         return this.SyntacticExistentialType$module;
      }

      public Symbols.TypeSymbol selectType(final Symbols.Symbol owner, final String name) {
         return (Symbols.TypeSymbol)this.select(owner, this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().newTypeName(name)).asType();
      }

      public Symbols.TermSymbol selectTerm(final Symbols.Symbol owner, final String name) {
         Symbols.TermSymbol result = (Symbols.TermSymbol)this.select(owner, this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().newTermName(name)).asTerm();
         return result.isOverloaded() ? (Symbols.TermSymbol)result.suchThat((x$1) -> BoxesRunTime.boxToBoolean($anonfun$selectTerm$1(x$1))).asTerm() : result;
      }

      public Symbols.Symbol select(final Symbols.Symbol owner, final Names.Name name) {
         Symbols.Symbol result = owner.info().decl(name);
         if (result != this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoSymbol()) {
            return result;
         } else {
            Symbols.Symbol var10000 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().mirrorThatLoaded(owner).missingHook(owner, name);
            if (var10000 == null) {
               throw null;
            } else {
               Symbols.Symbol orElse_this = var10000;
               if (orElse_this != orElse_this.scala$reflect$internal$Symbols$Symbol$$$outer().NoSymbol()) {
                  return orElse_this;
               } else {
                  throw $anonfun$select$1(name, owner);
               }
            }
         }
      }

      public Symbols.MethodSymbol selectOverloadedMethod(final Symbols.Symbol owner, final String name, final int index) {
         List var10000 = owner.info().decl((Names.Name)this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().newTermName(name)).alternatives();
         if (var10000 == null) {
            throw null;
         } else {
            Symbols.Symbol result = (Symbols.Symbol)LinearSeqOps.apply$(var10000, index);
            if (result != this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoSymbol()) {
               return (Symbols.MethodSymbol)result.asMethod();
            } else {
               throw new ScalaReflectionException(.MODULE$.format$extension("overloaded method %s #%d in %s not found", scala.runtime.ScalaRunTime..MODULE$.genericWrapArray(new Object[]{name, index, owner.fullName('.')})));
            }
         }
      }

      public Symbols.FreeTermSymbol newFreeTerm(final String name, final Function0 value, final long flags, final String origin) {
         return (Symbols.FreeTermSymbol)this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().newFreeTermSymbol(this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().newTermName(name), value, flags, origin).markFlagsCompleted(-1L);
      }

      public long newFreeTerm$default$3() {
         return 0L;
      }

      public String newFreeTerm$default$4() {
         return null;
      }

      public Symbols.FreeTypeSymbol newFreeType(final String name, final long flags, final String origin) {
         return (Symbols.FreeTypeSymbol)this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().newFreeTypeSymbol(this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().newTypeName(name), flags, origin).markFlagsCompleted(-1L);
      }

      public long newFreeType$default$2() {
         return 0L;
      }

      public String newFreeType$default$3() {
         return null;
      }

      public Symbols.Symbol newNestedSymbol(final Symbols.Symbol owner, final Names.Name name, final Position pos, final long flags, final boolean isClass) {
         return owner.newNestedSymbol(name, pos, flags, isClass).markFlagsCompleted(-1L);
      }

      public Scopes.Scope newScopeWith(final Seq elems) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().newScopeWith(elems);
      }

      public Symbols.Symbol setAnnotations(final Symbols.Symbol sym, final List annots) {
         return sym.setAnnotations(annots);
      }

      public Symbols.Symbol setInfo(final Symbols.Symbol sym, final Types.Type tpe) {
         return sym.setInfo(tpe).markAllCompleted();
      }

      public Trees.Tree mkThis(final Symbols.Symbol sym) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().This(sym);
      }

      public Trees.Select mkSelect(final Trees.Tree qualifier, final Symbols.Symbol sym) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().Select(qualifier, sym);
      }

      public Trees.Ident mkIdent(final Symbols.Symbol sym) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().Ident(sym);
      }

      public Trees.TypeTree mkTypeTree(final Types.Type tp) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().TypeTree(tp);
      }

      public Types.Type ThisType(final Symbols.Symbol sym) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().ThisType().apply(sym);
      }

      public Types.Type SingleType(final Types.Type pre, final Symbols.Symbol sym) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().SingleType().apply(pre, sym);
      }

      public Types.Type SuperType(final Types.Type thistpe, final Types.Type supertpe) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().SuperType().apply(thistpe, supertpe);
      }

      public Types.ConstantType ConstantType(final Constants.Constant value) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().ConstantType().apply(value);
      }

      public Types.Type TypeRef(final Types.Type pre, final Symbols.Symbol sym, final List args) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().TypeRef().apply(pre, sym, args);
      }

      public Types.RefinedType RefinedType(final List parents, final Scopes.Scope decls, final Symbols.Symbol typeSymbol) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().RefinedType().apply(parents, decls, typeSymbol);
      }

      public Types.ClassInfoType ClassInfoType(final List parents, final Scopes.Scope decls, final Symbols.Symbol typeSymbol) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new ClassInfoType(parents, decls, typeSymbol);
      }

      public Types.MethodType MethodType(final List params, final Types.Type resultType) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new MethodType(params, resultType);
      }

      public Types.NullaryMethodType NullaryMethodType(final Types.Type resultType) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new NullaryMethodType(resultType);
      }

      public Types.PolyType PolyType(final List typeParams, final Types.Type resultType) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new PolyType(typeParams, resultType);
      }

      public Types.ExistentialType ExistentialType(final List quantified, final Types.Type underlying) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new ExistentialType(quantified, underlying);
      }

      public Types.AnnotatedType AnnotatedType(final List annotations, final Types.Type underlying) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new AnnotatedType(annotations, underlying);
      }

      public Types.TypeBounds TypeBounds(final Types.Type lo, final Types.Type hi) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().TypeBounds().apply(lo, hi);
      }

      public Types.BoundedWildcardType BoundedWildcardType(final Types.TypeBounds bounds) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new BoundedWildcardType(bounds);
      }

      public Types.Type thisPrefix(final Symbols.Symbol sym) {
         return sym.thisPrefix();
      }

      public Trees.Tree setType(final Trees.Tree tree, final Types.Type tpe) {
         tree.setType(tpe);
         return tree;
      }

      public Trees.Tree setSymbol(final Trees.Tree tree, final Symbols.Symbol sym) {
         tree.setSymbol(sym);
         return tree;
      }

      public List toStats(final Trees.Tree tree) {
         if (this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree().equals(tree)) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            if (tree != null) {
               Option var2 = this.SyntacticBlock().unapply(tree);
               if (!var2.isEmpty()) {
                  return (List)var2.get();
               }
            }

            if (tree.isDef()) {
               List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
               return new scala.collection.immutable..colon.colon(tree, $colon$colon_this);
            } else if (tree instanceof Trees.Import) {
               Trees.Import var3 = (Trees.Import)tree;
               List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
               return new scala.collection.immutable..colon.colon(var3, $colon$colon_this);
            } else {
               throw new IllegalArgumentException((new StringBuilder(14)).append("can't flatten ").append(tree).toString());
            }
         }
      }

      public Trees.Tree mkAnnotation(final Trees.Tree tree) {
         if (tree != null) {
            Option var2 = this.SyntacticNew().unapply(tree);
            if (!var2.isEmpty()) {
               List var3 = (List)((Tuple4)var2.get())._1();
               List var4 = (List)((Tuple4)var2.get())._2();
               Trees.ValDef var5 = (Trees.ValDef)((Tuple4)var2.get())._3();
               List var6 = (List)((Tuple4)var2.get())._4();
               if (scala.collection.immutable.Nil..MODULE$.equals(var3) && var4 instanceof scala.collection.immutable..colon.colon) {
                  scala.collection.immutable..colon.colon var7 = (scala.collection.immutable..colon.colon)var4;
                  Trees.Tree var8 = (Trees.Tree)var7.head();
                  List var9 = var7.next$access$1();
                  if (var8 != null) {
                     Some var10 = this.SyntacticApplied().unapply(var8);
                     if (!var10.isEmpty()) {
                        Trees.Tree var11 = (Trees.Tree)((Tuple2)var10.value())._1();
                        if (var11 != null && !this.SyntacticAppliedType().unapply(var11).isEmpty() && scala.collection.immutable.Nil..MODULE$.equals(var9) && this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().noSelfType().equals(var5) && scala.collection.immutable.Nil..MODULE$.equals(var6)) {
                           return tree;
                        }
                     }
                  }
               }
            }
         }

         throw new IllegalArgumentException((new StringBuilder(122)).append("Tree ").append(this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw(tree, this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$2(), this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$3(), this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$4(), this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$5(), this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$6(), this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$7())).append(" isn't a correct representation of annotation.").append("Consider reformatting it into a q\"new $name[..$targs](...$argss)\" shape").toString());
      }

      public List mkAnnotation(final List trees) {
         if (trees == null) {
            throw null;
         } else if (trees == scala.collection.immutable.Nil..MODULE$) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            Trees.Tree var6 = (Trees.Tree)trees.head();
            scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon(this.mkAnnotation(var6), scala.collection.immutable.Nil..MODULE$);
            scala.collection.immutable..colon.colon map_t = map_h;

            for(List map_rest = (List)trees.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               var6 = (Trees.Tree)map_rest.head();
               scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon(this.mkAnnotation(var6), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            return map_h;
         }
      }

      public List mkParam(final List argss, final long extraFlags, final long excludeFlags) {
         if (argss == null) {
            throw null;
         } else if (argss == scala.collection.immutable.Nil..MODULE$) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            List var10 = (List)argss.head();
            scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$mkParam$1(this, extraFlags, excludeFlags, var10), scala.collection.immutable.Nil..MODULE$);
            scala.collection.immutable..colon.colon map_t = map_h;

            for(List map_rest = (List)argss.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               var10 = (List)map_rest.head();
               scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$mkParam$1(this, extraFlags, excludeFlags, var10), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            return map_h;
         }
      }

      public Trees.ValDef mkParam(final Trees.Tree tree, final long extraFlags, final long excludeFlags) {
         if (tree instanceof Trees.Typed) {
            Trees.Typed var6 = (Trees.Typed)tree;
            Trees.Tree var7 = var6.expr();
            Trees.Tree tpt = var6.tpt();
            if (var7 instanceof Trees.Ident) {
               Names.Name name = ((Trees.Ident)var7).name();
               if (name instanceof Names.TermName) {
                  Names.TermName var10 = (Names.TermName)name;
                  return this.mkParam((Trees.Tree)(this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new ValDef((Trees.Modifiers)this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoMods(), var10, tpt, this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree())), extraFlags, excludeFlags);
               }
            }
         }

         if (tree instanceof Trees.ValDef) {
            Trees.ValDef var11 = (Trees.ValDef)tree;
            Trees.Modifiers newmods = var11.mods().$amp(~excludeFlags);
            if (var11.rhs().nonEmpty()) {
               newmods = newmods.$bar(33554432L);
            }

            Trees.Modifiers x$2 = newmods.$bar(extraFlags);
            Names.Name x$3 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef$default$3(var11);
            Trees.Tree x$4 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef$default$4(var11);
            Trees.Tree x$5 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef$default$5(var11);
            return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef(var11, x$2, x$3, x$4, x$5);
         } else {
            throw new IllegalArgumentException((new StringBuilder(108)).append(tree).append(" is not valid representation of a parameter, ").append("consider reformatting it into q\"val $name: $T = $default\" shape").toString());
         }
      }

      public long mkParam$default$2() {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoFlags();
      }

      public long mkParam$default$3() {
         return 16L;
      }

      public List mkImplicitParam(final List args) {
         if (args == null) {
            throw null;
         } else if (args == scala.collection.immutable.Nil..MODULE$) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            Trees.Tree var6 = (Trees.Tree)args.head();
            scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon(this.mkImplicitParam(var6), scala.collection.immutable.Nil..MODULE$);
            scala.collection.immutable..colon.colon map_t = map_h;

            for(List map_rest = (List)args.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               var6 = (Trees.Tree)map_rest.head();
               scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon(this.mkImplicitParam(var6), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            return map_h;
         }
      }

      public Trees.ValDef mkImplicitParam(final Trees.Tree tree) {
         return this.mkParam(tree, 8704L, this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoFlags());
      }

      public List mkTparams(final List tparams) {
         if (tparams == null) {
            throw null;
         } else if (tparams == scala.collection.immutable.Nil..MODULE$) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            Trees.Tree var6 = (Trees.Tree)tparams.head();
            scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$mkTparams$1(this, var6), scala.collection.immutable.Nil..MODULE$);
            scala.collection.immutable..colon.colon map_t = map_h;

            for(List map_rest = (List)tparams.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               var6 = (Trees.Tree)map_rest.head();
               scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$mkTparams$1(this, var6), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            return map_h;
         }
      }

      public Trees.Tree mkRefineStat(final Trees.Tree stat) {
         if (stat instanceof Trees.DefDef) {
            Trees.DefDef var2 = (Trees.DefDef)stat;
            SymbolTable var10000 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
            boolean require_requirement = var2.rhs().isEmpty();
            if (var10000 == null) {
               throw null;
            }

            SymbolTable require_this = var10000;
            if (!require_requirement) {
               throw require_this.throwRequirementError("can't use DefDef with non-empty body as refine stat");
            }

            require_this = null;
         } else if (stat instanceof Trees.ValDef) {
            Trees.ValDef var3 = (Trees.ValDef)stat;
            SymbolTable var10 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
            boolean require_requirementx = var3.rhs().isEmpty();
            if (var10 == null) {
               throw null;
            }

            SymbolTable require_this = var10;
            if (!require_requirementx) {
               throw require_this.throwRequirementError("can't use ValDef with non-empty rhs as refine stat");
            }

            require_this = null;
         } else if (!(stat instanceof Trees.TypeDef)) {
            throw new IllegalArgumentException((new StringBuilder(23)).append("not legal refine stat: ").append(stat).toString());
         }

         return stat;
      }

      public List mkRefineStat(final List stats) {
         if (stats == null) {
            throw null;
         } else if (stats == scala.collection.immutable.Nil..MODULE$) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            Trees.Tree var6 = (Trees.Tree)stats.head();
            scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon(this.mkRefineStat(var6), scala.collection.immutable.Nil..MODULE$);
            scala.collection.immutable..colon.colon map_t = map_h;

            for(List map_rest = (List)stats.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               var6 = (Trees.Tree)map_rest.head();
               scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon(this.mkRefineStat(var6), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            return map_h;
         }
      }

      public Trees.Tree mkPackageStat(final Trees.Tree stat) {
         if (!(stat instanceof Trees.ClassDef) && !(stat instanceof Trees.ModuleDef) && !(stat instanceof Trees.PackageDef)) {
            throw new IllegalArgumentException((new StringBuilder(24)).append("not legal package stat: ").append(stat).toString());
         } else {
            return stat;
         }
      }

      public List mkPackageStat(final List stats) {
         if (stats == null) {
            throw null;
         } else if (stats == scala.collection.immutable.Nil..MODULE$) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            Trees.Tree var6 = (Trees.Tree)stats.head();
            scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon(this.mkPackageStat(var6), scala.collection.immutable.Nil..MODULE$);
            scala.collection.immutable..colon.colon map_t = map_h;

            for(List map_rest = (List)stats.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               var6 = (Trees.Tree)map_rest.head();
               scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon(this.mkPackageStat(var6), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            return map_h;
         }
      }

      public Trees.Tree mkEarlyDef(final Trees.Tree defn) {
         if (defn instanceof Trees.ValDef) {
            Trees.ValDef var2 = (Trees.ValDef)defn;
            Trees.Modifiers mods = var2.mods();
            if (!mods.isDeferred()) {
               Trees.Modifiers x$2 = mods.$bar(137438953472L);
               Names.Name x$3 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef$default$3(var2);
               Trees.Tree x$4 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef$default$4(var2);
               Trees.Tree x$5 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef$default$5(var2);
               return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef(var2, x$2, x$3, x$4, x$5);
            }
         }

         if (defn instanceof Trees.TypeDef) {
            Trees.TypeDef var8 = (Trees.TypeDef)defn;
            Trees.Modifiers x$7 = var8.mods().$bar(137438953472L);
            Names.Name x$8 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyTypeDef$default$3(var8);
            List x$9 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyTypeDef$default$4(var8);
            Trees.Tree x$10 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyTypeDef$default$5(var8);
            return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyTypeDef(var8, x$7, x$8, x$9, x$10);
         } else {
            throw new IllegalArgumentException((new StringBuilder(21)).append("not legal early def: ").append(defn).toString());
         }
      }

      public List mkEarlyDef(final List defns) {
         if (defns == null) {
            throw null;
         } else if (defns == scala.collection.immutable.Nil..MODULE$) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            Trees.Tree var6 = (Trees.Tree)defns.head();
            scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon(this.mkEarlyDef(var6), scala.collection.immutable.Nil..MODULE$);
            scala.collection.immutable..colon.colon map_t = map_h;

            for(List map_rest = (List)defns.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               var6 = (Trees.Tree)map_rest.head();
               scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon(this.mkEarlyDef(var6), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            return map_h;
         }
      }

      public Trees.RefTree mkRefTree(final Trees.Tree qual, final Symbols.Symbol sym) {
         return (Trees.RefTree)((Trees.Tree)this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().RefTree().apply(qual, sym.name())).setSymbol(sym);
      }

      public Names.TermName freshTermName(final String prefix) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().freshTermName(prefix, this.fresh());
      }

      public Names.TypeName freshTypeName(final String prefix) {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().freshTypeName(prefix, this.fresh());
      }

      public FreshNameCreator fresh() {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().currentFreshNameCreator();
      }

      public String freshTermName$default$1() {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().FRESH_TERM_NAME_PREFIX();
      }

      public Trees.ValDef mkSelfType(final Trees.Tree tree) {
         if (tree instanceof Trees.ValDef) {
            Trees.ValDef var2 = (Trees.ValDef)tree;
            SymbolTable var10000 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
            boolean require_requirement = var2.rhs().isEmpty();
            if (var10000 == null) {
               throw null;
            } else {
               SymbolTable require_this = var10000;
               if (!require_requirement) {
                  throw require_this.throwRequirementError("self types must have empty right hand side");
               } else {
                  require_this = null;
                  Trees.Modifiers x$2 = var2.mods().$bar(4L).$amp(-17L);
                  Names.Name x$3 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef$default$3(var2);
                  Trees.Tree x$4 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef$default$4(var2);
                  Trees.Tree x$5 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef$default$5(var2);
                  return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef(var2, x$2, x$3, x$4, x$5);
               }
            }
         } else {
            throw new IllegalArgumentException((new StringBuilder(94)).append(tree).append(" is not a valid representation of self type, consider reformatting into q\"val $self: $T\" shape").toString());
         }
      }

      public scala.reflect.api.Internals.ReificationSupportApi.UnliftListElementwise UnliftListElementwise(final Liftables.Unliftable unliftable) {
         return null.new UnliftListElementwise(unliftable) {
            private final Liftables.Unliftable unliftable$1;

            public Option unapply(final List lst) {
               if (lst == null) {
                  throw null;
               } else {
                  List flatMap_rest = lst;
                  scala.collection.immutable..colon.colon flatMap_h = null;

                  for(scala.collection.immutable..colon.colon flatMap_t = null; flatMap_rest != scala.collection.immutable.Nil..MODULE$; flatMap_rest = (List)flatMap_rest.tail()) {
                     Trees.Tree var8 = (Trees.Tree)flatMap_rest.head();

                     scala.collection.immutable..colon.colon flatMap_nx;
                     for(Iterator flatMap_it = $anonfun$unapply$9(this, var8).iterator(); flatMap_it.hasNext(); flatMap_t = flatMap_nx) {
                        flatMap_nx = new scala.collection.immutable..colon.colon(flatMap_it.next(), scala.collection.immutable.Nil..MODULE$);
                        if (flatMap_t == null) {
                           flatMap_h = flatMap_nx;
                        } else {
                           flatMap_t.next_$eq(flatMap_nx);
                        }
                     }
                  }

                  Object var10000;
                  if (flatMap_h == null) {
                     var10000 = scala.collection.immutable.Nil..MODULE$;
                  } else {
                     Statics.releaseFence();
                     var10000 = flatMap_h;
                  }

                  Object var9 = null;
                  Object var10 = null;
                  Object var11 = null;
                  Object var12 = null;
                  Object var13 = null;
                  List unlifted = (List)var10000;
                  if (unlifted.length() == lst.length()) {
                     return new Some(unlifted);
                  } else {
                     return scala.None..MODULE$;
                  }
               }
            }

            // $FF: synthetic method
            public static final Option $anonfun$unapply$9(final Object $this, final Trees.Tree x$10) {
               return $this.unliftable$1.unapply(x$10);
            }

            public {
               this.unliftable$1 = unliftable$1;
            }
         };
      }

      public scala.reflect.api.Internals.ReificationSupportApi.UnliftListOfListsElementwise UnliftListOfListsElementwise(final Liftables.Unliftable unliftable) {
         return null.new UnliftListOfListsElementwise(unliftable) {
            private final Liftables.Unliftable unliftable$2;

            public Option unapply(final List lst) {
               if (lst == null) {
                  throw null;
               } else {
                  Object var10000;
                  if (lst == scala.collection.immutable.Nil..MODULE$) {
                     var10000 = scala.collection.immutable.Nil..MODULE$;
                  } else {
                     List var9 = (List)lst.head();
                     scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$unapply$10(this, var9), scala.collection.immutable.Nil..MODULE$);
                     scala.collection.immutable..colon.colon map_t = map_h;

                     for(List map_rest = (List)lst.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                        var9 = (List)map_rest.head();
                        scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$unapply$10(this, var9), scala.collection.immutable.Nil..MODULE$);
                        map_t.next_$eq(map_nx);
                        map_t = map_nx;
                     }

                     Statics.releaseFence();
                     var10000 = map_h;
                  }

                  Object var12 = null;
                  Object var13 = null;
                  Object var14 = null;
                  Object var15 = null;
                  List unlifted = (List)var10000;
                  Function1 flatten_toIterableOnce = scala..less.colon.less..MODULE$.refl();
                  var10000 = StrictOptimizedIterableOps.flatten$(unlifted, flatten_toIterableOnce);
                  flatten_toIterableOnce = null;
                  int var18 = ((List)var10000).length();
                  Function1 flatten_toIterableOnce = scala..less.colon.less..MODULE$.refl();
                  Object var10001 = StrictOptimizedIterableOps.flatten$(lst, flatten_toIterableOnce);
                  flatten_toIterableOnce = null;
                  return (Option)(var18 == ((List)var10001).length() ? new Some(unlifted) : scala.None..MODULE$);
               }
            }

            // $FF: synthetic method
            public static final Option $anonfun$unapply$11(final Object $this, final Trees.Tree x$11) {
               return $this.unliftable$2.unapply(x$11);
            }

            // $FF: synthetic method
            public static final List $anonfun$unapply$10(final Object $this, final List l) {
               if (l == null) {
                  throw null;
               } else {
                  List flatMap_rest = l;
                  scala.collection.immutable..colon.colon flatMap_h = null;

                  for(scala.collection.immutable..colon.colon flatMap_t = null; flatMap_rest != scala.collection.immutable.Nil..MODULE$; flatMap_rest = (List)flatMap_rest.tail()) {
                     Trees.Tree var7 = (Trees.Tree)flatMap_rest.head();

                     scala.collection.immutable..colon.colon flatMap_nx;
                     for(Iterator flatMap_it = $anonfun$unapply$11($this, var7).iterator(); flatMap_it.hasNext(); flatMap_t = flatMap_nx) {
                        flatMap_nx = new scala.collection.immutable..colon.colon(flatMap_it.next(), scala.collection.immutable.Nil..MODULE$);
                        if (flatMap_t == null) {
                           flatMap_h = flatMap_nx;
                        } else {
                           flatMap_t.next_$eq(flatMap_nx);
                        }
                     }
                  }

                  if (flatMap_h == null) {
                     return scala.collection.immutable.Nil..MODULE$;
                  } else {
                     Statics.releaseFence();
                     return flatMap_h;
                  }
               }
            }

            public {
               this.unliftable$2 = unliftable$2;
            }
         };
      }

      public List mkEnumerators(final List enums) {
         SymbolTable var10000 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
         boolean require_requirement = enums.nonEmpty();
         if (var10000 == null) {
            throw null;
         } else {
            SymbolTable require_this = var10000;
            if (!require_requirement) {
               throw require_this.throwRequirementError("enumerators can't be empty");
            } else {
               require_this = null;
               Trees.Tree var2 = (Trees.Tree)enums.head();
               if (var2 != null && !this.SyntacticValFrom().unapply(var2).isEmpty()) {
                  List var8 = (List)enums.tail();
                  if (var8 == null) {
                     throw null;
                  } else {
                     for(List foreach_these = var8; !foreach_these.isEmpty(); foreach_these = (List)foreach_these.tail()) {
                        Trees.Tree var6 = (Trees.Tree)foreach_these.head();
                        $anonfun$mkEnumerators$2(this, var6);
                     }

                     return enums;
                  }
               } else {
                  throw new IllegalArgumentException((new StringBuilder(44)).append(var2).append(" is not a valid first enumerator of for loop").toString());
               }
            }
         }
      }

      public List mkCases(final List cases) {
         if (cases == null) {
            throw null;
         } else if (cases == scala.collection.immutable.Nil..MODULE$) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$mkCases$1((Trees.Tree)cases.head()), scala.collection.immutable.Nil..MODULE$);
            scala.collection.immutable..colon.colon map_t = map_h;

            for(List map_rest = (List)cases.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$mkCases$1((Trees.Tree)map_rest.head()), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            return map_h;
         }
      }

      // $FF: synthetic method
      public SymbolTable scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer() {
         return this.$outer;
      }

      // $FF: synthetic method
      public scala.reflect.api.Internals scala$reflect$api$Internals$ReificationSupportApi$$$outer() {
         return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
      }

      private final void ScalaDot$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.ScalaDot$module == null) {
               this.ScalaDot$module = new ScalaDot$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void ImplicitParams$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.ImplicitParams$module == null) {
               this.ImplicitParams$module = new ImplicitParams$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void FlagsRepr$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.FlagsRepr$module == null) {
               this.FlagsRepr$module = new FlagsRepr$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticTypeApplied$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticTypeApplied$module == null) {
               this.SyntacticTypeApplied$module = new SyntacticTypeApplied$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticAppliedType$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticAppliedType$module == null) {
               this.SyntacticAppliedType$module = new SyntacticAppliedType$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticApplied$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticApplied$module == null) {
               this.SyntacticApplied$module = new SyntacticApplied$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnCtor$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnCtor$module == null) {
               this.UnCtor$module = new UnCtor$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnMkTemplate$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnMkTemplate$module == null) {
               this.UnMkTemplate$module = new UnMkTemplate$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticClassDef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticClassDef$module == null) {
               this.SyntacticClassDef$module = new SyntacticClassDef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticTraitDef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticTraitDef$module == null) {
               this.SyntacticTraitDef$module = new SyntacticTraitDef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticObjectDef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticObjectDef$module == null) {
               this.SyntacticObjectDef$module = new SyntacticObjectDef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticPackageObjectDef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticPackageObjectDef$module == null) {
               this.SyntacticPackageObjectDef$module = new SyntacticPackageObjectDef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void TupleClassRef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.TupleClassRef$module == null) {
               this.TupleClassRef$module = new TupleClassRef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void TupleCompanionRef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.TupleCompanionRef$module == null) {
               this.TupleCompanionRef$module = new TupleCompanionRef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnitClassRef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnitClassRef$module == null) {
               this.UnitClassRef$module = new UnitClassRef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void FunctionClassRef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.FunctionClassRef$module == null) {
               this.FunctionClassRef$module = new FunctionClassRef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticTuple$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticTuple$module == null) {
               this.SyntacticTuple$module = new SyntacticTuple$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticTupleType$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticTupleType$module == null) {
               this.SyntacticTupleType$module = new SyntacticTupleType$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticFunctionType$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticFunctionType$module == null) {
               this.SyntacticFunctionType$module = new SyntacticFunctionType$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntheticUnit$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntheticUnit$module == null) {
               this.SyntheticUnit$module = new SyntheticUnit$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticBlock$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticBlock$module == null) {
               this.SyntacticBlock$module = new SyntacticBlock$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticFunction$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticFunction$module == null) {
               this.SyntacticFunction$module = new SyntacticFunction$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticNew$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticNew$module == null) {
               this.SyntacticNew$module = new SyntacticNew$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticDefDef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticDefDef$module == null) {
               this.SyntacticDefDef$module = new SyntacticDefDef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticValDef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticValDef$module == null) {
               this.SyntacticValDef$module = new SyntacticValDef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticVarDef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticVarDef$module == null) {
               this.SyntacticVarDef$module = new SyntacticVarDef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticAssign$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticAssign$module == null) {
               this.SyntacticAssign$module = new SyntacticAssign$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticValFrom$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticValFrom$module == null) {
               this.SyntacticValFrom$module = new SyntacticValFrom$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticValEq$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticValEq$module == null) {
               this.SyntacticValEq$module = new SyntacticValEq$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticFilter$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticFilter$module == null) {
               this.SyntacticFilter$module = new SyntacticFilter$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticEmptyTypeTree$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticEmptyTypeTree$module == null) {
               this.SyntacticEmptyTypeTree$module = new SyntacticEmptyTypeTree$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnPatSeq$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnPatSeq$module == null) {
               this.UnPatSeq$module = new UnPatSeq$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void implodePatDefs$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.implodePatDefs$module == null) {
               this.implodePatDefs$module = new implodePatDefs$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticPatDef$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticPatDef$module == null) {
               this.SyntacticPatDef$module = new SyntacticPatDef$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnPatSeqWithRes$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnPatSeqWithRes$module == null) {
               this.UnPatSeqWithRes$module = new UnPatSeqWithRes$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnSyntheticParam$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnSyntheticParam$module == null) {
               this.UnSyntheticParam$module = new UnSyntheticParam$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnVisitor$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnVisitor$module == null) {
               this.UnVisitor$module = new UnVisitor$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnClosure$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnClosure$module == null) {
               this.UnClosure$module = new UnClosure$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void FilterCall$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.FilterCall$module == null) {
               this.FilterCall$module = new FilterCall$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnFilter$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnFilter$module == null) {
               this.UnFilter$module = new UnFilter$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnCheckIfRefutable$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnCheckIfRefutable$module == null) {
               this.UnCheckIfRefutable$module = new UnCheckIfRefutable$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnMap$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnMap$module == null) {
               this.UnMap$module = new UnMap$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnForeach$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnForeach$module == null) {
               this.UnForeach$module = new UnForeach$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnFlatMap$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnFlatMap$module == null) {
               this.UnFlatMap$module = new UnFlatMap$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void UnFor$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.UnFor$module == null) {
               this.UnFor$module = new UnFor$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticFor$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticFor$module == null) {
               this.SyntacticFor$module = new SyntacticFor$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticForYield$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticForYield$module == null) {
               this.SyntacticForYield$module = new SyntacticForYield$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void MaybeTypeTreeOriginal$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.MaybeTypeTreeOriginal$module == null) {
               this.MaybeTypeTreeOriginal$module = new MaybeTypeTreeOriginal$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void MaybeSelectApply$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.MaybeSelectApply$module == null) {
               this.MaybeSelectApply$module = new MaybeSelectApply$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void MaybeUnchecked$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.MaybeUnchecked$module == null) {
               this.MaybeUnchecked$module = new MaybeUnchecked$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void MaybeTyped$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.MaybeTyped$module == null) {
               this.MaybeTyped$module = new MaybeTyped$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticPartialFunction$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticPartialFunction$module == null) {
               this.SyntacticPartialFunction$module = new SyntacticPartialFunction$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticMatch$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticMatch$module == null) {
               this.SyntacticMatch$module = new SyntacticMatch$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticTry$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticTry$module == null) {
               this.SyntacticTry$module = new SyntacticTry$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticTermIdent$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticTermIdent$module == null) {
               this.SyntacticTermIdent$module = new SyntacticTermIdent$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticTypeIdent$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticTypeIdent$module == null) {
               this.SyntacticTypeIdent$module = new SyntacticTypeIdent$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticImport$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticImport$module == null) {
               this.SyntacticImport$module = new SyntacticImport$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticSelectType$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticSelectType$module == null) {
               this.SyntacticSelectType$module = new SyntacticSelectType$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticSelectTerm$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticSelectTerm$module == null) {
               this.SyntacticSelectTerm$module = new SyntacticSelectTerm$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticCompoundType$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticCompoundType$module == null) {
               this.SyntacticCompoundType$module = new SyntacticCompoundType$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticSingletonType$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticSingletonType$module == null) {
               this.SyntacticSingletonType$module = new SyntacticSingletonType$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticTypeProjection$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticTypeProjection$module == null) {
               this.SyntacticTypeProjection$module = new SyntacticTypeProjection$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticAnnotatedType$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticAnnotatedType$module == null) {
               this.SyntacticAnnotatedType$module = new SyntacticAnnotatedType$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      private final void SyntacticExistentialType$lzycompute$1() {
         synchronized(this){}

         try {
            if (this.SyntacticExistentialType$module == null) {
               this.SyntacticExistentialType$module = new SyntacticExistentialType$();
            }
         } catch (Throwable var2) {
            throw var2;
         }

      }

      // $FF: synthetic method
      public static final boolean $anonfun$selectTerm$1(final Symbols.Symbol x$1) {
         return !x$1.isMethod();
      }

      // $FF: synthetic method
      public static final Nothing $anonfun$select$1(final Names.Name name$1, final Symbols.Symbol owner$1) {
         ScalaReflectionException var10000 = new ScalaReflectionException;
         StringOps var10002 = .MODULE$;
         ScalaRunTime var10004 = scala.runtime.ScalaRunTime..MODULE$;
         Object[] var10005 = new Object[]{name$1.isTermName() ? "term" : "type", name$1, null};
         if (owner$1 == null) {
            throw null;
         } else {
            var10005[2] = owner$1.fullName('.');
            var10000.<init>(var10002.format$extension("%s %s in %s not found", var10004.genericWrapArray(var10005)));
            throw var10000;
         }
      }

      // $FF: synthetic method
      public static final Trees.Tree $anonfun$mkAnnotation$1(final ReificationSupportImpl $this, final Trees.Tree tree) {
         return $this.mkAnnotation(tree);
      }

      // $FF: synthetic method
      public static final Trees.ValDef $anonfun$mkParam$2(final ReificationSupportImpl $this, final long extraFlags$1, final long excludeFlags$1, final Trees.Tree x$3) {
         return $this.mkParam(x$3, extraFlags$1, excludeFlags$1);
      }

      // $FF: synthetic method
      public static final List $anonfun$mkParam$1(final ReificationSupportImpl $this, final long extraFlags$1, final long excludeFlags$1, final List x$2) {
         if (x$2 == null) {
            throw null;
         } else if (x$2 == scala.collection.immutable.Nil..MODULE$) {
            return scala.collection.immutable.Nil..MODULE$;
         } else {
            Trees.Tree var10 = (Trees.Tree)x$2.head();
            scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($this.mkParam(var10, extraFlags$1, excludeFlags$1), scala.collection.immutable.Nil..MODULE$);
            scala.collection.immutable..colon.colon map_t = map_h;

            for(List map_rest = (List)x$2.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
               var10 = (Trees.Tree)map_rest.head();
               scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($this.mkParam(var10, extraFlags$1, excludeFlags$1), scala.collection.immutable.Nil..MODULE$);
               map_t.next_$eq(map_nx);
               map_t = map_nx;
            }

            Statics.releaseFence();
            return map_h;
         }
      }

      // $FF: synthetic method
      public static final Trees.ValDef $anonfun$mkImplicitParam$1(final ReificationSupportImpl $this, final Trees.Tree tree) {
         return $this.mkImplicitParam(tree);
      }

      // $FF: synthetic method
      public static final Trees.TypeDef $anonfun$mkTparams$1(final ReificationSupportImpl $this, final Trees.Tree x0$1) {
         if (x0$1 instanceof Trees.TypeDef) {
            Trees.TypeDef var2 = (Trees.TypeDef)x0$1;
            Trees.Modifiers x$2 = var2.mods().$bar(8192L).$amp(-17L);
            Names.Name x$3 = $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyTypeDef$default$3(var2);
            List x$4 = $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyTypeDef$default$4(var2);
            Trees.Tree x$5 = $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyTypeDef$default$5(var2);
            return $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyTypeDef(var2, x$2, x$3, x$4, x$5);
         } else {
            throw new IllegalArgumentException((new StringBuilder(31)).append("can't splice ").append(x0$1).append(" as type parameter").toString());
         }
      }

      // $FF: synthetic method
      public static final String $anonfun$mkRefineStat$1() {
         return "can't use DefDef with non-empty body as refine stat";
      }

      // $FF: synthetic method
      public static final String $anonfun$mkRefineStat$2() {
         return "can't use ValDef with non-empty rhs as refine stat";
      }

      // $FF: synthetic method
      public static final Trees.Tree $anonfun$mkRefineStat$3(final ReificationSupportImpl $this, final Trees.Tree stat) {
         return $this.mkRefineStat(stat);
      }

      // $FF: synthetic method
      public static final Trees.Tree $anonfun$mkPackageStat$1(final ReificationSupportImpl $this, final Trees.Tree stat) {
         return $this.mkPackageStat(stat);
      }

      // $FF: synthetic method
      public static final Trees.Tree $anonfun$mkEarlyDef$1(final ReificationSupportImpl $this, final Trees.Tree defn) {
         return $this.mkEarlyDef(defn);
      }

      // $FF: synthetic method
      public static final String $anonfun$mkSelfType$1() {
         return "self types must have empty right hand side";
      }

      // $FF: synthetic method
      public static final String $anonfun$mkEnumerators$1() {
         return "enumerators can't be empty";
      }

      // $FF: synthetic method
      public static final void $anonfun$mkEnumerators$2(final ReificationSupportImpl $this, final Trees.Tree x0$1) {
         if (!(x0$1 != null && !$this.SyntacticValEq().unapply(x0$1).isEmpty() ? true : (x0$1 != null && !$this.SyntacticValFrom().unapply(x0$1).isEmpty() ? true : x0$1 != null && !$this.SyntacticFilter().unapply(x0$1).isEmpty()))) {
            throw new IllegalArgumentException((new StringBuilder(55)).append(x0$1).append(" is not a valid representation of a for loop enumerator").toString());
         }
      }

      // $FF: synthetic method
      public static final Trees.CaseDef $anonfun$mkCases$1(final Trees.Tree x0$1) {
         if (x0$1 instanceof Trees.CaseDef) {
            return (Trees.CaseDef)x0$1;
         } else {
            throw new IllegalArgumentException((new StringBuilder(50)).append(x0$1).append(" is not valid representation of pattern match case").toString());
         }
      }

      public ReificationSupportImpl() {
         if (ReificationSupport.this == null) {
            throw null;
         } else {
            this.$outer = ReificationSupport.this;
            super();
         }
      }

      // $FF: synthetic method
      public static final Object $anonfun$mkEnumerators$2$adapted(final ReificationSupportImpl $this, final Trees.Tree x0$1) {
         $anonfun$mkEnumerators$2($this, x0$1);
         return BoxedUnit.UNIT;
      }

      // $FF: synthetic method
      private static Object $deserializeLambda$(SerializedLambda var0) {
         return var0.lambdaDeserialize<invokedynamic>(var0);
      }

      public class ScalaDot$ implements scala.reflect.api.Internals.ReificationSupportApi.ScalaDotExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final Names.Name name) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().scalaDot(name);
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Select) {
               Trees.Select var2 = (Trees.Select)tree;
               Trees.Tree id = var2.qualifier();
               Names.Name name = var2.name();
               if (id instanceof Trees.Ident) {
                  Trees.Ident var5 = (Trees.Ident)id;
                  Names.Name var6 = var5.name();
                  Names.TermName var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().scala_();
                  if (var10000 == null) {
                     if (var6 != null) {
                        return scala.None..MODULE$;
                     }
                  } else if (!var10000.equals(var6)) {
                     return scala.None..MODULE$;
                  }

                  Symbols.Symbol var8 = var5.symbol();
                  Symbols.ModuleSymbol var7 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().ScalaPackage();
                  if (var8 == null) {
                     if (var7 == null) {
                        return new Some(name);
                     }
                  } else if (var8.equals(var7)) {
                     return new Some(name);
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public ScalaDot$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class ImplicitParams$ implements scala.reflect.api.Internals.ReificationSupportApi.ImplicitParamsExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public List apply(final List paramss, final List implparams) {
            if (implparams.nonEmpty()) {
               List $colon$plus_elem = this.$outer.mkImplicitParam(implparams);
               if (paramss == null) {
                  throw null;
               } else {
                  return (List)StrictOptimizedSeqOps.appended$(paramss, $colon$plus_elem);
               }
            } else {
               return paramss;
            }
         }

         public Some unapply(final List vparamss) {
            if (vparamss != null) {
               Option var2 = scala.package..MODULE$.$colon$plus().unapply(vparamss);
               if (!var2.isEmpty()) {
                  List init = (List)((Tuple2)var2.get())._1();
                  List last = (List)((Tuple2)var2.get())._2();
                  if (last instanceof scala.collection.immutable..colon.colon) {
                     scala.collection.immutable..colon.colon var5 = (scala.collection.immutable..colon.colon)last;
                     if (((Trees.ValDef)var5.head()).mods().isImplicit()) {
                        return new Some(new Tuple2(init, var5));
                     }
                  }
               }
            }

            return new Some(new Tuple2(vparamss, scala.collection.immutable.Nil..MODULE$));
         }

         public ImplicitParams$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class FlagsRepr$ implements scala.reflect.api.Internals.ReificationSupportApi.FlagsReprExtractor {
         public long apply(final long bits) {
            return bits;
         }

         public Some unapply(final long flags) {
            return new Some(flags);
         }
      }

      public class SyntacticTypeApplied$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticTypeAppliedExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final Trees.Tree tree, final List targs) {
            if (targs.isEmpty()) {
               return tree;
            } else if (tree.isTerm()) {
               return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new TypeApply(tree, targs);
            } else {
               throw new IllegalArgumentException((new StringBuilder(30)).append("can't apply type arguments to ").append(tree).toString());
            }
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.TypeApply) {
               Trees.TypeApply var2 = (Trees.TypeApply)tree;
               Trees.Tree fun = var2.fun();
               List targs = var2.args();
               return new Some(new Tuple2(fun, targs));
            } else {
               return (Option)(tree.isTerm() ? new Some(new Tuple2(tree, scala.collection.immutable.Nil..MODULE$)) : scala.None..MODULE$);
            }
         }

         public SyntacticTypeApplied$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticAppliedType$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticTypeAppliedExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final Trees.Tree tree, final List targs) {
            if (targs.isEmpty()) {
               return tree;
            } else if (tree.isType()) {
               return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new AppliedTypeTree(tree, targs);
            } else {
               throw new IllegalArgumentException((new StringBuilder(40)).append("can't create applied type from non-type ").append(tree).toString());
            }
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.$outer.MaybeTypeTreeOriginal().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)var2.value();
                  if (var3 instanceof Trees.AppliedTypeTree) {
                     Trees.AppliedTypeTree var4 = (Trees.AppliedTypeTree)var3;
                     Trees.Tree tpe = var4.tpt();
                     List targs = var4.args();
                     return new Some(new Tuple2(tpe, targs));
                  }
               }
            }

            return (Option)(tree.isType() ? new Some(new Tuple2(tree, scala.collection.immutable.Nil..MODULE$)) : scala.None..MODULE$);
         }

         public SyntacticAppliedType$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticApplied$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticAppliedExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final Trees.Tree tree, final List argss) {
            Function2 foldLeft_op = (f, args) -> {
               Trees.Apply var10000 = new Trees.Apply;
               SymbolTable var10002 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
               if (args == null) {
                  throw null;
               } else {
                  Object var10004;
                  if (args == scala.collection.immutable.Nil..MODULE$) {
                     var10004 = scala.collection.immutable.Nil..MODULE$;
                  } else {
                     Trees.Tree var7 = (Trees.Tree)args.head();
                     scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$apply$2(this, var7), scala.collection.immutable.Nil..MODULE$);
                     scala.collection.immutable..colon.colon map_t = map_h;

                     for(List map_rest = (List)args.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                        var7 = (Trees.Tree)map_rest.head();
                        scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$apply$2(this, var7), scala.collection.immutable.Nil..MODULE$);
                        map_t.next_$eq(map_nx);
                        map_t = map_nx;
                     }

                     Statics.releaseFence();
                     var10004 = map_h;
                  }

                  Object var8 = null;
                  Object var9 = null;
                  Object var10 = null;
                  Object var11 = null;
                  var10000.<init>(f, (List)var10004);
                  return var10000;
               }
            };
            if (argss == null) {
               throw null;
            } else {
               return (Trees.Tree)LinearSeqOps.foldLeft$(argss, tree, foldLeft_op);
            }
         }

         public Some unapply(final Trees.Tree tree) {
            List pats;
            Trees.Tree fun;
            label51: {
               if (tree instanceof Trees.UnApply) {
                  Trees.UnApply var2 = (Trees.UnApply)tree;
                  Trees.Tree var3 = var2.fun();
                  pats = var2.args();
                  if (var3 != null) {
                     Option var5 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().treeInfo().Unapplied().unapply(var3);
                     if (!var5.isEmpty()) {
                        Trees.Tree var6 = (Trees.Tree)var5.get();
                        if (var6 instanceof Trees.Select) {
                           Trees.Select var7 = (Trees.Select)var6;
                           fun = var7.qualifier();
                           Names.Name var9 = var7.name();
                           Names.TermName var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().unapply();
                           if (var10000 == null) {
                              if (var9 == null) {
                                 break label51;
                              }
                           } else if (var10000.equals(var9)) {
                              break label51;
                           }
                        }
                     }
                  }
               }

               if (tree != null) {
                  Some var10 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().treeInfo().Applied().unapply(tree);
                  if (!var10.isEmpty()) {
                     Trees.Tree fun = (Trees.Tree)((Tuple3)var10.value())._1();
                     List targs = (List)((Tuple3)var10.value())._2();
                     List argss = (List)((Tuple3)var10.value())._3();
                     if (fun instanceof Trees.Select) {
                        Trees.Select var14 = (Trees.Select)fun;
                        Names.Name var15 = var14.name();
                        if (var14.qualifier() instanceof Trees.New) {
                           Names.TermName var19 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().CONSTRUCTOR();
                           if (var19 == null) {
                              if (var15 == null) {
                                 return new Some(new Tuple2(tree, scala.collection.immutable.Nil..MODULE$));
                              }
                           } else if (var19.equals(var15)) {
                              return new Some(new Tuple2(tree, scala.collection.immutable.Nil..MODULE$));
                           }
                        }
                     }

                     Trees.Tree callee = fun.isTerm() ? this.$outer.SyntacticTypeApplied().apply(fun, targs) : this.$outer.SyntacticAppliedType().apply(fun, targs);
                     return new Some(new Tuple2(callee, argss));
                  }
               }

               throw new MatchError(tree);
            }

            List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
            scala.collection.immutable..colon.colon var10005 = new scala.collection.immutable..colon.colon(pats, $colon$colon_this);
            $colon$colon_this = null;
            return new Some(new Tuple2(fun, var10005));
         }

         // $FF: synthetic method
         public static final Trees.Tree $anonfun$apply$2(final SyntacticApplied$ $this, final Trees.Tree tree) {
            return $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().treeInfo().assignmentToMaybeNamedArg(tree);
         }

         public SyntacticApplied$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      }

      public class UnCtor$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Option unapply(final Trees.Tree tree) {
            boolean var2 = false;
            Trees.DefDef var3 = null;
            if (tree instanceof Trees.DefDef) {
               label50: {
                  var2 = true;
                  var3 = (Trees.DefDef)tree;
                  Trees.Modifiers mods = var3.mods();
                  Names.TermName var5 = var3.name();
                  Trees.Tree var6 = var3.rhs();
                  Names.TermName var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().MIXIN_CONSTRUCTOR();
                  if (var10000 == null) {
                     if (var5 != null) {
                        break label50;
                     }
                  } else if (!var10000.equals(var5)) {
                     break label50;
                  }

                  if (var6 != null) {
                     Option var7 = this.$outer.SyntacticBlock().unapply(var6);
                     if (!var7.isEmpty()) {
                        List var8 = (List)var7.get();
                        if (var8 != null) {
                           Option var9 = scala.package..MODULE$.$colon$plus().unapply(var8);
                           if (!var9.isEmpty()) {
                              List lvdefs = (List)((Tuple2)var9.get())._1();
                              return new Some(new Tuple3(mods.$bar(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().Flag().TRAIT()), scala.collection.immutable.Nil..MODULE$, lvdefs));
                           }
                        }
                     }
                  }
               }
            }

            if (var2) {
               Trees.Modifiers mods = var3.mods();
               Names.TermName var12 = var3.name();
               List var13 = var3.tparams();
               List vparamss = var3.vparamss();
               Trees.Tree var15 = var3.rhs();
               Names.TermName var22 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().CONSTRUCTOR();
               if (var22 == null) {
                  if (var12 != null) {
                     return scala.None..MODULE$;
                  }
               } else if (!var22.equals(var12)) {
                  return scala.None..MODULE$;
               }

               if (scala.collection.immutable.Nil..MODULE$.equals(var13) && var15 != null) {
                  Option var16 = this.$outer.SyntacticBlock().unapply(var15);
                  if (!var16.isEmpty()) {
                     List var17 = (List)var16.get();
                     if (var17 != null) {
                        Option var18 = scala.package..MODULE$.$colon$plus().unapply(var17);
                        if (!var18.isEmpty()) {
                           List var19 = (List)((Tuple2)var18.get())._1();
                           if (var19 != null) {
                              Option var20 = scala.package..MODULE$.$colon$plus().unapply(var19);
                              if (!var20.isEmpty()) {
                                 List lvdefs = (List)((Tuple2)var20.get())._1();
                                 return new Some(new Tuple3(mods, vparamss, lvdefs));
                              }
                           }
                        }
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public UnCtor$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class UnMkTemplate {
         private final boolean isCaseClass;
         // $FF: synthetic field
         public final ReificationSupportImpl $outer;

         public Option unapply(final Trees.Template templ) {
            if (templ == null) {
               throw new MatchError((Object)null);
            } else {
               List parents = templ.parents();
               Trees.ValDef selfType = templ.self();
               List tbody = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().treeInfo().untypecheckedTemplBody(templ);
               if (tbody == null) {
                  throw null;
               } else {
                  List forall_these = tbody;

                  boolean var10000;
                  while(true) {
                     if (forall_these.isEmpty()) {
                        var10000 = true;
                        break;
                     }

                     Trees.Tree var54 = (Trees.Tree)forall_these.head();
                     if (!$anonfun$unapply$2(this, var54)) {
                        var10000 = false;
                        break;
                     }

                     forall_these = (List)forall_these.tail();
                  }

                  Object var72 = null;
                  if (var10000) {
                     return result$1(((Trees.Modifiers)this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoMods()).$bar(this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().Flag().TRAIT()), scala.collection.immutable.Nil..MODULE$, scala.collection.immutable.Nil..MODULE$, tbody, parents, selfType);
                  } else if (this.indexOfCtor$1(tbody) == -1) {
                     return scala.None..MODULE$;
                  } else {
                     ListBuffer span_b = new ListBuffer();

                     List span_these;
                     for(span_these = tbody; !span_these.isEmpty(); span_these = (List)span_these.tail()) {
                        Trees.Tree var55 = (Trees.Tree)span_these.head();
                        if (!$anonfun$unapply$3(this, var55)) {
                           break;
                        }

                        Object span_$plus$eq_elem = span_these.head();
                        span_b.addOne(span_$plus$eq_elem);
                        span_$plus$eq_elem = null;
                     }

                     List var109 = span_b.toList();
                     List var10001 = span_these;
                     Object var68 = null;
                     Object var69 = null;
                     Object var71 = null;
                     List var67 = var10001;
                     List rawEdefs = var109;
                     Function1 partition_p = (tree) -> BoxesRunTime.boxToBoolean($anonfun$unapply$4(this, tree));
                     if (rawEdefs == null) {
                        throw null;
                     } else {
                        Tuple2 var110;
                        if (rawEdefs.isEmpty()) {
                           var110 = scala.collection.immutable.List..MODULE$.scala$collection$immutable$List$$TupleOfNil();
                        } else {
                           Builder partition_partition_l = rawEdefs.newSpecificBuilder();
                           Builder partition_partition_r = rawEdefs.newSpecificBuilder();
                           rawEdefs.iterator().foreach(StrictOptimizedIterableOps::$anonfun$partition$1);
                           Object var10002 = partition_partition_l.result();
                           Object var40 = partition_partition_r.result();
                           Object var39 = var10002;
                           var110 = new Tuple2(var39, var40);
                           Object var77 = null;
                           Object var79 = null;
                           Tuple2 var34 = var110;
                           List var35 = (List)var39;
                           if (scala.collection.immutable.Nil..MODULE$.equals(var35)) {
                              var110 = new Tuple2(scala.collection.immutable.Nil..MODULE$, rawEdefs);
                           } else {
                              List var36 = (List)var40;
                              var110 = scala.collection.immutable.Nil..MODULE$.equals(var36) ? new Tuple2(rawEdefs, scala.collection.immutable.Nil..MODULE$) : var34;
                           }
                        }

                        Object var73 = null;
                        Object var74 = null;
                        Object var75 = null;
                        Object var76 = null;
                        Object var78 = null;
                        Object var80 = null;
                        Object var81 = null;
                        Object var82 = null;
                        Tuple2 var6 = var110;
                        if (var6 == null) {
                           throw new MatchError((Object)null);
                        } else {
                           List gvdefs = (List)var6._1();
                           List etdefs = (List)var6._2();
                           Tuple2 var9 = var67.splitAt(this.indexOfCtor$1(var67));
                           if (var9 != null) {
                              List fieldDefs = (List)var9._1();
                              List var11 = (List)var9._2();
                              if (var11 instanceof scala.collection.immutable..colon.colon) {
                                 scala.collection.immutable..colon.colon var12 = (scala.collection.immutable..colon.colon)var11;
                                 Trees.Tree var13 = (Trees.Tree)var12.head();
                                 List body = var12.next$access$1();
                                 if (var13 != null) {
                                    Option var15 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().UnCtor().unapply(var13);
                                    if (!var15.isEmpty()) {
                                       Trees.Modifiers ctorMods = (Trees.Modifiers)((Tuple3)var15.get())._1();
                                       List ctorVparamss = (List)((Tuple3)var15.get())._2();
                                       List lvdefs = (List)((Tuple3)var15.get())._3();
                                       if (gvdefs == null) {
                                          throw null;
                                       }

                                       List var112 = (List)StrictOptimizedIterableOps.zip$(gvdefs, lvdefs);
                                       if (var112 == null) {
                                          throw null;
                                       }

                                       List map_this = var112;
                                       Object var113;
                                       if (map_this == scala.collection.immutable.Nil..MODULE$) {
                                          var113 = scala.collection.immutable.Nil..MODULE$;
                                       } else {
                                          Tuple2 var56 = (Tuple2)map_this.head();
                                          scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$unapply$5(this, var56), scala.collection.immutable.Nil..MODULE$);
                                          scala.collection.immutable..colon.colon map_t = map_h;

                                          for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                                             var56 = (Tuple2)map_rest.head();
                                             scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$unapply$5(this, var56), scala.collection.immutable.Nil..MODULE$);
                                             map_t.next_$eq(map_nx);
                                             map_t = map_nx;
                                          }

                                          Statics.releaseFence();
                                          var113 = map_h;
                                       }

                                       Object var83 = null;
                                       Object var84 = null;
                                       Object var85 = null;
                                       Object var86 = null;
                                       Object var87 = null;
                                       List evdefs = (List)var113;
                                       List edefs = etdefs.$colon$colon$colon(evdefs);
                                       if (ctorMods.isTrait()) {
                                          return result$1(ctorMods, scala.collection.immutable.Nil..MODULE$, edefs, body, parents, selfType);
                                       }

                                       label168: {
                                          if (ctorVparamss instanceof scala.collection.immutable..colon.colon) {
                                             scala.collection.immutable..colon.colon var22 = (scala.collection.immutable..colon.colon)ctorVparamss;
                                             List var23 = (List)var22.head();
                                             List tail = var22.next$access$1();
                                             if (scala.collection.immutable.Nil..MODULE$.equals(var23) && tail instanceof scala.collection.immutable..colon.colon) {
                                                scala.collection.immutable..colon.colon var25 = (scala.collection.immutable..colon.colon)tail;
                                                List var26 = (List)var25.head();
                                                if (var26 instanceof scala.collection.immutable..colon.colon && ((Trees.ValDef)((scala.collection.immutable..colon.colon)var26).head()).mods().isImplicit() && !this.isCaseClass) {
                                                   var113 = var25;
                                                   break label168;
                                                }
                                             }
                                          }

                                          var113 = ctorVparamss;
                                       }

                                       List vparamssRestoredImplicits = (List)var113;
                                       if (fieldDefs == null) {
                                          throw null;
                                       }

                                       if (fieldDefs == scala.collection.immutable.Nil..MODULE$) {
                                          var113 = scala.collection.immutable.Nil..MODULE$;
                                       } else {
                                          scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$unapply$6((Trees.Tree)fieldDefs.head()), scala.collection.immutable.Nil..MODULE$);
                                          scala.collection.immutable..colon.colon map_t = map_h;

                                          for(List map_rest = (List)fieldDefs.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                                             scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$unapply$6((Trees.Tree)map_rest.head()), scala.collection.immutable.Nil..MODULE$);
                                             map_t.next_$eq(map_nx);
                                             map_t = map_nx;
                                          }

                                          Statics.releaseFence();
                                          var113 = map_h;
                                       }

                                       Object var88 = null;
                                       Object var89 = null;
                                       Object var90 = null;
                                       Object var91 = null;
                                       Map modsMap = ((List)var113).toMap(scala..less.colon.less..MODULE$.refl());
                                       if (!ctorArgsCorrespondToFields$1(vparamssRestoredImplicits, modsMap)) {
                                          return scala.None..MODULE$;
                                       }

                                       if (this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer() == null) {
                                          throw null;
                                       }

                                       if (vparamssRestoredImplicits == null) {
                                          throw null;
                                       }

                                       if (vparamssRestoredImplicits == scala.collection.immutable.Nil..MODULE$) {
                                          var113 = scala.collection.immutable.Nil..MODULE$;
                                       } else {
                                          scala.collection.immutable..colon.colon var117 = new scala.collection.immutable..colon.colon;
                                          List var57 = (List)vparamssRestoredImplicits.head();
                                          if (var57 == null) {
                                             throw null;
                                          }

                                          Object var119;
                                          if (var57 == scala.collection.immutable.Nil..MODULE$) {
                                             var119 = scala.collection.immutable.Nil..MODULE$;
                                          } else {
                                             Trees.ValDef var66 = (Trees.ValDef)var57.head();
                                             scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$unapply$8(this, modsMap, var66), scala.collection.immutable.Nil..MODULE$);
                                             scala.collection.immutable..colon.colon map_t = map_h;

                                             for(List map_rest = (List)var57.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                                                var66 = (Trees.ValDef)map_rest.head();
                                                scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$unapply$8(this, modsMap, var66), scala.collection.immutable.Nil..MODULE$);
                                                map_t.next_$eq(map_nx);
                                                map_t = map_nx;
                                             }

                                             Statics.releaseFence();
                                             var119 = map_h;
                                          }

                                          Object var98 = null;
                                          Object var99 = null;
                                          Object var100 = null;
                                          Object var101 = null;
                                          var117.<init>(var119, scala.collection.immutable.Nil..MODULE$);
                                          scala.collection.immutable..colon.colon mmap_map_h = var117;
                                          scala.collection.immutable..colon.colon mmap_map_t = mmap_map_h;

                                          for(List mmap_map_rest = (List)vparamssRestoredImplicits.tail(); mmap_map_rest != scala.collection.immutable.Nil..MODULE$; mmap_map_rest = (List)mmap_map_rest.tail()) {
                                             var117 = new scala.collection.immutable..colon.colon;
                                             var57 = (List)mmap_map_rest.head();
                                             if (var57 == null) {
                                                throw null;
                                             }

                                             if (var57 == scala.collection.immutable.Nil..MODULE$) {
                                                var119 = scala.collection.immutable.Nil..MODULE$;
                                             } else {
                                                Trees.ValDef var107 = (Trees.ValDef)var57.head();
                                                scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$unapply$8(this, modsMap, var107), scala.collection.immutable.Nil..MODULE$);
                                                scala.collection.immutable..colon.colon map_t = map_h;

                                                for(List map_rest = (List)var57.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                                                   var107 = (Trees.ValDef)map_rest.head();
                                                   scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$unapply$8(this, modsMap, var107), scala.collection.immutable.Nil..MODULE$);
                                                   map_t.next_$eq(map_nx);
                                                   map_t = map_nx;
                                                }

                                                Statics.releaseFence();
                                                var119 = map_h;
                                             }

                                             Object var102 = null;
                                             Object var103 = null;
                                             Object var104 = null;
                                             Object var105 = null;
                                             var117.<init>(var119, scala.collection.immutable.Nil..MODULE$);
                                             scala.collection.immutable..colon.colon mmap_map_nx = var117;
                                             mmap_map_t.next_$eq(mmap_map_nx);
                                             mmap_map_t = mmap_map_nx;
                                          }

                                          Statics.releaseFence();
                                          var113 = mmap_map_h;
                                       }

                                       Object var92 = null;
                                       Object var93 = null;
                                       Object var94 = null;
                                       Object var95 = null;
                                       List vparamss = (List)var113;
                                       return result$1(ctorMods, vparamss, edefs, body, parents, selfType);
                                    }
                                 }
                              }
                           }

                           throw new MatchError(var9);
                        }
                     }
                  }
               }
            }
         }

         public UnMkTemplate asCase() {
            return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().new UnMkTemplate(true);
         }

         // $FF: synthetic method
         public ReificationSupportImpl scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer() {
            return this.$outer;
         }

         private static final Some result$1(final Trees.Modifiers ctorMods, final List vparamss, final List edefs, final List body, final List parents$1, final Trees.ValDef selfType$1) {
            return new Some(new Tuple6(parents$1, selfType$1, ctorMods, vparamss, edefs, body));
         }

         // $FF: synthetic method
         public static final boolean $anonfun$unapply$1(final UnMkTemplate $this, final Trees.Tree x0$1) {
            return x0$1 != null && !$this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().UnCtor().unapply(x0$1).isEmpty();
         }

         private final int indexOfCtor$1(final List trees) {
            return trees.indexWhere((x0$1) -> BoxesRunTime.boxToBoolean($anonfun$unapply$1(this, x0$1)));
         }

         // $FF: synthetic method
         public static final boolean $anonfun$unapply$2(final UnMkTemplate $this, final Trees.Tree tree) {
            return $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().treeInfo().isInterfaceMember(tree);
         }

         // $FF: synthetic method
         public static final boolean $anonfun$unapply$3(final UnMkTemplate $this, final Trees.Tree tree) {
            return $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().treeInfo().isEarlyDef(tree);
         }

         // $FF: synthetic method
         public static final boolean $anonfun$unapply$4(final UnMkTemplate $this, final Trees.Tree tree) {
            return $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().treeInfo().isEarlyValDef(tree);
         }

         // $FF: synthetic method
         public static final Trees.ValDef $anonfun$unapply$5(final UnMkTemplate $this, final Tuple2 x0$1) {
            if (x0$1 != null) {
               Trees.Tree gvdef = (Trees.Tree)x0$1._1();
               Trees.Tree var3 = (Trees.Tree)x0$1._2();
               if (gvdef instanceof Trees.ValDef) {
                  Trees.ValDef var4 = (Trees.ValDef)gvdef;
                  Trees.Tree tpt = var4.tpt();
                  if (tpt instanceof Trees.TypeTree) {
                     Trees.TypeTree var6 = (Trees.TypeTree)tpt;
                     if (var3 instanceof Trees.ValDef) {
                        Trees.Tree rhs = ((Trees.ValDef)var3).rhs();
                        Trees.Tree x$2 = var6.original();
                        Trees.Modifiers x$4 = $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef$default$2(var4);
                        Names.Name x$5 = $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef$default$3(var4);
                        return $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().copyValDef(var4, x$4, x$5, x$2, rhs);
                     }
                  }
               }
            }

            if (x0$1 != null) {
               Trees.Tree tr1 = (Trees.Tree)x0$1._1();
               Trees.Tree tr2 = (Trees.Tree)x0$1._2();
               throw new MatchError(new Tuple2(tr1, tr2));
            } else {
               throw new MatchError((Object)null);
            }
         }

         // $FF: synthetic method
         public static final Tuple2 $anonfun$unapply$6(final Trees.Tree x0$2) {
            if (x0$2 instanceof Trees.ValDef) {
               Trees.ValDef var1 = (Trees.ValDef)x0$2;
               Trees.Modifiers mods = var1.mods();
               Names.TermName name = var1.name();
               Predef.ArrowAssoc var10000 = scala.Predef.ArrowAssoc..MODULE$;
               return new Tuple2(name, mods);
            } else {
               throw new MatchError(x0$2);
            }
         }

         // $FF: synthetic method
         public static final boolean $anonfun$unapply$7(final Map modsMap$1, final Trees.ValDef vd) {
            return modsMap$1.contains(vd.name());
         }

         private static final boolean ctorArgsCorrespondToFields$1(final List vparamssRestoredImplicits$1, final Map modsMap$1) {
            Function1 flatten_toIterableOnce = scala..less.colon.less..MODULE$.refl();
            Object var10000 = StrictOptimizedIterableOps.flatten$(vparamssRestoredImplicits$1, flatten_toIterableOnce);
            flatten_toIterableOnce = null;
            List var6 = (List)var10000;
            if (var6 == null) {
               throw null;
            } else {
               for(List forall_these = var6; !forall_these.isEmpty(); forall_these = (List)forall_these.tail()) {
                  Trees.ValDef var4 = (Trees.ValDef)forall_these.head();
                  if (!$anonfun$unapply$7(modsMap$1, var4)) {
                     return false;
                  }
               }

               return true;
            }
         }

         // $FF: synthetic method
         public static final Trees.ValDef $anonfun$unapply$8(final UnMkTemplate $this, final Map modsMap$1, final Trees.ValDef vd) {
            Trees.Modifiers originalMods = ((Trees.Modifiers)modsMap$1.apply(vd.name())).$bar(vd.mods().flags() & 33554432L);
            return (Trees.ValDef)$this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().atPos((Position)vd.pos(), (Trees.Tree)($this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new ValDef(originalMods, vd.name(), vd.tpt(), vd.rhs())));
         }

         public UnMkTemplate(final boolean isCaseClass) {
            this.isCaseClass = isCaseClass;
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }

         // $FF: synthetic method
         public static final Object $anonfun$unapply$2$adapted(final UnMkTemplate $this, final Trees.Tree tree) {
            return BoxesRunTime.boxToBoolean($anonfun$unapply$2($this, tree));
         }

         // $FF: synthetic method
         public static final Object $anonfun$unapply$3$adapted(final UnMkTemplate $this, final Trees.Tree tree) {
            return BoxesRunTime.boxToBoolean($anonfun$unapply$3($this, tree));
         }

         // $FF: synthetic method
         public static final Object $anonfun$unapply$7$adapted(final Map modsMap$1, final Trees.ValDef vd) {
            return BoxesRunTime.boxToBoolean($anonfun$unapply$7(modsMap$1, vd));
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return Class.lambdaDeserialize<invokedynamic>(var0);
         }
      }

      public class UnMkTemplate$ extends UnMkTemplate {
         // $FF: synthetic method
         public ReificationSupportImpl scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnMkTemplate$$$outer() {
            return this.$outer;
         }

         public UnMkTemplate$() {
            super(false);
         }
      }

      public class SyntacticClassDef$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticClassDefExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.ClassDef apply(final Trees.Modifiers mods, final Names.TypeName name, final List tparams, final Trees.Modifiers constrMods, final List vparamss, final List earlyDefs, final List parents, final Trees.Tree selfType, final List body) {
            long extraCaseFlags = mods.isCase() ? 16777216L : 0L;
            long excludeFlags = 8208L;
            List var10000;
            if (vparamss.isEmpty()) {
               var10000 = vparamss;
            } else {
               ReificationSupportImpl var77 = this.$outer;
               List var15 = (List)vparamss.head();
               List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
               scala.collection.immutable..colon.colon var10001 = new scala.collection.immutable..colon.colon(var15, $colon$colon_this);
               $colon$colon_this = null;
               List var78 = var77.mkParam((List)var10001, 536870912L | extraCaseFlags, excludeFlags);
               List $plus$plus_suffix = this.$outer.mkParam((List)vparamss.tail(), 536870912L, excludeFlags);
               if (var78 == null) {
                  throw null;
               }

               AbstractIterable $plus$plus_this = var78;
               var10000 = ((List)$plus$plus_this).appendedAll($plus$plus_suffix);
               $plus$plus_this = null;
               Object var41 = null;
            }

            List vparamss0 = var10000;
            List tparams0 = this.$outer.mkTparams(tparams);
            TreeGen var79 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen();
            Object var80;
            if (mods.isCase()) {
               if (parents == null) {
                  throw null;
               }

               boolean filter_filterCommon_isFlipped = false;
               List filter_filterCommon_noneIn$1_l = parents;

               while(true) {
                  if (filter_filterCommon_noneIn$1_l.isEmpty()) {
                     var80 = scala.collection.immutable.Nil..MODULE$;
                     break;
                  }

                  Object filter_filterCommon_noneIn$1_h = filter_filterCommon_noneIn$1_l.head();
                  List filter_filterCommon_noneIn$1_t = (List)filter_filterCommon_noneIn$1_l.tail();
                  Trees.Tree var39 = (Trees.Tree)filter_filterCommon_noneIn$1_h;
                  if ($anonfun$apply$3(this, var39) != filter_filterCommon_isFlipped) {
                     List filter_filterCommon_noneIn$1_allIn$1_remaining = filter_filterCommon_noneIn$1_t;

                     while(true) {
                        if (filter_filterCommon_noneIn$1_allIn$1_remaining.isEmpty()) {
                           var80 = filter_filterCommon_noneIn$1_l;
                           break;
                        }

                        Object filter_filterCommon_noneIn$1_allIn$1_x = filter_filterCommon_noneIn$1_allIn$1_remaining.head();
                        var39 = (Trees.Tree)filter_filterCommon_noneIn$1_allIn$1_x;
                        if ($anonfun$apply$3(this, var39) == filter_filterCommon_isFlipped) {
                           scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_l.head(), scala.collection.immutable.Nil..MODULE$);
                           List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_l.tail();

                           scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast;
                           for(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess != filter_filterCommon_noneIn$1_allIn$1_remaining; filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.tail()) {
                              scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_toProcess.head(), scala.collection.immutable.Nil..MODULE$);
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                           }

                           List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                           List filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next;

                           while(!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.isEmpty()) {
                              Object filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.head();
                              var39 = (Trees.Tree)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_head;
                              if ($anonfun$apply$3(this, var39) != filter_filterCommon_isFlipped) {
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                              } else {
                                 while(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy != filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next) {
                                    scala.collection.immutable..colon.colon filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem = new scala.collection.immutable..colon.colon(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.head(), scala.collection.immutable.Nil..MODULE$);
                                    filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem);
                                    filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newElem;
                                    filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.tail();
                                 }

                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                                 filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next = (List)filter_filterCommon_noneIn$1_allIn$1_partialFill$1_next.tail();
                              }
                           }

                           if (!filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy.isEmpty()) {
                              filter_filterCommon_noneIn$1_allIn$1_partialFill$1_currentLast.next_$eq(filter_filterCommon_noneIn$1_allIn$1_partialFill$1_nextToCopy);
                           }

                           var80 = filter_filterCommon_noneIn$1_allIn$1_partialFill$1_newHead;
                           Object var50 = null;
                           Object var53 = null;
                           Object var56 = null;
                           Object var59 = null;
                           Object var62 = null;
                           Object var65 = null;
                           Object var68 = null;
                           Object var71 = null;
                           break;
                        }

                        filter_filterCommon_noneIn$1_allIn$1_remaining = (List)filter_filterCommon_noneIn$1_allIn$1_remaining.tail();
                     }

                     Object var46 = null;
                     Object var48 = null;
                     Object var51 = null;
                     Object var54 = null;
                     Object var57 = null;
                     Object var60 = null;
                     Object var63 = null;
                     Object var66 = null;
                     Object var69 = null;
                     Object var72 = null;
                     break;
                  }

                  filter_filterCommon_noneIn$1_l = filter_filterCommon_noneIn$1_t;
               }

               Object var43 = null;
               Object var44 = null;
               Object var45 = null;
               Object var47 = null;
               Object var49 = null;
               Object var52 = null;
               Object var55 = null;
               Object var58 = null;
               Object var61 = null;
               Object var64 = null;
               Object var67 = null;
               Object var70 = null;
               Object var73 = null;
               List filter_filterCommon_result = (List)var80;
               Statics.releaseFence();
               var80 = filter_filterCommon_result;
               filter_filterCommon_result = null;
            } else {
               var80 = parents;
            }

            List parents0 = var79.mkParents(mods, (List)var80, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkParents$default$3());
            List body0 = body.$colon$colon$colon(earlyDefs);
            Trees.ValDef selfType0 = this.$outer.mkSelfType(selfType);
            Trees.Template templ = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkTemplate(parents0, selfType0, constrMods, vparamss0, body0, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkTemplate$default$6());
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkClassDef(mods, name, tparams0, templ);
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.ClassDef) {
               Trees.ClassDef var2 = (Trees.ClassDef)tree;
               Trees.Modifiers mods = var2.mods();
               Names.TypeName name = var2.name();
               List tparams = var2.tparams();
               Trees.Template impl = var2.impl();
               UnMkTemplate X = (UnMkTemplate)(mods.isCase() ? this.$outer.UnMkTemplate().asCase() : this.$outer.UnMkTemplate());
               if (impl != null) {
                  Option var8 = X.unapply(impl);
                  if (!var8.isEmpty()) {
                     List parents = (List)((Tuple6)var8.get())._1();
                     Trees.ValDef selfType = (Trees.ValDef)((Tuple6)var8.get())._2();
                     Trees.Modifiers ctorMods = (Trees.Modifiers)((Tuple6)var8.get())._3();
                     List vparamss = (List)((Tuple6)var8.get())._4();
                     List earlyDefs = (List)((Tuple6)var8.get())._5();
                     List body = (List)((Tuple6)var8.get())._6();
                     if (!ctorMods.isTrait() && !ctorMods.hasFlag(1048576L)) {
                        return new Some(new Tuple9(mods, name, tparams, ctorMods, vparamss, earlyDefs, parents, selfType, body));
                     }
                  }
               }

               return scala.None..MODULE$;
            } else {
               return scala.None..MODULE$;
            }
         }

         // $FF: synthetic method
         public static final boolean $anonfun$apply$3(final SyntacticClassDef$ $this, final Trees.Tree x0$1) {
            if (x0$1 != null) {
               Option var2 = $this.$outer.ScalaDot().unapply(x0$1);
               if (!var2.isEmpty()) {
                  boolean var6;
                  label46: {
                     label51: {
                        Names.Name var3 = (Names.Name)var2.get();
                        Names.TypeName var10000 = $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().tpnme().Product();
                        if (var10000 == null) {
                           if (var3 == null) {
                              break label51;
                           }
                        } else if (var10000.equals(var3)) {
                           break label51;
                        }

                        label52: {
                           var10000 = $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().tpnme().Serializable();
                           if (var10000 == null) {
                              if (var3 == null) {
                                 break label52;
                              }
                           } else if (var10000.equals(var3)) {
                              break label52;
                           }

                           label32: {
                              var10000 = $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().tpnme().AnyRef();
                              if (var10000 == null) {
                                 if (var3 == null) {
                                    break label32;
                                 }
                              } else if (var10000.equals(var3)) {
                                 break label32;
                              }

                              var6 = false;
                              break label46;
                           }

                           var6 = true;
                           break label46;
                        }

                        var6 = true;
                        break label46;
                     }

                     var6 = true;
                  }

                  if (var6) {
                     return false;
                  }
               }
            }

            return true;
         }

         public SyntacticClassDef$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }

         // $FF: synthetic method
         public static final Object $anonfun$apply$3$adapted(final SyntacticClassDef$ $this, final Trees.Tree x0$1) {
            return BoxesRunTime.boxToBoolean($anonfun$apply$3($this, x0$1));
         }
      }

      public class SyntacticTraitDef$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticTraitDefExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.ClassDef apply(final Trees.Modifiers mods, final Names.TypeName name, final List tparams, final List earlyDefs, final List parents, final Trees.Tree selfType, final List body) {
            Trees.Modifiers mods0 = mods.$bar(33554432L).$bar(8L);
            Trees.Template templ = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkTemplate(parents, this.$outer.mkSelfType(selfType), (Trees.Modifiers)this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().Modifiers(33554432L), scala.collection.immutable.Nil..MODULE$, body.$colon$colon$colon(earlyDefs), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkTemplate$default$6());
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkClassDef(mods0, name, this.$outer.mkTparams(tparams), templ);
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.ClassDef) {
               Trees.ClassDef var2 = (Trees.ClassDef)tree;
               Trees.Modifiers mods = var2.mods();
               Names.TypeName name = var2.name();
               List tparams = var2.tparams();
               Trees.Template var6 = var2.impl();
               if (var6 != null) {
                  Option var7 = this.$outer.UnMkTemplate().unapply(var6);
                  if (!var7.isEmpty()) {
                     List parents = (List)((Tuple6)var7.get())._1();
                     Trees.ValDef selfType = (Trees.ValDef)((Tuple6)var7.get())._2();
                     List earlyDefs = (List)((Tuple6)var7.get())._5();
                     List body = (List)((Tuple6)var7.get())._6();
                     if (mods.isTrait()) {
                        return new Some(new Tuple7(mods, name, tparams, earlyDefs, parents, selfType, body));
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticTraitDef$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticObjectDef$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticObjectDefExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.ModuleDef apply(final Trees.Modifiers mods, final Names.TermName name, final List earlyDefs, final List parents, final Trees.Tree selfType, final List body) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new ModuleDef(mods, name, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkTemplate(parents, this.$outer.mkSelfType(selfType), (Trees.Modifiers)this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoMods(), scala.collection.immutable.Nil..MODULE$, body.$colon$colon$colon(earlyDefs), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkTemplate$default$6()));
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.ModuleDef) {
               Trees.ModuleDef var2 = (Trees.ModuleDef)tree;
               Trees.Modifiers mods = var2.mods();
               Names.TermName name = var2.name();
               Trees.Template var5 = var2.impl();
               if (var5 != null) {
                  Option var6 = this.$outer.UnMkTemplate().unapply(var5);
                  if (!var6.isEmpty()) {
                     List parents = (List)((Tuple6)var6.get())._1();
                     Trees.ValDef selfType = (Trees.ValDef)((Tuple6)var6.get())._2();
                     List earlyDefs = (List)((Tuple6)var6.get())._5();
                     List body = (List)((Tuple6)var6.get())._6();
                     return new Some(new Tuple6(mods, name, earlyDefs, parents, selfType, body));
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticObjectDef$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticPackageObjectDef$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticPackageObjectDefExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.PackageDef apply(final Names.TermName name, final List earlyDefs, final List parents, final Trees.Tree selfType, final List body) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkPackageObject(this.$outer.SyntacticObjectDef().apply((Trees.Modifiers)this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoMods(), name, earlyDefs, parents, selfType, body), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkPackageObject$default$2(), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkPackageObject$default$3());
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.PackageDef) {
               Trees.PackageDef var2 = (Trees.PackageDef)tree;
               Trees.RefTree var3 = var2.pid();
               List var4 = var2.stats();
               if (var3 instanceof Trees.Ident) {
                  Names.Name name = ((Trees.Ident)var3).name();
                  if (name instanceof Names.TermName) {
                     Names.TermName var6 = (Names.TermName)name;
                     if (var4 != null) {
                        List var10000 = scala.package..MODULE$.List();
                        if (var10000 == null) {
                           throw null;
                        }

                        List unapplySeq_this = var10000;
                        SeqOps var20 = SeqFactory.unapplySeq$(unapplySeq_this, var4);
                        Object var19 = null;
                        SeqOps var7 = var20;
                        SeqFactory.UnapplySeqWrapper var21 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                        SeqFactory.UnapplySeqWrapper var10001 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                        new SeqFactory.UnapplySeqWrapper(var7);
                        var21 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                        var21 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                        int lengthCompare$extension_len = 1;
                        if (var7.lengthCompare(lengthCompare$extension_len) == 0) {
                           var21 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                           var21 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                           int apply$extension_i = 0;
                           Trees.Tree var8 = (Trees.Tree)var7.apply(apply$extension_i);
                           if (var8 != null) {
                              Option var9 = this.$outer.SyntacticObjectDef().unapply(var8);
                              if (!var9.isEmpty()) {
                                 Trees.Modifiers var10 = (Trees.Modifiers)((Tuple6)var9.get())._1();
                                 Names.TermName var11 = (Names.TermName)((Tuple6)var9.get())._2();
                                 List earlyDefs = (List)((Tuple6)var9.get())._3();
                                 List parents = (List)((Tuple6)var9.get())._4();
                                 Trees.ValDef selfType = (Trees.ValDef)((Tuple6)var9.get())._5();
                                 List body = (List)((Tuple6)var9.get())._6();
                                 scala.reflect.api.Trees.ModifiersApi var26 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoMods();
                                 if (var26 == null) {
                                    if (var10 != null) {
                                       return scala.None..MODULE$;
                                    }
                                 } else if (!var26.equals(var10)) {
                                    return scala.None..MODULE$;
                                 }

                                 Names.TermName var27 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().PACKAGEkw();
                                 if (var27 == null) {
                                    if (var11 == null) {
                                       return new Some(new Tuple5(var6, earlyDefs, parents, selfType, body));
                                    }
                                 } else if (var27.equals(var11)) {
                                    return new Some(new Tuple5(var6, earlyDefs, parents, selfType, body));
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticPackageObjectDef$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class ScalaMemberRef {
         private final Seq symbols;
         // $FF: synthetic field
         public final ReificationSupportImpl $outer;

         public Option result(final Names.Name name) {
            return ((IterableOps)this.symbols.collect(new Serializable(name) {
               private static final long serialVersionUID = 0L;
               private final Names.Name name$2;

               public final Object applyOrElse(final Symbols.Symbol x1, final Function1 default) {
                  Names.Name var10000 = x1.name();
                  Names.Name var3 = this.name$2;
                  if (var10000 == null) {
                     if (var3 == null) {
                        return x1;
                     }
                  } else if (var10000.equals(var3)) {
                     return x1;
                  }

                  return default.apply(x1);
               }

               public final boolean isDefinedAt(final Symbols.Symbol x1) {
                  Names.Name var10000 = x1.name();
                  Names.Name var2 = this.name$2;
                  if (var10000 == null) {
                     if (var2 == null) {
                        return true;
                     }
                  } else if (var10000.equals(var2)) {
                     return true;
                  }

                  return false;
               }

               public {
                  this.name$2 = name$2;
               }
            })).headOption();
         }

         public Option unapply(final Trees.Tree tree) {
            boolean var2 = false;
            Trees.Select var3 = null;
            if (tree instanceof Trees.Ident) {
               Trees.Ident var4 = (Trees.Ident)tree;
               Names.Name name = var4.name();
               if (this.symbols.contains(var4.symbol())) {
                  Names.Name var6 = var4.symbol().name();
                  if (name == null) {
                     if (var6 == null) {
                        return new Some(var4.symbol());
                     }
                  } else if (name.equals(var6)) {
                     return new Some(var4.symbol());
                  }
               }
            }

            if (tree instanceof Trees.Select) {
               var2 = true;
               var3 = (Trees.Select)tree;
               Trees.Tree scalapkg = var3.qualifier();
               Names.Name name = var3.name();
               if (scalapkg instanceof Trees.Ident) {
                  label82: {
                     Trees.Ident var9 = (Trees.Ident)scalapkg;
                     Names.Name var10 = var9.name();
                     Names.TermName var10000 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$ScalaMemberRef$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().scala_();
                     if (var10000 == null) {
                        if (var10 != null) {
                           break label82;
                        }
                     } else if (!var10000.equals(var10)) {
                        break label82;
                     }

                     Symbols.Symbol var18 = var9.symbol();
                     Symbols.ModuleSymbol var11 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$ScalaMemberRef$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().ScalaPackage();
                     if (var18 == null) {
                        if (var11 == null) {
                           return this.result(name);
                        }
                     } else if (var18.equals(var11)) {
                        return this.result(name);
                     }
                  }
               }
            }

            if (var2) {
               Trees.Tree var12 = var3.qualifier();
               Names.Name name = var3.name();
               if (var12 instanceof Trees.Select) {
                  Trees.Select var14 = (Trees.Select)var12;
                  Trees.Tree var15 = var14.qualifier();
                  Names.Name var16 = var14.name();
                  if (var15 instanceof Trees.Ident) {
                     Names.Name var17 = ((Trees.Ident)var15).name();
                     Names.TermName var19 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$ScalaMemberRef$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().ROOTPKG();
                     if (var19 == null) {
                        if (var17 != null) {
                           return scala.None..MODULE$;
                        }
                     } else if (!var19.equals(var17)) {
                        return scala.None..MODULE$;
                     }

                     var19 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$ScalaMemberRef$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().scala_();
                     if (var19 == null) {
                        if (var16 == null) {
                           return this.result(name);
                        }
                     } else if (var19.equals(var16)) {
                        return this.result(name);
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         // $FF: synthetic method
         public ReificationSupportImpl scala$reflect$internal$ReificationSupport$ReificationSupportImpl$ScalaMemberRef$$$outer() {
            return this.$outer;
         }

         public ScalaMemberRef(final Seq symbols) {
            this.symbols = symbols;
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class TupleClassRef$ extends ScalaMemberRef {
         public TupleClassRef$() {
            super(ReificationSupportImpl.this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().TupleClass().seq());
         }
      }

      public class TupleCompanionRef$ extends ScalaMemberRef {
         public TupleCompanionRef$() {
            super((Seq)ReificationSupportImpl.this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().TupleClass().seq().map(new Serializable() {
               private static final long serialVersionUID = 0L;

               public final Symbols.Symbol apply(final Symbols.ClassSymbol x$8) {
                  return x$8.companionModule();
               }
            }));
         }
      }

      public class UnitClassRef$ extends ScalaMemberRef {
         public UnitClassRef$() {
            super(new scala.collection.immutable..colon.colon(ReificationSupportImpl.this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().UnitClass(), scala.collection.immutable.Nil..MODULE$));
         }
      }

      public class FunctionClassRef$ extends ScalaMemberRef {
         public FunctionClassRef$() {
            super(ReificationSupportImpl.this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().FunctionClass().seq());
         }
      }

      public class SyntacticTuple$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticTupleExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final List args) {
            boolean var6;
            SymbolTable var10000;
            label34: {
               var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
               if (!args.isEmpty()) {
                  label32: {
                     Symbols.Symbol var10001 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().TupleClass().apply(args.length());
                     Symbols.NoSymbol var2 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoSymbol();
                     if (var10001 == null) {
                        if (var2 != null) {
                           break label32;
                        }
                     } else if (!var10001.equals(var2)) {
                        break label32;
                     }

                     var6 = false;
                     break label34;
                  }
               }

               var6 = true;
            }

            boolean require_requirement = var6;
            if (var10000 == null) {
               throw null;
            } else {
               SymbolTable require_this = var10000;
               if (!require_requirement) {
                  throw require_this.throwRequirementError($anonfun$apply$4(args));
               } else {
                  require_this = null;
                  return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkTuple(args, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkTuple$default$2());
               }
            }
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Literal) {
               Constants.Constant var2 = ((Trees.Literal)tree).value();
               if (var2 != null) {
                  Object var3 = var2.value();
                  BoxedUnit var10000 = BoxedUnit.UNIT;
                  if (var10000 == null) {
                     if (var3 == null) {
                        return package$.MODULE$.SomeOfNil();
                     }
                  } else if (var10000.equals(var3)) {
                     return package$.MODULE$.SomeOfNil();
                  }
               }
            }

            if (tree instanceof Trees.Apply) {
               Trees.Apply var4 = (Trees.Apply)tree;
               Trees.Tree var5 = var4.fun();
               List args = var4.args();
               if (var5 != null) {
                  Some var7 = this.$outer.MaybeTypeTreeOriginal().unapply(var5);
                  if (!var7.isEmpty()) {
                     Trees.Tree var8 = (Trees.Tree)var7.value();
                     if (var8 != null) {
                        Option var9 = this.$outer.SyntacticTypeApplied().unapply(var8);
                        if (!var9.isEmpty()) {
                           Trees.Tree var10 = (Trees.Tree)((Tuple2)var9.get())._1();
                           List targs = (List)((Tuple2)var9.get())._2();
                           if (var10 != null) {
                              Some var12 = this.$outer.MaybeSelectApply().unapply(var10);
                              if (!var12.isEmpty()) {
                                 Trees.Tree var13 = (Trees.Tree)var12.value();
                                 if (var13 != null) {
                                    Option var14 = this.$outer.TupleCompanionRef().unapply(var13);
                                    if (!var14.isEmpty()) {
                                       label81: {
                                          Symbols.Symbol var18 = (Symbols.Symbol)var14.get();
                                          Symbols.Symbol var15 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().TupleClass().apply(args.length()).companionModule();
                                          if (var18 == null) {
                                             if (var15 != null) {
                                                break label81;
                                             }
                                          } else if (!var18.equals(var15)) {
                                             break label81;
                                          }

                                          if (targs.isEmpty() || targs.length() == args.length()) {
                                             return new Some(args);
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            if (tree.isTerm()) {
               List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
               scala.collection.immutable..colon.colon var10002 = new scala.collection.immutable..colon.colon(tree, $colon$colon_this);
               $colon$colon_this = null;
               return new Some(var10002);
            } else {
               return scala.None..MODULE$;
            }
         }

         // $FF: synthetic method
         public static final String $anonfun$apply$4(final List args$1) {
            return (new StringBuilder(35)).append("Tuples with ").append(args$1.length()).append(" arity aren't supported").toString();
         }

         public SyntacticTuple$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticTupleType$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticTupleExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final List args) {
            boolean var6;
            SymbolTable var10000;
            label34: {
               var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
               if (!args.isEmpty()) {
                  label32: {
                     Symbols.Symbol var10001 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().TupleClass().apply(args.length());
                     Symbols.NoSymbol var2 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoSymbol();
                     if (var10001 == null) {
                        if (var2 != null) {
                           break label32;
                        }
                     } else if (!var10001.equals(var2)) {
                        break label32;
                     }

                     var6 = false;
                     break label34;
                  }
               }

               var6 = true;
            }

            boolean require_requirement = var6;
            if (var10000 == null) {
               throw null;
            } else {
               SymbolTable require_this = var10000;
               if (!require_requirement) {
                  throw require_this.throwRequirementError($anonfun$apply$5(args));
               } else {
                  require_this = null;
                  return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkTupleType(args, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkTupleType$default$2());
               }
            }
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.$outer.MaybeTypeTreeOriginal().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)var2.value();
                  if (var3 != null && !this.$outer.UnitClassRef().unapply(var3).isEmpty()) {
                     return package$.MODULE$.SomeOfNil();
                  }
               }
            }

            if (tree != null) {
               Some var4 = this.$outer.MaybeTypeTreeOriginal().unapply(tree);
               if (!var4.isEmpty()) {
                  Trees.Tree var5 = (Trees.Tree)var4.value();
                  if (var5 instanceof Trees.AppliedTypeTree) {
                     Trees.AppliedTypeTree var6 = (Trees.AppliedTypeTree)var5;
                     Trees.Tree var7 = var6.tpt();
                     List args = var6.args();
                     if (var7 != null) {
                        Option var9 = this.$outer.TupleClassRef().unapply(var7);
                        if (!var9.isEmpty()) {
                           Symbols.Symbol var10000 = (Symbols.Symbol)var9.get();
                           Symbols.Symbol var10 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().TupleClass().apply(args.length());
                           if (var10000 == null) {
                              if (var10 == null) {
                                 return new Some(args);
                              }
                           } else if (var10000.equals(var10)) {
                              return new Some(args);
                           }
                        }
                     }
                  }
               }
            }

            if (tree.isType()) {
               List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
               scala.collection.immutable..colon.colon var10002 = new scala.collection.immutable..colon.colon(tree, $colon$colon_this);
               $colon$colon_this = null;
               return new Some(var10002);
            } else {
               return scala.None..MODULE$;
            }
         }

         // $FF: synthetic method
         public static final String $anonfun$apply$5(final List args$2) {
            return (new StringBuilder(35)).append("Tuples with ").append(args$2.length()).append(" arity aren't supported").toString();
         }

         public SyntacticTupleType$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticFunctionType$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticFunctionTypeExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final List argtpes, final Trees.Tree restpe) {
            boolean var7;
            SymbolTable var10000;
            label25: {
               label24: {
                  var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
                  Symbols.Symbol var10001 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().FunctionClass().apply(argtpes.length());
                  Symbols.NoSymbol var3 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoSymbol();
                  if (var10001 == null) {
                     if (var3 != null) {
                        break label24;
                     }
                  } else if (!var10001.equals(var3)) {
                     break label24;
                  }

                  var7 = false;
                  break label25;
               }

               var7 = true;
            }

            boolean require_requirement = var7;
            if (var10000 == null) {
               throw null;
            } else {
               SymbolTable require_this = var10000;
               if (!require_requirement) {
                  throw require_this.throwRequirementError($anonfun$apply$6(argtpes));
               } else {
                  require_this = null;
                  return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkFunctionTypeTree(argtpes, restpe);
               }
            }
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.$outer.MaybeTypeTreeOriginal().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)var2.value();
                  if (var3 instanceof Trees.AppliedTypeTree) {
                     Trees.AppliedTypeTree var4 = (Trees.AppliedTypeTree)var3;
                     Trees.Tree var5 = var4.tpt();
                     List args = var4.args();
                     if (var5 != null) {
                        Option var7 = this.$outer.FunctionClassRef().unapply(var5);
                        if (!var7.isEmpty()) {
                           Symbols.Symbol sym = (Symbols.Symbol)var7.get();
                           if (args != null) {
                              Option var9 = scala.package..MODULE$.$colon$plus().unapply(args);
                              if (!var9.isEmpty()) {
                                 List argtpes = (List)((Tuple2)var9.get())._1();
                                 Trees.Tree restpe = (Trees.Tree)((Tuple2)var9.get())._2();
                                 Symbols.Symbol var12 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().FunctionClass().apply(args.length() - 1);
                                 if (sym == null) {
                                    if (var12 == null) {
                                       return new Some(new Tuple2(argtpes, restpe));
                                    }
                                 } else if (sym.equals(var12)) {
                                    return new Some(new Tuple2(argtpes, restpe));
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         // $FF: synthetic method
         public static final String $anonfun$apply$6(final List argtpes$1) {
            return (new StringBuilder(43)).append("Function types with ").append(argtpes$1.length()).append(" arity aren't supported").toString();
         }

         public SyntacticFunctionType$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntheticUnit$ {
         public boolean unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Literal) {
               Constants.Constant var2 = ((Trees.Literal)tree).value();
               if (var2 != null) {
                  Object var3 = var2.value();
                  BoxedUnit var10000 = BoxedUnit.UNIT;
                  if (var10000 == null) {
                     if (var3 != null) {
                        return false;
                     }
                  } else if (!var10000.equals(var3)) {
                     return false;
                  }

                  if (tree.hasAttachment(scala.reflect.ClassTag..MODULE$.apply(StdAttachments.SyntheticUnitAttachment$.class))) {
                     return true;
                  }
               }
            }

            return false;
         }
      }

      public class SyntacticBlock$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticBlockExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final List stats) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkBlock(stats, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkBlock$default$2());
         }

         public Option unapply(final Trees.Tree tree) {
            boolean var2 = false;
            Trees.Block var3 = null;
            if (tree instanceof Trees.Block) {
               var2 = true;
               var3 = (Trees.Block)tree;
               Trees.Tree var4 = var3.expr();
               if (var4 != null && this.$outer.SyntheticUnit().unapply(var4)) {
                  return new Some(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().treeInfo().untypecheckedBlockBody(var3));
               }
            }

            if (var2) {
               Trees.Tree expr = var3.expr();
               Some var10000 = new Some;
               List var8 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().treeInfo().untypecheckedBlockBody(var3);
               if (var8 == null) {
                  throw null;
               } else {
                  var10000.<init>(StrictOptimizedSeqOps.appended$(var8, expr));
                  return var10000;
               }
            } else if (tree != null && this.$outer.SyntheticUnit().unapply(tree)) {
               return package$.MODULE$.SomeOfNil();
            } else if (tree.isTerm() && tree.nonEmpty()) {
               List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
               scala.collection.immutable..colon.colon var10002 = new scala.collection.immutable..colon.colon(tree, $colon$colon_this);
               $colon$colon_this = null;
               return new Some(var10002);
            } else {
               return scala.None..MODULE$;
            }
         }

         public SyntacticBlock$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticFunction$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticFunctionExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Function apply(final List params, final Trees.Tree body) {
            ReificationSupportImpl var10000 = this.$outer;
            List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
            scala.collection.immutable..colon.colon var10001 = new scala.collection.immutable..colon.colon(params, $colon$colon_this);
            $colon$colon_this = null;
            List var3 = var10000.mkParam((List)var10001, 8192L, this.$outer.mkParam$default$3());
            if (var3 instanceof scala.collection.immutable..colon.colon) {
               scala.collection.immutable..colon.colon var4 = (scala.collection.immutable..colon.colon)var3;
               List params0 = (List)var4.head();
               List var6 = var4.next$access$1();
               if (scala.collection.immutable.Nil..MODULE$.equals(var6)) {
                  SymbolTable var14 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
                  if (params0 == null) {
                     throw null;
                  }

                  List forall_these = params0;

                  while(true) {
                     if (forall_these.isEmpty()) {
                        var15 = true;
                        break;
                     }

                     if (!$anonfun$apply$7((Trees.ValDef)forall_these.head())) {
                        var15 = false;
                        break;
                     }

                     forall_these = (List)forall_these.tail();
                  }

                  Object var12 = null;
                  boolean require_requirement = var15;
                  if (var14 == null) {
                     throw null;
                  }

                  SymbolTable require_this = var14;
                  if (!require_requirement) {
                     throw require_this.throwRequirementError("anonymous functions don't support parameters with default values");
                  }

                  require_this = null;
                  return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Function(params0, body);
               }
            }

            throw new MatchError(var3);
         }

         public Option unapply(final Trees.Function tree) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().Function().unapply(tree);
         }

         // $FF: synthetic method
         public static final boolean $anonfun$apply$7(final Trees.ValDef x$9) {
            return x$9.rhs().isEmpty();
         }

         // $FF: synthetic method
         public static final String $anonfun$apply$8() {
            return "anonymous functions don't support parameters with default values";
         }

         public SyntacticFunction$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }

         // $FF: synthetic method
         public static final Object $anonfun$apply$7$adapted(final Trees.ValDef x$9) {
            return BoxesRunTime.boxToBoolean($anonfun$apply$7(x$9));
         }
      }

      public class SyntacticNew$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticNewExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final List earlyDefs, final List parents, final Trees.Tree selfType, final List body) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkNew(parents, this.$outer.mkSelfType(selfType), body.$colon$colon$colon(earlyDefs), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoPosition(), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoPosition());
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().treeInfo().Applied().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)((Tuple3)var2.value())._1();
                  List var4 = (List)((Tuple3)var2.value())._2();
                  List var5 = (List)((Tuple3)var2.value())._3();
                  if (var3 instanceof Trees.Select) {
                     Trees.Select var6 = (Trees.Select)var3;
                     Trees.Tree var7 = var6.qualifier();
                     Names.Name var8 = var6.name();
                     if (var7 instanceof Trees.New) {
                        Trees.Tree var9 = ((Trees.New)var7).tpt();
                        if (var9 != null) {
                           Option var10 = this.$outer.SyntacticAppliedType().unapply(var9);
                           if (!var10.isEmpty()) {
                              label121: {
                                 Trees.Tree ident = (Trees.Tree)((Tuple2)var10.get())._1();
                                 List targs = (List)((Tuple2)var10.get())._2();
                                 Names.TermName var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().CONSTRUCTOR();
                                 if (var10000 == null) {
                                    if (var8 != null) {
                                       break label121;
                                    }
                                 } else if (!var10000.equals(var8)) {
                                    break label121;
                                 }

                                 if (scala.collection.immutable.Nil..MODULE$.equals(var4) && var5 != null) {
                                    List var60 = scala.package..MODULE$.List();
                                    if (var60 == null) {
                                       throw null;
                                    }

                                    List unapplySeq_this = var60;
                                    SeqOps var61 = SeqFactory.unapplySeq$(unapplySeq_this, var5);
                                    Object var57 = null;
                                    SeqOps var13 = var61;
                                    SeqFactory.UnapplySeqWrapper var62 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                    SeqFactory.UnapplySeqWrapper var10001 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                    new SeqFactory.UnapplySeqWrapper(var13);
                                    var62 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                    var62 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                    int lengthCompare$extension_len = 1;
                                    if (var13.lengthCompare(lengthCompare$extension_len) == 0) {
                                       var62 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                       var62 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                       int apply$extension_i = 0;
                                       List var14 = (List)var13.apply(apply$extension_i);
                                       if (scala.collection.immutable.Nil..MODULE$.equals(var14)) {
                                          Nil var10004 = scala.collection.immutable.Nil..MODULE$;
                                          Trees.Tree var15 = this.$outer.SyntacticAppliedType().apply(ident, targs);
                                          List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
                                          scala.collection.immutable..colon.colon var10005 = new scala.collection.immutable..colon.colon(var15, $colon$colon_this);
                                          $colon$colon_this = null;
                                          return new Some(new Tuple4(var10004, var10005, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().noSelfType(), scala.collection.immutable.Nil..MODULE$));
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            if (tree != null) {
               Some var16 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().treeInfo().Applied().unapply(tree);
               if (!var16.isEmpty()) {
                  Trees.Tree var17 = (Trees.Tree)((Tuple3)var16.value())._1();
                  List var18 = (List)((Tuple3)var16.value())._2();
                  List argss = (List)((Tuple3)var16.value())._3();
                  if (var17 instanceof Trees.Select) {
                     Trees.Select var20 = (Trees.Select)var17;
                     Trees.Tree var21 = var20.qualifier();
                     Names.Name var22 = var20.name();
                     if (var21 instanceof Trees.New) {
                        Trees.Tree var23 = ((Trees.New)var21).tpt();
                        if (var23 != null) {
                           Option var24 = this.$outer.SyntacticAppliedType().unapply(var23);
                           if (!var24.isEmpty()) {
                              label109: {
                                 Trees.Tree ident = (Trees.Tree)((Tuple2)var24.get())._1();
                                 List targs = (List)((Tuple2)var24.get())._2();
                                 Names.TermName var67 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().CONSTRUCTOR();
                                 if (var67 == null) {
                                    if (var22 != null) {
                                       break label109;
                                    }
                                 } else if (!var67.equals(var22)) {
                                    break label109;
                                 }

                                 if (scala.collection.immutable.Nil..MODULE$.equals(var18)) {
                                    Nil var72 = scala.collection.immutable.Nil..MODULE$;
                                    Trees.Tree var27 = this.$outer.SyntacticApplied().apply(this.$outer.SyntacticAppliedType().apply(ident, targs), argss);
                                    List $colon$colon_this = scala.collection.immutable.Nil..MODULE$;
                                    scala.collection.immutable..colon.colon var73 = new scala.collection.immutable..colon.colon(var27, $colon$colon_this);
                                    $colon$colon_this = null;
                                    return new Some(new Tuple4(var72, var73, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().noSelfType(), scala.collection.immutable.Nil..MODULE$));
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            if (tree != null) {
               Option var28 = this.$outer.SyntacticBlock().unapply(tree);
               if (!var28.isEmpty()) {
                  List var29 = (List)var28.get();
                  if (var29 instanceof scala.collection.immutable..colon.colon) {
                     scala.collection.immutable..colon.colon var30 = (scala.collection.immutable..colon.colon)var29;
                     Trees.Tree var31 = (Trees.Tree)var30.head();
                     List var32 = var30.next$access$1();
                     if (var31 != null) {
                        Option var33 = this.$outer.SyntacticClassDef().unapply(var31);
                        if (!var33.isEmpty()) {
                           Names.TypeName var34 = (Names.TypeName)((Tuple9)var33.get())._2();
                           List var35 = (List)((Tuple9)var33.get())._3();
                           List var36 = (List)((Tuple9)var33.get())._5();
                           List earlyDefs = (List)((Tuple9)var33.get())._6();
                           List parents = (List)((Tuple9)var33.get())._7();
                           Trees.ValDef selfType = (Trees.ValDef)((Tuple9)var33.get())._8();
                           List body = (List)((Tuple9)var33.get())._9();
                           Names.Name var68 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().tpnme().ANON_CLASS_NAME();
                           if (var68 == null) {
                              if (var34 != null) {
                                 return scala.None..MODULE$;
                              }
                           } else if (!var68.equals(var34)) {
                              return scala.None..MODULE$;
                           }

                           if (scala.collection.immutable.Nil..MODULE$.equals(var35)) {
                              List var69 = package$.MODULE$.ListOfNil();
                              if (var69 == null) {
                                 if (var36 != null) {
                                    return scala.None..MODULE$;
                                 }
                              } else if (!var69.equals(var36)) {
                                 return scala.None..MODULE$;
                              }

                              if (var32 instanceof scala.collection.immutable..colon.colon) {
                                 scala.collection.immutable..colon.colon var41 = (scala.collection.immutable..colon.colon)var32;
                                 Trees.Tree var42 = (Trees.Tree)var41.head();
                                 List var43 = var41.next$access$1();
                                 if (var42 instanceof Trees.Apply) {
                                    Trees.Apply var44 = (Trees.Apply)var42;
                                    Trees.Tree var45 = var44.fun();
                                    List var46 = var44.args();
                                    if (var45 instanceof Trees.Select) {
                                       Trees.Select var47 = (Trees.Select)var45;
                                       Trees.Tree var48 = var47.qualifier();
                                       Names.Name var49 = var47.name();
                                       if (var48 instanceof Trees.New) {
                                          Trees.Tree var50 = ((Trees.New)var48).tpt();
                                          if (var50 instanceof Trees.Ident) {
                                             Names.Name var51 = ((Trees.Ident)var50).name();
                                             Names.Name var70 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().tpnme().ANON_CLASS_NAME();
                                             if (var70 == null) {
                                                if (var51 != null) {
                                                   return scala.None..MODULE$;
                                                }
                                             } else if (!var70.equals(var51)) {
                                                return scala.None..MODULE$;
                                             }

                                             Names.TermName var71 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().CONSTRUCTOR();
                                             if (var71 == null) {
                                                if (var49 != null) {
                                                   return scala.None..MODULE$;
                                                }
                                             } else if (!var71.equals(var49)) {
                                                return scala.None..MODULE$;
                                             }

                                             if (scala.collection.immutable.Nil..MODULE$.equals(var46) && scala.collection.immutable.Nil..MODULE$.equals(var43)) {
                                                return new Some(new Tuple4(earlyDefs, parents, selfType, body));
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticNew$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticDefDef$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticDefDefExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.DefDef apply(final Trees.Modifiers mods, final Names.TermName name, final List tparams, final List vparamss, final Trees.Tree tpt, final Trees.Tree rhs) {
            List tparams0;
            List vparamss0;
            Object var10000;
            label20: {
               label19: {
                  tparams0 = this.$outer.mkTparams(tparams);
                  vparamss0 = this.$outer.mkParam(vparamss, 8192L, this.$outer.mkParam$default$3());
                  Names.TermName var10 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().CONSTRUCTOR();
                  if (name == null) {
                     if (var10 != null) {
                        break label19;
                     }
                  } else if (!name.equals(var10)) {
                     break label19;
                  }

                  var10000 = rhs instanceof Trees.Block ? rhs : this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Block(new scala.collection.immutable..colon.colon(rhs, scala.collection.immutable.Nil..MODULE$), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkSyntheticUnit());
                  break label20;
               }

               var10000 = rhs;
            }

            Trees.Tree rhs0 = (Trees.Tree)var10000;
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new DefDef(mods, name, tparams0, vparamss0, tpt, rhs0);
         }

         public Option unapply(final Trees.Tree tree) {
            boolean var2 = false;
            Trees.DefDef var3 = null;
            if (tree instanceof Trees.DefDef) {
               label48: {
                  var2 = true;
                  var3 = (Trees.DefDef)tree;
                  Trees.Modifiers mods = var3.mods();
                  Names.TermName var5 = var3.name();
                  List tparams = var3.tparams();
                  List vparamss = var3.vparamss();
                  Trees.Tree tpt = var3.tpt();
                  Trees.Tree var9 = var3.rhs();
                  Names.TermName var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().CONSTRUCTOR();
                  if (var10000 == null) {
                     if (var5 != null) {
                        break label48;
                     }
                  } else if (!var10000.equals(var5)) {
                     break label48;
                  }

                  if (var9 instanceof Trees.Block) {
                     Trees.Block var10 = (Trees.Block)var9;
                     List var11 = var10.stats();
                     Trees.Tree var12 = var10.expr();
                     if (var11 != null) {
                        List var27 = scala.package..MODULE$.List();
                        if (var27 == null) {
                           throw null;
                        }

                        List unapplySeq_this = var27;
                        SeqOps var28 = SeqFactory.unapplySeq$(unapplySeq_this, var11);
                        Object var26 = null;
                        SeqOps var13 = var28;
                        SeqFactory.UnapplySeqWrapper var29 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                        SeqFactory.UnapplySeqWrapper var10001 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                        new SeqFactory.UnapplySeqWrapper(var13);
                        var29 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                        var29 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                        int lengthCompare$extension_len = 1;
                        if (var13.lengthCompare(lengthCompare$extension_len) == 0) {
                           var29 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                           var29 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                           int apply$extension_i = 0;
                           Trees.Tree expr = (Trees.Tree)var13.apply(apply$extension_i);
                           if (var12 instanceof Trees.Literal) {
                              Constants.Constant var15 = ((Trees.Literal)var12).value();
                              if (var15 != null) {
                                 Object var16 = var15.value();
                                 BoxedUnit var34 = BoxedUnit.UNIT;
                                 if (var34 == null) {
                                    if (var16 == null) {
                                       return new Some(new Tuple6(mods, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().CONSTRUCTOR(), tparams, vparamss, tpt, expr));
                                    }
                                 } else if (var34.equals(var16)) {
                                    return new Some(new Tuple6(mods, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().CONSTRUCTOR(), tparams, vparamss, tpt, expr));
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            if (var2) {
               Trees.Modifiers mods = var3.mods();
               Names.TermName name = var3.name();
               List tparams = var3.tparams();
               List vparamss = var3.vparamss();
               Trees.Tree tpt = var3.tpt();
               Trees.Tree rhs = var3.rhs();
               return new Some(new Tuple6(mods, name, tparams, vparamss, tpt, rhs));
            } else {
               return scala.None..MODULE$;
            }
         }

         public SyntacticDefDef$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticValDefBase implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticValDefExtractor {
         private final boolean isMutable;
         // $FF: synthetic field
         public final ReificationSupportImpl $outer;

         public Trees.Modifiers modifiers(final Trees.Modifiers mods) {
            return this.isMutable ? mods.$bar(4096L) : mods;
         }

         public Trees.ValDef apply(final Trees.Modifiers mods, final Names.TermName name, final Trees.Tree tpt, final Trees.Tree rhs) {
            return this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$SyntacticValDefBase$$$outer().scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new ValDef(this.modifiers(mods), name, tpt, rhs);
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.ValDef) {
               Trees.ValDef var2 = (Trees.ValDef)tree;
               Trees.Modifiers mods = var2.mods();
               Names.TermName name = var2.name();
               Trees.Tree tpt = var2.tpt();
               Trees.Tree rhs = var2.rhs();
               if (mods.hasFlag(4096L) == this.isMutable) {
                  return new Some(new Tuple4(mods, name, tpt, rhs));
               }
            }

            return scala.None..MODULE$;
         }

         // $FF: synthetic method
         public ReificationSupportImpl scala$reflect$internal$ReificationSupport$ReificationSupportImpl$SyntacticValDefBase$$$outer() {
            return this.$outer;
         }

         public SyntacticValDefBase(final boolean isMutable) {
            this.isMutable = isMutable;
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticValDef$ extends SyntacticValDefBase {
         public SyntacticValDef$() {
            super(false);
         }
      }

      public class SyntacticVarDef$ extends SyntacticValDefBase {
         public SyntacticVarDef$() {
            super(true);
         }
      }

      public class SyntacticAssign$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticAssignExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final Trees.Tree lhs, final Trees.Tree rhs) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkAssign(lhs, rhs);
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Assign) {
               Trees.Assign var2 = (Trees.Assign)tree;
               Trees.Tree lhs = var2.lhs();
               Trees.Tree rhs = var2.rhs();
               return new Some(new Tuple2(lhs, rhs));
            } else if (tree instanceof Trees.NamedArg) {
               Trees.NamedArg var5 = (Trees.NamedArg)tree;
               Trees.Tree lhs = var5.lhs();
               Trees.Tree rhs = var5.rhs();
               return new Some(new Tuple2(lhs, rhs));
            } else {
               if (tree instanceof Trees.Apply) {
                  Trees.Apply var8 = (Trees.Apply)tree;
                  Trees.Tree var9 = var8.fun();
                  List var10 = var8.args();
                  if (var9 instanceof Trees.Select) {
                     Trees.Select var11 = (Trees.Select)var9;
                     Trees.Tree fn = var11.qualifier();
                     Names.Name var13 = var11.name();
                     Names.TermName var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().update();
                     if (var10000 == null) {
                        if (var13 != null) {
                           return scala.None..MODULE$;
                        }
                     } else if (!var10000.equals(var13)) {
                        return scala.None..MODULE$;
                     }

                     if (var10 != null) {
                        Option var14 = scala.package..MODULE$.$colon$plus().unapply(var10);
                        if (!var14.isEmpty()) {
                           List args = (List)((Tuple2)var14.get())._1();
                           Trees.Tree rhs = (Trees.Tree)((Tuple2)var14.get())._2();
                           return new Some(new Tuple2(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().atPos((Position)fn.pos(), (Trees.Tree)(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Apply(fn, args))), rhs));
                        }
                     }
                  }
               }

               return scala.None..MODULE$;
            }
         }

         public SyntacticAssign$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticValFrom$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticValFromExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final Trees.Tree pat, final Trees.Tree rhs) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().ValFrom().apply(pat, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkCheckIfRefutable(pat, rhs, this.$outer.fresh()));
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Option var2 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().ValFrom().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree pat = (Trees.Tree)((Tuple2)var2.get())._1();
                  Trees.Tree var4 = (Trees.Tree)((Tuple2)var2.get())._2();
                  if (var4 != null) {
                     Option var5 = this.$outer.UnCheckIfRefutable().unapply(var4);
                     if (!var5.isEmpty()) {
                        Trees.Tree pat1 = (Trees.Tree)((Tuple2)var5.get())._1();
                        Trees.Tree rhs1 = (Trees.Tree)((Tuple2)var5.get())._2();
                        if (pat.equalsStructure(pat1)) {
                           return new Some(new Tuple2(pat, rhs1));
                        }
                     }
                  }
               }
            }

            if (tree != null) {
               Option var8 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().ValFrom().unapply(tree);
               if (!var8.isEmpty()) {
                  Trees.Tree pat = (Trees.Tree)((Tuple2)var8.get())._1();
                  Trees.Tree rhs = (Trees.Tree)((Tuple2)var8.get())._2();
                  return new Some(new Tuple2(pat, rhs));
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticValFrom$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticValEq$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticValEqExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final Trees.Tree pat, final Trees.Tree rhs) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().ValEq().apply(pat, rhs);
         }

         public Option unapply(final Trees.Tree tree) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().ValEq().unapply(tree);
         }

         public SyntacticValEq$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticFilter$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticFilterExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final Trees.Tree tree) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().Filter().apply(tree);
         }

         public Option unapply(final Trees.Tree tree) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().Filter().unapply(tree);
         }

         public SyntacticFilter$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticEmptyTypeTree$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticEmptyTypeTreeExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.TypeTree apply() {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new TypeTree();
         }

         public boolean unapply(final Trees.TypeTree tt) {
            return tt.original() == null || tt.original().isEmpty();
         }

         public SyntacticEmptyTypeTree$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class UnPatSeq$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Option unapply(final List trees) {
            implodePatDefs$ var10000 = this.$outer.implodePatDefs();
            if (var10000 == null) {
               throw null;
            } else {
               List imploded = var10000.transformStats(trees);
               if (imploded == null) {
                  throw null;
               } else {
                  List flatMap_rest = imploded;
                  scala.collection.immutable..colon.colon flatMap_h = null;

                  for(scala.collection.immutable..colon.colon flatMap_t = null; flatMap_rest != scala.collection.immutable.Nil..MODULE$; flatMap_rest = (List)flatMap_rest.tail()) {
                     Trees.Tree var9 = (Trees.Tree)flatMap_rest.head();

                     scala.collection.immutable..colon.colon flatMap_nx;
                     for(Iterator flatMap_it = $anonfun$unapply$12(this, var9).iterator(); flatMap_it.hasNext(); flatMap_t = flatMap_nx) {
                        flatMap_nx = new scala.collection.immutable..colon.colon(flatMap_it.next(), scala.collection.immutable.Nil..MODULE$);
                        if (flatMap_t == null) {
                           flatMap_h = flatMap_nx;
                        } else {
                           flatMap_t.next_$eq(flatMap_nx);
                        }
                     }
                  }

                  Object var15;
                  if (flatMap_h == null) {
                     var15 = scala.collection.immutable.Nil..MODULE$;
                  } else {
                     Statics.releaseFence();
                     var15 = flatMap_h;
                  }

                  Object var10 = null;
                  Object var11 = null;
                  Object var12 = null;
                  Object var13 = null;
                  Object var14 = null;
                  List patvalues = (List)var15;
                  if (patvalues.length() == imploded.length()) {
                     return new Some(patvalues);
                  } else {
                     return scala.None..MODULE$;
                  }
               }
            }
         }

         // $FF: synthetic method
         public static final Option $anonfun$unapply$12(final UnPatSeq$ $this, final Trees.Tree x0$1) {
            boolean var2 = false;
            Trees.ValDef var3 = null;
            if (x0$1 != null) {
               Option var4 = $this.$outer.SyntacticPatDef().unapply(x0$1);
               if (!var4.isEmpty()) {
                  Trees.Tree pat = (Trees.Tree)((Tuple4)var4.get())._2();
                  Trees.Tree var6 = (Trees.Tree)((Tuple4)var4.get())._3();
                  Trees.Tree rhs = (Trees.Tree)((Tuple4)var4.get())._4();
                  if ($this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree().equals(var6)) {
                     return new Some(new Tuple2(pat, rhs));
                  }
               }
            }

            if (x0$1 instanceof Trees.ValDef) {
               var2 = true;
               var3 = (Trees.ValDef)x0$1;
               Names.TermName name = var3.name();
               Trees.Tree var9 = var3.tpt();
               Trees.Tree rhs = var3.rhs();
               if (var9 instanceof Trees.TypeTree) {
                  Trees.TypeTree var11 = (Trees.TypeTree)var9;
                  if ($this.$outer.SyntacticEmptyTypeTree().unapply(var11)) {
                     return new Some(new Tuple2($this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Bind(name, $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Ident($this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().WILDCARD())), rhs));
                  }
               }
            }

            if (var2) {
               Names.TermName name = var3.name();
               Trees.Tree tpt = var3.tpt();
               Trees.Tree rhs = var3.rhs();
               return new Some(new Tuple2($this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Bind(name, $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Typed($this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Ident($this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().WILDCARD()), tpt)), rhs));
            } else {
               return scala.None..MODULE$;
            }
         }

         public UnPatSeq$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class implodePatDefs$ extends scala.reflect.api.Trees.Transformer {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree transform(final Trees.Tree tree) {
            if (tree instanceof Trees.Template) {
               Trees.Template var2 = (Trees.Template)tree;
               return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().deriveTemplate(var2, (trees) -> this.transformStats(trees));
            } else if (tree instanceof Trees.Block) {
               Trees.Block var3 = (Trees.Block)tree;
               if (var3 != null) {
                  List init = var3.stats();
                  Trees.Tree last = var3.expr();
                  return (this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Block(this.transformStats(init), this.transform(last))).copyAttrs(var3);
               } else {
                  throw new MatchError((Object)null);
               }
            } else {
               if (tree instanceof Trees.ValDef) {
                  Trees.ValDef var6 = (Trees.ValDef)tree;
                  Trees.Modifiers mods = var6.mods();
                  Names.TermName name1 = var6.name();
                  Trees.Tree var9 = var6.tpt();
                  Trees.Tree var10 = var6.rhs();
                  if (var9 instanceof Trees.TypeTree) {
                     Trees.TypeTree var11 = (Trees.TypeTree)var9;
                     if (this.$outer.SyntacticEmptyTypeTree().unapply(var11) && var10 instanceof Trees.Match) {
                        Trees.Match var12 = (Trees.Match)var10;
                        Trees.Tree var13 = var12.selector();
                        List var14 = var12.cases();
                        if (var13 != null) {
                           Some var15 = this.$outer.MaybeTyped().unapply(var13);
                           if (!var15.isEmpty()) {
                              Trees.Tree var16 = (Trees.Tree)((Tuple2)var15.value())._1();
                              Trees.Tree tpt = (Trees.Tree)((Tuple2)var15.value())._2();
                              if (var16 != null) {
                                 Some var18 = this.$outer.MaybeUnchecked().unapply(var16);
                                 if (!var18.isEmpty()) {
                                    Trees.Tree value = (Trees.Tree)var18.value();
                                    if (var14 instanceof scala.collection.immutable..colon.colon) {
                                       scala.collection.immutable..colon.colon var20 = (scala.collection.immutable..colon.colon)var14;
                                       Trees.CaseDef var21 = (Trees.CaseDef)var20.head();
                                       List var22 = var20.next$access$1();
                                       if (var21 != null) {
                                          Trees.Tree pat = var21.pat();
                                          Trees.Tree var24 = var21.guard();
                                          Trees.Tree var25 = var21.body();
                                          if (this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree().equals(var24) && var25 instanceof Trees.Ident) {
                                             Names.Name name2 = ((Trees.Ident)var25).name();
                                             if (scala.collection.immutable.Nil..MODULE$.equals(var22)) {
                                                if (name1 == null) {
                                                   if (name2 == null) {
                                                      return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new ValDef(mods, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().QUASIQUOTE_PAT_DEF(), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Typed(pat, tpt), this.transform(value));
                                                   }
                                                } else if (name1.equals(name2)) {
                                                   return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new ValDef(mods, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().QUASIQUOTE_PAT_DEF(), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Typed(pat, tpt), this.transform(value));
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }

               return (Trees.Tree)super.transform(tree);
            }
         }

         public List transformStats(final List trees) {
            boolean var2 = false;
            scala.collection.immutable..colon.colon var3 = null;
            if (scala.collection.immutable.Nil..MODULE$.equals(trees)) {
               return scala.collection.immutable.Nil..MODULE$;
            } else {
               if (trees instanceof scala.collection.immutable..colon.colon) {
                  var2 = true;
                  var3 = (scala.collection.immutable..colon.colon)trees;
                  Trees.Tree var4 = (Trees.Tree)var3.head();
                  List tail = var3.next$access$1();
                  if (var4 instanceof Trees.ValDef) {
                     Trees.ValDef var6 = (Trees.ValDef)var4;
                     Trees.Modifiers mods = var6.mods();
                     Trees.Tree var8 = var6.tpt();
                     Trees.Tree var9 = var6.rhs();
                     if (var8 instanceof Trees.TypeTree) {
                        Trees.TypeTree var10 = (Trees.TypeTree)var8;
                        if (this.$outer.SyntacticEmptyTypeTree().unapply(var10) && var9 instanceof Trees.Match) {
                           Trees.Match var11 = (Trees.Match)var9;
                           Trees.Tree var12 = var11.selector();
                           List var13 = var11.cases();
                           if (var12 != null) {
                              Some var14 = this.$outer.MaybeTyped().unapply(var12);
                              if (!var14.isEmpty()) {
                                 Trees.Tree var15 = (Trees.Tree)((Tuple2)var14.value())._1();
                                 Trees.Tree tpt = (Trees.Tree)((Tuple2)var14.value())._2();
                                 if (var15 != null) {
                                    Some var17 = this.$outer.MaybeUnchecked().unapply(var15);
                                    if (!var17.isEmpty()) {
                                       Trees.Tree value = (Trees.Tree)var17.value();
                                       if (var13 instanceof scala.collection.immutable..colon.colon) {
                                          scala.collection.immutable..colon.colon var19 = (scala.collection.immutable..colon.colon)var13;
                                          Trees.CaseDef var20 = (Trees.CaseDef)var19.head();
                                          List var21 = var19.next$access$1();
                                          if (var20 != null) {
                                             Trees.Tree pat = var20.pat();
                                             Trees.Tree var23 = var20.guard();
                                             Trees.Tree var24 = var20.body();
                                             if (this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree().equals(var23) && var24 != null) {
                                                Option var25 = this.$outer.SyntacticTuple().unapply(var24);
                                                if (!var25.isEmpty()) {
                                                   List ids = (List)var25.get();
                                                   if (scala.collection.immutable.Nil..MODULE$.equals(var21) && mods.hasAllFlags(70368746274816L)) {
                                                      if (scala.collection.immutable.Nil..MODULE$.equals(ids)) {
                                                         Trees.ValDef var27 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new ValDef((Trees.Modifiers)this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoMods(), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().QUASIQUOTE_PAT_DEF(), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Typed(pat, tpt), this.transform(value));
                                                         List var38 = this.transformStats(tail);
                                                         if (var38 == null) {
                                                            throw null;
                                                         }

                                                         List $colon$colon_this = var38;
                                                         return new scala.collection.immutable..colon.colon(var27, $colon$colon_this);
                                                      }

                                                      Trees.Modifiers mods = ((Trees.ValDef)tail.take(1).head()).mods();
                                                      Trees.ValDef var29 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new ValDef(mods, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().QUASIQUOTE_PAT_DEF(), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Typed(pat, tpt), this.transform(value));
                                                      int drop_n = ids.length();
                                                      List var37 = this.transformStats((List)StrictOptimizedLinearSeqOps.drop$(tail, drop_n));
                                                      if (var37 == null) {
                                                         throw null;
                                                      }

                                                      List $colon$colon_this = var37;
                                                      return new scala.collection.immutable..colon.colon(var29, $colon$colon_this);
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }

               if (var2) {
                  Trees.Tree other = (Trees.Tree)var3.head();
                  List tail = var3.next$access$1();
                  Trees.Tree var32 = this.transform(other);
                  List var10000 = this.transformStats(tail);
                  if (var10000 == null) {
                     throw null;
                  } else {
                     List $colon$colon_this = var10000;
                     return new scala.collection.immutable..colon.colon(var32, $colon$colon_this);
                  }
               } else {
                  throw new MatchError(trees);
               }
            }
         }

         public Trees.Tree apply(final Trees.Tree tree) {
            return this.transform(tree);
         }

         public List apply(final List trees) {
            return this.transformStats(trees);
         }

         public implodePatDefs$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      }

      public class SyntacticPatDef$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticPatDefExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public List apply(final Trees.Modifiers mods, final Trees.Tree pat, final Trees.Tree tpt, final Trees.Tree rhs) {
            if (tpt instanceof Trees.TypeTree) {
               Trees.TypeTree var5 = (Trees.TypeTree)tpt;
               if (this.$outer.SyntacticEmptyTypeTree().unapply(var5)) {
                  return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkPatDef(mods, pat, rhs, this.$outer.fresh());
               }
            }

            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkPatDef(mods, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Typed(pat, tpt), rhs, this.$outer.fresh());
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.ValDef) {
               Trees.ValDef var2 = (Trees.ValDef)tree;
               Trees.Modifiers mods = var2.mods();
               Names.TermName var4 = var2.name();
               Trees.Tree var5 = var2.tpt();
               Trees.Tree rhs = var2.rhs();
               Names.TermName var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().QUASIQUOTE_PAT_DEF();
               if (var10000 == null) {
                  if (var4 != null) {
                     return scala.None..MODULE$;
                  }
               } else if (!var10000.equals(var4)) {
                  return scala.None..MODULE$;
               }

               if (var5 instanceof Trees.Typed) {
                  Trees.Typed var7 = (Trees.Typed)var5;
                  Trees.Tree pat = var7.expr();
                  Trees.Tree tpt = var7.tpt();
                  return new Some(new Tuple4(mods, pat, tpt, rhs));
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticPatDef$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class UnPatSeqWithRes$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Option var2 = this.$outer.SyntacticBlock().unapply(tree);
               if (!var2.isEmpty()) {
                  List var3 = (List)var2.get();
                  if (var3 != null) {
                     Option var4 = scala.package..MODULE$.$colon$plus().unapply(var3);
                     if (!var4.isEmpty()) {
                        List var5 = (List)((Tuple2)var4.get())._1();
                        Trees.Tree var6 = (Trees.Tree)((Tuple2)var4.get())._2();
                        if (var5 != null) {
                           Option var7 = this.$outer.UnPatSeq().unapply(var5);
                           if (!var7.isEmpty()) {
                              List trees = (List)var7.get();
                              if (var6 != null) {
                                 Option var9 = this.$outer.SyntacticTuple().unapply(var6);
                                 if (!var9.isEmpty()) {
                                    List elems = (List)var9.get();
                                    return new Some(new Tuple2(trees, elems));
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public UnPatSeqWithRes$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class UnSyntheticParam$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.ValDef) {
               Trees.ValDef var2 = (Trees.ValDef)tree;
               Trees.Modifiers mods = var2.mods();
               Names.TermName name = var2.name();
               Trees.Tree var5 = var2.rhs();
               if (this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree().equals(var5) && mods.hasAllFlags(2105344L)) {
                  return new Some(name);
               }
            }

            return scala.None..MODULE$;
         }

         public UnSyntheticParam$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class UnVisitor$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Function) {
               Trees.Function var2 = (Trees.Function)tree;
               List var3 = var2.vparams();
               Trees.Tree var4 = var2.body();
               if (var3 instanceof scala.collection.immutable..colon.colon) {
                  scala.collection.immutable..colon.colon var5 = (scala.collection.immutable..colon.colon)var3;
                  Trees.ValDef var6 = (Trees.ValDef)var5.head();
                  List var7 = var5.next$access$1();
                  if (var6 != null) {
                     Option var8 = this.$outer.UnSyntheticParam().unapply(var6);
                     if (!var8.isEmpty()) {
                        Names.TermName x1 = (Names.TermName)var8.get();
                        if (scala.collection.immutable.Nil..MODULE$.equals(var7) && var4 instanceof Trees.Match) {
                           Trees.Match var10 = (Trees.Match)var4;
                           Trees.Tree var11 = var10.selector();
                           List cases = var10.cases();
                           if (var11 != null) {
                              Some var13 = this.$outer.MaybeUnchecked().unapply(var11);
                              if (!var13.isEmpty()) {
                                 Trees.Tree var14 = (Trees.Tree)var13.value();
                                 if (var14 instanceof Trees.Ident) {
                                    Names.Name x2 = ((Trees.Ident)var14).name();
                                    if (x1 == null) {
                                       if (x2 == null) {
                                          return new Some(new Tuple2(x1, cases));
                                       }
                                    } else if (x1.equals(x2)) {
                                       return new Some(new Tuple2(x1, cases));
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public UnVisitor$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class UnClosure$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Function) {
               Trees.Function var2 = (Trees.Function)tree;
               List var3 = var2.vparams();
               Trees.Tree body = var2.body();
               if (var3 instanceof scala.collection.immutable..colon.colon) {
                  scala.collection.immutable..colon.colon var5 = (scala.collection.immutable..colon.colon)var3;
                  Trees.ValDef var6 = (Trees.ValDef)var5.head();
                  List var7 = var5.next$access$1();
                  if (var6 != null) {
                     Trees.Modifiers var8 = var6.mods();
                     Names.TermName name = var6.name();
                     Trees.Tree tpt = var6.tpt();
                     Trees.Tree var11 = var6.rhs();
                     if (var8 != null) {
                        long var12 = var8.flags();
                        if (8192L == var12 && this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree().equals(var11) && scala.collection.immutable.Nil..MODULE$.equals(var7)) {
                           if (tpt instanceof Trees.TypeTree) {
                              Trees.TypeTree var14 = (Trees.TypeTree)tpt;
                              if (this.$outer.SyntacticEmptyTypeTree().unapply(var14)) {
                                 return new Some(new Tuple2(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Bind(name, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Ident(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().WILDCARD())), body));
                              }
                           }

                           return new Some(new Tuple2(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Bind(name, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Typed(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Ident(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().WILDCARD()), tpt)), body));
                        }
                     }
                  }
               }
            }

            if (tree != null) {
               Option var15 = this.$outer.UnVisitor().unapply(tree);
               if (!var15.isEmpty()) {
                  List var16 = (List)((Tuple2)var15.get())._2();
                  if (var16 instanceof scala.collection.immutable..colon.colon) {
                     scala.collection.immutable..colon.colon var17 = (scala.collection.immutable..colon.colon)var16;
                     Trees.CaseDef var18 = (Trees.CaseDef)var17.head();
                     List var19 = var17.next$access$1();
                     if (var18 != null) {
                        Trees.Tree pat = var18.pat();
                        Trees.Tree var21 = var18.guard();
                        Trees.Tree body = var18.body();
                        if (this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree().equals(var21) && scala.collection.immutable.Nil..MODULE$.equals(var19)) {
                           return new Some(new Tuple2(pat, body));
                        }
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public UnClosure$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class FilterCall$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Apply) {
               Trees.Apply var2 = (Trees.Apply)tree;
               Trees.Tree var3 = var2.fun();
               List var4 = var2.args();
               if (var3 instanceof Trees.Select) {
                  Trees.Tree obj;
                  boolean var12;
                  label38: {
                     label43: {
                        Trees.Select var5 = (Trees.Select)var3;
                        obj = var5.qualifier();
                        Names.Name var7 = var5.name();
                        Names.TermName var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().withFilter();
                        if (var10000 == null) {
                           if (var7 == null) {
                              break label43;
                           }
                        } else if (var10000.equals(var7)) {
                           break label43;
                        }

                        label31: {
                           var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().filter();
                           if (var10000 == null) {
                              if (var7 == null) {
                                 break label31;
                              }
                           } else if (var10000.equals(var7)) {
                              break label31;
                           }

                           var12 = false;
                           break label38;
                        }

                        var12 = true;
                        break label38;
                     }

                     var12 = true;
                  }

                  if (var12 && var4 instanceof scala.collection.immutable..colon.colon) {
                     scala.collection.immutable..colon.colon var8 = (scala.collection.immutable..colon.colon)var4;
                     Trees.Tree arg = (Trees.Tree)var8.head();
                     List var10 = var8.next$access$1();
                     if (scala.collection.immutable.Nil..MODULE$.equals(var10)) {
                        return new Some(new Tuple2(obj, arg));
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public FilterCall$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class UnFilter$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Some unapply(final Trees.Tree tree) {
            if (tree != null && !this.$outer.UnCheckIfRefutable().unapply(tree).isEmpty()) {
               return new Some(new Tuple2(tree, scala.collection.immutable.Nil..MODULE$));
            } else {
               if (tree != null) {
                  Option var2 = this.$outer.FilterCall().unapply(tree);
                  if (!var2.isEmpty()) {
                     Trees.Tree var3 = (Trees.Tree)((Tuple2)var2.get())._1();
                     Trees.Tree var4 = (Trees.Tree)((Tuple2)var2.get())._2();
                     if (var3 != null) {
                        Some var5 = this.$outer.UnFilter().unapply(var3);
                        if (!var5.isEmpty()) {
                           Trees.Tree rhs = (Trees.Tree)((Tuple2)var5.value())._1();
                           List rest = (List)((Tuple2)var5.value())._2();
                           if (var4 != null) {
                              Option var8 = this.$outer.UnClosure().unapply(var4);
                              if (!var8.isEmpty()) {
                                 Trees.Tree test = (Trees.Tree)((Tuple2)var8.get())._2();
                                 Some var10000 = new Some;
                                 Tuple2 var10002 = new Tuple2;
                                 Trees.Tree $colon$plus_elem = this.$outer.SyntacticFilter().apply(test);
                                 if (rest == null) {
                                    throw null;
                                 }

                                 Object var10005 = StrictOptimizedSeqOps.appended$(rest, $colon$plus_elem);
                                 $colon$plus_elem = null;
                                 var10002.<init>(rhs, var10005);
                                 var10000.<init>(var10002);
                                 return var10000;
                              }
                           }
                        }
                     }
                  }
               }

               return new Some(new Tuple2(tree, scala.collection.immutable.Nil..MODULE$));
            }
         }

         public UnFilter$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class UnCheckIfRefutable$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Option var2 = this.$outer.FilterCall().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree rhs = (Trees.Tree)((Tuple2)var2.get())._1();
                  Trees.Tree var4 = (Trees.Tree)((Tuple2)var2.get())._2();
                  if (var4 != null) {
                     Option var5 = this.$outer.UnVisitor().unapply(var4);
                     if (!var5.isEmpty()) {
                        Names.TermName name = (Names.TermName)((Tuple2)var5.get())._1();
                        List var7 = (List)((Tuple2)var5.get())._2();
                        if (var7 instanceof scala.collection.immutable..colon.colon) {
                           scala.collection.immutable..colon.colon var8 = (scala.collection.immutable..colon.colon)var7;
                           Trees.CaseDef var9 = (Trees.CaseDef)var8.head();
                           List var10 = var8.next$access$1();
                           if (var9 != null) {
                              Trees.Tree pat = var9.pat();
                              Trees.Tree var12 = var9.guard();
                              Trees.Tree var13 = var9.body();
                              if (this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree().equals(var12) && var13 instanceof Trees.Literal) {
                                 Constants.Constant var14 = ((Trees.Literal)var13).value();
                                 if (var14 != null) {
                                    Object var15 = var14.value();
                                    if (BoxesRunTime.equals(true, var15) && var10 instanceof scala.collection.immutable..colon.colon) {
                                       scala.collection.immutable..colon.colon var16 = (scala.collection.immutable..colon.colon)var10;
                                       Trees.CaseDef var17 = (Trees.CaseDef)var16.head();
                                       List var18 = var16.next$access$1();
                                       if (var17 != null) {
                                          Trees.Tree var19 = var17.pat();
                                          Trees.Tree var20 = var17.guard();
                                          Trees.Tree var21 = var17.body();
                                          if (var19 instanceof Trees.Ident) {
                                             Names.Name var22 = ((Trees.Ident)var19).name();
                                             Names.Name var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().WILDCARD();
                                             if (var10000 == null) {
                                                if (var22 != null) {
                                                   return scala.None..MODULE$;
                                                }
                                             } else if (!var10000.equals(var22)) {
                                                return scala.None..MODULE$;
                                             }

                                             if (this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree().equals(var20) && var21 instanceof Trees.Literal) {
                                                Constants.Constant var23 = ((Trees.Literal)var21).value();
                                                if (var23 != null) {
                                                   Object var24 = var23.value();
                                                   if (BoxesRunTime.equals(false, var24) && scala.collection.immutable.Nil..MODULE$.equals(var18) && name.toString().contains(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().CHECK_IF_REFUTABLE_STRING())) {
                                                      return new Some(new Tuple2(pat, rhs));
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public UnCheckIfRefutable$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class UnForCombination {
         private final Names.TermName name;
         // $FF: synthetic field
         public final ReificationSupportImpl $outer;

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnForCombination$$$outer().SyntacticApplied().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)((Tuple2)var2.value())._1();
                  List var4 = (List)((Tuple2)var2.value())._2();
                  if (var3 != null) {
                     Option var5 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnForCombination$$$outer().SyntacticTypeApplied().unapply(var3);
                     if (!var5.isEmpty()) {
                        Trees.Tree sel = (Trees.Tree)((Tuple2)var5.get())._1();
                        if (sel instanceof Trees.Select) {
                           Trees.Select var7 = (Trees.Select)sel;
                           Trees.Tree lhs = var7.qualifier();
                           Names.Name meth = var7.name();
                           if (var4 instanceof scala.collection.immutable..colon.colon) {
                              scala.collection.immutable..colon.colon var10 = (scala.collection.immutable..colon.colon)var4;
                              List var11 = (List)var10.head();
                              List var12 = var10.next$access$1();
                              if (var11 instanceof scala.collection.immutable..colon.colon) {
                                 scala.collection.immutable..colon.colon var13 = (scala.collection.immutable..colon.colon)var11;
                                 Trees.Tree f = (Trees.Tree)var13.head();
                                 List var15 = var13.next$access$1();
                                 if (scala.collection.immutable.Nil..MODULE$.equals(var15) && scala.collection.immutable.Nil..MODULE$.equals(var12)) {
                                    label58: {
                                       Names.TermName var10000 = this.name;
                                       if (var10000 == null) {
                                          if (meth != null) {
                                             break label58;
                                          }
                                       } else if (!var10000.equals(meth)) {
                                          break label58;
                                       }

                                       if (var7.hasAttachment(scala.reflect.ClassTag..MODULE$.apply(StdAttachments.ForAttachment$.class))) {
                                          return new Some(new Tuple2(lhs, f));
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            if (tree != null) {
               Some var16 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnForCombination$$$outer().SyntacticApplied().unapply(tree);
               if (!var16.isEmpty()) {
                  Trees.Tree var17 = (Trees.Tree)((Tuple2)var16.value())._1();
                  List var18 = (List)((Tuple2)var16.value())._2();
                  if (var17 != null) {
                     Option var19 = this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnForCombination$$$outer().SyntacticTypeApplied().unapply(var17);
                     if (!var19.isEmpty()) {
                        Trees.Tree sel = (Trees.Tree)((Tuple2)var19.get())._1();
                        if (sel instanceof Trees.Select) {
                           Trees.Select var21 = (Trees.Select)sel;
                           Trees.Tree lhs = var21.qualifier();
                           Names.Name meth = var21.name();
                           if (var18 instanceof scala.collection.immutable..colon.colon) {
                              scala.collection.immutable..colon.colon var24 = (scala.collection.immutable..colon.colon)var18;
                              List var25 = (List)var24.head();
                              List var26 = var24.next$access$1();
                              if (var25 instanceof scala.collection.immutable..colon.colon) {
                                 scala.collection.immutable..colon.colon var27 = (scala.collection.immutable..colon.colon)var25;
                                 Trees.Tree f = (Trees.Tree)var27.head();
                                 List var29 = var27.next$access$1();
                                 if (scala.collection.immutable.Nil..MODULE$.equals(var29) && var26 instanceof scala.collection.immutable..colon.colon) {
                                    List var30 = ((scala.collection.immutable..colon.colon)var26).next$access$1();
                                    if (scala.collection.immutable.Nil..MODULE$.equals(var30)) {
                                       Names.TermName var31 = this.name;
                                       if (var31 == null) {
                                          if (meth != null) {
                                             return scala.None..MODULE$;
                                          }
                                       } else if (!var31.equals(meth)) {
                                          return scala.None..MODULE$;
                                       }

                                       if (var21.hasAttachment(scala.reflect.ClassTag..MODULE$.apply(StdAttachments.ForAttachment$.class))) {
                                          return new Some(new Tuple2(lhs, f));
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         // $FF: synthetic method
         public ReificationSupportImpl scala$reflect$internal$ReificationSupport$ReificationSupportImpl$UnForCombination$$$outer() {
            return this.$outer;
         }

         public UnForCombination(final Names.TermName name) {
            this.name = name;
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class UnMap$ extends UnForCombination {
         public UnMap$() {
            super(ReificationSupportImpl.this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().map());
         }
      }

      public class UnForeach$ extends UnForCombination {
         public UnForeach$() {
            super(ReificationSupportImpl.this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().foreach());
         }
      }

      public class UnFlatMap$ extends UnForCombination {
         public UnFlatMap$() {
            super(ReificationSupportImpl.this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().flatMap());
         }
      }

      public class UnFor$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Option unapply(final Trees.Tree tree) {
            Object var10000;
            if (tree != null) {
               Option var2 = this.$outer.UnFlatMap().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)((Tuple2)var2.get())._1();
                  Trees.Tree var4 = (Trees.Tree)((Tuple2)var2.get())._2();
                  if (var3 != null) {
                     Some var5 = this.$outer.UnFilter().unapply(var3);
                     if (!var5.isEmpty()) {
                        Trees.Tree rhs = (Trees.Tree)((Tuple2)var5.value())._1();
                        List filters = (List)((Tuple2)var5.value())._2();
                        if (var4 != null) {
                           Option var8 = this.$outer.UnClosure().unapply(var4);
                           if (!var8.isEmpty()) {
                              Trees.Tree pat = (Trees.Tree)((Tuple2)var8.get())._1();
                              Trees.Tree var10 = (Trees.Tree)((Tuple2)var8.get())._2();
                              if (var10 != null) {
                                 Option var11 = this.$outer.UnFor().unapply(var10);
                                 if (!var11.isEmpty()) {
                                    List rest = (List)((Tuple2)var11.get())._1();
                                    Trees.Tree body = (Trees.Tree)((Tuple2)var11.get())._2();
                                    var10000 = new Some(new Tuple3(new Tuple2(pat, rhs), rest.$colon$colon$colon(filters), body));
                                    return ((Option)var10000).flatMap((x0$1) -> {
                                       if (x0$1 != null) {
                                          Tuple2 var2 = (Tuple2)x0$1._1();
                                          List outerRest = (List)x0$1._2();
                                          Trees.Tree fbody = (Trees.Tree)x0$1._3();
                                          if (var2 != null) {
                                             Trees.Tree var6;
                                             boolean var10000;
                                             label81: {
                                                Trees.Tree var5 = (Trees.Tree)var2._1();
                                                var6 = (Trees.Tree)var2._2();
                                                if (var5 instanceof Trees.Bind) {
                                                   Trees.Tree var7 = ((Trees.Bind)var5).body();
                                                   if (var7 != null && !this.$outer.SyntacticTuple().unapply(var7).isEmpty()) {
                                                      var10000 = true;
                                                      break label81;
                                                   }
                                                }

                                                var10000 = var5 != null && !this.$outer.SyntacticTuple().unapply(var5).isEmpty();
                                             }

                                             if (var10000 && var6 != null) {
                                                Option var8 = this.$outer.UnFor().unapply(var6);
                                                if (!var8.isEmpty()) {
                                                   List var9 = (List)((Tuple2)var8.get())._1();
                                                   Trees.Tree var10 = (Trees.Tree)((Tuple2)var8.get())._2();
                                                   if (var9 instanceof scala.collection.immutable..colon.colon) {
                                                      scala.collection.immutable..colon.colon var11 = (scala.collection.immutable..colon.colon)var9;
                                                      Trees.Tree var12 = (Trees.Tree)var11.head();
                                                      List innerRest = var11.next$access$1();
                                                      if (var12 != null) {
                                                         Option var14 = this.$outer.SyntacticValFrom().unapply(var12);
                                                         if (!var14.isEmpty()) {
                                                            Trees.Tree pat = (Trees.Tree)((Tuple2)var14.get())._1();
                                                            Trees.Tree rhs = (Trees.Tree)((Tuple2)var14.get())._2();
                                                            if (var10 != null) {
                                                               Option var17 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().Yield().unapply(var10);
                                                               if (!var17.isEmpty()) {
                                                                  Trees.Tree var18 = (Trees.Tree)var17.get();
                                                                  if (var18 != null) {
                                                                     Option var19 = this.$outer.UnPatSeqWithRes().unapply(var18);
                                                                     if (!var19.isEmpty()) {
                                                                        List pats = (List)((Tuple2)var19.get())._1();
                                                                        if (pats == null) {
                                                                           throw null;
                                                                        }

                                                                        Object var42;
                                                                        if (pats == scala.collection.immutable.Nil..MODULE$) {
                                                                           var42 = scala.collection.immutable.Nil..MODULE$;
                                                                        } else {
                                                                           Tuple2 var34 = (Tuple2)pats.head();
                                                                           scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$unapply$14(this, var34), scala.collection.immutable.Nil..MODULE$);
                                                                           scala.collection.immutable..colon.colon map_t = map_h;

                                                                           for(List map_rest = (List)pats.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                                                                              var34 = (Tuple2)map_rest.head();
                                                                              scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$unapply$14(this, var34), scala.collection.immutable.Nil..MODULE$);
                                                                              map_t.next_$eq(map_nx);
                                                                              map_t = map_nx;
                                                                           }

                                                                           Statics.releaseFence();
                                                                           var42 = map_h;
                                                                        }

                                                                        Object var35 = null;
                                                                        Object var36 = null;
                                                                        Object var37 = null;
                                                                        Object var38 = null;
                                                                        List valeqs = (List)var42;
                                                                        Some var43 = new Some;
                                                                        Tuple2 var44 = new Tuple2;
                                                                        Trees.Tree var22 = this.$outer.SyntacticValFrom().apply(pat, rhs);
                                                                        List var10004 = outerRest.$colon$colon$colon(valeqs).$colon$colon$colon(innerRest);
                                                                        if (var10004 == null) {
                                                                           throw null;
                                                                        }

                                                                        List $colon$colon_this = var10004;
                                                                        scala.collection.immutable..colon.colon var45 = new scala.collection.immutable..colon.colon(var22, $colon$colon_this);
                                                                        Object var39 = null;
                                                                        var44.<init>(var45, fbody);
                                                                        var43.<init>(var44);
                                                                        return var43;
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }

                                       if (x0$1 != null) {
                                          Tuple2 var23 = (Tuple2)x0$1._1();
                                          List filters = (List)x0$1._2();
                                          Trees.Tree body = (Trees.Tree)x0$1._3();
                                          if (var23 != null) {
                                             Trees.Tree pat = (Trees.Tree)var23._1();
                                             Trees.Tree rhs = (Trees.Tree)var23._2();
                                             Some var41 = new Some;
                                             Tuple2 var10002 = new Tuple2;
                                             Trees.Tree var28 = this.$outer.SyntacticValFrom().apply(pat, rhs);
                                             if (filters == null) {
                                                throw null;
                                             }

                                             var10002.<init>(new scala.collection.immutable..colon.colon(var28, filters), body);
                                             var41.<init>(var10002);
                                             return var41;
                                          }
                                       }

                                       throw new MatchError(x0$1);
                                    });
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            if (tree != null) {
               Option var14 = this.$outer.UnForeach().unapply(tree);
               if (!var14.isEmpty()) {
                  Trees.Tree var15 = (Trees.Tree)((Tuple2)var14.get())._1();
                  Trees.Tree var16 = (Trees.Tree)((Tuple2)var14.get())._2();
                  if (var15 != null) {
                     Some var17 = this.$outer.UnFilter().unapply(var15);
                     if (!var17.isEmpty()) {
                        Trees.Tree rhs = (Trees.Tree)((Tuple2)var17.value())._1();
                        List filters = (List)((Tuple2)var17.value())._2();
                        if (var16 != null) {
                           Option var20 = this.$outer.UnClosure().unapply(var16);
                           if (!var20.isEmpty()) {
                              Trees.Tree pat = (Trees.Tree)((Tuple2)var20.get())._1();
                              Trees.Tree var22 = (Trees.Tree)((Tuple2)var20.get())._2();
                              if (var22 != null) {
                                 Option var23 = this.$outer.UnFor().unapply(var22);
                                 if (!var23.isEmpty()) {
                                    List rest = (List)((Tuple2)var23.get())._1();
                                    Trees.Tree body = (Trees.Tree)((Tuple2)var23.get())._2();
                                    var10000 = new Some(new Tuple3(new Tuple2(pat, rhs), rest.$colon$colon$colon(filters), body));
                                    return ((Option)var10000).flatMap((x0$1) -> {
                                       if (x0$1 != null) {
                                          Tuple2 var2 = (Tuple2)x0$1._1();
                                          List outerRest = (List)x0$1._2();
                                          Trees.Tree fbody = (Trees.Tree)x0$1._3();
                                          if (var2 != null) {
                                             Trees.Tree var6;
                                             boolean var10000;
                                             label81: {
                                                Trees.Tree var5 = (Trees.Tree)var2._1();
                                                var6 = (Trees.Tree)var2._2();
                                                if (var5 instanceof Trees.Bind) {
                                                   Trees.Tree var7 = ((Trees.Bind)var5).body();
                                                   if (var7 != null && !this.$outer.SyntacticTuple().unapply(var7).isEmpty()) {
                                                      var10000 = true;
                                                      break label81;
                                                   }
                                                }

                                                var10000 = var5 != null && !this.$outer.SyntacticTuple().unapply(var5).isEmpty();
                                             }

                                             if (var10000 && var6 != null) {
                                                Option var8 = this.$outer.UnFor().unapply(var6);
                                                if (!var8.isEmpty()) {
                                                   List var9 = (List)((Tuple2)var8.get())._1();
                                                   Trees.Tree var10 = (Trees.Tree)((Tuple2)var8.get())._2();
                                                   if (var9 instanceof scala.collection.immutable..colon.colon) {
                                                      scala.collection.immutable..colon.colon var11 = (scala.collection.immutable..colon.colon)var9;
                                                      Trees.Tree var12 = (Trees.Tree)var11.head();
                                                      List innerRest = var11.next$access$1();
                                                      if (var12 != null) {
                                                         Option var14 = this.$outer.SyntacticValFrom().unapply(var12);
                                                         if (!var14.isEmpty()) {
                                                            Trees.Tree pat = (Trees.Tree)((Tuple2)var14.get())._1();
                                                            Trees.Tree rhs = (Trees.Tree)((Tuple2)var14.get())._2();
                                                            if (var10 != null) {
                                                               Option var17 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().Yield().unapply(var10);
                                                               if (!var17.isEmpty()) {
                                                                  Trees.Tree var18 = (Trees.Tree)var17.get();
                                                                  if (var18 != null) {
                                                                     Option var19 = this.$outer.UnPatSeqWithRes().unapply(var18);
                                                                     if (!var19.isEmpty()) {
                                                                        List pats = (List)((Tuple2)var19.get())._1();
                                                                        if (pats == null) {
                                                                           throw null;
                                                                        }

                                                                        Object var42;
                                                                        if (pats == scala.collection.immutable.Nil..MODULE$) {
                                                                           var42 = scala.collection.immutable.Nil..MODULE$;
                                                                        } else {
                                                                           Tuple2 var34 = (Tuple2)pats.head();
                                                                           scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$unapply$14(this, var34), scala.collection.immutable.Nil..MODULE$);
                                                                           scala.collection.immutable..colon.colon map_t = map_h;

                                                                           for(List map_rest = (List)pats.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                                                                              var34 = (Tuple2)map_rest.head();
                                                                              scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$unapply$14(this, var34), scala.collection.immutable.Nil..MODULE$);
                                                                              map_t.next_$eq(map_nx);
                                                                              map_t = map_nx;
                                                                           }

                                                                           Statics.releaseFence();
                                                                           var42 = map_h;
                                                                        }

                                                                        Object var35 = null;
                                                                        Object var36 = null;
                                                                        Object var37 = null;
                                                                        Object var38 = null;
                                                                        List valeqs = (List)var42;
                                                                        Some var43 = new Some;
                                                                        Tuple2 var44 = new Tuple2;
                                                                        Trees.Tree var22 = this.$outer.SyntacticValFrom().apply(pat, rhs);
                                                                        List var10004 = outerRest.$colon$colon$colon(valeqs).$colon$colon$colon(innerRest);
                                                                        if (var10004 == null) {
                                                                           throw null;
                                                                        }

                                                                        List $colon$colon_this = var10004;
                                                                        scala.collection.immutable..colon.colon var45 = new scala.collection.immutable..colon.colon(var22, $colon$colon_this);
                                                                        Object var39 = null;
                                                                        var44.<init>(var45, fbody);
                                                                        var43.<init>(var44);
                                                                        return var43;
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }

                                       if (x0$1 != null) {
                                          Tuple2 var23 = (Tuple2)x0$1._1();
                                          List filters = (List)x0$1._2();
                                          Trees.Tree body = (Trees.Tree)x0$1._3();
                                          if (var23 != null) {
                                             Trees.Tree pat = (Trees.Tree)var23._1();
                                             Trees.Tree rhs = (Trees.Tree)var23._2();
                                             Some var41 = new Some;
                                             Tuple2 var10002 = new Tuple2;
                                             Trees.Tree var28 = this.$outer.SyntacticValFrom().apply(pat, rhs);
                                             if (filters == null) {
                                                throw null;
                                             }

                                             var10002.<init>(new scala.collection.immutable..colon.colon(var28, filters), body);
                                             var41.<init>(var10002);
                                             return var41;
                                          }
                                       }

                                       throw new MatchError(x0$1);
                                    });
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            if (tree != null) {
               Option var26 = this.$outer.UnMap().unapply(tree);
               if (!var26.isEmpty()) {
                  Trees.Tree var27 = (Trees.Tree)((Tuple2)var26.get())._1();
                  Trees.Tree var28 = (Trees.Tree)((Tuple2)var26.get())._2();
                  if (var27 != null) {
                     Some var29 = this.$outer.UnFilter().unapply(var27);
                     if (!var29.isEmpty()) {
                        Trees.Tree rhs = (Trees.Tree)((Tuple2)var29.value())._1();
                        List filters = (List)((Tuple2)var29.value())._2();
                        if (var28 != null) {
                           Option var32 = this.$outer.UnClosure().unapply(var28);
                           if (!var32.isEmpty()) {
                              Trees.Tree pat = (Trees.Tree)((Tuple2)var32.get())._1();
                              Trees.Tree cbody = (Trees.Tree)((Tuple2)var32.get())._2();
                              var10000 = new Some(new Tuple3(new Tuple2(pat, rhs), filters, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().Yield().apply(cbody)));
                              return ((Option)var10000).flatMap((x0$1) -> {
                                 if (x0$1 != null) {
                                    Tuple2 var2 = (Tuple2)x0$1._1();
                                    List outerRest = (List)x0$1._2();
                                    Trees.Tree fbody = (Trees.Tree)x0$1._3();
                                    if (var2 != null) {
                                       Trees.Tree var6;
                                       boolean var10000;
                                       label81: {
                                          Trees.Tree var5 = (Trees.Tree)var2._1();
                                          var6 = (Trees.Tree)var2._2();
                                          if (var5 instanceof Trees.Bind) {
                                             Trees.Tree var7 = ((Trees.Bind)var5).body();
                                             if (var7 != null && !this.$outer.SyntacticTuple().unapply(var7).isEmpty()) {
                                                var10000 = true;
                                                break label81;
                                             }
                                          }

                                          var10000 = var5 != null && !this.$outer.SyntacticTuple().unapply(var5).isEmpty();
                                       }

                                       if (var10000 && var6 != null) {
                                          Option var8 = this.$outer.UnFor().unapply(var6);
                                          if (!var8.isEmpty()) {
                                             List var9 = (List)((Tuple2)var8.get())._1();
                                             Trees.Tree var10 = (Trees.Tree)((Tuple2)var8.get())._2();
                                             if (var9 instanceof scala.collection.immutable..colon.colon) {
                                                scala.collection.immutable..colon.colon var11 = (scala.collection.immutable..colon.colon)var9;
                                                Trees.Tree var12 = (Trees.Tree)var11.head();
                                                List innerRest = var11.next$access$1();
                                                if (var12 != null) {
                                                   Option var14 = this.$outer.SyntacticValFrom().unapply(var12);
                                                   if (!var14.isEmpty()) {
                                                      Trees.Tree pat = (Trees.Tree)((Tuple2)var14.get())._1();
                                                      Trees.Tree rhs = (Trees.Tree)((Tuple2)var14.get())._2();
                                                      if (var10 != null) {
                                                         Option var17 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().Yield().unapply(var10);
                                                         if (!var17.isEmpty()) {
                                                            Trees.Tree var18 = (Trees.Tree)var17.get();
                                                            if (var18 != null) {
                                                               Option var19 = this.$outer.UnPatSeqWithRes().unapply(var18);
                                                               if (!var19.isEmpty()) {
                                                                  List pats = (List)((Tuple2)var19.get())._1();
                                                                  if (pats == null) {
                                                                     throw null;
                                                                  }

                                                                  Object var42;
                                                                  if (pats == scala.collection.immutable.Nil..MODULE$) {
                                                                     var42 = scala.collection.immutable.Nil..MODULE$;
                                                                  } else {
                                                                     Tuple2 var34 = (Tuple2)pats.head();
                                                                     scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$unapply$14(this, var34), scala.collection.immutable.Nil..MODULE$);
                                                                     scala.collection.immutable..colon.colon map_t = map_h;

                                                                     for(List map_rest = (List)pats.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                                                                        var34 = (Tuple2)map_rest.head();
                                                                        scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$unapply$14(this, var34), scala.collection.immutable.Nil..MODULE$);
                                                                        map_t.next_$eq(map_nx);
                                                                        map_t = map_nx;
                                                                     }

                                                                     Statics.releaseFence();
                                                                     var42 = map_h;
                                                                  }

                                                                  Object var35 = null;
                                                                  Object var36 = null;
                                                                  Object var37 = null;
                                                                  Object var38 = null;
                                                                  List valeqs = (List)var42;
                                                                  Some var43 = new Some;
                                                                  Tuple2 var44 = new Tuple2;
                                                                  Trees.Tree var22 = this.$outer.SyntacticValFrom().apply(pat, rhs);
                                                                  List var10004 = outerRest.$colon$colon$colon(valeqs).$colon$colon$colon(innerRest);
                                                                  if (var10004 == null) {
                                                                     throw null;
                                                                  }

                                                                  List $colon$colon_this = var10004;
                                                                  scala.collection.immutable..colon.colon var45 = new scala.collection.immutable..colon.colon(var22, $colon$colon_this);
                                                                  Object var39 = null;
                                                                  var44.<init>(var45, fbody);
                                                                  var43.<init>(var44);
                                                                  return var43;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }

                                 if (x0$1 != null) {
                                    Tuple2 var23 = (Tuple2)x0$1._1();
                                    List filters = (List)x0$1._2();
                                    Trees.Tree body = (Trees.Tree)x0$1._3();
                                    if (var23 != null) {
                                       Trees.Tree pat = (Trees.Tree)var23._1();
                                       Trees.Tree rhs = (Trees.Tree)var23._2();
                                       Some var41 = new Some;
                                       Tuple2 var10002 = new Tuple2;
                                       Trees.Tree var28 = this.$outer.SyntacticValFrom().apply(pat, rhs);
                                       if (filters == null) {
                                          throw null;
                                       }

                                       var10002.<init>(new scala.collection.immutable..colon.colon(var28, filters), body);
                                       var41.<init>(var10002);
                                       return var41;
                                    }
                                 }

                                 throw new MatchError(x0$1);
                              });
                           }
                        }
                     }
                  }
               }
            }

            if (tree != null) {
               Option var35 = this.$outer.UnForeach().unapply(tree);
               if (!var35.isEmpty()) {
                  Trees.Tree var36 = (Trees.Tree)((Tuple2)var35.get())._1();
                  Trees.Tree var37 = (Trees.Tree)((Tuple2)var35.get())._2();
                  if (var36 != null) {
                     Some var38 = this.$outer.UnFilter().unapply(var36);
                     if (!var38.isEmpty()) {
                        Trees.Tree rhs = (Trees.Tree)((Tuple2)var38.value())._1();
                        List filters = (List)((Tuple2)var38.value())._2();
                        if (var37 != null) {
                           Option var41 = this.$outer.UnClosure().unapply(var37);
                           if (!var41.isEmpty()) {
                              Trees.Tree pat = (Trees.Tree)((Tuple2)var41.get())._1();
                              Trees.Tree cbody = (Trees.Tree)((Tuple2)var41.get())._2();
                              var10000 = new Some(new Tuple3(new Tuple2(pat, rhs), filters, cbody));
                              return ((Option)var10000).flatMap((x0$1) -> {
                                 if (x0$1 != null) {
                                    Tuple2 var2 = (Tuple2)x0$1._1();
                                    List outerRest = (List)x0$1._2();
                                    Trees.Tree fbody = (Trees.Tree)x0$1._3();
                                    if (var2 != null) {
                                       Trees.Tree var6;
                                       boolean var10000;
                                       label81: {
                                          Trees.Tree var5 = (Trees.Tree)var2._1();
                                          var6 = (Trees.Tree)var2._2();
                                          if (var5 instanceof Trees.Bind) {
                                             Trees.Tree var7 = ((Trees.Bind)var5).body();
                                             if (var7 != null && !this.$outer.SyntacticTuple().unapply(var7).isEmpty()) {
                                                var10000 = true;
                                                break label81;
                                             }
                                          }

                                          var10000 = var5 != null && !this.$outer.SyntacticTuple().unapply(var5).isEmpty();
                                       }

                                       if (var10000 && var6 != null) {
                                          Option var8 = this.$outer.UnFor().unapply(var6);
                                          if (!var8.isEmpty()) {
                                             List var9 = (List)((Tuple2)var8.get())._1();
                                             Trees.Tree var10 = (Trees.Tree)((Tuple2)var8.get())._2();
                                             if (var9 instanceof scala.collection.immutable..colon.colon) {
                                                scala.collection.immutable..colon.colon var11 = (scala.collection.immutable..colon.colon)var9;
                                                Trees.Tree var12 = (Trees.Tree)var11.head();
                                                List innerRest = var11.next$access$1();
                                                if (var12 != null) {
                                                   Option var14 = this.$outer.SyntacticValFrom().unapply(var12);
                                                   if (!var14.isEmpty()) {
                                                      Trees.Tree pat = (Trees.Tree)((Tuple2)var14.get())._1();
                                                      Trees.Tree rhs = (Trees.Tree)((Tuple2)var14.get())._2();
                                                      if (var10 != null) {
                                                         Option var17 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().Yield().unapply(var10);
                                                         if (!var17.isEmpty()) {
                                                            Trees.Tree var18 = (Trees.Tree)var17.get();
                                                            if (var18 != null) {
                                                               Option var19 = this.$outer.UnPatSeqWithRes().unapply(var18);
                                                               if (!var19.isEmpty()) {
                                                                  List pats = (List)((Tuple2)var19.get())._1();
                                                                  if (pats == null) {
                                                                     throw null;
                                                                  }

                                                                  Object var42;
                                                                  if (pats == scala.collection.immutable.Nil..MODULE$) {
                                                                     var42 = scala.collection.immutable.Nil..MODULE$;
                                                                  } else {
                                                                     Tuple2 var34 = (Tuple2)pats.head();
                                                                     scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$unapply$14(this, var34), scala.collection.immutable.Nil..MODULE$);
                                                                     scala.collection.immutable..colon.colon map_t = map_h;

                                                                     for(List map_rest = (List)pats.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                                                                        var34 = (Tuple2)map_rest.head();
                                                                        scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$unapply$14(this, var34), scala.collection.immutable.Nil..MODULE$);
                                                                        map_t.next_$eq(map_nx);
                                                                        map_t = map_nx;
                                                                     }

                                                                     Statics.releaseFence();
                                                                     var42 = map_h;
                                                                  }

                                                                  Object var35 = null;
                                                                  Object var36 = null;
                                                                  Object var37 = null;
                                                                  Object var38 = null;
                                                                  List valeqs = (List)var42;
                                                                  Some var43 = new Some;
                                                                  Tuple2 var44 = new Tuple2;
                                                                  Trees.Tree var22 = this.$outer.SyntacticValFrom().apply(pat, rhs);
                                                                  List var10004 = outerRest.$colon$colon$colon(valeqs).$colon$colon$colon(innerRest);
                                                                  if (var10004 == null) {
                                                                     throw null;
                                                                  }

                                                                  List $colon$colon_this = var10004;
                                                                  scala.collection.immutable..colon.colon var45 = new scala.collection.immutable..colon.colon(var22, $colon$colon_this);
                                                                  Object var39 = null;
                                                                  var44.<init>(var45, fbody);
                                                                  var43.<init>(var44);
                                                                  return var43;
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }

                                 if (x0$1 != null) {
                                    Tuple2 var23 = (Tuple2)x0$1._1();
                                    List filters = (List)x0$1._2();
                                    Trees.Tree body = (Trees.Tree)x0$1._3();
                                    if (var23 != null) {
                                       Trees.Tree pat = (Trees.Tree)var23._1();
                                       Trees.Tree rhs = (Trees.Tree)var23._2();
                                       Some var41 = new Some;
                                       Tuple2 var10002 = new Tuple2;
                                       Trees.Tree var28 = this.$outer.SyntacticValFrom().apply(pat, rhs);
                                       if (filters == null) {
                                          throw null;
                                       }

                                       var10002.<init>(new scala.collection.immutable..colon.colon(var28, filters), body);
                                       var41.<init>(var10002);
                                       return var41;
                                    }
                                 }

                                 throw new MatchError(x0$1);
                              });
                           }
                        }
                     }
                  }
               }
            }

            var10000 = scala.None..MODULE$;
            return ((Option)var10000).flatMap((x0$1) -> {
               if (x0$1 != null) {
                  Tuple2 var2 = (Tuple2)x0$1._1();
                  List outerRest = (List)x0$1._2();
                  Trees.Tree fbody = (Trees.Tree)x0$1._3();
                  if (var2 != null) {
                     Trees.Tree var6;
                     boolean var10000;
                     label81: {
                        Trees.Tree var5 = (Trees.Tree)var2._1();
                        var6 = (Trees.Tree)var2._2();
                        if (var5 instanceof Trees.Bind) {
                           Trees.Tree var7 = ((Trees.Bind)var5).body();
                           if (var7 != null && !this.$outer.SyntacticTuple().unapply(var7).isEmpty()) {
                              var10000 = true;
                              break label81;
                           }
                        }

                        var10000 = var5 != null && !this.$outer.SyntacticTuple().unapply(var5).isEmpty();
                     }

                     if (var10000 && var6 != null) {
                        Option var8 = this.$outer.UnFor().unapply(var6);
                        if (!var8.isEmpty()) {
                           List var9 = (List)((Tuple2)var8.get())._1();
                           Trees.Tree var10 = (Trees.Tree)((Tuple2)var8.get())._2();
                           if (var9 instanceof scala.collection.immutable..colon.colon) {
                              scala.collection.immutable..colon.colon var11 = (scala.collection.immutable..colon.colon)var9;
                              Trees.Tree var12 = (Trees.Tree)var11.head();
                              List innerRest = var11.next$access$1();
                              if (var12 != null) {
                                 Option var14 = this.$outer.SyntacticValFrom().unapply(var12);
                                 if (!var14.isEmpty()) {
                                    Trees.Tree pat = (Trees.Tree)((Tuple2)var14.get())._1();
                                    Trees.Tree rhs = (Trees.Tree)((Tuple2)var14.get())._2();
                                    if (var10 != null) {
                                       Option var17 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().Yield().unapply(var10);
                                       if (!var17.isEmpty()) {
                                          Trees.Tree var18 = (Trees.Tree)var17.get();
                                          if (var18 != null) {
                                             Option var19 = this.$outer.UnPatSeqWithRes().unapply(var18);
                                             if (!var19.isEmpty()) {
                                                List pats = (List)((Tuple2)var19.get())._1();
                                                if (pats == null) {
                                                   throw null;
                                                }

                                                Object var42;
                                                if (pats == scala.collection.immutable.Nil..MODULE$) {
                                                   var42 = scala.collection.immutable.Nil..MODULE$;
                                                } else {
                                                   Tuple2 var34 = (Tuple2)pats.head();
                                                   scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$unapply$14(this, var34), scala.collection.immutable.Nil..MODULE$);
                                                   scala.collection.immutable..colon.colon map_t = map_h;

                                                   for(List map_rest = (List)pats.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                                                      var34 = (Tuple2)map_rest.head();
                                                      scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$unapply$14(this, var34), scala.collection.immutable.Nil..MODULE$);
                                                      map_t.next_$eq(map_nx);
                                                      map_t = map_nx;
                                                   }

                                                   Statics.releaseFence();
                                                   var42 = map_h;
                                                }

                                                Object var35 = null;
                                                Object var36 = null;
                                                Object var37 = null;
                                                Object var38 = null;
                                                List valeqs = (List)var42;
                                                Some var43 = new Some;
                                                Tuple2 var44 = new Tuple2;
                                                Trees.Tree var22 = this.$outer.SyntacticValFrom().apply(pat, rhs);
                                                List var10004 = outerRest.$colon$colon$colon(valeqs).$colon$colon$colon(innerRest);
                                                if (var10004 == null) {
                                                   throw null;
                                                }

                                                List $colon$colon_this = var10004;
                                                scala.collection.immutable..colon.colon var45 = new scala.collection.immutable..colon.colon(var22, $colon$colon_this);
                                                Object var39 = null;
                                                var44.<init>(var45, fbody);
                                                var43.<init>(var44);
                                                return var43;
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }

               if (x0$1 != null) {
                  Tuple2 var23 = (Tuple2)x0$1._1();
                  List filters = (List)x0$1._2();
                  Trees.Tree body = (Trees.Tree)x0$1._3();
                  if (var23 != null) {
                     Trees.Tree pat = (Trees.Tree)var23._1();
                     Trees.Tree rhs = (Trees.Tree)var23._2();
                     Some var41 = new Some;
                     Tuple2 var10002 = new Tuple2;
                     Trees.Tree var28 = this.$outer.SyntacticValFrom().apply(pat, rhs);
                     if (filters == null) {
                        throw null;
                     }

                     var10002.<init>(new scala.collection.immutable..colon.colon(var28, filters), body);
                     var41.<init>(var10002);
                     return var41;
                  }
               }

               throw new MatchError(x0$1);
            });
         }

         // $FF: synthetic method
         public static final Trees.Tree $anonfun$unapply$14(final UnFor$ $this, final Tuple2 x0$2) {
            if (x0$2 != null) {
               Trees.Tree pat = (Trees.Tree)x0$2._1();
               Trees.Tree rhs = (Trees.Tree)x0$2._2();
               return $this.$outer.SyntacticValEq().apply(pat, rhs);
            } else {
               throw new MatchError((Object)null);
            }
         }

         public UnFor$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }

         // $FF: synthetic method
         private static Object $deserializeLambda$(SerializedLambda var0) {
            return var0.lambdaDeserialize<invokedynamic>(var0);
         }
      }

      public class SyntacticFor$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticForExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final List enums, final Trees.Tree body) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkFor(this.$outer.mkEnumerators(enums), body, this.$outer.fresh());
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Option var2 = this.$outer.UnFor().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)((Tuple2)var2.get())._2();
                  if (var3 != null && !this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().Yield().unapply(var3).isEmpty()) {
                     return scala.None..MODULE$;
                  }
               }
            }

            if (tree != null) {
               Option var4 = this.$outer.UnFor().unapply(tree);
               if (!var4.isEmpty()) {
                  List enums = (List)((Tuple2)var4.get())._1();
                  Trees.Tree body = (Trees.Tree)((Tuple2)var4.get())._2();
                  return new Some(new Tuple2(enums, body));
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticFor$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticForYield$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticForExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Tree apply(final List enums, final Trees.Tree body) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkFor(this.$outer.mkEnumerators(enums), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().Yield().apply(body), this.$outer.fresh());
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Option var2 = this.$outer.UnFor().unapply(tree);
               if (!var2.isEmpty()) {
                  List enums = (List)((Tuple2)var2.get())._1();
                  Trees.Tree var4 = (Trees.Tree)((Tuple2)var2.get())._2();
                  if (var4 != null) {
                     Option var5 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().Yield().unapply(var4);
                     if (!var5.isEmpty()) {
                        Trees.Tree body = (Trees.Tree)var5.get();
                        return new Some(new Tuple2(enums, body));
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticForYield$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class MaybeTypeTreeOriginal$ {
         public Some unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.TypeTree) {
               Trees.TypeTree var2 = (Trees.TypeTree)tree;
               return new Some(var2.original());
            } else {
               return new Some(tree);
            }
         }
      }

      public class MaybeSelectApply$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Some unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Select) {
               Trees.Select var2 = (Trees.Select)tree;
               Trees.Tree f = var2.qualifier();
               Names.Name var4 = var2.name();
               Names.TermName var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().apply();
               if (var10000 == null) {
                  if (var4 == null) {
                     return new Some(f);
                  }
               } else if (var10000.equals(var4)) {
                  return new Some(f);
               }
            }

            return new Some(tree);
         }

         public MaybeSelectApply$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class MaybeUnchecked$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Some unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Annotated) {
               Trees.Annotated var2 = (Trees.Annotated)tree;
               Trees.Tree var3 = var2.annot();
               Trees.Tree annottee = var2.arg();
               if (var3 != null) {
                  Option var5 = this.$outer.SyntacticNew().unapply(var3);
                  if (!var5.isEmpty()) {
                     List var6 = (List)((Tuple4)var5.get())._1();
                     List var7 = (List)((Tuple4)var5.get())._2();
                     Trees.ValDef var8 = (Trees.ValDef)((Tuple4)var5.get())._3();
                     List var9 = (List)((Tuple4)var5.get())._4();
                     if (scala.collection.immutable.Nil..MODULE$.equals(var6) && var7 instanceof scala.collection.immutable..colon.colon) {
                        scala.collection.immutable..colon.colon var10 = (scala.collection.immutable..colon.colon)var7;
                        Trees.Tree var11 = (Trees.Tree)var10.head();
                        List var12 = var10.next$access$1();
                        if (var11 != null) {
                           Option var13 = this.$outer.ScalaDot().unapply(var11);
                           if (!var13.isEmpty()) {
                              label64: {
                                 Names.Name var14 = (Names.Name)var13.get();
                                 Names.TypeName var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().tpnme().unchecked();
                                 if (var10000 == null) {
                                    if (var14 != null) {
                                       break label64;
                                    }
                                 } else if (!var10000.equals(var14)) {
                                    break label64;
                                 }

                                 if (scala.collection.immutable.Nil..MODULE$.equals(var12) && this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().noSelfType().equals(var8) && scala.collection.immutable.Nil..MODULE$.equals(var9)) {
                                    return new Some(annottee);
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            if (tree instanceof Trees.Typed) {
               Trees.Typed var15 = (Trees.Typed)tree;
               Trees.Tree annottee = var15.expr();
               Trees.Tree var17 = var15.tpt();
               if (var17 != null) {
                  Some var18 = this.$outer.MaybeTypeTreeOriginal().unapply(var17);
                  if (!var18.isEmpty()) {
                     Trees.Tree var19 = (Trees.Tree)var18.value();
                     if (var19 instanceof Trees.Annotated) {
                        Trees.Tree var20 = ((Trees.Annotated)var19).annot();
                        if (var20 != null) {
                           Option var21 = this.$outer.SyntacticNew().unapply(var20);
                           if (!var21.isEmpty()) {
                              List var22 = (List)((Tuple4)var21.get())._1();
                              List var23 = (List)((Tuple4)var21.get())._2();
                              Trees.ValDef var24 = (Trees.ValDef)((Tuple4)var21.get())._3();
                              List var25 = (List)((Tuple4)var21.get())._4();
                              if (scala.collection.immutable.Nil..MODULE$.equals(var22) && var23 instanceof scala.collection.immutable..colon.colon) {
                                 scala.collection.immutable..colon.colon var26 = (scala.collection.immutable..colon.colon)var23;
                                 Trees.Tree var27 = (Trees.Tree)var26.head();
                                 List var28 = var26.next$access$1();
                                 if (var27 != null) {
                                    Option var29 = this.$outer.ScalaDot().unapply(var27);
                                    if (!var29.isEmpty()) {
                                       Names.Name var30 = (Names.Name)var29.get();
                                       Names.TypeName var31 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().tpnme().unchecked();
                                       if (var31 == null) {
                                          if (var30 != null) {
                                             return new Some(tree);
                                          }
                                       } else if (!var31.equals(var30)) {
                                          return new Some(tree);
                                       }

                                       if (scala.collection.immutable.Nil..MODULE$.equals(var28) && this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().noSelfType().equals(var24) && scala.collection.immutable.Nil..MODULE$.equals(var25)) {
                                          return new Some(annottee);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            return new Some(tree);
         }

         public MaybeUnchecked$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class MaybeTyped$ {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Some unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Typed) {
               Trees.Typed var2 = (Trees.Typed)tree;
               Trees.Tree v = var2.expr();
               Trees.Tree tpt = var2.tpt();
               return new Some(new Tuple2(v, tpt));
            } else {
               return new Some(new Tuple2(tree, this.$outer.SyntacticEmptyTypeTree().apply()));
            }
         }

         public MaybeTyped$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticPartialFunction$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticPartialFunctionExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Match apply(final List cases) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Match(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree(), this.$outer.mkCases(cases));
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Match) {
               Trees.Match var2 = (Trees.Match)tree;
               Trees.Tree var3 = var2.selector();
               List cases = var2.cases();
               if (this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().EmptyTree().equals(var3)) {
                  return new Some(cases);
               }
            }

            if (tree instanceof Trees.Typed) {
               Trees.Typed var5 = (Trees.Typed)tree;
               Trees.Tree var6 = var5.expr();
               Trees.Tree pf = var5.tpt();
               if (var6 instanceof Trees.Block) {
                  Trees.Block var8 = (Trees.Block)var6;
                  List var9 = var8.stats();
                  Trees.Tree var10 = var8.expr();
                  if (var9 != null) {
                     List var10000 = scala.package..MODULE$.List();
                     if (var10000 == null) {
                        throw null;
                     }

                     List unapplySeq_this = var10000;
                     SeqOps var71 = SeqFactory.unapplySeq$(unapplySeq_this, var9);
                     Object var67 = null;
                     SeqOps var11 = var71;
                     SeqFactory.UnapplySeqWrapper var72 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                     SeqFactory.UnapplySeqWrapper var10001 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                     new SeqFactory.UnapplySeqWrapper(var11);
                     var72 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                     var72 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                     int lengthCompare$extension_len = 1;
                     if (var11.lengthCompare(lengthCompare$extension_len) == 0) {
                        var72 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                        var72 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                        int apply$extension_i = 0;
                        Trees.Tree var12 = (Trees.Tree)var11.apply(apply$extension_i);
                        if (var12 instanceof Trees.ClassDef) {
                           Trees.ClassDef var13 = (Trees.ClassDef)var12;
                           Trees.Modifiers clsMods = var13.mods();
                           Names.TypeName var15 = var13.name();
                           List var16 = var13.tparams();
                           Trees.Template var17 = var13.impl();
                           Names.Name var77 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().tpnme().ANON_FUN_NAME();
                           if (var77 == null) {
                              if (var15 != null) {
                                 return scala.None..MODULE$;
                              }
                           } else if (!var77.equals(var15)) {
                              return scala.None..MODULE$;
                           }

                           if (scala.collection.immutable.Nil..MODULE$.equals(var16) && var17 != null) {
                              List var18 = var17.parents();
                              Trees.ValDef var19 = var17.self();
                              List var20 = var17.body();
                              if (var18 != null) {
                                 List var78 = scala.package..MODULE$.List();
                                 if (var78 == null) {
                                    throw null;
                                 }

                                 List unapplySeq_this = var78;
                                 SeqOps var79 = SeqFactory.unapplySeq$(unapplySeq_this, var18);
                                 Object var68 = null;
                                 SeqOps var21 = var79;
                                 SeqFactory.UnapplySeqWrapper var80 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                 var10001 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                 new SeqFactory.UnapplySeqWrapper(var21);
                                 var80 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                 var80 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                 int lengthCompare$extension_len = 2;
                                 if (var21.lengthCompare(lengthCompare$extension_len) == 0) {
                                    var80 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                    var80 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                    int apply$extension_i = 0;
                                    Trees.Tree abspf = (Trees.Tree)var21.apply(apply$extension_i);
                                    var80 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                    var80 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                    int apply$extension_i = 1;
                                    Trees.Tree ser = (Trees.Tree)var21.apply(apply$extension_i);
                                    if (abspf instanceof Trees.TypeTree) {
                                       Trees.TypeTree var24 = (Trees.TypeTree)abspf;
                                       if (ser instanceof Trees.TypeTree) {
                                          Trees.TypeTree var25 = (Trees.TypeTree)ser;
                                          if (this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().noSelfType().equals(var19) && var20 != null) {
                                             List var87 = scala.package..MODULE$.List();
                                             if (var87 == null) {
                                                throw null;
                                             }

                                             List unapplySeq_this = var87;
                                             SeqOps var88 = SeqFactory.unapplySeq$(unapplySeq_this, var20);
                                             Object var69 = null;
                                             SeqOps var26 = var88;
                                             SeqFactory.UnapplySeqWrapper var89 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                             var10001 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                             new SeqFactory.UnapplySeqWrapper(var26);
                                             var89 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                             var89 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                             int lengthCompare$extension_len = 3;
                                             if (var26.lengthCompare(lengthCompare$extension_len) == 0) {
                                                var89 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                                var89 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                                int apply$extension_i = 0;
                                                Trees.Tree var27 = (Trees.Tree)var26.apply(apply$extension_i);
                                                var89 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                                var89 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                                int apply$extension_i = 1;
                                                Trees.Tree var28 = (Trees.Tree)var26.apply(apply$extension_i);
                                                var89 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                                var89 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                                int apply$extension_i = 2;
                                                Trees.Tree var29 = (Trees.Tree)var26.apply(apply$extension_i);
                                                if (var27 instanceof Trees.DefDef) {
                                                   Names.TermName var30 = ((Trees.DefDef)var27).name();
                                                   Names.TermName var98 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().CONSTRUCTOR();
                                                   if (var98 == null) {
                                                      if (var30 != null) {
                                                         return scala.None..MODULE$;
                                                      }
                                                   } else if (!var98.equals(var30)) {
                                                      return scala.None..MODULE$;
                                                   }

                                                   if (var28 instanceof Trees.DefDef) {
                                                      Trees.DefDef var31 = (Trees.DefDef)var28;
                                                      Names.TermName var32 = var31.name();
                                                      Trees.Tree var33 = var31.rhs();
                                                      var98 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().applyOrElse();
                                                      if (var98 == null) {
                                                         if (var32 != null) {
                                                            return scala.None..MODULE$;
                                                         }
                                                      } else if (!var98.equals(var32)) {
                                                         return scala.None..MODULE$;
                                                      }

                                                      if (var33 instanceof Trees.Match) {
                                                         List var34 = ((Trees.Match)var33).cases();
                                                         if (var34 != null) {
                                                            Option var35 = scala.package..MODULE$.$colon$plus().unapply(var34);
                                                            if (!var35.isEmpty()) {
                                                               List cases = (List)((Tuple2)var35.get())._1();
                                                               Trees.CaseDef var37 = (Trees.CaseDef)((Tuple2)var35.get())._2();
                                                               if (var37 != null) {
                                                                  Trees.Tree var38 = var37.pat();
                                                                  if (var38 instanceof Trees.Bind) {
                                                                     Trees.Bind var39 = (Trees.Bind)var38;
                                                                     Names.Name var40 = var39.name();
                                                                     Trees.Tree var41 = var39.body();
                                                                     var98 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().DEFAULT_CASE();
                                                                     if (var98 == null) {
                                                                        if (var40 != null) {
                                                                           return scala.None..MODULE$;
                                                                        }
                                                                     } else if (!var98.equals(var40)) {
                                                                        return scala.None..MODULE$;
                                                                     }

                                                                     if (var41 instanceof Trees.Ident) {
                                                                        Names.Name var42 = ((Trees.Ident)var41).name();
                                                                        var98 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().WILDCARD();
                                                                        if (var98 == null) {
                                                                           if (var42 != null) {
                                                                              return scala.None..MODULE$;
                                                                           }
                                                                        } else if (!var98.equals(var42)) {
                                                                           return scala.None..MODULE$;
                                                                        }

                                                                        if (var29 instanceof Trees.DefDef) {
                                                                           Names.TermName var43 = ((Trees.DefDef)var29).name();
                                                                           var98 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().nme().isDefinedAt();
                                                                           if (var98 == null) {
                                                                              if (var43 != null) {
                                                                                 return scala.None..MODULE$;
                                                                              }
                                                                           } else if (!var98.equals(var43)) {
                                                                              return scala.None..MODULE$;
                                                                           }

                                                                           if (var10 instanceof Trees.Apply) {
                                                                              Trees.Apply var44 = (Trees.Apply)var10;
                                                                              Trees.Tree var45 = var44.fun();
                                                                              List var46 = var44.args();
                                                                              if (var45 instanceof Trees.Select) {
                                                                                 Trees.Select var47 = (Trees.Select)var45;
                                                                                 Trees.Tree var48 = var47.qualifier();
                                                                                 Names.Name var49 = var47.name();
                                                                                 if (var48 instanceof Trees.New) {
                                                                                    Trees.Tree var50 = ((Trees.New)var48).tpt();
                                                                                    if (var50 instanceof Trees.Ident) {
                                                                                       Names.Name var51 = ((Trees.Ident)var50).name();
                                                                                       var98 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().tpnme().ANON_FUN_NAME();
                                                                                       if (var98 == null) {
                                                                                          if (var51 != null) {
                                                                                             return scala.None..MODULE$;
                                                                                          }
                                                                                       } else if (!var98.equals(var51)) {
                                                                                          return scala.None..MODULE$;
                                                                                       }

                                                                                       var98 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().termNames().CONSTRUCTOR();
                                                                                       if (var98 == null) {
                                                                                          if (var49 != null) {
                                                                                             return scala.None..MODULE$;
                                                                                          }
                                                                                       } else if (!var98.equals(var49)) {
                                                                                          return scala.None..MODULE$;
                                                                                       }

                                                                                       if (var46 != null) {
                                                                                          List var105 = scala.package..MODULE$.List();
                                                                                          if (var105 == null) {
                                                                                             throw null;
                                                                                          }

                                                                                          List unapplySeq_this = var105;
                                                                                          SeqOps var106 = SeqFactory.unapplySeq$(unapplySeq_this, var46);
                                                                                          Object var70 = null;
                                                                                          SeqOps var52 = var106;
                                                                                          SeqFactory.UnapplySeqWrapper var107 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                                                                          new SeqFactory.UnapplySeqWrapper(scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$.get$extension(var52));
                                                                                          var107 = scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$;
                                                                                          if (scala.collection.SeqFactory.UnapplySeqWrapper..MODULE$.get$extension(var52).lengthCompare(0) == 0 && pf instanceof Trees.TypeTree) {
                                                                                             Trees.TypeTree var53 = (Trees.TypeTree)pf;
                                                                                             if (var53.tpe() != null && var53.tpe().typeSymbol() == this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().PartialFunctionClass() && var24.tpe() != null && var24.tpe().typeSymbol() == this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().AbstractPartialFunctionClass() && var25.tpe() != null && var25.tpe().typeSymbol() == this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().definitions().SerializableClass() && clsMods.hasAllFlags(2097184L)) {
                                                                                                return new Some(cases);
                                                                                             }
                                                                                          }
                                                                                       }
                                                                                    }
                                                                                 }
                                                                              }
                                                                           }
                                                                        }
                                                                     }
                                                                  }
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticPartialFunction$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticMatch$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticMatchExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Match apply(final Trees.Tree scrutinee, final List cases) {
            SymbolTable var10000 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
            boolean require_requirement = scrutinee.nonEmpty();
            if (var10000 == null) {
               throw null;
            } else {
               SymbolTable require_this = var10000;
               if (!require_requirement) {
                  throw require_this.throwRequirementError("match's scrutinee may not be empty");
               } else {
                  require_this = null;
                  return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Match(scrutinee, this.$outer.mkCases(cases));
               }
            }
         }

         public Option unapply(final Trees.Match tree) {
            if (tree != null) {
               Trees.Tree scrutinee = tree.selector();
               List cases = tree.cases();
               if (scrutinee.nonEmpty()) {
                  return new Some(new Tuple2(scrutinee, cases));
               }
            }

            return scala.None..MODULE$;
         }

         // $FF: synthetic method
         public static final String $anonfun$apply$9() {
            return "match's scrutinee may not be empty";
         }

         public SyntacticMatch$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticTry$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticTryExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Try apply(final Trees.Tree block, final List catches, final Trees.Tree finalizer) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Try(block, this.$outer.mkCases(catches), finalizer);
         }

         public Option unapply(final Trees.Try tree) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().Try().unapply(tree);
         }

         public SyntacticTry$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticTermIdent$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticTermIdentExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public boolean apply$default$2() {
            return scala.reflect.api.Internals.ReificationSupportApi.SyntacticTermIdentExtractor.apply$default$2$(this);
         }

         public Trees.Ident apply(final Names.TermName name, final boolean isBackquoted) {
            Trees.Ident id = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Ident(name);
            if (isBackquoted) {
               id.updateAttachment(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().BackquotedIdentifierAttachment(), scala.reflect.ClassTag..MODULE$.apply(StdAttachments.BackquotedIdentifierAttachment$.class));
            }

            return id;
         }

         public Option unapply(final Trees.Ident id) {
            Names.Name var2 = id.name();
            if (var2 instanceof Names.TermName) {
               Names.TermName var3 = (Names.TermName)var2;
               return new Some(new Tuple2(var3, id.hasAttachment(scala.reflect.ClassTag..MODULE$.apply(StdAttachments.BackquotedIdentifierAttachment$.class))));
            } else {
               return scala.None..MODULE$;
            }
         }

         // $FF: synthetic method
         public scala.reflect.api.Internals.ReificationSupportApi scala$reflect$api$Internals$ReificationSupportApi$SyntacticTermIdentExtractor$$$outer() {
            return this.$outer;
         }

         public SyntacticTermIdent$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticTypeIdent$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticTypeIdentExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Ident apply(final Names.TypeName name) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Ident(name);
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.$outer.MaybeTypeTreeOriginal().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)var2.value();
                  if (var3 instanceof Trees.Ident) {
                     Names.Name name = ((Trees.Ident)var3).name();
                     if (name instanceof Names.TypeName) {
                        Names.TypeName var5 = (Names.TypeName)name;
                        return new Some(var5);
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticTypeIdent$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticImport$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticImportExtractor {
         private volatile ReificationSupport$ReificationSupportImpl$SyntacticImport$WildcardSelector$ WildcardSelector$module;
         private volatile ReificationSupport$ReificationSupportImpl$SyntacticImport$NameSelector$ NameSelector$module;
         private volatile ReificationSupport$ReificationSupportImpl$SyntacticImport$RenameSelector$ RenameSelector$module;
         private volatile ReificationSupport$ReificationSupportImpl$SyntacticImport$UnimportSelector$ UnimportSelector$module;
         private volatile ReificationSupport$ReificationSupportImpl$SyntacticImport$WildcardSelectorRepr$ WildcardSelectorRepr$module;
         private volatile ReificationSupport$ReificationSupportImpl$SyntacticImport$NameSelectorRepr$ NameSelectorRepr$module;
         private volatile ReificationSupport$ReificationSupportImpl$SyntacticImport$Arrow$ Arrow$module;
         private volatile ReificationSupport$ReificationSupportImpl$SyntacticImport$RenameSelectorRepr$ RenameSelectorRepr$module;
         private volatile ReificationSupport$ReificationSupportImpl$SyntacticImport$UnimportSelectorRepr$ UnimportSelectorRepr$module;
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         private ReificationSupport$ReificationSupportImpl$SyntacticImport$WildcardSelector$ WildcardSelector() {
            if (this.WildcardSelector$module == null) {
               this.WildcardSelector$lzycompute$1();
            }

            return this.WildcardSelector$module;
         }

         private ReificationSupport$ReificationSupportImpl$SyntacticImport$NameSelector$ NameSelector() {
            if (this.NameSelector$module == null) {
               this.NameSelector$lzycompute$1();
            }

            return this.NameSelector$module;
         }

         private ReificationSupport$ReificationSupportImpl$SyntacticImport$RenameSelector$ RenameSelector() {
            if (this.RenameSelector$module == null) {
               this.RenameSelector$lzycompute$1();
            }

            return this.RenameSelector$module;
         }

         private ReificationSupport$ReificationSupportImpl$SyntacticImport$UnimportSelector$ UnimportSelector() {
            if (this.UnimportSelector$module == null) {
               this.UnimportSelector$lzycompute$1();
            }

            return this.UnimportSelector$module;
         }

         public ReificationSupport$ReificationSupportImpl$SyntacticImport$WildcardSelectorRepr$ scala$reflect$internal$ReificationSupport$ReificationSupportImpl$SyntacticImport$$WildcardSelectorRepr() {
            if (this.WildcardSelectorRepr$module == null) {
               this.WildcardSelectorRepr$lzycompute$1();
            }

            return this.WildcardSelectorRepr$module;
         }

         public ReificationSupport$ReificationSupportImpl$SyntacticImport$NameSelectorRepr$ scala$reflect$internal$ReificationSupport$ReificationSupportImpl$SyntacticImport$$NameSelectorRepr() {
            if (this.NameSelectorRepr$module == null) {
               this.NameSelectorRepr$lzycompute$1();
            }

            return this.NameSelectorRepr$module;
         }

         public ReificationSupport$ReificationSupportImpl$SyntacticImport$Arrow$ scala$reflect$internal$ReificationSupport$ReificationSupportImpl$SyntacticImport$$Arrow() {
            if (this.Arrow$module == null) {
               this.Arrow$lzycompute$1();
            }

            return this.Arrow$module;
         }

         private ReificationSupport$ReificationSupportImpl$SyntacticImport$RenameSelectorRepr$ RenameSelectorRepr() {
            if (this.RenameSelectorRepr$module == null) {
               this.RenameSelectorRepr$lzycompute$1();
            }

            return this.RenameSelectorRepr$module;
         }

         private ReificationSupport$ReificationSupportImpl$SyntacticImport$UnimportSelectorRepr$ UnimportSelectorRepr() {
            if (this.UnimportSelectorRepr$module == null) {
               this.UnimportSelectorRepr$lzycompute$1();
            }

            return this.UnimportSelectorRepr$module;
         }

         private Position derivedPos(final Trees.Tree t, final int offset) {
            Position var10000 = t.pos();
            NoPosition$ var3 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoPosition();
            if (var10000 == null) {
               if (var3 == null) {
                  return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoPosition();
               }
            } else if (var10000.equals(var3)) {
               return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoPosition();
            }

            return t.pos().withPoint(offset);
         }

         private int derivedOffset(final Position pos) {
            NoPosition$ var2 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoPosition();
            if (pos == null) {
               if (var2 == null) {
                  return -1;
               }
            } else if (pos.equals(var2)) {
               return -1;
            }

            return pos.point();
         }

         public Trees.Import apply(final Trees.Tree expr, final List selectors) {
            if (selectors == null) {
               throw null;
            } else {
               Object var10000;
               if (selectors == scala.collection.immutable.Nil..MODULE$) {
                  var10000 = scala.collection.immutable.Nil..MODULE$;
               } else {
                  Trees.Tree var8 = (Trees.Tree)selectors.head();
                  scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$apply$10(this, var8), scala.collection.immutable.Nil..MODULE$);
                  scala.collection.immutable..colon.colon map_t = map_h;

                  for(List map_rest = (List)selectors.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                     var8 = (Trees.Tree)map_rest.head();
                     scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$apply$10(this, var8), scala.collection.immutable.Nil..MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var10000 = map_h;
               }

               Object var9 = null;
               Object var10 = null;
               Object var11 = null;
               Object var12 = null;
               List importSelectors = (List)var10000;
               return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Import(expr, importSelectors);
            }
         }

         public Some unapply(final Trees.Import imp) {
            List var10000 = imp.selectors();
            if (var10000 == null) {
               throw null;
            } else {
               List map_this = var10000;
               Object var15;
               if (map_this == scala.collection.immutable.Nil..MODULE$) {
                  var15 = scala.collection.immutable.Nil..MODULE$;
               } else {
                  Trees.ImportSelector var8 = (Trees.ImportSelector)map_this.head();
                  scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$unapply$15(this, imp, var8), scala.collection.immutable.Nil..MODULE$);
                  scala.collection.immutable..colon.colon map_t = map_h;

                  for(List map_rest = (List)map_this.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                     var8 = (Trees.ImportSelector)map_rest.head();
                     scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$unapply$15(this, imp, var8), scala.collection.immutable.Nil..MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var15 = map_h;
               }

               Object var9 = null;
               Object var10 = null;
               Object var11 = null;
               Object var12 = null;
               Object var13 = null;
               List selectors = (List)var15;
               return new Some(new Tuple2(imp.expr(), selectors));
            }
         }

         // $FF: synthetic method
         public ReificationSupportImpl scala$reflect$internal$ReificationSupport$ReificationSupportImpl$SyntacticImport$$$outer() {
            return this.$outer;
         }

         private final void WildcardSelector$lzycompute$1() {
            synchronized(this){}

            try {
               if (this.WildcardSelector$module == null) {
                  this.WildcardSelector$module = new ReificationSupport$ReificationSupportImpl$SyntacticImport$WildcardSelector$(this);
               }
            } catch (Throwable var2) {
               throw var2;
            }

         }

         private final void NameSelector$lzycompute$1() {
            synchronized(this){}

            try {
               if (this.NameSelector$module == null) {
                  this.NameSelector$module = new ReificationSupport$ReificationSupportImpl$SyntacticImport$NameSelector$(this);
               }
            } catch (Throwable var2) {
               throw var2;
            }

         }

         private final void RenameSelector$lzycompute$1() {
            synchronized(this){}

            try {
               if (this.RenameSelector$module == null) {
                  this.RenameSelector$module = new ReificationSupport$ReificationSupportImpl$SyntacticImport$RenameSelector$(this);
               }
            } catch (Throwable var2) {
               throw var2;
            }

         }

         private final void UnimportSelector$lzycompute$1() {
            synchronized(this){}

            try {
               if (this.UnimportSelector$module == null) {
                  this.UnimportSelector$module = new ReificationSupport$ReificationSupportImpl$SyntacticImport$UnimportSelector$(this);
               }
            } catch (Throwable var2) {
               throw var2;
            }

         }

         private final void WildcardSelectorRepr$lzycompute$1() {
            synchronized(this){}

            try {
               if (this.WildcardSelectorRepr$module == null) {
                  this.WildcardSelectorRepr$module = new ReificationSupport$ReificationSupportImpl$SyntacticImport$WildcardSelectorRepr$(this);
               }
            } catch (Throwable var2) {
               throw var2;
            }

         }

         private final void NameSelectorRepr$lzycompute$1() {
            synchronized(this){}

            try {
               if (this.NameSelectorRepr$module == null) {
                  this.NameSelectorRepr$module = new ReificationSupport$ReificationSupportImpl$SyntacticImport$NameSelectorRepr$(this);
               }
            } catch (Throwable var2) {
               throw var2;
            }

         }

         private final void Arrow$lzycompute$1() {
            synchronized(this){}

            try {
               if (this.Arrow$module == null) {
                  this.Arrow$module = new ReificationSupport$ReificationSupportImpl$SyntacticImport$Arrow$(this);
               }
            } catch (Throwable var2) {
               throw var2;
            }

         }

         private final void RenameSelectorRepr$lzycompute$1() {
            synchronized(this){}

            try {
               if (this.RenameSelectorRepr$module == null) {
                  this.RenameSelectorRepr$module = new ReificationSupport$ReificationSupportImpl$SyntacticImport$RenameSelectorRepr$(this);
               }
            } catch (Throwable var2) {
               throw var2;
            }

         }

         private final void UnimportSelectorRepr$lzycompute$1() {
            synchronized(this){}

            try {
               if (this.UnimportSelectorRepr$module == null) {
                  this.UnimportSelectorRepr$module = new ReificationSupport$ReificationSupportImpl$SyntacticImport$UnimportSelectorRepr$(this);
               }
            } catch (Throwable var2) {
               throw var2;
            }

         }

         // $FF: synthetic method
         public static final Trees.ImportSelector $anonfun$apply$10(final SyntacticImport$ $this, final Trees.Tree x0$1) {
            if (x0$1 != null) {
               Option var2 = $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$SyntacticImport$$WildcardSelectorRepr().unapply(x0$1);
               if (!var2.isEmpty()) {
                  Position pos = (Position)var2.get();
                  return $this.WildcardSelector().apply($this.derivedOffset(pos));
               }
            }

            if (x0$1 != null) {
               Option var4 = $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$SyntacticImport$$NameSelectorRepr().unapply(x0$1);
               if (!var4.isEmpty()) {
                  Names.TermName name = (Names.TermName)((Tuple2)var4.get())._1();
                  Position pos = (Position)((Tuple2)var4.get())._2();
                  return $this.NameSelector().apply(name, $this.derivedOffset(pos));
               }
            }

            if (x0$1 != null) {
               Option var7 = $this.RenameSelectorRepr().unapply(x0$1);
               if (!var7.isEmpty()) {
                  Names.TermName name1 = (Names.TermName)((Tuple4)var7.get())._1();
                  Position pos1 = (Position)((Tuple4)var7.get())._2();
                  Names.TermName name2 = (Names.TermName)((Tuple4)var7.get())._3();
                  Position pos2 = (Position)((Tuple4)var7.get())._4();
                  return $this.RenameSelector().apply(name1, $this.derivedOffset(pos1), name2, $this.derivedOffset(pos2));
               }
            }

            if (x0$1 != null) {
               Option var12 = $this.UnimportSelectorRepr().unapply(x0$1);
               if (!var12.isEmpty()) {
                  Names.TermName name = (Names.TermName)((Tuple2)var12.get())._1();
                  Position pos = (Position)((Tuple2)var12.get())._2();
                  return $this.UnimportSelector().apply(name, $this.derivedOffset(pos));
               }
            }

            throw new IllegalArgumentException((new StringBuilder(38)).append($this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw(x0$1, $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$2(), $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$3(), $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$4(), $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$5(), $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$6(), $this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().showRaw$default$7())).append(" doesn't correspond to import selector").toString());
         }

         // $FF: synthetic method
         public static final Trees.Tree $anonfun$unapply$15(final SyntacticImport$ $this, final Trees.Import imp$1, final Trees.ImportSelector x0$1) {
            if (x0$1 != null) {
               Option var3 = $this.WildcardSelector().unapply(x0$1);
               if (!var3.isEmpty()) {
                  int offset = BoxesRunTime.unboxToInt(var3.get());
                  return $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$SyntacticImport$$WildcardSelectorRepr().apply($this.derivedPos(imp$1, offset));
               }
            }

            if (x0$1 != null) {
               Option var5 = $this.NameSelector().unapply(x0$1);
               if (!var5.isEmpty()) {
                  Names.TermName name = (Names.TermName)((Tuple2)var5.get())._1();
                  int offset = ((Tuple2)var5.get())._2$mcI$sp();
                  return $this.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$SyntacticImport$$NameSelectorRepr().apply(name, $this.derivedPos(imp$1, offset));
               }
            }

            if (x0$1 != null) {
               Option var8 = $this.RenameSelector().unapply(x0$1);
               if (!var8.isEmpty()) {
                  Names.TermName name1 = (Names.TermName)((Tuple4)var8.get())._1();
                  int offset1 = BoxesRunTime.unboxToInt(((Tuple4)var8.get())._2());
                  Names.TermName name2 = (Names.TermName)((Tuple4)var8.get())._3();
                  int offset2 = BoxesRunTime.unboxToInt(((Tuple4)var8.get())._4());
                  return $this.RenameSelectorRepr().apply(name1, $this.derivedPos(imp$1, offset1), name2, $this.derivedPos(imp$1, offset2));
               }
            }

            if (x0$1 != null) {
               Option var13 = $this.UnimportSelector().unapply(x0$1);
               if (!var13.isEmpty()) {
                  Names.TermName name = (Names.TermName)((Tuple2)var13.get())._1();
                  int offset = ((Tuple2)var13.get())._2$mcI$sp();
                  return $this.UnimportSelectorRepr().apply(name, $this.derivedPos(imp$1, offset));
               }
            }

            throw new MatchError(x0$1);
         }

         public SyntacticImport$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticSelectType$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticSelectTypeExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Select apply(final Trees.Tree qual, final Names.TypeName name) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Select(qual, name);
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.$outer.MaybeTypeTreeOriginal().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)var2.value();
                  if (var3 instanceof Trees.Select) {
                     Trees.Select var4 = (Trees.Select)var3;
                     Trees.Tree qual = var4.qualifier();
                     Names.Name name = var4.name();
                     if (name instanceof Names.TypeName) {
                        Names.TypeName var7 = (Names.TypeName)name;
                        return new Some(new Tuple2(qual, var7));
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticSelectType$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticSelectTerm$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticSelectTermExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Select apply(final Trees.Tree qual, final Names.TermName name) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Select(qual, name);
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree instanceof Trees.Select) {
               Trees.Select var2 = (Trees.Select)tree;
               Trees.Tree qual = var2.qualifier();
               Names.Name name = var2.name();
               if (name instanceof Names.TermName) {
                  Names.TermName var5 = (Names.TermName)name;
                  return new Some(new Tuple2(qual, var5));
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticSelectTerm$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticCompoundType$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticCompoundTypeExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.CompoundTypeTree apply(final List parents, final List defns) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new CompoundTypeTree(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Template(this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkParents((Trees.Modifiers)this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().NoMods(), parents, this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().gen().mkParents$default$3()), this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().noSelfType(), defns));
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.$outer.MaybeTypeTreeOriginal().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)var2.value();
                  if (var3 instanceof Trees.CompoundTypeTree) {
                     Trees.Template var4 = ((Trees.CompoundTypeTree)var3).templ();
                     if (var4 != null) {
                        List parents = var4.parents();
                        List defns = var4.body();
                        return new Some(new Tuple2(parents, defns));
                     }
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticCompoundType$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticSingletonType$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacitcSingletonTypeExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.SingletonTypeTree apply(final Trees.Tree ref) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new SingletonTypeTree(ref);
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.$outer.MaybeTypeTreeOriginal().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)var2.value();
                  if (var3 instanceof Trees.SingletonTypeTree) {
                     Trees.Tree ref = ((Trees.SingletonTypeTree)var3).ref();
                     return new Some(ref);
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticSingletonType$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticTypeProjection$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticTypeProjectionExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.SelectFromTypeTree apply(final Trees.Tree qual, final Names.TypeName name) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new SelectFromTypeTree(qual, name);
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.$outer.MaybeTypeTreeOriginal().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)var2.value();
                  if (var3 instanceof Trees.SelectFromTypeTree) {
                     Trees.SelectFromTypeTree var4 = (Trees.SelectFromTypeTree)var3;
                     Trees.Tree qual = var4.qualifier();
                     Names.TypeName name = var4.name();
                     return new Some(new Tuple2(qual, name));
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticTypeProjection$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticAnnotatedType$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticAnnotatedTypeExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.Annotated apply(final Trees.Tree tpt, final Trees.Tree annot) {
            return this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer().new Annotated(annot, tpt);
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.$outer.MaybeTypeTreeOriginal().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)var2.value();
                  if (var3 instanceof Trees.Annotated) {
                     Trees.Annotated var4 = (Trees.Annotated)var3;
                     Trees.Tree annot = var4.annot();
                     Trees.Tree tpt = var4.arg();
                     return new Some(new Tuple2(tpt, annot));
                  }
               }
            }

            return scala.None..MODULE$;
         }

         public SyntacticAnnotatedType$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }

      public class SyntacticExistentialType$ implements scala.reflect.api.Internals.ReificationSupportApi.SyntacticExistentialTypeExtractor {
         // $FF: synthetic field
         private final ReificationSupportImpl $outer;

         public Trees.ExistentialTypeTree apply(final Trees.Tree tpt, final List where) {
            Trees.ExistentialTypeTree var10000 = new Trees.ExistentialTypeTree;
            SymbolTable var10002 = this.$outer.scala$reflect$internal$ReificationSupport$ReificationSupportImpl$$$outer();
            if (where == null) {
               throw null;
            } else {
               Object var10004;
               if (where == scala.collection.immutable.Nil..MODULE$) {
                  var10004 = scala.collection.immutable.Nil..MODULE$;
               } else {
                  scala.collection.immutable..colon.colon map_h = new scala.collection.immutable..colon.colon($anonfun$apply$11((Trees.Tree)where.head()), scala.collection.immutable.Nil..MODULE$);
                  scala.collection.immutable..colon.colon map_t = map_h;

                  for(List map_rest = (List)where.tail(); map_rest != scala.collection.immutable.Nil..MODULE$; map_rest = (List)map_rest.tail()) {
                     scala.collection.immutable..colon.colon map_nx = new scala.collection.immutable..colon.colon($anonfun$apply$11((Trees.Tree)map_rest.head()), scala.collection.immutable.Nil..MODULE$);
                     map_t.next_$eq(map_nx);
                     map_t = map_nx;
                  }

                  Statics.releaseFence();
                  var10004 = map_h;
               }

               Object var7 = null;
               Object var8 = null;
               Object var9 = null;
               Object var10 = null;
               var10000.<init>(tpt, (List)var10004);
               return var10000;
            }
         }

         public Option unapply(final Trees.Tree tree) {
            if (tree != null) {
               Some var2 = this.$outer.MaybeTypeTreeOriginal().unapply(tree);
               if (!var2.isEmpty()) {
                  Trees.Tree var3 = (Trees.Tree)var2.value();
                  if (var3 instanceof Trees.ExistentialTypeTree) {
                     Trees.ExistentialTypeTree var4 = (Trees.ExistentialTypeTree)var3;
                     Trees.Tree tpt = var4.tpt();
                     List where = var4.whereClauses();
                     return new Some(new Tuple2(tpt, where));
                  }
               }
            }

            return scala.None..MODULE$;
         }

         // $FF: synthetic method
         public static final Trees.MemberDef $anonfun$apply$11(final Trees.Tree x0$1) {
            if (x0$1 instanceof Trees.MemberDef) {
               return (Trees.MemberDef)x0$1;
            } else {
               throw new IllegalArgumentException((new StringBuilder(32)).append(x0$1).append(" is not legal forSome definition").toString());
            }
         }

         public SyntacticExistentialType$() {
            if (ReificationSupportImpl.this == null) {
               throw null;
            } else {
               this.$outer = ReificationSupportImpl.this;
               super();
            }
         }
      }
   }
}
